// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly DECLARATIVES_IN_A_AREA = 1;
	public static readonly END_IN_A_AREA = 2;
	public static readonly IDENTIFICATION_IN_A_AREA = 3;
	public static readonly ACCEPT = 4;
	public static readonly ACCESS = 5;
	public static readonly ADD = 6;
	public static readonly ADVANCING = 7;
	public static readonly AFTER = 8;
	public static readonly ALL = 9;
	public static readonly ALPHA = 10;
	public static readonly ALPHABET = 11;
	public static readonly ALPHABETIC = 12;
	public static readonly ALPHABETIC_LOWER = 13;
	public static readonly ALPHABETIC_UPPER = 14;
	public static readonly ALSO = 15;
	public static readonly ALTER = 16;
	public static readonly ALTERNATE = 17;
	public static readonly AND = 18;
	public static readonly APPLY = 19;
	public static readonly ARE = 20;
	public static readonly AREA = 21;
	public static readonly AREAS = 22;
	public static readonly ARGUMENT_NUMBER = 23;
	public static readonly ARGUMENT_VALUE = 24;
	public static readonly ARITHMETIC = 25;
	public static readonly ASCENDING = 26;
	public static readonly ASCII = 27;
	public static readonly ASSIGN = 28;
	public static readonly AT = 29;
	public static readonly AUTHOR = 30;
	public static readonly AUTO = 31;
	public static readonly AUTOMATIC = 32;
	public static readonly AUTOTERMINATE = 33;
	public static readonly BACKGROUND_COLOR = 34;
	public static readonly BEFORE = 35;
	public static readonly BELL = 36;
	public static readonly BINARY = 37;
	public static readonly BINARY_CHAR = 38;
	public static readonly BINARY_DOUBLE = 39;
	public static readonly BINARY_LONG = 40;
	public static readonly BINARY_SHORT = 41;
	public static readonly BLANK = 42;
	public static readonly BLINK = 43;
	public static readonly BLINKING = 44;
	public static readonly BLOCK = 45;
	public static readonly BOLD = 46;
	public static readonly BOTTOM = 47;
	public static readonly BY = 48;
	public static readonly C01 = 49;
	public static readonly CALL = 50;
	public static readonly CANCEL = 51;
	public static readonly CARD_READER = 52;
	public static readonly CF = 53;
	public static readonly CH = 54;
	public static readonly CHARACTER = 55;
	public static readonly CHARACTERS = 56;
	public static readonly CLASS = 57;
	public static readonly CLOCK_UNITS = 58;
	public static readonly CLOSE = 59;
	public static readonly CODE = 60;
	public static readonly CODE_SET = 61;
	public static readonly COLLATING = 62;
	public static readonly COLUMN = 63;
	public static readonly COMMA = 64;
	public static readonly COMMON = 65;
	public static readonly COMP = 66;
	public static readonly COMPUTATIONAL = 67;
	public static readonly COMPUTATIONAL_1 = 68;
	public static readonly COMPUTATIONAL_2 = 69;
	public static readonly COMPUTATIONAL_3 = 70;
	public static readonly COMPUTATIONAL_4 = 71;
	public static readonly COMPUTATIONAL_5 = 72;
	public static readonly COMPUTATIONAL_X = 73;
	public static readonly COMPUTE = 74;
	public static readonly COMP_1 = 75;
	public static readonly COMP_2 = 76;
	public static readonly COMP_3 = 77;
	public static readonly COMP_4 = 78;
	public static readonly COMP_5 = 79;
	public static readonly COMP_X = 80;
	public static readonly CONFIGURATION = 81;
	public static readonly CONSOLE = 82;
	public static readonly CONTAINS = 83;
	public static readonly CONTENT = 84;
	public static readonly CONTIGUOUS = 85;
	public static readonly CONTIGUOUS_BEST_TRY = 86;
	public static readonly CONTINUE = 87;
	public static readonly CONTROL = 88;
	public static readonly CONTROLS = 89;
	public static readonly CONVERSION = 90;
	public static readonly CONVERTING = 91;
	public static readonly COPY = 92;
	public static readonly CORR = 93;
	public static readonly CORRESPONDING = 94;
	public static readonly CRT = 95;
	public static readonly CURRENCY = 96;
	public static readonly CURRENT = 97;
	public static readonly CURSOR = 98;
	public static readonly DATA = 99;
	public static readonly DATE = 100;
	public static readonly DATE_COMPILED = 101;
	public static readonly DATE_WRITTEN = 102;
	public static readonly DAY = 103;
	public static readonly DAY_OF_WEEK = 104;
	public static readonly DE = 105;
	public static readonly DEBUGGING = 106;
	public static readonly DECIMAL_POINT = 107;
	public static readonly DECLARATIVES = 108;
	public static readonly DEFAULT = 109;
	public static readonly DEFERRED_WRITE = 110;
	public static readonly DELETE = 111;
	public static readonly DELIMITER = 112;
	public static readonly DEPENDING = 113;
	public static readonly DESCENDING = 114;
	public static readonly DESCRIPTOR = 115;
	public static readonly DETAIL = 116;
	public static readonly DISK = 117;
	public static readonly DISPLAY = 118;
	public static readonly DIVIDE = 119;
	public static readonly DIVISION = 120;
	public static readonly DOWN = 121;
	public static readonly DUPLICATES = 122;
	public static readonly DYNAMIC = 123;
	public static readonly EBCDIC = 124;
	public static readonly ECHO = 125;
	public static readonly EDITING = 126;
	public static readonly END = 127;
	public static readonly END_ACCEPT = 128;
	public static readonly END_ADD = 129;
	public static readonly END_CALL = 130;
	public static readonly END_COMPUTE = 131;
	public static readonly END_DELETE = 132;
	public static readonly END_DISPLAY = 133;
	public static readonly END_DIVIDE = 134;
	public static readonly END_EVALUATE = 135;
	public static readonly END_IF = 136;
	public static readonly END_MULTIPLY = 137;
	public static readonly END_OF_PAGE = 138;
	public static readonly END_PERFORM = 139;
	public static readonly END_READ = 140;
	public static readonly END_RETURN = 141;
	public static readonly END_REWRITE = 142;
	public static readonly END_SEARCH = 143;
	public static readonly END_START = 144;
	public static readonly END_STRING = 145;
	public static readonly END_SUBTRACT = 146;
	public static readonly END_UNSTRING = 147;
	public static readonly END_WRITE = 148;
	public static readonly ENVIRONMENT = 149;
	public static readonly ENVIRONMENT_NAME = 150;
	public static readonly ENVIRONMENT_VALUE = 151;
	public static readonly EOL = 152;
	public static readonly EOS = 153;
	public static readonly EQUAL = 154;
	public static readonly ERASE = 155;
	public static readonly ERROR = 156;
	public static readonly EVALUATE = 157;
	public static readonly EVERY = 158;
	public static readonly EXCEPTION = 159;
	public static readonly EXCLUSIVE = 160;
	public static readonly EXIT = 161;
	public static readonly EXTEND = 162;
	public static readonly EXTENSION = 163;
	public static readonly EXTERNAL = 164;
	public static readonly FAILURE = 165;
	public static readonly FALSE = 166;
	public static readonly FD = 167;
	public static readonly FILE = 168;
	public static readonly FILE_CONTROL = 169;
	public static readonly FILE_ID = 170;
	public static readonly FILLER = 171;
	public static readonly FILL_SIZE = 172;
	public static readonly FINAL = 173;
	public static readonly FIRST = 174;
	public static readonly FLOAT_EXTENDED = 175;
	public static readonly FLOAT_LONG = 176;
	public static readonly FLOAT_SHORT = 177;
	public static readonly FOOTING = 178;
	public static readonly FOR = 179;
	public static readonly FOREGROUND_COLOR = 180;
	public static readonly FROM = 181;
	public static readonly FULL = 182;
	public static readonly FUNCTION = 183;
	public static readonly GENERATE = 184;
	public static readonly GIVING = 185;
	public static readonly GLOBAL = 186;
	public static readonly GO = 187;
	public static readonly GREATER = 188;
	public static readonly GROUP = 189;
	public static readonly HEADING = 190;
	public static readonly HIGHLIGHT = 191;
	public static readonly HIGH_VALUE = 192;
	public static readonly HIGH_VALUES = 193;
	public static readonly I64 = 194;
	public static readonly ID = 195;
	public static readonly IDENT = 196;
	public static readonly IDENTIFICATION = 197;
	public static readonly IF = 198;
	public static readonly IN = 199;
	public static readonly INDEX = 200;
	public static readonly INDEXED = 201;
	public static readonly INDICATE = 202;
	public static readonly INITIAL = 203;
	public static readonly INITIALIZE = 204;
	public static readonly INITIATE = 205;
	public static readonly INPUT = 206;
	public static readonly INPUT_OUTPUT = 207;
	public static readonly INSPECT = 208;
	public static readonly INSTALLATION = 209;
	public static readonly INTO = 210;
	public static readonly INVALID = 211;
	public static readonly IS = 212;
	public static readonly I_O = 213;
	public static readonly I_O_CONTROL = 214;
	public static readonly JUST = 215;
	public static readonly JUSTIFIED = 216;
	public static readonly KEY = 217;
	public static readonly LABEL = 218;
	public static readonly LAST = 219;
	public static readonly LEADING = 220;
	public static readonly LEFT = 221;
	public static readonly LESS = 222;
	public static readonly LIMIT = 223;
	public static readonly LIMITS = 224;
	public static readonly LINAGE = 225;
	public static readonly LINE = 226;
	public static readonly LINES = 227;
	public static readonly LINE_PRINTER = 228;
	public static readonly LINKAGE = 229;
	public static readonly LOCK = 230;
	public static readonly LOCK_HOLDING = 231;
	public static readonly LOWLIGHT = 232;
	public static readonly LOW_VALUE = 233;
	public static readonly LOW_VALUES = 234;
	public static readonly MANUAL = 235;
	public static readonly MASS_INSERT = 236;
	public static readonly MEMORY = 237;
	public static readonly MERGE = 238;
	public static readonly MODE = 239;
	public static readonly MODULES = 240;
	public static readonly MOVE = 241;
	public static readonly MULTIPLE = 242;
	public static readonly MULTIPLY = 243;
	public static readonly NATIVE = 244;
	public static readonly NEGATIVE = 245;
	public static readonly NEXT = 246;
	public static readonly NO = 247;
	public static readonly NOT = 248;
	public static readonly NUMBER = 249;
	public static readonly NUMERIC = 250;
	public static readonly OBJECT_COMPUTER = 251;
	public static readonly OCCURS = 252;
	public static readonly OF = 253;
	public static readonly OFF = 254;
	public static readonly OMITTED = 255;
	public static readonly ON = 256;
	public static readonly OPEN = 257;
	public static readonly OPTIONAL = 258;
	public static readonly OPTIONS = 259;
	public static readonly OR = 260;
	public static readonly ORGANIZATION = 261;
	public static readonly OUTPUT = 262;
	public static readonly OVERFLOW = 263;
	public static readonly PACKED_DECIMAL = 264;
	public static readonly PADDING = 265;
	public static readonly PAGE = 266;
	public static readonly PAPER_TAPE_PUNCH = 267;
	public static readonly PAPER_TAPE_READER = 268;
	public static readonly PERFORM = 269;
	public static readonly PF = 270;
	public static readonly PH = 271;
	public static readonly PIC = 272;
	public static readonly PICTURE = 273;
	public static readonly PLUS = 274;
	public static readonly POINTER = 275;
	public static readonly POINTER_64 = 276;
	public static readonly POSITION = 277;
	public static readonly POSITIVE = 278;
	public static readonly PREALLOCATION = 279;
	public static readonly PRINTER = 280;
	public static readonly PRINT_CONTROL = 281;
	public static readonly PROCEDURE = 282;
	public static readonly PROCEED = 283;
	public static readonly PROGRAM = 284;
	public static readonly PROGRAM_ID = 285;
	public static readonly PROTECTED = 286;
	public static readonly QUOTE = 287;
	public static readonly QUOTES = 288;
	public static readonly RANDOM = 289;
	public static readonly RD = 290;
	public static readonly READ = 291;
	public static readonly RECORD = 292;
	public static readonly RECORDS = 293;
	public static readonly REDEFINES = 294;
	public static readonly REEL = 295;
	public static readonly REFERENCE = 296;
	public static readonly RELATIVE = 297;
	public static readonly RELEASE = 298;
	public static readonly REMAINDER = 299;
	public static readonly REMOVAL = 300;
	public static readonly RENAMES = 301;
	public static readonly REPLACE = 302;
	public static readonly REPLACING = 303;
	public static readonly REPORT = 304;
	public static readonly REPORTING = 305;
	public static readonly REPORTS = 306;
	public static readonly REQUIRED = 307;
	public static readonly RERUN = 308;
	public static readonly RESERVE = 309;
	public static readonly RESET = 310;
	public static readonly RETURN = 311;
	public static readonly REVERSED = 312;
	public static readonly REVERSE_VIDEO = 313;
	public static readonly REWIND = 314;
	public static readonly REWRITE = 315;
	public static readonly RF = 316;
	public static readonly RH = 317;
	public static readonly RIGHT = 318;
	public static readonly ROLLBACK = 319;
	public static readonly ROUNDED = 320;
	public static readonly SAME = 321;
	public static readonly SCREEN = 322;
	public static readonly SD = 323;
	public static readonly SEARCH = 324;
	public static readonly SECTION = 325;
	public static readonly SECURE = 326;
	public static readonly SECURITY = 327;
	public static readonly SEGMENT_LIMIT = 328;
	public static readonly SELECT = 329;
	public static readonly SEPARATE = 330;
	public static readonly SEQUENCE = 331;
	public static readonly SEQUENTIAL = 332;
	public static readonly SET = 333;
	public static readonly SIGN = 334;
	public static readonly SIGNED = 335;
	public static readonly SIZE = 336;
	public static readonly SORT = 337;
	public static readonly SORT_MERGE = 338;
	public static readonly SOURCE = 339;
	public static readonly SOURCE_COMPUTER = 340;
	public static readonly SPACE = 341;
	public static readonly SPACES = 342;
	public static readonly SPECIAL_NAMES = 343;
	public static readonly STANDARD = 344;
	public static readonly STANDARD_1 = 345;
	public static readonly STANDARD_2 = 346;
	public static readonly START = 347;
	public static readonly STATUS = 348;
	public static readonly STOP = 349;
	public static readonly STRING = 350;
	public static readonly SUBTRACT = 351;
	public static readonly SUCCESS = 352;
	public static readonly SUM = 353;
	public static readonly SUPPRESS = 354;
	public static readonly SWITCH = 355;
	public static readonly SYMBOL = 356;
	public static readonly SYMBOLIC = 357;
	public static readonly SYNC = 358;
	public static readonly SYNCHRONIZED = 359;
	public static readonly SYSERR = 360;
	public static readonly SYSIN = 361;
	public static readonly SYSOUT = 362;
	public static readonly TALLYING = 363;
	public static readonly TAPE = 364;
	public static readonly TERMINATE = 365;
	public static readonly THAN = 366;
	public static readonly THROUGH = 367;
	public static readonly THRU = 368;
	public static readonly TIME = 369;
	public static readonly TIMES = 370;
	public static readonly TO = 371;
	public static readonly TOP = 372;
	public static readonly TRAILING = 373;
	public static readonly TRUE = 374;
	public static readonly TYPE = 375;
	public static readonly UNDERLINE = 376;
	public static readonly UNDERLINED = 377;
	public static readonly UNIT = 378;
	public static readonly UNLOCK = 379;
	public static readonly UNSIGNED = 380;
	public static readonly UNSTRING = 381;
	public static readonly UP = 382;
	public static readonly UPON = 383;
	public static readonly USAGE = 384;
	public static readonly USE = 385;
	public static readonly USING = 386;
	public static readonly VALUE = 387;
	public static readonly VALUES = 388;
	public static readonly VARYING = 389;
	public static readonly VAX = 390;
	public static readonly WHEN = 391;
	public static readonly WINDOW = 392;
	public static readonly WITH = 393;
	public static readonly WORDS = 394;
	public static readonly WORKING_STORAGE = 395;
	public static readonly WRITE = 396;
	public static readonly YYYYDDD = 397;
	public static readonly YYYYMMDD = 398;
	public static readonly ZERO = 399;
	public static readonly ZEROES = 400;
	public static readonly ZEROS = 401;
	public static readonly OTHER = 402;
	public static readonly ANY = 403;
	public static readonly THEN = 404;
	public static readonly SENTENCE = 405;
	public static readonly ELSE = 406;
	public static readonly ALPHANUMERIC = 407;
	public static readonly NUMERIC_EDITED = 408;
	public static readonly ALPHANUMERIC_EDITED = 409;
	public static readonly START_SLASH_ = 410;
	public static readonly START_STAR_ = 411;
	public static readonly EXCLAM_ = 412;
	public static readonly UNDER_ = 413;
	public static readonly PLUS_ = 414;
	public static readonly MINUS_ = 415;
	public static readonly STAR_ = 416;
	public static readonly SLASH_ = 417;
	public static readonly COMMA_ = 418;
	public static readonly SEMI_ = 419;
	public static readonly COLON_ = 420;
	public static readonly EQUAL_ = 421;
	public static readonly LT_ = 422;
	public static readonly LE_ = 423;
	public static readonly GE_ = 424;
	public static readonly GT_ = 425;
	public static readonly LPAREN_ = 426;
	public static readonly RPAREN_ = 427;
	public static readonly LBRACK_ = 428;
	public static readonly RBRACK_ = 429;
	public static readonly POINTER_ = 430;
	public static readonly ATP_ = 431;
	public static readonly DOT_ = 432;
	public static readonly LCURLY_ = 433;
	public static readonly RCURLY_ = 434;
	public static readonly STRING_LITERAL = 435;
	public static readonly NUMERIC_LITERAL = 436;
	public static readonly HEX_LITERAL = 437;
	public static readonly USER_DEFINED_WORD = 438;
	public static readonly START_FOUR_SPACES = 439;
	public static readonly WHITESPACE = 440;
	public static readonly NEWLINE = 441;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_figurative_constant_witout_zero = 1;
	public static readonly RULE_figurative_constant = 2;
	public static readonly RULE_separator = 3;
	public static readonly RULE_arithmetic_separator = 4;
	public static readonly RULE_line_comment = 5;
	public static readonly RULE_program = 6;
	public static readonly RULE_procedure_division = 7;
	public static readonly RULE_end_program = 8;
	public static readonly RULE_procedure_division_header = 9;
	public static readonly RULE_section = 10;
	public static readonly RULE_declaratives = 11;
	public static readonly RULE_declaratives_section = 12;
	public static readonly RULE_declarative_paragraph = 13;
	public static readonly RULE_paragraph = 14;
	public static readonly RULE_sentense = 15;
	public static readonly RULE_use_statement = 16;
	public static readonly RULE_group_data_name = 17;
	public static readonly RULE_use_on = 18;
	public static readonly RULE_section_header = 19;
	public static readonly RULE_paragraph_name = 20;
	public static readonly RULE_section_name = 21;
	public static readonly RULE_using = 22;
	public static readonly RULE_giving = 23;
	public static readonly RULE_procedure_test_line = 24;
	public static readonly RULE_statement = 25;
	public static readonly RULE_initialize_statement = 26;
	public static readonly RULE_replacing = 27;
	public static readonly RULE_init_value = 28;
	public static readonly RULE_fld_name = 29;
	public static readonly RULE_move_statement = 30;
	public static readonly RULE_if_statement = 31;
	public static readonly RULE_generate_statement = 32;
	public static readonly RULE_report_item = 33;
	public static readonly RULE_exit_statement = 34;
	public static readonly RULE_exit_program_statement = 35;
	public static readonly RULE_go_to_statement = 36;
	public static readonly RULE_proc_name = 37;
	public static readonly RULE_evaluate_statement = 38;
	public static readonly RULE_when_condition = 39;
	public static readonly RULE_subj_item = 40;
	public static readonly RULE_divide_statement = 41;
	public static readonly RULE_divide_statement_form1 = 42;
	public static readonly RULE_divide_statement_form2 = 43;
	public static readonly RULE_remaind = 44;
	public static readonly RULE_divide_num = 45;
	public static readonly RULE_display_statement = 46;
	public static readonly RULE_display_statement_form1 = 47;
	public static readonly RULE_display_statement_form2 = 48;
	public static readonly RULE_display_statement_form3 = 49;
	public static readonly RULE_display_statement_form4 = 50;
	public static readonly RULE_src_item = 51;
	public static readonly RULE_display_upon = 52;
	public static readonly RULE_disp_f3_line = 53;
	public static readonly RULE_disp_f3_column = 54;
	public static readonly RULE_display_form1_clause = 55;
	public static readonly RULE_display_form2_clause = 56;
	public static readonly RULE_at_line_number = 57;
	public static readonly RULE_at_column_number = 58;
	public static readonly RULE_out_dest = 59;
	public static readonly RULE_delete_statement = 60;
	public static readonly RULE_continue_statement = 61;
	public static readonly RULE_compute_statement = 62;
	public static readonly RULE_close_statement = 63;
	public static readonly RULE_close_params = 64;
	public static readonly RULE_cancel_statement = 65;
	public static readonly RULE_call_statement = 66;
	public static readonly RULE_call_giving = 67;
	public static readonly RULE_call_using = 68;
	public static readonly RULE_using_arg = 69;
	public static readonly RULE_using_prefix = 70;
	public static readonly RULE_argument = 71;
	public static readonly RULE_prog_name = 72;
	public static readonly RULE_alter_statement = 73;
	public static readonly RULE_alter_new_proc = 74;
	public static readonly RULE_alter_proc = 75;
	public static readonly RULE_add_statement = 76;
	public static readonly RULE_add_grp = 77;
	public static readonly RULE_add_num = 78;
	public static readonly RULE_accept_statement = 79;
	public static readonly RULE_on_exception_variants = 80;
	public static readonly RULE_at_end_variants = 81;
	public static readonly RULE_on_size_variants = 82;
	public static readonly RULE_on_key_variants = 83;
	public static readonly RULE_accept_form6 = 84;
	public static readonly RULE_accept6_item = 85;
	public static readonly RULE_accept_form1 = 86;
	public static readonly RULE_accept_form2 = 87;
	public static readonly RULE_accept_form3 = 88;
	public static readonly RULE_accept_form4 = 89;
	public static readonly RULE_accept_form5 = 90;
	public static readonly RULE_accept_at = 91;
	public static readonly RULE_accept_at_line = 92;
	public static readonly RULE_accept_at_column = 93;
	public static readonly RULE_accept_form4_clause = 94;
	public static readonly RULE_accept_form3_clause = 95;
	public static readonly RULE_key_dest_item = 96;
	public static readonly RULE_def_value = 97;
	public static readonly RULE_protected_value = 98;
	public static readonly RULE_prot_fill_lit = 99;
	public static readonly RULE_prot_size_value = 100;
	public static readonly RULE_number_value = 101;
	public static readonly RULE_date_time = 102;
	public static readonly RULE_dest_item = 103;
	public static readonly RULE_input_source = 104;
	public static readonly RULE_at_end = 105;
	public static readonly RULE_on_exception = 106;
	public static readonly RULE_on_size = 107;
	public static readonly RULE_on_key = 108;
	public static readonly RULE_data_division = 109;
	public static readonly RULE_file_section = 110;
	public static readonly RULE_working_storage_section = 111;
	public static readonly RULE_linkage_section = 112;
	public static readonly RULE_report_section = 113;
	public static readonly RULE_screen_section = 114;
	public static readonly RULE_file_description_entry = 115;
	public static readonly RULE_sort_merge_file_description_entry = 116;
	public static readonly RULE_report_description_entry = 117;
	public static readonly RULE_fd_clause = 118;
	public static readonly RULE_record_description_entry = 119;
	public static readonly RULE_data_description_entry = 120;
	public static readonly RULE_level_number = 121;
	public static readonly RULE_data_description_clause = 122;
	public static readonly RULE_renames = 123;
	public static readonly RULE_rename_start = 124;
	public static readonly RULE_rename_end = 125;
	public static readonly RULE_value_is = 126;
	public static readonly RULE_value_is_definition = 127;
	public static readonly RULE_value_is_definition_part = 128;
	public static readonly RULE_value_is_definition_thru = 129;
	public static readonly RULE_external_name = 130;
	public static readonly RULE_ref_data_name = 131;
	public static readonly RULE_value_is_literal = 132;
	public static readonly RULE_occurs = 133;
	public static readonly RULE_indexed_by = 134;
	public static readonly RULE_ind_name = 135;
	public static readonly RULE_key_is = 136;
	public static readonly RULE_key_name = 137;
	public static readonly RULE_times_definition = 138;
	public static readonly RULE_table_size = 139;
	public static readonly RULE_min_times = 140;
	public static readonly RULE_max_times = 141;
	public static readonly RULE_report_group_description_entry = 142;
	public static readonly RULE_report_group_data_description = 143;
	public static readonly RULE_report_group_data_description_clause = 144;
	public static readonly RULE_sign_is = 145;
	public static readonly RULE_sum = 146;
	public static readonly RULE_control_foot_name = 147;
	public static readonly RULE_detail_report_group_name = 148;
	public static readonly RULE_sum_name = 149;
	public static readonly RULE_source_name = 150;
	public static readonly RULE_column_number = 151;
	public static readonly RULE_type_is_definition = 152;
	public static readonly RULE_type_control_name = 153;
	public static readonly RULE_next_group_definition = 154;
	public static readonly RULE_line_num_definition = 155;
	public static readonly RULE_line_num = 156;
	public static readonly RULE_rd_clause = 157;
	public static readonly RULE_footing_line_rd = 158;
	public static readonly RULE_last_detail_line = 159;
	public static readonly RULE_first_detail_line = 160;
	public static readonly RULE_heading_line = 161;
	public static readonly RULE_page_size_rd = 162;
	public static readonly RULE_control_name = 163;
	public static readonly RULE_report_code = 164;
	public static readonly RULE_usage = 165;
	public static readonly RULE_usage_definition = 166;
	public static readonly RULE_picture = 167;
	public static readonly RULE_character_string = 168;
	public static readonly RULE_char_str_part = 169;
	public static readonly RULE_other_data_item = 170;
	public static readonly RULE_data_name = 171;
	public static readonly RULE_sd_clause = 172;
	public static readonly RULE_report_is = 173;
	public static readonly RULE_report_name = 174;
	public static readonly RULE_linage = 175;
	public static readonly RULE_bottom_lines = 176;
	public static readonly RULE_top_lines = 177;
	public static readonly RULE_footing_line = 178;
	public static readonly RULE_page_size = 179;
	public static readonly RULE_data_rec = 180;
	public static readonly RULE_rec_name = 181;
	public static readonly RULE_value_of_id = 182;
	public static readonly RULE_value_of_id_definition = 183;
	public static readonly RULE_label = 184;
	public static readonly RULE_record = 185;
	public static readonly RULE_record_definition = 186;
	public static readonly RULE_depending_item = 187;
	public static readonly RULE_shortest_rec = 188;
	public static readonly RULE_longest_rec = 189;
	public static readonly RULE_screen_description_entry = 190;
	public static readonly RULE_screen_name = 191;
	public static readonly RULE_screen_description_clause = 192;
	public static readonly RULE_scr_pic_using = 193;
	public static readonly RULE_scr_pic_from = 194;
	public static readonly RULE_scr_pic_to = 195;
	public static readonly RULE_nonnumeric_literal = 196;
	public static readonly RULE_src_number = 197;
	public static readonly RULE_color_num = 198;
	public static readonly RULE_identification_division = 199;
	public static readonly RULE_identification_division_paragraph = 200;
	public static readonly RULE_program_id = 201;
	public static readonly RULE_program_name = 202;
	public static readonly RULE_is_program = 203;
	public static readonly RULE_with_ident = 204;
	public static readonly RULE_ident_string = 205;
	public static readonly RULE_comment_entry = 206;
	public static readonly RULE_author = 207;
	public static readonly RULE_installation = 208;
	public static readonly RULE_date_written = 209;
	public static readonly RULE_date_compiled = 210;
	public static readonly RULE_security = 211;
	public static readonly RULE_options_ = 212;
	public static readonly RULE_arithmetic = 213;
	public static readonly RULE_environment_division = 214;
	public static readonly RULE_configuration_section = 215;
	public static readonly RULE_input_output_section = 216;
	public static readonly RULE_source_computer = 217;
	public static readonly RULE_computer_type = 218;
	public static readonly RULE_with_debugging = 219;
	public static readonly RULE_object_computer = 220;
	public static readonly RULE_memory_size = 221;
	public static readonly RULE_memory_size_amount = 222;
	public static readonly RULE_memory_size_unit = 223;
	public static readonly RULE_program_collating = 224;
	public static readonly RULE_alpha_name = 225;
	public static readonly RULE_segment_limit = 226;
	public static readonly RULE_segment_number = 227;
	public static readonly RULE_special_names = 228;
	public static readonly RULE_special_names_content = 229;
	public static readonly RULE_qualified_data_item = 230;
	public static readonly RULE_currency = 231;
	public static readonly RULE_currency_definition = 232;
	public static readonly RULE_literal_7 = 233;
	public static readonly RULE_literal_8 = 234;
	public static readonly RULE_class_ = 235;
	public static readonly RULE_class_name = 236;
	public static readonly RULE_user_class = 237;
	public static readonly RULE_symbolic_chars = 238;
	public static readonly RULE_symb_ch_definition = 239;
	public static readonly RULE_symb_ch_def_clause = 240;
	public static readonly RULE_symb_ch_def_in_alphabet = 241;
	public static readonly RULE_symbol_char = 242;
	public static readonly RULE_char_val = 243;
	public static readonly RULE_alphabet = 244;
	public static readonly RULE_alpha_value = 245;
	public static readonly RULE_user_alpha = 246;
	public static readonly RULE_first_literal = 247;
	public static readonly RULE_last_literal = 248;
	public static readonly RULE_same_literal = 249;
	public static readonly RULE_switch_ = 250;
	public static readonly RULE_switch_clause_on = 251;
	public static readonly RULE_switch_clause_off = 252;
	public static readonly RULE_cond_name = 253;
	public static readonly RULE_switch_name = 254;
	public static readonly RULE_switch_num = 255;
	public static readonly RULE_top_of_page_name = 256;
	public static readonly RULE_predefined_device = 257;
	public static readonly RULE_device_name = 258;
	public static readonly RULE_arg_env = 259;
	public static readonly RULE_arg_env_name = 260;
	public static readonly RULE_file_control = 261;
	public static readonly RULE_select = 262;
	public static readonly RULE_file_status = 263;
	public static readonly RULE_file_stat = 264;
	public static readonly RULE_record_key = 265;
	public static readonly RULE_record_key_definition = 266;
	public static readonly RULE_access_mode = 267;
	public static readonly RULE_reserve = 268;
	public static readonly RULE_reserve_num = 269;
	public static readonly RULE_record_delimiter = 270;
	public static readonly RULE_padding = 271;
	public static readonly RULE_pad_char = 272;
	public static readonly RULE_organization = 273;
	public static readonly RULE_lock_mode = 274;
	public static readonly RULE_lock_mode_definition = 275;
	public static readonly RULE_code_set = 276;
	public static readonly RULE_block_contains = 277;
	public static readonly RULE_smallest_block = 278;
	public static readonly RULE_blocksize = 279;
	public static readonly RULE_assign_to = 280;
	public static readonly RULE_assign_to_definition = 281;
	public static readonly RULE_file_spec = 282;
	public static readonly RULE_file_name = 283;
	public static readonly RULE_i_o_control = 284;
	public static readonly RULE_multiple_file = 285;
	public static readonly RULE_multiple_file_definition = 286;
	public static readonly RULE_multiple_file_name = 287;
	public static readonly RULE_pos_integer = 288;
	public static readonly RULE_rerun = 289;
	public static readonly RULE_rerun_definition = 290;
	public static readonly RULE_clock_count = 291;
	public static readonly RULE_condition_name = 292;
	public static readonly RULE_rerun_def_file = 293;
	public static readonly RULE_rec_count = 294;
	public static readonly RULE_same = 295;
	public static readonly RULE_same_area_file = 296;
	public static readonly RULE_apply = 297;
	public static readonly RULE_apply_definition = 298;
	public static readonly RULE_window_ptrs = 299;
	public static readonly RULE_preall_amt = 300;
	public static readonly RULE_extend_amt = 301;
	public static readonly RULE_arithmetic_expression = 302;
	public static readonly RULE_constant = 303;
	public static readonly RULE_binary_arithmetic_operator = 304;
	public static readonly RULE_unary_arithmetic_operator = 305;
	public static readonly RULE_logic_expression = 306;
	public static readonly RULE_success_failure_condition = 307;
	public static readonly RULE_logic_condition = 308;
	public static readonly RULE_logic_operation = 309;
	public static readonly RULE_sign_condition = 310;
	public static readonly RULE_sign_condition_name = 311;
	public static readonly RULE_class_condition = 312;
	public static readonly RULE_class_condition_name = 313;
	public static readonly RULE_condition_operator = 314;
	public static readonly RULE_identifier_result = 315;
	public static readonly RULE_identifier = 316;
	public static readonly RULE_arguments = 317;
	public static readonly RULE_subscripting = 318;
	public static readonly RULE_reference_modification = 319;
	public static readonly RULE_leftmost_character_position = 320;
	public static readonly RULE_length = 321;
	public static readonly RULE_function_name = 322;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "figurative_constant_witout_zero", "figurative_constant", 
		"separator", "arithmetic_separator", "line_comment", "program", "procedure_division", 
		"end_program", "procedure_division_header", "section", "declaratives", 
		"declaratives_section", "declarative_paragraph", "paragraph", "sentense", 
		"use_statement", "group_data_name", "use_on", "section_header", "paragraph_name", 
		"section_name", "using", "giving", "procedure_test_line", "statement", 
		"initialize_statement", "replacing", "init_value", "fld_name", "move_statement", 
		"if_statement", "generate_statement", "report_item", "exit_statement", 
		"exit_program_statement", "go_to_statement", "proc_name", "evaluate_statement", 
		"when_condition", "subj_item", "divide_statement", "divide_statement_form1", 
		"divide_statement_form2", "remaind", "divide_num", "display_statement", 
		"display_statement_form1", "display_statement_form2", "display_statement_form3", 
		"display_statement_form4", "src_item", "display_upon", "disp_f3_line", 
		"disp_f3_column", "display_form1_clause", "display_form2_clause", "at_line_number", 
		"at_column_number", "out_dest", "delete_statement", "continue_statement", 
		"compute_statement", "close_statement", "close_params", "cancel_statement", 
		"call_statement", "call_giving", "call_using", "using_arg", "using_prefix", 
		"argument", "prog_name", "alter_statement", "alter_new_proc", "alter_proc", 
		"add_statement", "add_grp", "add_num", "accept_statement", "on_exception_variants", 
		"at_end_variants", "on_size_variants", "on_key_variants", "accept_form6", 
		"accept6_item", "accept_form1", "accept_form2", "accept_form3", "accept_form4", 
		"accept_form5", "accept_at", "accept_at_line", "accept_at_column", "accept_form4_clause", 
		"accept_form3_clause", "key_dest_item", "def_value", "protected_value", 
		"prot_fill_lit", "prot_size_value", "number_value", "date_time", "dest_item", 
		"input_source", "at_end", "on_exception", "on_size", "on_key", "data_division", 
		"file_section", "working_storage_section", "linkage_section", "report_section", 
		"screen_section", "file_description_entry", "sort_merge_file_description_entry", 
		"report_description_entry", "fd_clause", "record_description_entry", "data_description_entry", 
		"level_number", "data_description_clause", "renames", "rename_start", 
		"rename_end", "value_is", "value_is_definition", "value_is_definition_part", 
		"value_is_definition_thru", "external_name", "ref_data_name", "value_is_literal", 
		"occurs", "indexed_by", "ind_name", "key_is", "key_name", "times_definition", 
		"table_size", "min_times", "max_times", "report_group_description_entry", 
		"report_group_data_description", "report_group_data_description_clause", 
		"sign_is", "sum", "control_foot_name", "detail_report_group_name", "sum_name", 
		"source_name", "column_number", "type_is_definition", "type_control_name", 
		"next_group_definition", "line_num_definition", "line_num", "rd_clause", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "report_code", "usage", "usage_definition", 
		"picture", "character_string", "char_str_part", "other_data_item", "data_name", 
		"sd_clause", "report_is", "report_name", "linage", "bottom_lines", "top_lines", 
		"footing_line", "page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_name", "screen_description_clause", 
		"scr_pic_using", "scr_pic_from", "scr_pic_to", "nonnumeric_literal", "src_number", 
		"color_num", "identification_division", "identification_division_paragraph", 
		"program_id", "program_name", "is_program", "with_ident", "ident_string", 
		"comment_entry", "author", "installation", "date_written", "date_compiled", 
		"security", "options_", "arithmetic", "environment_division", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "qualified_data_item", "currency", 
		"currency_definition", "literal_7", "literal_8", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "switch_", 
		"switch_clause_on", "switch_clause_off", "cond_name", "switch_name", "switch_num", 
		"top_of_page_name", "predefined_device", "device_name", "arg_env", "arg_env_name", 
		"file_control", "select", "file_status", "file_stat", "record_key", "record_key_definition", 
		"access_mode", "reserve", "reserve_num", "record_delimiter", "padding", 
		"pad_char", "organization", "lock_mode", "lock_mode_definition", "code_set", 
		"block_contains", "smallest_block", "blocksize", "assign_to", "assign_to_definition", 
		"file_spec", "file_name", "i_o_control", "multiple_file", "multiple_file_definition", 
		"multiple_file_name", "pos_integer", "rerun", "rerun_definition", "clock_count", 
		"condition_name", "rerun_def_file", "rec_count", "same", "same_area_file", 
		"apply", "apply_definition", "window_ptrs", "preall_amt", "extend_amt", 
		"arithmetic_expression", "constant", "binary_arithmetic_operator", "unary_arithmetic_operator", 
		"logic_expression", "success_failure_condition", "logic_condition", "logic_operation", 
		"sign_condition", "sign_condition_name", "class_condition", "class_condition_name", 
		"condition_operator", "identifier_result", "identifier", "arguments", 
		"subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'!'", 
		"'_'", "'+'", "'-'", undefined, undefined, "','", "';'", "':'", "'='", 
		"'<'", "'<='", "'>='", "'>'", "'('", "')'", "'['", "']'", "'^'", "'@'", 
		"'.'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DECLARATIVES_IN_A_AREA", "END_IN_A_AREA", "IDENTIFICATION_IN_A_AREA", 
		"ACCEPT", "ACCESS", "ADD", "ADVANCING", "AFTER", "ALL", "ALPHA", "ALPHABET", 
		"ALPHABETIC", "ALPHABETIC_LOWER", "ALPHABETIC_UPPER", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CORR", "CORRESPONDING", "CRT", "CURRENCY", "CURRENT", "CURSOR", "DATA", 
		"DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", "DE", "DEBUGGING", 
		"DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", "DELETE", 
		"DELIMITER", "DEPENDING", "DESCENDING", "DESCRIPTOR", "DETAIL", "DISK", 
		"DISPLAY", "DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", 
		"ECHO", "EDITING", "END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", 
		"END_DELETE", "END_DISPLAY", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", "EXCLUSIVE", 
		"EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FALSE", "FD", "FILE", 
		"FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", "FIRST", "FLOAT_EXTENDED", 
		"FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", "FOREGROUND_COLOR", "FROM", 
		"FULL", "FUNCTION", "GENERATE", "GIVING", "GLOBAL", "GO", "GREATER", "GROUP", 
		"HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", "I64", "ID", "IDENT", 
		"IDENTIFICATION", "IF", "IN", "INDEX", "INDEXED", "INDICATE", "INITIAL", 
		"INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", "INSPECT", "INSTALLATION", 
		"INTO", "INVALID", "IS", "I_O", "I_O_CONTROL", "JUST", "JUSTIFIED", "KEY", 
		"LABEL", "LAST", "LEADING", "LEFT", "LESS", "LIMIT", "LIMITS", "LINAGE", 
		"LINE", "LINES", "LINE_PRINTER", "LINKAGE", "LOCK", "LOCK_HOLDING", "LOWLIGHT", 
		"LOW_VALUE", "LOW_VALUES", "MANUAL", "MASS_INSERT", "MEMORY", "MERGE", 
		"MODE", "MODULES", "MOVE", "MULTIPLE", "MULTIPLY", "NATIVE", "NEGATIVE", 
		"NEXT", "NO", "NOT", "NUMBER", "NUMERIC", "OBJECT_COMPUTER", "OCCURS", 
		"OF", "OFF", "OMITTED", "ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORGANIZATION", 
		"OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", 
		"POINTER", "POINTER_64", "POSITION", "POSITIVE", "PREALLOCATION", "PRINTER", 
		"PRINT_CONTROL", "PROCEDURE", "PROCEED", "PROGRAM", "PROGRAM_ID", "PROTECTED", 
		"QUOTE", "QUOTES", "RANDOM", "RD", "READ", "RECORD", "RECORDS", "REDEFINES", 
		"REEL", "REFERENCE", "RELATIVE", "RELEASE", "REMAINDER", "REMOVAL", "RENAMES", 
		"REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", "REQUIRED", 
		"RERUN", "RESERVE", "RESET", "RETURN", "REVERSED", "REVERSE_VIDEO", "REWIND", 
		"REWRITE", "RF", "RH", "RIGHT", "ROLLBACK", "ROUNDED", "SAME", "SCREEN", 
		"SD", "SEARCH", "SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", "SELECT", 
		"SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", "SIGNED", "SIZE", 
		"SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", 
		"SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", 
		"STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", "SWITCH", 
		"SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", "SYSOUT", 
		"TALLYING", "TAPE", "TERMINATE", "THAN", "THROUGH", "THRU", "TIME", "TIMES", 
		"TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", "UNDERLINED", "UNIT", 
		"UNLOCK", "UNSIGNED", "UNSTRING", "UP", "UPON", "USAGE", "USE", "USING", 
		"VALUE", "VALUES", "VARYING", "VAX", "WHEN", "WINDOW", "WITH", "WORDS", 
		"WORKING_STORAGE", "WRITE", "YYYYDDD", "YYYYMMDD", "ZERO", "ZEROES", "ZEROS", 
		"OTHER", "ANY", "THEN", "SENTENCE", "ELSE", "ALPHANUMERIC", "NUMERIC_EDITED", 
		"ALPHANUMERIC_EDITED", "START_SLASH_", "START_STAR_", "EXCLAM_", "UNDER_", 
		"PLUS_", "MINUS_", "STAR_", "SLASH_", "COMMA_", "SEMI_", "COLON_", "EQUAL_", 
		"LT_", "LE_", "GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", 
		"POINTER_", "ATP_", "DOT_", "LCURLY_", "RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"HEX_LITERAL", "USER_DEFINED_WORD", "START_FOUR_SPACES", "WHITESPACE", 
		"NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 650;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				this.state = 648;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.IDENTIFICATION_IN_A_AREA:
					{
					this.state = 646;
					this.program();
					}
					break;
				case cobolParser.START_SLASH_:
				case cobolParser.START_STAR_:
				case cobolParser.COMMA_:
				case cobolParser.SEMI_:
				case cobolParser.START_FOUR_SPACES:
				case cobolParser.WHITESPACE:
				case cobolParser.NEWLINE:
					{
					this.state = 647;
					this.separator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 652;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 653;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant_witout_zero(): Figurative_constant_witout_zeroContext {
		let _localctx: Figurative_constant_witout_zeroContext = new Figurative_constant_witout_zeroContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_figurative_constant_witout_zero);
		try {
			this.state = 666;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 655;
				this.match(cobolParser.SPACE);
				}
				break;
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 656;
				this.match(cobolParser.SPACES);
				}
				break;
			case cobolParser.HIGH_VALUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 657;
				this.match(cobolParser.HIGH_VALUE);
				}
				break;
			case cobolParser.HIGH_VALUES:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 658;
				this.match(cobolParser.HIGH_VALUES);
				}
				break;
			case cobolParser.LOW_VALUE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 659;
				this.match(cobolParser.LOW_VALUE);
				}
				break;
			case cobolParser.LOW_VALUES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 660;
				this.match(cobolParser.LOW_VALUES);
				}
				break;
			case cobolParser.QUOTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 661;
				this.match(cobolParser.QUOTE);
				}
				break;
			case cobolParser.QUOTES:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 662;
				this.match(cobolParser.QUOTES);
				}
				break;
			case cobolParser.ALL:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 663;
				this.match(cobolParser.ALL);
				this.state = 664;
				this.match(cobolParser.WHITESPACE);
				this.state = 665;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant(): Figurative_constantContext {
		let _localctx: Figurative_constantContext = new Figurative_constantContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_figurative_constant);
		try {
			this.state = 670;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 668;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 669;
				this.figurative_constant_witout_zero();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_separator);
		try {
			this.state = 678;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 672;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 673;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 674;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 675;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 676;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 677;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic_separator(): Arithmetic_separatorContext {
		let _localctx: Arithmetic_separatorContext = new Arithmetic_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_arithmetic_separator);
		try {
			this.state = 684;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 680;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 681;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 682;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 683;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 686;
				this.match(cobolParser.START_SLASH_);
				this.state = 690;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 687;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 693;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 694;
				this.match(cobolParser.START_STAR_);
				this.state = 698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 695;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 701;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 704;
			this.identification_division();
			this.state = 706;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 705;
				this.environment_division();
				}
			}

			this.state = 709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 708;
				this.data_division();
				}
			}

			this.state = 712;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 711;
				this.procedure_division();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division(): Procedure_divisionContext {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 714;
			this.procedure_division_header();
			this.state = 716;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECLARATIVES_IN_A_AREA) {
				{
				this.state = 715;
				this.declaratives();
				}
			}

			this.state = 742;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				{
				this.state = 727;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 718;
						this.section();
						this.state = 722;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 719;
								this.separator();
								}
								}
							}
							this.state = 724;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
						}
						}
						}
					}
					this.state = 729;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 739;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 730;
						this.paragraph();
						this.state = 734;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 731;
								this.separator();
								}
								}
							}
							this.state = 736;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
						}
						}
						}
					}
					this.state = 741;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 16, this._ctx);
				}
				}
				break;
			}
			this.state = 751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 19, this._ctx) ) {
			case 1:
				{
				this.state = 747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 744;
					this.separator();
					}
					}
					this.state = 749;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 750;
				this.end_program();
				}
				break;
			}
			this.state = 768;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 756;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 753;
							this.separator();
							}
							}
						}
						this.state = 758;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
					}
					this.state = 759;
					this.procedure_test_line();
					this.state = 763;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 760;
							this.separator();
							}
							}
						}
						this.state = 765;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
					}
					}
					}
				}
				this.state = 770;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 22, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_program(): End_programContext {
		let _localctx: End_programContext = new End_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_end_program);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 771;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 772;
				this.separator();
				}
				}
				this.state = 775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 777;
			this.match(cobolParser.PROGRAM);
			this.state = 785;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
			case 1:
				{
				this.state = 779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 778;
					this.separator();
					}
					}
					this.state = 781;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 783;
				this.program_name();
				}
				break;
			}
			this.state = 790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 787;
				this.separator();
				}
				}
				this.state = 792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 793;
			this.match(cobolParser.DOT_);
			this.state = 797;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 794;
					this.separator();
					}
					}
				}
				this.state = 799;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division_header(): Procedure_division_headerContext {
		let _localctx: Procedure_division_headerContext = new Procedure_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_procedure_division_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 800;
			this.match(cobolParser.PROCEDURE);
			this.state = 802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 801;
				this.separator();
				}
				}
				this.state = 804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 806;
			this.match(cobolParser.DIVISION);
			this.state = 814;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 30, this._ctx) ) {
			case 1:
				{
				this.state = 808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 807;
					this.separator();
					}
					}
					this.state = 810;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 812;
				this.using();
				}
				break;
			}
			this.state = 823;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 32, this._ctx) ) {
			case 1:
				{
				this.state = 817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 816;
					this.separator();
					}
					}
					this.state = 819;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 821;
				this.giving();
				}
				break;
			}
			this.state = 828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 825;
				this.separator();
				}
				}
				this.state = 830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 831;
			this.match(cobolParser.DOT_);
			this.state = 835;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 832;
					this.separator();
					}
					}
				}
				this.state = 837;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section(): SectionContext {
		let _localctx: SectionContext = new SectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 838;
			this.section_header();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives(): DeclarativesContext {
		let _localctx: DeclarativesContext = new DeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_declaratives);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 840;
			this.match(cobolParser.DECLARATIVES_IN_A_AREA);
			this.state = 844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 841;
				this.separator();
				}
				}
				this.state = 846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 847;
			this.match(cobolParser.DOT_);
			this.state = 851;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 848;
				this.separator();
				}
				}
				this.state = 853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 854;
				this.declaratives_section();
				this.state = 858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 855;
					this.separator();
					}
					}
					this.state = 860;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 865;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 867;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 866;
				this.separator();
				}
				}
				this.state = 869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 871;
			this.match(cobolParser.DECLARATIVES);
			this.state = 875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 872;
				this.separator();
				}
				}
				this.state = 877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 878;
			this.match(cobolParser.DOT_);
			this.state = 882;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 879;
					this.separator();
					}
					}
				}
				this.state = 884;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives_section(): Declaratives_sectionContext {
		let _localctx: Declaratives_sectionContext = new Declaratives_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_declaratives_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 885;
			this.section_header();
			this.state = 886;
			this.use_statement();
			this.state = 896;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 887;
						this.separator();
						}
						}
						this.state = 890;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 892;
					this.declarative_paragraph();
					}
					}
				}
				this.state = 898;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 43, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarative_paragraph(): Declarative_paragraphContext {
		let _localctx: Declarative_paragraphContext = new Declarative_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_declarative_paragraph);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 899;
			this.paragraph();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph(): ParagraphContext {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_paragraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 901;
			this.paragraph_name();
			this.state = 905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 902;
				this.separator();
				}
				}
				this.state = 907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 908;
			this.match(cobolParser.DOT_);
			this.state = 912;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 909;
					this.separator();
					}
					}
				}
				this.state = 914;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 45, this._ctx);
			}
			this.state = 924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ADD) | (1 << cobolParser.ALTER))) !== 0) || ((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & ((1 << (cobolParser.CALL - 50)) | (1 << (cobolParser.CANCEL - 50)) | (1 << (cobolParser.CLOSE - 50)) | (1 << (cobolParser.COMPUTE - 50)))) !== 0) || ((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & ((1 << (cobolParser.CONTINUE - 87)) | (1 << (cobolParser.DELETE - 87)) | (1 << (cobolParser.DISPLAY - 87)))) !== 0) || _la === cobolParser.DIVIDE || ((((_la - 157)) & ~0x1F) === 0 && ((1 << (_la - 157)) & ((1 << (cobolParser.EVALUATE - 157)) | (1 << (cobolParser.EXIT - 157)) | (1 << (cobolParser.GENERATE - 157)) | (1 << (cobolParser.GO - 157)))) !== 0) || _la === cobolParser.IF || _la === cobolParser.INITIALIZE || _la === cobolParser.MOVE) {
				{
				{
				this.state = 915;
				this.sentense();
				this.state = 919;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 916;
						this.separator();
						}
						}
					}
					this.state = 921;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 46, this._ctx);
				}
				}
				}
				this.state = 926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentense(): SentenseContext {
		let _localctx: SentenseContext = new SentenseContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_sentense);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 934;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 927;
					this.statement();
					this.state = 931;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 928;
							this.separator();
							}
							}
						}
						this.state = 933;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 936;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 49, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 951;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
			case 1:
				{
				this.state = 941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 938;
					this.separator();
					}
					}
					this.state = 943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 944;
				this.match(cobolParser.DOT_);
				this.state = 948;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 945;
						this.separator();
						}
						}
					}
					this.state = 950;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 51, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_statement(): Use_statementContext {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_use_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 953;
			this.match(cobolParser.USE);
			this.state = 961;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 54, this._ctx) ) {
			case 1:
				{
				this.state = 955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 954;
					this.separator();
					}
					}
					this.state = 957;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 959;
				this.match(cobolParser.GLOBAL);
				}
				break;
			}
			this.state = 964;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 963;
				this.separator();
				}
				}
				this.state = 966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1032;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AFTER:
				{
				this.state = 968;
				this.match(cobolParser.AFTER);
				this.state = 976;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 57, this._ctx) ) {
				case 1:
					{
					this.state = 970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 969;
						this.separator();
						}
						}
						this.state = 972;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 974;
					this.match(cobolParser.STANDARD);
					}
					break;
				}
				this.state = 979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 978;
					this.separator();
					}
					}
					this.state = 981;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 983;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ERROR || _la === cobolParser.EXCEPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 984;
					this.separator();
					}
					}
					this.state = 987;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 989;
				this.match(cobolParser.PROCEDURE);
				this.state = 997;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 991;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 990;
						this.separator();
						}
						}
						this.state = 993;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 995;
					this.match(cobolParser.ON);
					}
					break;
				}
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 999;
					this.separator();
					}
					}
					this.state = 1002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1004;
				this.use_on();
				this.state = 1008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 1005;
					this.separator();
					}
					}
					this.state = 1010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1011;
				this.match(cobolParser.DOT_);
				this.state = 1015;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1012;
						this.separator();
						}
						}
					}
					this.state = 1017;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);
				}
				}
				break;
			case cobolParser.BEFORE:
				{
				this.state = 1018;
				this.match(cobolParser.BEFORE);
				this.state = 1020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1019;
					this.separator();
					}
					}
					this.state = 1022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1024;
				this.match(cobolParser.REPORTING);
				this.state = 1026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1025;
					this.separator();
					}
					}
					this.state = 1028;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1030;
				this.group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 1034;
				this.separator();
				}
				}
				this.state = 1039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1040;
			this.match(cobolParser.DOT_);
			this.state = 1044;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1041;
					this.separator();
					}
					}
				}
				this.state = 1046;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_data_name(): Group_data_nameContext {
		let _localctx: Group_data_nameContext = new Group_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_group_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1047;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_on(): Use_onContext {
		let _localctx: Use_onContext = new Use_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_use_on);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1066;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1049;
				this.file_name();
				this.state = 1059;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1051;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1050;
							this.separator();
							}
							}
							this.state = 1053;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 1055;
						this.file_name();
						}
						}
					}
					this.state = 1061;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);
				}
				}
				break;
			case cobolParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1062;
				this.match(cobolParser.INPUT);
				}
				break;
			case cobolParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1063;
				this.match(cobolParser.OUTPUT);
				}
				break;
			case cobolParser.I_O:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1064;
				this.match(cobolParser.I_O);
				}
				break;
			case cobolParser.EXTEND:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1065;
				this.match(cobolParser.EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_header(): Section_headerContext {
		let _localctx: Section_headerContext = new Section_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_section_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1068;
			this.section_name();
			this.state = 1070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1069;
				this.separator();
				}
				}
				this.state = 1072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1074;
			this.match(cobolParser.SECTION);
			this.state = 1082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 1076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1075;
					this.separator();
					}
					}
					this.state = 1078;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1080;
				this.segment_number();
				}
				break;
			}
			this.state = 1087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 1084;
				this.separator();
				}
				}
				this.state = 1089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1090;
			this.match(cobolParser.DOT_);
			this.state = 1094;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1091;
					this.separator();
					}
					}
				}
				this.state = 1096;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 77, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph_name(): Paragraph_nameContext {
		let _localctx: Paragraph_nameContext = new Paragraph_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_paragraph_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1097;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_name(): Section_nameContext {
		let _localctx: Section_nameContext = new Section_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_section_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1099;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using(): UsingContext {
		let _localctx: UsingContext = new UsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1101;
			this.match(cobolParser.USING);
			this.state = 1103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1102;
				this.separator();
				}
				}
				this.state = 1105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1107;
			this.qualified_data_item();
			this.state = 1117;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1108;
						this.separator();
						}
						}
						this.state = 1111;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1113;
					this.qualified_data_item();
					}
					}
				}
				this.state = 1119;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 80, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giving(): GivingContext {
		let _localctx: GivingContext = new GivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1120;
			this.match(cobolParser.GIVING);
			this.state = 1122;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1121;
				this.separator();
				}
				}
				this.state = 1124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1126;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_test_line(): Procedure_test_lineContext {
		let _localctx: Procedure_test_lineContext = new Procedure_test_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_procedure_test_line);
		let _la: number;
		try {
			this.state = 1147;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1128;
				this.arithmetic_expression(0);
				this.state = 1132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 1129;
					this.separator();
					}
					}
					this.state = 1134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1135;
				this.match(cobolParser.DOT_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1137;
				this.logic_expression(0);
				this.state = 1141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 1138;
					this.separator();
					}
					}
					this.state = 1143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1144;
				this.match(cobolParser.DOT_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1146;
				this.separator();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_statement);
		try {
			this.state = 1168;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1149;
				this.accept_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1150;
				this.add_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1151;
				this.alter_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1152;
				this.call_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1153;
				this.cancel_statement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1154;
				this.close_statement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1155;
				this.compute_statement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1156;
				this.continue_statement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1157;
				this.delete_statement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1158;
				this.display_statement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1159;
				this.divide_statement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1160;
				this.evaluate_statement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1161;
				this.go_to_statement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1162;
				this.exit_statement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1163;
				this.exit_program_statement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1164;
				this.generate_statement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1165;
				this.if_statement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1166;
				this.move_statement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1167;
				this.initialize_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initialize_statement(): Initialize_statementContext {
		let _localctx: Initialize_statementContext = new Initialize_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_initialize_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1170;
			this.match(cobolParser.INITIALIZE);
			this.state = 1178;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1171;
						this.separator();
						}
						}
						this.state = 1174;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1176;
					this.fld_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1180;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 87, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1191;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1182;
						this.separator();
						}
						}
						this.state = 1185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1187;
					this.replacing();
					}
					}
				}
				this.state = 1193;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replacing(): ReplacingContext {
		let _localctx: ReplacingContext = new ReplacingContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_replacing);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1194;
			this.match(cobolParser.REPLACING);
			this.state = 1222;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1195;
						this.separator();
						}
						}
						this.state = 1198;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1200;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.ALPHABETIC || _la === cobolParser.NUMERIC || ((((_la - 407)) & ~0x1F) === 0 && ((1 << (_la - 407)) & ((1 << (cobolParser.ALPHANUMERIC - 407)) | (1 << (cobolParser.NUMERIC_EDITED - 407)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 407)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1202;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1201;
						this.separator();
						}
						}
						this.state = 1204;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.DATA) {
						{
						this.state = 1206;
						this.match(cobolParser.DATA);
						this.state = 1208;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1207;
							this.separator();
							}
							}
							this.state = 1210;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 1214;
					this.match(cobolParser.BY);
					this.state = 1216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1215;
						this.separator();
						}
						}
						this.state = 1218;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1220;
					this.init_value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1224;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public init_value(): Init_valueContext {
		let _localctx: Init_valueContext = new Init_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_init_value);
		try {
			this.state = 1228;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1226;
				this.qualified_data_item();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1227;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fld_name(): Fld_nameContext {
		let _localctx: Fld_nameContext = new Fld_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_fld_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1230;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public move_statement(): Move_statementContext {
		let _localctx: Move_statementContext = new Move_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_move_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1232;
			this.match(cobolParser.MOVE);
			this.state = 1234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1233;
				this.separator();
				}
				}
				this.state = 1236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING) {
				{
				this.state = 1238;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1239;
					this.separator();
					}
					}
					this.state = 1242;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 1246;
			this.src_item();
			this.state = 1248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1247;
				this.separator();
				}
				}
				this.state = 1250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1252;
			this.match(cobolParser.TO);
			this.state = 1254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1253;
				this.separator();
				}
				}
				this.state = 1256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1258;
			this.dest_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_statement(): If_statementContext {
		let _localctx: If_statementContext = new If_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_if_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1260;
			this.match(cobolParser.IF);
			this.state = 1262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1261;
				this.separator();
				}
				}
				this.state = 1264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1266;
			this.logic_expression(0);
			this.state = 1274;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 104, this._ctx) ) {
			case 1:
				{
				this.state = 1268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1267;
					this.separator();
					}
					}
					this.state = 1270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1272;
				this.match(cobolParser.THEN);
				}
				break;
			}
			this.state = 1277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1276;
				this.separator();
				}
				}
				this.state = 1279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1290;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ACCEPT:
			case cobolParser.ADD:
			case cobolParser.ALTER:
			case cobolParser.CALL:
			case cobolParser.CANCEL:
			case cobolParser.CLOSE:
			case cobolParser.COMPUTE:
			case cobolParser.CONTINUE:
			case cobolParser.DELETE:
			case cobolParser.DISPLAY:
			case cobolParser.DIVIDE:
			case cobolParser.EVALUATE:
			case cobolParser.EXIT:
			case cobolParser.GENERATE:
			case cobolParser.GO:
			case cobolParser.IF:
			case cobolParser.INITIALIZE:
			case cobolParser.MOVE:
				{
				this.state = 1281;
				this.sentense();
				}
				break;
			case cobolParser.NEXT:
				{
				this.state = 1282;
				this.match(cobolParser.NEXT);
				this.state = 1284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1283;
					this.separator();
					}
					}
					this.state = 1286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1288;
				this.match(cobolParser.SENTENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
			case 1:
				{
				this.state = 1293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1292;
					this.separator();
					}
					}
					this.state = 1295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1297;
				this.match(cobolParser.ELSE);
				this.state = 1299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1298;
					this.separator();
					}
					}
					this.state = 1301;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1312;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.ACCEPT:
				case cobolParser.ADD:
				case cobolParser.ALTER:
				case cobolParser.CALL:
				case cobolParser.CANCEL:
				case cobolParser.CLOSE:
				case cobolParser.COMPUTE:
				case cobolParser.CONTINUE:
				case cobolParser.DELETE:
				case cobolParser.DISPLAY:
				case cobolParser.DIVIDE:
				case cobolParser.EVALUATE:
				case cobolParser.EXIT:
				case cobolParser.GENERATE:
				case cobolParser.GO:
				case cobolParser.IF:
				case cobolParser.INITIALIZE:
				case cobolParser.MOVE:
					{
					this.state = 1303;
					this.sentense();
					}
					break;
				case cobolParser.NEXT:
					{
					this.state = 1304;
					this.match(cobolParser.NEXT);
					this.state = 1306;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1305;
						this.separator();
						}
						}
						this.state = 1308;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1310;
					this.match(cobolParser.SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 1323;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				{
				this.state = 1317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1316;
					this.separator();
					}
					}
					this.state = 1319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1321;
				this.match(cobolParser.END_IF);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_statement(): Generate_statementContext {
		let _localctx: Generate_statementContext = new Generate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_generate_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1325;
			this.match(cobolParser.GENERATE);
			this.state = 1327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1326;
				this.separator();
				}
				}
				this.state = 1329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1331;
			this.report_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_item(): Report_itemContext {
		let _localctx: Report_itemContext = new Report_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_report_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1333;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_statement(): Exit_statementContext {
		let _localctx: Exit_statementContext = new Exit_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_exit_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1335;
			this.match(cobolParser.EXIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_program_statement(): Exit_program_statementContext {
		let _localctx: Exit_program_statementContext = new Exit_program_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_exit_program_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1337;
			this.match(cobolParser.EXIT);
			this.state = 1339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1338;
				this.separator();
				}
				}
				this.state = 1341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1343;
			this.match(cobolParser.PROGRAM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public go_to_statement(): Go_to_statementContext {
		let _localctx: Go_to_statementContext = new Go_to_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_go_to_statement);
		let _la: number;
		try {
			this.state = 1400;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 127, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1345;
				this.match(cobolParser.GO);
				this.state = 1353;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
				case 1:
					{
					this.state = 1347;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1346;
						this.separator();
						}
						}
						this.state = 1349;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1351;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 1362;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 1356;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1355;
						this.separator();
						}
						}
						this.state = 1358;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1360;
					this.proc_name();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1364;
				this.match(cobolParser.GO);
				this.state = 1372;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
				case 1:
					{
					this.state = 1366;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1365;
						this.separator();
						}
						}
						this.state = 1368;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1370;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 1381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1374;
						this.separator();
						}
						}
						this.state = 1377;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1379;
					this.proc_name();
					}
					}
					this.state = 1383;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1385;
				this.match(cobolParser.DEPENDING);
				{
				this.state = 1387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1386;
					this.separator();
					}
					}
					this.state = 1389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1391;
				this.match(cobolParser.ON);
				}
				this.state = 1394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1393;
					this.separator();
					}
					}
					this.state = 1396;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1398;
				this.qualified_data_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_name(): Proc_nameContext {
		let _localctx: Proc_nameContext = new Proc_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_proc_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1402;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public evaluate_statement(): Evaluate_statementContext {
		let _localctx: Evaluate_statementContext = new Evaluate_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_evaluate_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1404;
			this.match(cobolParser.EVALUATE);
			this.state = 1406;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1405;
				this.separator();
				}
				}
				this.state = 1408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1410;
			this.subj_item();
			this.state = 1429;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1418;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 130, this._ctx) ) {
					case 1:
						{
						this.state = 1412;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1411;
							this.separator();
							}
							}
							this.state = 1414;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 1416;
						this.match(cobolParser.ALSO);
						}
						break;
					}
					this.state = 1421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1420;
						this.separator();
						}
						}
						this.state = 1423;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1425;
					this.subj_item();
					}
					}
				}
				this.state = 1431;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			}
			this.state = 1472;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1433;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1432;
						this.separator();
						}
						}
						this.state = 1435;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1437;
					this.match(cobolParser.WHEN);
					this.state = 1439;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1438;
						this.separator();
						}
						}
						this.state = 1441;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1443;
					this.when_condition();
					this.state = 1462;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 138, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1451;
							this._errHandler.sync(this);
							switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
							case 1:
								{
								this.state = 1445;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								do {
									{
									{
									this.state = 1444;
									this.separator();
									}
									}
									this.state = 1447;
									this._errHandler.sync(this);
									_la = this._input.LA(1);
								} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
								this.state = 1449;
								this.match(cobolParser.ALSO);
								}
								break;
							}
							this.state = 1454;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1453;
								this.separator();
								}
								}
								this.state = 1456;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							this.state = 1458;
							this.when_condition();
							}
							}
						}
						this.state = 1464;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 138, this._ctx);
					}
					this.state = 1466;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1465;
						this.separator();
						}
						}
						this.state = 1468;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1470;
					this.sentense();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1474;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 140, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1495;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
			case 1:
				{
				this.state = 1477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1476;
					this.separator();
					}
					}
					this.state = 1479;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1481;
				this.match(cobolParser.WHEN);
				this.state = 1483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1482;
					this.separator();
					}
					}
					this.state = 1485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1487;
				this.match(cobolParser.OTHER);
				this.state = 1489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1488;
					this.separator();
					}
					}
					this.state = 1491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1493;
				this.sentense();
				}
				break;
			}
			this.state = 1504;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
			case 1:
				{
				this.state = 1498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1497;
					this.separator();
					}
					}
					this.state = 1500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1502;
				this.match(cobolParser.END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public when_condition(): When_conditionContext {
		let _localctx: When_conditionContext = new When_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_when_condition);
		let _la: number;
		try {
			this.state = 1534;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1506;
				this.logic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 1507;
					this.match(cobolParser.NOT);
					this.state = 1509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1508;
						this.separator();
						}
						}
						this.state = 1511;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1515;
				this.arithmetic_expression(0);
				this.state = 1529;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
				case 1:
					{
					this.state = 1517;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1516;
						this.separator();
						}
						}
						this.state = 1519;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1521;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1523;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1522;
						this.separator();
						}
						}
						this.state = 1525;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1527;
					this.arithmetic_expression(0);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1531;
				this.match(cobolParser.ANY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1532;
				this.match(cobolParser.TRUE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1533;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subj_item(): Subj_itemContext {
		let _localctx: Subj_itemContext = new Subj_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_subj_item);
		try {
			this.state = 1540;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 153, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1536;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1537;
				this.logic_expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1538;
				this.match(cobolParser.TRUE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1539;
				this.match(cobolParser.FALSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement(): Divide_statementContext {
		let _localctx: Divide_statementContext = new Divide_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_divide_statement);
		try {
			this.state = 1544;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1542;
				this.divide_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1543;
				this.divide_statement_form2();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form1(): Divide_statement_form1Context {
		let _localctx: Divide_statement_form1Context = new Divide_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_divide_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1546;
			this.match(cobolParser.DIVIDE);
			this.state = 1548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1547;
				this.separator();
				}
				}
				this.state = 1550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1552;
			this.divide_num();
			this.state = 1554;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1553;
				this.separator();
				}
				}
				this.state = 1556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1558;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1572;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				{
				this.state = 1560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1559;
					this.separator();
					}
					}
					this.state = 1562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1564;
				this.divide_num();
				this.state = 1566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1565;
					this.separator();
					}
					}
					this.state = 1568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1570;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 1589;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1574;
						this.separator();
						}
						}
						this.state = 1577;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1579;
					this.identifier_result();
					this.state = 1587;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
					case 1:
						{
						this.state = 1581;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1580;
							this.separator();
							}
							}
							this.state = 1583;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 1585;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1591;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 163, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1600;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 165, this._ctx) ) {
			case 1:
				{
				this.state = 1594;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1593;
					this.separator();
					}
					}
					this.state = 1596;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1598;
				this.on_size_variants();
				}
				break;
			}
			this.state = 1609;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 167, this._ctx) ) {
			case 1:
				{
				this.state = 1603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1602;
					this.separator();
					}
					}
					this.state = 1605;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1607;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_statement_form2(): Divide_statement_form2Context {
		let _localctx: Divide_statement_form2Context = new Divide_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_divide_statement_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1611;
			this.match(cobolParser.DIVIDE);
			this.state = 1613;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1612;
				this.separator();
				}
				}
				this.state = 1615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1617;
			this.divide_num();
			this.state = 1619;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1618;
				this.separator();
				}
				}
				this.state = 1621;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1623;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.BY || _la === cobolParser.INTO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1637;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				{
				this.state = 1625;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1624;
					this.separator();
					}
					}
					this.state = 1627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1629;
				this.divide_num();
				this.state = 1631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1630;
					this.separator();
					}
					}
					this.state = 1633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1635;
				this.match(cobolParser.GIVING);
				}
				break;
			}
			this.state = 1640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1639;
				this.separator();
				}
				}
				this.state = 1642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1644;
			this.identifier_result();
			this.state = 1652;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
			case 1:
				{
				this.state = 1646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1645;
					this.separator();
					}
					}
					this.state = 1648;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1650;
				this.match(cobolParser.ROUNDED);
				}
				break;
			}
			this.state = 1655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1654;
				this.separator();
				}
				}
				this.state = 1657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1659;
			this.match(cobolParser.REMAINDER);
			this.state = 1661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1660;
				this.separator();
				}
				}
				this.state = 1663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1665;
			this.remaind();
			this.state = 1673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				{
				this.state = 1667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1666;
					this.separator();
					}
					}
					this.state = 1669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1671;
				this.on_size_variants();
				}
				break;
			}
			this.state = 1682;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				{
				this.state = 1676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1675;
					this.separator();
					}
					}
					this.state = 1678;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1680;
				this.match(cobolParser.END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public remaind(): RemaindContext {
		let _localctx: RemaindContext = new RemaindContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_remaind);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1684;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public divide_num(): Divide_numContext {
		let _localctx: Divide_numContext = new Divide_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_divide_num);
		try {
			this.state = 1688;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1686;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1687;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement(): Display_statementContext {
		let _localctx: Display_statementContext = new Display_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_display_statement);
		try {
			this.state = 1694;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1690;
				this.display_statement_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1691;
				this.display_statement_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1692;
				this.display_statement_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1693;
				this.display_statement_form4();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form1(): Display_statement_form1Context {
		let _localctx: Display_statement_form1Context = new Display_statement_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_display_statement_form1);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1696;
			this.match(cobolParser.DISPLAY);
			this.state = 1715;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1698;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1697;
						this.separator();
						}
						}
						this.state = 1700;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1702;
					this.src_item();
					this.state = 1712;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1704;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1703;
								this.separator();
								}
								}
								this.state = 1706;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							this.state = 1708;
							this.display_form1_clause();
							}
							}
						}
						this.state = 1714;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1717;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 187, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
			case 1:
				{
				this.state = 1720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1719;
					this.separator();
					}
					}
					this.state = 1722;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1724;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form2(): Display_statement_form2Context {
		let _localctx: Display_statement_form2Context = new Display_statement_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_display_statement_form2);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1728;
			this.match(cobolParser.DISPLAY);
			this.state = 1747;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1730;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1729;
						this.separator();
						}
						}
						this.state = 1732;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1734;
					this.src_item();
					this.state = 1744;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1736;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 1735;
								this.separator();
								}
								}
								this.state = 1738;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							this.state = 1740;
							this.display_form2_clause();
							}
							}
						}
						this.state = 1746;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1749;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1758;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				{
				this.state = 1752;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1751;
					this.separator();
					}
					}
					this.state = 1754;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1756;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form3(): Display_statement_form3Context {
		let _localctx: Display_statement_form3Context = new Display_statement_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_display_statement_form3);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1760;
			this.match(cobolParser.DISPLAY);
			this.state = 1762;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1761;
				this.separator();
				}
				}
				this.state = 1764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1766;
			this.qualified_data_item();
			this.state = 1793;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
			case 1:
				{
				this.state = 1768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1767;
					this.separator();
					}
					}
					this.state = 1770;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 1772;
					this.match(cobolParser.AT);
					this.state = 1774;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1773;
						this.separator();
						}
						}
						this.state = 1776;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1791;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LINE:
					{
					this.state = 1780;
					this.disp_f3_line();
					this.state = 1788;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
					case 1:
						{
						this.state = 1782;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1781;
							this.separator();
							}
							}
							this.state = 1784;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 1786;
						this.disp_f3_column();
						}
						break;
					}
					}
					break;
				case cobolParser.COLUMN:
					{
					this.state = 1790;
					this.disp_f3_column();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 1802;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
			case 1:
				{
				this.state = 1796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1795;
					this.separator();
					}
					}
					this.state = 1798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1800;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_statement_form4(): Display_statement_form4Context {
		let _localctx: Display_statement_form4Context = new Display_statement_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_display_statement_form4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1804;
			this.match(cobolParser.DISPLAY);
			this.state = 1806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1805;
				this.separator();
				}
				}
				this.state = 1808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1810;
			this.src_item();
			this.state = 1812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1811;
				this.separator();
				}
				}
				this.state = 1814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1816;
			this.match(cobolParser.UPON);
			this.state = 1818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1817;
				this.separator();
				}
				}
				this.state = 1820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1822;
			this.display_upon();
			this.state = 1830;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 1824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1823;
					this.separator();
					}
					}
					this.state = 1826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1828;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 1839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 212, this._ctx) ) {
			case 1:
				{
				this.state = 1833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1832;
					this.separator();
					}
					}
					this.state = 1835;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1837;
				this.match(cobolParser.END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_item(): Src_itemContext {
		let _localctx: Src_itemContext = new Src_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_src_item);
		try {
			this.state = 1843;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1841;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1842;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_upon(): Display_uponContext {
		let _localctx: Display_uponContext = new Display_uponContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_display_upon);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1845;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_line(): Disp_f3_lineContext {
		let _localctx: Disp_f3_lineContext = new Disp_f3_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_disp_f3_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1847;
			this.match(cobolParser.LINE);
			{
			this.state = 1849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1848;
				this.separator();
				}
				}
				this.state = 1851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1853;
			this.match(cobolParser.NUMBER);
			}
			this.state = 1856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1855;
				this.separator();
				}
				}
				this.state = 1858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1862;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1860;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1861;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disp_f3_column(): Disp_f3_columnContext {
		let _localctx: Disp_f3_columnContext = new Disp_f3_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_disp_f3_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1864;
			this.match(cobolParser.COLUMN);
			{
			this.state = 1866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1865;
				this.separator();
				}
				}
				this.state = 1868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1870;
			this.match(cobolParser.NUMBER);
			}
			this.state = 1873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1872;
				this.separator();
				}
				}
				this.state = 1875;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 1879;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1877;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1878;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form1_clause(): Display_form1_clauseContext {
		let _localctx: Display_form1_clauseContext = new Display_form1_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_display_form1_clause);
		let _la: number;
		try {
			this.state = 1916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1881;
					this.match(cobolParser.WITH);
					this.state = 1883;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1882;
						this.separator();
						}
						}
						this.state = 1885;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1889;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1890;
				this.match(cobolParser.UPON);
				this.state = 1892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1891;
					this.separator();
					}
					}
					this.state = 1894;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1896;
				this.out_dest();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1898;
					this.match(cobolParser.WITH);
					this.state = 1900;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1899;
						this.separator();
						}
						}
						this.state = 1902;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1906;
				this.match(cobolParser.NO);
				this.state = 1914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
				case 1:
					{
					this.state = 1908;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1907;
						this.separator();
						}
						}
						this.state = 1910;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1912;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public display_form2_clause(): Display_form2_clauseContext {
		let _localctx: Display_form2_clauseContext = new Display_form2_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_display_form2_clause);
		let _la: number;
		try {
			this.state = 2002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1918;
				this.display_form1_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1919;
				this.at_line_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1920;
				this.at_column_number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1921;
				this.match(cobolParser.ERASE);
				this.state = 1945;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
				case 1:
					{
					this.state = 1923;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1922;
						this.separator();
						}
						}
						this.state = 1925;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1933;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 1927;
						this.match(cobolParser.TO);
						this.state = 1929;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1928;
							this.separator();
							}
							}
							this.state = 1931;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 1935;
					this.match(cobolParser.END);
					this.state = 1943;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
					case 1:
						{
						this.state = 1937;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1936;
							this.separator();
							}
							}
							this.state = 1939;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 1941;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 1948;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1947;
					this.separator();
					}
					}
					this.state = 1950;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 1952;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1954;
					this.match(cobolParser.WITH);
					this.state = 1956;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1955;
						this.separator();
						}
						}
						this.state = 1958;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1962;
				this.match(cobolParser.BELL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1963;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1964;
				this.match(cobolParser.BOLD);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1965;
					this.match(cobolParser.WITH);
					this.state = 1967;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1966;
						this.separator();
						}
						}
						this.state = 1969;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1973;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1974;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1975;
					this.match(cobolParser.WITH);
					this.state = 1977;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1976;
						this.separator();
						}
						}
						this.state = 1979;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1983;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1984;
					this.match(cobolParser.WITH);
					this.state = 1986;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1985;
						this.separator();
						}
						}
						this.state = 1988;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 1992;
				this.match(cobolParser.NO);
				this.state = 2000;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 244, this._ctx) ) {
				case 1:
					{
					this.state = 1994;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1993;
						this.separator();
						}
						}
						this.state = 1996;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 1998;
					this.match(cobolParser.ADVANCING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_line_number(): At_line_numberContext {
		let _localctx: At_line_numberContext = new At_line_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_at_line_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2010;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2004;
				this.match(cobolParser.AT);
				this.state = 2006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2005;
					this.separator();
					}
					}
					this.state = 2008;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2012;
			this.match(cobolParser.LINE);
			this.state = 2020;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 249, this._ctx) ) {
			case 1:
				{
				this.state = 2014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2013;
					this.separator();
					}
					}
					this.state = 2016;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2018;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 2023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2022;
				this.separator();
				}
				}
				this.state = 2025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2027;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_column_number(): At_column_numberContext {
		let _localctx: At_column_numberContext = new At_column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_at_column_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2029;
				this.match(cobolParser.AT);
				this.state = 2031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2030;
					this.separator();
					}
					}
					this.state = 2033;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2037;
			this.match(cobolParser.COLUMN);
			this.state = 2045;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 2039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2038;
					this.separator();
					}
					}
					this.state = 2041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2043;
				this.match(cobolParser.NUMBER);
				}
				break;
			}
			this.state = 2048;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2047;
				this.separator();
				}
				}
				this.state = 2050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2052;
			this.number_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public out_dest(): Out_destContext {
		let _localctx: Out_destContext = new Out_destContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_out_dest);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2054;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_statement(): Delete_statementContext {
		let _localctx: Delete_statementContext = new Delete_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_delete_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2056;
			this.match(cobolParser.DELETE);
			this.state = 2058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2057;
				this.separator();
				}
				}
				this.state = 2060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2062;
			this.file_name();
			this.state = 2070;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 258, this._ctx) ) {
			case 1:
				{
				this.state = 2064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2063;
					this.separator();
					}
					}
					this.state = 2066;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2068;
				this.match(cobolParser.RECORD);
				}
				break;
			}
			this.state = 2079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 260, this._ctx) ) {
			case 1:
				{
				this.state = 2073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2072;
					this.separator();
					}
					}
					this.state = 2075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2077;
				this.on_key_variants();
				}
				break;
			}
			this.state = 2088;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 262, this._ctx) ) {
			case 1:
				{
				this.state = 2082;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2081;
					this.separator();
					}
					}
					this.state = 2084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2086;
				this.match(cobolParser.END_DELETE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continue_statement(): Continue_statementContext {
		let _localctx: Continue_statementContext = new Continue_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_continue_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2090;
			this.match(cobolParser.CONTINUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compute_statement(): Compute_statementContext {
		let _localctx: Compute_statementContext = new Compute_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_compute_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2092;
			this.match(cobolParser.COMPUTE);
			this.state = 2108;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2094;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2093;
						this.separator();
						}
						}
						this.state = 2096;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2098;
					this.identifier_result();
					this.state = 2106;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 265, this._ctx) ) {
					case 1:
						{
						this.state = 2100;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2099;
							this.separator();
							}
							}
							this.state = 2102;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2104;
						this.match(cobolParser.ROUNDED);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2110;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 266, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2136;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 2113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2112;
					this.separator();
					}
					}
					this.state = 2115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2117;
				this.match(cobolParser.EQUAL);
				this.state = 2119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2118;
					this.separator();
					}
					}
					this.state = 2121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
				break;

			case 2:
				{
				this.state = 2126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 2123;
					this.separator();
					}
					}
					this.state = 2128;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2129;
				this.match(cobolParser.EQUAL_);
				this.state = 2133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 2130;
					this.separator();
					}
					}
					this.state = 2135;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2138;
			this.arithmetic_expression(0);
			this.state = 2146;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 273, this._ctx) ) {
			case 1:
				{
				this.state = 2140;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2139;
					this.separator();
					}
					}
					this.state = 2142;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2144;
				this.on_size_variants();
				}
				break;
			}
			this.state = 2155;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 275, this._ctx) ) {
			case 1:
				{
				this.state = 2149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2148;
					this.separator();
					}
					}
					this.state = 2151;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2153;
				this.match(cobolParser.END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_statement(): Close_statementContext {
		let _localctx: Close_statementContext = new Close_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_close_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2157;
			this.match(cobolParser.CLOSE);
			this.state = 2173;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2158;
						this.separator();
						}
						}
						this.state = 2161;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2163;
					this.file_name();
					this.state = 2171;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 278, this._ctx) ) {
					case 1:
						{
						this.state = 2165;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2164;
							this.separator();
							}
							}
							this.state = 2167;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2169;
						this.close_params();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2175;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 279, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_params(): Close_paramsContext {
		let _localctx: Close_paramsContext = new Close_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_close_params);
		let _la: number;
		try {
			this.state = 2231;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2177;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2210;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
				case 1:
					{
					this.state = 2179;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2178;
						this.separator();
						}
						}
						this.state = 2181;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2208;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FOR:
					case cobolParser.REMOVAL:
						{
						this.state = 2189;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.FOR) {
							{
							this.state = 2183;
							this.match(cobolParser.FOR);
							this.state = 2185;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2184;
								this.separator();
								}
								}
								this.state = 2187;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							}
						}

						this.state = 2191;
						this.match(cobolParser.REMOVAL);
						}
						break;
					case cobolParser.NO:
					case cobolParser.WITH:
						{
						this.state = 2198;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === cobolParser.WITH) {
							{
							this.state = 2192;
							this.match(cobolParser.WITH);
							this.state = 2194;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2193;
								this.separator();
								}
								}
								this.state = 2196;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							}
						}

						this.state = 2200;
						this.match(cobolParser.NO);
						this.state = 2202;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2201;
							this.separator();
							}
							}
							this.state = 2204;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2206;
						this.match(cobolParser.REWIND);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.LOCK:
			case cobolParser.NO:
			case cobolParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 2212;
					this.match(cobolParser.WITH);
					this.state = 2214;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2213;
						this.separator();
						}
						}
						this.state = 2216;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2229;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.NO:
					{
					this.state = 2220;
					this.match(cobolParser.NO);
					this.state = 2222;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2221;
						this.separator();
						}
						}
						this.state = 2224;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2226;
					this.match(cobolParser.REWIND);
					}
					break;
				case cobolParser.LOCK:
					{
					this.state = 2228;
					this.match(cobolParser.LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cancel_statement(): Cancel_statementContext {
		let _localctx: Cancel_statementContext = new Cancel_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_cancel_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2233;
			this.match(cobolParser.CANCEL);
			this.state = 2241;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2234;
						this.separator();
						}
						}
						this.state = 2237;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2239;
					this.prog_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2243;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_statement(): Call_statementContext {
		let _localctx: Call_statementContext = new Call_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_call_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2245;
			this.match(cobolParser.CALL);
			this.state = 2247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2246;
				this.separator();
				}
				}
				this.state = 2249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2251;
			this.prog_name();
			this.state = 2259;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
			case 1:
				{
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2252;
					this.separator();
					}
					}
					this.state = 2255;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2257;
				this.call_using();
				}
				break;
			}
			this.state = 2268;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				{
				this.state = 2262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2261;
					this.separator();
					}
					}
					this.state = 2264;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2266;
				this.call_giving();
				}
				break;
			}
			this.state = 2277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				{
				this.state = 2271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2270;
					this.separator();
					}
					}
					this.state = 2273;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2275;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 2286;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				{
				this.state = 2280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2279;
					this.separator();
					}
					}
					this.state = 2282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2284;
				this.match(cobolParser.END_CALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_giving(): Call_givingContext {
		let _localctx: Call_givingContext = new Call_givingContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_call_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2288;
			this.match(cobolParser.GIVING);
			this.state = 2290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2289;
				this.separator();
				}
				}
				this.state = 2292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2294;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_using(): Call_usingContext {
		let _localctx: Call_usingContext = new Call_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_call_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2296;
			this.match(cobolParser.USING);
			this.state = 2304;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2298;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2297;
						this.separator();
						}
						}
						this.state = 2300;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2302;
					this.using_arg();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2306;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_arg(): Using_argContext {
		let _localctx: Using_argContext = new Using_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_using_arg);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2330;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.OMITTED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2308;
				this.match(cobolParser.OMITTED);
				}
				break;
			case cobolParser.BY:
			case cobolParser.CONTENT:
			case cobolParser.DESCRIPTOR:
			case cobolParser.REFERENCE:
			case cobolParser.VALUE:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2315;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY || _la === cobolParser.CONTENT || _la === cobolParser.DESCRIPTOR || _la === cobolParser.REFERENCE || _la === cobolParser.VALUE) {
					{
					this.state = 2309;
					this.using_prefix();
					this.state = 2311;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2310;
						this.separator();
						}
						}
						this.state = 2313;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2317;
				this.argument();
				this.state = 2327;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2319;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2318;
							this.separator();
							}
							}
							this.state = 2321;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2323;
						this.argument();
						}
						}
					}
					this.state = 2329;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 310, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_prefix(): Using_prefixContext {
		let _localctx: Using_prefixContext = new Using_prefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_using_prefix);
		let _la: number;
		try {
			this.state = 2368;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 320, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2332;
					this.match(cobolParser.BY);
					this.state = 2334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2333;
						this.separator();
						}
						}
						this.state = 2336;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2340;
				this.match(cobolParser.REFERENCE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2341;
					this.match(cobolParser.BY);
					this.state = 2343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2342;
						this.separator();
						}
						}
						this.state = 2345;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2349;
				this.match(cobolParser.CONTENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2350;
					this.match(cobolParser.BY);
					this.state = 2352;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2351;
						this.separator();
						}
						}
						this.state = 2354;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2358;
				this.match(cobolParser.DESCRIPTOR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.BY) {
					{
					this.state = 2359;
					this.match(cobolParser.BY);
					this.state = 2361;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2360;
						this.separator();
						}
						}
						this.state = 2363;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 2367;
				this.match(cobolParser.VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public argument(): ArgumentContext {
		let _localctx: ArgumentContext = new ArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_argument);
		try {
			this.state = 2373;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2370;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2371;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2372;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prog_name(): Prog_nameContext {
		let _localctx: Prog_nameContext = new Prog_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_prog_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2375;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_statement(): Alter_statementContext {
		let _localctx: Alter_statementContext = new Alter_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_alter_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2377;
			this.match(cobolParser.ALTER);
			this.state = 2411;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2378;
						this.separator();
						}
						}
						this.state = 2381;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2383;
					this.alter_proc();
					this.state = 2385;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2384;
						this.separator();
						}
						}
						this.state = 2387;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2389;
					this.match(cobolParser.TO);
					this.state = 2391;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2390;
						this.separator();
						}
						}
						this.state = 2393;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.PROCEED) {
						{
						this.state = 2395;
						this.match(cobolParser.PROCEED);
						this.state = 2397;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2396;
							this.separator();
							}
							}
							this.state = 2399;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2401;
						this.match(cobolParser.TO);
						this.state = 2403;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2402;
							this.separator();
							}
							}
							this.state = 2405;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 2409;
					this.alter_new_proc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2413;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 328, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_new_proc(): Alter_new_procContext {
		let _localctx: Alter_new_procContext = new Alter_new_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_alter_new_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2415;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_proc(): Alter_procContext {
		let _localctx: Alter_procContext = new Alter_procContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_alter_proc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2417;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_statement(): Add_statementContext {
		let _localctx: Add_statementContext = new Add_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_add_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2548;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 353, this._ctx) ) {
			case 1:
				{
				this.state = 2419;
				this.match(cobolParser.ADD);
				this.state = 2427;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2421;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2420;
							this.separator();
							}
							}
							this.state = 2423;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2425;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2429;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2432;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2431;
					this.separator();
					}
					}
					this.state = 2434;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2436;
				this.match(cobolParser.TO);
				this.state = 2452;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2438;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2437;
							this.separator();
							}
							}
							this.state = 2440;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2442;
						this.identifier_result();
						this.state = 2450;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 334, this._ctx) ) {
						case 1:
							{
							this.state = 2444;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2443;
								this.separator();
								}
								}
								this.state = 2446;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							this.state = 2448;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2454;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				{
				this.state = 2456;
				this.match(cobolParser.ADD);
				this.state = 2466;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2457;
							this.separator();
							}
							}
							this.state = 2460;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2462;
						this.add_num();
						}
						}
					}
					this.state = 2468;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
				}
				this.state = 2476;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
				case 1:
					{
					this.state = 2470;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2469;
						this.separator();
						}
						}
						this.state = 2472;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2474;
					this.match(cobolParser.TO);
					}
					break;
				}
				this.state = 2485;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2479;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2478;
							this.separator();
							}
							}
							this.state = 2481;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2483;
						this.add_num();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2487;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 341, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 2490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2489;
					this.separator();
					}
					}
					this.state = 2492;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2494;
				this.match(cobolParser.GIVING);
				this.state = 2510;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2496;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2495;
							this.separator();
							}
							}
							this.state = 2498;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 2500;
						this.identifier_result();
						this.state = 2508;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
						case 1:
							{
							this.state = 2502;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 2501;
								this.separator();
								}
								}
								this.state = 2504;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
							this.state = 2506;
							this.match(cobolParser.ROUNDED);
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2512;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 3:
				{
				this.state = 2514;
				this.match(cobolParser.ADD);
				this.state = 2516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2515;
					this.separator();
					}
					}
					this.state = 2518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2520;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.CORR || _la === cobolParser.CORRESPONDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2521;
					this.separator();
					}
					}
					this.state = 2524;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2526;
				this.add_grp();
				this.state = 2528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2527;
					this.separator();
					}
					}
					this.state = 2530;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2532;
				this.match(cobolParser.TO);
				this.state = 2534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2533;
					this.separator();
					}
					}
					this.state = 2536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2538;
				this.add_grp();
				this.state = 2546;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
				case 1:
					{
					this.state = 2540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2539;
						this.separator();
						}
						}
						this.state = 2542;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2544;
					this.match(cobolParser.ROUNDED);
					}
					break;
				}
				}
				break;
			}
			this.state = 2557;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				{
				this.state = 2551;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2550;
					this.separator();
					}
					}
					this.state = 2553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2555;
				this.on_size_variants();
				}
				break;
			}
			this.state = 2566;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 357, this._ctx) ) {
			case 1:
				{
				this.state = 2560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2559;
					this.separator();
					}
					}
					this.state = 2562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2564;
				this.match(cobolParser.END_ADD);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_grp(): Add_grpContext {
		let _localctx: Add_grpContext = new Add_grpContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_add_grp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2568;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_num(): Add_numContext {
		let _localctx: Add_numContext = new Add_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_add_num);
		try {
			this.state = 2572;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2570;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2571;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_statement(): Accept_statementContext {
		let _localctx: Accept_statementContext = new Accept_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_accept_statement);
		try {
			this.state = 2580;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2574;
				this.accept_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2575;
				this.accept_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2576;
				this.accept_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2577;
				this.accept_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2578;
				this.accept_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2579;
				this.accept_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception_variants(): On_exception_variantsContext {
		let _localctx: On_exception_variantsContext = new On_exception_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_on_exception_variants);
		let _la: number;
		try {
			this.state = 2614;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.EXCEPTION:
			case cobolParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2582;
				this.on_exception();
				this.state = 2596;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
				case 1:
					{
					this.state = 2584;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2583;
						this.separator();
						}
						}
						this.state = 2586;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2588;
					this.match(cobolParser.NOT);
					this.state = 2590;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2589;
						this.separator();
						}
						}
						this.state = 2592;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2594;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2598;
				this.match(cobolParser.NOT);
				this.state = 2600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2599;
					this.separator();
					}
					}
					this.state = 2602;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2604;
				this.on_exception();
				this.state = 2612;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
				case 1:
					{
					this.state = 2606;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2605;
						this.separator();
						}
						}
						this.state = 2608;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2610;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end_variants(): At_end_variantsContext {
		let _localctx: At_end_variantsContext = new At_end_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_at_end_variants);
		let _la: number;
		try {
			this.state = 2648;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2616;
				this.at_end();
				this.state = 2630;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
				case 1:
					{
					this.state = 2618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2617;
						this.separator();
						}
						}
						this.state = 2620;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2622;
					this.match(cobolParser.NOT);
					this.state = 2624;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2623;
						this.separator();
						}
						}
						this.state = 2626;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2628;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2632;
				this.match(cobolParser.NOT);
				this.state = 2634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2633;
					this.separator();
					}
					}
					this.state = 2636;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2638;
				this.at_end();
				this.state = 2646;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 2640;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2639;
						this.separator();
						}
						}
						this.state = 2642;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2644;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size_variants(): On_size_variantsContext {
		let _localctx: On_size_variantsContext = new On_size_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_on_size_variants);
		let _la: number;
		try {
			this.state = 2682;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
			case cobolParser.SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2650;
				this.on_size();
				this.state = 2664;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
				case 1:
					{
					this.state = 2652;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2651;
						this.separator();
						}
						}
						this.state = 2654;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2656;
					this.match(cobolParser.NOT);
					this.state = 2658;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2657;
						this.separator();
						}
						}
						this.state = 2660;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2662;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2666;
				this.match(cobolParser.NOT);
				this.state = 2668;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2667;
					this.separator();
					}
					}
					this.state = 2670;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2672;
				this.on_size();
				this.state = 2680;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 379, this._ctx) ) {
				case 1:
					{
					this.state = 2674;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2673;
						this.separator();
						}
						}
						this.state = 2676;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2678;
					this.on_size();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_key_variants(): On_key_variantsContext {
		let _localctx: On_key_variantsContext = new On_key_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_on_key_variants);
		let _la: number;
		try {
			this.state = 2716;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.INVALID:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2684;
				this.on_key();
				this.state = 2698;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
				case 1:
					{
					this.state = 2686;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2685;
						this.separator();
						}
						}
						this.state = 2688;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2690;
					this.match(cobolParser.NOT);
					this.state = 2692;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2691;
						this.separator();
						}
						}
						this.state = 2694;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2696;
					this.on_key();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2700;
				this.match(cobolParser.NOT);
				this.state = 2702;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2701;
					this.separator();
					}
					}
					this.state = 2704;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2706;
				this.on_key();
				this.state = 2714;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 386, this._ctx) ) {
				case 1:
					{
					this.state = 2708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2707;
						this.separator();
						}
						}
						this.state = 2710;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2712;
					this.on_key();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form6(): Accept_form6Context {
		let _localctx: Accept_form6Context = new Accept_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_accept_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2718;
			this.match(cobolParser.ACCEPT);
			this.state = 2720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2719;
				this.separator();
				}
				}
				this.state = 2722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2724;
			this.dest_item();
			this.state = 2726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2725;
				this.separator();
				}
				}
				this.state = 2728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FROM) {
				{
				this.state = 2730;
				this.match(cobolParser.FROM);
				this.state = 2732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2731;
					this.separator();
					}
					}
					this.state = 2734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2738;
			this.accept6_item();
			this.state = 2746;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 2740;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2739;
					this.separator();
					}
					}
					this.state = 2742;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2744;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 2755;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
			case 1:
				{
				this.state = 2749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2748;
					this.separator();
					}
					}
					this.state = 2751;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2753;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept6_item(): Accept6_itemContext {
		let _localctx: Accept6_itemContext = new Accept6_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_accept6_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2757;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form1(): Accept_form1Context {
		let _localctx: Accept_form1Context = new Accept_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_accept_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2759;
			this.match(cobolParser.ACCEPT);
			this.state = 2761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2760;
				this.separator();
				}
				}
				this.state = 2763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2765;
			this.dest_item();
			this.state = 2779;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
			case 1:
				{
				this.state = 2767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2766;
					this.separator();
					}
					}
					this.state = 2769;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2771;
				this.match(cobolParser.FROM);
				this.state = 2773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2772;
					this.separator();
					}
					}
					this.state = 2775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2777;
				this.input_source();
				}
				break;
			}
			this.state = 2794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 402, this._ctx) ) {
			case 1:
				{
				this.state = 2782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2781;
					this.separator();
					}
					}
					this.state = 2784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2786;
				this.match(cobolParser.WITH);
				this.state = 2788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2787;
					this.separator();
					}
					}
					this.state = 2790;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2792;
				this.match(cobolParser.CONVERSION);
				}
				break;
			}
			this.state = 2803;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				{
				this.state = 2797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2796;
					this.separator();
					}
					}
					this.state = 2799;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2801;
				this.at_end_variants();
				}
				break;
			}
			this.state = 2812;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
			case 1:
				{
				this.state = 2806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2805;
					this.separator();
					}
					}
					this.state = 2808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2810;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form2(): Accept_form2Context {
		let _localctx: Accept_form2Context = new Accept_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_accept_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2814;
			this.match(cobolParser.ACCEPT);
			this.state = 2816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2815;
				this.separator();
				}
				}
				this.state = 2818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2820;
			this.dest_item();
			this.state = 2822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2821;
				this.separator();
				}
				}
				this.state = 2824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2826;
			this.match(cobolParser.FROM);
			this.state = 2828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2827;
				this.separator();
				}
				}
				this.state = 2830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2832;
			this.date_time();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3(): Accept_form3Context {
		let _localctx: Accept_form3Context = new Accept_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_accept_form3);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2834;
			this.match(cobolParser.ACCEPT);
			this.state = 2836;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2835;
				this.separator();
				}
				}
				this.state = 2838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2840;
			this.dest_item();
			this.state = 2848;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2841;
						this.separator();
						}
						}
						this.state = 2844;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2846;
					this.accept_form3_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2850;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 412, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2861;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				{
				this.state = 2853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2852;
					this.separator();
					}
					}
					this.state = 2855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2859;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
				case 1:
					{
					this.state = 2857;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 2858;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 2870;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				{
				this.state = 2864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2863;
					this.separator();
					}
					}
					this.state = 2866;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2868;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4(): Accept_form4Context {
		let _localctx: Accept_form4Context = new Accept_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_accept_form4);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2872;
			this.match(cobolParser.ACCEPT);
			this.state = 2874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2873;
				this.separator();
				}
				}
				this.state = 2876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2884;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 2878;
				this.match(cobolParser.CONTROL);
				this.state = 2880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2879;
					this.separator();
					}
					}
					this.state = 2882;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2886;
			this.match(cobolParser.KEY);
			this.state = 2888;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2887;
				this.separator();
				}
				}
				this.state = 2890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 2892;
				this.match(cobolParser.IN);
				this.state = 2894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2893;
					this.separator();
					}
					}
					this.state = 2896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2900;
			this.key_dest_item();
			this.state = 2908;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2902;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2901;
						this.separator();
						}
						}
						this.state = 2904;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2906;
					this.accept_form4_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2910;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 425, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 2921;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				{
				this.state = 2913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2912;
					this.separator();
					}
					}
					this.state = 2915;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2919;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 427, this._ctx) ) {
				case 1:
					{
					this.state = 2917;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 2918;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 2930;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
			case 1:
				{
				this.state = 2924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2923;
					this.separator();
					}
					}
					this.state = 2926;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2928;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form5(): Accept_form5Context {
		let _localctx: Accept_form5Context = new Accept_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_accept_form5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2932;
			this.match(cobolParser.ACCEPT);
			this.state = 2934;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2933;
				this.separator();
				}
				}
				this.state = 2936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 2938;
			this.screen_name();
			this.state = 2946;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				{
				this.state = 2940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2939;
					this.separator();
					}
					}
					this.state = 2942;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2944;
				this.accept_at();
				}
				break;
			}
			this.state = 2955;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
			case 1:
				{
				this.state = 2949;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2948;
					this.separator();
					}
					}
					this.state = 2951;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2953;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 2964;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
			case 1:
				{
				this.state = 2958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2957;
					this.separator();
					}
					}
					this.state = 2960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 2962;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at(): Accept_atContext {
		let _localctx: Accept_atContext = new Accept_atContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_accept_at);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 2966;
				this.match(cobolParser.AT);
				this.state = 2968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2967;
					this.separator();
					}
					}
					this.state = 2970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 2994;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				{
				this.state = 2974;
				this.accept_at_line();
				this.state = 2982;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 441, this._ctx) ) {
				case 1:
					{
					this.state = 2976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2975;
						this.separator();
						}
						}
						this.state = 2978;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2980;
					this.accept_at_column();
					}
					break;
				}
				}
				break;
			case cobolParser.COLUMN:
				{
				this.state = 2984;
				this.accept_at_column();
				this.state = 2992;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
				case 1:
					{
					this.state = 2986;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2985;
						this.separator();
						}
						}
						this.state = 2988;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 2990;
					this.accept_at_line();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_line(): Accept_at_lineContext {
		let _localctx: Accept_at_lineContext = new Accept_at_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_accept_at_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2996;
			this.match(cobolParser.LINE);
			this.state = 2998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2997;
				this.separator();
				}
				}
				this.state = 3000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3008;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3002;
				this.match(cobolParser.NUMBER);
				this.state = 3004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3003;
					this.separator();
					}
					}
					this.state = 3006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 3012;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 3010;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 3011;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_column(): Accept_at_columnContext {
		let _localctx: Accept_at_columnContext = new Accept_at_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_accept_at_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3014;
			this.match(cobolParser.COLUMN);
			this.state = 3016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3015;
				this.separator();
				}
				}
				this.state = 3018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3026;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 3020;
				this.match(cobolParser.NUMBER);
				this.state = 3022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3021;
					this.separator();
					}
					}
					this.state = 3024;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 3030;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 3028;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 3029;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4_clause(): Accept_form4_clauseContext {
		let _localctx: Accept_form4_clauseContext = new Accept_form4_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_accept_form4_clause);
		let _la: number;
		try {
			this.state = 3124;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 3032;
					this.match(cobolParser.FROM);
					this.state = 3034;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3033;
						this.separator();
						}
						}
						this.state = 3036;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3040;
				this.match(cobolParser.LINE);
				this.state = 3048;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
				case 1:
					{
					this.state = 3042;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3041;
						this.separator();
						}
						}
						this.state = 3044;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3046;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 3051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3050;
					this.separator();
					}
					}
					this.state = 3053;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3055;
				this.number_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 3057;
					this.match(cobolParser.FROM);
					this.state = 3059;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3058;
						this.separator();
						}
						}
						this.state = 3061;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3065;
				this.match(cobolParser.COLUMN);
				this.state = 3073;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
				case 1:
					{
					this.state = 3067;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3066;
						this.separator();
						}
						}
						this.state = 3069;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3071;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 3076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3075;
					this.separator();
					}
					}
					this.state = 3078;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3080;
				this.number_value();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3082;
				this.match(cobolParser.ERASE);
				this.state = 3106;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
				case 1:
					{
					this.state = 3084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3083;
						this.separator();
						}
						}
						this.state = 3086;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3094;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 3088;
						this.match(cobolParser.TO);
						this.state = 3090;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3089;
							this.separator();
							}
							}
							this.state = 3092;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 3096;
					this.match(cobolParser.END);
					this.state = 3104;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
					case 1:
						{
						this.state = 3098;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3097;
							this.separator();
							}
							}
							this.state = 3100;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 3102;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 3109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3108;
					this.separator();
					}
					}
					this.state = 3111;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3113;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3121;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3115;
					this.match(cobolParser.WITH);
					this.state = 3117;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3116;
						this.separator();
						}
						}
						this.state = 3119;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3123;
				this.match(cobolParser.BELL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3_clause(): Accept_form3_clauseContext {
		let _localctx: Accept_form3_clauseContext = new Accept_form3_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_accept_form3_clause);
		let _la: number;
		try {
			this.state = 3215;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3126;
				this.accept_form4_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3127;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3128;
				this.match(cobolParser.BOLD);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3129;
					this.match(cobolParser.WITH);
					this.state = 3131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3130;
						this.separator();
						}
						}
						this.state = 3133;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3137;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3138;
				this.match(cobolParser.PROTECTED);
				this.state = 3146;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
				case 1:
					{
					this.state = 3140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3139;
						this.separator();
						}
						}
						this.state = 3142;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3144;
					this.protected_value();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3148;
					this.match(cobolParser.WITH);
					this.state = 3150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3149;
						this.separator();
						}
						}
						this.state = 3152;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3156;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3157;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3158;
					this.match(cobolParser.WITH);
					this.state = 3160;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3159;
						this.separator();
						}
						}
						this.state = 3162;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3166;
				this.match(cobolParser.NO);
				this.state = 3168;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3167;
					this.separator();
					}
					}
					this.state = 3170;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3172;
				this.match(cobolParser.ECHO);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3174;
				this.match(cobolParser.DEFAULT);
				this.state = 3176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3175;
					this.separator();
					}
					}
					this.state = 3178;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3180;
					this.match(cobolParser.IS);
					this.state = 3182;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3181;
						this.separator();
						}
						}
						this.state = 3184;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3188;
				this.def_value();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTROL) {
					{
					this.state = 3190;
					this.match(cobolParser.CONTROL);
					this.state = 3192;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3191;
						this.separator();
						}
						}
						this.state = 3194;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3198;
				this.match(cobolParser.KEY);
				this.state = 3206;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
				case 1:
					{
					this.state = 3200;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3199;
						this.separator();
						}
						}
						this.state = 3202;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3204;
					this.match(cobolParser.IN);
					}
					break;
				}
				this.state = 3209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3208;
					this.separator();
					}
					}
					this.state = 3211;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3213;
				this.key_dest_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_dest_item(): Key_dest_itemContext {
		let _localctx: Key_dest_itemContext = new Key_dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_key_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3217;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_value(): Def_valueContext {
		let _localctx: Def_valueContext = new Def_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_def_value);
		let _la: number;
		try {
			this.state = 3232;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3219;
				this.figurative_constant();
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3220;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3221;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CURRENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3222;
				this.match(cobolParser.CURRENT);
				this.state = 3230;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
				case 1:
					{
					this.state = 3224;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3223;
						this.separator();
						}
						}
						this.state = 3226;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3228;
					this.match(cobolParser.VALUE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public protected_value(): Protected_valueContext {
		let _localctx: Protected_valueContext = new Protected_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_protected_value);
		let _la: number;
		try {
			this.state = 3292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3234;
				this.match(cobolParser.SIZE);
				this.state = 3236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3235;
					this.separator();
					}
					}
					this.state = 3238;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3240;
				this.prot_size_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3242;
					this.match(cobolParser.WITH);
					this.state = 3244;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3243;
						this.separator();
						}
						}
						this.state = 3246;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3250;
				this.match(cobolParser.AUTOTERMINATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3251;
					this.match(cobolParser.WITH);
					this.state = 3253;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3252;
						this.separator();
						}
						}
						this.state = 3255;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3259;
				this.match(cobolParser.NO);
				this.state = 3261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3260;
					this.separator();
					}
					}
					this.state = 3263;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3265;
				this.match(cobolParser.BLANK);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3267;
					this.match(cobolParser.WITH);
					this.state = 3269;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3268;
						this.separator();
						}
						}
						this.state = 3271;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3275;
				this.match(cobolParser.EDITING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3276;
					this.match(cobolParser.WITH);
					this.state = 3278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3277;
						this.separator();
						}
						}
						this.state = 3280;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3284;
				this.match(cobolParser.FILLER);
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3285;
					this.separator();
					}
					}
					this.state = 3288;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3290;
				this.prot_fill_lit();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_fill_lit(): Prot_fill_litContext {
		let _localctx: Prot_fill_litContext = new Prot_fill_litContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_prot_fill_lit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3294;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_size_value(): Prot_size_valueContext {
		let _localctx: Prot_size_valueContext = new Prot_size_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_prot_size_value);
		try {
			this.state = 3298;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3296;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3297;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number_value(): Number_valueContext {
		let _localctx: Number_valueContext = new Number_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_number_value);
		let _la: number;
		try {
			this.state = 3329;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3300;
				this.line_num();
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3301;
				this.qualified_data_item();
				this.state = 3317;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 510, this._ctx) ) {
				case 1:
					{
					this.state = 3303;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3302;
						this.separator();
						}
						}
						this.state = 3305;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3307;
					this.match(cobolParser.PLUS);
					this.state = 3315;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 509, this._ctx) ) {
					case 1:
						{
						this.state = 3309;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3308;
							this.separator();
							}
							}
							this.state = 3311;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 3313;
						this.line_num();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3319;
				this.match(cobolParser.PLUS);
				this.state = 3327;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 512, this._ctx) ) {
				case 1:
					{
					this.state = 3321;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3320;
						this.separator();
						}
						}
						this.state = 3323;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3325;
					this.line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_time(): Date_timeContext {
		let _localctx: Date_timeContext = new Date_timeContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_date_time);
		let _la: number;
		try {
			this.state = 3353;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3331;
				this.match(cobolParser.DATE);
				this.state = 3339;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 515, this._ctx) ) {
				case 1:
					{
					this.state = 3333;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3332;
						this.separator();
						}
						}
						this.state = 3335;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3337;
					this.match(cobolParser.YYYYMMDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3341;
				this.match(cobolParser.DAY);
				this.state = 3349;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
				case 1:
					{
					this.state = 3343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3342;
						this.separator();
						}
						}
						this.state = 3345;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3347;
					this.match(cobolParser.YYYYDDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3351;
				this.match(cobolParser.DAY_OF_WEEK);
				}
				break;
			case cobolParser.TIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3352;
				this.match(cobolParser.TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dest_item(): Dest_itemContext {
		let _localctx: Dest_itemContext = new Dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3355;
			this.identifier_result();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_source(): Input_sourceContext {
		let _localctx: Input_sourceContext = new Input_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_input_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3357;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end(): At_endContext {
		let _localctx: At_endContext = new At_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_at_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 3359;
				this.match(cobolParser.AT);
				this.state = 3361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3360;
					this.separator();
					}
					}
					this.state = 3363;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 3367;
			this.match(cobolParser.END);
			this.state = 3375;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 522, this._ctx) ) {
			case 1:
				{
				this.state = 3369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3368;
					this.separator();
					}
					}
					this.state = 3371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3373;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception(): On_exceptionContext {
		let _localctx: On_exceptionContext = new On_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_on_exception);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 3377;
				this.match(cobolParser.ON);
				this.state = 3379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3378;
					this.separator();
					}
					}
					this.state = 3381;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 3385;
			this.match(cobolParser.EXCEPTION);
			this.state = 3393;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				{
				this.state = 3387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3386;
					this.separator();
					}
					}
					this.state = 3389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3391;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_size(): On_sizeContext {
		let _localctx: On_sizeContext = new On_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_on_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 3395;
				this.match(cobolParser.ON);
				this.state = 3397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3396;
					this.separator();
					}
					}
					this.state = 3399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 3403;
			this.match(cobolParser.SIZE);
			this.state = 3405;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3404;
				this.separator();
				}
				}
				this.state = 3407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3409;
			this.match(cobolParser.ERROR);
			this.state = 3417;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				{
				this.state = 3411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3410;
					this.separator();
					}
					}
					this.state = 3413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3415;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_key(): On_keyContext {
		let _localctx: On_keyContext = new On_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_on_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3419;
			this.match(cobolParser.INVALID);
			this.state = 3427;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 533, this._ctx) ) {
			case 1:
				{
				this.state = 3421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3420;
					this.separator();
					}
					}
					this.state = 3423;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3425;
				this.match(cobolParser.KEY);
				}
				break;
			}
			this.state = 3436;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 535, this._ctx) ) {
			case 1:
				{
				this.state = 3430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3429;
					this.separator();
					}
					}
					this.state = 3432;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3434;
				this.sentense();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3438;
			this.match(cobolParser.DATA);
			this.state = 3440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3439;
				this.separator();
				}
				}
				this.state = 3442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3444;
			this.match(cobolParser.DIVISION);
			this.state = 3448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3445;
				this.separator();
				}
				}
				this.state = 3450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3451;
			this.match(cobolParser.DOT_);
			this.state = 3455;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3452;
					this.separator();
					}
					}
				}
				this.state = 3457;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			}
			this.state = 3465;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 3458;
				this.file_section();
				this.state = 3462;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3459;
						this.separator();
						}
						}
					}
					this.state = 3464;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 539, this._ctx);
				}
				}
			}

			this.state = 3474;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 3467;
				this.working_storage_section();
				this.state = 3471;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3468;
						this.separator();
						}
						}
					}
					this.state = 3473;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 541, this._ctx);
				}
				}
			}

			this.state = 3483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 3476;
				this.linkage_section();
				this.state = 3480;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3477;
						this.separator();
						}
						}
					}
					this.state = 3482;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 543, this._ctx);
				}
				}
			}

			this.state = 3492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 3485;
				this.report_section();
				this.state = 3489;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3486;
						this.separator();
						}
						}
					}
					this.state = 3491;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 545, this._ctx);
				}
				}
			}

			this.state = 3501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 3494;
				this.screen_section();
				this.state = 3498;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3495;
						this.separator();
						}
						}
					}
					this.state = 3500;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 547, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3503;
			this.match(cobolParser.FILE);
			this.state = 3505;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3504;
				this.separator();
				}
				}
				this.state = 3507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3509;
			this.match(cobolParser.SECTION);
			this.state = 3513;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3510;
				this.separator();
				}
				}
				this.state = 3515;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3516;
			this.match(cobolParser.DOT_);
			this.state = 3520;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3517;
					this.separator();
					}
					}
				}
				this.state = 3522;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 551, this._ctx);
			}
			this.state = 3560;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 3550;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 3523;
					this.file_description_entry();
					this.state = 3533;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3527;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
								{
								{
								this.state = 3524;
								this.separator();
								}
								}
								this.state = 3529;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 3530;
							this.record_description_entry();
							}
							}
						}
						this.state = 3535;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
					}
					}
					break;
				case cobolParser.RD:
					{
					this.state = 3536;
					this.report_description_entry();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 3537;
					this.sort_merge_file_description_entry();
					this.state = 3547;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3541;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
								{
								{
								this.state = 3538;
								this.separator();
								}
								}
								this.state = 3543;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 3544;
							this.record_description_entry();
							}
							}
						}
						this.state = 3549;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3555;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3552;
						this.separator();
						}
						}
					}
					this.state = 3557;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
				}
				}
				}
				this.state = 3562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3563;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 3565;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3564;
				this.separator();
				}
				}
				this.state = 3567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3569;
			this.match(cobolParser.SECTION);
			this.state = 3573;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3570;
				this.separator();
				}
				}
				this.state = 3575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3576;
			this.match(cobolParser.DOT_);
			this.state = 3580;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3577;
					this.separator();
					}
					}
				}
				this.state = 3582;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
			}
			this.state = 3592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3583;
				this.record_description_entry();
				this.state = 3587;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3584;
						this.separator();
						}
						}
					}
					this.state = 3589;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 562, this._ctx);
				}
				}
				}
				this.state = 3594;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3595;
			this.match(cobolParser.LINKAGE);
			this.state = 3597;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3596;
				this.separator();
				}
				}
				this.state = 3599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3601;
			this.match(cobolParser.SECTION);
			this.state = 3605;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3602;
				this.separator();
				}
				}
				this.state = 3607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3608;
			this.match(cobolParser.DOT_);
			this.state = 3612;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3609;
					this.separator();
					}
					}
				}
				this.state = 3614;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
			}
			this.state = 3624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3615;
				this.record_description_entry();
				this.state = 3619;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3616;
						this.separator();
						}
						}
					}
					this.state = 3621;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 567, this._ctx);
				}
				}
				}
				this.state = 3626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3627;
			this.match(cobolParser.REPORT);
			this.state = 3629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3628;
				this.separator();
				}
				}
				this.state = 3631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3633;
			this.match(cobolParser.SECTION);
			this.state = 3637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3634;
				this.separator();
				}
				}
				this.state = 3639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3640;
			this.match(cobolParser.DOT_);
			this.state = 3644;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3641;
					this.separator();
					}
					}
				}
				this.state = 3646;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 571, this._ctx);
			}
			this.state = 3668;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 3647;
				this.report_description_entry();
				this.state = 3657;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3651;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
							{
							{
							this.state = 3648;
							this.separator();
							}
							}
							this.state = 3653;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3654;
						this.report_group_description_entry();
						}
						}
					}
					this.state = 3659;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 573, this._ctx);
				}
				this.state = 3663;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3660;
						this.separator();
						}
						}
					}
					this.state = 3665;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
				}
				}
				}
				this.state = 3670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3671;
			this.match(cobolParser.SCREEN);
			this.state = 3673;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3672;
				this.separator();
				}
				}
				this.state = 3675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3677;
			this.match(cobolParser.SECTION);
			this.state = 3681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3678;
				this.separator();
				}
				}
				this.state = 3683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3684;
			this.match(cobolParser.DOT_);
			this.state = 3688;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3685;
					this.separator();
					}
					}
				}
				this.state = 3690;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 578, this._ctx);
			}
			this.state = 3700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 3691;
				this.screen_description_entry();
				this.state = 3695;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3692;
						this.separator();
						}
						}
					}
					this.state = 3697;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 579, this._ctx);
				}
				}
				}
				this.state = 3702;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3703;
			this.match(cobolParser.FD);
			this.state = 3705;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3704;
				this.separator();
				}
				}
				this.state = 3707;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3709;
			this.file_name();
			this.state = 3713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3710;
				this.separator();
				}
				}
				this.state = 3715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3725;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 164)) & ~0x1F) === 0 && ((1 << (_la - 164)) & ((1 << (cobolParser.EXTERNAL - 164)) | (1 << (cobolParser.FILE - 164)) | (1 << (cobolParser.GLOBAL - 164)))) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & ((1 << (cobolParser.IS - 212)) | (1 << (cobolParser.LABEL - 212)) | (1 << (cobolParser.LINAGE - 212)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (cobolParser.RANDOM - 289)) | (1 << (cobolParser.RECORD - 289)) | (1 << (cobolParser.REPORT - 289)) | (1 << (cobolParser.REPORTS - 289)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 3716;
				this.fd_clause();
				this.state = 3720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 3717;
					this.separator();
					}
					}
					this.state = 3722;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3727;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3728;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3730;
			this.match(cobolParser.SD);
			this.state = 3732;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3731;
				this.separator();
				}
				}
				this.state = 3734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3736;
			this.file_name();
			this.state = 3740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3737;
				this.separator();
				}
				}
				this.state = 3742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 3743;
				this.sd_clause();
				this.state = 3747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 3744;
					this.separator();
					}
					}
					this.state = 3749;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3755;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3757;
			this.match(cobolParser.RD);
			this.state = 3759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3758;
				this.separator();
				}
				}
				this.state = 3761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3763;
			this.report_name();
			this.state = 3767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3764;
				this.separator();
				}
				}
				this.state = 3769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 60)) & ~0x1F) === 0 && ((1 << (_la - 60)) & ((1 << (cobolParser.CODE - 60)) | (1 << (cobolParser.CONTROL - 60)) | (1 << (cobolParser.CONTROLS - 60)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 3770;
				this.rd_clause();
				this.state = 3774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 3771;
					this.separator();
					}
					}
					this.state = 3776;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 3781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3782;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fd_clause(): Fd_clauseContext {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_fd_clause);
		let _la: number;
		try {
			this.state = 3813;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 597, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3784;
					this.match(cobolParser.IS);
					this.state = 3786;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3785;
						this.separator();
						}
						}
						this.state = 3788;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3792;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3793;
					this.match(cobolParser.IS);
					this.state = 3795;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3794;
						this.separator();
						}
						}
						this.state = 3797;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3801;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3802;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3803;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3804;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3805;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3806;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3807;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3808;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3809;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3810;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3811;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3812;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_description_entry(): Record_description_entryContext {
		let _localctx: Record_description_entryContext = new Record_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_record_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3815;
			this.data_description_entry();
			this.state = 3825;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3819;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 3816;
						this.separator();
						}
						}
						this.state = 3821;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3822;
					this.data_description_entry();
					}
					}
				}
				this.state = 3827;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 599, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_entry(): Data_description_entryContext {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3828;
			this.level_number();
			this.state = 3838;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
			case 1:
				{
				this.state = 3830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3829;
					this.separator();
					}
					}
					this.state = 3832;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3836;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 3834;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 3835;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 3853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 605, this._ctx) ) {
			case 1:
				{
				this.state = 3841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3840;
					this.separator();
					}
					}
					this.state = 3843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3845;
				this.match(cobolParser.REDEFINES);
				this.state = 3847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3846;
					this.separator();
					}
					}
					this.state = 3849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3851;
				this.other_data_item();
				}
				break;
			}
			this.state = 3864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 3856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3855;
					this.separator();
					}
					}
					this.state = 3858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3860;
				this.data_description_clause();
				}
				}
				this.state = 3866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3867;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3869;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_clause(): Data_description_clauseContext {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_data_description_clause);
		let _la: number;
		try {
			this.state = 3931;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3871;
					this.match(cobolParser.IS);
					this.state = 3873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3872;
						this.separator();
						}
						}
						this.state = 3875;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3879;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3880;
					this.match(cobolParser.IS);
					this.state = 3882;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3881;
						this.separator();
						}
						}
						this.state = 3884;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3888;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3889;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3890;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3891;
				this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3892;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3893;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3901;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
				case 1:
					{
					this.state = 3895;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3894;
						this.separator();
						}
						}
						this.state = 3897;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3899;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3903;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3911;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 615, this._ctx) ) {
				case 1:
					{
					this.state = 3905;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3904;
						this.separator();
						}
						}
						this.state = 3907;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3909;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3913;
				this.match(cobolParser.BLANK);
				this.state = 3915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3914;
					this.separator();
					}
					}
					this.state = 3917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 3919;
					this.match(cobolParser.WHEN);
					this.state = 3921;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3920;
						this.separator();
						}
						}
						this.state = 3923;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 3927;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3929;
				this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3930;
				this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renames(): RenamesContext {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3933;
			this.match(cobolParser.RENAMES);
			this.state = 3935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3934;
				this.separator();
				}
				}
				this.state = 3937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3939;
			this.rename_start();
			this.state = 3953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
			case 1:
				{
				this.state = 3941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3940;
					this.separator();
					}
					}
					this.state = 3943;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3945;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3947;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3946;
					this.separator();
					}
					}
					this.state = 3949;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 3951;
				this.rename_end();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_start(): Rename_startContext {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3955;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_end(): Rename_endContext {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3957;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3979;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 3959;
				this.match(cobolParser.VALUE);
				this.state = 3967;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 625, this._ctx) ) {
				case 1:
					{
					this.state = 3961;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3960;
						this.separator();
						}
						}
						this.state = 3963;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3965;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 3969;
				this.match(cobolParser.VALUES);
				this.state = 3977;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 627, this._ctx) ) {
				case 1:
					{
					this.state = 3971;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3970;
						this.separator();
						}
						}
						this.state = 3973;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3975;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3981;
				this.separator();
				}
				}
				this.state = 3984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 3986;
			this.value_is_definition();
			this.state = 3996;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3987;
						this.separator();
						}
						}
						this.state = 3990;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 3992;
					this.value_is_definition();
					}
					}
				}
				this.state = 3998;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 631, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3999;
			this.value_is_definition_part();
			this.state = 4007;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
			case 1:
				{
				this.state = 4001;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4000;
					this.separator();
					}
					}
					this.state = 4003;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4005;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 4026;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4009;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4010;
				this.match(cobolParser.REFERENCE);
				this.state = 4012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4011;
					this.separator();
					}
					}
					this.state = 4014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4016;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4018;
				this.match(cobolParser.EXTERNAL);
				this.state = 4020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4019;
					this.separator();
					}
					}
					this.state = 4022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4024;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4028;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4029;
				this.separator();
				}
				}
				this.state = 4032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 4034;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4036;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4038;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4040;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4042;
			this.match(cobolParser.OCCURS);
			this.state = 4044;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4043;
				this.separator();
				}
				}
				this.state = 4046;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 4048;
			this.times_definition();
			this.state = 4058;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 640, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4050;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4049;
						this.separator();
						}
						}
						this.state = 4052;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4054;
					this.key_is();
					}
					}
				}
				this.state = 4060;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 640, this._ctx);
			}
			this.state = 4068;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
			case 1:
				{
				this.state = 4062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4061;
					this.separator();
					}
					}
					this.state = 4064;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4066;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4070;
			this.match(cobolParser.INDEXED);
			this.state = 4072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4071;
				this.separator();
				}
				}
				this.state = 4074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 4082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 4076;
				this.match(cobolParser.BY);
				this.state = 4078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4077;
					this.separator();
					}
					}
					this.state = 4080;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 4084;
			this.ind_name();
			this.state = 4094;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4085;
						this.separator();
						}
						}
						this.state = 4088;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4090;
					this.ind_name();
					}
					}
				}
				this.state = 4096;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4097;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4099;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4100;
				this.separator();
				}
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 4111;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 4105;
				this.match(cobolParser.KEY);
				this.state = 4107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4106;
					this.separator();
					}
					}
					this.state = 4109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 4119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4113;
				this.match(cobolParser.IS);
				this.state = 4115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4114;
					this.separator();
					}
					}
					this.state = 4117;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 4121;
			this.key_name();
			this.state = 4131;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 654, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4123;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4122;
						this.separator();
						}
						}
						this.state = 4125;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4127;
					this.key_name();
					}
					}
				}
				this.state = 4133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 654, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4134;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_definition(): Times_definitionContext {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 4184;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4136;
				this.table_size();
				this.state = 4138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4137;
					this.separator();
					}
					}
					this.state = 4140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4142;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4144;
				this.min_times();
				this.state = 4146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4145;
					this.separator();
					}
					}
					this.state = 4148;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4150;
				this.match(cobolParser.TO);
				this.state = 4152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4151;
					this.separator();
					}
					}
					this.state = 4154;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4156;
				this.max_times();
				this.state = 4158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4157;
					this.separator();
					}
					}
					this.state = 4160;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4162;
				this.match(cobolParser.TIMES);
				this.state = 4164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4163;
					this.separator();
					}
					}
					this.state = 4166;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4168;
				this.match(cobolParser.DEPENDING);
				this.state = 4170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4169;
					this.separator();
					}
					}
					this.state = 4172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4180;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 4174;
					this.match(cobolParser.ON);
					this.state = 4176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4175;
						this.separator();
						}
						}
						this.state = 4178;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4182;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4186;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4188;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4190;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_description_entry(): Report_group_description_entryContext {
		let _localctx: Report_group_description_entryContext = new Report_group_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_report_group_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4192;
			this.report_group_data_description();
			this.state = 4202;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 4193;
						this.separator();
						}
						}
						this.state = 4198;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4199;
					this.report_group_data_description();
					}
					}
				}
				this.state = 4204;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description(): Report_group_data_descriptionContext {
		let _localctx: Report_group_data_descriptionContext = new Report_group_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_report_group_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4205;
			this.level_number();
			this.state = 4213;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 667, this._ctx) ) {
			case 1:
				{
				this.state = 4207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4206;
					this.separator();
					}
					}
					this.state = 4209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4211;
				this.data_name();
				}
				break;
			}
			this.state = 4224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 4216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4215;
					this.separator();
					}
					}
					this.state = 4218;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4220;
				this.report_group_data_description_clause();
				}
				}
				this.state = 4226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4227;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description_clause(): Report_group_data_description_clauseContext {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_report_group_data_description_clause);
		let _la: number;
		try {
			this.state = 4403;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4229;
				this.match(cobolParser.LINE);
				this.state = 4231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4230;
					this.separator();
					}
					}
					this.state = 4233;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 4235;
					this.match(cobolParser.NUMBER);
					this.state = 4237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4236;
						this.separator();
						}
						}
						this.state = 4239;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4243;
					this.match(cobolParser.IS);
					this.state = 4245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4244;
						this.separator();
						}
						}
						this.state = 4247;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4251;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4253;
				this.match(cobolParser.NEXT);
				this.state = 4255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4254;
					this.separator();
					}
					}
					this.state = 4257;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4259;
				this.match(cobolParser.GROUP);
				this.state = 4261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4260;
					this.separator();
					}
					}
					this.state = 4263;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4265;
					this.match(cobolParser.IS);
					this.state = 4267;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4266;
						this.separator();
						}
						}
						this.state = 4269;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4273;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4275;
				this.match(cobolParser.TYPE);
				this.state = 4277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4276;
					this.separator();
					}
					}
					this.state = 4279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4281;
					this.match(cobolParser.IS);
					this.state = 4283;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4282;
						this.separator();
						}
						}
						this.state = 4285;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4289;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 4291;
					this.match(cobolParser.USAGE);
					this.state = 4293;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4292;
						this.separator();
						}
						}
						this.state = 4295;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4303;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 4297;
						this.match(cobolParser.IS);
						this.state = 4299;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4298;
							this.separator();
							}
							}
							this.state = 4301;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					}
				}

				this.state = 4307;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4308;
				this.match(cobolParser.BLANK);
				this.state = 4310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4309;
					this.separator();
					}
					}
					this.state = 4312;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 4314;
					this.match(cobolParser.WHEN);
					this.state = 4316;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4315;
						this.separator();
						}
						}
						this.state = 4318;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4322;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4324;
				this.match(cobolParser.COLUMN);
				this.state = 4326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4325;
					this.separator();
					}
					}
					this.state = 4328;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 4330;
					this.match(cobolParser.NUMBER);
					this.state = 4332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4331;
						this.separator();
						}
						}
						this.state = 4334;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4338;
					this.match(cobolParser.IS);
					this.state = 4340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4339;
						this.separator();
						}
						}
						this.state = 4342;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4346;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4348;
				this.match(cobolParser.GROUP);
				this.state = 4356;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 695, this._ctx) ) {
				case 1:
					{
					this.state = 4350;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4349;
						this.separator();
						}
						}
						this.state = 4352;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4354;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4358;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4366;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 697, this._ctx) ) {
				case 1:
					{
					this.state = 4360;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4359;
						this.separator();
						}
						}
						this.state = 4362;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4364;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4368;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4369;
				this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4370;
				this.match(cobolParser.SOURCE);
				this.state = 4372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4371;
					this.separator();
					}
					}
					this.state = 4374;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4376;
					this.match(cobolParser.IS);
					this.state = 4378;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4377;
						this.separator();
						}
						}
						this.state = 4380;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4384;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4386;
				this.match(cobolParser.VALUE);
				this.state = 4388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4387;
					this.separator();
					}
					}
					this.state = 4390;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4392;
					this.match(cobolParser.IS);
					this.state = 4394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4393;
						this.separator();
						}
						}
						this.state = 4396;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4400;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4402;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_is(): Sign_isContext {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 4405;
				this.match(cobolParser.SIGN);
				this.state = 4413;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 706, this._ctx) ) {
				case 1:
					{
					this.state = 4407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4406;
						this.separator();
						}
						}
						this.state = 4409;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4411;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 4416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4415;
					this.separator();
					}
					}
					this.state = 4418;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 4422;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4438;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 712, this._ctx) ) {
			case 1:
				{
				this.state = 4424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4423;
					this.separator();
					}
					}
					this.state = 4426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4428;
				this.match(cobolParser.SEPARATE);
				this.state = 4436;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 711, this._ctx) ) {
				case 1:
					{
					this.state = 4430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4429;
						this.separator();
						}
						}
						this.state = 4432;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4434;
					this.match(cobolParser.CHARACTER);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4440;
				this.match(cobolParser.SUM);
				this.state = 4442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4441;
					this.separator();
					}
					}
					this.state = 4444;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4446;
				this.sum_name();
				this.state = 4456;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 715, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4448;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4447;
							this.separator();
							}
							}
							this.state = 4450;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 4452;
						this.sum_name();
						}
						}
					}
					this.state = 4458;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 715, this._ctx);
				}
				this.state = 4466;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
				case 1:
					{
					this.state = 4460;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4459;
						this.separator();
						}
						}
						this.state = 4462;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4464;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 4477;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4469;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4468;
							this.separator();
							}
							}
							this.state = 4471;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 4473;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 4479;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
				}
				}
				}
				this.state = 4482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 4506;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 725, this._ctx) ) {
			case 1:
				{
				this.state = 4487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 4484;
					this.separator();
					}
					}
					this.state = 4489;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4490;
				this.match(cobolParser.RESET);
				this.state = 4492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4491;
					this.separator();
					}
					}
					this.state = 4494;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 4496;
					this.match(cobolParser.ON);
					this.state = 4498;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4497;
						this.separator();
						}
						}
						this.state = 4500;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4504;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4508;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4510;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4512;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4514;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4516;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 4592;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 736, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4518;
				this.match(cobolParser.REPORT);
				this.state = 4520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4519;
					this.separator();
					}
					}
					this.state = 4522;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4524;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4526;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4527;
				this.match(cobolParser.PAGE);
				this.state = 4529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4528;
					this.separator();
					}
					}
					this.state = 4531;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4533;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4535;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4545;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4536;
					this.match(cobolParser.CONTROL);
					this.state = 4538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4537;
						this.separator();
						}
						}
						this.state = 4540;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4542;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 4544;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4547;
					this.separator();
					}
					}
					this.state = 4550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4552;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4554;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4555;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4565;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4556;
					this.match(cobolParser.CONTROL);
					this.state = 4558;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4557;
						this.separator();
						}
						}
						this.state = 4560;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4562;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 4564;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4567;
					this.separator();
					}
					}
					this.state = 4570;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4572;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4574;
				this.match(cobolParser.PAGE);
				this.state = 4576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4575;
					this.separator();
					}
					}
					this.state = 4578;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4580;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4582;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4583;
				this.match(cobolParser.REPORT);
				this.state = 4585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4584;
					this.separator();
					}
					}
					this.state = 4587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4589;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4591;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4594;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 4613;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4596;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4597;
				this.match(cobolParser.PLUS);
				this.state = 4599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4598;
					this.separator();
					}
					}
					this.state = 4601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4603;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4605;
				this.match(cobolParser.NEXT);
				this.state = 4607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4606;
					this.separator();
					}
					}
					this.state = 4609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4611;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 4647;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4615;
				this.line_num();
				this.state = 4637;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 744, this._ctx) ) {
				case 1:
					{
					this.state = 4617;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4616;
						this.separator();
						}
						}
						this.state = 4619;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 4621;
						this.match(cobolParser.ON);
						this.state = 4623;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4622;
							this.separator();
							}
							}
							this.state = 4625;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 4629;
					this.match(cobolParser.NEXT);
					this.state = 4631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4630;
						this.separator();
						}
						}
						this.state = 4633;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4635;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4639;
				this.match(cobolParser.PLUS);
				this.state = 4641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4640;
					this.separator();
					}
					}
					this.state = 4643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4645;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4649;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rd_clause(): Rd_clauseContext {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_rd_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4841;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4651;
					this.match(cobolParser.IS);
					this.state = 4653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4652;
						this.separator();
						}
						}
						this.state = 4655;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 4659;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4660;
				this.match(cobolParser.CODE);
				this.state = 4662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4661;
					this.separator();
					}
					}
					this.state = 4664;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4666;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4688;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 4668;
					this.match(cobolParser.CONTROL);
					this.state = 4676;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 751, this._ctx) ) {
					case 1:
						{
						this.state = 4670;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4669;
							this.separator();
							}
							}
							this.state = 4672;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 4674;
						this.match(cobolParser.IS);
						}
						break;
					}
					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 4678;
					this.match(cobolParser.CONTROLS);
					this.state = 4686;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 753, this._ctx) ) {
					case 1:
						{
						this.state = 4680;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4679;
							this.separator();
							}
							}
							this.state = 4682;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 4684;
						this.match(cobolParser.ARE);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4690;
					this.separator();
					}
					}
					this.state = 4693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4721;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 4695;
					this.control_name();
					this.state = 4705;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 757, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4699;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
								{
								{
								this.state = 4696;
								this.separator();
								}
								}
								this.state = 4701;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4702;
							this.control_name();
							}
							}
						}
						this.state = 4707;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 757, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 4708;
					this.match(cobolParser.FINAL);
					this.state = 4718;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 759, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4712;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
								{
								{
								this.state = 4709;
								this.separator();
								}
								}
								this.state = 4714;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 4715;
							this.control_name();
							}
							}
						}
						this.state = 4720;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 759, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4723;
				this.match(cobolParser.PAGE);
				this.state = 4725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4724;
					this.separator();
					}
					}
					this.state = 4727;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 4757;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 4729;
					this.match(cobolParser.LIMIT);
					this.state = 4731;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4730;
						this.separator();
						}
						}
						this.state = 4733;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4741;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 4735;
						this.match(cobolParser.IS);
						this.state = 4737;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4736;
							this.separator();
							}
							}
							this.state = 4739;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 4743;
					this.match(cobolParser.LIMITS);
					this.state = 4745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4744;
						this.separator();
						}
						}
						this.state = 4747;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 4749;
						this.match(cobolParser.ARE);
						this.state = 4751;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4750;
							this.separator();
							}
							}
							this.state = 4753;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 4759;
				this.page_size_rd();
				this.state = 4767;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 770, this._ctx) ) {
				case 1:
					{
					this.state = 4761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4760;
						this.separator();
						}
						}
						this.state = 4763;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4765;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4782;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 773, this._ctx) ) {
				case 1:
					{
					this.state = 4770;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4769;
						this.separator();
						}
						}
						this.state = 4772;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4774;
					this.match(cobolParser.HEADING);
					this.state = 4776;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4775;
						this.separator();
						}
						}
						this.state = 4778;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4780;
					this.heading_line();
					}
					break;
				}
				this.state = 4803;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
				case 1:
					{
					this.state = 4785;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4784;
						this.separator();
						}
						}
						this.state = 4787;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4789;
					this.match(cobolParser.FIRST);
					this.state = 4791;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4790;
						this.separator();
						}
						}
						this.state = 4793;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4795;
					this.match(cobolParser.DETAIL);
					this.state = 4797;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4796;
						this.separator();
						}
						}
						this.state = 4799;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4801;
					this.first_detail_line();
					}
					break;
				}
				this.state = 4824;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 781, this._ctx) ) {
				case 1:
					{
					this.state = 4806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4805;
						this.separator();
						}
						}
						this.state = 4808;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4810;
					this.match(cobolParser.LAST);
					this.state = 4812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4811;
						this.separator();
						}
						}
						this.state = 4814;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4816;
					this.match(cobolParser.DETAIL);
					this.state = 4818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4817;
						this.separator();
						}
						}
						this.state = 4820;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4822;
					this.last_detail_line();
					}
					break;
				}
				this.state = 4839;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 784, this._ctx) ) {
				case 1:
					{
					this.state = 4827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4826;
						this.separator();
						}
						}
						this.state = 4829;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4831;
					this.match(cobolParser.FOOTING);
					this.state = 4833;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4832;
						this.separator();
						}
						}
						this.state = 4835;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4837;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4843;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4845;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4847;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4849;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4851;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4853;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4855;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4872;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 4857;
				this.match(cobolParser.USAGE);
				this.state = 4865;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 787, this._ctx) ) {
				case 1:
					{
					this.state = 4859;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4858;
						this.separator();
						}
						}
						this.state = 4861;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4863;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 4868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4867;
					this.separator();
					}
					}
					this.state = 4870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 4874;
			this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_definition(): Usage_definitionContext {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 4939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4876;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4877;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 4885;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 791, this._ctx) ) {
				case 1:
					{
					this.state = 4879;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4878;
						this.separator();
						}
						}
						this.state = 4881;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4883;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4887;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 4895;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 793, this._ctx) ) {
				case 1:
					{
					this.state = 4889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4888;
						this.separator();
						}
						}
						this.state = 4891;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4893;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4897;
				this.match(cobolParser.BINARY_LONG);
				this.state = 4905;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 795, this._ctx) ) {
				case 1:
					{
					this.state = 4899;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4898;
						this.separator();
						}
						}
						this.state = 4901;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4903;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4907;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 4915;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 797, this._ctx) ) {
				case 1:
					{
					this.state = 4909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4908;
						this.separator();
						}
						}
						this.state = 4911;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4913;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4917;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4918;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4919;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4920;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4921;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4922;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4923;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4924;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4925;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4926;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4927;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4928;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4929;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4930;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4931;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4932;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4933;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4934;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4935;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 4936;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 4937;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 4938;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4941;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4943;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4942;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4945;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 799, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4947;
				this.match(cobolParser.IS);
				this.state = 4949;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4948;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4951;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 800, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4955;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4958;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4957;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4960;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4962;
			_la = this._input.LA(1);
			if (!(((((_la - 417)) & ~0x1F) === 0 && ((1 << (_la - 417)) & ((1 << (cobolParser.SLASH_ - 417)) | (1 << (cobolParser.COMMA_ - 417)) | (1 << (cobolParser.LPAREN_ - 417)) | (1 << (cobolParser.RPAREN_ - 417)) | (1 << (cobolParser.DOT_ - 417)) | (1 << (cobolParser.NUMERIC_LITERAL - 417)) | (1 << (cobolParser.USER_DEFINED_WORD - 417)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4964;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4966;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sd_clause(): Sd_clauseContext {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_sd_clause);
		try {
			this.state = 4970;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4968;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4969;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4992;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 4972;
				this.match(cobolParser.REPORT);
				this.state = 4980;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 805, this._ctx) ) {
				case 1:
					{
					this.state = 4974;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4973;
						this.separator();
						}
						}
						this.state = 4976;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4978;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 4982;
				this.match(cobolParser.REPORTS);
				this.state = 4990;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 807, this._ctx) ) {
				case 1:
					{
					this.state = 4984;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4983;
						this.separator();
						}
						}
						this.state = 4986;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 4988;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4994;
				this.separator();
				}
				}
				this.state = 4997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 4999;
			this.report_name();
			this.state = 5009;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 811, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5003;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 5000;
						this.separator();
						}
						}
						this.state = 5005;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5006;
					this.report_name();
					}
					}
				}
				this.state = 5011;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 811, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5012;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5014;
			this.match(cobolParser.LINAGE);
			this.state = 5016;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5015;
				this.separator();
				}
				}
				this.state = 5018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5026;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5020;
				this.match(cobolParser.IS);
				this.state = 5022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5021;
					this.separator();
					}
					}
					this.state = 5024;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 5028;
			this.page_size();
			this.state = 5036;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 816, this._ctx) ) {
			case 1:
				{
				this.state = 5030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5029;
					this.separator();
					}
					}
					this.state = 5032;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5034;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 5067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 823, this._ctx) ) {
			case 1:
				{
				this.state = 5039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5038;
					this.separator();
					}
					}
					this.state = 5041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 5043;
					this.match(cobolParser.WITH);
					this.state = 5045;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5044;
						this.separator();
						}
						}
						this.state = 5047;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5051;
				this.match(cobolParser.FOOTING);
				this.state = 5053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5052;
					this.separator();
					}
					}
					this.state = 5055;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 5057;
					this.match(cobolParser.AT);
					this.state = 5059;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5058;
						this.separator();
						}
						}
						this.state = 5061;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5065;
				this.footing_line();
				}
				break;
			}
			this.state = 5098;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 830, this._ctx) ) {
			case 1:
				{
				this.state = 5070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5069;
					this.separator();
					}
					}
					this.state = 5072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 5074;
					this.match(cobolParser.LINES);
					this.state = 5076;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5075;
						this.separator();
						}
						}
						this.state = 5078;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5088;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 5082;
					this.match(cobolParser.AT);
					this.state = 5084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5083;
						this.separator();
						}
						}
						this.state = 5086;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5090;
				this.match(cobolParser.TOP);
				this.state = 5092;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5091;
					this.separator();
					}
					}
					this.state = 5094;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5096;
				this.top_lines();
				}
				break;
			}
			this.state = 5129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 837, this._ctx) ) {
			case 1:
				{
				this.state = 5101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5100;
					this.separator();
					}
					}
					this.state = 5103;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 5105;
					this.match(cobolParser.LINES);
					this.state = 5107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5106;
						this.separator();
						}
						}
						this.state = 5109;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 5113;
					this.match(cobolParser.AT);
					this.state = 5115;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5114;
						this.separator();
						}
						}
						this.state = 5117;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5121;
				this.match(cobolParser.BOTTOM);
				this.state = 5123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5122;
					this.separator();
					}
					}
					this.state = 5125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5127;
				this.bottom_lines();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_bottom_lines);
		try {
			this.state = 5133;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5131;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5132;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_top_lines);
		try {
			this.state = 5137;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5135;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5136;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_footing_line);
		try {
			this.state = 5141;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5139;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5140;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_page_size);
		try {
			this.state = 5145;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5143;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5144;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5147;
			this.match(cobolParser.DATA);
			this.state = 5149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5148;
				this.separator();
				}
				}
				this.state = 5151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5173;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 5153;
				this.match(cobolParser.RECORDS);
				this.state = 5161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					this.state = 5155;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5154;
						this.separator();
						}
						}
						this.state = 5157;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5159;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 5163;
				this.match(cobolParser.RECORD);
				this.state = 5171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					this.state = 5165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5164;
						this.separator();
						}
						}
						this.state = 5167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5169;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5175;
			this.rec_name();
			this.state = 5185;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 849, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5176;
						this.separator();
						}
						}
						this.state = 5179;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5181;
					this.rec_name();
					}
					}
				}
				this.state = 5187;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 849, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5188;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5190;
			this.match(cobolParser.VALUE);
			this.state = 5192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5191;
				this.separator();
				}
				}
				this.state = 5194;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5196;
			this.match(cobolParser.OF);
			this.state = 5198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5197;
				this.separator();
				}
				}
				this.state = 5200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5202;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5203;
				this.separator();
				}
				}
				this.state = 5206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5208;
				this.match(cobolParser.IS);
				this.state = 5210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5209;
					this.separator();
					}
					}
					this.state = 5212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 5216;
			this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_definition(): Value_of_id_definitionContext {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 5220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5218;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5219;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5222;
			this.match(cobolParser.LABEL);
			this.state = 5224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5223;
				this.separator();
				}
				}
				this.state = 5226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5248;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 5228;
				this.match(cobolParser.RECORDS);
				this.state = 5236;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 858, this._ctx) ) {
				case 1:
					{
					this.state = 5230;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5229;
						this.separator();
						}
						}
						this.state = 5232;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5234;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 5238;
				this.match(cobolParser.RECORD);
				this.state = 5246;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 860, this._ctx) ) {
				case 1:
					{
					this.state = 5240;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5239;
						this.separator();
						}
						}
						this.state = 5242;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5244;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5250;
				this.separator();
				}
				}
				this.state = 5253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5255;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5257;
			this.match(cobolParser.RECORD);
			this.state = 5259;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5258;
				this.separator();
				}
				}
				this.state = 5261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5263;
			this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_definition(): Record_definitionContext {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5388;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 5265;
					this.match(cobolParser.CONTAINS);
					this.state = 5267;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5266;
						this.separator();
						}
						}
						this.state = 5269;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5285;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 868, this._ctx) ) {
				case 1:
					{
					this.state = 5273;
					this.shortest_rec();
					this.state = 5275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5274;
						this.separator();
						}
						}
						this.state = 5277;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5279;
					this.match(cobolParser.TO);
					this.state = 5281;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5280;
						this.separator();
						}
						}
						this.state = 5283;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
					break;
				}
				this.state = 5287;
				this.longest_rec();
				this.state = 5291;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 869, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5288;
						this.separator();
						}
						}
					}
					this.state = 5293;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 869, this._ctx);
				}
				this.state = 5301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 5294;
					this.match(cobolParser.CHARACTERS);
					this.state = 5298;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 870, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5295;
							this.separator();
							}
							}
						}
						this.state = 5300;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 870, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5309;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5303;
					this.match(cobolParser.IS);
					this.state = 5305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5304;
						this.separator();
						}
						}
						this.state = 5307;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5311;
				this.match(cobolParser.VARYING);
				this.state = 5313;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 5312;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5315;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 874, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 5323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 5317;
					this.match(cobolParser.IN);
					this.state = 5319;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 5318;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 5321;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 875, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 5332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 5325;
					this.match(cobolParser.SIZE);
					this.state = 5329;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 877, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5326;
							this.separator();
							}
							}
						}
						this.state = 5331;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 877, this._ctx);
					}
					}
				}

				this.state = 5343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.NUMERIC_LITERAL) {
					{
					this.state = 5340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 5334;
						this.match(cobolParser.FROM);
						this.state = 5336;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5335;
							this.separator();
							}
							}
							this.state = 5338;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 5342;
					this.shortest_rec();
					}
				}

				this.state = 5353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 5345;
					this.match(cobolParser.TO);
					this.state = 5347;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5346;
						this.separator();
						}
						}
						this.state = 5349;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5351;
					this.longest_rec();
					}
				}

				this.state = 5368;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 886, this._ctx) ) {
				case 1:
					{
					this.state = 5358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 5355;
						this.separator();
						}
						}
						this.state = 5360;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5361;
					this.match(cobolParser.CHARACTERS);
					this.state = 5365;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5362;
							this.separator();
							}
							}
						}
						this.state = 5367;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 885, this._ctx);
					}
					}
					break;
				}
				this.state = 5386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 5370;
					this.match(cobolParser.DEPENDING);
					this.state = 5372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5371;
						this.separator();
						}
						}
						this.state = 5374;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5382;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 5376;
						this.match(cobolParser.ON);
						this.state = 5378;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5377;
							this.separator();
							}
							}
							this.state = 5380;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 5384;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5390;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5392;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5394;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_entry(): Screen_description_entryContext {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5396;
			this.level_number();
			this.state = 5406;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 894, this._ctx) ) {
			case 1:
				{
				this.state = 5398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5397;
					this.separator();
					}
					}
					this.state = 5400;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5404;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 5402;
					this.screen_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 5403;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 5417;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5408;
					this.separator();
					}
					}
					this.state = 5411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5413;
				this.screen_description_clause();
				}
				}
				this.state = 5419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5420;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_name(): Screen_nameContext {
		let _localctx: Screen_nameContext = new Screen_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_screen_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5422;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_clause(): Screen_description_clauseContext {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_screen_description_clause);
		let _la: number;
		try {
			this.state = 5626;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 935, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5424;
				this.match(cobolParser.BLANK);
				this.state = 5426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5425;
					this.separator();
					}
					}
					this.state = 5428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5430;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5432;
				this.match(cobolParser.FOREGROUND_COLOR);
				this.state = 5434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5433;
					this.separator();
					}
					}
					this.state = 5436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5438;
					this.match(cobolParser.IS);
					this.state = 5440;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5439;
						this.separator();
						}
						}
						this.state = 5442;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5446;
				this.color_num();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5448;
				this.match(cobolParser.BACKGROUND_COLOR);
				this.state = 5450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5449;
					this.separator();
					}
					}
					this.state = 5452;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5454;
					this.match(cobolParser.IS);
					this.state = 5456;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5455;
						this.separator();
						}
						}
						this.state = 5458;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5462;
				this.color_num();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5464;
				this.match(cobolParser.AUTO);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5465;
				this.match(cobolParser.SECURE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5466;
				this.match(cobolParser.REQUIRED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 5467;
					this.match(cobolParser.USAGE);
					this.state = 5469;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5468;
						this.separator();
						}
						}
						this.state = 5471;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5479;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 5473;
						this.match(cobolParser.IS);
						this.state = 5475;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5474;
							this.separator();
							}
							}
							this.state = 5477;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					}
				}

				this.state = 5483;
				this.match(cobolParser.DISPLAY);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5484;
				this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5485;
				this.match(cobolParser.FULL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5486;
				this.match(cobolParser.BELL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5487;
				this.match(cobolParser.BLINK);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5488;
				this.match(cobolParser.ERASE);
				this.state = 5490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5489;
					this.separator();
					}
					}
					this.state = 5492;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5494;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5496;
				this.match(cobolParser.HIGHLIGHT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5497;
				this.match(cobolParser.LOWLIGHT);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5498;
				this.match(cobolParser.REVERSE_VIDEO);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5499;
				this.match(cobolParser.UNDERLINE);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5500;
				this.match(cobolParser.LINE);
				this.state = 5502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5501;
					this.separator();
					}
					}
					this.state = 5504;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5506;
					this.match(cobolParser.NUMBER);
					this.state = 5508;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5507;
						this.separator();
						}
						}
						this.state = 5510;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5514;
					this.match(cobolParser.IS);
					this.state = 5516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5515;
						this.separator();
						}
						}
						this.state = 5518;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 5522;
					this.match(cobolParser.PLUS);
					this.state = 5524;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5523;
						this.separator();
						}
						}
						this.state = 5526;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5530;
				this.src_number();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5532;
				this.match(cobolParser.COLUMN);
				this.state = 5534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5533;
					this.separator();
					}
					}
					this.state = 5536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 5538;
					this.match(cobolParser.NUMBER);
					this.state = 5540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5539;
						this.separator();
						}
						}
						this.state = 5542;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5546;
					this.match(cobolParser.IS);
					this.state = 5548;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5547;
						this.separator();
						}
						}
						this.state = 5550;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 5554;
					this.match(cobolParser.PLUS);
					this.state = 5556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5555;
						this.separator();
						}
						}
						this.state = 5558;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5562;
				this.src_number();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5564;
				this.match(cobolParser.VALUE);
				this.state = 5566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5565;
					this.separator();
					}
					}
					this.state = 5568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5570;
					this.match(cobolParser.IS);
					this.state = 5572;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5571;
						this.separator();
						}
						}
						this.state = 5574;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5578;
				this.nonnumeric_literal();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5580;
				this.match(cobolParser.BLANK);
				this.state = 5582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5581;
					this.separator();
					}
					}
					this.state = 5584;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 5586;
					this.match(cobolParser.WHEN);
					this.state = 5588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5587;
						this.separator();
						}
						}
						this.state = 5590;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 5594;
				this.match(cobolParser.ZERO);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5596;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5604;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 930, this._ctx) ) {
				case 1:
					{
					this.state = 5598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5597;
						this.separator();
						}
						}
						this.state = 5600;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 5602;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 5606;
				this.picture();
				this.state = 5608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5607;
					this.separator();
					}
					}
					this.state = 5610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5624;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USING:
					{
					this.state = 5612;
					this.scr_pic_using();
					}
					break;
				case cobolParser.FROM:
					{
					this.state = 5613;
					this.scr_pic_from();
					this.state = 5621;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 933, this._ctx) ) {
					case 1:
						{
						this.state = 5615;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5614;
							this.separator();
							}
							}
							this.state = 5617;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 5619;
						this.scr_pic_to();
						}
						break;
					}
					}
					break;
				case cobolParser.TO:
					{
					this.state = 5623;
					this.scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_using(): Scr_pic_usingContext {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_scr_pic_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5628;
			this.match(cobolParser.USING);
			this.state = 5630;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5629;
				this.separator();
				}
				}
				this.state = 5632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5634;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_from(): Scr_pic_fromContext {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_scr_pic_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5636;
			this.match(cobolParser.FROM);
			this.state = 5638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5637;
				this.separator();
				}
				}
				this.state = 5640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5644;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 5642;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 5643;
				this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_to(): Scr_pic_toContext {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_scr_pic_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5646;
			this.match(cobolParser.TO);
			this.state = 5648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5647;
				this.separator();
				}
				}
				this.state = 5650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5652;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonnumeric_literal(): Nonnumeric_literalContext {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5654;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_number(): Src_numberContext {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_src_number);
		try {
			this.state = 5658;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5656;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5657;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public color_num(): Color_numContext {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_color_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5660;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5662;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 5664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5663;
				this.separator();
				}
				}
				this.state = 5666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5668;
			this.match(cobolParser.DIVISION);
			this.state = 5672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5669;
				this.separator();
				}
				}
				this.state = 5674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5675;
			this.match(cobolParser.DOT_);
			this.state = 5679;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 943, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5676;
					this.separator();
					}
					}
				}
				this.state = 5681;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 943, this._ctx);
			}
			this.state = 5685;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 944, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5682;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 5687;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 944, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 5696;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5688;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5689;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5690;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5691;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5692;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5693;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5694;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5695;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5698;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 5702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5699;
				this.separator();
				}
				}
				this.state = 5704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5705;
			this.match(cobolParser.DOT_);
			this.state = 5709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5706;
				this.separator();
				}
				}
				this.state = 5711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5712;
			this.program_name();
			this.state = 5716;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 948, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5713;
					this.separator();
					}
					}
				}
				this.state = 5718;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 948, this._ctx);
			}
			this.state = 5720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 5719;
				this.is_program();
				}
			}

			this.state = 5725;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 950, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5722;
					this.separator();
					}
					}
				}
				this.state = 5727;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 950, this._ctx);
			}
			this.state = 5729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 5728;
				this.with_ident();
				}
			}

			this.state = 5734;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5731;
				this.separator();
				}
				}
				this.state = 5736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5737;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5739;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5741;
				this.match(cobolParser.IS);
				this.state = 5743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5742;
					this.separator();
					}
					}
					this.state = 5745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 5749;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5757;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
			case 1:
				{
				this.state = 5751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5750;
					this.separator();
					}
					}
					this.state = 5753;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 5755;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 5759;
				this.match(cobolParser.WITH);
				this.state = 5761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5760;
					this.separator();
					}
					}
					this.state = 5763;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 5767;
			this.match(cobolParser.IDENT);
			this.state = 5769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5768;
				this.separator();
				}
				}
				this.state = 5771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5773;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5775;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.state = 5786;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5777;
				this.match(cobolParser.START_FOUR_SPACES);
				this.state = 5781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 5778;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 5783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5784;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5785;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5788;
			this.match(cobolParser.AUTHOR);
			this.state = 5792;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5789;
				this.separator();
				}
				}
				this.state = 5794;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5795;
			this.match(cobolParser.DOT_);
			this.state = 5799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5796;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5802;
			this.match(cobolParser.NEWLINE);
			this.state = 5806;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 964, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5803;
					this.comment_entry();
					}
					}
				}
				this.state = 5808;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 964, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5809;
			this.match(cobolParser.INSTALLATION);
			this.state = 5813;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5810;
				this.separator();
				}
				}
				this.state = 5815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5816;
			this.match(cobolParser.DOT_);
			this.state = 5820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5817;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5823;
			this.match(cobolParser.NEWLINE);
			this.state = 5827;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 967, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5824;
					this.comment_entry();
					}
					}
				}
				this.state = 5829;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 967, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5830;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 5834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5831;
				this.separator();
				}
				}
				this.state = 5836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5837;
			this.match(cobolParser.DOT_);
			this.state = 5841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5838;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5844;
			this.match(cobolParser.NEWLINE);
			this.state = 5848;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 970, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5845;
					this.comment_entry();
					}
					}
				}
				this.state = 5850;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 970, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5851;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 5855;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5852;
				this.separator();
				}
				}
				this.state = 5857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5858;
			this.match(cobolParser.DOT_);
			this.state = 5862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5859;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5865;
			this.match(cobolParser.NEWLINE);
			this.state = 5869;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 973, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5866;
					this.comment_entry();
					}
					}
				}
				this.state = 5871;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 973, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5872;
			this.match(cobolParser.SECURITY);
			this.state = 5876;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5873;
				this.separator();
				}
				}
				this.state = 5878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5879;
			this.match(cobolParser.DOT_);
			this.state = 5883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.DECLARATIVES_IN_A_AREA) | (1 << cobolParser.END_IN_A_AREA) | (1 << cobolParser.IDENTIFICATION_IN_A_AREA) | (1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.ADVANCING) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.AUTOMATIC - 32)) | (1 << (cobolParser.AUTOTERMINATE - 32)) | (1 << (cobolParser.BACKGROUND_COLOR - 32)) | (1 << (cobolParser.BEFORE - 32)) | (1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMMA - 64)) | (1 << (cobolParser.COMMON - 64)) | (1 << (cobolParser.COMP - 64)) | (1 << (cobolParser.COMPUTATIONAL - 64)) | (1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTENT - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CORR - 64)) | (1 << (cobolParser.CORRESPONDING - 64)) | (1 << (cobolParser.CRT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.CURRENCY - 96)) | (1 << (cobolParser.CURRENT - 96)) | (1 << (cobolParser.CURSOR - 96)) | (1 << (cobolParser.DATA - 96)) | (1 << (cobolParser.DATE - 96)) | (1 << (cobolParser.DATE_COMPILED - 96)) | (1 << (cobolParser.DATE_WRITTEN - 96)) | (1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DESCRIPTOR - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_ACCEPT - 128)) | (1 << (cobolParser.END_ADD - 128)) | (1 << (cobolParser.END_CALL - 128)) | (1 << (cobolParser.END_COMPUTE - 128)) | (1 << (cobolParser.END_DELETE - 128)) | (1 << (cobolParser.END_DISPLAY - 128)) | (1 << (cobolParser.END_DIVIDE - 128)) | (1 << (cobolParser.END_EVALUATE - 128)) | (1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.EXCLUSIVE - 160)) | (1 << (cobolParser.EXIT - 160)) | (1 << (cobolParser.EXTEND - 160)) | (1 << (cobolParser.EXTENSION - 160)) | (1 << (cobolParser.EXTERNAL - 160)) | (1 << (cobolParser.FAILURE - 160)) | (1 << (cobolParser.FALSE - 160)) | (1 << (cobolParser.FD - 160)) | (1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.HIGH_VALUE - 192)) | (1 << (cobolParser.HIGH_VALUES - 192)) | (1 << (cobolParser.I64 - 192)) | (1 << (cobolParser.ID - 192)) | (1 << (cobolParser.IDENT - 192)) | (1 << (cobolParser.IDENTIFICATION - 192)) | (1 << (cobolParser.IF - 192)) | (1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INTO - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LIMITS - 224)) | (1 << (cobolParser.LINAGE - 224)) | (1 << (cobolParser.LINE - 224)) | (1 << (cobolParser.LINES - 224)) | (1 << (cobolParser.LINE_PRINTER - 224)) | (1 << (cobolParser.LINKAGE - 224)) | (1 << (cobolParser.LOCK - 224)) | (1 << (cobolParser.LOCK_HOLDING - 224)) | (1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.ON - 256)) | (1 << (cobolParser.OPEN - 256)) | (1 << (cobolParser.OPTIONAL - 256)) | (1 << (cobolParser.OPTIONS - 256)) | (1 << (cobolParser.OR - 256)) | (1 << (cobolParser.ORGANIZATION - 256)) | (1 << (cobolParser.OUTPUT - 256)) | (1 << (cobolParser.OVERFLOW - 256)) | (1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROCEED - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.QUOTES - 288)) | (1 << (cobolParser.RANDOM - 288)) | (1 << (cobolParser.RD - 288)) | (1 << (cobolParser.READ - 288)) | (1 << (cobolParser.RECORD - 288)) | (1 << (cobolParser.RECORDS - 288)) | (1 << (cobolParser.REDEFINES - 288)) | (1 << (cobolParser.REEL - 288)) | (1 << (cobolParser.REFERENCE - 288)) | (1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.REMAINDER - 288)) | (1 << (cobolParser.REMOVAL - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWIND - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.ROUNDED - 320)) | (1 << (cobolParser.SAME - 320)) | (1 << (cobolParser.SCREEN - 320)) | (1 << (cobolParser.SD - 320)) | (1 << (cobolParser.SEARCH - 320)) | (1 << (cobolParser.SECTION - 320)) | (1 << (cobolParser.SECURE - 320)) | (1 << (cobolParser.SECURITY - 320)) | (1 << (cobolParser.SEGMENT_LIMIT - 320)) | (1 << (cobolParser.SELECT - 320)) | (1 << (cobolParser.SEPARATE - 320)) | (1 << (cobolParser.SEQUENCE - 320)) | (1 << (cobolParser.SEQUENTIAL - 320)) | (1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.SUCCESS - 352)) | (1 << (cobolParser.SUM - 352)) | (1 << (cobolParser.SUPPRESS - 352)) | (1 << (cobolParser.SWITCH - 352)) | (1 << (cobolParser.SYMBOL - 352)) | (1 << (cobolParser.SYMBOLIC - 352)) | (1 << (cobolParser.SYNC - 352)) | (1 << (cobolParser.SYNCHRONIZED - 352)) | (1 << (cobolParser.SYSERR - 352)) | (1 << (cobolParser.SYSIN - 352)) | (1 << (cobolParser.SYSOUT - 352)) | (1 << (cobolParser.TALLYING - 352)) | (1 << (cobolParser.TAPE - 352)) | (1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.USAGE - 384)) | (1 << (cobolParser.USE - 384)) | (1 << (cobolParser.USING - 384)) | (1 << (cobolParser.VALUE - 384)) | (1 << (cobolParser.VALUES - 384)) | (1 << (cobolParser.VARYING - 384)) | (1 << (cobolParser.VAX - 384)) | (1 << (cobolParser.WHEN - 384)) | (1 << (cobolParser.WINDOW - 384)) | (1 << (cobolParser.WITH - 384)) | (1 << (cobolParser.WORDS - 384)) | (1 << (cobolParser.WORKING_STORAGE - 384)) | (1 << (cobolParser.WRITE - 384)) | (1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.OTHER - 384)) | (1 << (cobolParser.ANY - 384)) | (1 << (cobolParser.THEN - 384)) | (1 << (cobolParser.SENTENCE - 384)) | (1 << (cobolParser.ELSE - 384)) | (1 << (cobolParser.ALPHANUMERIC - 384)) | (1 << (cobolParser.NUMERIC_EDITED - 384)) | (1 << (cobolParser.ALPHANUMERIC_EDITED - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.STAR_ - 416)) | (1 << (cobolParser.SLASH_ - 416)) | (1 << (cobolParser.COMMA_ - 416)) | (1 << (cobolParser.SEMI_ - 416)) | (1 << (cobolParser.COLON_ - 416)) | (1 << (cobolParser.EQUAL_ - 416)) | (1 << (cobolParser.LT_ - 416)) | (1 << (cobolParser.LE_ - 416)) | (1 << (cobolParser.GE_ - 416)) | (1 << (cobolParser.GT_ - 416)) | (1 << (cobolParser.LPAREN_ - 416)) | (1 << (cobolParser.RPAREN_ - 416)) | (1 << (cobolParser.LBRACK_ - 416)) | (1 << (cobolParser.RBRACK_ - 416)) | (1 << (cobolParser.POINTER_ - 416)) | (1 << (cobolParser.ATP_ - 416)) | (1 << (cobolParser.DOT_ - 416)) | (1 << (cobolParser.LCURLY_ - 416)) | (1 << (cobolParser.RCURLY_ - 416)) | (1 << (cobolParser.STRING_LITERAL - 416)) | (1 << (cobolParser.NUMERIC_LITERAL - 416)) | (1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 5880;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 5885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5886;
			this.match(cobolParser.NEWLINE);
			this.state = 5890;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 976, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5887;
					this.comment_entry();
					}
					}
				}
				this.state = 5892;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 976, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 424, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5893;
			this.match(cobolParser.OPTIONS);
			this.state = 5897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5894;
				this.separator();
				}
				}
				this.state = 5899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5900;
			this.match(cobolParser.DOT_);
			this.state = 5904;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 978, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5901;
					this.separator();
					}
					}
				}
				this.state = 5906;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 978, this._ctx);
			}
			this.state = 5908;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 5907;
				this.arithmetic();
				}
			}

			this.state = 5913;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 980, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5910;
					this.separator();
					}
					}
				}
				this.state = 5915;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 980, this._ctx);
			}
			this.state = 5917;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 5916;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5919;
			this.match(cobolParser.ARITHMETIC);
			this.state = 5921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5920;
				this.separator();
				}
				}
				this.state = 5923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5931;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5925;
				this.match(cobolParser.IS);
				this.state = 5927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5926;
					this.separator();
					}
					}
					this.state = 5929;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 5933;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5934;
				this.separator();
				}
				}
				this.state = 5939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5940;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5942;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 5944;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5943;
				this.separator();
				}
				}
				this.state = 5946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5948;
			this.match(cobolParser.DIVISION);
			this.state = 5952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5949;
				this.separator();
				}
				}
				this.state = 5954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5955;
			this.match(cobolParser.DOT_);
			this.state = 5959;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 988, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5956;
					this.separator();
					}
					}
				}
				this.state = 5961;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 988, this._ctx);
			}
			this.state = 5963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 5962;
				this.configuration_section();
				}
			}

			this.state = 5966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 5965;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5968;
			this.match(cobolParser.CONFIGURATION);
			this.state = 5970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5969;
				this.separator();
				}
				}
				this.state = 5972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 5974;
			this.match(cobolParser.SECTION);
			this.state = 5978;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 5975;
				this.separator();
				}
				}
				this.state = 5980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5981;
			this.match(cobolParser.DOT_);
			this.state = 5985;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 993, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5982;
					this.separator();
					}
					}
				}
				this.state = 5987;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 993, this._ctx);
			}
			this.state = 5989;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 5988;
				this.source_computer();
				}
			}

			this.state = 5994;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 995, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5991;
					this.separator();
					}
					}
				}
				this.state = 5996;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 995, this._ctx);
			}
			this.state = 5998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 5997;
				this.object_computer();
				}
			}

			this.state = 6003;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 997, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6000;
					this.separator();
					}
					}
				}
				this.state = 6005;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 997, this._ctx);
			}
			this.state = 6007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 6006;
				this.special_names();
				}
			}

			this.state = 6012;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6009;
					this.separator();
					}
					}
				}
				this.state = 6014;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6015;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 6017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6016;
				this.separator();
				}
				}
				this.state = 6019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6021;
			this.match(cobolParser.SECTION);
			this.state = 6025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6022;
				this.separator();
				}
				}
				this.state = 6027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6028;
			this.match(cobolParser.DOT_);
			this.state = 6032;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1002, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6029;
					this.separator();
					}
					}
				}
				this.state = 6034;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1002, this._ctx);
			}
			this.state = 6036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 6035;
				this.file_control();
				}
			}

			this.state = 6039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 6038;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6041;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 6045;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6042;
				this.separator();
				}
				}
				this.state = 6047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6048;
			this.match(cobolParser.DOT_);
			this.state = 6052;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1006, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6049;
					this.separator();
					}
					}
				}
				this.state = 6054;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1006, this._ctx);
			}
			this.state = 6073;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 6055;
				this.computer_type();
				this.state = 6063;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1008, this._ctx) ) {
				case 1:
					{
					this.state = 6057;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6056;
						this.separator();
						}
						}
						this.state = 6059;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6061;
					this.with_debugging();
					}
					break;
				}
				this.state = 6068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6065;
					this.separator();
					}
					}
					this.state = 6070;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6071;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6075;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 6077;
				this.match(cobolParser.WITH);
				this.state = 6079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6078;
					this.separator();
					}
					}
					this.state = 6081;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6085;
			this.match(cobolParser.DEBUGGING);
			this.state = 6087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6086;
				this.separator();
				}
				}
				this.state = 6089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6091;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6093;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 6097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6094;
				this.separator();
				}
				}
				this.state = 6099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6100;
			this.match(cobolParser.DOT_);
			this.state = 6104;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1015, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6101;
					this.separator();
					}
					}
				}
				this.state = 6106;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1015, this._ctx);
			}
			this.state = 6143;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 6107;
				this.computer_type();
				this.state = 6115;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1017, this._ctx) ) {
				case 1:
					{
					this.state = 6109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6108;
						this.separator();
						}
						}
						this.state = 6111;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6113;
					this.memory_size();
					}
					break;
				}
				this.state = 6124;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1019, this._ctx) ) {
				case 1:
					{
					this.state = 6118;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6117;
						this.separator();
						}
						}
						this.state = 6120;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6122;
					this.program_collating();
					}
					break;
				}
				this.state = 6133;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1021, this._ctx) ) {
				case 1:
					{
					this.state = 6127;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6126;
						this.separator();
						}
						}
						this.state = 6129;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6131;
					this.segment_limit();
					}
					break;
				}
				this.state = 6138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6135;
					this.separator();
					}
					}
					this.state = 6140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6141;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6145;
			this.match(cobolParser.MEMORY);
			this.state = 6153;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1025, this._ctx) ) {
			case 1:
				{
				this.state = 6147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6146;
					this.separator();
					}
					}
					this.state = 6149;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6151;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 6156;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6155;
				this.separator();
				}
				}
				this.state = 6158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6160;
			this.memory_size_amount();
			this.state = 6162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6161;
				this.separator();
				}
				}
				this.state = 6164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6166;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6168;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6170;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 6172;
				this.match(cobolParser.PROGRAM);
				this.state = 6174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6173;
					this.separator();
					}
					}
					this.state = 6176;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 6180;
				this.match(cobolParser.COLLATING);
				this.state = 6182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6181;
					this.separator();
					}
					}
					this.state = 6184;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6188;
			this.match(cobolParser.SEQUENCE);
			this.state = 6196;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1033, this._ctx) ) {
			case 1:
				{
				this.state = 6190;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6189;
					this.separator();
					}
					}
					this.state = 6192;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6194;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 6199;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6198;
				this.separator();
				}
				}
				this.state = 6201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6203;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6205;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6207;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 6215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				this.state = 6209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6208;
					this.separator();
					}
					}
					this.state = 6211;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6213;
				this.match(cobolParser.IS);
				}
			}

			this.state = 6217;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6219;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6221;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 6225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6222;
				this.separator();
				}
				}
				this.state = 6227;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6228;
			this.match(cobolParser.DOT_);
			this.state = 6232;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1038, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6229;
					this.separator();
					}
					}
				}
				this.state = 6234;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1038, this._ctx);
			}
			this.state = 6248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (cobolParser.C01 - 49)) | (1 << (cobolParser.CARD_READER - 49)) | (1 << (cobolParser.CLASS - 49)))) !== 0) || ((((_la - 82)) & ~0x1F) === 0 && ((1 << (_la - 82)) & ((1 << (cobolParser.CONSOLE - 82)) | (1 << (cobolParser.CRT - 82)) | (1 << (cobolParser.CURRENCY - 82)) | (1 << (cobolParser.CURSOR - 82)) | (1 << (cobolParser.DECIMAL_POINT - 82)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (cobolParser.SWITCH - 355)) | (1 << (cobolParser.SYMBOLIC - 355)) | (1 << (cobolParser.SYSERR - 355)) | (1 << (cobolParser.SYSIN - 355)) | (1 << (cobolParser.SYSOUT - 355)))) !== 0)) {
				{
				this.state = 6242;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6235;
					this.special_names_content();
					this.state = 6239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 6236;
						this.separator();
						}
						}
						this.state = 6241;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 6244;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & ((1 << (cobolParser.C01 - 49)) | (1 << (cobolParser.CARD_READER - 49)) | (1 << (cobolParser.CLASS - 49)))) !== 0) || ((((_la - 82)) & ~0x1F) === 0 && ((1 << (_la - 82)) & ((1 << (cobolParser.CONSOLE - 82)) | (1 << (cobolParser.CRT - 82)) | (1 << (cobolParser.CURRENCY - 82)) | (1 << (cobolParser.CURSOR - 82)) | (1 << (cobolParser.DECIMAL_POINT - 82)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 355)) & ~0x1F) === 0 && ((1 << (_la - 355)) & ((1 << (cobolParser.SWITCH - 355)) | (1 << (cobolParser.SYMBOLIC - 355)) | (1 << (cobolParser.SYSERR - 355)) | (1 << (cobolParser.SYSIN - 355)) | (1 << (cobolParser.SYSOUT - 355)))) !== 0));
				this.state = 6246;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 6357;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6250;
				this.predefined_device();
				this.state = 6252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6251;
					this.separator();
					}
					}
					this.state = 6254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6256;
					this.match(cobolParser.IS);
					this.state = 6258;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6257;
						this.separator();
						}
						}
						this.state = 6260;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6264;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6266;
				this.arg_env();
				this.state = 6268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6267;
					this.separator();
					}
					}
					this.state = 6270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6272;
					this.match(cobolParser.IS);
					this.state = 6274;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6273;
						this.separator();
						}
						}
						this.state = 6276;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6280;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6282;
				this.match(cobolParser.C01);
				this.state = 6284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6283;
					this.separator();
					}
					}
					this.state = 6286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6294;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6288;
					this.match(cobolParser.IS);
					this.state = 6290;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6289;
						this.separator();
						}
						}
						this.state = 6292;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6296;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6298;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6299;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6300;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6301;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6302;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6303;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 6305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6304;
					this.separator();
					}
					}
					this.state = 6307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6315;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6309;
					this.match(cobolParser.IS);
					this.state = 6311;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6310;
						this.separator();
						}
						}
						this.state = 6313;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6317;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6319;
				this.match(cobolParser.CURSOR);
				this.state = 6321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6320;
					this.separator();
					}
					}
					this.state = 6323;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6331;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6325;
					this.match(cobolParser.IS);
					this.state = 6327;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6326;
						this.separator();
						}
						}
						this.state = 6329;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6333;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6335;
				this.match(cobolParser.CRT);
				this.state = 6337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6336;
					this.separator();
					}
					}
					this.state = 6339;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6341;
				this.match(cobolParser.STATUS);
				this.state = 6343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6342;
					this.separator();
					}
					}
					this.state = 6345;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6347;
					this.match(cobolParser.IS);
					this.state = 6349;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6348;
						this.separator();
						}
						}
						this.state = 6351;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6355;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6359;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 6375;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1064, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6361;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6360;
						this.separator();
						}
						}
						this.state = 6363;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6365;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6367;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6366;
						this.separator();
						}
						}
						this.state = 6369;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6371;
					this.match(cobolParser.USER_DEFINED_WORD);
					}
					}
				}
				this.state = 6377;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1064, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6378;
			this.match(cobolParser.CURRENCY);
			this.state = 6380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6379;
				this.separator();
				}
				}
				this.state = 6382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6390;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 6384;
				this.match(cobolParser.SIGN);
				this.state = 6386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6385;
					this.separator();
					}
					}
					this.state = 6388;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6398;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6392;
				this.match(cobolParser.IS);
				this.state = 6394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6393;
					this.separator();
					}
					}
					this.state = 6396;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6400;
			this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_definition(): Currency_definitionContext {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.state = 6426;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1074, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6402;
				this.literal_7();
				this.state = 6409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 6403;
					this.match(cobolParser.WITH);
					this.state = 6405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6404;
						this.separator();
						}
						}
						this.state = 6407;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6411;
				this.match(cobolParser.PICTURE);
				this.state = 6413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6412;
					this.separator();
					}
					}
					this.state = 6415;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6417;
				this.match(cobolParser.SYMBOL);
				this.state = 6419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6418;
					this.separator();
					}
					}
					this.state = 6421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6423;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6425;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 466, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6428;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 468, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6430;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 470, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6432;
			this.match(cobolParser.CLASS);
			this.state = 6434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6433;
				this.separator();
				}
				}
				this.state = 6436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6438;
			this.class_name();
			this.state = 6440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6439;
				this.separator();
				}
				}
				this.state = 6442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6450;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6444;
				this.match(cobolParser.IS);
				this.state = 6446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6445;
					this.separator();
					}
					}
					this.state = 6448;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6459;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6452;
				this.user_class();
				this.state = 6456;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1079, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6453;
						this.separator();
						}
						}
					}
					this.state = 6458;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1079, this._ctx);
				}
				}
				}
				this.state = 6461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6463;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6465;
			this.first_literal();
			this.state = 6479;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1083, this._ctx) ) {
			case 1:
				{
				this.state = 6467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6466;
					this.separator();
					}
					}
					this.state = 6469;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6471;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6472;
					this.separator();
					}
					}
					this.state = 6475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6477;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6481;
			this.match(cobolParser.SYMBOLIC);
			this.state = 6483;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6482;
				this.separator();
				}
				}
				this.state = 6485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 6487;
				this.match(cobolParser.CHARACTERS);
				this.state = 6489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6488;
					this.separator();
					}
					}
					this.state = 6491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6495;
				this.symb_ch_definition();
				}
				}
				this.state = 6498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6501;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6500;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6503;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1088, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 6506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 6505;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6508;
				this.symbol_char();
				this.state = 6510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6509;
					this.separator();
					}
					}
					this.state = 6512;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
				}
				this.state = 6516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 6524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 6518;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6519;
					this.separator();
					}
					}
					this.state = 6522;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6526;
				this.char_val();
				this.state = 6528;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6527;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6530;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1094, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 6534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6536;
			this.match(cobolParser.IN);
			this.state = 6538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6537;
				this.separator();
				}
				}
				this.state = 6540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6542;
			this.alpha_name();
			this.state = 6546;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1097, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6543;
					this.separator();
					}
					}
				}
				this.state = 6548;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1097, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6549;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6551;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6553;
			this.match(cobolParser.ALPHABET);
			this.state = 6555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6554;
				this.separator();
				}
				}
				this.state = 6557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6559;
			this.alpha_name();
			this.state = 6561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6560;
				this.separator();
				}
				}
				this.state = 6563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6565;
				this.match(cobolParser.IS);
				this.state = 6567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6566;
					this.separator();
					}
					}
					this.state = 6569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6573;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6575;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6576;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6577;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6578;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6579;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6580;
					this.user_alpha();
					this.state = 6584;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1102, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6581;
							this.separator();
							}
							}
						}
						this.state = 6586;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 1102, this._ctx);
					}
					}
					}
					this.state = 6589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6627;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1111, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6593;
				this.first_literal();
				this.state = 6607;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1107, this._ctx) ) {
				case 1:
					{
					this.state = 6595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6594;
						this.separator();
						}
						}
						this.state = 6597;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6599;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6601;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6600;
						this.separator();
						}
						}
						this.state = 6603;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6605;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6609;
				this.first_literal();
				this.state = 6623;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6611;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6610;
							this.separator();
							}
							}
							this.state = 6613;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 6615;
						this.match(cobolParser.ALSO);
						this.state = 6617;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6616;
							this.separator();
							}
							}
							this.state = 6619;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 6621;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6625;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1110, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6629;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6631;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6633;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 500, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6635;
			this.match(cobolParser.SWITCH);
			this.state = 6637;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6636;
				this.separator();
				}
				}
				this.state = 6639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6641;
			this.switch_num();
			this.state = 6645;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1113, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6642;
					this.separator();
					}
					}
				}
				this.state = 6647;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1113, this._ctx);
			}
			this.state = 6662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 6654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 6648;
					this.match(cobolParser.IS);
					this.state = 6650;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6649;
						this.separator();
						}
						}
						this.state = 6652;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6656;
				this.switch_name();
				this.state = 6658;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6657;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6660;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1116, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 6684;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 6664;
				this.switch_clause_on();
				this.state = 6672;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1119, this._ctx) ) {
				case 1:
					{
					this.state = 6666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6665;
						this.separator();
						}
						}
						this.state = 6668;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6670;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 6674;
				this.switch_clause_off();
				this.state = 6682;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1121, this._ctx) ) {
				case 1:
					{
					this.state = 6676;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6675;
						this.separator();
						}
						}
						this.state = 6678;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 6680;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 6689;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1123, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6686;
					this.separator();
					}
					}
				}
				this.state = 6691;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1123, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6692;
			this.match(cobolParser.ON);
			this.state = 6694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6693;
				this.separator();
				}
				}
				this.state = 6696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 6698;
				this.match(cobolParser.STATUS);
				this.state = 6700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6699;
					this.separator();
					}
					}
					this.state = 6702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6712;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6706;
				this.match(cobolParser.IS);
				this.state = 6708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6707;
					this.separator();
					}
					}
					this.state = 6710;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6714;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6716;
			this.match(cobolParser.OFF);
			this.state = 6718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6717;
				this.separator();
				}
				}
				this.state = 6720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6728;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 6722;
				this.match(cobolParser.STATUS);
				this.state = 6724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6723;
					this.separator();
					}
					}
					this.state = 6726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6730;
				this.match(cobolParser.IS);
				this.state = 6732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6731;
					this.separator();
					}
					}
					this.state = 6734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6738;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6740;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6742;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6744;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6746;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6748;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & ((1 << (cobolParser.SYSERR - 360)) | (1 << (cobolParser.SYSIN - 360)) | (1 << (cobolParser.SYSOUT - 360)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6750;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6752;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6754;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6756;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 6760;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6757;
				this.separator();
				}
				}
				this.state = 6762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6763;
			this.match(cobolParser.DOT_);
			this.state = 6767;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1135, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6764;
					this.separator();
					}
					}
				}
				this.state = 6769;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1135, this._ctx);
			}
			this.state = 6779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 6770;
				this.select();
				this.state = 6774;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1136, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6771;
						this.separator();
						}
						}
					}
					this.state = 6776;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1136, this._ctx);
				}
				}
				}
				this.state = 6781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6782;
			this.match(cobolParser.SELECT);
			this.state = 6784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6783;
				this.separator();
				}
				}
				this.state = 6786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 6788;
				this.match(cobolParser.OPTIONAL);
				this.state = 6790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6789;
					this.separator();
					}
					}
					this.state = 6792;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6796;
			this.file_name();
			this.state = 6800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6797;
				this.separator();
				}
				}
				this.state = 6802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6803;
			this.assign_to();
			this.state = 6807;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 6804;
				this.separator();
				}
				}
				this.state = 6809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 6810;
				this.reserve();
				this.state = 6814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6811;
					this.separator();
					}
					}
					this.state = 6816;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6826;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1146, this._ctx) ) {
			case 1:
				{
				this.state = 6819;
				this.organization();
				this.state = 6823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6820;
					this.separator();
					}
					}
					this.state = 6825;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 6835;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 6828;
				this.block_contains();
				this.state = 6832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6829;
					this.separator();
					}
					}
					this.state = 6834;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 6837;
				this.code_set();
				this.state = 6841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6838;
					this.separator();
					}
					}
					this.state = 6843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 6846;
				this.padding();
				this.state = 6850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6847;
					this.separator();
					}
					}
					this.state = 6852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6862;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1154, this._ctx) ) {
			case 1:
				{
				this.state = 6855;
				this.record_delimiter();
				this.state = 6859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6856;
					this.separator();
					}
					}
					this.state = 6861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 6871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 6864;
				this.access_mode();
				this.state = 6868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6865;
					this.separator();
					}
					}
					this.state = 6870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6882;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 6873;
				this.record_key();
				this.state = 6877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6874;
					this.separator();
					}
					}
					this.state = 6879;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 6884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6892;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 6885;
				this.lock_mode();
				this.state = 6889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6886;
					this.separator();
					}
					}
					this.state = 6891;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6901;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 6894;
				this.file_status();
				this.state = 6898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6895;
					this.separator();
					}
					}
					this.state = 6900;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6903;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6911;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 6905;
				this.match(cobolParser.FILE);
				this.state = 6907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6906;
					this.separator();
					}
					}
					this.state = 6909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6913;
			this.match(cobolParser.STATUS);
			this.state = 6915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6914;
				this.separator();
				}
				}
				this.state = 6917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6919;
				this.match(cobolParser.IS);
				this.state = 6921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6920;
					this.separator();
					}
					}
					this.state = 6923;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6927;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6929;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 6931;
				this.match(cobolParser.ALTERNATE);
				this.state = 6933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6932;
					this.separator();
					}
					}
					this.state = 6935;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6939;
			this.match(cobolParser.RECORD);
			this.state = 6941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6940;
				this.separator();
				}
				}
				this.state = 6943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 6951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 6945;
				this.match(cobolParser.KEY);
				this.state = 6947;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6946;
					this.separator();
					}
					}
					this.state = 6949;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6959;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6953;
				this.match(cobolParser.IS);
				this.state = 6955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6954;
					this.separator();
					}
					}
					this.state = 6957;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 6961;
			this.record_key_definition();
			this.state = 6977;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1178, this._ctx) ) {
			case 1:
				{
				this.state = 6963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6962;
					this.separator();
					}
					}
					this.state = 6965;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 6967;
					this.match(cobolParser.WITH);
					this.state = 6969;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6968;
						this.separator();
						}
						}
						this.state = 6971;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 6975;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 6986;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1180, this._ctx) ) {
			case 1:
				{
				this.state = 6980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6979;
					this.separator();
					}
					}
					this.state = 6982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 6984;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_definition(): Record_key_definitionContext {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 7016;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1185, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6988;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6989;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 6993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6990;
					this.separator();
					}
					}
					this.state = 6995;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6996;
				this.match(cobolParser.EQUAL_);
				this.state = 7000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 6997;
					this.separator();
					}
					}
					this.state = 7002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7003;
				this.qualified_data_item();
				this.state = 7013;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1184, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7007;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
							{
							{
							this.state = 7004;
							this.separator();
							}
							}
							this.state = 7009;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 7010;
						this.qualified_data_item();
						}
						}
					}
					this.state = 7015;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1184, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 7018;
				this.match(cobolParser.ACCESS);
				this.state = 7020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7019;
					this.separator();
					}
					}
					this.state = 7022;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 7024;
					this.match(cobolParser.MODE);
					this.state = 7026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7025;
						this.separator();
						}
						}
						this.state = 7028;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7032;
					this.match(cobolParser.IS);
					this.state = 7034;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7033;
						this.separator();
						}
						}
						this.state = 7036;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				}
			}

			this.state = 7042;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7072;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1198, this._ctx) ) {
			case 1:
				{
				this.state = 7044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7043;
					this.separator();
					}
					}
					this.state = 7046;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7048;
				this.match(cobolParser.RELATIVE);
				this.state = 7050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7049;
					this.separator();
					}
					}
					this.state = 7052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 7054;
					this.match(cobolParser.KEY);
					this.state = 7056;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7055;
						this.separator();
						}
						}
						this.state = 7058;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7062;
					this.match(cobolParser.IS);
					this.state = 7064;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7063;
						this.separator();
						}
						}
						this.state = 7066;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7070;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7074;
			this.match(cobolParser.RESERVE);
			this.state = 7076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7075;
				this.separator();
				}
				}
				this.state = 7078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7080;
			this.reserve_num();
			this.state = 7088;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1201, this._ctx) ) {
			case 1:
				{
				this.state = 7082;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7081;
					this.separator();
					}
					}
					this.state = 7084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7086;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7090;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7092;
			this.match(cobolParser.RECORD);
			this.state = 7094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7093;
				this.separator();
				}
				}
				this.state = 7096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7098;
			this.match(cobolParser.DELIMITER);
			this.state = 7100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7099;
				this.separator();
				}
				}
				this.state = 7102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7104;
				this.match(cobolParser.IS);
				this.state = 7106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7105;
					this.separator();
					}
					}
					this.state = 7108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7112;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7114;
			this.match(cobolParser.PADDING);
			this.state = 7116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7115;
				this.separator();
				}
				}
				this.state = 7118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 7120;
				this.match(cobolParser.CHARACTER);
				this.state = 7122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7121;
					this.separator();
					}
					}
					this.state = 7124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7128;
				this.match(cobolParser.IS);
				this.state = 7130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7129;
					this.separator();
					}
					}
					this.state = 7132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7136;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7138;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 7140;
				this.match(cobolParser.ORGANIZATION);
				this.state = 7142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7141;
					this.separator();
					}
					}
					this.state = 7144;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 7146;
					this.match(cobolParser.IS);
					this.state = 7148;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7147;
						this.separator();
						}
						}
						this.state = 7150;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				}
			}

			this.state = 7167;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 7156;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 7157;
				this.match(cobolParser.LINE);
				this.state = 7159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7158;
					this.separator();
					}
					}
					this.state = 7161;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7163;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 7165;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 7166;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7169;
			this.match(cobolParser.LOCK);
			this.state = 7171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7170;
				this.separator();
				}
				}
				this.state = 7173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 7175;
				this.match(cobolParser.MODE);
				this.state = 7177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7176;
					this.separator();
					}
					}
					this.state = 7179;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7183;
				this.match(cobolParser.IS);
				this.state = 7185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7184;
					this.separator();
					}
					}
					this.state = 7187;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7191;
			this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_definition(): Lock_mode_definitionContext {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 7261;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7193;
				this.match(cobolParser.MANUAL);
				this.state = 7195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7194;
					this.separator();
					}
					}
					this.state = 7197;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 7199;
					this.match(cobolParser.WITH);
					this.state = 7201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7200;
						this.separator();
						}
						}
						this.state = 7203;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7207;
				this.match(cobolParser.LOCK);
				this.state = 7209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7208;
					this.separator();
					}
					}
					this.state = 7211;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7213;
				this.match(cobolParser.ON);
				this.state = 7215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7214;
					this.separator();
					}
					}
					this.state = 7217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7219;
				this.match(cobolParser.MULTIPLE);
				this.state = 7221;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7220;
					this.separator();
					}
					}
					this.state = 7223;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7225;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7227;
				this.match(cobolParser.AUTOMATIC);
				this.state = 7258;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1234, this._ctx) ) {
				case 1:
					{
					this.state = 7229;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7228;
						this.separator();
						}
						}
						this.state = 7231;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 7239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 7233;
						this.match(cobolParser.WITH);
						this.state = 7235;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7234;
							this.separator();
							}
							}
							this.state = 7237;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					this.state = 7256;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 7241;
						this.match(cobolParser.LOCK);
						this.state = 7243;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7242;
							this.separator();
							}
							}
							this.state = 7245;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 7247;
						this.match(cobolParser.ON);
						this.state = 7249;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7248;
							this.separator();
							}
							}
							this.state = 7251;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 7253;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 7255;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7260;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7263;
			this.match(cobolParser.CODE_SET);
			this.state = 7265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7264;
				this.separator();
				}
				}
				this.state = 7267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7269;
				this.match(cobolParser.IS);
				this.state = 7271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7270;
					this.separator();
					}
					}
					this.state = 7273;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7277;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7279;
			this.match(cobolParser.BLOCK);
			this.state = 7281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7280;
				this.separator();
				}
				}
				this.state = 7283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7291;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 7285;
				this.match(cobolParser.CONTAINS);
				this.state = 7287;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7286;
					this.separator();
					}
					}
					this.state = 7289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7305;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1244, this._ctx) ) {
			case 1:
				{
				this.state = 7293;
				this.smallest_block();
				this.state = 7295;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7294;
					this.separator();
					}
					}
					this.state = 7297;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7299;
				this.match(cobolParser.TO);
				this.state = 7301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7300;
					this.separator();
					}
					}
					this.state = 7303;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
				break;
			}
			this.state = 7307;
			this.blocksize();
			this.state = 7309;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7308;
				this.separator();
				}
				}
				this.state = 7311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7313;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7315;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7317;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7319;
			this.match(cobolParser.ASSIGN);
			this.state = 7321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7320;
				this.separator();
				}
				}
				this.state = 7323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7331;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 7325;
				this.match(cobolParser.TO);
				this.state = 7327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7326;
					this.separator();
					}
					}
					this.state = 7329;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7333;
			this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_definition(): Assign_to_definitionContext {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 7362;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 7335;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7337;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7336;
						this.separator();
						}
						}
						this.state = 7339;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7343;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 7344;
					this.match(cobolParser.MULTIPLE);
					this.state = 7346;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7345;
						this.separator();
						}
						}
						this.state = 7348;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7352;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7360;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1254, this._ctx) ) {
				case 1:
					{
					this.state = 7354;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7353;
						this.separator();
						}
						}
						this.state = 7356;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 7358;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, cobolParser.RULE_file_spec);
		try {
			this.state = 7368;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7364;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7365;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7366;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7367;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7370;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7372;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 7376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 7373;
				this.separator();
				}
				}
				this.state = 7378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7379;
			this.match(cobolParser.DOT_);
			this.state = 7383;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1258, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7380;
					this.separator();
					}
					}
				}
				this.state = 7385;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1258, this._ctx);
			}
			this.state = 7441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 7395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 7386;
					this.apply();
					this.state = 7390;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7387;
						this.separator();
						}
						}
						this.state = 7392;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 7398;
					this.same();
					this.state = 7402;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7399;
						this.separator();
						}
						}
						this.state = 7404;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7419;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 7410;
					this.rerun();
					this.state = 7414;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7411;
						this.separator();
						}
						}
						this.state = 7416;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 7422;
					this.multiple_file();
					this.state = 7426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7423;
						this.separator();
						}
						}
						this.state = 7428;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 7433;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7434;
				this.match(cobolParser.DOT_);
				this.state = 7438;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1267, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7435;
						this.separator();
						}
						}
					}
					this.state = 7440;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1267, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7443;
			this.match(cobolParser.MULTIPLE);
			this.state = 7445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7444;
				this.separator();
				}
				}
				this.state = 7447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7449;
			this.match(cobolParser.FILE);
			this.state = 7451;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7450;
				this.separator();
				}
				}
				this.state = 7453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 7455;
				this.match(cobolParser.TAPE);
				this.state = 7457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7456;
					this.separator();
					}
					}
					this.state = 7459;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 7463;
				this.match(cobolParser.CONTAINS);
				this.state = 7465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7464;
					this.separator();
					}
					}
					this.state = 7467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7471;
				this.multiple_file_definition();
				this.state = 7475;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1275, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7472;
						this.separator();
						}
						}
					}
					this.state = 7477;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1275, this._ctx);
				}
				}
				}
				this.state = 7480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_definition(): Multiple_file_definitionContext {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7482;
			this.multiple_file_name();
			this.state = 7496;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1279, this._ctx) ) {
			case 1:
				{
				this.state = 7484;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7483;
					this.separator();
					}
					}
					this.state = 7486;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7488;
				this.match(cobolParser.POSITION);
				this.state = 7490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7489;
					this.separator();
					}
					}
					this.state = 7492;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7494;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7498;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7500;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7502;
			this.match(cobolParser.RERUN);
			this.state = 7504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7503;
				this.separator();
				}
				}
				this.state = 7506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 7508;
				this.match(cobolParser.ON);
				this.state = 7510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7509;
					this.separator();
					}
					}
					this.state = 7512;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7514;
				this.file_name();
				this.state = 7516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7515;
					this.separator();
					}
					}
					this.state = 7518;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7528;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 7522;
				this.match(cobolParser.EVERY);
				this.state = 7524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7523;
					this.separator();
					}
					}
					this.state = 7526;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7530;
			this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_definition(): Rerun_definitionContext {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 7557;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1290, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7532;
				this.rerun_def_file();
				this.state = 7534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7533;
					this.separator();
					}
					}
					this.state = 7536;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 7538;
					this.match(cobolParser.OF);
					this.state = 7540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7539;
						this.separator();
						}
						}
						this.state = 7542;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7546;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7548;
				this.clock_count();
				this.state = 7550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7549;
					this.separator();
					}
					}
					this.state = 7552;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7554;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7556;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7559;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7561;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 7588;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 7563;
					this.match(cobolParser.END);
					this.state = 7565;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7564;
						this.separator();
						}
						}
						this.state = 7567;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 7575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 7569;
						this.match(cobolParser.OF);
						this.state = 7571;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7570;
							this.separator();
							}
							}
							this.state = 7573;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						}
					}

					}
				}

				this.state = 7579;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7580;
				this.rec_count();
				this.state = 7582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7581;
					this.separator();
					}
					}
					this.state = 7584;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7586;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7590;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7592;
			this.match(cobolParser.SAME);
			this.state = 7594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7593;
				this.separator();
				}
				}
				this.state = 7596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7604;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 7598;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7599;
					this.separator();
					}
					}
					this.state = 7602;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7612;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 7606;
				this.match(cobolParser.AREA);
				this.state = 7608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7607;
					this.separator();
					}
					}
					this.state = 7610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 7614;
				this.match(cobolParser.FOR);
				this.state = 7616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7615;
					this.separator();
					}
					}
					this.state = 7618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
			}

			this.state = 7622;
			this.same_area_file();
			this.state = 7630;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7624;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7623;
						this.separator();
						}
						}
						this.state = 7626;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 7628;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7632;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1305, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7634;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7636;
			this.match(cobolParser.APPLY);
			this.state = 7638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7637;
				this.separator();
				}
				}
				this.state = 7640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7642;
				this.apply_definition();
				this.state = 7644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7643;
					this.separator();
					}
					}
					this.state = 7646;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				}
				}
				this.state = 7650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (cobolParser.CONTIGUOUS - 85)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 85)) | (1 << (cobolParser.DEFERRED_WRITE - 85)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 7652;
			this.match(cobolParser.ON);
			this.state = 7654;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7653;
				this.separator();
				}
				}
				this.state = 7656;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7658;
				this.file_name();
				this.state = 7662;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1310, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 7659;
						this.separator();
						}
						}
					}
					this.state = 7664;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1310, this._ctx);
				}
				}
				}
				this.state = 7667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_definition(): Apply_definitionContext {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 7706;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7669;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7670;
				this.match(cobolParser.EXTENSION);
				this.state = 7672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7671;
					this.separator();
					}
					}
					this.state = 7674;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7676;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7678;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7679;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7680;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 7681;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7682;
						this.separator();
						}
						}
						this.state = 7685;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					}
				}

				this.state = 7689;
				this.match(cobolParser.PREALLOCATION);
				this.state = 7691;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7690;
					this.separator();
					}
					}
					this.state = 7693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7695;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7697;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7698;
				this.match(cobolParser.WINDOW);
				this.state = 7700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7699;
					this.separator();
					}
					}
					this.state = 7702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7704;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7708;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7710;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7712;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public arithmetic_expression(): Arithmetic_expressionContext;
	public arithmetic_expression(_p: number): Arithmetic_expressionContext;
	// @RuleVersion(0)
	public arithmetic_expression(_p?: number): Arithmetic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 604;
		this.enterRecursionRule(_localctx, 604, cobolParser.RULE_arithmetic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7742;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 7715;
				this.match(cobolParser.LPAREN_);
				this.state = 7719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7716;
					this.arithmetic_separator();
					}
					}
					this.state = 7721;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7722;
				this.arithmetic_expression(0);
				this.state = 7726;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7723;
					this.arithmetic_separator();
					}
					}
					this.state = 7728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7729;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 7731;
				this.unary_arithmetic_operator();
				this.state = 7735;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7732;
					this.arithmetic_separator();
					}
					}
					this.state = 7737;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7738;
				this.arithmetic_expression(3);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 7740;
				this.identifier();
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 7741;
				this.constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7762;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1324, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 7744;
					if (!(this.precpred(this._ctx, 4))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 4)");
					}
					this.state = 7748;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7745;
						this.arithmetic_separator();
						}
						}
						this.state = 7750;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7751;
					this.binary_arithmetic_operator();
					this.state = 7755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7752;
						this.arithmetic_separator();
						}
						}
						this.state = 7757;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7758;
					this.arithmetic_expression(5);
					}
					}
				}
				this.state = 7764;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1324, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, cobolParser.RULE_constant);
		try {
			this.state = 7768;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7765;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7766;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7767;
				this.figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 7776;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1326, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7770;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7771;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7772;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7773;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7774;
				this.match(cobolParser.STAR_);
				this.state = 7775;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7778;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_expression(): Logic_expressionContext;
	public logic_expression(_p: number): Logic_expressionContext;
	// @RuleVersion(0)
	public logic_expression(_p?: number): Logic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_expressionContext = new Logic_expressionContext(this._ctx, _parentState);
		let _prevctx: Logic_expressionContext = _localctx;
		let _startState: number = 612;
		this.enterRecursionRule(_localctx, 612, cobolParser.RULE_logic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7809;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1330, this._ctx) ) {
			case 1:
				{
				this.state = 7781;
				this.match(cobolParser.LPAREN_);
				this.state = 7785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7782;
					this.arithmetic_separator();
					}
					}
					this.state = 7787;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7788;
				this.logic_expression(0);
				this.state = 7792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7789;
					this.arithmetic_separator();
					}
					}
					this.state = 7794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7795;
				this.match(cobolParser.RPAREN_);
				}
				break;

			case 2:
				{
				this.state = 7797;
				this.match(cobolParser.NOT);
				this.state = 7801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7798;
					this.arithmetic_separator();
					}
					}
					this.state = 7803;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7804;
				this.logic_expression(5);
				}
				break;

			case 3:
				{
				this.state = 7805;
				this.class_condition();
				}
				break;

			case 4:
				{
				this.state = 7806;
				this.logic_condition(0);
				}
				break;

			case 5:
				{
				this.state = 7807;
				this.sign_condition();
				}
				break;

			case 6:
				{
				this.state = 7808;
				this.success_failure_condition();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7829;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1333, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_expression);
					this.state = 7811;
					if (!(this.precpred(this._ctx, 6))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
					}
					this.state = 7815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7812;
						this.arithmetic_separator();
						}
						}
						this.state = 7817;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7818;
					this.logic_operation();
					this.state = 7822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7819;
						this.arithmetic_separator();
						}
						}
						this.state = 7824;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7825;
					this.logic_expression(7);
					}
					}
				}
				this.state = 7831;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1333, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public success_failure_condition(): Success_failure_conditionContext {
		let _localctx: Success_failure_conditionContext = new Success_failure_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, cobolParser.RULE_success_failure_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7832;
			this.qualified_data_item();
			this.state = 7840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1335, this._ctx) ) {
			case 1:
				{
				this.state = 7834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7833;
					this.arithmetic_separator();
					}
					}
					this.state = 7836;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7838;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7842;
				this.arithmetic_separator();
				}
				}
				this.state = 7845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7847;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_condition(): Logic_conditionContext;
	public logic_condition(_p: number): Logic_conditionContext;
	// @RuleVersion(0)
	public logic_condition(_p?: number): Logic_conditionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_conditionContext = new Logic_conditionContext(this._ctx, _parentState);
		let _prevctx: Logic_conditionContext = _localctx;
		let _startState: number = 616;
		this.enterRecursionRule(_localctx, 616, cobolParser.RULE_logic_condition, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7868;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1339, this._ctx) ) {
			case 1:
				{
				this.state = 7850;
				this.arithmetic_expression(0);
				this.state = 7854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7851;
					this.arithmetic_separator();
					}
					}
					this.state = 7856;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7857;
				this.condition_operator();
				this.state = 7861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7858;
					this.arithmetic_separator();
					}
					}
					this.state = 7863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7864;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 7866;
				this.class_condition();
				}
				break;

			case 3:
				{
				this.state = 7867;
				this.qualified_data_item();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7894;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1343, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_conditionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_condition);
					this.state = 7870;
					if (!(this.precpred(this._ctx, 1))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 7872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 7871;
						this.arithmetic_separator();
						}
						}
						this.state = 7874;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 7876;
					this.logic_operation();
					this.state = 7880;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7877;
						this.arithmetic_separator();
						}
						}
						this.state = 7882;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7883;
					this.condition_operator();
					this.state = 7887;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7884;
						this.arithmetic_separator();
						}
						}
						this.state = 7889;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 7890;
					this.arithmetic_expression(0);
					}
					}
				}
				this.state = 7896;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1343, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logic_operation(): Logic_operationContext {
		let _localctx: Logic_operationContext = new Logic_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, cobolParser.RULE_logic_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7897;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AND || _la === cobolParser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition(): Sign_conditionContext {
		let _localctx: Sign_conditionContext = new Sign_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, cobolParser.RULE_sign_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7899;
			this.arithmetic_expression(0);
			this.state = 7907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1345, this._ctx) ) {
			case 1:
				{
				this.state = 7901;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7900;
					this.arithmetic_separator();
					}
					}
					this.state = 7903;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7905;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1347, this._ctx) ) {
			case 1:
				{
				this.state = 7910;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7909;
					this.arithmetic_separator();
					}
					}
					this.state = 7912;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7914;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 7919;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7918;
				this.arithmetic_separator();
				}
				}
				this.state = 7921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7923;
			this.sign_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition_name(): Sign_condition_nameContext {
		let _localctx: Sign_condition_nameContext = new Sign_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, cobolParser.RULE_sign_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7925;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NEGATIVE || _la === cobolParser.POSITIVE || _la === cobolParser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition(): Class_conditionContext {
		let _localctx: Class_conditionContext = new Class_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, cobolParser.RULE_class_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7927;
			this.identifier();
			this.state = 7935;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1350, this._ctx) ) {
			case 1:
				{
				this.state = 7929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7928;
					this.arithmetic_separator();
					}
					}
					this.state = 7931;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7933;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 7944;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1352, this._ctx) ) {
			case 1:
				{
				this.state = 7938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7937;
					this.arithmetic_separator();
					}
					}
					this.state = 7940;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 7942;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 7947;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 7946;
				this.arithmetic_separator();
				}
				}
				this.state = 7949;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
			this.state = 7951;
			this.class_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition_name(): Class_condition_nameContext {
		let _localctx: Class_condition_nameContext = new Class_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, cobolParser.RULE_class_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7953;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_operator(): Condition_operatorContext {
		let _localctx: Condition_operatorContext = new Condition_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, cobolParser.RULE_condition_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 7955;
				this.match(cobolParser.IS);
				this.state = 7959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 7956;
					this.arithmetic_separator();
					}
					}
					this.state = 7961;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 8099;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1383, this._ctx) ) {
			case 1:
				{
				this.state = 7971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 7964;
					this.match(cobolParser.NOT);
					this.state = 7968;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 7965;
						this.arithmetic_separator();
						}
						}
						this.state = 7970;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 8033;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.GREATER:
					{
					this.state = 7973;
					this.match(cobolParser.GREATER);
					this.state = 7981;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1359, this._ctx) ) {
					case 1:
						{
						this.state = 7975;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7974;
							this.arithmetic_separator();
							}
							}
							this.state = 7977;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 7979;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.GT_:
					{
					this.state = 7983;
					this.match(cobolParser.GT_);
					this.state = 7991;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1361, this._ctx) ) {
					case 1:
						{
						this.state = 7985;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7984;
							this.arithmetic_separator();
							}
							}
							this.state = 7987;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 7989;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LESS:
					{
					this.state = 7993;
					this.match(cobolParser.LESS);
					this.state = 8001;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1363, this._ctx) ) {
					case 1:
						{
						this.state = 7995;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 7994;
							this.arithmetic_separator();
							}
							}
							this.state = 7997;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 7999;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LT_:
					{
					this.state = 8003;
					this.match(cobolParser.LT_);
					this.state = 8011;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1365, this._ctx) ) {
					case 1:
						{
						this.state = 8005;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8004;
							this.arithmetic_separator();
							}
							}
							this.state = 8007;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 8009;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL:
					{
					this.state = 8013;
					this.match(cobolParser.EQUAL);
					this.state = 8021;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1367, this._ctx) ) {
					case 1:
						{
						this.state = 8015;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8014;
							this.arithmetic_separator();
							}
							}
							this.state = 8017;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 8019;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL_:
					{
					this.state = 8023;
					this.match(cobolParser.EQUAL_);
					this.state = 8031;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1369, this._ctx) ) {
					case 1:
						{
						this.state = 8025;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 8024;
							this.arithmetic_separator();
							}
							}
							this.state = 8027;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
						this.state = 8029;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 8035;
				this.match(cobolParser.GREATER);
				this.state = 8043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1372, this._ctx) ) {
				case 1:
					{
					this.state = 8037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8036;
						this.arithmetic_separator();
						}
						}
						this.state = 8039;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 8041;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 8046;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8045;
					this.arithmetic_separator();
					}
					}
					this.state = 8048;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 8050;
				this.match(cobolParser.OR);
				this.state = 8052;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8051;
					this.arithmetic_separator();
					}
					}
					this.state = 8054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 8056;
				this.match(cobolParser.EQUAL);
				this.state = 8064;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1376, this._ctx) ) {
				case 1:
					{
					this.state = 8058;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8057;
						this.arithmetic_separator();
						}
						}
						this.state = 8060;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 8062;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 8066;
				this.match(cobolParser.GE_);
				}
				break;

			case 4:
				{
				this.state = 8067;
				this.match(cobolParser.LESS);
				this.state = 8075;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1378, this._ctx) ) {
				case 1:
					{
					this.state = 8069;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8068;
						this.arithmetic_separator();
						}
						}
						this.state = 8071;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 8073;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 8078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8077;
					this.arithmetic_separator();
					}
					}
					this.state = 8080;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 8082;
				this.match(cobolParser.OR);
				this.state = 8084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 8083;
					this.arithmetic_separator();
					}
					}
					this.state = 8086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
				this.state = 8088;
				this.match(cobolParser.EQUAL);
				this.state = 8096;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1382, this._ctx) ) {
				case 1:
					{
					this.state = 8090;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 8089;
						this.arithmetic_separator();
						}
						}
						this.state = 8092;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0));
					this.state = 8094;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 8098;
				this.match(cobolParser.LE_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_result(): Identifier_resultContext {
		let _localctx: Identifier_resultContext = new Identifier_resultContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, cobolParser.RULE_identifier_result);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8101;
			this.qualified_data_item();
			this.state = 8109;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1385, this._ctx) ) {
			case 1:
				{
				this.state = 8105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 8102;
					this.arithmetic_separator();
					}
					}
					this.state = 8107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8108;
				this.subscripting();
				}
				break;
			}
			this.state = 8118;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1387, this._ctx) ) {
			case 1:
				{
				this.state = 8114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 8111;
					this.arithmetic_separator();
					}
					}
					this.state = 8116;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8117;
				this.reference_modification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, cobolParser.RULE_identifier);
		let _la: number;
		try {
			this.state = 8147;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8120;
				this.identifier_result();
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8121;
				this.match(cobolParser.FUNCTION);
				this.state = 8125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 8122;
					this.arithmetic_separator();
					}
					}
					this.state = 8127;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8128;
				this.function_name();
				this.state = 8136;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1390, this._ctx) ) {
				case 1:
					{
					this.state = 8132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 8129;
						this.arithmetic_separator();
						}
						}
						this.state = 8134;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 8135;
					this.arguments();
					}
					break;
				}
				this.state = 8145;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1392, this._ctx) ) {
				case 1:
					{
					this.state = 8141;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 8138;
						this.arithmetic_separator();
						}
						}
						this.state = 8143;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 8144;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8149;
			this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscripting(): SubscriptingContext {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8151;
			this.match(cobolParser.LPAREN_);
			this.state = 8155;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 8152;
				this.arithmetic_separator();
				}
				}
				this.state = 8157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8160;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1395, this._ctx) ) {
			case 1:
				{
				this.state = 8158;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 8159;
				this.match(cobolParser.ALL);
				}
				break;
			}
			this.state = 8174;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1398, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.COMMA_ - 410)) | (1 << (cobolParser.SEMI_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
						{
						{
						this.state = 8162;
						this.separator();
						}
						}
						this.state = 8167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 8170;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1397, this._ctx) ) {
					case 1:
						{
						this.state = 8168;
						this.arithmetic_expression(0);
						}
						break;

					case 2:
						{
						this.state = 8169;
						this.match(cobolParser.ALL);
						}
						break;
					}
					}
					}
				}
				this.state = 8176;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1398, this._ctx);
			}
			this.state = 8180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 8177;
				this.arithmetic_separator();
				}
				}
				this.state = 8182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8183;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference_modification(): Reference_modificationContext {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8185;
			this.match(cobolParser.LPAREN_);
			this.state = 8189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 8186;
				this.arithmetic_separator();
				}
				}
				this.state = 8191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8192;
			this.leftmost_character_position();
			this.state = 8196;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 8193;
				this.arithmetic_separator();
				}
				}
				this.state = 8198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8199;
			this.match(cobolParser.COLON_);
			this.state = 8207;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1403, this._ctx) ) {
			case 1:
				{
				this.state = 8203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
					{
					{
					this.state = 8200;
					this.arithmetic_separator();
					}
					}
					this.state = 8205;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 8206;
				this.length();
				}
				break;
			}
			this.state = 8212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (cobolParser.START_SLASH_ - 410)) | (1 << (cobolParser.START_STAR_ - 410)) | (1 << (cobolParser.START_FOUR_SPACES - 410)) | (1 << (cobolParser.WHITESPACE - 410)) | (1 << (cobolParser.NEWLINE - 410)))) !== 0)) {
				{
				{
				this.state = 8209;
				this.arithmetic_separator();
				}
				}
				this.state = 8214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8215;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftmost_character_position(): Leftmost_character_positionContext {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8217;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8219;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_name(): Function_nameContext {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, cobolParser.RULE_function_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8221;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 302:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);

		case 306:
			return this.logic_expression_sempred(_localctx as Logic_expressionContext, predIndex);

		case 308:
			return this.logic_condition_sempred(_localctx as Logic_conditionContext, predIndex);
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private logic_expression_sempred(_localctx: Logic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 6);
		}
		return true;
	}
	private logic_condition_sempred(_localctx: Logic_conditionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 16;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01BB\u2022\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x03\x02\x03\x02\x07\x02\u028B\n\x02\f" +
		"\x02\x0E\x02\u028E\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\u029D" +
		"\n\x03\x03\x04\x03\x04\x05\x04\u02A1\n\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x05\x05\u02A9\n\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x05\x06\u02AF\n\x06\x03\x07\x03\x07\x07\x07\u02B3\n\x07\f\x07\x0E\x07" +
		"\u02B6\v\x07\x03\x07\x03\x07\x03\x07\x07\x07\u02BB\n\x07\f\x07\x0E\x07" +
		"\u02BE\v\x07\x03\x07\x05\x07\u02C1\n\x07\x03\b\x03\b\x05\b\u02C5\n\b\x03" +
		"\b\x05\b\u02C8\n\b\x03\b\x05\b\u02CB\n\b\x03\t\x03\t\x05\t\u02CF\n\t\x03" +
		"\t\x03\t\x07\t\u02D3\n\t\f\t\x0E\t\u02D6\v\t\x07\t\u02D8\n\t\f\t\x0E\t" +
		"\u02DB\v\t\x03\t\x03\t\x07\t\u02DF\n\t\f\t\x0E\t\u02E2\v\t\x07\t\u02E4" +
		"\n\t\f\t\x0E\t\u02E7\v\t\x05\t\u02E9\n\t\x03\t\x07\t\u02EC\n\t\f\t\x0E" +
		"\t\u02EF\v\t\x03\t\x05\t\u02F2\n\t\x03\t\x07\t\u02F5\n\t\f\t\x0E\t\u02F8" +
		"\v\t\x03\t\x03\t\x07\t\u02FC\n\t\f\t\x0E\t\u02FF\v\t\x07\t\u0301\n\t\f" +
		"\t\x0E\t\u0304\v\t\x03\n\x03\n\x06\n\u0308\n\n\r\n\x0E\n\u0309\x03\n\x03" +
		"\n\x06\n\u030E\n\n\r\n\x0E\n\u030F\x03\n\x03\n\x05\n\u0314\n\n\x03\n\x07" +
		"\n\u0317\n\n\f\n\x0E\n\u031A\v\n\x03\n\x03\n\x07\n\u031E\n\n\f\n\x0E\n" +
		"\u0321\v\n\x03\v\x03\v\x06\v\u0325\n\v\r\v\x0E\v\u0326\x03\v\x03\v\x06" +
		"\v\u032B\n\v\r\v\x0E\v\u032C\x03\v\x03\v\x05\v\u0331\n\v\x03\v\x06\v\u0334" +
		"\n\v\r\v\x0E\v\u0335\x03\v\x03\v\x05\v\u033A\n\v\x03\v\x07\v\u033D\n\v" +
		"\f\v\x0E\v\u0340\v\v\x03\v\x03\v\x07\v\u0344\n\v\f\v\x0E\v\u0347\v\v\x03" +
		"\f\x03\f\x03\r\x03\r\x07\r\u034D\n\r\f\r\x0E\r\u0350\v\r\x03\r\x03\r\x07" +
		"\r\u0354\n\r\f\r\x0E\r\u0357\v\r\x03\r\x03\r\x07\r\u035B\n\r\f\r\x0E\r" +
		"\u035E\v\r\x06\r\u0360\n\r\r\r\x0E\r\u0361\x03\r\x03\r\x06\r\u0366\n\r" +
		"\r\r\x0E\r\u0367\x03\r\x03\r\x07\r\u036C\n\r\f\r\x0E\r\u036F\v\r\x03\r" +
		"\x03\r\x07\r\u0373\n\r\f\r\x0E\r\u0376\v\r\x03\x0E\x03\x0E\x03\x0E\x06" +
		"\x0E\u037B\n\x0E\r\x0E\x0E\x0E\u037C\x03\x0E\x03\x0E\x07\x0E\u0381\n\x0E" +
		"\f\x0E\x0E\x0E\u0384\v\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x07\x10\u038A" +
		"\n\x10\f\x10\x0E\x10\u038D\v\x10\x03\x10\x03\x10\x07\x10\u0391\n\x10\f" +
		"\x10\x0E\x10\u0394\v\x10\x03\x10\x03\x10\x07\x10\u0398\n\x10\f\x10\x0E" +
		"\x10\u039B\v\x10\x07\x10\u039D\n\x10\f\x10\x0E\x10\u03A0\v\x10\x03\x11" +
		"\x03\x11\x07\x11\u03A4\n\x11\f\x11\x0E\x11\u03A7\v\x11\x06\x11\u03A9\n" +
		"\x11\r\x11\x0E\x11\u03AA\x03\x11\x07\x11\u03AE\n\x11\f\x11\x0E\x11\u03B1" +
		"\v\x11\x03\x11\x03\x11\x07\x11\u03B5\n\x11\f\x11\x0E\x11\u03B8\v\x11\x05" +
		"\x11\u03BA\n\x11\x03\x12\x03\x12\x06\x12\u03BE\n\x12\r\x12\x0E\x12\u03BF" +
		"\x03\x12\x03\x12\x05\x12\u03C4\n\x12\x03\x12\x06\x12\u03C7\n\x12\r\x12" +
		"\x0E\x12\u03C8\x03\x12\x03\x12\x06\x12\u03CD\n\x12\r\x12\x0E\x12\u03CE" +
		"\x03\x12\x03\x12\x05\x12\u03D3\n\x12\x03\x12\x06\x12\u03D6\n\x12\r\x12" +
		"\x0E\x12\u03D7\x03\x12\x03\x12\x06\x12\u03DC\n\x12\r\x12\x0E\x12\u03DD" +
		"\x03\x12\x03\x12\x06\x12\u03E2\n\x12\r\x12\x0E\x12\u03E3\x03\x12\x03\x12" +
		"\x05\x12\u03E8\n\x12\x03\x12\x06\x12\u03EB\n\x12\r\x12\x0E\x12\u03EC\x03" +
		"\x12\x03\x12\x07\x12\u03F1\n\x12\f\x12\x0E\x12\u03F4\v\x12\x03\x12\x03" +
		"\x12\x07\x12\u03F8\n\x12\f\x12\x0E\x12\u03FB\v\x12\x03\x12\x03\x12\x06" +
		"\x12\u03FF\n\x12\r\x12\x0E\x12\u0400\x03\x12\x03\x12\x06\x12\u0405\n\x12" +
		"\r\x12\x0E\x12\u0406\x03\x12\x03\x12\x05\x12\u040B\n\x12\x03\x12\x07\x12" +
		"\u040E\n\x12\f\x12\x0E\x12\u0411\v\x12\x03\x12\x03\x12\x07\x12\u0415\n" +
		"\x12\f\x12\x0E\x12\u0418\v\x12\x03\x13\x03\x13\x03\x14\x03\x14\x06\x14" +
		"\u041E\n\x14\r\x14\x0E\x14\u041F\x03\x14\x03\x14\x07\x14\u0424\n\x14\f" +
		"\x14\x0E\x14\u0427\v\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u042D" +
		"\n\x14\x03\x15\x03\x15\x06\x15\u0431\n\x15\r\x15\x0E\x15\u0432\x03\x15" +
		"\x03\x15\x06\x15\u0437\n\x15\r\x15\x0E\x15\u0438\x03\x15\x03\x15\x05\x15" +
		"\u043D\n\x15\x03\x15\x07\x15\u0440\n\x15\f\x15\x0E\x15\u0443\v\x15\x03" +
		"\x15\x03\x15\x07\x15\u0447\n\x15\f\x15\x0E\x15\u044A\v\x15\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x18\x03\x18\x06\x18\u0452\n\x18\r\x18\x0E\x18" +
		"\u0453\x03\x18\x03\x18\x06\x18\u0458\n\x18\r\x18\x0E\x18\u0459\x03\x18" +
		"\x03\x18\x07\x18\u045E\n\x18\f\x18\x0E\x18\u0461\v\x18\x03\x19\x03\x19" +
		"\x06\x19\u0465\n\x19\r\x19\x0E\x19\u0466\x03\x19\x03\x19\x03\x1A\x03\x1A" +
		"\x07\x1A\u046D\n\x1A\f\x1A\x0E\x1A\u0470\v\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x07\x1A\u0476\n\x1A\f\x1A\x0E\x1A\u0479\v\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x05\x1A\u047E\n\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0493\n\x1B\x03\x1C\x03\x1C" +
		"\x06\x1C\u0497\n\x1C\r\x1C\x0E\x1C\u0498\x03\x1C\x03\x1C\x06\x1C\u049D" +
		"\n\x1C\r\x1C\x0E\x1C\u049E\x03\x1C\x06\x1C\u04A2\n\x1C\r\x1C\x0E\x1C\u04A3" +
		"\x03\x1C\x03\x1C\x07\x1C\u04A8\n\x1C\f\x1C\x0E\x1C\u04AB\v\x1C\x03\x1D" +
		"\x03\x1D\x06\x1D\u04AF\n\x1D\r\x1D\x0E\x1D\u04B0\x03\x1D\x03\x1D\x06\x1D" +
		"\u04B5\n\x1D\r\x1D\x0E\x1D\u04B6\x03\x1D\x03\x1D\x06\x1D\u04BB\n\x1D\r" +
		"\x1D\x0E\x1D\u04BC\x05\x1D\u04BF\n\x1D\x03\x1D\x03\x1D\x06\x1D\u04C3\n" +
		"\x1D\r\x1D\x0E\x1D\u04C4\x03\x1D\x03\x1D\x06\x1D\u04C9\n\x1D\r\x1D\x0E" +
		"\x1D\u04CA\x03\x1E\x03\x1E\x05\x1E\u04CF\n\x1E\x03\x1F\x03\x1F\x03 \x03" +
		" \x06 \u04D5\n \r \x0E \u04D6\x03 \x03 \x06 \u04DB\n \r \x0E \u04DC\x05" +
		" \u04DF\n \x03 \x03 \x06 \u04E3\n \r \x0E \u04E4\x03 \x03 \x06 \u04E9" +
		"\n \r \x0E \u04EA\x03 \x03 \x03!\x03!\x06!\u04F1\n!\r!\x0E!\u04F2\x03" +
		"!\x03!\x06!\u04F7\n!\r!\x0E!\u04F8\x03!\x03!\x05!\u04FD\n!\x03!\x06!\u0500" +
		"\n!\r!\x0E!\u0501\x03!\x03!\x03!\x06!\u0507\n!\r!\x0E!\u0508\x03!\x03" +
		"!\x05!\u050D\n!\x03!\x06!\u0510\n!\r!\x0E!\u0511\x03!\x03!\x06!\u0516" +
		"\n!\r!\x0E!\u0517\x03!\x03!\x03!\x06!\u051D\n!\r!\x0E!\u051E\x03!\x03" +
		"!\x05!\u0523\n!\x05!\u0525\n!\x03!\x06!\u0528\n!\r!\x0E!\u0529\x03!\x03" +
		"!\x05!\u052E\n!\x03\"\x03\"\x06\"\u0532\n\"\r\"\x0E\"\u0533\x03\"\x03" +
		"\"\x03#\x03#\x03$\x03$\x03%\x03%\x06%\u053E\n%\r%\x0E%\u053F\x03%\x03" +
		"%\x03&\x03&\x06&\u0546\n&\r&\x0E&\u0547\x03&\x03&\x05&\u054C\n&\x03&\x06" +
		"&\u054F\n&\r&\x0E&\u0550\x03&\x03&\x05&\u0555\n&\x03&\x03&\x06&\u0559" +
		"\n&\r&\x0E&\u055A\x03&\x03&\x05&\u055F\n&\x03&\x06&\u0562\n&\r&\x0E&\u0563" +
		"\x03&\x03&\x06&\u0568\n&\r&\x0E&\u0569\x03&\x03&\x06&\u056E\n&\r&\x0E" +
		"&\u056F\x03&\x03&\x03&\x06&\u0575\n&\r&\x0E&\u0576\x03&\x03&\x05&\u057B" +
		"\n&\x03\'\x03\'\x03(\x03(\x06(\u0581\n(\r(\x0E(\u0582\x03(\x03(\x06(\u0587" +
		"\n(\r(\x0E(\u0588\x03(\x03(\x05(\u058D\n(\x03(\x06(\u0590\n(\r(\x0E(\u0591" +
		"\x03(\x03(\x07(\u0596\n(\f(\x0E(\u0599\v(\x03(\x06(\u059C\n(\r(\x0E(\u059D" +
		"\x03(\x03(\x06(\u05A2\n(\r(\x0E(\u05A3\x03(\x03(\x06(\u05A8\n(\r(\x0E" +
		"(\u05A9\x03(\x03(\x05(\u05AE\n(\x03(\x06(\u05B1\n(\r(\x0E(\u05B2\x03(" +
		"\x03(\x07(\u05B7\n(\f(\x0E(\u05BA\v(\x03(\x06(\u05BD\n(\r(\x0E(\u05BE" +
		"\x03(\x03(\x06(\u05C3\n(\r(\x0E(\u05C4\x03(\x06(\u05C8\n(\r(\x0E(\u05C9" +
		"\x03(\x03(\x06(\u05CE\n(\r(\x0E(\u05CF\x03(\x03(\x06(\u05D4\n(\r(\x0E" +
		"(\u05D5\x03(\x03(\x05(\u05DA\n(\x03(\x06(\u05DD\n(\r(\x0E(\u05DE\x03(" +
		"\x03(\x05(\u05E3\n(\x03)\x03)\x03)\x06)\u05E8\n)\r)\x0E)\u05E9\x05)\u05EC" +
		"\n)\x03)\x03)\x06)\u05F0\n)\r)\x0E)\u05F1\x03)\x03)\x06)\u05F6\n)\r)\x0E" +
		")\u05F7\x03)\x03)\x05)\u05FC\n)\x03)\x03)\x03)\x05)\u0601\n)\x03*\x03" +
		"*\x03*\x03*\x05*\u0607\n*\x03+\x03+\x05+\u060B\n+\x03,\x03,\x06,\u060F" +
		"\n,\r,\x0E,\u0610\x03,\x03,\x06,\u0615\n,\r,\x0E,\u0616\x03,\x03,\x06" +
		",\u061B\n,\r,\x0E,\u061C\x03,\x03,\x06,\u0621\n,\r,\x0E,\u0622\x03,\x03" +
		",\x05,\u0627\n,\x03,\x06,\u062A\n,\r,\x0E,\u062B\x03,\x03,\x06,\u0630" +
		"\n,\r,\x0E,\u0631\x03,\x03,\x05,\u0636\n,\x06,\u0638\n,\r,\x0E,\u0639" +
		"\x03,\x06,\u063D\n,\r,\x0E,\u063E\x03,\x03,\x05,\u0643\n,\x03,\x06,\u0646" +
		"\n,\r,\x0E,\u0647\x03,\x03,\x05,\u064C\n,\x03-\x03-\x06-\u0650\n-\r-\x0E" +
		"-\u0651\x03-\x03-\x06-\u0656\n-\r-\x0E-\u0657\x03-\x03-\x06-\u065C\n-" +
		"\r-\x0E-\u065D\x03-\x03-\x06-\u0662\n-\r-\x0E-\u0663\x03-\x03-\x05-\u0668" +
		"\n-\x03-\x06-\u066B\n-\r-\x0E-\u066C\x03-\x03-\x06-\u0671\n-\r-\x0E-\u0672" +
		"\x03-\x03-\x05-\u0677\n-\x03-\x06-\u067A\n-\r-\x0E-\u067B\x03-\x03-\x06" +
		"-\u0680\n-\r-\x0E-\u0681\x03-\x03-\x06-\u0686\n-\r-\x0E-\u0687\x03-\x03" +
		"-\x05-\u068C\n-\x03-\x06-\u068F\n-\r-\x0E-\u0690\x03-\x03-\x05-\u0695" +
		"\n-\x03.\x03.\x03/\x03/\x05/\u069B\n/\x030\x030\x030\x030\x050\u06A1\n" +
		"0\x031\x031\x061\u06A5\n1\r1\x0E1\u06A6\x031\x031\x061\u06AB\n1\r1\x0E" +
		"1\u06AC\x031\x031\x071\u06B1\n1\f1\x0E1\u06B4\v1\x061\u06B6\n1\r1\x0E" +
		"1\u06B7\x031\x061\u06BB\n1\r1\x0E1\u06BC\x031\x031\x051\u06C1\n1\x032" +
		"\x032\x062\u06C5\n2\r2\x0E2\u06C6\x032\x032\x062\u06CB\n2\r2\x0E2\u06CC" +
		"\x032\x032\x072\u06D1\n2\f2\x0E2\u06D4\v2\x062\u06D6\n2\r2\x0E2\u06D7" +
		"\x032\x062\u06DB\n2\r2\x0E2\u06DC\x032\x032\x052\u06E1\n2\x033\x033\x06" +
		"3\u06E5\n3\r3\x0E3\u06E6\x033\x033\x063\u06EB\n3\r3\x0E3\u06EC\x033\x03" +
		"3\x063\u06F1\n3\r3\x0E3\u06F2\x053\u06F5\n3\x033\x033\x063\u06F9\n3\r" +
		"3\x0E3\u06FA\x033\x033\x053\u06FF\n3\x033\x053\u0702\n3\x053\u0704\n3" +
		"\x033\x063\u0707\n3\r3\x0E3\u0708\x033\x033\x053\u070D\n3\x034\x034\x06" +
		"4\u0711\n4\r4\x0E4\u0712\x034\x034\x064\u0717\n4\r4\x0E4\u0718\x034\x03" +
		"4\x064\u071D\n4\r4\x0E4\u071E\x034\x034\x064\u0723\n4\r4\x0E4\u0724\x03" +
		"4\x034\x054\u0729\n4\x034\x064\u072C\n4\r4\x0E4\u072D\x034\x034\x054\u0732" +
		"\n4\x035\x035\x055\u0736\n5\x036\x036\x037\x037\x067\u073C\n7\r7\x0E7" +
		"\u073D\x037\x037\x037\x067\u0743\n7\r7\x0E7\u0744\x037\x037\x057\u0749" +
		"\n7\x038\x038\x068\u074D\n8\r8\x0E8\u074E\x038\x038\x038\x068\u0754\n" +
		"8\r8\x0E8\u0755\x038\x038\x058\u075A\n8\x039\x039\x069\u075E\n9\r9\x0E" +
		"9\u075F\x059\u0762\n9\x039\x039\x039\x069\u0767\n9\r9\x0E9\u0768\x039" +
		"\x039\x039\x039\x069\u076F\n9\r9\x0E9\u0770\x059\u0773\n9\x039\x039\x06" +
		"9\u0777\n9\r9\x0E9\u0778\x039\x039\x059\u077D\n9\x059\u077F\n9\x03:\x03" +
		":\x03:\x03:\x03:\x06:\u0786\n:\r:\x0E:\u0787\x03:\x03:\x06:\u078C\n:\r" +
		":\x0E:\u078D\x05:\u0790\n:\x03:\x03:\x06:\u0794\n:\r:\x0E:\u0795\x03:" +
		"\x03:\x05:\u079A\n:\x05:\u079C\n:\x03:\x06:\u079F\n:\r:\x0E:\u07A0\x03" +
		":\x03:\x03:\x03:\x06:\u07A7\n:\r:\x0E:\u07A8\x05:\u07AB\n:\x03:\x03:\x03" +
		":\x03:\x03:\x06:\u07B2\n:\r:\x0E:\u07B3\x05:\u07B6\n:\x03:\x03:\x03:\x03" +
		":\x06:\u07BC\n:\r:\x0E:\u07BD\x05:\u07C0\n:\x03:\x03:\x03:\x06:\u07C5" +
		"\n:\r:\x0E:\u07C6\x05:\u07C9\n:\x03:\x03:\x06:\u07CD\n:\r:\x0E:\u07CE" +
		"\x03:\x03:\x05:\u07D3\n:\x05:\u07D5\n:\x03;\x03;\x06;\u07D9\n;\r;\x0E" +
		";\u07DA\x05;\u07DD\n;\x03;\x03;\x06;\u07E1\n;\r;\x0E;\u07E2\x03;\x03;" +
		"\x05;\u07E7\n;\x03;\x06;\u07EA\n;\r;\x0E;\u07EB\x03;\x03;\x03<\x03<\x06" +
		"<\u07F2\n<\r<\x0E<\u07F3\x05<\u07F6\n<\x03<\x03<\x06<\u07FA\n<\r<\x0E" +
		"<\u07FB\x03<\x03<\x05<\u0800\n<\x03<\x06<\u0803\n<\r<\x0E<\u0804\x03<" +
		"\x03<\x03=\x03=\x03>\x03>\x06>\u080D\n>\r>\x0E>\u080E\x03>\x03>\x06>\u0813" +
		"\n>\r>\x0E>\u0814\x03>\x03>\x05>\u0819\n>\x03>\x06>\u081C\n>\r>\x0E>\u081D" +
		"\x03>\x03>\x05>\u0822\n>\x03>\x06>\u0825\n>\r>\x0E>\u0826\x03>\x03>\x05" +
		">\u082B\n>\x03?\x03?\x03@\x03@\x06@\u0831\n@\r@\x0E@\u0832\x03@\x03@\x06" +
		"@\u0837\n@\r@\x0E@\u0838\x03@\x03@\x05@\u083D\n@\x06@\u083F\n@\r@\x0E" +
		"@\u0840\x03@\x06@\u0844\n@\r@\x0E@\u0845\x03@\x03@\x06@\u084A\n@\r@\x0E" +
		"@\u084B\x03@\x07@\u084F\n@\f@\x0E@\u0852\v@\x03@\x03@\x07@\u0856\n@\f" +
		"@\x0E@\u0859\v@\x05@\u085B\n@\x03@\x03@\x06@\u085F\n@\r@\x0E@\u0860\x03" +
		"@\x03@\x05@\u0865\n@\x03@\x06@\u0868\n@\r@\x0E@\u0869\x03@\x03@\x05@\u086E" +
		"\n@\x03A\x03A\x06A\u0872\nA\rA\x0EA\u0873\x03A\x03A\x06A\u0878\nA\rA\x0E" +
		"A\u0879\x03A\x03A\x05A\u087E\nA\x06A\u0880\nA\rA\x0EA\u0881\x03B\x03B" +
		"\x06B\u0886\nB\rB\x0EB\u0887\x03B\x03B\x06B\u088C\nB\rB\x0EB\u088D\x05" +
		"B\u0890\nB\x03B\x03B\x03B\x06B\u0895\nB\rB\x0EB\u0896\x05B\u0899\nB\x03" +
		"B\x03B\x06B\u089D\nB\rB\x0EB\u089E\x03B\x03B\x05B\u08A3\nB\x05B\u08A5" +
		"\nB\x03B\x03B\x06B\u08A9\nB\rB\x0EB\u08AA\x05B\u08AD\nB\x03B\x03B\x06" +
		"B\u08B1\nB\rB\x0EB\u08B2\x03B\x03B\x03B\x05B\u08B8\nB\x05B\u08BA\nB\x03" +
		"C\x03C\x06C\u08BE\nC\rC\x0EC\u08BF\x03C\x03C\x06C\u08C4\nC\rC\x0EC\u08C5" +
		"\x03D\x03D\x06D\u08CA\n";
	private static readonly _serializedATNSegment1: string =
		"D\rD\x0ED\u08CB\x03D\x03D\x06D\u08D0\nD\rD\x0ED\u08D1\x03D\x03D\x05D\u08D6" +
		"\nD\x03D\x06D\u08D9\nD\rD\x0ED\u08DA\x03D\x03D\x05D\u08DF\nD\x03D\x06" +
		"D\u08E2\nD\rD\x0ED\u08E3\x03D\x03D\x05D\u08E8\nD\x03D\x06D\u08EB\nD\r" +
		"D\x0ED\u08EC\x03D\x03D\x05D\u08F1\nD\x03E\x03E\x06E\u08F5\nE\rE\x0EE\u08F6" +
		"\x03E\x03E\x03F\x03F\x06F\u08FD\nF\rF\x0EF\u08FE\x03F\x03F\x06F\u0903" +
		"\nF\rF\x0EF\u0904\x03G\x03G\x03G\x06G\u090A\nG\rG\x0EG\u090B\x05G\u090E" +
		"\nG\x03G\x03G\x06G\u0912\nG\rG\x0EG\u0913\x03G\x03G\x07G\u0918\nG\fG\x0E" +
		"G\u091B\vG\x05G\u091D\nG\x03H\x03H\x06H\u0921\nH\rH\x0EH\u0922\x05H\u0925" +
		"\nH\x03H\x03H\x03H\x06H\u092A\nH\rH\x0EH\u092B\x05H\u092E\nH\x03H\x03" +
		"H\x03H\x06H\u0933\nH\rH\x0EH\u0934\x05H\u0937\nH\x03H\x03H\x03H\x06H\u093C" +
		"\nH\rH\x0EH\u093D\x05H\u0940\nH\x03H\x05H\u0943\nH\x03I\x03I\x03I\x05" +
		"I\u0948\nI\x03J\x03J\x03K\x03K\x06K\u094E\nK\rK\x0EK\u094F\x03K\x03K\x06" +
		"K\u0954\nK\rK\x0EK\u0955\x03K\x03K\x06K\u095A\nK\rK\x0EK\u095B\x03K\x03" +
		"K\x06K\u0960\nK\rK\x0EK\u0961\x03K\x03K\x06K\u0966\nK\rK\x0EK\u0967\x05" +
		"K\u096A\nK\x03K\x03K\x06K\u096E\nK\rK\x0EK\u096F\x03L\x03L\x03M\x03M\x03" +
		"N\x03N\x06N\u0978\nN\rN\x0EN\u0979\x03N\x03N\x06N\u097E\nN\rN\x0EN\u097F" +
		"\x03N\x06N\u0983\nN\rN\x0EN\u0984\x03N\x03N\x06N\u0989\nN\rN\x0EN\u098A" +
		"\x03N\x03N\x06N\u098F\nN\rN\x0EN\u0990\x03N\x03N\x05N\u0995\nN\x06N\u0997" +
		"\nN\rN\x0EN\u0998\x03N\x03N\x06N\u099D\nN\rN\x0EN\u099E\x03N\x03N\x07" +
		"N\u09A3\nN\fN\x0EN\u09A6\vN\x03N\x06N\u09A9\nN\rN\x0EN\u09AA\x03N\x03" +
		"N\x05N\u09AF\nN\x03N\x06N\u09B2\nN\rN\x0EN\u09B3\x03N\x03N\x06N\u09B8" +
		"\nN\rN\x0EN\u09B9\x03N\x06N\u09BD\nN\rN\x0EN\u09BE\x03N\x03N\x06N\u09C3" +
		"\nN\rN\x0EN\u09C4\x03N\x03N\x06N\u09C9\nN\rN\x0EN\u09CA\x03N\x03N\x05" +
		"N\u09CF\nN\x06N\u09D1\nN\rN\x0EN\u09D2\x03N\x03N\x06N\u09D7\nN\rN\x0E" +
		"N\u09D8\x03N\x03N\x06N\u09DD\nN\rN\x0EN\u09DE\x03N\x03N\x06N\u09E3\nN" +
		"\rN\x0EN\u09E4\x03N\x03N\x06N\u09E9\nN\rN\x0EN\u09EA\x03N\x03N\x06N\u09EF" +
		"\nN\rN\x0EN\u09F0\x03N\x03N\x05N\u09F5\nN\x05N\u09F7\nN\x03N\x06N\u09FA" +
		"\nN\rN\x0EN\u09FB\x03N\x03N\x05N\u0A00\nN\x03N\x06N\u0A03\nN\rN\x0EN\u0A04" +
		"\x03N\x03N\x05N\u0A09\nN\x03O\x03O\x03P\x03P\x05P\u0A0F\nP\x03Q\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x05Q\u0A17\nQ\x03R\x03R\x06R\u0A1B\nR\rR\x0ER\u0A1C\x03" +
		"R\x03R\x06R\u0A21\nR\rR\x0ER\u0A22\x03R\x03R\x05R\u0A27\nR\x03R\x03R\x06" +
		"R\u0A2B\nR\rR\x0ER\u0A2C\x03R\x03R\x06R\u0A31\nR\rR\x0ER\u0A32\x03R\x03" +
		"R\x05R\u0A37\nR\x05R\u0A39\nR\x03S\x03S\x06S\u0A3D\nS\rS\x0ES\u0A3E\x03" +
		"S\x03S\x06S\u0A43\nS\rS\x0ES\u0A44\x03S\x03S\x05S\u0A49\nS\x03S\x03S\x06" +
		"S\u0A4D\nS\rS\x0ES\u0A4E\x03S\x03S\x06S\u0A53\nS\rS\x0ES\u0A54\x03S\x03" +
		"S\x05S\u0A59\nS\x05S\u0A5B\nS\x03T\x03T\x06T\u0A5F\nT\rT\x0ET\u0A60\x03" +
		"T\x03T\x06T\u0A65\nT\rT\x0ET\u0A66\x03T\x03T\x05T\u0A6B\nT\x03T\x03T\x06" +
		"T\u0A6F\nT\rT\x0ET\u0A70\x03T\x03T\x06T\u0A75\nT\rT\x0ET\u0A76\x03T\x03" +
		"T\x05T\u0A7B\nT\x05T\u0A7D\nT\x03U\x03U\x06U\u0A81\nU\rU\x0EU\u0A82\x03" +
		"U\x03U\x06U\u0A87\nU\rU\x0EU\u0A88\x03U\x03U\x05U\u0A8D\nU\x03U\x03U\x06" +
		"U\u0A91\nU\rU\x0EU\u0A92\x03U\x03U\x06U\u0A97\nU\rU\x0EU\u0A98\x03U\x03" +
		"U\x05U\u0A9D\nU\x05U\u0A9F\nU\x03V\x03V\x06V\u0AA3\nV\rV\x0EV\u0AA4\x03" +
		"V\x03V\x06V\u0AA9\nV\rV\x0EV\u0AAA\x03V\x03V\x06V\u0AAF\nV\rV\x0EV\u0AB0" +
		"\x05V\u0AB3\nV\x03V\x03V\x06V\u0AB7\nV\rV\x0EV\u0AB8\x03V\x03V\x05V\u0ABD" +
		"\nV\x03V\x06V\u0AC0\nV\rV\x0EV\u0AC1\x03V\x03V\x05V\u0AC6\nV\x03W\x03" +
		"W\x03X\x03X\x06X\u0ACC\nX\rX\x0EX\u0ACD\x03X\x03X\x06X\u0AD2\nX\rX\x0E" +
		"X\u0AD3\x03X\x03X\x06X\u0AD8\nX\rX\x0EX\u0AD9\x03X\x03X\x05X\u0ADE\nX" +
		"\x03X\x06X\u0AE1\nX\rX\x0EX\u0AE2\x03X\x03X\x06X\u0AE7\nX\rX\x0EX\u0AE8" +
		"\x03X\x03X\x05X\u0AED\nX\x03X\x06X\u0AF0\nX\rX\x0EX\u0AF1\x03X\x03X\x05" +
		"X\u0AF6\nX\x03X\x06X\u0AF9\nX\rX\x0EX\u0AFA\x03X\x03X\x05X\u0AFF\nX\x03" +
		"Y\x03Y\x06Y\u0B03\nY\rY\x0EY\u0B04\x03Y\x03Y\x06Y\u0B09\nY\rY\x0EY\u0B0A" +
		"\x03Y\x03Y\x06Y\u0B0F\nY\rY\x0EY\u0B10\x03Y\x03Y\x03Z\x03Z\x06Z\u0B17" +
		"\nZ\rZ\x0EZ\u0B18\x03Z\x03Z\x06Z\u0B1D\nZ\rZ\x0EZ\u0B1E\x03Z\x03Z\x06" +
		"Z\u0B23\nZ\rZ\x0EZ\u0B24\x03Z\x06Z\u0B28\nZ\rZ\x0EZ\u0B29\x03Z\x03Z\x05" +
		"Z\u0B2E\nZ\x05Z\u0B30\nZ\x03Z\x06Z\u0B33\nZ\rZ\x0EZ\u0B34\x03Z\x03Z\x05" +
		"Z\u0B39\nZ\x03[\x03[\x06[\u0B3D\n[\r[\x0E[\u0B3E\x03[\x03[\x06[\u0B43" +
		"\n[\r[\x0E[\u0B44\x05[\u0B47\n[\x03[\x03[\x06[\u0B4B\n[\r[\x0E[\u0B4C" +
		"\x03[\x03[\x06[\u0B51\n[\r[\x0E[\u0B52\x05[\u0B55\n[\x03[\x03[\x06[\u0B59" +
		"\n[\r[\x0E[\u0B5A\x03[\x03[\x06[\u0B5F\n[\r[\x0E[\u0B60\x03[\x06[\u0B64" +
		"\n[\r[\x0E[\u0B65\x03[\x03[\x05[\u0B6A\n[\x05[\u0B6C\n[\x03[\x06[\u0B6F" +
		"\n[\r[\x0E[\u0B70\x03[\x03[\x05[\u0B75\n[\x03\\\x03\\\x06\\\u0B79\n\\" +
		"\r\\\x0E\\\u0B7A\x03\\\x03\\\x06\\\u0B7F\n\\\r\\\x0E\\\u0B80\x03\\\x03" +
		"\\\x05\\\u0B85\n\\\x03\\\x06\\\u0B88\n\\\r\\\x0E\\\u0B89\x03\\\x03\\\x05" +
		"\\\u0B8E\n\\\x03\\\x06\\\u0B91\n\\\r\\\x0E\\\u0B92\x03\\\x03\\\x05\\\u0B97" +
		"\n\\\x03]\x03]\x06]\u0B9B\n]\r]\x0E]\u0B9C\x05]\u0B9F\n]\x03]\x03]\x06" +
		"]\u0BA3\n]\r]\x0E]\u0BA4\x03]\x03]\x05]\u0BA9\n]\x03]\x03]\x06]\u0BAD" +
		"\n]\r]\x0E]\u0BAE\x03]\x03]\x05]\u0BB3\n]\x05]\u0BB5\n]\x03^\x03^\x06" +
		"^\u0BB9\n^\r^\x0E^\u0BBA\x03^\x03^\x06^\u0BBF\n^\r^\x0E^\u0BC0\x05^\u0BC3" +
		"\n^\x03^\x03^\x05^\u0BC7\n^\x03_\x03_\x06_\u0BCB\n_\r_\x0E_\u0BCC\x03" +
		"_\x03_\x06_\u0BD1\n_\r_\x0E_\u0BD2\x05_\u0BD5\n_\x03_\x03_\x05_\u0BD9" +
		"\n_\x03`\x03`\x06`\u0BDD\n`\r`\x0E`\u0BDE\x05`\u0BE1\n`\x03`\x03`\x06" +
		"`\u0BE5\n`\r`\x0E`\u0BE6\x03`\x03`\x05`\u0BEB\n`\x03`\x06`\u0BEE\n`\r" +
		"`\x0E`\u0BEF\x03`\x03`\x03`\x03`\x06`\u0BF6\n`\r`\x0E`\u0BF7\x05`\u0BFA" +
		"\n`\x03`\x03`\x06`\u0BFE\n`\r`\x0E`\u0BFF\x03`\x03`\x05`\u0C04\n`\x03" +
		"`\x06`\u0C07\n`\r`\x0E`\u0C08\x03`\x03`\x03`\x03`\x06`\u0C0F\n`\r`\x0E" +
		"`\u0C10\x03`\x03`\x06`\u0C15\n`\r`\x0E`\u0C16\x05`\u0C19\n`\x03`\x03`" +
		"\x06`\u0C1D\n`\r`\x0E`\u0C1E\x03`\x03`\x05`\u0C23\n`\x05`\u0C25\n`\x03" +
		"`\x06`\u0C28\n`\r`\x0E`\u0C29\x03`\x03`\x03`\x03`\x06`\u0C30\n`\r`\x0E" +
		"`\u0C31\x05`\u0C34\n`\x03`\x05`\u0C37\n`\x03a\x03a\x03a\x03a\x03a\x06" +
		"a\u0C3E\na\ra\x0Ea\u0C3F\x05a\u0C42\na\x03a\x03a\x03a\x06a\u0C47\na\r" +
		"a\x0Ea\u0C48\x03a\x03a\x05a\u0C4D\na\x03a\x03a\x06a\u0C51\na\ra\x0Ea\u0C52" +
		"\x05a\u0C55\na\x03a\x03a\x03a\x03a\x06a\u0C5B\na\ra\x0Ea\u0C5C\x05a\u0C5F" +
		"\na\x03a\x03a\x06a\u0C63\na\ra\x0Ea\u0C64\x03a\x03a\x03a\x03a\x06a\u0C6B" +
		"\na\ra\x0Ea\u0C6C\x03a\x03a\x06a\u0C71\na\ra\x0Ea\u0C72\x05a\u0C75\na" +
		"\x03a\x03a\x03a\x03a\x06a\u0C7B\na\ra\x0Ea\u0C7C\x05a\u0C7F\na\x03a\x03" +
		"a\x06a\u0C83\na\ra\x0Ea\u0C84\x03a\x03a\x05a\u0C89\na\x03a\x06a\u0C8C" +
		"\na\ra\x0Ea\u0C8D\x03a\x03a\x05a\u0C92\na\x03b\x03b\x03c\x03c\x03c\x03" +
		"c\x03c\x06c\u0C9B\nc\rc\x0Ec\u0C9C\x03c\x03c\x05c\u0CA1\nc\x05c\u0CA3" +
		"\nc\x03d\x03d\x06d\u0CA7\nd\rd\x0Ed\u0CA8\x03d\x03d\x03d\x03d\x06d\u0CAF" +
		"\nd\rd\x0Ed\u0CB0\x05d\u0CB3\nd\x03d\x03d\x03d\x06d\u0CB8\nd\rd\x0Ed\u0CB9" +
		"\x05d\u0CBC\nd\x03d\x03d\x06d\u0CC0\nd\rd\x0Ed\u0CC1\x03d\x03d\x03d\x03" +
		"d\x06d\u0CC8\nd\rd\x0Ed\u0CC9\x05d\u0CCC\nd\x03d\x03d\x03d\x06d\u0CD1" +
		"\nd\rd\x0Ed\u0CD2\x05d\u0CD5\nd\x03d\x03d\x06d\u0CD9\nd\rd\x0Ed\u0CDA" +
		"\x03d\x03d\x05d\u0CDF\nd\x03e\x03e\x03f\x03f\x05f\u0CE5\nf\x03g\x03g\x03" +
		"g\x06g\u0CEA\ng\rg\x0Eg\u0CEB\x03g\x03g\x06g\u0CF0\ng\rg\x0Eg\u0CF1\x03" +
		"g\x03g\x05g\u0CF6\ng\x05g\u0CF8\ng\x03g\x03g\x06g\u0CFC\ng\rg\x0Eg\u0CFD" +
		"\x03g\x03g\x05g\u0D02\ng\x05g\u0D04\ng\x03h\x03h\x06h\u0D08\nh\rh\x0E" +
		"h\u0D09\x03h\x03h\x05h\u0D0E\nh\x03h\x03h\x06h\u0D12\nh\rh\x0Eh\u0D13" +
		"\x03h\x03h\x05h\u0D18\nh\x03h\x03h\x05h\u0D1C\nh\x03i\x03i\x03j\x03j\x03" +
		"k\x03k\x06k\u0D24\nk\rk\x0Ek\u0D25\x05k\u0D28\nk\x03k\x03k\x06k\u0D2C" +
		"\nk\rk\x0Ek\u0D2D\x03k\x03k\x05k\u0D32\nk\x03l\x03l\x06l\u0D36\nl\rl\x0E" +
		"l\u0D37\x05l\u0D3A\nl\x03l\x03l\x06l\u0D3E\nl\rl\x0El\u0D3F\x03l\x03l" +
		"\x05l\u0D44\nl\x03m\x03m\x06m\u0D48\nm\rm\x0Em\u0D49\x05m\u0D4C\nm\x03" +
		"m\x03m\x06m\u0D50\nm\rm\x0Em\u0D51\x03m\x03m\x06m\u0D56\nm\rm\x0Em\u0D57" +
		"\x03m\x03m\x05m\u0D5C\nm\x03n\x03n\x06n\u0D60\nn\rn\x0En\u0D61\x03n\x03" +
		"n\x05n\u0D66\nn\x03n\x06n\u0D69\nn\rn\x0En\u0D6A\x03n\x03n\x05n\u0D6F" +
		"\nn\x03o\x03o\x06o\u0D73\no\ro\x0Eo\u0D74\x03o\x03o\x07o\u0D79\no\fo\x0E" +
		"o\u0D7C\vo\x03o\x03o\x07o\u0D80\no\fo\x0Eo\u0D83\vo\x03o\x03o\x07o\u0D87" +
		"\no\fo\x0Eo\u0D8A\vo\x05o\u0D8C\no\x03o\x03o\x07o\u0D90\no\fo\x0Eo\u0D93" +
		"\vo\x05o\u0D95\no\x03o\x03o\x07o\u0D99\no\fo\x0Eo\u0D9C\vo\x05o\u0D9E" +
		"\no\x03o\x03o\x07o\u0DA2\no\fo\x0Eo\u0DA5\vo\x05o\u0DA7\no\x03o\x03o\x07" +
		"o\u0DAB\no\fo\x0Eo\u0DAE\vo\x05o\u0DB0\no\x03p\x03p\x06p\u0DB4\np\rp\x0E" +
		"p\u0DB5\x03p\x03p\x07p\u0DBA\np\fp\x0Ep\u0DBD\vp\x03p\x03p\x07p\u0DC1" +
		"\np\fp\x0Ep\u0DC4\vp\x03p\x03p\x07p\u0DC8\np\fp\x0Ep\u0DCB\vp\x03p\x07" +
		"p\u0DCE\np\fp\x0Ep\u0DD1\vp\x03p\x03p\x03p\x07p\u0DD6\np\fp\x0Ep\u0DD9" +
		"\vp\x03p\x07p\u0DDC\np\fp\x0Ep\u0DDF\vp\x05p\u0DE1\np\x03p\x07p\u0DE4" +
		"\np\fp\x0Ep\u0DE7\vp\x07p\u0DE9\np\fp\x0Ep\u0DEC\vp\x03q\x03q\x06q\u0DF0" +
		"\nq\rq\x0Eq\u0DF1\x03q\x03q\x07q\u0DF6\nq\fq\x0Eq\u0DF9\vq\x03q\x03q\x07" +
		"q\u0DFD\nq\fq\x0Eq\u0E00\vq\x03q\x03q\x07q\u0E04\nq\fq\x0Eq\u0E07\vq\x07" +
		"q\u0E09\nq\fq\x0Eq\u0E0C\vq\x03r\x03r\x06r\u0E10\nr\rr\x0Er\u0E11\x03" +
		"r\x03r\x07r\u0E16\nr\fr\x0Er\u0E19\vr\x03r\x03r\x07r\u0E1D\nr\fr\x0Er" +
		"\u0E20\vr\x03r\x03r\x07r\u0E24\nr\fr\x0Er\u0E27\vr\x07r\u0E29\nr\fr\x0E" +
		"r\u0E2C\vr\x03s\x03s\x06s\u0E30\ns\rs\x0Es\u0E31\x03s\x03s\x07s\u0E36" +
		"\ns\fs\x0Es\u0E39\vs\x03s\x03s\x07s\u0E3D\ns\fs\x0Es\u0E40\vs\x03s\x03" +
		"s\x07s\u0E44\ns\fs\x0Es\u0E47\vs\x03s\x07s\u0E4A\ns\fs\x0Es\u0E4D\vs\x03" +
		"s\x07s\u0E50\ns\fs\x0Es\u0E53\vs\x07s\u0E55\ns\fs\x0Es\u0E58\vs\x03t\x03" +
		"t\x06t\u0E5C\nt\rt\x0Et\u0E5D\x03t\x03t\x07t\u0E62\nt\ft\x0Et\u0E65\v" +
		"t\x03t\x03t\x07t\u0E69\nt\ft\x0Et\u0E6C\vt\x03t\x03t\x07t\u0E70\nt\ft" +
		"\x0Et\u0E73\vt\x07t\u0E75\nt\ft\x0Et\u0E78\vt\x03u\x03u\x06u\u0E7C\nu" +
		"\ru\x0Eu\u0E7D\x03u\x03u\x07u\u0E82\nu\fu\x0Eu\u0E85\vu\x03u\x03u\x07" +
		"u\u0E89\nu\fu\x0Eu\u0E8C\vu\x07u\u0E8E\nu\fu\x0Eu\u0E91\vu\x03u\x03u\x03" +
		"v\x03v\x06v\u0E97\nv\rv\x0Ev\u0E98\x03v\x03v\x07v\u0E9D\nv\fv\x0Ev\u0EA0" +
		"\vv\x03v\x03v\x07v\u0EA4\nv\fv\x0Ev\u0EA7\vv\x07v\u0EA9\nv\fv\x0Ev\u0EAC" +
		"\vv\x03v\x03v\x03w\x03w\x06w\u0EB2\nw\rw\x0Ew\u0EB3\x03w\x03w\x07w\u0EB8" +
		"\nw\fw\x0Ew\u0EBB\vw\x03w\x03w\x07w\u0EBF\nw\fw\x0Ew\u0EC2\vw\x07w\u0EC4" +
		"\nw\fw\x0Ew\u0EC7\vw\x03w\x03w\x03x\x03x\x06x\u0ECD\nx\rx\x0Ex\u0ECE\x05" +
		"x\u0ED1\nx\x03x\x03x\x03x\x06x\u0ED6\nx\rx\x0Ex\u0ED7\x05x\u0EDA\nx\x03" +
		"x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x05x\u0EE8\n" +
		"x\x03y\x03y\x07y\u0EEC\ny\fy\x0Ey\u0EEF\vy\x03y\x07y\u0EF2\ny\fy\x0Ey" +
		"\u0EF5\vy\x03z\x03z\x06z\u0EF9\nz\rz\x0Ez\u0EFA\x03z\x03z\x05z\u0EFF\n" +
		"z\x05z\u0F01\nz\x03z\x06z\u0F04\nz\rz\x0Ez\u0F05\x03z\x03z\x06z\u0F0A" +
		"\nz\rz\x0Ez\u0F0B\x03z\x03z\x05z\u0F10\nz\x03z\x06z\u0F13\nz\rz\x0Ez\u0F14" +
		"\x03z\x03z\x07z\u0F19\nz\fz\x0Ez\u0F1C\vz\x03z\x03z\x03{\x03{\x03|\x03" +
		"|\x06|\u0F24\n|\r|\x0E|\u0F25\x05|\u0F28\n|\x03|\x03|\x03|\x06|\u0F2D" +
		"\n|\r|\x0E|\u0F2E\x05|\u0F31\n|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x06" +
		"|\u0F3A\n|\r|\x0E|\u0F3B\x03|\x03|\x05|\u0F40\n|\x03|\x03|\x06|\u0F44" +
		"\n|\r|\x0E|\u0F45\x03|\x03|\x05|\u0F4A\n|\x03|\x03|\x06|\u0F4E\n|\r|\x0E" +
		"|\u0F4F\x03|\x03|\x06|\u0F54\n|\r|\x0E|\u0F55\x05|\u0F58\n|\x03|\x03|" +
		"\x03|\x03|\x05|\u0F5E\n|\x03}\x03}\x06}\u0F62\n}\r}\x0E}\u0F63\x03}\x03" +
		"}\x06}\u0F68\n}\r}\x0E}\u0F69\x03}\x03}\x06}\u0F6E\n}\r}\x0E}\u0F6F\x03" +
		"}\x03}\x05}\u0F74\n}\x03~\x03~\x03\x7F\x03\x7F\x03\x80\x03\x80\x06\x80" +
		"\u0F7C\n\x80\r\x80\x0E\x80\u0F7D\x03\x80\x03\x80\x05\x80\u0F82\n\x80\x03" +
		"\x80\x03\x80\x06\x80\u0F86\n\x80\r\x80\x0E\x80\u0F87\x03\x80\x03\x80\x05" +
		"\x80\u0F8C\n\x80\x05\x80\u0F8E\n\x80\x03\x80\x06\x80\u0F91\n\x80\r\x80" +
		"\x0E\x80\u0F92\x03\x80\x03\x80\x06\x80\u0F97\n\x80\r\x80\x0E\x80\u0F98" +
		"\x03\x80\x03\x80\x07\x80\u0F9D\n\x80\f\x80\x0E\x80\u0FA0\v\x80\x03\x81" +
		"\x03\x81\x06\x81\u0FA4\n\x81\r\x81\x0E\x81\u0FA5\x03\x81\x03\x81\x05\x81" +
		"\u0FAA\n\x81\x03\x82\x03\x82\x03\x82\x06\x82\u0FAF\n\x82\r\x82\x0E\x82" +
		"\u0FB0\x03\x82\x03\x82\x03\x82\x03\x82\x06\x82\u0FB7\n\x82\r\x82\x0E\x82" +
		"\u0FB8\x03\x82\x03\x82\x05\x82\u0FBD\n\x82\x03\x83\x03\x83\x06\x83\u0FC1" +
		"\n\x83\r\x83\x0E\x83\u0FC2\x03\x83\x03\x83\x03\x84\x03\x84\x03\x85\x03" +
		"\x85\x03\x86\x03\x86\x03\x87\x03\x87\x06\x87\u0FCF\n\x87\r\x87\x0E\x87" +
		"\u0FD0\x03\x87\x03\x87\x06\x87\u0FD5\n\x87\r\x87\x0E\x87\u0FD6\x03\x87" +
		"\x03\x87\x07\x87\u0FDB\n\x87\f\x87\x0E\x87\u0FDE\v\x87\x03\x87\x06\x87" +
		"\u0FE1\n\x87\r\x87\x0E\x87\u0FE2\x03\x87\x03\x87\x05\x87\u0FE7\n\x87\x03" +
		"\x88\x03\x88\x06\x88\u0FEB\n\x88\r\x88\x0E\x88\u0FEC\x03\x88\x03\x88\x06" +
		"\x88\u0FF1\n\x88\r\x88\x0E\x88\u0FF2\x05\x88\u0FF5\n\x88\x03\x88\x03\x88" +
		"\x06\x88\u0FF9\n\x88\r\x88\x0E\x88\u0FFA\x03\x88\x03\x88\x07\x88\u0FFF" +
		"\n\x88\f\x88\x0E\x88\u1002\v\x88\x03\x89\x03\x89\x03\x8A\x03\x8A\x06\x8A" +
		"\u1008\n\x8A\r\x8A\x0E\x8A\u1009\x03\x8A\x03\x8A\x06\x8A\u100E\n\x8A\r" +
		"\x8A\x0E\x8A\u100F\x05\x8A\u1012\n\x8A\x03\x8A\x03\x8A\x06\x8A\u1016\n" +
		"\x8A\r\x8A\x0E\x8A\u1017\x05\x8A\u101A\n\x8A\x03\x8A\x03\x8A\x06\x8A\u101E" +
		"\n\x8A\r\x8A\x0E\x8A\u101F\x03\x8A\x03\x8A\x07\x8A\u1024\n\x8A\f\x8A\x0E" +
		"\x8A\u1027\v\x8A\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x06\x8C\u102D\n\x8C\r" +
		"\x8C\x0E\x8C\u102E\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x06\x8C\u1035\n\x8C" +
		"\r\x8C\x0E\x8C\u1036\x03\x8C\x03\x8C\x06\x8C\u103B\n\x8C\r\x8C\x0E\x8C" +
		"\u103C\x03\x8C\x03\x8C\x06\x8C\u1041\n\x8C\r\x8C\x0E\x8C\u1042\x03\x8C" +
		"\x03\x8C\x06\x8C\u1047\n\x8C\r\x8C\x0E\x8C\u1048\x03\x8C\x03\x8C\x06\x8C" +
		"\u104D\n\x8C\r\x8C\x0E\x8C\u104E\x03\x8C\x03\x8C\x06\x8C\u1053\n\x8C\r" +
		"\x8C\x0E\x8C\u1054\x05\x8C\u1057\n\x8C\x03\x8C\x03\x8C\x05\x8C\u105B\n" +
		"\x8C\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x90\x03\x90\x07" +
		"\x90\u1065\n\x90\f\x90\x0E\x90\u1068\v\x90\x03\x90\x07\x90\u106B\n\x90" +
		"\f\x90\x0E\x90\u106E\v\x90\x03\x91\x03\x91\x06\x91\u1072\n\x91\r\x91\x0E" +
		"\x91\u1073\x03\x91\x03\x91\x05\x91\u1078\n\x91\x03\x91\x06\x91\u107B\n" +
		"\x91\r\x91\x0E\x91\u107C\x03\x91\x03\x91\x07\x91\u1081\n\x91\f\x91\x0E" +
		"\x91\u1084\v\x91\x03\x91\x03\x91\x03\x92\x03\x92\x06\x92\u108A\n\x92\r" +
		"\x92\x0E\x92\u108B\x03\x92\x03\x92\x06\x92\u1090\n\x92\r\x92\x0E\x92\u1091" +
		"\x05\x92\u1094\n\x92\x03\x92\x03\x92\x06\x92\u1098\n\x92\r\x92\x0E\x92" +
		"\u1099\x05\x92\u109C\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x06\x92\u10A2" +
		"\n\x92\r\x92\x0E\x92\u10A3\x03\x92\x03\x92\x06\x92\u10A8\n\x92\r\x92\x0E" +
		"\x92\u10A9\x03\x92\x03\x92\x06\x92\u10AE\n\x92\r\x92\x0E\x92\u10AF\x05" +
		"\x92\u10B2\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x06\x92\u10B8\n\x92\r" +
		"\x92\x0E\x92\u10B9\x03\x92\x03\x92\x06\x92\u10BE\n\x92\r\x92\x0E\x92\u10BF" +
		"\x05\x92\u10C2\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x06\x92\u10C8\n\x92" +
		"\r\x92\x0E\x92\u10C9\x03\x92\x03\x92\x06\x92\u10CE\n\x92\r\x92\x0E\x92" +
		"\u10CF\x05\x92\u10D2\n\x92\x05\x92\u10D4\n\x92\x03\x92\x03\x92\x03\x92" +
		"\x06\x92\u10D9\n\x92\r\x92\x0E\x92\u10DA\x03\x92\x03\x92\x06\x92\u10DF" +
		"\n\x92\r\x92\x0E\x92\u10E0\x05\x92\u10E3\n\x92\x03\x92\x03\x92\x03\x92" +
		"\x03\x92\x06\x92\u10E9\n\x92\r\x92\x0E\x92\u10EA\x03\x92\x03\x92\x06\x92" +
		"\u10EF\n\x92\r\x92\x0E\x92\u10F0\x05\x92\u10F3\n\x92\x03\x92\x03\x92\x06" +
		"\x92\u10F7\n\x92\r\x92\x0E\x92\u10F8\x05\x92\u10FB\n\x92\x03\x92\x03\x92" +
		"\x03\x92\x03\x92\x06\x92\u1101\n\x92\r\x92\x0E\x92\u1102\x03\x92\x03\x92" +
		"\x05\x92\u1107\n\x92\x03\x92\x03\x92\x06\x92\u110B\n\x92\r\x92\x0E\x92" +
		"\u110C\x03\x92\x03\x92\x05\x92\u1111\n\x92\x03\x92\x03\x92\x03\x92\x03" +
		"\x92\x06\x92\u1117\n\x92\r\x92\x0E\x92\u1118\x03\x92\x03\x92\x06\x92\u111D" +
		"\n\x92\r\x92\x0E\x92\u111E\x05\x92\u1121\n\x92\x03\x92\x03\x92\x03\x92" +
		"\x03\x92\x06\x92\u1127\n\x92\r\x92\x0E\x92\u1128\x03\x92\x03\x92\x06\x92" +
		"\u112D\n\x92\r\x92\x0E\x92\u112E\x05\x92\u1131\n\x92\x03\x92\x03\x92\x03" +
		"\x92\x05\x92\u1136\n\x92\x03\x93\x03\x93\x06\x93\u113A\n\x93\r\x93\x0E" +
		"\x93";
	private static readonly _serializedATNSegment2: string =
		"\u113B\x03\x93\x03\x93\x05\x93\u1140\n\x93\x03\x93\x06\x93\u1143\n\x93" +
		"\r\x93\x0E\x93\u1144\x05\x93\u1147\n\x93\x03\x93\x03\x93\x06\x93\u114B" +
		"\n\x93\r\x93\x0E\x93\u114C\x03\x93\x03\x93\x06\x93\u1151\n\x93\r\x93\x0E" +
		"\x93\u1152\x03\x93\x03\x93\x05\x93\u1157\n\x93\x05\x93\u1159\n\x93\x03" +
		"\x94\x03\x94\x06\x94\u115D\n\x94\r\x94\x0E\x94\u115E\x03\x94\x03\x94\x06" +
		"\x94\u1163\n\x94\r\x94\x0E\x94\u1164\x03\x94\x03\x94\x07\x94\u1169\n\x94" +
		"\f\x94\x0E\x94\u116C\v\x94\x03\x94\x06\x94\u116F\n\x94\r\x94\x0E\x94\u1170" +
		"\x03\x94\x03\x94\x05\x94\u1175\n\x94\x03\x94\x06\x94\u1178\n\x94\r\x94" +
		"\x0E\x94\u1179\x03\x94\x03\x94\x07\x94\u117E\n\x94\f\x94\x0E\x94\u1181" +
		"\v\x94\x06\x94\u1183\n\x94\r\x94\x0E\x94\u1184\x03\x94\x07\x94\u1188\n" +
		"\x94\f\x94\x0E\x94\u118B\v\x94\x03\x94\x03\x94\x06\x94\u118F\n\x94\r\x94" +
		"\x0E\x94\u1190\x03\x94\x03\x94\x06\x94\u1195\n\x94\r\x94\x0E\x94\u1196" +
		"\x05\x94\u1199\n\x94\x03\x94\x03\x94\x05\x94\u119D\n\x94\x03\x95\x03\x95" +
		"\x03\x96\x03\x96\x03\x97\x03\x97\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A" +
		"\x03\x9A\x06\x9A\u11AB\n\x9A\r\x9A\x0E\x9A\u11AC\x03\x9A\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x06\x9A\u11B4\n\x9A\r\x9A\x0E\x9A\u11B5\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x06\x9A\u11BD\n\x9A\r\x9A\x0E\x9A\u11BE\x03\x9A" +
		"\x03\x9A\x03\x9A\x05\x9A\u11C4\n\x9A\x03\x9A\x06\x9A\u11C7\n\x9A\r\x9A" +
		"\x0E\x9A\u11C8\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x06\x9A" +
		"\u11D1\n\x9A\r\x9A\x0E\x9A\u11D2\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u11D8" +
		"\n\x9A\x03\x9A\x06\x9A\u11DB\n\x9A\r\x9A\x0E\x9A\u11DC\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x06\x9A\u11E3\n\x9A\r\x9A\x0E\x9A\u11E4\x03\x9A\x03\x9A" +
		"\x03\x9A\x03\x9A\x03\x9A\x06\x9A\u11EC\n\x9A\r\x9A\x0E\x9A\u11ED\x03\x9A" +
		"\x03\x9A\x03\x9A\x05\x9A\u11F3\n\x9A\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03" +
		"\x9C\x06\x9C\u11FA\n\x9C\r\x9C\x0E\x9C\u11FB\x03\x9C\x03\x9C\x03\x9C\x03" +
		"\x9C\x06\x9C\u1202\n\x9C\r\x9C\x0E\x9C\u1203\x03\x9C\x03\x9C\x05\x9C\u1208" +
		"\n\x9C\x03\x9D\x03\x9D\x06\x9D\u120C\n\x9D\r\x9D\x0E\x9D\u120D\x03\x9D" +
		"\x03\x9D\x06\x9D\u1212\n\x9D\r\x9D\x0E\x9D\u1213\x05\x9D\u1216\n\x9D\x03" +
		"\x9D\x03\x9D\x06\x9D\u121A\n\x9D\r\x9D\x0E\x9D\u121B\x03\x9D\x03\x9D\x05" +
		"\x9D\u1220\n\x9D\x03\x9D\x03\x9D\x06\x9D\u1224\n\x9D\r\x9D\x0E\x9D\u1225" +
		"\x03\x9D\x03\x9D\x05\x9D\u122A\n\x9D\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x06" +
		"\x9F\u1230\n\x9F\r\x9F\x0E\x9F\u1231\x05\x9F\u1234\n\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x06\x9F\u1239\n\x9F\r\x9F\x0E\x9F\u123A\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x06\x9F\u1241\n\x9F\r\x9F\x0E\x9F\u1242\x03\x9F\x03\x9F\x05\x9F" +
		"\u1247\n\x9F\x03\x9F\x03\x9F\x06\x9F\u124B\n\x9F\r\x9F\x0E\x9F\u124C\x03" +
		"\x9F\x03\x9F\x05\x9F\u1251\n\x9F\x05\x9F\u1253\n\x9F\x03\x9F\x06\x9F\u1256" +
		"\n\x9F\r\x9F\x0E\x9F\u1257\x03\x9F\x03\x9F\x07\x9F\u125C\n\x9F\f\x9F\x0E" +
		"\x9F\u125F\v\x9F\x03\x9F\x07\x9F\u1262\n\x9F\f\x9F\x0E\x9F\u1265\v\x9F" +
		"\x03\x9F\x03\x9F\x07\x9F\u1269\n\x9F\f\x9F\x0E\x9F\u126C\v\x9F\x03\x9F" +
		"\x07\x9F\u126F\n\x9F\f\x9F\x0E\x9F\u1272\v\x9F\x05\x9F\u1274\n\x9F\x03" +
		"\x9F\x03\x9F\x06\x9F\u1278\n\x9F\r\x9F\x0E\x9F\u1279\x03\x9F\x03\x9F\x06" +
		"\x9F\u127E\n\x9F\r\x9F\x0E\x9F\u127F\x03\x9F\x03\x9F\x06\x9F\u1284\n\x9F" +
		"\r\x9F\x0E\x9F\u1285\x05\x9F\u1288\n\x9F\x03\x9F\x03\x9F\x06\x9F\u128C" +
		"\n\x9F\r\x9F\x0E\x9F\u128D\x03\x9F\x03\x9F\x06\x9F\u1292\n\x9F\r\x9F\x0E" +
		"\x9F\u1293\x05\x9F\u1296\n\x9F\x05\x9F\u1298\n\x9F\x03\x9F\x03\x9F\x06" +
		"\x9F\u129C\n\x9F\r\x9F\x0E\x9F\u129D\x03\x9F\x03\x9F\x05\x9F\u12A2\n\x9F" +
		"\x03\x9F\x06\x9F\u12A5\n\x9F\r\x9F\x0E\x9F\u12A6\x03\x9F\x03\x9F\x06\x9F" +
		"\u12AB\n\x9F\r\x9F\x0E\x9F\u12AC\x03\x9F\x03\x9F\x05\x9F\u12B1\n\x9F\x03" +
		"\x9F\x06\x9F\u12B4\n\x9F\r\x9F\x0E\x9F\u12B5\x03\x9F\x03\x9F\x06\x9F\u12BA" +
		"\n\x9F\r\x9F\x0E\x9F\u12BB\x03\x9F\x03\x9F\x06\x9F\u12C0\n\x9F\r\x9F\x0E" +
		"\x9F\u12C1\x03\x9F\x03\x9F\x05\x9F\u12C6\n\x9F\x03\x9F\x06\x9F\u12C9\n" +
		"\x9F\r\x9F\x0E\x9F\u12CA\x03\x9F\x03\x9F\x06\x9F\u12CF\n\x9F\r\x9F\x0E" +
		"\x9F\u12D0\x03\x9F\x03\x9F\x06\x9F\u12D5\n\x9F\r\x9F\x0E\x9F\u12D6\x03" +
		"\x9F\x03\x9F\x05\x9F\u12DB\n\x9F\x03\x9F\x06\x9F\u12DE\n\x9F\r\x9F\x0E" +
		"\x9F\u12DF\x03\x9F\x03\x9F\x06\x9F\u12E4\n\x9F\r\x9F\x0E\x9F\u12E5\x03" +
		"\x9F\x03\x9F\x05\x9F\u12EA\n\x9F\x05\x9F\u12EC\n\x9F\x03\xA0\x03\xA0\x03" +
		"\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA5\x03" +
		"\xA5\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x06\xA7\u12FE\n\xA7\r\xA7\x0E\xA7" +
		"\u12FF\x03\xA7\x03\xA7\x05\xA7\u1304\n\xA7\x03\xA7\x06\xA7\u1307\n\xA7" +
		"\r\xA7\x0E\xA7\u1308\x05\xA7\u130B\n\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8" +
		"\x03\xA8\x06\xA8\u1312\n\xA8\r\xA8\x0E\xA8\u1313\x03\xA8\x03\xA8\x05\xA8" +
		"\u1318\n\xA8\x03\xA8\x03\xA8\x06\xA8\u131C\n\xA8\r\xA8\x0E\xA8\u131D\x03" +
		"\xA8\x03\xA8\x05\xA8\u1322\n\xA8\x03\xA8\x03\xA8\x06\xA8\u1326\n\xA8\r" +
		"\xA8\x0E\xA8\u1327\x03\xA8\x03\xA8\x05\xA8\u132C\n\xA8\x03\xA8\x03\xA8" +
		"\x06\xA8\u1330\n\xA8\r\xA8\x0E\xA8\u1331\x03\xA8\x03\xA8\x05\xA8\u1336" +
		"\n\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8" +
		"\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8" +
		"\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u134E\n\xA8\x03\xA9\x03" +
		"\xA9\x06\xA9\u1352\n\xA9\r\xA9\x0E\xA9\u1353\x03\xA9\x03\xA9\x06\xA9\u1358" +
		"\n\xA9\r\xA9\x0E\xA9\u1359\x05\xA9\u135C\n\xA9\x03\xA9\x03\xA9\x03\xAA" +
		"\x06\xAA\u1361\n\xAA\r\xAA\x0E\xAA\u1362\x03\xAB\x03\xAB\x03\xAC\x03\xAC" +
		"\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x05\xAE\u136D\n\xAE\x03\xAF\x03\xAF\x06" +
		"\xAF\u1371\n\xAF\r\xAF\x0E\xAF\u1372\x03\xAF\x03\xAF\x05\xAF\u1377\n\xAF" +
		"\x03\xAF\x03\xAF\x06\xAF\u137B\n\xAF\r\xAF\x0E\xAF\u137C\x03\xAF\x03\xAF" +
		"\x05\xAF\u1381\n\xAF\x05\xAF\u1383\n\xAF\x03\xAF\x06\xAF\u1386\n\xAF\r" +
		"\xAF\x0E\xAF\u1387\x03\xAF\x03\xAF\x07\xAF\u138C\n\xAF\f\xAF\x0E\xAF\u138F" +
		"\v\xAF\x03\xAF\x07\xAF\u1392\n\xAF\f\xAF\x0E\xAF\u1395\v\xAF\x03\xB0\x03" +
		"\xB0\x03\xB1\x03\xB1\x06\xB1\u139B\n\xB1\r\xB1\x0E\xB1\u139C\x03\xB1\x03" +
		"\xB1\x06\xB1\u13A1\n\xB1\r\xB1\x0E\xB1\u13A2\x05\xB1\u13A5\n\xB1\x03\xB1" +
		"\x03\xB1\x06\xB1\u13A9\n\xB1\r\xB1\x0E\xB1\u13AA\x03\xB1\x03\xB1\x05\xB1" +
		"\u13AF\n\xB1\x03\xB1\x06\xB1\u13B2\n\xB1\r\xB1\x0E\xB1\u13B3\x03\xB1\x03" +
		"\xB1\x06\xB1\u13B8\n\xB1\r\xB1\x0E\xB1\u13B9\x05\xB1\u13BC\n\xB1\x03\xB1" +
		"\x03\xB1\x06\xB1\u13C0\n\xB1\r\xB1\x0E\xB1\u13C1\x03\xB1\x03\xB1\x06\xB1" +
		"\u13C6\n\xB1\r\xB1\x0E\xB1\u13C7\x05\xB1\u13CA\n\xB1\x03\xB1\x03\xB1\x05" +
		"\xB1\u13CE\n\xB1\x03\xB1\x06\xB1\u13D1\n\xB1\r\xB1\x0E\xB1\u13D2\x03\xB1" +
		"\x03\xB1\x06\xB1\u13D7\n\xB1\r\xB1\x0E\xB1\u13D8\x05\xB1\u13DB\n\xB1\x03" +
		"\xB1\x03\xB1\x06\xB1\u13DF\n\xB1\r\xB1\x0E\xB1\u13E0\x05\xB1\u13E3\n\xB1" +
		"\x03\xB1\x03\xB1\x06\xB1\u13E7\n\xB1\r\xB1\x0E\xB1\u13E8\x03\xB1\x03\xB1" +
		"\x05\xB1\u13ED\n\xB1\x03\xB1\x06\xB1\u13F0\n\xB1\r\xB1\x0E\xB1\u13F1\x03" +
		"\xB1\x03\xB1\x06\xB1\u13F6\n\xB1\r\xB1\x0E\xB1\u13F7\x05\xB1\u13FA\n\xB1" +
		"\x03\xB1\x03\xB1\x06\xB1\u13FE\n\xB1\r\xB1\x0E\xB1\u13FF\x05\xB1\u1402" +
		"\n\xB1\x03\xB1\x03\xB1\x06\xB1\u1406\n\xB1\r\xB1\x0E\xB1\u1407\x03\xB1" +
		"\x03\xB1\x05\xB1\u140C\n\xB1\x03\xB2\x03\xB2\x05\xB2\u1410\n\xB2\x03\xB3" +
		"\x03\xB3\x05\xB3\u1414\n\xB3\x03\xB4\x03\xB4\x05\xB4\u1418\n\xB4\x03\xB5" +
		"\x03\xB5\x05\xB5\u141C\n\xB5\x03\xB6\x03\xB6\x06\xB6\u1420\n\xB6\r\xB6" +
		"\x0E\xB6\u1421\x03\xB6\x03\xB6\x06\xB6\u1426\n\xB6\r\xB6\x0E\xB6\u1427" +
		"\x03\xB6\x03\xB6\x05\xB6\u142C\n\xB6\x03\xB6\x03\xB6\x06\xB6\u1430\n\xB6" +
		"\r\xB6\x0E\xB6\u1431\x03\xB6\x03\xB6\x05\xB6\u1436\n\xB6\x05\xB6\u1438" +
		"\n\xB6\x03\xB6\x03\xB6\x06\xB6\u143C\n\xB6\r\xB6\x0E\xB6\u143D\x03\xB6" +
		"\x03\xB6\x07\xB6\u1442\n\xB6\f\xB6\x0E\xB6\u1445\v\xB6\x03\xB7\x03\xB7" +
		"\x03\xB8\x03\xB8\x06\xB8\u144B\n\xB8\r\xB8\x0E\xB8\u144C\x03\xB8\x03\xB8" +
		"\x06\xB8\u1451\n\xB8\r\xB8\x0E\xB8\u1452\x03\xB8\x03\xB8\x06\xB8\u1457" +
		"\n\xB8\r\xB8\x0E\xB8\u1458\x03\xB8\x03\xB8\x06\xB8\u145D\n\xB8\r\xB8\x0E" +
		"\xB8\u145E\x05\xB8\u1461\n\xB8\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x05\xB9" +
		"\u1467\n\xB9\x03\xBA\x03\xBA\x06\xBA\u146B\n\xBA\r\xBA\x0E\xBA\u146C\x03" +
		"\xBA\x03\xBA\x06\xBA\u1471\n\xBA\r\xBA\x0E\xBA\u1472\x03\xBA\x03\xBA\x05" +
		"\xBA\u1477\n\xBA\x03\xBA\x03\xBA\x06\xBA\u147B\n\xBA\r\xBA\x0E\xBA\u147C" +
		"\x03\xBA\x03\xBA\x05\xBA\u1481\n\xBA\x05\xBA\u1483\n\xBA\x03\xBA\x06\xBA" +
		"\u1486\n\xBA\r\xBA\x0E\xBA\u1487\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x06\xBB" +
		"\u148E\n\xBB\r\xBB\x0E\xBB\u148F\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x06\xBC" +
		"\u1496\n\xBC\r\xBC\x0E\xBC\u1497\x05\xBC\u149A\n\xBC\x03\xBC\x03\xBC\x06" +
		"\xBC\u149E\n\xBC\r\xBC\x0E\xBC\u149F\x03\xBC\x03\xBC\x06\xBC\u14A4\n\xBC" +
		"\r\xBC\x0E\xBC\u14A5\x05\xBC\u14A8\n\xBC\x03\xBC\x03\xBC\x07\xBC\u14AC" +
		"\n\xBC\f\xBC\x0E\xBC\u14AF\v\xBC\x03\xBC\x03\xBC\x07\xBC\u14B3\n\xBC\f" +
		"\xBC\x0E\xBC\u14B6\v\xBC\x05\xBC\u14B8\n\xBC\x03\xBC\x03\xBC\x06\xBC\u14BC" +
		"\n\xBC\r\xBC\x0E\xBC\u14BD\x05\xBC\u14C0\n\xBC\x03\xBC\x03\xBC\x06\xBC" +
		"\u14C4\n\xBC\r\xBC\x0E\xBC\u14C5\x03\xBC\x03\xBC\x06\xBC\u14CA\n\xBC\r" +
		"\xBC\x0E\xBC\u14CB\x05\xBC\u14CE\n\xBC\x03\xBC\x03\xBC\x07\xBC\u14D2\n" +
		"\xBC\f\xBC\x0E\xBC\u14D5\v\xBC\x05\xBC\u14D7\n\xBC\x03\xBC\x03\xBC\x06" +
		"\xBC\u14DB\n\xBC\r\xBC\x0E\xBC\u14DC\x05\xBC\u14DF\n\xBC\x03\xBC\x05\xBC" +
		"\u14E2\n\xBC\x03\xBC\x03\xBC\x06\xBC\u14E6\n\xBC\r\xBC\x0E\xBC\u14E7\x03" +
		"\xBC\x03\xBC\x05\xBC\u14EC\n\xBC\x03\xBC\x07\xBC\u14EF\n\xBC\f\xBC\x0E" +
		"\xBC\u14F2\v\xBC\x03\xBC\x03\xBC\x07\xBC\u14F6\n\xBC\f\xBC\x0E\xBC\u14F9" +
		"\v\xBC\x05\xBC\u14FB\n\xBC\x03\xBC\x03\xBC\x06\xBC\u14FF\n\xBC\r\xBC\x0E" +
		"\xBC\u1500\x03\xBC\x03\xBC\x06\xBC\u1505\n\xBC\r\xBC\x0E\xBC\u1506\x05" +
		"\xBC\u1509\n\xBC\x03\xBC\x03\xBC\x05\xBC\u150D\n\xBC\x05\xBC\u150F\n\xBC" +
		"\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x06\xC0" +
		"\u1519\n\xC0\r\xC0\x0E\xC0\u151A\x03\xC0\x03\xC0\x05\xC0\u151F\n\xC0\x05" +
		"\xC0\u1521\n\xC0\x03\xC0\x06\xC0\u1524\n\xC0\r\xC0\x0E\xC0\u1525\x03\xC0" +
		"\x03\xC0\x07\xC0\u152A\n\xC0\f\xC0\x0E\xC0\u152D\v\xC0\x03\xC0\x03\xC0" +
		"\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x06\xC2\u1535\n\xC2\r\xC2\x0E\xC2\u1536" +
		"\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u153D\n\xC2\r\xC2\x0E\xC2\u153E" +
		"\x03\xC2\x03\xC2\x06\xC2\u1543\n\xC2\r\xC2\x0E\xC2\u1544\x05\xC2\u1547" +
		"\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u154D\n\xC2\r\xC2\x0E\xC2" +
		"\u154E\x03\xC2\x03\xC2\x06\xC2\u1553\n\xC2\r\xC2\x0E\xC2\u1554\x05\xC2" +
		"\u1557\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06" +
		"\xC2\u1560\n\xC2\r\xC2\x0E\xC2\u1561\x03\xC2\x03\xC2\x06\xC2\u1566\n\xC2" +
		"\r\xC2\x0E\xC2\u1567\x05\xC2\u156A\n\xC2\x05\xC2\u156C\n\xC2\x03\xC2\x03" +
		"\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u1575\n\xC2\r\xC2" +
		"\x0E\xC2\u1576\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x03\xC2\x06\xC2\u1581\n\xC2\r\xC2\x0E\xC2\u1582\x03\xC2\x03\xC2\x06\xC2" +
		"\u1587\n\xC2\r\xC2\x0E\xC2\u1588\x05\xC2\u158B\n\xC2\x03\xC2\x03\xC2\x06" +
		"\xC2\u158F\n\xC2\r\xC2\x0E\xC2\u1590\x05\xC2\u1593\n\xC2\x03\xC2\x03\xC2" +
		"\x06\xC2\u1597\n\xC2\r\xC2\x0E\xC2\u1598\x05\xC2\u159B\n\xC2\x03\xC2\x03" +
		"\xC2\x03\xC2\x03\xC2\x06\xC2\u15A1\n\xC2\r\xC2\x0E\xC2\u15A2\x03\xC2\x03" +
		"\xC2\x06\xC2\u15A7\n\xC2\r\xC2\x0E\xC2\u15A8\x05\xC2\u15AB\n\xC2\x03\xC2" +
		"\x03\xC2\x06\xC2\u15AF\n\xC2\r\xC2\x0E\xC2\u15B0\x05\xC2\u15B3\n\xC2\x03" +
		"\xC2\x03\xC2\x06\xC2\u15B7\n\xC2\r\xC2\x0E\xC2\u15B8\x05\xC2\u15BB\n\xC2" +
		"\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u15C1\n\xC2\r\xC2\x0E\xC2\u15C2" +
		"\x03\xC2\x03\xC2\x06\xC2\u15C7\n\xC2\r\xC2\x0E\xC2\u15C8\x05\xC2\u15CB" +
		"\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u15D1\n\xC2\r\xC2\x0E\xC2" +
		"\u15D2\x03\xC2\x03\xC2\x06\xC2\u15D7\n\xC2\r\xC2\x0E\xC2\u15D8\x05\xC2" +
		"\u15DB\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u15E1\n\xC2\r\xC2" +
		"\x0E\xC2\u15E2\x03\xC2\x03\xC2\x05\xC2\u15E7\n\xC2\x03\xC2\x03\xC2\x06" +
		"\xC2\u15EB\n\xC2\r\xC2\x0E\xC2\u15EC\x03\xC2\x03\xC2\x03\xC2\x06\xC2\u15F2" +
		"\n\xC2\r\xC2\x0E\xC2\u15F3\x03\xC2\x03\xC2\x05\xC2\u15F8\n\xC2\x03\xC2" +
		"\x05\xC2\u15FB\n\xC2\x05\xC2\u15FD\n\xC2\x03\xC3\x03\xC3\x06\xC3\u1601" +
		"\n\xC3\r\xC3\x0E\xC3\u1602\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x06\xC4\u1609" +
		"\n\xC4\r\xC4\x0E\xC4\u160A\x03\xC4\x03\xC4\x05\xC4\u160F\n\xC4\x03\xC5" +
		"\x03\xC5\x06\xC5\u1613\n\xC5\r\xC5\x0E\xC5\u1614\x03\xC5\x03\xC5\x03\xC6" +
		"\x03\xC6\x03\xC7\x03\xC7\x05\xC7\u161D\n\xC7\x03\xC8\x03\xC8\x03\xC9\x03" +
		"\xC9\x06\xC9\u1623\n\xC9\r\xC9\x0E\xC9\u1624\x03\xC9\x03\xC9\x07\xC9\u1629" +
		"\n\xC9\f\xC9\x0E\xC9\u162C\v\xC9\x03\xC9\x03\xC9\x07\xC9\u1630\n\xC9\f" +
		"\xC9\x0E\xC9\u1633\v\xC9\x03\xC9\x07\xC9\u1636\n\xC9\f\xC9\x0E\xC9\u1639" +
		"\v\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA" +
		"\x05\xCA\u1643\n\xCA\x03\xCB\x03\xCB\x07\xCB\u1647\n\xCB\f\xCB\x0E\xCB" +
		"\u164A\v\xCB\x03\xCB\x03\xCB\x07\xCB\u164E\n\xCB\f\xCB\x0E\xCB\u1651\v" +
		"\xCB\x03\xCB\x03\xCB\x07\xCB\u1655\n\xCB\f\xCB\x0E\xCB\u1658\v\xCB\x03" +
		"\xCB\x05\xCB\u165B\n\xCB\x03\xCB\x07\xCB\u165E\n\xCB\f\xCB\x0E\xCB\u1661" +
		"\v\xCB\x03\xCB\x05\xCB\u1664\n\xCB\x03\xCB\x07\xCB\u1667\n\xCB\f\xCB\x0E" +
		"\xCB\u166A\v\xCB\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x06\xCD" +
		"\u1672\n\xCD\r\xCD\x0E\xCD\u1673\x05\xCD\u1676\n\xCD\x03\xCD\x03\xCD\x06" +
		"\xCD\u167A\n\xCD\r\xCD\x0E\xCD\u167B\x03\xCD\x03\xCD\x05\xCD\u1680\n\xCD" +
		"\x03\xCE\x03\xCE\x06\xCE\u1684\n\xCE\r\xCE\x0E\xCE\u1685\x05\xCE\u1688" +
		"\n\xCE\x03\xCE\x03\xCE\x06\xCE\u168C\n\xCE\r\xCE\x0E\xCE\u168D\x03\xCE" +
		"\x03\xCE\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x07\xD0\u1696\n\xD0\f\xD0\x0E" +
		"\xD0\u1699\v\xD0\x03\xD0\x03\xD0\x05\xD0\u169D\n\xD0\x03\xD1\x03\xD1\x07" +
		"\xD1\u16A1\n\xD1\f\xD1\x0E\xD1\u16A4\v\xD1\x03\xD1\x03\xD1\x07\xD1\u16A8" +
		"\n\xD1\f\xD1\x0E\xD1\u16AB\v\xD1\x03\xD1\x03\xD1\x07\xD1\u16AF\n\xD1\f" +
		"\xD1\x0E\xD1\u16B2\v\xD1\x03\xD2\x03\xD2\x07\xD2\u16B6\n\xD2\f\xD2\x0E" +
		"\xD2\u16B9\v\xD2\x03\xD2\x03\xD2\x07\xD2\u16BD\n\xD2\f\xD2\x0E\xD2\u16C0" +
		"\v\xD2\x03\xD2\x03\xD2\x07\xD2\u16C4\n\xD2\f\xD2\x0E\xD2\u16C7\v\xD2\x03" +
		"\xD3\x03\xD3\x07\xD3\u16CB\n\xD3\f\xD3\x0E\xD3\u16CE\v\xD3\x03\xD3\x03" +
		"\xD3\x07\xD3\u16D2\n\xD3\f\xD3\x0E\xD3\u16D5\v\xD3\x03\xD3\x03\xD3\x07" +
		"\xD3\u16D9\n\xD3\f\xD3\x0E\xD3\u16DC\v\xD3\x03\xD4\x03\xD4\x07\xD4\u16E0" +
		"\n\xD4\f\xD4\x0E\xD4\u16E3\v\xD4\x03\xD4\x03\xD4\x07\xD4\u16E7\n\xD4\f" +
		"\xD4\x0E\xD4\u16EA\v\xD4\x03\xD4\x03\xD4\x07\xD4\u16EE\n\xD4\f\xD4\x0E" +
		"\xD4\u16F1\v\xD4\x03\xD5\x03\xD5\x07\xD5\u16F5\n\xD5\f\xD5\x0E\xD5\u16F8" +
		"\v\xD5\x03\xD5\x03\xD5\x07\xD5\u16FC\n\xD5\f\xD5\x0E\xD5\u16FF\v\xD5\x03" +
		"\xD5\x03\xD5\x07\xD5\u1703\n\xD5\f\xD5\x0E\xD5\u1706\v\xD5\x03\xD6\x03" +
		"\xD6\x07\xD6\u170A\n\xD6\f\xD6\x0E\xD6\u170D\v\xD6\x03\xD6\x03\xD6\x07" +
		"\xD6\u1711\n\xD6\f\xD6\x0E\xD6\u1714\v\xD6\x03\xD6\x05\xD6\u1717\n\xD6" +
		"\x03\xD6\x07\xD6\u171A\n\xD6\f\xD6\x0E\xD6\u171D\v\xD6\x03\xD6\x05\xD6" +
		"\u1720\n\xD6\x03\xD7\x03\xD7\x06\xD7\u1724\n\xD7\r\xD7\x0E\xD7\u1725\x03" +
		"\xD7\x03\xD7\x06\xD7\u172A\n\xD7\r\xD7\x0E\xD7\u172B\x05\xD7\u172E\n\xD7" +
		"\x03\xD7\x03\xD7\x07\xD7\u1732\n\xD7\f\xD7\x0E\xD7\u1735\v\xD7\x03\xD7" +
		"\x03\xD7\x03\xD8\x03\xD8\x06\xD8\u173B\n\xD8\r\xD8\x0E\xD8\u173C\x03\xD8" +
		"\x03\xD8\x07\xD8\u1741\n\xD8\f\xD8\x0E\xD8\u1744\v\xD8\x03\xD8\x03\xD8" +
		"\x07\xD8\u1748\n\xD8\f\xD8\x0E\xD8\u174B\v\xD8\x03\xD8\x05\xD8\u174E\n" +
		"\xD8\x03\xD8\x05\xD8\u1751\n\xD8\x03\xD9\x03\xD9\x06\xD9\u1755\n\xD9\r" +
		"\xD9\x0E\xD9\u1756\x03\xD9\x03\xD9\x07\xD9\u175B\n\xD9\f\xD9\x0E\xD9\u175E" +
		"\v\xD9\x03\xD9\x03\xD9\x07\xD9\u1762\n\xD9\f\xD9\x0E\xD9\u1765\v\xD9\x03" +
		"\xD9\x05\xD9\u1768\n\xD9\x03\xD9\x07\xD9\u176B\n\xD9\f\xD9\x0E\xD9\u176E" +
		"\v\xD9\x03\xD9\x05\xD9\u1771\n\xD9\x03\xD9\x07\xD9\u1774\n\xD9\f\xD9\x0E" +
		"\xD9\u1777\v\xD9\x03\xD9\x05\xD9\u177A\n\xD9\x03\xD9\x07\xD9\u177D\n\xD9" +
		"\f\xD9\x0E\xD9\u1780\v\xD9\x03\xDA\x03\xDA\x06\xDA\u1784\n\xDA\r\xDA\x0E" +
		"\xDA\u1785\x03\xDA\x03\xDA\x07\xDA\u178A\n\xDA\f\xDA\x0E\xDA\u178D\v\xDA" +
		"\x03\xDA\x03\xDA\x07\xDA\u1791\n\xDA\f\xDA\x0E\xDA\u1794\v\xDA\x03\xDA" +
		"\x05\xDA\u1797\n\xDA\x03\xDA\x05\xDA\u179A\n\xDA\x03\xDB\x03\xDB\x07\xDB" +
		"\u179E\n\xDB\f\xDB\x0E\xDB\u17A1\v\xDB\x03\xDB\x03\xDB\x07\xDB\u17A5\n" +
		"\xDB\f\xDB\x0E\xDB\u17A8\v\xDB\x03\xDB\x03\xDB\x06\xDB\u17AC\n\xDB\r\xDB" +
		"\x0E\xDB\u17AD\x03\xDB\x03\xDB\x05\xDB\u17B2\n\xDB\x03\xDB\x07\xDB\u17B5" +
		"\n\xDB\f\xDB\x0E\xDB\u17B8\v\xDB\x03\xDB\x03\xDB\x05\xDB\u17BC\n\xDB\x03" +
		"\xDC\x03\xDC\x03\xDD\x03\xDD\x06\xDD\u17C2\n\xDD\r\xDD\x0E\xDD\u17C3\x05" +
		"\xDD\u17C6\n\xDD\x03\xDD\x03\xDD\x06\xDD\u17CA\n\xDD\r\xDD\x0E\xDD\u17CB" +
		"\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x07\xDE\u17D2\n\xDE\f\xDE\x0E\xDE\u17D5" +
		"\v\xDE\x03\xDE\x03\xDE\x07\xDE\u17D9\n\xDE\f\xDE\x0E\xDE\u17DC\v\xDE\x03" +
		"\xDE\x03\xDE\x06\xDE\u17E0\n\xDE\r\xDE\x0E\xDE\u17E1\x03\xDE\x03\xDE\x05" +
		"\xDE\u17E6\n\xDE\x03\xDE\x06\xDE\u17E9\n\xDE\r\xDE\x0E\xDE\u17EA\x03\xDE" +
		"\x03\xDE\x05\xDE\u17EF\n\xDE\x03\xDE\x06\xDE\u17F2\n\xDE\r\xDE\x0E\xDE" +
		"\u17F3\x03\xDE\x03\xDE\x05\xDE\u17F8\n\xDE\x03\xDE\x07\xDE\u17FB\n\xDE" +
		"\f\xDE\x0E\xDE\u17FE\v\xDE\x03\xDE\x03\xDE\x05\xDE\u1802\n\xDE\x03\xDF" +
		"\x03\xDF\x06\xDF\u1806\n\xDF\r\xDF\x0E\xDF\u1807\x03\xDF\x03\xDF\x05\xDF" +
		"\u180C\n\xDF\x03\xDF\x06\xDF\u180F\n\xDF\r\xDF\x0E\xDF\u1810\x03\xDF\x03" +
		"\xDF\x06\xDF\u1815\n\xDF\r\xDF\x0E\xDF\u1816\x03\xDF\x03\xDF\x03\xE0\x03" +
		"\xE0\x03\xE1\x03\xE1\x03\xE2\x03\xE2\x06\xE2\u1821\n\xE2\r\xE2\x0E\xE2" +
		"\u1822\x05\xE2\u1825\n\xE2\x03\xE2\x03\xE2\x06\xE2\u1829\n\xE2\r\xE2\x0E" +
		"\xE2\u182A\x05\xE2\u182D\n\xE2\x03\xE2\x03\xE2\x06\xE2\u1831\n\xE2\r\xE2" +
		"\x0E\xE2\u1832\x03\xE2\x03\xE2\x05\xE2\u1837\n\xE2\x03\xE2\x06\xE2\u183A" +
		"\n\xE2\r\xE2\x0E\xE2\u183B\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x03\xE4\x03" +
		"\xE4\x06\xE4\u1844\n\xE4\r\xE4\x0E\xE4\u1845\x03\xE4\x03\xE4\x05\xE4\u184A" +
		"\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x07\xE6\u1852\n" +
		"\xE6\f\xE6\x0E\xE6\u1855\v\xE6\x03\xE6\x03\xE6\x07\xE6\u1859\n\xE6\f\xE6" +
		"\x0E\xE6\u185C\v\xE6\x03\xE6\x03\xE6\x07\xE6\u1860\n\xE6\f\xE6\x0E\xE6" +
		"\u1863\v\xE6\x06\xE6\u1865\n\xE6\r\xE6\x0E\xE6\u1866\x03\xE6\x03\xE6\x05" +
		"\xE6\u186B\n\xE6\x03\xE7\x03\xE7\x06\xE7\u186F\n\xE7\r\xE7\x0E\xE7\u1870" +
		"\x03\xE7\x03\xE7\x06\xE7\u1875\n\xE7\r\xE7\x0E\xE7\u1876\x05\xE7\u1879" +
		"\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x06\xE7\u187F\n\xE7\r\xE7\x0E\xE7" +
		"\u1880\x03\xE7\x03\xE7\x06\xE7\u1885\n\xE7\r\xE7\x0E\xE7\u1886\x05\xE7" +
		"\u1889\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x06\xE7\u188F\n\xE7\r\xE7" +
		"\x0E\xE7\u1890\x03\xE7\x03\xE7\x06\xE7\u1895\n\xE7\r\xE7\x0E\xE7\u1896" +
		"\x05\xE7\u1899\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03" +
		"\xE7\x03\xE7\x03\xE7\x06\xE7\u18A4\n\xE7\r\xE7\x0E\xE7\u18A5\x03\xE7\x03" +
		"\xE7\x06\xE7\u18AA\n\xE7\r\xE7\x0E\xE7\u18AB\x05\xE7\u18AE\n\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x03\xE7\x06\xE7\u18B4\n\xE7\r\xE7\x0E\xE7\u18B5\x03\xE7" +
		"\x03\xE7\x06\xE7\u18BA\n\xE7\r\xE7\x0E\xE7\u18BB\x05\xE7\u18BE\n\xE7\x03" +
		"\xE7\x03\xE7\x03\xE7\x03\xE7\x06\xE7\u18C4\n\xE7\r\xE7\x0E\xE7\u18C5\x03" +
		"\xE7\x03\xE7\x06\xE7\u18CA\n\xE7\r\xE7\x0E\xE7\u18CB\x03\xE7\x03\xE7\x06" +
		"\xE7\u18D0\n\xE7\r\xE7\x0E\xE7\u18D1\x05\xE7\u18D4\n\xE7\x03\xE7\x03\xE7" +
		"\x05\xE7\u18D8\n\xE7\x03\xE8\x03\xE8\x06\xE8\u18DC\n\xE8\r\xE8\x0E\xE8" +
		"\u18DD\x03\xE8\x03\xE8\x06\xE8\u18E2\n\xE8\r\xE8\x0E\xE8\u18E3\x03\xE8" +
		"\x03\xE8\x07\xE8\u18E8\n\xE8\f\xE8\x0E\xE8\u18EB\v\xE8\x03\xE9\x03\xE9" +
		"\x06\xE9\u18EF\n\xE9\r\xE9\x0E\xE9\u18F0\x03\xE9\x03\xE9\x06\xE9\u18F5" +
		"\n\xE9\r\xE9\x0E\xE9\u18F6\x05\xE9\u18F9\n\xE9\x03\xE9\x03\xE9\x06\xE9" +
		"\u18FD\n\xE9\r\xE9\x0E\xE9\u18FE\x05\xE9\u1901\n\xE9\x03\xE9\x03\xE9\x03" +
		"\xEA\x03\xEA\x03\xEA\x06\xEA\u1908\n\xEA\r\xEA\x0E\xEA\u1909\x05\xEA\u190C" +
		"\n\xEA\x03\xEA\x03\xEA\x06\xEA\u1910\n\xEA\r\xEA\x0E\xEA\u1911\x03\xEA" +
		"\x03\xEA\x06\xEA\u1916\n\xEA\r\xEA\x0E\xEA\u1917\x03\xEA\x03\xEA\x03\xEA" +
		"\x05\xEA\u191D\n\xEA\x03\xEB\x03\xEB\x03\xEC\x03\xEC\x03\xED\x03\xED\x06" +
		"\xED\u1925\n\xED\r\xED\x0E\xED\u1926\x03\xED\x03\xED\x06\xED\u192B\n\xED" +
		"\r\xED\x0E\xED\u192C\x03\xED\x03\xED\x06\xED\u1931\n\xED\r\xED\x0E\xED" +
		"\u1932\x05\xED\u1935\n\xED\x03\xED\x03\xED\x07\xED\u1939\n\xED\f\xED\x0E" +
		"\xED\u193C\v\xED\x06\xED\u193E\n\xED\r\xED\x0E\xED\u193F\x03\xEE\x03\xEE" +
		"\x03\xEF\x03\xEF\x06\xEF\u1946\n\xEF\r\xEF\x0E\xEF\u1947\x03\xEF\x03\xEF" +
		"\x06\xEF\u194C\n\xEF\r\xEF\x0E\xEF\u194D\x03\xEF\x03\xEF\x05\xEF\u1952" +
		"\n\xEF\x03\xF0\x03\xF0\x06\xF0\u1956\n\xF0\r\xF0\x0E\xF0\u1957\x03\xF0" +
		"\x03\xF0\x06\xF0\u195C\n\xF0\r\xF0\x0E\xF0\u195D\x05\xF0\u1960\n\xF0\x03" +
		"\xF0\x06\xF0\u1963\n\xF0\r\xF0\x0E\xF0\u1964\x03\xF1\x06\xF1\u1968\n\xF1" +
		"\r\xF1\x0E\xF1\u1969\x03\xF1\x05\xF1\u196D\n\xF1\x03\xF2\x03\xF2\x06\xF2" +
		"\u1971\n\xF2\r\xF2\x0E\xF2\u1972\x06\xF2\u1975\n\xF2\r\xF2\x0E\xF2\u1976" +
		"\x03\xF2\x03\xF2\x06\xF2\u197B\n\xF2\r\xF2\x0E\xF2\u197C\x05\xF2\u197F" +
		"\n\xF2\x03\xF2\x03\xF2\x06\xF2\u1983\n\xF2\r\xF2\x0E\xF2\u1984\x06\xF2" +
		"\u1987\n\xF2\r\xF2\x0E\xF2\u1988\x03\xF3\x03\xF3\x06\xF3\u198D\n\xF3\r" +
		"\xF3\x0E\xF3\u198E\x03\xF3\x03\xF3\x07\xF3\u1993\n\xF3\f\xF3\x0E\xF3\u1996" +
		"\v\xF3\x03\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x06\xF6\u199E\n" +
		"\xF6\r\xF6\x0E\xF6\u199F\x03\xF6\x03\xF6\x06\xF6\u19A4\n\xF6\r\xF6\x0E" +
		"\xF6\u19A5\x03\xF6\x03\xF6\x06\xF6\u19AA\n\xF6\r\xF6\x0E\xF6\u19AB\x05" +
		"\xF6\u19AE\n\xF6\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x03\xF7\x03\xF7\x07\xF7\u19B9\n\xF7\f\xF7\x0E";
	private static readonly _serializedATNSegment3: string =
		"\xF7\u19BC\v\xF7\x06\xF7\u19BE\n\xF7\r\xF7\x0E\xF7\u19BF\x05\xF7\u19C2" +
		"\n\xF7\x03\xF8\x03\xF8\x06\xF8\u19C6\n\xF8\r\xF8\x0E\xF8\u19C7\x03\xF8" +
		"\x03\xF8\x06\xF8\u19CC\n\xF8\r\xF8\x0E\xF8\u19CD\x03\xF8\x03\xF8\x05\xF8" +
		"\u19D2\n\xF8\x03\xF8\x03\xF8\x06\xF8\u19D6\n\xF8\r\xF8\x0E\xF8\u19D7\x03" +
		"\xF8\x03\xF8\x06\xF8\u19DC\n\xF8\r\xF8\x0E\xF8\u19DD\x03\xF8\x03\xF8\x06" +
		"\xF8\u19E2\n\xF8\r\xF8\x0E\xF8\u19E3\x05\xF8\u19E6\n\xF8\x03\xF9\x03\xF9" +
		"\x03\xFA\x03\xFA\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x06\xFC\u19F0\n\xFC\r" +
		"\xFC\x0E\xFC\u19F1\x03\xFC\x03\xFC\x07\xFC\u19F6\n\xFC\f\xFC\x0E\xFC\u19F9" +
		"\v\xFC\x03\xFC\x03\xFC\x06\xFC\u19FD\n\xFC\r\xFC\x0E\xFC\u19FE\x05\xFC" +
		"\u1A01\n\xFC\x03\xFC\x03\xFC\x06\xFC\u1A05\n\xFC\r\xFC\x0E\xFC\u1A06\x05" +
		"\xFC\u1A09\n\xFC\x03\xFC\x03\xFC\x06\xFC\u1A0D\n\xFC\r\xFC\x0E\xFC\u1A0E" +
		"\x03\xFC\x03\xFC\x05\xFC\u1A13\n\xFC\x03\xFC\x03\xFC\x06\xFC\u1A17\n\xFC" +
		"\r\xFC\x0E\xFC\u1A18\x03\xFC\x03\xFC\x05\xFC\u1A1D\n\xFC\x05\xFC\u1A1F" +
		"\n\xFC\x03\xFC\x07\xFC\u1A22\n\xFC\f\xFC\x0E\xFC\u1A25\v\xFC\x03\xFD\x03" +
		"\xFD\x06\xFD\u1A29\n\xFD\r\xFD\x0E\xFD\u1A2A\x03\xFD\x03\xFD\x06\xFD\u1A2F" +
		"\n\xFD\r\xFD\x0E\xFD\u1A30\x05\xFD\u1A33\n\xFD\x03\xFD\x03\xFD\x06\xFD" +
		"\u1A37\n\xFD\r\xFD\x0E\xFD\u1A38\x05\xFD\u1A3B\n\xFD\x03\xFD\x03\xFD\x03" +
		"\xFE\x03\xFE\x06\xFE\u1A41\n\xFE\r\xFE\x0E\xFE\u1A42\x03\xFE\x03\xFE\x06" +
		"\xFE\u1A47\n\xFE\r\xFE\x0E\xFE\u1A48\x05\xFE\u1A4B\n\xFE\x03\xFE\x03\xFE" +
		"\x06\xFE\u1A4F\n\xFE\r\xFE\x0E\xFE\u1A50\x05\xFE\u1A53\n\xFE\x03\xFE\x03" +
		"\xFE\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x03\u0102" +
		"\x03\u0102\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0105\x03\u0105" +
		"\x03\u0106\x03\u0106\x03\u0107\x03\u0107\x07\u0107\u1A69\n\u0107\f\u0107" +
		"\x0E\u0107\u1A6C\v\u0107\x03\u0107\x03\u0107\x07\u0107\u1A70\n\u0107\f" +
		"\u0107\x0E\u0107\u1A73\v\u0107\x03\u0107\x03\u0107\x07\u0107\u1A77\n\u0107" +
		"\f\u0107\x0E\u0107\u1A7A\v\u0107\x07\u0107\u1A7C\n\u0107\f\u0107\x0E\u0107" +
		"\u1A7F\v\u0107\x03\u0108\x03\u0108\x06\u0108\u1A83\n\u0108\r\u0108\x0E" +
		"\u0108\u1A84\x03\u0108\x03\u0108\x06\u0108\u1A89\n\u0108\r\u0108\x0E\u0108" +
		"\u1A8A\x05\u0108\u1A8D\n\u0108\x03\u0108\x03\u0108\x07\u0108\u1A91\n\u0108" +
		"\f\u0108\x0E\u0108\u1A94\v\u0108\x03\u0108\x03\u0108\x07\u0108\u1A98\n" +
		"\u0108\f\u0108\x0E\u0108\u1A9B\v\u0108\x03\u0108\x03\u0108\x07\u0108\u1A9F" +
		"\n\u0108\f\u0108\x0E\u0108\u1AA2\v\u0108\x05\u0108\u1AA4\n\u0108\x03\u0108" +
		"\x03\u0108\x07\u0108\u1AA8\n\u0108\f\u0108\x0E\u0108\u1AAB\v\u0108\x05" +
		"\u0108\u1AAD\n\u0108\x03\u0108\x03\u0108\x07\u0108\u1AB1\n\u0108\f\u0108" +
		"\x0E\u0108\u1AB4\v\u0108\x05\u0108\u1AB6\n\u0108\x03\u0108\x03\u0108\x07" +
		"\u0108\u1ABA\n\u0108\f\u0108\x0E\u0108\u1ABD\v\u0108\x05\u0108\u1ABF\n" +
		"\u0108\x03\u0108\x03\u0108\x07\u0108\u1AC3\n\u0108\f\u0108\x0E\u0108\u1AC6" +
		"\v\u0108\x05\u0108\u1AC8\n\u0108\x03\u0108\x03\u0108\x07\u0108\u1ACC\n" +
		"\u0108\f\u0108\x0E\u0108\u1ACF\v\u0108\x05\u0108\u1AD1\n\u0108\x03\u0108" +
		"\x03\u0108\x07\u0108\u1AD5\n\u0108\f\u0108\x0E\u0108\u1AD8\v\u0108\x05" +
		"\u0108\u1ADA\n\u0108\x03\u0108\x03\u0108\x07\u0108\u1ADE\n\u0108\f\u0108" +
		"\x0E\u0108\u1AE1\v\u0108\x07\u0108\u1AE3\n\u0108\f\u0108\x0E\u0108\u1AE6" +
		"\v\u0108\x03\u0108\x03\u0108\x07\u0108\u1AEA\n\u0108\f\u0108\x0E\u0108" +
		"\u1AED\v\u0108\x05\u0108\u1AEF\n\u0108\x03\u0108\x03\u0108\x07\u0108\u1AF3" +
		"\n\u0108\f\u0108\x0E\u0108\u1AF6\v\u0108\x05\u0108\u1AF8\n\u0108\x03\u0108" +
		"\x03\u0108\x03\u0109\x03\u0109\x06\u0109\u1AFE\n\u0109\r\u0109\x0E\u0109" +
		"\u1AFF\x05\u0109\u1B02\n\u0109\x03\u0109\x03\u0109\x06\u0109\u1B06\n\u0109" +
		"\r\u0109\x0E\u0109\u1B07\x03\u0109\x03\u0109\x06\u0109\u1B0C\n\u0109\r" +
		"\u0109\x0E\u0109\u1B0D\x05\u0109\u1B10\n\u0109\x03\u0109\x03\u0109\x03" +
		"\u010A\x03\u010A\x03\u010B\x03\u010B\x06\u010B\u1B18\n\u010B\r\u010B\x0E" +
		"\u010B\u1B19\x05\u010B\u1B1C\n\u010B\x03\u010B\x03\u010B\x06\u010B\u1B20" +
		"\n\u010B\r\u010B\x0E\u010B\u1B21\x03\u010B\x03\u010B\x06\u010B\u1B26\n" +
		"\u010B\r\u010B\x0E\u010B\u1B27\x05\u010B\u1B2A\n\u010B\x03\u010B\x03\u010B" +
		"\x06\u010B\u1B2E\n\u010B\r\u010B\x0E\u010B\u1B2F\x05\u010B\u1B32\n\u010B" +
		"\x03\u010B\x03\u010B\x06\u010B\u1B36\n\u010B\r\u010B\x0E\u010B\u1B37\x03" +
		"\u010B\x03\u010B\x06\u010B\u1B3C\n\u010B\r\u010B\x0E\u010B\u1B3D\x05\u010B" +
		"\u1B40\n\u010B\x03\u010B\x03\u010B\x05\u010B\u1B44\n\u010B\x03\u010B\x06" +
		"\u010B\u1B47\n\u010B\r\u010B\x0E\u010B\u1B48\x03\u010B\x03\u010B\x05\u010B" +
		"\u1B4D\n\u010B\x03\u010C\x03\u010C\x03\u010C\x07\u010C\u1B52\n\u010C\f" +
		"\u010C\x0E\u010C\u1B55\v\u010C\x03\u010C\x03\u010C\x07\u010C\u1B59\n\u010C" +
		"\f\u010C\x0E\u010C\u1B5C\v\u010C\x03\u010C\x03\u010C\x07\u010C\u1B60\n" +
		"\u010C\f\u010C\x0E\u010C\u1B63\v\u010C\x03\u010C\x07\u010C\u1B66\n\u010C" +
		"\f\u010C\x0E\u010C\u1B69\v\u010C\x05\u010C\u1B6B\n\u010C\x03\u010D\x03" +
		"\u010D\x06\u010D\u1B6F\n\u010D\r\u010D\x0E\u010D\u1B70\x03\u010D\x03\u010D" +
		"\x06\u010D\u1B75\n\u010D\r\u010D\x0E\u010D\u1B76\x05\u010D\u1B79\n\u010D" +
		"\x03\u010D\x03\u010D\x06\u010D\u1B7D\n\u010D\r\u010D\x0E\u010D\u1B7E\x05" +
		"\u010D\u1B81\n\u010D\x05\u010D\u1B83\n\u010D\x03\u010D\x03\u010D\x06\u010D" +
		"\u1B87\n\u010D\r\u010D\x0E\u010D\u1B88\x03\u010D\x03\u010D\x06\u010D\u1B8D" +
		"\n\u010D\r\u010D\x0E\u010D\u1B8E\x03\u010D\x03\u010D\x06\u010D\u1B93\n" +
		"\u010D\r\u010D\x0E\u010D\u1B94\x05\u010D\u1B97\n\u010D\x03\u010D\x03\u010D" +
		"\x06\u010D\u1B9B\n\u010D\r\u010D\x0E\u010D\u1B9C\x05\u010D\u1B9F\n\u010D" +
		"\x03\u010D\x03\u010D\x05\u010D\u1BA3\n\u010D\x03\u010E\x03\u010E\x06\u010E" +
		"\u1BA7\n\u010E\r\u010E\x0E\u010E\u1BA8\x03\u010E\x03\u010E\x06\u010E\u1BAD" +
		"\n\u010E\r\u010E\x0E\u010E\u1BAE\x03\u010E\x03\u010E\x05\u010E\u1BB3\n" +
		"\u010E\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x06\u0110\u1BB9\n\u0110" +
		"\r\u0110\x0E\u0110\u1BBA\x03\u0110\x03\u0110\x06\u0110\u1BBF\n\u0110\r" +
		"\u0110\x0E\u0110\u1BC0\x03\u0110\x03\u0110\x06\u0110\u1BC5\n\u0110\r\u0110" +
		"\x0E\u0110\u1BC6\x05\u0110\u1BC9\n\u0110\x03\u0110\x03\u0110\x03\u0111" +
		"\x03\u0111\x06\u0111\u1BCF\n\u0111\r\u0111\x0E\u0111\u1BD0\x03\u0111\x03" +
		"\u0111\x06\u0111\u1BD5\n\u0111\r\u0111\x0E\u0111\u1BD6\x05\u0111\u1BD9" +
		"\n\u0111\x03\u0111\x03\u0111\x06\u0111\u1BDD\n\u0111\r\u0111\x0E\u0111" +
		"\u1BDE\x05\u0111\u1BE1\n\u0111\x03\u0111\x03\u0111\x03\u0112\x03\u0112" +
		"\x03\u0113\x03\u0113\x06\u0113\u1BE9\n\u0113\r\u0113\x0E\u0113\u1BEA\x03" +
		"\u0113\x03\u0113\x06\u0113\u1BEF\n\u0113\r\u0113\x0E\u0113\u1BF0\x05\u0113" +
		"\u1BF3\n\u0113\x05\u0113\u1BF5\n\u0113\x03\u0113\x03\u0113\x03\u0113\x06" +
		"\u0113\u1BFA\n\u0113\r\u0113\x0E\u0113\u1BFB\x03\u0113\x03\u0113\x03\u0113" +
		"\x03\u0113\x05\u0113\u1C02\n\u0113\x03\u0114\x03\u0114\x06\u0114\u1C06" +
		"\n\u0114\r\u0114\x0E\u0114\u1C07\x03\u0114\x03\u0114\x06\u0114\u1C0C\n" +
		"\u0114\r\u0114\x0E\u0114\u1C0D\x05\u0114\u1C10\n\u0114\x03\u0114\x03\u0114" +
		"\x06\u0114\u1C14\n\u0114\r\u0114\x0E\u0114\u1C15\x05\u0114\u1C18\n\u0114" +
		"\x03\u0114\x03\u0114\x03\u0115\x03\u0115\x06\u0115\u1C1E\n\u0115\r\u0115" +
		"\x0E\u0115\u1C1F\x03\u0115\x03\u0115\x06\u0115\u1C24\n\u0115\r\u0115\x0E" +
		"\u0115\u1C25\x05\u0115\u1C28\n\u0115\x03\u0115\x03\u0115\x06\u0115\u1C2C" +
		"\n\u0115\r\u0115\x0E\u0115\u1C2D\x03\u0115\x03\u0115\x06\u0115\u1C32\n" +
		"\u0115\r\u0115\x0E\u0115\u1C33\x03\u0115\x03\u0115\x06\u0115\u1C38\n\u0115" +
		"\r\u0115\x0E\u0115\u1C39\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x06\u0115" +
		"\u1C40\n\u0115\r\u0115\x0E\u0115\u1C41\x03\u0115\x03\u0115\x06\u0115\u1C46" +
		"\n\u0115\r\u0115\x0E\u0115\u1C47\x05\u0115\u1C4A\n\u0115\x03\u0115\x03" +
		"\u0115\x06\u0115\u1C4E\n\u0115\r\u0115\x0E\u0115\u1C4F\x03\u0115\x03\u0115" +
		"\x06\u0115\u1C54\n\u0115\r\u0115\x0E\u0115\u1C55\x03\u0115\x03\u0115\x03" +
		"\u0115\x05\u0115\u1C5B\n\u0115\x05\u0115\u1C5D\n\u0115\x03\u0115\x05\u0115" +
		"\u1C60\n\u0115\x03\u0116\x03\u0116\x06\u0116\u1C64\n\u0116\r\u0116\x0E" +
		"\u0116\u1C65\x03\u0116\x03\u0116\x06\u0116\u1C6A\n\u0116\r\u0116\x0E\u0116" +
		"\u1C6B\x05\u0116\u1C6E\n\u0116\x03\u0116\x03\u0116\x03\u0117\x03\u0117" +
		"\x06\u0117\u1C74\n\u0117\r\u0117\x0E\u0117\u1C75\x03\u0117\x03\u0117\x06" +
		"\u0117\u1C7A\n\u0117\r\u0117\x0E\u0117\u1C7B\x05\u0117\u1C7E\n\u0117\x03" +
		"\u0117\x03\u0117\x06\u0117\u1C82\n\u0117\r\u0117\x0E\u0117\u1C83\x03\u0117" +
		"\x03\u0117\x06\u0117\u1C88\n\u0117\r\u0117\x0E\u0117\u1C89\x05\u0117\u1C8C" +
		"\n\u0117\x03\u0117\x03\u0117\x06\u0117\u1C90\n\u0117\r\u0117\x0E\u0117" +
		"\u1C91\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0119\x03\u0119\x03" +
		"\u011A\x03\u011A\x06\u011A\u1C9C\n\u011A\r\u011A\x0E\u011A\u1C9D\x03\u011A" +
		"\x03\u011A\x06\u011A\u1CA2\n\u011A\r\u011A\x0E\u011A\u1CA3\x05\u011A\u1CA6" +
		"\n\u011A\x03\u011A\x03\u011A\x03\u011B\x03\u011B\x06\u011B\u1CAC\n\u011B" +
		"\r\u011B\x0E\u011B\u1CAD\x05\u011B\u1CB0\n\u011B\x03\u011B\x03\u011B\x03" +
		"\u011B\x06\u011B\u1CB5\n\u011B\r\u011B\x0E\u011B\u1CB6\x05\u011B\u1CB9" +
		"\n\u011B\x03\u011B\x03\u011B\x06\u011B\u1CBD\n\u011B\r\u011B\x0E\u011B" +
		"\u1CBE\x03\u011B\x03\u011B\x05\u011B\u1CC3\n\u011B\x05\u011B\u1CC5\n\u011B" +
		"\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x05\u011C\u1CCB\n\u011C\x03\u011D" +
		"\x03\u011D\x03\u011E\x03\u011E\x07\u011E\u1CD1\n\u011E\f\u011E\x0E\u011E" +
		"\u1CD4\v\u011E\x03\u011E\x03\u011E\x07\u011E\u1CD8\n\u011E\f\u011E\x0E" +
		"\u011E\u1CDB\v\u011E\x03\u011E\x03\u011E\x07\u011E\u1CDF\n\u011E\f\u011E" +
		"\x0E\u011E\u1CE2\v\u011E\x07\u011E\u1CE4\n\u011E\f\u011E\x0E\u011E\u1CE7" +
		"\v\u011E\x03\u011E\x03\u011E\x07\u011E\u1CEB\n\u011E\f\u011E\x0E\u011E" +
		"\u1CEE\v\u011E\x07\u011E\u1CF0\n\u011E\f\u011E\x0E\u011E\u1CF3\v\u011E" +
		"\x03\u011E\x03\u011E\x07\u011E\u1CF7\n\u011E\f\u011E\x0E\u011E\u1CFA\v" +
		"\u011E\x07\u011E\u1CFC\n\u011E\f\u011E\x0E\u011E\u1CFF\v\u011E\x03\u011E" +
		"\x03\u011E\x07\u011E\u1D03\n\u011E\f\u011E\x0E\u011E\u1D06\v\u011E\x07" +
		"\u011E\u1D08\n\u011E\f\u011E\x0E\u011E\u1D0B\v\u011E\x03\u011E\x03\u011E" +
		"\x07\u011E\u1D0F\n\u011E\f\u011E\x0E\u011E\u1D12\v\u011E\x05\u011E\u1D14" +
		"\n\u011E\x03\u011F\x03\u011F\x06\u011F\u1D18\n\u011F\r\u011F\x0E\u011F" +
		"\u1D19\x03\u011F\x03\u011F\x06\u011F\u1D1E\n\u011F\r\u011F\x0E\u011F\u1D1F" +
		"\x03\u011F\x03\u011F\x06\u011F\u1D24\n\u011F\r\u011F\x0E\u011F\u1D25\x05" +
		"\u011F\u1D28\n\u011F\x03\u011F\x03\u011F\x06\u011F\u1D2C\n\u011F\r\u011F" +
		"\x0E\u011F\u1D2D\x05\u011F\u1D30\n\u011F\x03\u011F\x03\u011F\x07\u011F" +
		"\u1D34\n\u011F\f\u011F\x0E\u011F\u1D37\v\u011F\x06\u011F\u1D39\n\u011F" +
		"\r\u011F\x0E\u011F\u1D3A\x03\u0120\x03\u0120\x06\u0120\u1D3F\n\u0120\r" +
		"\u0120\x0E\u0120\u1D40\x03\u0120\x03\u0120\x06\u0120\u1D45\n\u0120\r\u0120" +
		"\x0E\u0120\u1D46\x03\u0120\x03\u0120\x05\u0120\u1D4B\n\u0120\x03\u0121" +
		"\x03\u0121\x03\u0122\x03\u0122\x03\u0123\x03\u0123\x06\u0123\u1D53\n\u0123" +
		"\r\u0123\x0E\u0123\u1D54\x03\u0123\x03\u0123\x06\u0123\u1D59\n\u0123\r" +
		"\u0123\x0E\u0123\u1D5A\x03\u0123\x03\u0123\x06\u0123\u1D5F\n\u0123\r\u0123" +
		"\x0E\u0123\u1D60\x05\u0123\u1D63\n\u0123\x03\u0123\x03\u0123\x06\u0123" +
		"\u1D67\n\u0123\r\u0123\x0E\u0123\u1D68\x05\u0123\u1D6B\n\u0123\x03\u0123" +
		"\x03\u0123\x03\u0124\x03\u0124\x06\u0124\u1D71\n\u0124\r\u0124\x0E\u0124" +
		"\u1D72\x03\u0124\x03\u0124\x06\u0124\u1D77\n\u0124\r\u0124\x0E\u0124\u1D78" +
		"\x05\u0124\u1D7B\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x06\u0124" +
		"\u1D81\n\u0124\r\u0124\x0E\u0124\u1D82\x03\u0124\x03\u0124\x03\u0124\x05" +
		"\u0124\u1D88\n\u0124\x03\u0125\x03\u0125\x03\u0126\x03\u0126\x03\u0127" +
		"\x03\u0127\x06\u0127\u1D90\n\u0127\r\u0127\x0E\u0127\u1D91\x03\u0127\x03" +
		"\u0127\x06\u0127\u1D96\n\u0127\r\u0127\x0E\u0127\u1D97\x05\u0127\u1D9A" +
		"\n\u0127\x05\u0127\u1D9C\n\u0127\x03\u0127\x03\u0127\x03\u0127\x06\u0127" +
		"\u1DA1\n\u0127\r\u0127\x0E\u0127\u1DA2\x03\u0127\x03\u0127\x05\u0127\u1DA7" +
		"\n\u0127\x03\u0128\x03\u0128\x03\u0129\x03\u0129\x06\u0129\u1DAD\n\u0129" +
		"\r\u0129\x0E\u0129\u1DAE\x03\u0129\x03\u0129\x06\u0129\u1DB3\n\u0129\r" +
		"\u0129\x0E\u0129\u1DB4\x05\u0129\u1DB7\n\u0129\x03\u0129\x03\u0129\x06" +
		"\u0129\u1DBB\n\u0129\r\u0129\x0E\u0129\u1DBC\x05\u0129\u1DBF\n\u0129\x03" +
		"\u0129\x03\u0129\x06\u0129\u1DC3\n\u0129\r\u0129\x0E\u0129\u1DC4\x05\u0129" +
		"\u1DC7\n\u0129\x03\u0129\x03\u0129\x06\u0129\u1DCB\n\u0129\r\u0129\x0E" +
		"\u0129\u1DCC\x03\u0129\x03\u0129\x06\u0129\u1DD1\n\u0129\r\u0129\x0E\u0129" +
		"\u1DD2\x03\u012A\x03\u012A\x03\u012B\x03\u012B\x06\u012B\u1DD9\n\u012B" +
		"\r\u012B\x0E\u012B\u1DDA\x03\u012B\x03\u012B\x06\u012B\u1DDF\n\u012B\r" +
		"\u012B\x0E\u012B\u1DE0\x06\u012B\u1DE3\n\u012B\r\u012B\x0E\u012B\u1DE4" +
		"\x03\u012B\x03\u012B\x06\u012B\u1DE9\n\u012B\r\u012B\x0E\u012B\u1DEA\x03" +
		"\u012B\x03\u012B\x07\u012B\u1DEF\n\u012B\f\u012B\x0E\u012B\u1DF2\v\u012B" +
		"\x06\u012B\u1DF4\n\u012B\r\u012B\x0E\u012B\u1DF5\x03\u012C\x03\u012C\x03" +
		"\u012C\x06\u012C\u1DFB\n\u012C\r\u012C\x0E\u012C\u1DFC\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x06\u012C\u1E06\n\u012C" +
		"\r\u012C\x0E\u012C\u1E07\x05\u012C\u1E0A\n\u012C\x03\u012C\x03\u012C\x06" +
		"\u012C\u1E0E\n\u012C\r\u012C\x0E\u012C\u1E0F\x03\u012C\x03\u012C\x03\u012C" +
		"\x03\u012C\x03\u012C\x06\u012C\u1E17\n\u012C\r\u012C\x0E\u012C\u1E18\x03" +
		"\u012C\x03\u012C\x05\u012C\u1E1D\n\u012C\x03\u012D\x03\u012D\x03\u012E" +
		"\x03\u012E\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x03\u0130\x07\u0130" +
		"\u1E28\n\u0130\f\u0130\x0E\u0130\u1E2B\v\u0130\x03\u0130\x03\u0130\x07" +
		"\u0130\u1E2F\n\u0130\f\u0130\x0E\u0130\u1E32\v\u0130\x03\u0130\x03\u0130" +
		"\x03\u0130\x03\u0130\x07\u0130\u1E38\n\u0130\f\u0130\x0E\u0130\u1E3B\v" +
		"\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x05\u0130\u1E41\n\u0130" +
		"\x03\u0130\x03\u0130\x07\u0130\u1E45\n\u0130\f\u0130\x0E\u0130\u1E48\v" +
		"\u0130\x03\u0130\x03\u0130\x07\u0130\u1E4C\n\u0130\f\u0130\x0E\u0130\u1E4F" +
		"\v\u0130\x03\u0130\x03\u0130\x07\u0130\u1E53\n\u0130\f\u0130\x0E\u0130" +
		"\u1E56\v\u0130\x03\u0131\x03\u0131\x03\u0131\x05\u0131\u1E5B\n\u0131\x03" +
		"\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u1E63" +
		"\n\u0132\x03\u0133\x03\u0133\x03\u0134\x03\u0134\x03\u0134\x07\u0134\u1E6A" +
		"\n\u0134\f\u0134\x0E\u0134\u1E6D\v\u0134\x03\u0134\x03\u0134\x07\u0134" +
		"\u1E71\n\u0134\f\u0134\x0E\u0134\u1E74\v\u0134\x03\u0134\x03\u0134\x03" +
		"\u0134\x03\u0134\x07\u0134\u1E7A\n\u0134\f\u0134\x0E\u0134\u1E7D\v\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x05\u0134\u1E84\n\u0134" +
		"\x03\u0134\x03\u0134\x07\u0134\u1E88\n\u0134\f\u0134\x0E\u0134\u1E8B\v" +
		"\u0134\x03\u0134\x03\u0134\x07\u0134\u1E8F\n\u0134\f\u0134\x0E\u0134\u1E92" +
		"\v\u0134\x03\u0134\x03\u0134\x07\u0134\u1E96\n\u0134\f\u0134\x0E\u0134" +
		"\u1E99\v\u0134\x03\u0135\x03\u0135\x06\u0135\u1E9D\n\u0135\r\u0135\x0E" +
		"\u0135\u1E9E\x03\u0135\x03\u0135\x05\u0135\u1EA3\n\u0135\x03\u0135\x06" +
		"\u0135\u1EA6\n\u0135\r\u0135\x0E\u0135\u1EA7\x03\u0135\x03\u0135\x03\u0136" +
		"\x03\u0136\x03\u0136\x07\u0136\u1EAF\n\u0136\f\u0136\x0E\u0136\u1EB2\v" +
		"\u0136\x03\u0136\x03\u0136\x07\u0136\u1EB6\n\u0136\f\u0136\x0E\u0136\u1EB9" +
		"\v\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x05\u0136\u1EBF\n\u0136" +
		"\x03\u0136\x03\u0136\x06\u0136\u1EC3\n\u0136\r\u0136\x0E\u0136\u1EC4\x03" +
		"\u0136\x03\u0136\x07\u0136\u1EC9\n\u0136\f\u0136\x0E\u0136\u1ECC\v\u0136" +
		"\x03\u0136\x03\u0136\x07\u0136\u1ED0\n\u0136\f\u0136\x0E\u0136\u1ED3\v" +
		"\u0136\x03\u0136\x03\u0136\x07\u0136\u1ED7\n\u0136\f\u0136\x0E\u0136\u1EDA" +
		"\v\u0136\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x06\u0138\u1EE0\n\u0138" +
		"\r\u0138\x0E\u0138\u1EE1\x03\u0138\x03\u0138\x05\u0138\u1EE6\n\u0138\x03" +
		"\u0138\x06\u0138\u1EE9\n\u0138\r\u0138\x0E\u0138\u1EEA\x03\u0138\x03\u0138" +
		"\x05\u0138\u1EEF\n\u0138\x03\u0138\x06\u0138\u1EF2\n\u0138\r\u0138\x0E" +
		"\u0138\u1EF3\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03\u013A\x03\u013A" +
		"\x06\u013A\u1EFC\n\u013A\r\u013A\x0E\u013A\u1EFD\x03\u013A\x03\u013A\x05" +
		"\u013A\u1F02\n\u013A\x03\u013A\x06\u013A\u1F05\n\u013A\r\u013A\x0E\u013A" +
		"\u1F06\x03\u013A\x03\u013A\x05\u013A\u1F0B\n\u013A\x03\u013A\x06\u013A" +
		"\u1F0E\n\u013A\r\u013A\x0E\u013A\u1F0F\x03\u013A\x03\u013A\x03\u013B\x03" +
		"\u013B\x03\u013C\x03\u013C\x07\u013C\u1F18\n\u013C\f\u013C\x0E\u013C\u1F1B" +
		"\v\u013C\x05\u013C\u1F1D\n\u013C\x03\u013C\x03\u013C\x07\u013C\u1F21\n" +
		"\u013C\f\u013C\x0E\u013C\u1F24\v\u013C\x05\u013C\u1F26\n\u013C\x03\u013C" +
		"\x03\u013C\x06\u013C\u1F2A\n\u013C\r\u013C\x0E\u013C\u1F2B\x03\u013C\x03" +
		"\u013C\x05\u013C\u1F30\n\u013C\x03\u013C\x03\u013C\x06\u013C\u1F34\n\u013C" +
		"\r\u013C\x0E\u013C\u1F35\x03\u013C\x03\u013C\x05\u013C\u1F3A\n\u013C\x03" +
		"\u013C\x03\u013C\x06\u013C\u1F3E\n\u013C\r\u013C\x0E\u013C\u1F3F\x03\u013C" +
		"\x03\u013C\x05\u013C\u1F44\n\u013C\x03\u013C\x03\u013C\x06\u013C\u1F48" +
		"\n\u013C\r\u013C\x0E\u013C\u1F49\x03\u013C\x03\u013C\x05\u013C\u1F4E\n" +
		"\u013C\x03\u013C\x03\u013C\x06\u013C\u1F52\n\u013C\r\u013C\x0E\u013C\u1F53" +
		"\x03\u013C\x03\u013C\x05\u013C\u1F58\n\u013C\x03\u013C\x03\u013C\x06\u013C" +
		"\u1F5C\n\u013C\r\u013C\x0E\u013C\u1F5D\x03\u013C\x03\u013C\x05\u013C\u1F62" +
		"\n\u013C\x05\u013C\u1F64\n\u013C\x03\u013C\x03\u013C\x06\u013C\u1F68\n" +
		"\u013C\r\u013C\x0E\u013C\u1F69\x03\u013C\x03\u013C\x05\u013C\u1F6E\n\u013C" +
		"\x03\u013C\x06\u013C\u1F71\n\u013C\r\u013C\x0E\u013C\u1F72\x03\u013C\x03" +
		"\u013C\x06\u013C\u1F77\n\u013C\r\u013C\x0E\u013C\u1F78\x03\u013C\x03\u013C" +
		"\x06\u013C\u1F7D\n\u013C\r\u013C\x0E\u013C\u1F7E\x03\u013C\x03\u013C\x05" +
		"\u013C\u1F83\n\u013C\x03\u013C\x03\u013C\x03\u013C\x06\u013C\u1F88\n\u013C" +
		"\r\u013C\x0E\u013C\u1F89\x03\u013C\x03\u013C\x05\u013C\u1F8E\n\u013C\x03" +
		"\u013C\x06\u013C\u1F91\n\u013C\r\u013C\x0E\u013C\u1F92\x03\u013C\x03\u013C" +
		"\x06\u013C\u1F97\n\u013C\r\u013C\x0E\u013C\u1F98\x03\u013C\x03\u013C\x06" +
		"\u013C\u1F9D\n\u013C\r\u013C\x0E\u013C\u1F9E\x03\u013C\x03\u013C\x05\u013C" +
		"\u1FA3\n\u013C\x03\u013C\x05\u013C\u1FA6\n\u013C\x03\u013D\x03\u013D\x07" +
		"\u013D\u1FAA\n\u013D\f\u013D\x0E\u013D\u1FAD\v\u013D\x03\u013D\x05\u013D" +
		"\u1FB0\n\u013D\x03\u013D\x07\u013D\u1FB3\n\u013D\f\u013D\x0E\u013D\u1FB6" +
		"\v\u013D\x03\u013D\x05\u013D\u1FB9\n\u013D\x03\u013E\x03\u013E\x03\u013E" +
		"\x07\u013E\u1FBE\n\u013E\f\u013E\x0E\u013E\u1FC1\v\u013E\x03\u013E\x03" +
		"\u013E\x07\u013E\u1FC5\n\u013E\f\u013E\x0E\u013E\u1FC8\v\u013E\x03\u013E" +
		"\x05\u013E\u1FCB\n\u013E\x03\u013E\x07\u013E\u1FCE\n\u013E\f\u013E\x0E" +
		"\u013E\u1FD1\v\u013E\x03\u013E\x05\u013E\u1FD4\n\u013E\x05\u013E\u1FD6" +
		"\n\u013E\x03\u013F\x03\u013F\x03\u0140\x03\u0140\x07\u0140\u1FDC\n\u0140" +
		"\f\u0140\x0E\u0140\u1FDF\v\u0140\x03\u0140\x03\u0140\x05\u0140\u1FE3\n" +
		"\u0140\x03\u0140\x07\u0140\u1FE6\n\u0140\f\u0140\x0E\u0140\u1FE9\v\u0140" +
		"\x03\u0140\x03\u0140\x05\u0140\u1FED\n\u0140\x07\u0140\u1FEF\n\u0140\f" +
		"\u0140\x0E\u0140\u1FF2\v\u0140\x03\u0140\x07\u0140\u1FF5\n\u0140\f\u0140" +
		"\x0E\u0140\u1FF8\v\u0140\x03\u0140\x03\u0140\x03\u0141\x03\u0141\x07\u0141" +
		"\u1FFE\n\u0141\f\u0141\x0E\u0141\u2001\v\u0141\x03\u0141\x03\u0141\x07" +
		"\u0141\u2005\n\u0141\f\u0141\x0E\u0141\u2008\v\u0141\x03\u0141\x03\u0141" +
		"\x07\u0141\u200C\n\u0141\f\u0141\x0E\u0141\u200F\v\u0141\x03\u0141\x05" +
		"\u0141\u2012\n\u0141\x03\u0141\x07\u0141\u2015\n\u0141\f\u0141\x0E\u0141" +
		"\u2018\v\u0141\x03\u0141\x03\u0141\x03\u0142\x03\u0142\x03\u0143\x03\u0143" +
		"\x03\u0144\x03\u0144\x03\u0144\x02\x02\x05\u025E\u0266\u026A\u0145\x02" +
		"\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
		"\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
		",\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02" +
		"H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02" +
		"d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02" +
		"\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02" +
		"\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02" +
		"\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02" +
		"\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02" +
		"\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02" +
		"\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02" +
		"\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02" +
		"\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
		"\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
		"\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
		"\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
		"\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
		"\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
		"\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
		"\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
		"\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
		"\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
		"\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
		"\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
		"\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
		"\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
		"\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0" +
		"\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE" +
		"\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC" +
		"\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA" +
		"\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206\x02\u0208" +
		"\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214\x02\u0216" +
		"\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222\x02\u0224" +
		"\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230\x02\u0232" +
		"\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E\x02\u0240" +
		"\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C\x02\u024E" +
		"\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A\x02\u025C" +
		"\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268\x02\u026A" +
		"\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276\x02\u0278" +
		"\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02\u0284\x02\u0286" +
		"\x02\x02,\x03\x02\u01BB\u01BB\x04\x02\x9E\x9E\xA1\xA1\x05\x02\x0E\x0E" +
		"\xFC\xFC\u0199\u019B\x03\x02_`\x03\x02\u0171\u0172\x04\x0222\xD4\xD4\x04" +
		"\x02\xE4\xE4\u0144\u0144\x04\x02\u0129\u0129\u017C\u017C\x04\x02\u01B5" +
		"\u01B5\u01B8\u01B8\x03\x02\u0168\u0169\x04\x02\xDF\xDF\u0140\u0140\x03" +
		"\x02\xD9\xDA\x03\x02\u01B5\u01B6\x04\x02\x1C\x1Ctt\x04\x02\xDE\xDE\u0177" +
		"\u0177\x04\x02\xAF\xAF\u01B8\u01B8\x03\x02\xE4\xE5\x04\x02\u0151\u0151" +
		"\u017E\u017E\x03\x02\u0112\u0113\x07\x02\u01A3\u01A4\u01AC\u01AD\u01B2" +
		"\u01B2\u01B6\u01B6\u01B8\u01B8\x04\x02\xAC\xAC\xC5\xC5\x04\x02\u0101\u0101" +
		"\u015A\u015A\x03\x02\x9A\x9B\x04\x02CC\xCD\xCD\x04\x02\xF6\xF6\u015A\u015A" +
		"\x06\x02\f\f\xC4\xC4\u0188\u0188\u01B8\u01B8\x05\x02::\xF2\xF2\u018C\u018C" +
		"\x04\x02\xC9\xC9\xFF\xFF\x04\x02\x16\x16\xD6\xD6\x07\x0266TT\xE6\xE6\u010D" +
		"\u010E\u016A\u016C\x04\x02\x19\x1A\x98\x99\x05\x02}}\u0123\u0123\u014E" +
		"\u014E\x03\x02\x17\x18\x04\x02::\u0127\u0127\x04\x02}}\xA6\xA6\x04\x02" +
		"\u0126\u0126\u0153\u0154\x03\x02WX\x03\x02\u01A0\u01A1\x04\x02\xA7\xA7" +
		"\u0162\u0162\x04\x02\x14\x14\u0106\u0106\x05\x02\xF7\xF7\u0118\u0118\u0191" +
		"\u0191\x05\x02\x0E\x10\xFC\xFC\u01B8\u01B8\x02\u2537\x02\u028C\x03\x02" +
		"\x02\x02\x04\u029C\x03\x02\x02\x02\x06\u02A0\x03\x02\x02\x02\b\u02A8\x03" +
		"\x02\x02\x02\n\u02AE\x03\x02\x02\x02\f\u02C0\x03\x02\x02\x02\x0E\u02C2" +
		"\x03\x02\x02\x02\x10\u02CC\x03\x02\x02\x02\x12\u0305\x03\x02\x02\x02\x14" +
		"\u0322\x03\x02\x02\x02\x16\u0348\x03\x02\x02\x02\x18\u034A\x03\x02\x02" +
		"\x02\x1A\u0377\x03\x02\x02\x02\x1C\u0385\x03\x02\x02\x02\x1E\u0387\x03" +
		"\x02\x02\x02 \u03A8\x03\x02\x02\x02\"\u03BB\x03\x02\x02\x02$\u0419\x03" +
		"\x02\x02\x02&\u042C\x03\x02\x02\x02(\u042E\x03\x02\x02\x02*\u044B\x03" +
		"\x02\x02\x02,\u044D\x03\x02\x02\x02.\u044F\x03\x02\x02\x020\u0462\x03" +
		"\x02\x02\x022\u047D\x03\x02\x02\x024\u0492\x03\x02\x02\x026\u0494\x03" +
		"\x02\x02\x028\u04AC\x03\x02\x02\x02:\u04CE\x03\x02\x02\x02<\u04D0\x03" +
		"\x02\x02\x02>\u04D2\x03\x02\x02\x02@\u04EE\x03\x02\x02\x02B\u052F\x03" +
		"\x02\x02\x02D\u0537\x03\x02\x02\x02F\u0539\x03\x02\x02\x02H\u053B\x03" +
		"\x02\x02\x02J\u057A\x03\x02\x02\x02L\u057C\x03\x02\x02\x02N\u057E\x03" +
		"\x02\x02\x02P\u0600\x03\x02\x02\x02R\u0606\x03\x02\x02\x02T\u060A\x03" +
		"\x02\x02\x02V\u060C\x03\x02\x02\x02X\u064D\x03\x02\x02\x02Z\u0696\x03" +
		"\x02\x02\x02\\\u069A\x03\x02\x02\x02^\u06A0\x03\x02\x02\x02`\u06A2\x03" +
		"\x02\x02\x02b\u06C2\x03\x02\x02\x02d\u06E2\x03\x02\x02\x02f\u070E\x03" +
		"\x02\x02\x02h\u0735\x03\x02\x02\x02j\u0737\x03";
	private static readonly _serializedATNSegment4: string =
		"\x02\x02\x02l\u0739\x03\x02\x02\x02n\u074A\x03\x02\x02\x02p\u077E\x03" +
		"\x02\x02\x02r\u07D4\x03\x02\x02\x02t\u07DC\x03\x02\x02\x02v\u07F5\x03" +
		"\x02\x02\x02x\u0808\x03\x02\x02\x02z\u080A\x03\x02\x02\x02|\u082C\x03" +
		"\x02\x02\x02~\u082E\x03\x02\x02\x02\x80\u086F\x03\x02\x02\x02\x82\u08B9" +
		"\x03\x02\x02\x02\x84\u08BB\x03\x02\x02\x02\x86\u08C7\x03\x02\x02\x02\x88" +
		"\u08F2\x03\x02\x02\x02\x8A\u08FA\x03\x02\x02\x02\x8C\u091C\x03\x02\x02" +
		"\x02\x8E\u0942\x03\x02\x02\x02\x90\u0947\x03\x02\x02\x02\x92\u0949\x03" +
		"\x02\x02\x02\x94\u094B\x03\x02\x02\x02\x96\u0971\x03\x02\x02\x02\x98\u0973" +
		"\x03\x02\x02\x02\x9A\u09F6\x03\x02\x02\x02\x9C\u0A0A\x03\x02\x02\x02\x9E" +
		"\u0A0E\x03\x02\x02\x02\xA0\u0A16\x03\x02\x02\x02\xA2\u0A38\x03\x02\x02" +
		"\x02\xA4\u0A5A\x03\x02\x02\x02\xA6\u0A7C\x03\x02\x02\x02\xA8\u0A9E\x03" +
		"\x02\x02\x02\xAA\u0AA0\x03\x02\x02\x02\xAC\u0AC7\x03\x02\x02\x02\xAE\u0AC9" +
		"\x03\x02\x02\x02\xB0\u0B00\x03\x02\x02\x02\xB2\u0B14\x03\x02\x02\x02\xB4" +
		"\u0B3A\x03\x02\x02\x02\xB6\u0B76\x03\x02\x02\x02\xB8\u0B9E\x03\x02\x02" +
		"\x02\xBA\u0BB6\x03\x02\x02\x02\xBC\u0BC8\x03\x02\x02\x02\xBE\u0C36\x03" +
		"\x02\x02\x02\xC0\u0C91\x03\x02\x02\x02\xC2\u0C93\x03\x02\x02\x02\xC4\u0CA2" +
		"\x03\x02\x02\x02\xC6\u0CDE\x03\x02\x02\x02\xC8\u0CE0\x03\x02\x02\x02\xCA" +
		"\u0CE4\x03\x02\x02\x02\xCC\u0D03\x03\x02\x02\x02\xCE\u0D1B\x03\x02\x02" +
		"\x02\xD0\u0D1D\x03\x02\x02\x02\xD2\u0D1F\x03\x02\x02\x02\xD4\u0D27\x03" +
		"\x02\x02\x02\xD6\u0D39\x03\x02\x02\x02\xD8\u0D4B\x03\x02\x02\x02\xDA\u0D5D" +
		"\x03\x02\x02\x02\xDC\u0D70\x03\x02\x02\x02\xDE\u0DB1\x03\x02\x02\x02\xE0" +
		"\u0DED\x03\x02\x02\x02\xE2\u0E0D\x03\x02\x02\x02\xE4\u0E2D\x03\x02\x02" +
		"\x02\xE6\u0E59\x03\x02\x02\x02\xE8\u0E79\x03\x02\x02\x02\xEA\u0E94\x03" +
		"\x02\x02\x02\xEC\u0EAF\x03\x02\x02\x02\xEE\u0EE7\x03\x02\x02\x02\xF0\u0EE9" +
		"\x03\x02\x02\x02\xF2\u0EF6\x03\x02\x02\x02\xF4\u0F1F\x03\x02\x02\x02\xF6" +
		"\u0F5D\x03\x02\x02\x02\xF8\u0F5F\x03\x02\x02\x02\xFA\u0F75\x03\x02\x02" +
		"\x02\xFC\u0F77\x03\x02\x02\x02\xFE\u0F8D\x03\x02\x02\x02\u0100\u0FA1\x03" +
		"\x02\x02\x02\u0102\u0FBC\x03\x02\x02\x02\u0104\u0FBE\x03\x02\x02\x02\u0106" +
		"\u0FC6\x03\x02\x02\x02\u0108\u0FC8\x03\x02\x02\x02\u010A\u0FCA\x03\x02" +
		"\x02\x02\u010C\u0FCC\x03\x02\x02\x02\u010E\u0FE8\x03\x02\x02\x02\u0110" +
		"\u1003\x03\x02\x02\x02\u0112\u1005\x03\x02\x02\x02\u0114\u1028\x03\x02" +
		"\x02\x02\u0116\u105A\x03\x02\x02\x02\u0118\u105C\x03\x02\x02\x02\u011A" +
		"\u105E\x03\x02\x02\x02\u011C\u1060\x03\x02\x02\x02\u011E\u1062\x03\x02" +
		"\x02\x02\u0120\u106F\x03\x02\x02\x02\u0122\u1135\x03\x02\x02\x02\u0124" +
		"\u1146\x03\x02\x02\x02\u0126\u1182\x03\x02\x02\x02\u0128\u119E\x03\x02" +
		"\x02\x02\u012A\u11A0\x03\x02\x02\x02\u012C\u11A2\x03\x02\x02\x02\u012E" +
		"\u11A4\x03\x02\x02\x02\u0130\u11A6\x03\x02\x02\x02\u0132\u11F2\x03\x02" +
		"\x02\x02\u0134\u11F4\x03\x02\x02\x02\u0136\u1207\x03\x02\x02\x02\u0138" +
		"\u1229\x03\x02\x02\x02\u013A\u122B\x03\x02\x02\x02\u013C\u12EB\x03\x02" +
		"\x02\x02\u013E\u12ED\x03\x02\x02\x02\u0140\u12EF\x03\x02\x02\x02\u0142" +
		"\u12F1\x03\x02\x02\x02\u0144\u12F3\x03\x02\x02\x02\u0146\u12F5\x03\x02" +
		"\x02\x02\u0148\u12F7\x03\x02\x02\x02\u014A\u12F9\x03\x02\x02\x02\u014C" +
		"\u130A\x03\x02\x02\x02\u014E\u134D\x03\x02\x02\x02\u0150\u134F\x03\x02" +
		"\x02\x02\u0152\u1360\x03\x02\x02\x02\u0154\u1364\x03\x02\x02\x02\u0156" +
		"\u1366\x03\x02\x02\x02\u0158\u1368\x03\x02\x02\x02\u015A\u136C\x03\x02" +
		"\x02\x02\u015C\u1382\x03\x02\x02\x02\u015E\u1396\x03\x02\x02\x02\u0160" +
		"\u1398\x03\x02\x02\x02\u0162\u140F\x03\x02\x02\x02\u0164\u1413\x03\x02" +
		"\x02\x02\u0166\u1417\x03\x02\x02\x02\u0168\u141B\x03\x02\x02\x02\u016A" +
		"\u141D\x03\x02\x02\x02\u016C\u1446\x03\x02\x02\x02\u016E\u1448\x03\x02" +
		"\x02\x02\u0170\u1466\x03\x02\x02\x02\u0172\u1468\x03\x02\x02\x02\u0174" +
		"\u148B\x03\x02\x02\x02\u0176\u150E\x03\x02\x02\x02\u0178\u1510\x03\x02" +
		"\x02\x02\u017A\u1512\x03\x02\x02\x02\u017C\u1514\x03\x02\x02\x02\u017E" +
		"\u1516\x03\x02\x02\x02\u0180\u1530\x03\x02\x02\x02\u0182\u15FC\x03\x02" +
		"\x02\x02\u0184\u15FE\x03\x02\x02\x02\u0186\u1606\x03\x02\x02\x02\u0188" +
		"\u1610\x03\x02\x02\x02\u018A\u1618\x03\x02\x02\x02\u018C\u161C\x03\x02" +
		"\x02\x02\u018E\u161E\x03\x02\x02\x02\u0190\u1620\x03\x02\x02\x02\u0192" +
		"\u1642\x03\x02\x02\x02\u0194\u1644\x03\x02\x02\x02\u0196\u166D\x03\x02" +
		"\x02\x02\u0198\u1675\x03\x02\x02\x02\u019A\u1687\x03\x02\x02\x02\u019C" +
		"\u1691\x03\x02\x02\x02\u019E\u169C\x03\x02\x02\x02\u01A0\u169E\x03\x02" +
		"\x02\x02\u01A2\u16B3\x03\x02\x02\x02\u01A4\u16C8\x03\x02\x02\x02\u01A6" +
		"\u16DD\x03\x02\x02\x02\u01A8\u16F2\x03\x02\x02\x02\u01AA\u1707\x03\x02" +
		"\x02\x02\u01AC\u1721\x03\x02\x02\x02\u01AE\u1738\x03\x02\x02\x02\u01B0" +
		"\u1752\x03\x02\x02\x02\u01B2\u1781\x03\x02\x02\x02\u01B4\u179B\x03\x02" +
		"\x02\x02\u01B6\u17BD\x03\x02\x02\x02\u01B8\u17C5\x03\x02\x02\x02\u01BA" +
		"\u17CF\x03\x02\x02\x02\u01BC\u1803\x03\x02\x02\x02\u01BE\u181A\x03\x02" +
		"\x02\x02\u01C0\u181C\x03\x02\x02\x02\u01C2\u1824\x03\x02\x02\x02\u01C4" +
		"\u183F\x03\x02\x02\x02\u01C6\u1841\x03\x02\x02\x02\u01C8\u184D\x03\x02" +
		"\x02\x02\u01CA\u184F\x03\x02\x02\x02\u01CC\u18D7\x03\x02\x02\x02\u01CE" +
		"\u18D9\x03\x02\x02\x02\u01D0\u18EC\x03\x02\x02\x02\u01D2\u191C\x03\x02" +
		"\x02\x02\u01D4\u191E\x03\x02\x02\x02\u01D6\u1920\x03\x02\x02\x02\u01D8" +
		"\u1922\x03\x02\x02\x02\u01DA\u1941\x03\x02\x02\x02\u01DC\u1943\x03\x02" +
		"\x02\x02\u01DE\u1953\x03\x02\x02\x02\u01E0\u1967\x03\x02\x02\x02\u01E2" +
		"\u1974\x03\x02\x02\x02\u01E4\u198A\x03\x02\x02\x02\u01E6\u1997\x03\x02" +
		"\x02\x02\u01E8\u1999\x03\x02\x02\x02\u01EA\u199B\x03\x02\x02\x02\u01EC" +
		"\u19C1\x03\x02\x02\x02\u01EE\u19E5\x03\x02\x02\x02\u01F0\u19E7\x03\x02" +
		"\x02\x02\u01F2\u19E9\x03\x02\x02\x02\u01F4\u19EB\x03\x02\x02\x02\u01F6" +
		"\u19ED\x03\x02\x02\x02\u01F8\u1A26\x03\x02\x02\x02\u01FA\u1A3E\x03\x02" +
		"\x02\x02\u01FC\u1A56\x03\x02\x02\x02\u01FE\u1A58\x03\x02\x02\x02\u0200" +
		"\u1A5A\x03\x02\x02\x02\u0202\u1A5C\x03\x02\x02\x02\u0204\u1A5E\x03\x02" +
		"\x02\x02\u0206\u1A60\x03\x02\x02\x02\u0208\u1A62\x03\x02\x02\x02\u020A" +
		"\u1A64\x03\x02\x02\x02\u020C\u1A66\x03\x02\x02\x02\u020E\u1A80\x03\x02" +
		"\x02\x02\u0210\u1B01\x03\x02\x02\x02\u0212\u1B13\x03\x02\x02\x02\u0214" +
		"\u1B1B\x03\x02\x02\x02\u0216\u1B6A\x03\x02\x02\x02\u0218\u1B82\x03\x02" +
		"\x02\x02\u021A\u1BA4\x03\x02\x02\x02\u021C\u1BB4\x03\x02\x02\x02\u021E" +
		"\u1BB6\x03\x02\x02\x02\u0220\u1BCC\x03\x02\x02\x02\u0222\u1BE4\x03\x02" +
		"\x02\x02\u0224\u1BF4\x03\x02\x02\x02\u0226\u1C03\x03\x02\x02\x02\u0228" +
		"\u1C5F\x03\x02\x02\x02\u022A\u1C61\x03\x02\x02\x02\u022C\u1C71\x03\x02" +
		"\x02\x02\u022E\u1C95\x03\x02\x02\x02\u0230\u1C97\x03\x02\x02\x02\u0232" +
		"\u1C99\x03\x02\x02\x02\u0234\u1CC4\x03\x02\x02\x02\u0236\u1CCA\x03\x02" +
		"\x02\x02\u0238\u1CCC\x03\x02\x02\x02\u023A\u1CCE\x03\x02\x02\x02\u023C" +
		"\u1D15\x03\x02\x02\x02\u023E\u1D3C\x03\x02\x02\x02\u0240\u1D4C\x03\x02" +
		"\x02\x02\u0242\u1D4E\x03\x02\x02\x02\u0244\u1D50\x03\x02\x02\x02\u0246" +
		"\u1D87\x03\x02\x02\x02\u0248\u1D89\x03\x02\x02\x02\u024A\u1D8B\x03\x02" +
		"\x02\x02\u024C\u1DA6\x03\x02\x02\x02\u024E\u1DA8\x03\x02\x02\x02\u0250" +
		"\u1DAA\x03\x02\x02\x02\u0252\u1DD4\x03\x02\x02\x02\u0254\u1DD6\x03\x02" +
		"\x02\x02\u0256\u1E1C\x03\x02\x02\x02\u0258\u1E1E\x03\x02\x02\x02\u025A" +
		"\u1E20\x03\x02\x02\x02\u025C\u1E22\x03\x02\x02\x02\u025E\u1E40\x03\x02" +
		"\x02\x02\u0260\u1E5A\x03\x02\x02\x02\u0262\u1E62\x03\x02\x02\x02\u0264" +
		"\u1E64\x03\x02\x02\x02\u0266\u1E83\x03\x02\x02\x02\u0268\u1E9A\x03\x02" +
		"\x02\x02\u026A\u1EBE\x03\x02\x02\x02\u026C\u1EDB\x03\x02\x02\x02\u026E" +
		"\u1EDD\x03\x02\x02\x02\u0270\u1EF7\x03\x02\x02\x02\u0272\u1EF9\x03\x02" +
		"\x02\x02\u0274\u1F13\x03\x02\x02\x02\u0276\u1F1C\x03\x02\x02\x02\u0278" +
		"\u1FA7\x03\x02\x02\x02\u027A\u1FD5\x03\x02\x02\x02\u027C\u1FD7\x03\x02" +
		"\x02\x02\u027E\u1FD9\x03\x02\x02\x02\u0280\u1FFB\x03\x02\x02\x02\u0282" +
		"\u201B\x03\x02\x02\x02\u0284\u201D\x03\x02\x02\x02\u0286\u201F\x03\x02" +
		"\x02\x02\u0288\u028B\x05\x0E\b\x02\u0289\u028B\x05\b\x05\x02\u028A\u0288" +
		"\x03\x02\x02\x02\u028A\u0289\x03\x02\x02\x02\u028B\u028E\x03\x02\x02\x02" +
		"\u028C\u028A\x03\x02\x02\x02\u028C\u028D\x03\x02\x02\x02\u028D\u028F\x03" +
		"\x02\x02\x02\u028E\u028C\x03\x02\x02\x02\u028F\u0290\x07\x02\x02\x03\u0290" +
		"\x03\x03\x02\x02\x02\u0291\u029D\x07\u0157\x02\x02\u0292\u029D\x07\u0158" +
		"\x02\x02\u0293\u029D\x07\xC2\x02\x02\u0294\u029D\x07\xC3\x02\x02\u0295" +
		"\u029D\x07\xEB\x02\x02\u0296\u029D\x07\xEC\x02\x02\u0297\u029D\x07\u0121" +
		"\x02\x02\u0298\u029D\x07\u0122\x02\x02\u0299\u029A\x07\v\x02\x02\u029A" +
		"\u029B\x07\u01BA\x02\x02\u029B\u029D\x07\u01B5\x02\x02\u029C\u0291\x03" +
		"\x02\x02\x02\u029C\u0292\x03\x02\x02\x02\u029C\u0293\x03\x02\x02\x02\u029C" +
		"\u0294\x03\x02\x02\x02\u029C\u0295\x03\x02\x02\x02\u029C\u0296\x03\x02" +
		"\x02\x02\u029C\u0297\x03\x02\x02\x02\u029C\u0298\x03\x02\x02\x02\u029C" +
		"\u0299\x03\x02\x02\x02\u029D\x05\x03\x02\x02\x02\u029E\u02A1\x07\u0191" +
		"\x02\x02\u029F\u02A1\x05\x04\x03\x02\u02A0\u029E\x03\x02\x02\x02\u02A0" +
		"\u029F\x03\x02\x02\x02\u02A1\x07\x03\x02\x02\x02\u02A2\u02A9\x07\u01BA" +
		"\x02\x02\u02A3\u02A9\x07\u01BB\x02\x02\u02A4\u02A9\x07\u01B9\x02\x02\u02A5" +
		"\u02A9\x07\u01A4\x02\x02\u02A6\u02A9\x07\u01A5\x02\x02\u02A7\u02A9\x05" +
		"\f\x07\x02\u02A8\u02A2\x03\x02\x02\x02\u02A8\u02A3\x03\x02\x02\x02\u02A8" +
		"\u02A4\x03\x02\x02\x02\u02A8\u02A5\x03\x02\x02\x02\u02A8\u02A6\x03\x02" +
		"\x02\x02\u02A8\u02A7\x03\x02\x02\x02\u02A9\t\x03\x02\x02\x02\u02AA\u02AF" +
		"\x07\u01BA\x02\x02\u02AB\u02AF\x07\u01BB\x02\x02\u02AC\u02AF\x07\u01B9" +
		"\x02\x02\u02AD\u02AF\x05\f\x07\x02\u02AE\u02AA\x03\x02\x02\x02\u02AE\u02AB" +
		"\x03\x02\x02\x02\u02AE\u02AC\x03\x02\x02\x02\u02AE\u02AD\x03\x02\x02\x02" +
		"\u02AF\v\x03\x02\x02\x02\u02B0\u02B4\x07\u019C\x02\x02\u02B1\u02B3\n\x02" +
		"\x02\x02\u02B2\u02B1\x03\x02\x02\x02\u02B3\u02B6\x03\x02\x02\x02\u02B4" +
		"\u02B2\x03\x02\x02\x02\u02B4\u02B5\x03\x02\x02\x02\u02B5\u02B7\x03\x02" +
		"\x02\x02\u02B6\u02B4\x03\x02\x02\x02\u02B7\u02C1\x07\u01BB\x02\x02\u02B8" +
		"\u02BC\x07\u019D\x02\x02\u02B9\u02BB\n\x02\x02\x02\u02BA\u02B9\x03\x02" +
		"\x02\x02\u02BB\u02BE\x03\x02\x02\x02\u02BC\u02BA\x03\x02\x02\x02\u02BC" +
		"\u02BD\x03\x02\x02\x02\u02BD\u02BF\x03\x02\x02\x02\u02BE\u02BC\x03\x02" +
		"\x02\x02\u02BF\u02C1\x07\u01BB\x02\x02\u02C0\u02B0\x03\x02\x02\x02\u02C0" +
		"\u02B8\x03\x02\x02\x02\u02C1\r\x03\x02\x02\x02\u02C2\u02C4\x05\u0190\xC9" +
		"\x02\u02C3\u02C5\x05\u01AE\xD8\x02\u02C4\u02C3\x03\x02\x02\x02\u02C4\u02C5" +
		"\x03\x02\x02\x02\u02C5\u02C7\x03\x02\x02\x02\u02C6\u02C8\x05\xDCo\x02" +
		"\u02C7\u02C6\x03\x02\x02\x02\u02C7\u02C8\x03\x02\x02\x02\u02C8\u02CA\x03" +
		"\x02\x02\x02\u02C9\u02CB\x05\x10\t\x02\u02CA\u02C9\x03\x02\x02\x02\u02CA" +
		"\u02CB\x03\x02\x02\x02\u02CB\x0F\x03\x02\x02\x02\u02CC\u02CE\x05\x14\v" +
		"\x02\u02CD\u02CF\x05\x18\r\x02\u02CE\u02CD\x03\x02\x02\x02\u02CE\u02CF" +
		"\x03\x02\x02\x02\u02CF\u02E8\x03\x02\x02\x02\u02D0\u02D4\x05\x16\f\x02" +
		"\u02D1\u02D3\x05\b\x05\x02\u02D2\u02D1\x03\x02\x02\x02\u02D3\u02D6\x03" +
		"\x02\x02\x02\u02D4\u02D2\x03\x02\x02\x02\u02D4\u02D5\x03\x02\x02\x02\u02D5" +
		"\u02D8\x03\x02\x02\x02\u02D6\u02D4\x03\x02\x02\x02\u02D7\u02D0\x03\x02" +
		"\x02\x02\u02D8\u02DB\x03\x02\x02\x02\u02D9\u02D7\x03\x02\x02\x02\u02D9" +
		"\u02DA\x03\x02\x02\x02\u02DA\u02E9\x03\x02\x02\x02\u02DB\u02D9\x03\x02" +
		"\x02\x02\u02DC\u02E0\x05\x1E\x10\x02\u02DD\u02DF\x05\b\x05\x02\u02DE\u02DD" +
		"\x03\x02\x02\x02\u02DF\u02E2\x03\x02\x02\x02\u02E0\u02DE\x03\x02\x02\x02" +
		"\u02E0\u02E1\x03\x02\x02\x02\u02E1\u02E4\x03\x02\x02\x02\u02E2\u02E0\x03" +
		"\x02\x02\x02\u02E3\u02DC\x03\x02\x02\x02\u02E4\u02E7\x03\x02\x02\x02\u02E5" +
		"\u02E3\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6\u02E9\x03\x02" +
		"\x02\x02\u02E7\u02E5\x03\x02\x02\x02\u02E8\u02D9\x03\x02\x02\x02\u02E8" +
		"\u02E5\x03\x02\x02\x02\u02E9\u02F1\x03\x02\x02\x02\u02EA\u02EC\x05\b\x05" +
		"\x02\u02EB\u02EA\x03\x02\x02\x02\u02EC\u02EF\x03\x02\x02\x02\u02ED\u02EB" +
		"\x03\x02\x02\x02\u02ED\u02EE\x03\x02\x02\x02\u02EE\u02F0\x03\x02\x02\x02" +
		"\u02EF\u02ED\x03\x02\x02\x02\u02F0\u02F2\x05\x12\n\x02\u02F1\u02ED\x03" +
		"\x02\x02\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2\u0302\x03\x02\x02\x02\u02F3" +
		"\u02F5\x05\b\x05\x02\u02F4\u02F3\x03\x02\x02\x02\u02F5\u02F8\x03\x02\x02" +
		"\x02\u02F6\u02F4\x03\x02\x02\x02\u02F6\u02F7\x03\x02\x02\x02\u02F7\u02F9" +
		"\x03\x02\x02\x02\u02F8\u02F6\x03\x02\x02\x02\u02F9\u02FD\x052\x1A\x02" +
		"\u02FA\u02FC\x05\b\x05\x02\u02FB\u02FA\x03\x02\x02\x02\u02FC\u02FF\x03" +
		"\x02\x02\x02\u02FD\u02FB\x03\x02\x02\x02\u02FD\u02FE\x03\x02\x02\x02\u02FE" +
		"\u0301\x03\x02\x02\x02\u02FF\u02FD\x03\x02\x02\x02\u0300\u02F6\x03\x02" +
		"\x02\x02\u0301\u0304\x03\x02\x02\x02\u0302\u0300\x03\x02\x02\x02\u0302" +
		"\u0303\x03\x02\x02\x02\u0303\x11\x03\x02\x02\x02\u0304\u0302\x03\x02\x02" +
		"\x02\u0305\u0307\x07\x04\x02\x02\u0306\u0308\x05\b\x05\x02\u0307\u0306" +
		"\x03\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u0307\x03\x02\x02\x02" +
		"\u0309\u030A\x03\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u0313\x07" +
		"\u011E\x02\x02\u030C\u030E\x05\b\x05\x02\u030D\u030C\x03\x02\x02\x02\u030E" +
		"\u030F\x03\x02\x02\x02\u030F\u030D\x03\x02\x02\x02\u030F\u0310\x03\x02" +
		"\x02\x02\u0310\u0311\x03\x02\x02\x02\u0311\u0312\x05\u0196\xCC\x02\u0312" +
		"\u0314\x03\x02\x02\x02\u0313\u030D\x03\x02\x02\x02\u0313\u0314\x03\x02" +
		"\x02\x02\u0314\u0318\x03\x02\x02\x02\u0315\u0317\x05\b\x05\x02\u0316\u0315" +
		"\x03\x02\x02\x02\u0317\u031A\x03\x02\x02\x02\u0318\u0316\x03\x02\x02\x02" +
		"\u0318\u0319\x03\x02\x02\x02\u0319\u031B\x03\x02\x02\x02\u031A\u0318\x03" +
		"\x02\x02\x02\u031B\u031F\x07\u01B2\x02\x02\u031C\u031E\x05\b\x05\x02\u031D" +
		"\u031C\x03\x02\x02\x02\u031E\u0321\x03\x02\x02\x02\u031F\u031D\x03\x02" +
		"\x02\x02\u031F\u0320\x03\x02\x02\x02\u0320\x13\x03\x02\x02\x02\u0321\u031F" +
		"\x03\x02\x02\x02\u0322\u0324\x07\u011C\x02\x02\u0323\u0325\x05\b\x05\x02" +
		"\u0324\u0323\x03\x02\x02\x02\u0325\u0326\x03\x02\x02\x02\u0326\u0324\x03" +
		"\x02\x02\x02\u0326\u0327\x03\x02\x02\x02\u0327\u0328\x03\x02\x02\x02\u0328" +
		"\u0330\x07z\x02\x02\u0329\u032B\x05\b\x05\x02\u032A\u0329\x03\x02\x02" +
		"\x02\u032B\u032C\x03\x02\x02\x02\u032C\u032A\x03\x02\x02\x02\u032C\u032D" +
		"\x03\x02\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E\u032F\x05.\x18\x02" +
		"\u032F\u0331\x03\x02\x02\x02\u0330\u032A\x03\x02\x02\x02\u0330\u0331\x03" +
		"\x02\x02\x02\u0331\u0339\x03\x02\x02\x02\u0332\u0334\x05\b\x05\x02\u0333" +
		"\u0332\x03\x02\x02\x02\u0334\u0335\x03\x02\x02\x02\u0335\u0333\x03\x02" +
		"\x02\x02\u0335\u0336\x03\x02\x02\x02\u0336\u0337\x03\x02\x02\x02\u0337" +
		"\u0338\x050\x19\x02\u0338\u033A\x03\x02\x02\x02\u0339\u0333\x03\x02\x02" +
		"\x02\u0339\u033A\x03\x02\x02\x02\u033A\u033E\x03\x02\x02\x02\u033B\u033D" +
		"\x05\b\x05\x02\u033C\u033B\x03\x02\x02\x02\u033D\u0340\x03\x02\x02\x02" +
		"\u033E\u033C\x03\x02\x02\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0341\x03" +
		"\x02\x02\x02\u0340\u033E\x03\x02\x02\x02\u0341\u0345\x07\u01B2\x02\x02" +
		"\u0342\u0344\x05\b\x05\x02\u0343\u0342\x03\x02\x02\x02\u0344\u0347\x03" +
		"\x02\x02\x02\u0345\u0343\x03\x02\x02\x02\u0345\u0346\x03\x02\x02\x02\u0346" +
		"\x15\x03\x02\x02\x02\u0347\u0345\x03\x02\x02\x02\u0348\u0349\x05(\x15" +
		"\x02\u0349\x17\x03\x02\x02\x02\u034A\u034E\x07\x03\x02\x02\u034B\u034D" +
		"\x05\b\x05\x02\u034C\u034B\x03\x02\x02\x02\u034D\u0350\x03\x02\x02\x02" +
		"\u034E\u034C\x03\x02\x02\x02\u034E\u034F\x03\x02\x02\x02\u034F\u0351\x03" +
		"\x02\x02\x02\u0350\u034E\x03\x02\x02\x02\u0351\u0355\x07\u01B2\x02\x02" +
		"\u0352\u0354\x05\b\x05\x02\u0353\u0352\x03\x02\x02\x02\u0354\u0357\x03" +
		"\x02\x02\x02\u0355\u0353\x03\x02\x02\x02\u0355\u0356\x03\x02\x02\x02\u0356" +
		"\u035F\x03\x02\x02\x02\u0357\u0355\x03\x02\x02\x02\u0358\u035C\x05\x1A" +
		"\x0E\x02\u0359\u035B\x05\b\x05\x02\u035A\u0359\x03\x02\x02\x02\u035B\u035E" +
		"\x03\x02\x02\x02\u035C\u035A\x03\x02\x02\x02\u035C\u035D\x03\x02\x02\x02" +
		"\u035D\u0360\x03\x02\x02\x02\u035E\u035C\x03\x02\x02\x02\u035F\u0358\x03" +
		"\x02\x02\x02\u0360\u0361\x03\x02\x02\x02\u0361\u035F\x03\x02\x02\x02\u0361" +
		"\u0362\x03\x02\x02\x02\u0362\u0363\x03\x02\x02\x02\u0363\u0365\x07\x04" +
		"\x02\x02\u0364\u0366\x05\b\x05\x02\u0365\u0364\x03\x02\x02\x02\u0366\u0367" +
		"\x03\x02\x02\x02\u0367\u0365\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02" +
		"\u0368\u0369\x03\x02\x02\x02\u0369\u036D\x07n\x02\x02\u036A\u036C\x05" +
		"\b\x05\x02\u036B\u036A\x03\x02\x02\x02\u036C\u036F\x03\x02\x02\x02\u036D" +
		"\u036B\x03\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u0370\x03\x02" +
		"\x02\x02\u036F\u036D\x03\x02\x02\x02\u0370\u0374\x07\u01B2\x02\x02\u0371" +
		"\u0373\x05\b\x05\x02\u0372\u0371\x03\x02\x02\x02\u0373\u0376\x03\x02\x02" +
		"\x02\u0374\u0372\x03\x02\x02\x02\u0374\u0375\x03\x02\x02\x02\u0375\x19" +
		"\x03\x02\x02\x02\u0376\u0374\x03\x02\x02\x02\u0377\u0378\x05(\x15\x02" +
		"\u0378\u0382\x05\"\x12\x02\u0379\u037B\x05\b\x05\x02\u037A\u0379\x03\x02" +
		"\x02\x02\u037B\u037C\x03\x02\x02\x02\u037C\u037A\x03\x02\x02\x02\u037C" +
		"\u037D\x03\x02\x02\x02\u037D\u037E\x03\x02\x02\x02\u037E\u037F\x05\x1C" +
		"\x0F\x02\u037F\u0381\x03\x02\x02\x02\u0380\u037A\x03\x02\x02\x02\u0381" +
		"\u0384\x03\x02\x02\x02\u0382\u0380\x03\x02\x02\x02\u0382\u0383\x03\x02" +
		"\x02\x02\u0383\x1B\x03\x02\x02\x02\u0384\u0382\x03\x02\x02\x02\u0385\u0386" +
		"\x05\x1E\x10\x02\u0386\x1D\x03\x02\x02\x02\u0387\u038B\x05*\x16\x02\u0388" +
		"\u038A\x05\b\x05\x02\u0389\u0388\x03\x02\x02\x02\u038A\u038D\x03\x02\x02" +
		"\x02\u038B\u0389\x03\x02\x02\x02\u038B\u038C\x03\x02\x02\x02\u038C\u038E" +
		"\x03\x02\x02\x02\u038D\u038B\x03\x02\x02\x02\u038E\u0392\x07\u01B2\x02" +
		"\x02\u038F\u0391\x05\b\x05\x02\u0390\u038F\x03\x02\x02\x02\u0391\u0394" +
		"\x03\x02\x02\x02\u0392\u0390\x03\x02\x02\x02\u0392\u0393\x03\x02\x02\x02" +
		"\u0393\u039E\x03\x02\x02\x02\u0394\u0392\x03\x02\x02\x02\u0395\u0399\x05" +
		" \x11\x02\u0396\u0398\x05\b\x05\x02\u0397\u0396\x03\x02\x02\x02\u0398" +
		"\u039B\x03\x02\x02\x02\u0399\u0397\x03\x02\x02\x02\u0399\u039A\x03\x02" +
		"\x02\x02\u039A\u039D\x03\x02\x02\x02\u039B\u0399\x03\x02\x02\x02\u039C" +
		"\u0395\x03\x02\x02\x02\u039D\u03A0\x03\x02\x02\x02\u039E\u039C\x03\x02" +
		"\x02\x02\u039E\u039F\x03\x02\x02\x02\u039F\x1F\x03\x02\x02\x02\u03A0\u039E" +
		"\x03\x02\x02\x02\u03A1\u03A5\x054\x1B\x02\u03A2\u03A4\x05\b\x05\x02\u03A3" +
		"\u03A2\x03\x02\x02\x02\u03A4\u03A7\x03\x02\x02\x02\u03A5\u03A3\x03\x02" +
		"\x02\x02\u03A5\u03A6\x03\x02\x02\x02\u03A6\u03A9\x03\x02\x02\x02\u03A7" +
		"\u03A5\x03\x02\x02\x02\u03A8\u03A1\x03\x02\x02\x02\u03A9\u03AA\x03\x02" +
		"\x02\x02\u03AA\u03A8\x03\x02\x02\x02\u03AA\u03AB\x03\x02\x02\x02\u03AB" +
		"\u03B9\x03\x02\x02\x02\u03AC\u03AE\x05\b\x05\x02\u03AD\u03AC\x03\x02\x02" +
		"\x02\u03AE\u03B1\x03\x02\x02\x02\u03AF\u03AD\x03\x02\x02\x02\u03AF\u03B0" +
		"\x03\x02\x02\x02\u03B0\u03B2\x03\x02\x02\x02\u03B1\u03AF\x03\x02\x02\x02" +
		"\u03B2\u03B6\x07\u01B2\x02\x02\u03B3\u03B5\x05\b\x05\x02\u03B4\u03B3\x03" +
		"\x02\x02\x02\u03B5\u03B8\x03\x02\x02\x02\u03B6\u03B4\x03\x02\x02\x02\u03B6" +
		"\u03B7\x03\x02\x02\x02\u03B7\u03BA\x03\x02\x02\x02\u03B8\u03B6\x03\x02" +
		"\x02\x02\u03B9\u03AF\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA" +
		"!\x03\x02\x02\x02\u03BB\u03C3\x07\u0183\x02\x02\u03BC\u03BE\x05\b\x05" +
		"\x02\u03BD\u03BC\x03\x02\x02\x02\u03BE\u03BF\x03\x02\x02\x02\u03BF\u03BD" +
		"\x03\x02\x02\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0\u03C1\x03\x02\x02\x02" +
		"\u03C1\u03C2\x07\xBC\x02\x02\u03C2\u03C4\x03\x02\x02\x02\u03C3\u03BD\x03" +
		"\x02\x02\x02\u03C3\u03C4\x03\x02\x02\x02\u03C4\u03C6\x03\x02\x02\x02\u03C5" +
		"\u03C7\x05\b\x05\x02\u03C6\u03C5\x03\x02\x02\x02\u03C7\u03C8\x03\x02\x02" +
		"\x02\u03C8\u03C6\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02\x02\u03C9\u040A" +
		"\x03\x02\x02\x02\u03CA\u03D2\x07\n\x02\x02\u03CB\u03CD\x05\b\x05\x02\u03CC" +
		"\u03CB\x03\x02\x02\x02\u03CD\u03CE\x03\x02\x02\x02\u03CE\u03CC\x03\x02" +
		"\x02\x02\u03CE\u03CF\x03\x02\x02\x02\u03CF\u03D0\x03\x02\x02\x02\u03D0" +
		"\u03D1\x07\u015A\x02\x02\u03D1\u03D3\x03\x02\x02\x02\u03D2\u03CC\x03\x02" +
		"\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D3\u03D5\x03\x02\x02\x02\u03D4" +
		"\u03D6\x05\b\x05\x02\u03D5\u03D4\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02" +
		"\x02\u03D7\u03D5\x03\x02\x02\x02\u03D7\u03D8\x03\x02\x02\x02\u03D8\u03D9" +
		"\x03\x02\x02\x02\u03D9\u03DB\t\x03\x02\x02\u03DA\u03DC\x05\b\x05\x02\u03DB" +
		"\u03DA\x03\x02\x02\x02\u03DC\u03DD\x03\x02\x02\x02\u03DD\u03DB\x03\x02" +
		"\x02\x02\u03DD\u03DE\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF" +
		"\u03E7\x07\u011C\x02\x02\u03E0\u03E2\x05\b\x05\x02\u03E1\u03E0\x03\x02" +
		"\x02\x02\u03E2\u03E3\x03\x02\x02\x02\u03E3\u03E1\x03\x02\x02\x02\u03E3" +
		"\u03E4\x03\x02\x02\x02\u03E4\u03E5\x03\x02\x02\x02\u03E5\u03E6\x07\u0102" +
		"\x02\x02\u03E6\u03E8\x03\x02\x02\x02\u03E7\u03E1\x03\x02\x02\x02\u03E7" +
		"\u03E8\x03\x02\x02\x02\u03E8\u03EA\x03\x02\x02\x02\u03E9\u03EB\x05\b\x05" +
		"\x02\u03EA\u03E9\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03EA" +
		"\x03\x02\x02\x02\u03EC\u03ED\x03\x02\x02\x02\u03ED\u03EE\x03\x02\x02\x02" +
		"\u03EE\u03F2\x05&\x14\x02\u03EF\u03F1\x05\b\x05\x02\u03F0\u03EF\x03\x02" +
		"\x02\x02\u03F1\u03F4\x03\x02\x02\x02\u03F2\u03F0\x03\x02\x02\x02\u03F2" +
		"\u03F3\x03\x02\x02\x02\u03F3\u03F5\x03\x02\x02\x02\u03F4\u03F2\x03\x02" +
		"\x02\x02\u03F5\u03F9\x07\u01B2\x02\x02\u03F6\u03F8\x05\b\x05\x02\u03F7" +
		"\u03F6\x03\x02\x02\x02\u03F8\u03FB\x03\x02\x02\x02\u03F9\u03F7\x03\x02" +
		"\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA\u040B\x03\x02\x02\x02\u03FB" +
		"\u03F9\x03\x02\x02\x02\u03FC\u03FE\x07%\x02\x02\u03FD\u03FF\x05\b\x05" +
		"\x02\u03FE\u03FD\x03\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u0400\u03FE" +
		"\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401\u0402\x03\x02\x02\x02" +
		"\u0402\u0404\x07\u0133\x02\x02\u0403\u0405\x05\b\x05\x02\u0404\u0403\x03" +
		"\x02\x02\x02\u0405\u0406\x03\x02\x02\x02\u0406\u0404\x03\x02\x02\x02\u0406" +
		"\u0407\x03\x02\x02\x02\u0407\u0408\x03\x02\x02\x02\u0408\u0409\x05$\x13" +
		"\x02\u0409\u040B\x03\x02\x02\x02\u040A\u03CA\x03\x02\x02\x02\u040A\u03FC" +
		"\x03\x02\x02\x02\u040B\u040F\x03\x02\x02\x02\u040C\u040E\x05\b\x05\x02" +
		"\u040D\u040C\x03\x02\x02\x02\u040E\u0411\x03\x02\x02\x02\u040F\u040D\x03" +
		"\x02\x02\x02\u040F\u0410\x03\x02\x02\x02\u0410\u0412\x03\x02\x02\x02\u0411" +
		"\u040F\x03\x02\x02\x02\u0412\u0416\x07\u01B2\x02\x02\u0413\u0415\x05\b" +
		"\x05\x02\u0414\u0413\x03\x02\x02\x02\u0415\u0418\x03\x02\x02\x02\u0416" +
		"\u0414\x03\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417#\x03\x02\x02" +
		"\x02\u0418\u0416\x03\x02\x02\x02\u0419\u041A\x05\u01CE\xE8\x02\u041A%" +
		"\x03\x02\x02\x02\u041B\u0425\x05\u0238\u011D\x02\u041C\u041E\x05\b\x05" +
		"\x02\u041D\u041C\x03\x02\x02\x02\u041E\u041F\x03\x02\x02\x02\u041F\u041D" +
		"\x03\x02\x02\x02\u041F\u0420\x03\x02\x02\x02\u0420\u0421\x03\x02\x02\x02" +
		"\u0421\u0422\x05\u0238\u011D\x02\u0422\u0424\x03\x02\x02\x02\u0423\u041D" +
		"\x03\x02\x02\x02\u0424\u0427\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02" +
		"\u0425\u0426\x03\x02\x02\x02\u0426\u042D\x03\x02\x02\x02\u0427\u0425\x03" +
		"\x02\x02\x02\u0428\u042D\x07\xD0\x02\x02\u0429\u042D\x07\u0108\x02\x02" +
		"\u042A\u042D\x07\xD7\x02\x02\u042B\u042D\x07\xA4\x02\x02\u042C\u041B\x03" +
		"\x02\x02\x02\u042C\u0428\x03\x02\x02\x02\u042C\u0429\x03\x02\x02\x02\u042C" +
		"\u042A\x03\x02\x02\x02\u042C\u042B\x03\x02\x02\x02\u042D\'\x03\x02\x02" +
		"\x02\u042E\u0430\x05,\x17\x02\u042F\u0431\x05\b\x05\x02\u0430\u042F\x03" +
		"\x02\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432\u0430\x03\x02\x02\x02\u0432" +
		"\u0433\x03\x02\x02\x02\u0433\u0434\x03\x02\x02\x02\u0434\u043C\x07\u0147" +
		"\x02\x02\u0435\u0437\x05\b\x05\x02\u0436\u0435\x03\x02\x02\x02\u0437\u0438" +
		"\x03\x02\x02\x02\u0438\u0436\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02" +
		"\u0439\u043A\x03\x02\x02\x02\u043A\u043B\x05\u01C8\xE5\x02\u043B\u043D" +
		"\x03\x02\x02\x02\u043C\u0436\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02" +
		"\u043D\u0441\x03\x02\x02\x02\u043E\u0440\x05\b\x05\x02\u043F\u043E\x03" +
		"\x02\x02\x02\u0440\u0443\x03\x02\x02\x02\u0441\u043F\x03\x02\x02\x02\u0441" +
		"\u0442\x03\x02\x02\x02\u0442\u0444\x03\x02\x02\x02\u0443\u0441\x03\x02" +
		"\x02\x02\u0444\u0448\x07\u01B2\x02\x02\u0445\u0447\x05\b\x05\x02\u0446" +
		"\u0445\x03\x02\x02\x02\u0447\u044A\x03\x02\x02\x02\u0448\u0446\x03\x02" +
		"\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449)\x03\x02\x02\x02\u044A\u0448" +
		"\x03\x02\x02\x02\u044B\u044C\x07\u01B8\x02\x02\u044C+\x03\x02\x02\x02" +
		"\u044D\u044E\x07\u01B8\x02\x02\u044E-\x03\x02\x02\x02\u044F\u0451\x07" +
		"\u0184\x02\x02\u0450\u0452\x05\b\x05\x02\u0451\u0450\x03\x02\x02\x02\u0452" +
		"\u0453\x03\x02\x02\x02\u0453\u0451\x03\x02\x02\x02\u0453\u0454\x03\x02" +
		"\x02\x02\u0454\u0455\x03\x02\x02\x02\u0455\u045F\x05\u01CE\xE8\x02\u0456" +
		"\u0458\x05\b\x05\x02\u0457\u0456\x03\x02\x02\x02\u0458\u0459\x03\x02\x02" +
		"\x02\u0459\u0457\x03\x02\x02\x02\u0459\u045A\x03\x02\x02\x02\u045A\u045B" +
		"\x03\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\u045B\u045C\x05\u01CE\xE8\x02\u045C\u045E\x03\x02\x02\x02\u045D\u0457" +
		"\x03\x02\x02\x02\u045E\u0461\x03\x02\x02\x02\u045F\u045D\x03\x02\x02\x02" +
		"\u045F\u0460\x03\x02\x02\x02\u0460/\x03\x02\x02\x02\u0461\u045F\x03\x02" +
		"\x02\x02\u0462\u0464\x07\xBB\x02\x02\u0463\u0465\x05\b\x05\x02\u0464\u0463" +
		"\x03\x02\x02\x02\u0465\u0466\x03\x02\x02\x02\u0466\u0464\x03\x02\x02\x02" +
		"\u0466\u0467\x03\x02\x02\x02\u0467\u0468\x03\x02\x02\x02\u0468\u0469\x05" +
		"\u01CE\xE8\x02\u04691\x03\x02\x02\x02\u046A\u046E\x05\u025E\u0130\x02" +
		"\u046B\u046D\x05\b\x05\x02\u046C\u046B\x03\x02\x02\x02\u046D\u0470\x03" +
		"\x02\x02\x02\u046E\u046C\x03\x02\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F" +
		"\u0471\x03\x02\x02\x02\u0470\u046E\x03\x02\x02\x02\u0471\u0472\x07\u01B2" +
		"\x02\x02\u0472\u047E\x03\x02\x02\x02\u0473\u0477\x05\u0266\u0134\x02\u0474" +
		"\u0476\x05\b\x05\x02\u0475\u0474\x03\x02\x02\x02\u0476\u0479\x03\x02\x02" +
		"\x02\u0477\u0475\x03\x02\x02\x02\u0477\u0478\x03\x02\x02\x02\u0478\u047A" +
		"\x03\x02\x02\x02\u0479\u0477\x03\x02\x02\x02\u047A\u047B\x07\u01B2\x02" +
		"\x02\u047B\u047E\x03\x02\x02\x02\u047C\u047E\x05\b\x05\x02\u047D\u046A" +
		"\x03\x02\x02\x02\u047D\u0473\x03\x02\x02\x02\u047D\u047C\x03\x02\x02\x02" +
		"\u047E3\x03\x02\x02\x02\u047F\u0493\x05\xA0Q\x02\u0480\u0493\x05\x9AN" +
		"\x02\u0481\u0493\x05\x94K\x02\u0482\u0493\x05\x86D\x02\u0483\u0493\x05" +
		"\x84C\x02\u0484\u0493\x05\x80A\x02\u0485\u0493\x05~@\x02\u0486\u0493\x05" +
		"|?\x02\u0487\u0493\x05z>\x02\u0488\u0493\x05^0\x02\u0489\u0493\x05T+\x02" +
		"\u048A\u0493\x05N(\x02\u048B\u0493\x05J&\x02\u048C\u0493\x05F$\x02\u048D" +
		"\u0493\x05H%\x02\u048E\u0493\x05B\"\x02\u048F\u0493\x05@!\x02\u0490\u0493" +
		"\x05> \x02\u0491\u0493\x056\x1C\x02\u0492\u047F\x03\x02\x02\x02\u0492" +
		"\u0480\x03\x02\x02\x02\u0492\u0481\x03\x02\x02\x02\u0492\u0482\x03\x02" +
		"\x02\x02\u0492\u0483\x03\x02\x02\x02\u0492\u0484\x03\x02\x02\x02\u0492" +
		"\u0485\x03\x02\x02\x02\u0492\u0486\x03\x02\x02\x02\u0492\u0487\x03\x02" +
		"\x02\x02\u0492\u0488\x03\x02\x02\x02\u0492\u0489\x03\x02\x02\x02\u0492" +
		"\u048A\x03\x02\x02\x02\u0492\u048B\x03\x02\x02\x02\u0492\u048C\x03\x02" +
		"\x02\x02\u0492\u048D\x03\x02\x02\x02\u0492\u048E\x03\x02\x02\x02\u0492" +
		"\u048F\x03\x02\x02\x02\u0492\u0490\x03\x02\x02\x02\u0492\u0491\x03\x02" +
		"\x02\x02\u04935\x03\x02\x02\x02\u0494\u049C\x07\xCE\x02\x02\u0495\u0497" +
		"\x05\b\x05\x02\u0496\u0495\x03\x02\x02\x02\u0497\u0498\x03\x02\x02\x02" +
		"\u0498\u0496\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499\u049A\x03" +
		"\x02\x02\x02\u049A\u049B\x05<\x1F\x02\u049B\u049D\x03\x02\x02\x02\u049C" +
		"\u0496\x03\x02\x02\x02\u049D\u049E\x03\x02\x02\x02\u049E\u049C\x03\x02" +
		"\x02\x02\u049E\u049F\x03\x02\x02\x02\u049F\u04A9\x03\x02\x02\x02\u04A0" +
		"\u04A2\x05\b\x05\x02\u04A1\u04A0\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02" +
		"\x02\u04A3\u04A1\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02\x02\u04A4\u04A5" +
		"\x03\x02\x02\x02\u04A5\u04A6\x058\x1D\x02\u04A6\u04A8\x03\x02\x02\x02" +
		"\u04A7\u04A1\x03\x02\x02\x02\u04A8\u04AB\x03\x02\x02\x02\u04A9\u04A7\x03" +
		"\x02\x02\x02\u04A9\u04AA\x03\x02\x02\x02\u04AA7\x03\x02\x02\x02\u04AB" +
		"\u04A9\x03\x02\x02\x02\u04AC\u04C8\x07\u0131\x02\x02\u04AD\u04AF\x05\b" +
		"\x05\x02\u04AE\u04AD\x03\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02\u04B0" +
		"\u04AE\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B2\x03\x02" +
		"\x02\x02\u04B2\u04B4\t\x04\x02\x02\u04B3\u04B5\x05\b\x05\x02\u04B4\u04B3" +
		"\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02\x02\u04B6\u04B4\x03\x02\x02\x02" +
		"\u04B6\u04B7\x03\x02\x02\x02\u04B7\u04BE\x03\x02\x02\x02\u04B8\u04BA\x07" +
		"e\x02\x02\u04B9\u04BB\x05\b\x05\x02\u04BA\u04B9\x03\x02\x02\x02\u04BB" +
		"\u04BC\x03\x02\x02\x02\u04BC\u04BA\x03\x02\x02\x02\u04BC\u04BD\x03\x02" +
		"\x02\x02\u04BD\u04BF\x03\x02\x02\x02\u04BE\u04B8\x03\x02\x02\x02\u04BE" +
		"\u04BF\x03\x02\x02\x02\u04BF\u04C0\x03\x02\x02\x02\u04C0\u04C2\x072\x02" +
		"\x02\u04C1\u04C3\x05\b\x05\x02\u04C2\u04C1\x03\x02\x02\x02\u04C3\u04C4" +
		"\x03\x02\x02\x02\u04C4\u04C2\x03\x02\x02\x02\u04C4\u04C5\x03\x02\x02\x02" +
		"\u04C5\u04C6\x03\x02\x02\x02\u04C6\u04C7\x05:\x1E\x02\u04C7\u04C9\x03" +
		"\x02\x02\x02\u04C8\u04AE\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA" +
		"\u04C8\x03\x02\x02\x02\u04CA\u04CB\x03\x02\x02\x02\u04CB9\x03\x02\x02" +
		"\x02\u04CC\u04CF\x05\u01CE\xE8\x02\u04CD\u04CF\x05\u0260\u0131\x02\u04CE" +
		"\u04CC\x03\x02\x02\x02\u04CE\u04CD\x03\x02\x02\x02\u04CF;\x03\x02\x02" +
		"\x02\u04D0\u04D1\x05\u01CE\xE8\x02\u04D1=\x03\x02\x02\x02\u04D2\u04D4" +
		"\x07\xF3\x02\x02\u04D3\u04D5\x05\b\x05\x02\u04D4\u04D3\x03\x02\x02\x02" +
		"\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04D4\x03\x02\x02\x02\u04D6\u04D7\x03" +
		"\x02\x02\x02\u04D7\u04DE\x03\x02\x02\x02\u04D8\u04DA\t\x05\x02\x02\u04D9" +
		"\u04DB\x05\b\x05\x02\u04DA\u04D9\x03\x02\x02\x02\u04DB\u04DC\x03\x02\x02" +
		"\x02\u04DC\u04DA\x03\x02\x02\x02\u04DC\u04DD\x03\x02\x02\x02\u04DD\u04DF" +
		"\x03\x02\x02\x02\u04DE\u04D8\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02" +
		"\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04E2\x05h5\x02\u04E1\u04E3\x05\b\x05" +
		"\x02\u04E2\u04E1\x03\x02\x02\x02\u04E3\u04E4\x03\x02\x02\x02\u04E4\u04E2" +
		"\x03\x02\x02\x02\u04E4\u04E5\x03\x02\x02\x02\u04E5\u04E6\x03\x02\x02\x02" +
		"\u04E6\u04E8\x07\u0175\x02\x02\u04E7\u04E9\x05\b\x05\x02\u04E8\u04E7\x03" +
		"\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04E8\x03\x02\x02\x02\u04EA" +
		"\u04EB\x03\x02\x02\x02\u04EB\u04EC\x03\x02\x02\x02\u04EC\u04ED\x05\xD0" +
		"i\x02\u04ED?\x03\x02\x02\x02\u04EE\u04F0\x07\xC8\x02\x02\u04EF\u04F1\x05" +
		"\b\x05\x02\u04F0\u04EF\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2" +
		"\u04F0\x03\x02\x02\x02\u04F2\u04F3\x03\x02\x02\x02\u04F3\u04F4\x03\x02" +
		"\x02\x02\u04F4\u04FC\x05\u0266\u0134\x02\u04F5\u04F7\x05\b\x05\x02\u04F6" +
		"\u04F5\x03\x02\x02\x02\u04F7\u04F8\x03\x02\x02\x02\u04F8\u04F6\x03\x02" +
		"\x02\x02\u04F8\u04F9\x03\x02\x02\x02\u04F9\u04FA\x03\x02\x02\x02\u04FA" +
		"\u04FB\x07\u0196\x02\x02\u04FB\u04FD\x03\x02\x02\x02\u04FC\u04F6\x03\x02" +
		"\x02\x02\u04FC\u04FD\x03\x02\x02\x02\u04FD\u04FF\x03\x02\x02\x02\u04FE" +
		"\u0500\x05\b\x05\x02\u04FF\u04FE\x03\x02\x02\x02\u0500\u0501\x03\x02\x02" +
		"\x02\u0501\u04FF\x03\x02\x02\x02\u0501\u0502\x03\x02\x02\x02\u0502\u050C" +
		"\x03\x02\x02\x02\u0503\u050D\x05 \x11\x02\u0504\u0506\x07\xF8\x02\x02" +
		"\u0505\u0507\x05\b\x05\x02\u0506\u0505\x03\x02\x02\x02\u0507\u0508\x03" +
		"\x02\x02\x02\u0508\u0506\x03\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509" +
		"\u050A\x03\x02\x02\x02\u050A\u050B\x07\u0197\x02\x02\u050B\u050D\x03\x02" +
		"\x02\x02\u050C\u0503\x03\x02\x02\x02\u050C\u0504\x03\x02\x02\x02\u050D" +
		"\u0524\x03\x02\x02\x02\u050E\u0510\x05\b\x05\x02\u050F\u050E\x03\x02\x02" +
		"\x02\u0510\u0511\x03\x02\x02\x02\u0511\u050F\x03\x02\x02\x02\u0511\u0512" +
		"\x03\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0515\x07\u0198\x02" +
		"\x02\u0514\u0516\x05\b\x05\x02\u0515\u0514\x03\x02\x02\x02\u0516\u0517" +
		"\x03\x02\x02\x02\u0517\u0515\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02" +
		"\u0518\u0522\x03\x02\x02\x02\u0519\u0523\x05 \x11\x02\u051A\u051C\x07" +
		"\xF8\x02\x02\u051B\u051D\x05\b\x05\x02\u051C\u051B\x03\x02\x02\x02\u051D" +
		"\u051E\x03\x02\x02\x02\u051E\u051C\x03\x02\x02\x02\u051E\u051F\x03\x02" +
		"\x02\x02\u051F\u0520\x03\x02\x02\x02\u0520\u0521\x07\u0197\x02\x02\u0521" +
		"\u0523\x03\x02\x02\x02\u0522\u0519\x03\x02\x02\x02\u0522\u051A\x03\x02" +
		"\x02\x02\u0523\u0525\x03\x02\x02\x02\u0524\u050F\x03\x02\x02\x02\u0524" +
		"\u0525\x03\x02\x02\x02\u0525\u052D\x03\x02\x02\x02\u0526\u0528\x05\b\x05" +
		"\x02\u0527\u0526\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\u0527" +
		"\x03\x02\x02\x02\u0529\u052A\x03\x02\x02\x02\u052A\u052B\x03\x02\x02\x02" +
		"\u052B\u052C\x07\x8A\x02\x02\u052C\u052E\x03\x02\x02\x02\u052D\u0527\x03" +
		"\x02\x02\x02\u052D\u052E\x03\x02\x02\x02\u052EA\x03\x02\x02\x02\u052F" +
		"\u0531\x07\xBA\x02\x02\u0530\u0532\x05\b\x05\x02\u0531\u0530\x03\x02\x02" +
		"\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0531\x03\x02\x02\x02\u0533\u0534" +
		"\x03\x02\x02\x02\u0534\u0535\x03\x02\x02\x02\u0535\u0536\x05D#\x02\u0536" +
		"C\x03\x02\x02\x02\u0537\u0538\x05\u01CE\xE8\x02\u0538E\x03\x02\x02\x02" +
		"\u0539\u053A\x07\xA3\x02\x02\u053AG\x03\x02\x02\x02\u053B\u053D\x07\xA3" +
		"\x02\x02\u053C\u053E\x05\b\x05\x02\u053D\u053C\x03\x02\x02\x02\u053E\u053F" +
		"\x03\x02\x02\x02\u053F\u053D\x03\x02\x02\x02\u053F\u0540\x03\x02\x02\x02" +
		"\u0540\u0541\x03\x02\x02\x02\u0541\u0542\x07\u011E\x02\x02\u0542I\x03" +
		"\x02\x02\x02\u0543\u054B\x07\xBD\x02\x02\u0544\u0546\x05\b\x05\x02\u0545" +
		"\u0544\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547\u0545\x03\x02" +
		"\x02\x02\u0547\u0548\x03\x02\x02\x02\u0548\u0549\x03\x02\x02\x02\u0549" +
		"\u054A\x07\u0175\x02\x02\u054A\u054C\x03\x02\x02\x02\u054B\u0545\x03\x02" +
		"\x02\x02\u054B\u054C\x03\x02\x02\x02\u054C\u0554\x03\x02\x02\x02\u054D" +
		"\u054F\x05\b\x05\x02\u054E\u054D\x03\x02\x02\x02\u054F\u0550\x03\x02\x02" +
		"\x02\u0550\u054E\x03\x02\x02\x02\u0550\u0551\x03\x02\x02\x02\u0551\u0552" +
		"\x03\x02\x02\x02\u0552\u0553\x05L\'\x02\u0553\u0555\x03\x02\x02\x02\u0554" +
		"\u054E\x03\x02\x02\x02\u0554\u0555\x03\x02\x02\x02\u0555\u057B\x03\x02" +
		"\x02\x02\u0556\u055E\x07\xBD\x02\x02\u0557\u0559\x05\b\x05\x02\u0558\u0557" +
		"\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u0558\x03\x02\x02\x02" +
		"\u055A\u055B\x03\x02\x02\x02\u055B\u055C\x03\x02\x02\x02\u055C\u055D\x07" +
		"\u0175\x02\x02\u055D\u055F\x03\x02\x02\x02\u055E\u0558\x03\x02\x02\x02" +
		"\u055E\u055F\x03\x02\x02\x02\u055F\u0567\x03\x02\x02\x02\u0560\u0562\x05" +
		"\b\x05\x02\u0561\u0560\x03\x02\x02\x02\u0562\u0563\x03\x02\x02\x02\u0563" +
		"\u0561\x03\x02\x02\x02\u0563\u0564\x03\x02\x02\x02\u0564\u0565\x03\x02" +
		"\x02\x02\u0565\u0566\x05L\'\x02\u0566\u0568\x03\x02\x02\x02\u0567\u0561" +
		"\x03\x02\x02\x02\u0568\u0569\x03\x02\x02\x02\u0569\u0567\x03\x02\x02\x02" +
		"\u0569\u056A\x03\x02\x02\x02\u056A\u056B\x03\x02\x02\x02\u056B\u056D\x07" +
		"s\x02\x02\u056C\u056E\x05\b\x05\x02\u056D\u056C\x03\x02\x02\x02\u056E" +
		"\u056F\x03\x02\x02\x02\u056F\u056D\x03\x02\x02\x02\u056F\u0570\x03\x02" +
		"\x02\x02\u0570\u0571\x03\x02\x02\x02\u0571\u0572\x07\u0102\x02\x02\u0572" +
		"\u0574\x03\x02\x02\x02\u0573\u0575\x05\b\x05\x02\u0574\u0573\x03\x02\x02" +
		"\x02\u0575\u0576\x03\x02\x02\x02\u0576\u0574\x03\x02\x02\x02\u0576\u0577" +
		"\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578\u0579\x05\u01CE\xE8" +
		"\x02\u0579\u057B\x03\x02\x02\x02\u057A\u0543\x03\x02\x02\x02\u057A\u0556" +
		"\x03\x02\x02\x02\u057BK\x03\x02\x02\x02\u057C\u057D\x07\u01B8\x02\x02" +
		"\u057DM\x03\x02\x02\x02\u057E\u0580\x07\x9F\x02\x02\u057F\u0581\x05\b" +
		"\x05\x02\u0580\u057F\x03\x02\x02\x02\u0581\u0582\x03\x02\x02\x02\u0582" +
		"\u0580\x03\x02\x02\x02\u0582\u0583\x03\x02\x02\x02\u0583\u0584\x03\x02" +
		"\x02\x02\u0584\u0597\x05R*\x02\u0585\u0587\x05\b\x05\x02\u0586\u0585\x03" +
		"\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u0586\x03\x02\x02\x02\u0588" +
		"\u0589\x03\x02\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A\u058B\x07\x11" +
		"\x02\x02\u058B\u058D\x03\x02\x02\x02\u058C\u0586\x03\x02\x02\x02\u058C" +
		"\u058D\x03\x02\x02\x02\u058D\u058F\x03\x02\x02\x02\u058E\u0590\x05\b\x05" +
		"\x02\u058F\u058E\x03\x02\x02\x02\u0590\u0591\x03\x02\x02\x02\u0591\u058F" +
		"\x03\x02\x02\x02\u0591\u0592\x03\x02\x02\x02\u0592\u0593\x03\x02\x02\x02" +
		"\u0593\u0594\x05R*\x02\u0594\u0596\x03\x02\x02\x02\u0595\u058C\x03\x02" +
		"\x02\x02\u0596\u0599\x03\x02\x02\x02\u0597\u0595\x03\x02\x02\x02\u0597" +
		"\u0598\x03\x02\x02\x02\u0598\u05C2\x03\x02\x02\x02\u0599\u0597\x03\x02" +
		"\x02\x02\u059A\u059C\x05\b\x05\x02\u059B\u059A\x03\x02\x02\x02\u059C\u059D" +
		"\x03\x02\x02\x02\u059D\u059B\x03\x02\x02\x02\u059D\u059E\x03\x02\x02\x02" +
		"\u059E\u059F\x03\x02\x02\x02\u059F\u05A1\x07\u0189\x02\x02\u05A0\u05A2" +
		"\x05\b\x05\x02\u05A1\u05A0\x03\x02\x02\x02\u05A2\u05A3\x03\x02\x02\x02" +
		"\u05A3\u05A1\x03\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4\u05A5\x03" +
		"\x02\x02\x02\u05A5\u05B8\x05P)\x02\u05A6\u05A8\x05\b\x05\x02\u05A7\u05A6" +
		"\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05A7\x03\x02\x02\x02" +
		"\u05A9\u05AA\x03\x02\x02\x02\u05AA\u05AB\x03\x02\x02\x02\u05AB\u05AC\x07" +
		"\x11\x02\x02\u05AC\u05AE\x03\x02\x02\x02\u05AD\u05A7\x03\x02\x02\x02\u05AD" +
		"\u05AE\x03\x02\x02\x02\u05AE\u05B0\x03\x02\x02\x02\u05AF\u05B1\x05\b\x05" +
		"\x02\u05B0\u05AF\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02\u05B2\u05B0" +
		"\x03\x02\x02\x02\u05B2\u05B3\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02" +
		"\u05B4\u05B5\x05P)\x02\u05B5\u05B7\x03\x02\x02\x02\u05B6\u05AD\x03\x02" +
		"\x02\x02\u05B7\u05BA\x03\x02\x02\x02\u05B8\u05B6\x03\x02\x02\x02\u05B8" +
		"\u05B9\x03\x02\x02\x02\u05B9\u05BC\x03\x02\x02\x02\u05BA\u05B8\x03\x02" +
		"\x02\x02\u05BB\u05BD\x05\b\x05\x02\u05BC\u05BB\x03\x02\x02\x02\u05BD\u05BE" +
		"\x03\x02\x02\x02\u05BE\u05BC\x03\x02\x02\x02\u05BE\u05BF\x03\x02\x02\x02" +
		"\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05C1\x05 \x11\x02\u05C1\u05C3\x03" +
		"\x02\x02\x02\u05C2\u059B\x03\x02\x02\x02\u05C3\u05C4\x03\x02\x02\x02\u05C4" +
		"\u05C2\x03\x02\x02\x02\u05C4\u05C5\x03\x02\x02\x02\u05C5\u05D9\x03\x02" +
		"\x02\x02\u05C6\u05C8\x05\b\x05\x02\u05C7\u05C6\x03\x02\x02\x02\u05C8\u05C9" +
		"\x03\x02\x02\x02\u05C9\u05C7\x03\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02" +
		"\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CD\x07\u0189\x02\x02\u05CC\u05CE" +
		"\x05\b\x05\x02\u05CD\u05CC\x03\x02\x02\x02\u05CE\u05CF\x03\x02\x02\x02" +
		"\u05CF\u05CD\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D1\x03" +
		"\x02\x02\x02\u05D1\u05D3\x07\u0194\x02\x02\u05D2\u05D4\x05\b\x05\x02\u05D3" +
		"\u05D2\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5\u05D3\x03\x02" +
		"\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\u05D7\x03\x02\x02\x02\u05D7" +
		"\u05D8\x05 \x11\x02\u05D8\u05DA\x03\x02\x02\x02\u05D9\u05C7\x03\x02\x02" +
		"\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05E2\x03\x02\x02\x02\u05DB\u05DD" +
		"\x05\b\x05\x02\u05DC\u05DB\x03\x02\x02\x02\u05DD\u05DE\x03\x02\x02\x02" +
		"\u05DE\u05DC\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E0\x03" +
		"\x02\x02\x02\u05E0\u05E1\x07\x89\x02\x02\u05E1\u05E3\x03\x02\x02\x02\u05E2" +
		"\u05DC\x03\x02\x02\x02\u05E2\u05E3\x03\x02\x02\x02\u05E3O\x03\x02\x02" +
		"\x02\u05E4\u0601\x05\u0266\u0134\x02\u05E5\u05E7\x07\xFA\x02\x02\u05E6" +
		"\u05E8\x05\b\x05\x02\u05E7\u05E6\x03\x02\x02\x02\u05E8\u05E9\x03\x02\x02" +
		"\x02\u05E9\u05E7\x03\x02\x02\x02\u05E9\u05EA\x03\x02\x02\x02\u05EA\u05EC" +
		"\x03\x02\x02\x02\u05EB\u05E5\x03\x02\x02\x02\u05EB\u05EC\x03\x02\x02\x02" +
		"\u05EC\u05ED\x03\x02\x02\x02\u05ED\u05FB\x05\u025E\u0130\x02\u05EE\u05F0" +
		"\x05\b\x05\x02\u05EF\u05EE\x03\x02\x02\x02\u05F0\u05F1\x03\x02\x02\x02" +
		"\u05F1\u05EF\x03\x02\x02\x02\u05F1\u05F2\x03\x02\x02\x02\u05F2\u05F3\x03" +
		"\x02\x02\x02\u05F3\u05F5\t\x06\x02\x02\u05F4\u05F6\x05\b\x05\x02\u05F5" +
		"\u05F4\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7\u05F5\x03\x02" +
		"\x02\x02\u05F7\u05F8\x03\x02\x02\x02\u05F8\u05F9\x03\x02\x02\x02\u05F9" +
		"\u05FA\x05\u025E\u0130\x02\u05FA\u05FC\x03\x02\x02\x02\u05FB\u05EF\x03" +
		"\x02\x02\x02\u05FB\u05FC\x03\x02\x02\x02\u05FC\u0601\x03\x02\x02\x02\u05FD" +
		"\u0601\x07\u0195\x02\x02\u05FE\u0601\x07\u0178\x02\x02\u05FF\u0601\x07" +
		"\xA8\x02\x02\u0600\u05E4\x03\x02\x02\x02\u0600\u05EB\x03\x02\x02\x02\u0600" +
		"\u05FD\x03\x02\x02\x02\u0600\u05FE\x03\x02\x02\x02\u0600\u05FF\x03\x02" +
		"\x02\x02\u0601Q\x03\x02\x02\x02\u0602\u0607\x05\u025E\u0130\x02\u0603" +
		"\u0607\x05\u0266\u0134\x02\u0604\u0607\x07\u0178\x02\x02\u0605\u0607\x07" +
		"\xA8\x02\x02\u0606\u0602\x03\x02\x02\x02\u0606\u0603\x03\x02\x02\x02\u0606" +
		"\u0604\x03\x02\x02\x02\u0606\u0605\x03\x02\x02\x02\u0607S\x03\x02\x02" +
		"\x02\u0608\u060B\x05V,\x02\u0609\u060B\x05X-\x02\u060A\u0608\x03\x02\x02" +
		"\x02\u060A\u0609\x03\x02\x02\x02\u060BU\x03\x02\x02\x02\u060C\u060E\x07" +
		"y\x02\x02\u060D\u060F\x05\b\x05\x02\u060E\u060D\x03\x02\x02\x02\u060F" +
		"\u0610\x03\x02\x02\x02\u0610\u060E\x03\x02\x02\x02\u0610\u0611\x03\x02" +
		"\x02\x02\u0611\u0612\x03\x02\x02\x02\u0612\u0614\x05\\/\x02\u0613\u0615" +
		"\x05\b\x05\x02\u0614\u0613\x03\x02\x02\x02\u0615\u0616\x03\x02\x02\x02" +
		"\u0616\u0614\x03\x02\x02\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0618\x03" +
		"\x02\x02\x02\u0618\u0626\t\x07\x02\x02\u0619\u061B\x05\b\x05\x02\u061A" +
		"\u0619\x03\x02\x02\x02\u061B\u061C\x03\x02\x02\x02\u061C\u061A\x03\x02" +
		"\x02\x02\u061C\u061D\x03\x02\x02\x02\u061D\u061E\x03\x02\x02\x02\u061E" +
		"\u0620\x05\\/\x02\u061F\u0621\x05\b\x05\x02\u0620\u061F\x03\x02\x02\x02" +
		"\u0621\u0622\x03\x02\x02\x02\u0622\u0620\x03\x02\x02\x02\u0622\u0623\x03" +
		"\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0624\u0625\x07\xBB\x02\x02\u0625" +
		"\u0627\x03\x02\x02\x02\u0626\u061A\x03\x02\x02\x02\u0626\u0627\x03\x02" +
		"\x02\x02\u0627\u0637\x03\x02\x02\x02\u0628\u062A\x05\b\x05\x02\u0629\u0628" +
		"\x03\x02\x02\x02\u062A\u062B\x03\x02\x02\x02\u062B\u0629\x03\x02\x02\x02" +
		"\u062B\u062C\x03\x02\x02\x02\u062C\u062D\x03\x02\x02\x02\u062D\u0635\x05" +
		"\u0278\u013D\x02\u062E\u0630\x05\b\x05\x02\u062F\u062E\x03\x02\x02\x02" +
		"\u0630\u0631\x03\x02\x02\x02\u0631\u062F\x03\x02\x02\x02\u0631\u0632\x03" +
		"\x02\x02\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0634\x07\u0142\x02\x02" +
		"\u0634\u0636\x03\x02\x02\x02\u0635\u062F\x03\x02\x02\x02\u0635\u0636\x03" +
		"\x02\x02\x02\u0636\u0638\x03\x02\x02\x02\u0637\u0629\x03\x02\x02\x02\u0638" +
		"\u0639\x03\x02\x02\x02\u0639\u0637\x03\x02\x02\x02\u0639\u063A\x03\x02" +
		"\x02\x02\u063A\u0642\x03\x02\x02\x02\u063B\u063D\x05\b\x05\x02\u063C\u063B" +
		"\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E\u063C\x03\x02\x02\x02" +
		"\u063E\u063F\x03\x02\x02\x02\u063F\u0640\x03\x02\x02\x02\u0640\u0641\x05" +
		"\xA6T\x02\u0641\u0643\x03\x02\x02\x02\u0642\u063C\x03\x02\x02\x02\u0642" +
		"\u0643\x03\x02\x02\x02\u0643\u064B\x03\x02\x02\x02\u0644\u0646\x05\b\x05" +
		"\x02\u0645\u0644\x03\x02\x02\x02\u0646\u0647\x03\x02\x02\x02\u0647\u0645" +
		"\x03\x02\x02\x02\u0647\u0648\x03\x02\x02\x02\u0648\u0649\x03\x02\x02\x02" +
		"\u0649\u064A\x07\x88\x02\x02\u064A\u064C\x03\x02\x02\x02\u064B\u0645\x03" +
		"\x02\x02\x02\u064B\u064C\x03\x02\x02\x02\u064CW\x03\x02\x02\x02\u064D" +
		"\u064F\x07y\x02\x02\u064E\u0650\x05\b\x05\x02\u064F\u064E\x03\x02\x02" +
		"\x02\u0650\u0651\x03\x02\x02\x02\u0651\u064F\x03\x02\x02\x02\u0651\u0652" +
		"\x03\x02\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x05\\/\x02\u0654" +
		"\u0656\x05\b\x05\x02\u0655\u0654\x03\x02\x02\x02\u0656\u0657\x03\x02\x02" +
		"\x02\u0657\u0655\x03\x02\x02\x02\u0657\u0658\x03\x02\x02\x02\u0658\u0659" +
		"\x03\x02\x02\x02\u0659\u0667\t\x07\x02\x02\u065A\u065C\x05\b\x05\x02\u065B" +
		"\u065A\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\u065B\x03\x02" +
		"\x02\x02\u065D\u065E\x03\x02\x02\x02\u065E\u065F\x03\x02\x02\x02\u065F" +
		"\u0661\x05\\/\x02\u0660\u0662\x05\b\x05\x02\u0661\u0660\x03\x02\x02\x02" +
		"\u0662\u0663\x03\x02\x02\x02\u0663\u0661\x03\x02\x02\x02\u0663\u0664\x03" +
		"\x02\x02\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0666\x07\xBB\x02\x02\u0666" +
		"\u0668\x03\x02\x02\x02\u0667\u065B\x03\x02\x02\x02\u0667\u0668\x03\x02" +
		"\x02\x02\u0668\u066A\x03\x02\x02\x02\u0669\u066B\x05\b\x05\x02\u066A\u0669" +
		"\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C\u066A\x03\x02\x02\x02" +
		"\u066C\u066D\x03\x02\x02\x02\u066D\u066E\x03\x02\x02\x02\u066E\u0676\x05" +
		"\u0278\u013D\x02\u066F\u0671\x05\b\x05\x02\u0670\u066F\x03\x02\x02\x02" +
		"\u0671\u0672\x03\x02\x02\x02\u0672\u0670\x03\x02\x02\x02\u0672\u0673\x03" +
		"\x02\x02\x02\u0673\u0674\x03\x02\x02\x02\u0674\u0675\x07\u0142\x02\x02" +
		"\u0675\u0677\x03\x02\x02\x02\u0676\u0670\x03\x02\x02\x02\u0676\u0677\x03" +
		"\x02\x02\x02\u0677\u0679\x03\x02\x02\x02\u0678\u067A\x05\b\x05\x02\u0679" +
		"\u0678\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02\u067B\u0679\x03\x02" +
		"\x02\x02\u067B\u067C\x03\x02\x02\x02\u067C\u067D\x03\x02\x02\x02\u067D" +
		"\u067F\x07\u012D\x02\x02\u067E\u0680\x05\b\x05\x02\u067F\u067E\x03\x02" +
		"\x02\x02\u0680\u0681\x03\x02\x02\x02\u0681\u067F\x03\x02\x02\x02\u0681" +
		"\u0682\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683\u068B\x05Z.\x02" +
		"\u0684\u0686\x05\b\x05\x02\u0685\u0684\x03\x02\x02\x02\u0686\u0687\x03" +
		"\x02\x02\x02\u0687\u0685\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688" +
		"\u0689\x03\x02\x02\x02\u0689\u068A\x05\xA6T\x02\u068A\u068C\x03\x02\x02" +
		"\x02\u068B\u0685\x03\x02\x02\x02\u068B\u068C\x03\x02\x02\x02\u068C\u0694" +
		"\x03\x02\x02\x02\u068D\u068F\x05\b\x05\x02\u068E\u068D\x03\x02\x02\x02" +
		"\u068F\u0690\x03\x02\x02\x02\u0690\u068E\x03\x02\x02\x02\u0690\u0691\x03" +
		"\x02\x02\x02\u0691\u0692\x03\x02\x02\x02\u0692\u0693\x07\x88\x02\x02\u0693" +
		"\u0695\x03\x02\x02\x02\u0694\u068E\x03\x02\x02\x02\u0694\u0695\x03\x02" +
		"\x02\x02\u0695Y\x03\x02\x02\x02\u0696\u0697\x05\u0278\u013D\x02\u0697" +
		"[\x03\x02\x02\x02\u0698\u069B\x05\u027A\u013E\x02\u0699\u069B\x07\u01B6" +
		"\x02\x02\u069A\u0698\x03\x02\x02\x02\u069A\u0699\x03\x02\x02\x02\u069B" +
		"]\x03\x02\x02\x02\u069C\u06A1\x05`1\x02\u069D\u06A1\x05b2\x02\u069E\u06A1" +
		"\x05d3\x02\u069F\u06A1\x05f4\x02\u06A0\u069C\x03\x02\x02\x02\u06A0\u069D" +
		"\x03\x02\x02\x02\u06A0\u069E\x03\x02\x02\x02\u06A0\u069F\x03\x02\x02\x02" +
		"\u06A1_\x03\x02\x02\x02\u06A2\u06B5\x07x\x02\x02\u06A3\u06A5\x05\b\x05" +
		"\x02\u06A4\u06A3\x03\x02\x02\x02\u06A5\u06A6\x03\x02\x02\x02\u06A6\u06A4" +
		"\x03\x02\x02\x02\u06A6\u06A7\x03\x02\x02\x02\u06A7\u06A8\x03\x02\x02\x02" +
		"\u06A8\u06B2\x05h5\x02\u06A9\u06AB\x05\b\x05\x02\u06AA\u06A9\x03\x02\x02" +
		"\x02\u06AB\u06AC\x03\x02\x02\x02\u06AC\u06AA\x03\x02\x02\x02\u06AC\u06AD" +
		"\x03\x02\x02\x02\u06AD\u06AE\x03\x02\x02\x02\u06AE\u06AF\x05p9\x02\u06AF" +
		"\u06B1\x03\x02\x02\x02\u06B0\u06AA\x03\x02\x02\x02\u06B1\u06B4\x03\x02" +
		"\x02\x02\u06B2\u06B0\x03\x02\x02\x02\u06B2\u06B3\x03\x02\x02\x02\u06B3" +
		"\u06B6\x03\x02\x02\x02\u06B4\u06B2\x03\x02\x02\x02\u06B5\u06A4\x03\x02" +
		"\x02\x02\u06B6\u06B7\x03\x02\x02\x02\u06B7\u06B5\x03\x02\x02\x02\u06B7" +
		"\u06B8\x03\x02\x02\x02\u06B8\u06C0\x03\x02\x02\x02\u06B9\u06BB\x05\b\x05" +
		"\x02\u06BA\u06B9\x03\x02\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC\u06BA" +
		"\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02" +
		"\u06BE\u06BF\x07\x87\x02\x02\u06BF\u06C1\x03\x02\x02\x02\u06C0\u06BA\x03" +
		"\x02\x02\x02\u06C0\u06C1\x03\x02\x02\x02\u06C1a\x03\x02\x02\x02\u06C2" +
		"\u06D5\x07x\x02\x02\u06C3\u06C5\x05\b\x05\x02\u06C4\u06C3\x03\x02\x02" +
		"\x02\u06C5\u06C6\x03\x02\x02\x02\u06C6\u06C4\x03\x02\x02\x02\u06C6\u06C7" +
		"\x03\x02\x02\x02\u06C7\u06C8\x03\x02\x02\x02\u06C8\u06D2\x05h5\x02\u06C9" +
		"\u06CB\x05\b\x05\x02\u06CA\u06C9\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02" +
		"\x02\u06CC\u06CA\x03\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02\u06CD\u06CE" +
		"\x03\x02\x02\x02\u06CE\u06CF\x05r:\x02\u06CF\u06D1\x03\x02\x02\x02\u06D0" +
		"\u06CA\x03\x02\x02\x02\u06D1\u06D4\x03\x02\x02\x02\u06D2\u06D0\x03\x02" +
		"\x02\x02\u06D2\u06D3\x03\x02\x02\x02\u06D3\u06D6\x03\x02\x02\x02\u06D4" +
		"\u06D2\x03\x02\x02\x02\u06D5\u06C4\x03\x02\x02\x02\u06D6\u06D7\x03\x02" +
		"\x02\x02\u06D7\u06D5\x03\x02\x02\x02\u06D7\u06D8\x03\x02\x02\x02\u06D8" +
		"\u06E0\x03\x02\x02\x02\u06D9\u06DB\x05\b\x05\x02\u06DA\u06D9\x03\x02\x02" +
		"\x02\u06DB\u06DC\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DC\u06DD" +
		"\x03\x02\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06DF\x07\x87\x02\x02" +
		"\u06DF\u06E1\x03\x02\x02\x02\u06E0\u06DA\x03\x02\x02\x02\u06E0\u06E1\x03" +
		"\x02\x02\x02\u06E1c\x03\x02\x02\x02\u06E2\u06E4\x07x\x02\x02\u06E3\u06E5" +
		"\x05\b\x05\x02\u06E4\u06E3\x03\x02\x02\x02\u06E5\u06E6\x03\x02\x02\x02" +
		"\u06E6\u06E4\x03\x02\x02\x02\u06E6\u06E7\x03\x02\x02\x02\u06E7\u06E8\x03" +
		"\x02\x02\x02\u06E8\u0703\x05\u01CE\xE8\x02\u06E9\u06EB\x05\b\x05\x02\u06EA" +
		"\u06E9\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06EA\x03\x02" +
		"\x02\x02\u06EC\u06ED\x03\x02\x02\x02\u06ED\u06F4\x03\x02\x02\x02\u06EE" +
		"\u06F0\x07\x1F\x02\x02\u06EF\u06F1\x05\b\x05\x02\u06F0\u06EF\x03\x02\x02" +
		"\x02\u06F1\u06F2\x03\x02\x02\x02\u06F2\u06F0\x03\x02\x02\x02\u06F2\u06F3" +
		"\x03\x02\x02\x02\u06F3\u06F5\x03\x02\x02\x02\u06F4\u06EE\x03\x02\x02\x02" +
		"\u06F4\u06F5\x03\x02\x02\x02\u06F5\u0701\x03\x02\x02\x02\u06F6\u06FE\x05" +
		"l7\x02\u06F7\u06F9\x05\b\x05\x02\u06F8\u06F7\x03\x02\x02\x02\u06F9\u06FA" +
		"\x03\x02\x02\x02\u06FA\u06F8\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02" +
		"\u06FB\u06FC\x03\x02\x02\x02\u06FC\u06FD\x05n8\x02\u06FD\u06FF\x03\x02" +
		"\x02\x02\u06FE\u06F8\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF" +
		"\u0702\x03\x02\x02\x02\u0700\u0702\x05n8\x02\u0701\u06F6\x03\x02\x02\x02" +
		"\u0701\u0700\x03\x02\x02\x02\u0702\u0704\x03\x02\x02\x02\u0703\u06EA\x03" +
		"\x02\x02\x02\u0703\u0704\x03\x02\x02\x02\u0704\u070C\x03\x02\x02\x02\u0705" +
		"\u0707\x05\b\x05\x02\u0706\u0705\x03\x02\x02\x02\u0707";
	private static readonly _serializedATNSegment6: string =
		"\u0708\x03\x02\x02\x02\u0708\u0706\x03\x02\x02\x02\u0708\u0709\x03\x02" +
		"\x02\x02\u0709\u070A\x03\x02\x02\x02\u070A\u070B\x07\x87\x02\x02\u070B" +
		"\u070D\x03\x02\x02\x02\u070C\u0706\x03\x02\x02\x02\u070C\u070D\x03\x02" +
		"\x02\x02\u070De\x03\x02\x02\x02\u070E\u0710\x07x\x02\x02\u070F\u0711\x05" +
		"\b\x05\x02\u0710\u070F\x03\x02\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712" +
		"\u0710\x03\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u0714\x03\x02" +
		"\x02\x02\u0714\u0716\x05h5\x02\u0715\u0717\x05\b\x05\x02\u0716\u0715\x03" +
		"\x02\x02\x02\u0717\u0718\x03\x02\x02\x02\u0718\u0716\x03\x02\x02\x02\u0718" +
		"\u0719\x03\x02\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A\u071C\x07\u0181" +
		"\x02\x02\u071B\u071D\x05\b\x05\x02\u071C\u071B\x03\x02\x02\x02\u071D\u071E" +
		"\x03\x02\x02\x02\u071E\u071C\x03\x02\x02\x02\u071E\u071F\x03\x02\x02\x02" +
		"\u071F\u0720\x03\x02\x02\x02\u0720\u0728\x05j6\x02\u0721\u0723\x05\b\x05" +
		"\x02\u0722\u0721\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724\u0722" +
		"\x03\x02\x02\x02\u0724\u0725\x03\x02\x02\x02\u0725\u0726\x03\x02\x02\x02" +
		"\u0726\u0727\x05\xA2R\x02\u0727\u0729\x03\x02\x02\x02\u0728\u0722\x03" +
		"\x02\x02\x02\u0728\u0729\x03\x02\x02\x02\u0729\u0731\x03\x02\x02\x02\u072A" +
		"\u072C\x05\b\x05\x02\u072B\u072A\x03\x02\x02\x02\u072C\u072D\x03\x02\x02" +
		"\x02\u072D\u072B\x03\x02\x02\x02\u072D\u072E\x03\x02\x02\x02\u072E\u072F" +
		"\x03\x02\x02\x02\u072F\u0730\x07\x87\x02\x02\u0730\u0732\x03\x02\x02\x02" +
		"\u0731\u072B\x03\x02\x02\x02\u0731\u0732\x03\x02\x02\x02\u0732g\x03\x02" +
		"\x02\x02\u0733\u0736\x05\u027A\u013E\x02\u0734\u0736\x05\u0260\u0131\x02" +
		"\u0735\u0733\x03\x02\x02\x02\u0735\u0734\x03\x02\x02\x02\u0736i\x03\x02" +
		"\x02\x02\u0737\u0738\x07\u01B8\x02\x02\u0738k\x03\x02\x02\x02\u0739\u073B" +
		"\x07\xE4\x02\x02\u073A\u073C\x05\b\x05\x02\u073B\u073A\x03\x02\x02\x02" +
		"\u073C\u073D\x03\x02\x02\x02\u073D\u073B\x03\x02\x02\x02\u073D\u073E\x03" +
		"\x02\x02\x02\u073E\u073F\x03\x02\x02\x02\u073F\u0740\x07\xFB\x02\x02\u0740" +
		"\u0742\x03\x02\x02\x02\u0741\u0743\x05\b\x05\x02\u0742\u0741\x03\x02\x02" +
		"\x02\u0743\u0744\x03\x02\x02\x02\u0744\u0742\x03\x02\x02\x02\u0744\u0745" +
		"\x03\x02\x02\x02\u0745\u0748\x03\x02\x02\x02\u0746\u0749\x05\u027A\u013E" +
		"\x02\u0747\u0749\x07\u01B6\x02\x02\u0748\u0746\x03\x02\x02\x02\u0748\u0747" +
		"\x03\x02\x02\x02\u0749m\x03\x02\x02\x02\u074A\u074C\x07A\x02\x02\u074B" +
		"\u074D\x05\b\x05\x02\u074C\u074B\x03\x02\x02\x02\u074D\u074E\x03\x02\x02" +
		"\x02\u074E\u074C\x03\x02\x02\x02\u074E\u074F\x03\x02\x02\x02\u074F\u0750" +
		"\x03\x02\x02\x02\u0750\u0751\x07\xFB\x02\x02\u0751\u0753\x03\x02\x02\x02" +
		"\u0752\u0754\x05\b\x05\x02\u0753\u0752\x03\x02\x02\x02\u0754\u0755\x03" +
		"\x02\x02\x02\u0755\u0753\x03\x02\x02\x02\u0755\u0756\x03\x02\x02\x02\u0756" +
		"\u0759\x03\x02\x02\x02\u0757\u075A\x05\u027A\u013E\x02\u0758\u075A\x07" +
		"\u01B6\x02\x02\u0759\u0757\x03\x02\x02\x02\u0759\u0758\x03\x02\x02\x02" +
		"\u075Ao\x03\x02\x02\x02\u075B\u075D\x07\u018B\x02\x02\u075C\u075E\x05" +
		"\b\x05\x02\u075D\u075C\x03\x02\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F" +
		"\u075D\x03\x02\x02\x02\u075F\u0760\x03\x02\x02\x02\u0760\u0762\x03\x02" +
		"\x02\x02\u0761\u075B\x03\x02\x02\x02\u0761\u0762\x03\x02\x02\x02\u0762" +
		"\u0763\x03\x02\x02\x02\u0763\u077F\x07\\\x02\x02\u0764\u0766\x07\u0181" +
		"\x02\x02\u0765\u0767\x05\b\x05\x02\u0766\u0765\x03\x02\x02\x02\u0767\u0768" +
		"\x03\x02\x02\x02\u0768\u0766\x03\x02\x02\x02\u0768\u0769\x03\x02\x02\x02" +
		"\u0769\u076A\x03\x02\x02\x02\u076A\u076B\x05x=\x02\u076B\u077F\x03\x02" +
		"\x02\x02\u076C\u076E\x07\u018B\x02\x02\u076D\u076F\x05\b\x05\x02\u076E" +
		"\u076D\x03\x02\x02\x02\u076F\u0770\x03\x02\x02\x02\u0770\u076E\x03\x02" +
		"\x02\x02\u0770\u0771\x03\x02\x02\x02\u0771\u0773\x03\x02\x02\x02\u0772" +
		"\u076C\x03\x02\x02\x02\u0772\u0773\x03\x02\x02\x02\u0773\u0774\x03\x02" +
		"\x02\x02\u0774\u077C\x07\xF9\x02\x02\u0775\u0777\x05\b\x05\x02\u0776\u0775" +
		"\x03\x02\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778\u0776\x03\x02\x02\x02" +
		"\u0778\u0779\x03\x02\x02\x02\u0779\u077A\x03\x02\x02\x02\u077A\u077B\x07" +
		"\t\x02\x02\u077B\u077D\x03\x02\x02\x02\u077C\u0776\x03\x02\x02\x02\u077C" +
		"\u077D\x03\x02\x02\x02\u077D\u077F\x03\x02\x02\x02\u077E\u0761\x03\x02" +
		"\x02\x02\u077E\u0764\x03\x02\x02\x02\u077E\u0772\x03\x02\x02\x02\u077F" +
		"q\x03\x02\x02\x02\u0780\u07D5\x05p9\x02\u0781\u07D5\x05t;\x02\u0782\u07D5" +
		"\x05v<\x02\u0783\u079B\x07\x9D\x02\x02\u0784\u0786\x05\b\x05\x02\u0785" +
		"\u0784\x03\x02\x02\x02\u0786\u0787\x03\x02\x02\x02\u0787\u0785\x03\x02" +
		"\x02\x02\u0787\u0788\x03\x02\x02\x02\u0788\u078F\x03\x02\x02\x02\u0789" +
		"\u078B\x07\u0175\x02\x02\u078A\u078C\x05\b\x05\x02\u078B\u078A\x03\x02" +
		"\x02\x02\u078C\u078D\x03\x02\x02\x02\u078D\u078B\x03\x02\x02\x02\u078D" +
		"\u078E\x03\x02\x02\x02\u078E\u0790\x03\x02\x02\x02\u078F\u0789\x03\x02" +
		"\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\u0791\x03\x02\x02\x02\u0791" +
		"\u0799\x07\x81\x02\x02\u0792\u0794\x05\b\x05\x02\u0793\u0792\x03\x02\x02" +
		"\x02\u0794\u0795\x03\x02\x02\x02\u0795\u0793\x03\x02\x02\x02\u0795\u0796" +
		"\x03\x02\x02\x02\u0796\u0797\x03\x02\x02\x02\u0797\u0798\x07\xFF\x02\x02" +
		"\u0798\u079A\x03\x02\x02\x02\u0799\u0793\x03\x02\x02\x02\u0799\u079A\x03" +
		"\x02\x02\x02\u079A\u079C\x03\x02\x02\x02\u079B\u0785\x03\x02\x02\x02\u079B" +
		"\u079C\x03\x02\x02\x02\u079C\u079E\x03\x02\x02\x02\u079D\u079F\x05\b\x05" +
		"\x02\u079E\u079D\x03\x02\x02\x02\u079F\u07A0\x03\x02\x02\x02\u07A0\u079E" +
		"\x03\x02\x02\x02\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A2\x03\x02\x02\x02" +
		"\u07A2\u07A3\t\b\x02\x02\u07A3\u07D5\x03\x02\x02\x02\u07A4\u07A6\x07\u018B" +
		"\x02\x02\u07A5\u07A7\x05\b\x05\x02\u07A6\u07A5\x03\x02\x02\x02\u07A7\u07A8" +
		"\x03\x02\x02\x02\u07A8\u07A6\x03\x02\x02\x02\u07A8\u07A9\x03\x02\x02\x02" +
		"\u07A9\u07AB\x03\x02\x02\x02\u07AA\u07A4\x03\x02\x02\x02\u07AA\u07AB\x03" +
		"\x02\x02\x02\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07D5\x07&\x02\x02\u07AD" +
		"\u07D5\x07\u017B\x02\x02\u07AE\u07D5\x070\x02\x02\u07AF\u07B1\x07\u018B" +
		"\x02\x02\u07B0\u07B2\x05\b\x05\x02\u07B1\u07B0\x03\x02\x02\x02\u07B2\u07B3" +
		"\x03\x02\x02\x02\u07B3\u07B1\x03\x02\x02\x02\u07B3\u07B4\x03\x02\x02\x02" +
		"\u07B4\u07B6\x03\x02\x02\x02\u07B5\u07AF\x03\x02\x02\x02\u07B5\u07B6\x03" +
		"\x02\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7\u07D5\x07.\x02\x02\u07B8" +
		"\u07D5\x07\u013A\x02\x02\u07B9\u07BB\x07\u018B\x02\x02\u07BA\u07BC\x05" +
		"\b\x05\x02\u07BB\u07BA\x03\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD" +
		"\u07BB\x03\x02\x02\x02\u07BD\u07BE\x03\x02\x02\x02\u07BE\u07C0\x03\x02" +
		"\x02\x02\u07BF\u07B9\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0" +
		"\u07C1\x03\x02\x02\x02\u07C1\u07D5\x07\\\x02\x02\u07C2\u07C4\x07\u018B" +
		"\x02\x02\u07C3\u07C5\x05\b\x05\x02\u07C4\u07C3\x03\x02\x02\x02\u07C5\u07C6" +
		"\x03\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6\u07C7\x03\x02\x02\x02" +
		"\u07C7\u07C9\x03\x02\x02\x02\u07C8\u07C2\x03\x02\x02\x02\u07C8\u07C9\x03" +
		"\x02\x02\x02\u07C9\u07CA\x03\x02\x02\x02\u07CA\u07D2\x07\xF9\x02\x02\u07CB" +
		"\u07CD\x05\b\x05\x02\u07CC\u07CB\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02" +
		"\x02\u07CE\u07CC\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\u07D0" +
		"\x03\x02\x02\x02\u07D0\u07D1\x07\t\x02\x02\u07D1\u07D3\x03\x02\x02\x02" +
		"\u07D2\u07CC\x03\x02\x02\x02\u07D2\u07D3\x03\x02\x02\x02\u07D3\u07D5\x03" +
		"\x02\x02\x02\u07D4\u0780\x03\x02\x02\x02\u07D4\u0781\x03\x02\x02\x02\u07D4" +
		"\u0782\x03\x02\x02\x02\u07D4\u0783\x03\x02\x02\x02\u07D4\u07AA\x03\x02" +
		"\x02\x02\u07D4\u07AD\x03\x02\x02\x02\u07D4\u07AE\x03\x02\x02\x02\u07D4" +
		"\u07B5\x03\x02\x02\x02\u07D4\u07B8\x03\x02\x02\x02\u07D4\u07BF\x03\x02" +
		"\x02\x02\u07D4\u07C8\x03\x02\x02\x02\u07D5s\x03\x02\x02\x02\u07D6\u07D8" +
		"\x07\x1F\x02\x02\u07D7\u07D9\x05\b\x05\x02\u07D8\u07D7\x03\x02\x02\x02" +
		"\u07D9\u07DA\x03\x02\x02\x02\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03" +
		"\x02\x02\x02\u07DB\u07DD\x03\x02\x02\x02\u07DC\u07D6\x03\x02\x02\x02\u07DC" +
		"\u07DD\x03\x02\x02\x02\u07DD\u07DE\x03\x02\x02\x02\u07DE\u07E6\x07\xE4" +
		"\x02\x02\u07DF\u07E1\x05\b\x05\x02\u07E0\u07DF\x03\x02\x02\x02\u07E1\u07E2" +
		"\x03\x02\x02\x02\u07E2\u07E0\x03\x02\x02\x02\u07E2\u07E3\x03\x02\x02\x02" +
		"\u07E3\u07E4\x03\x02\x02\x02\u07E4\u07E5\x07\xFB\x02\x02\u07E5\u07E7\x03" +
		"\x02\x02\x02\u07E6\u07E0\x03\x02\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7" +
		"\u07E9\x03\x02\x02\x02\u07E8\u07EA\x05\b\x05\x02\u07E9\u07E8\x03\x02\x02" +
		"\x02\u07EA\u07EB\x03\x02\x02\x02\u07EB\u07E9\x03\x02\x02\x02\u07EB\u07EC" +
		"\x03\x02\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07EE\x05\xCCg\x02" +
		"\u07EEu\x03\x02\x02\x02\u07EF\u07F1\x07\x1F\x02\x02\u07F0\u07F2\x05\b" +
		"\x05\x02\u07F1\u07F0\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3" +
		"\u07F1\x03\x02\x02\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4\u07F6\x03\x02" +
		"\x02\x02\u07F5\u07EF\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6" +
		"\u07F7\x03\x02\x02\x02\u07F7\u07FF\x07A\x02\x02\u07F8\u07FA\x05\b\x05" +
		"\x02\u07F9\u07F8\x03\x02\x02\x02\u07FA\u07FB\x03\x02\x02\x02\u07FB\u07F9" +
		"\x03\x02\x02\x02\u07FB\u07FC\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02\x02" +
		"\u07FD\u07FE\x07\xFB\x02\x02\u07FE\u0800\x03\x02\x02\x02\u07FF\u07F9\x03" +
		"\x02\x02\x02\u07FF\u0800\x03\x02\x02\x02\u0800\u0802\x03\x02\x02\x02\u0801" +
		"\u0803\x05\b\x05\x02\u0802\u0801\x03\x02\x02\x02\u0803\u0804\x03\x02\x02" +
		"\x02\u0804\u0802\x03\x02\x02\x02\u0804\u0805\x03\x02\x02\x02\u0805\u0806" +
		"\x03\x02\x02\x02\u0806\u0807\x05\xCCg\x02\u0807w\x03\x02\x02\x02\u0808" +
		"\u0809\x07\u01B8\x02\x02\u0809y\x03\x02\x02\x02\u080A\u080C\x07q\x02\x02" +
		"\u080B\u080D\x05\b\x05\x02\u080C\u080B\x03\x02\x02\x02\u080D\u080E\x03" +
		"\x02\x02\x02\u080E\u080C\x03\x02\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F" +
		"\u0810\x03\x02\x02\x02\u0810\u0818\x05\u0238\u011D\x02\u0811\u0813\x05" +
		"\b\x05\x02\u0812\u0811\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814" +
		"\u0812\x03\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0816\x03\x02" +
		"\x02\x02\u0816\u0817\x07\u0126\x02\x02\u0817\u0819\x03\x02\x02\x02\u0818" +
		"\u0812\x03\x02\x02\x02\u0818\u0819\x03\x02\x02\x02\u0819\u0821\x03\x02" +
		"\x02\x02\u081A\u081C\x05\b\x05\x02\u081B\u081A\x03\x02\x02\x02\u081C\u081D" +
		"\x03\x02\x02\x02\u081D\u081B\x03\x02\x02\x02\u081D\u081E\x03\x02\x02\x02" +
		"\u081E\u081F\x03\x02\x02\x02\u081F\u0820\x05\xA8U\x02\u0820\u0822\x03" +
		"\x02\x02\x02\u0821\u081B\x03\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822" +
		"\u082A\x03\x02\x02\x02\u0823\u0825\x05\b\x05\x02\u0824\u0823\x03\x02\x02" +
		"\x02\u0825\u0826\x03\x02\x02\x02\u0826\u0824\x03\x02\x02\x02\u0826\u0827" +
		"\x03\x02\x02\x02\u0827\u0828\x03\x02\x02\x02\u0828\u0829\x07\x86\x02\x02" +
		"\u0829\u082B\x03\x02\x02\x02\u082A\u0824\x03\x02\x02\x02\u082A\u082B\x03" +
		"\x02\x02\x02\u082B{\x03\x02\x02\x02\u082C\u082D\x07Y\x02\x02\u082D}\x03" +
		"\x02\x02\x02\u082E\u083E\x07L\x02\x02\u082F\u0831\x05\b\x05\x02\u0830" +
		"\u082F\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02\u0832\u0830\x03\x02" +
		"\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834" +
		"\u083C\x05\u0278\u013D\x02\u0835\u0837\x05\b\x05\x02\u0836\u0835\x03\x02" +
		"\x02\x02\u0837\u0838\x03\x02\x02\x02\u0838\u0836\x03\x02\x02\x02\u0838" +
		"\u0839\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x07\u0142" +
		"\x02\x02\u083B\u083D\x03\x02\x02\x02\u083C\u0836\x03\x02\x02\x02\u083C" +
		"\u083D\x03\x02\x02\x02\u083D\u083F\x03\x02\x02\x02\u083E\u0830\x03\x02" +
		"\x02\x02\u083F\u0840\x03\x02\x02\x02\u0840\u083E\x03\x02\x02\x02\u0840" +
		"\u0841\x03\x02\x02\x02\u0841\u085A\x03\x02\x02\x02\u0842\u0844\x05\b\x05" +
		"\x02\u0843\u0842\x03\x02\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845\u0843" +
		"\x03\x02\x02\x02\u0845\u0846\x03\x02\x02\x02\u0846\u0847\x03\x02\x02\x02" +
		"\u0847\u0849\x07\x9C\x02\x02\u0848\u084A\x05\b\x05\x02\u0849\u0848\x03" +
		"\x02\x02\x02\u084A\u084B\x03\x02\x02\x02\u084B\u0849\x03\x02\x02\x02\u084B" +
		"\u084C\x03\x02\x02\x02\u084C\u085B\x03\x02\x02\x02\u084D\u084F\x05\b\x05" +
		"\x02\u084E\u084D\x03\x02\x02\x02\u084F\u0852\x03\x02\x02\x02\u0850\u084E" +
		"\x03\x02\x02\x02\u0850\u0851\x03\x02\x02\x02\u0851\u0853\x03\x02\x02\x02" +
		"\u0852\u0850\x03\x02\x02\x02\u0853\u0857\x07\u01A7\x02\x02\u0854\u0856" +
		"\x05\b\x05\x02\u0855\u0854\x03\x02\x02\x02\u0856\u0859\x03\x02\x02\x02" +
		"\u0857\u0855\x03\x02\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858\u085B\x03" +
		"\x02\x02\x02\u0859\u0857\x03\x02\x02\x02\u085A\u0843\x03\x02\x02\x02\u085A" +
		"\u0850\x03\x02\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u0864\x05\u025E" +
		"\u0130\x02\u085D\u085F\x05\b\x05\x02\u085E\u085D\x03\x02\x02\x02\u085F" +
		"\u0860\x03\x02\x02\x02\u0860\u085E\x03\x02\x02\x02\u0860\u0861\x03\x02" +
		"\x02\x02\u0861\u0862\x03\x02\x02\x02\u0862\u0863\x05\xA6T\x02\u0863\u0865" +
		"\x03\x02\x02\x02\u0864\u085E\x03\x02\x02\x02\u0864\u0865\x03\x02\x02\x02" +
		"\u0865\u086D\x03\x02\x02\x02\u0866\u0868\x05\b\x05\x02\u0867\u0866\x03" +
		"\x02\x02\x02\u0868\u0869\x03\x02\x02\x02\u0869\u0867\x03\x02\x02\x02\u0869" +
		"\u086A\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u086C\x07\x85" +
		"\x02\x02\u086C\u086E\x03\x02\x02\x02\u086D\u0867\x03\x02\x02\x02\u086D" +
		"\u086E\x03\x02\x02\x02\u086E\x7F\x03\x02\x02\x02\u086F\u087F\x07=\x02" +
		"\x02\u0870\u0872\x05\b\x05\x02\u0871\u0870\x03\x02\x02\x02\u0872\u0873" +
		"\x03\x02\x02\x02\u0873\u0871\x03\x02\x02\x02\u0873\u0874\x03\x02\x02\x02" +
		"\u0874\u0875\x03\x02\x02\x02\u0875\u087D\x05\u0238\u011D\x02\u0876\u0878" +
		"\x05\b\x05\x02\u0877\u0876\x03\x02\x02\x02\u0878\u0879\x03\x02\x02\x02" +
		"\u0879\u0877\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A\u087B\x03" +
		"\x02\x02\x02\u087B\u087C\x05\x82B\x02\u087C\u087E\x03\x02\x02\x02\u087D" +
		"\u0877\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E\u0880\x03\x02" +
		"\x02\x02\u087F\u0871\x03\x02\x02\x02\u0880\u0881\x03\x02\x02\x02\u0881" +
		"\u087F\x03\x02\x02\x02\u0881\u0882\x03\x02\x02\x02\u0882\x81\x03\x02\x02" +
		"\x02\u0883\u08A4\t\t\x02\x02\u0884\u0886\x05\b\x05\x02\u0885\u0884\x03" +
		"\x02\x02\x02\u0886\u0887\x03\x02\x02\x02\u0887\u0885\x03\x02\x02\x02\u0887" +
		"\u0888\x03\x02\x02\x02\u0888\u08A2\x03\x02\x02\x02\u0889\u088B\x07\xB5" +
		"\x02\x02\u088A\u088C\x05\b\x05\x02\u088B\u088A\x03\x02\x02\x02\u088C\u088D" +
		"\x03\x02\x02\x02\u088D\u088B\x03\x02\x02\x02\u088D\u088E\x03\x02\x02\x02" +
		"\u088E\u0890\x03\x02\x02\x02\u088F\u0889\x03\x02\x02\x02\u088F\u0890\x03" +
		"\x02\x02\x02\u0890\u0891\x03\x02\x02\x02\u0891\u08A3\x07\u012E\x02\x02" +
		"\u0892\u0894\x07\u018B\x02\x02\u0893\u0895\x05\b\x05\x02\u0894\u0893\x03" +
		"\x02\x02\x02\u0895\u0896\x03\x02\x02\x02\u0896\u0894\x03\x02\x02\x02\u0896" +
		"\u0897\x03\x02\x02\x02\u0897\u0899\x03\x02\x02\x02\u0898\u0892\x03\x02" +
		"\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u089A\x03\x02\x02\x02\u089A" +
		"\u089C\x07\xF9\x02\x02\u089B\u089D\x05\b\x05\x02\u089C\u089B\x03\x02\x02" +
		"\x02\u089D\u089E\x03\x02\x02\x02\u089E\u089C\x03\x02\x02\x02\u089E\u089F" +
		"\x03\x02\x02\x02\u089F\u08A0\x03\x02\x02\x02\u08A0\u08A1\x07\u013C\x02" +
		"\x02\u08A1\u08A3\x03\x02\x02\x02\u08A2\u088F\x03\x02\x02\x02\u08A2\u0898" +
		"\x03\x02\x02\x02\u08A3\u08A5\x03\x02\x02\x02\u08A4\u0885\x03\x02\x02\x02" +
		"\u08A4\u08A5\x03\x02\x02\x02\u08A5\u08BA\x03\x02\x02\x02\u08A6\u08A8\x07" +
		"\u018B\x02\x02\u08A7\u08A9\x05\b\x05\x02\u08A8\u08A7\x03\x02\x02\x02\u08A9" +
		"\u08AA\x03\x02\x02\x02\u08AA\u08A8\x03\x02\x02\x02\u08AA\u08AB\x03\x02" +
		"\x02\x02\u08AB\u08AD\x03\x02\x02\x02\u08AC\u08A6\x03\x02\x02\x02\u08AC" +
		"\u08AD\x03\x02\x02\x02\u08AD\u08B7\x03\x02\x02\x02\u08AE\u08B0\x07\xF9" +
		"\x02\x02\u08AF\u08B1\x05\b\x05\x02\u08B0\u08AF\x03\x02\x02\x02\u08B1\u08B2" +
		"\x03\x02\x02\x02\u08B2\u08B0\x03\x02\x02\x02\u08B2\u08B3\x03\x02\x02\x02" +
		"\u08B3\u08B4\x03\x02\x02\x02\u08B4\u08B5\x07\u013C\x02\x02\u08B5\u08B8" +
		"\x03\x02\x02\x02\u08B6\u08B8\x07\xE8\x02\x02\u08B7\u08AE\x03\x02\x02\x02" +
		"\u08B7\u08B6\x03\x02\x02\x02\u08B8\u08BA\x03\x02\x02\x02\u08B9\u0883\x03" +
		"\x02\x02\x02\u08B9\u08AC\x03\x02\x02\x02\u08BA\x83\x03\x02\x02\x02\u08BB" +
		"\u08C3\x075\x02\x02\u08BC\u08BE\x05\b\x05\x02\u08BD\u08BC\x03\x02\x02" +
		"\x02\u08BE\u08BF\x03\x02\x02\x02\u08BF\u08BD\x03\x02\x02\x02\u08BF\u08C0" +
		"\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08C2\x05\x92J\x02" +
		"\u08C2\u08C4\x03\x02\x02\x02\u08C3\u08BD\x03\x02\x02\x02\u08C4\u08C5\x03" +
		"\x02\x02\x02\u08C5\u08C3\x03\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6" +
		"\x85\x03\x02\x02\x02\u08C7\u08C9\x074\x02\x02\u08C8\u08CA\x05\b\x05\x02" +
		"\u08C9\u08C8\x03\x02\x02\x02\u08CA\u08CB\x03\x02\x02\x02\u08CB\u08C9\x03" +
		"\x02\x02\x02\u08CB\u08CC\x03\x02\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD" +
		"\u08D5\x05\x92J\x02\u08CE\u08D0\x05\b\x05\x02\u08CF\u08CE\x03\x02\x02" +
		"\x02\u08D0\u08D1\x03\x02\x02\x02\u08D1\u08CF\x03\x02\x02\x02\u08D1\u08D2" +
		"\x03\x02\x02\x02\u08D2\u08D3\x03\x02\x02\x02\u08D3\u08D4\x05\x8AF\x02" +
		"\u08D4\u08D6\x03\x02\x02\x02\u08D5\u08CF\x03\x02\x02\x02\u08D5\u08D6\x03" +
		"\x02\x02\x02\u08D6\u08DE\x03\x02\x02\x02\u08D7\u08D9\x05\b\x05\x02\u08D8" +
		"\u08D7\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08D8\x03\x02" +
		"\x02\x02\u08DA\u08DB\x03\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC" +
		"\u08DD\x05\x88E\x02\u08DD\u08DF\x03\x02\x02\x02\u08DE\u08D8\x03\x02\x02" +
		"\x02\u08DE\u08DF\x03\x02\x02\x02\u08DF\u08E7\x03\x02\x02\x02\u08E0\u08E2" +
		"\x05\b\x05\x02\u08E1\u08E0\x03\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02" +
		"\u08E3\u08E1\x03\x02\x02\x02\u08E3\u08E4\x03\x02\x02\x02\u08E4\u08E5\x03" +
		"\x02\x02\x02\u08E5\u08E6\x05\xA2R\x02\u08E6\u08E8\x03\x02\x02\x02\u08E7" +
		"\u08E1\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08F0\x03\x02" +
		"\x02\x02\u08E9\u08EB\x05\b\x05\x02\u08EA\u08E9\x03\x02\x02\x02\u08EB\u08EC" +
		"\x03\x02\x02\x02\u08EC\u08EA\x03\x02\x02\x02\u08EC\u08ED\x03\x02\x02\x02" +
		"\u08ED\u08EE\x03\x02\x02\x02\u08EE\u08EF\x07\x84\x02\x02\u08EF\u08F1\x03" +
		"\x02\x02\x02\u08F0\u08EA\x03\x02\x02\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1" +
		"\x87\x03\x02\x02\x02\u08F2\u08F4\x07\xBB\x02\x02\u08F3\u08F5\x05\b\x05" +
		"\x02\u08F4\u08F3\x03\x02\x02\x02\u08F5\u08F6\x03\x02\x02\x02\u08F6\u08F4" +
		"\x03\x02\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7\u08F8\x03\x02\x02\x02" +
		"\u08F8\u08F9\x05\u0278\u013D\x02\u08F9\x89\x03\x02\x02\x02\u08FA\u0902" +
		"\x07\u0184\x02\x02\u08FB\u08FD\x05\b\x05\x02\u08FC\u08FB\x03\x02\x02\x02" +
		"\u08FD\u08FE\x03\x02\x02\x02\u08FE\u08FC\x03\x02\x02\x02\u08FE\u08FF\x03" +
		"\x02\x02\x02\u08FF\u0900\x03\x02\x02\x02\u0900\u0901\x05\x8CG\x02\u0901" +
		"\u0903\x03\x02\x02\x02\u0902\u08FC\x03\x02\x02\x02\u0903\u0904\x03\x02" +
		"\x02\x02\u0904\u0902\x03\x02\x02\x02\u0904\u0905\x03\x02\x02\x02\u0905" +
		"\x8B\x03\x02\x02\x02\u0906\u091D\x07\u0101\x02\x02\u0907\u0909\x05\x8E" +
		"H\x02\u0908\u090A\x05\b\x05\x02\u0909\u0908\x03\x02\x02\x02\u090A\u090B" +
		"\x03\x02\x02\x02\u090B\u0909\x03\x02\x02\x02\u090B\u090C\x03\x02\x02\x02" +
		"\u090C\u090E\x03\x02\x02\x02\u090D\u0907\x03\x02\x02\x02\u090D\u090E\x03" +
		"\x02\x02\x02\u090E\u090F\x03\x02\x02\x02\u090F\u0919\x05\x90I\x02\u0910" +
		"\u0912\x05\b\x05\x02\u0911\u0910\x03\x02\x02\x02\u0912\u0913\x03\x02\x02" +
		"\x02\u0913\u0911\x03\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914\u0915" +
		"\x03\x02\x02\x02\u0915\u0916\x05\x90I\x02\u0916\u0918\x03\x02\x02\x02" +
		"\u0917\u0911\x03\x02\x02\x02\u0918\u091B\x03\x02\x02\x02\u0919\u0917\x03" +
		"\x02\x02\x02\u0919\u091A\x03\x02\x02\x02\u091A\u091D\x03\x02\x02\x02\u091B" +
		"\u0919\x03\x02\x02\x02\u091C\u0906\x03\x02\x02\x02\u091C\u090D\x03\x02" +
		"\x02\x02\u091D\x8D\x03\x02\x02\x02\u091E\u0920\x072\x02\x02\u091F\u0921" +
		"\x05\b\x05\x02\u0920\u091F\x03\x02\x02\x02\u0921\u0922\x03\x02\x02\x02" +
		"\u0922\u0920\x03\x02\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0925\x03" +
		"\x02\x02\x02\u0924\u091E\x03\x02\x02\x02\u0924\u0925\x03\x02\x02\x02\u0925" +
		"\u0926\x03\x02\x02\x02\u0926\u0943\x07\u012A\x02\x02\u0927\u0929\x072" +
		"\x02\x02\u0928\u092A\x05\b\x05\x02\u0929\u0928\x03\x02\x02\x02\u092A\u092B" +
		"\x03\x02\x02\x02\u092B\u0929\x03\x02\x02\x02\u092B\u092C\x03\x02\x02\x02" +
		"\u092C\u092E\x03\x02\x02\x02\u092D\u0927\x03\x02\x02\x02\u092D\u092E\x03" +
		"\x02\x02\x02\u092E\u092F\x03\x02\x02\x02\u092F\u0943\x07V\x02\x02\u0930" +
		"\u0932\x072\x02\x02\u0931\u0933\x05\b\x05\x02\u0932\u0931\x03\x02\x02" +
		"\x02\u0933\u0934\x03\x02\x02\x02\u0934\u0932\x03\x02\x02\x02\u0934\u0935" +
		"\x03\x02\x02\x02\u0935\u0937\x03\x02\x02\x02\u0936\u0930\x03\x02\x02\x02" +
		"\u0936\u0937\x03\x02\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u0943\x07" +
		"u\x02\x02\u0939\u093B\x072\x02\x02\u093A\u093C\x05\b\x05\x02\u093B\u093A" +
		"\x03\x02\x02\x02\u093C\u093D\x03\x02\x02\x02\u093D\u093B\x03\x02\x02\x02" +
		"\u093D\u093E\x03\x02\x02\x02\u093E\u0940\x03\x02\x02\x02\u093F\u0939\x03" +
		"\x02\x02\x02\u093F\u0940\x03\x02\x02\x02\u0940\u0941\x03\x02\x02\x02\u0941" +
		"\u0943\x07\u0185\x02\x02\u0942\u0924\x03\x02\x02\x02\u0942\u092D\x03\x02" +
		"\x02\x02\u0942\u0936\x03\x02\x02\x02\u0942\u093F\x03\x02\x02\x02\u0943" +
		"\x8F\x03\x02\x02\x02\u0944\u0948\x05\u01CE\xE8\x02\u0945\u0948\x07\u01B6" +
		"\x02\x02\u0946\u0948\x07\u01B5\x02\x02\u0947\u0944\x03\x02\x02\x02\u0947" +
		"\u0945\x03\x02\x02\x02\u0947\u0946\x03\x02\x02\x02\u0948\x91\x03\x02\x02" +
		"\x02\u0949\u094A\t\n\x02\x02\u094A\x93\x03\x02\x02\x02\u094B\u096D\x07" +
		"\x12\x02\x02\u094C\u094E\x05\b\x05\x02\u094D\u094C\x03\x02\x02\x02\u094E" +
		"\u094F\x03\x02\x02\x02\u094F\u094D\x03\x02\x02\x02\u094F\u0950\x03\x02" +
		"\x02\x02\u0950\u0951\x03\x02\x02\x02\u0951\u0953\x05\x98M\x02\u0952\u0954" +
		"\x05\b\x05\x02\u0953\u0952\x03\x02\x02\x02\u0954\u0955\x03\x02\x02\x02" +
		"\u0955\u0953\x03\x02\x02\x02\u0955\u0956\x03\x02\x02\x02\u0956\u0957\x03" +
		"\x02\x02\x02\u0957\u0959\x07\u0175\x02\x02\u0958\u095A\x05\b\x05\x02\u0959" +
		"\u0958\x03\x02\x02\x02\u095A\u095B\x03\x02\x02\x02\u095B\u0959\x03\x02" +
		"\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C\u0969\x03\x02\x02\x02\u095D" +
		"\u095F\x07\u011D\x02\x02\u095E\u0960\x05\b\x05\x02\u095F\u095E\x03\x02" +
		"\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961\u095F\x03\x02\x02\x02\u0961" +
		"\u0962\x03\x02\x02\x02\u0962\u0963\x03\x02\x02\x02\u0963\u0965\x07\u0175" +
		"\x02\x02\u0964\u0966\x05\b\x05\x02\u0965\u0964\x03\x02\x02\x02\u0966\u0967" +
		"\x03\x02\x02\x02\u0967\u0965\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02" +
		"\u0968\u096A\x03\x02\x02\x02\u0969\u095D\x03\x02\x02\x02\u0969\u096A\x03" +
		"\x02\x02\x02\u096A\u096B\x03\x02\x02\x02\u096B\u096C\x05\x96L\x02\u096C" +
		"\u096E\x03\x02\x02\x02\u096D\u094D\x03\x02\x02\x02\u096E\u096F\x03\x02" +
		"\x02\x02\u096F\u096D\x03\x02\x02\x02\u096F\u0970\x03\x02\x02\x02\u0970" +
		"\x95\x03\x02\x02\x02\u0971\u0972\x07\u01B8\x02\x02\u0972\x97\x03\x02\x02" +
		"\x02\u0973\u0974\x07\u01B8\x02\x02\u0974\x99\x03\x02\x02\x02\u0975\u097D" +
		"\x07\b\x02\x02\u0976\u0978\x05\b\x05\x02\u0977\u0976\x03\x02\x02\x02\u0978" +
		"\u0979\x03\x02\x02\x02\u0979\u0977\x03\x02\x02\x02\u0979\u097A\x03\x02" +
		"\x02\x02\u097A\u097B\x03\x02\x02\x02\u097B\u097C\x05\x9EP\x02\u097C\u097E" +
		"\x03\x02\x02\x02\u097D\u0977\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02" +
		"\u097F\u097D\x03\x02\x02\x02\u097F\u0980\x03\x02\x02\x02\u0980\u0982\x03" +
		"\x02\x02\x02\u0981\u0983\x05\b\x05\x02\u0982\u0981\x03\x02\x02\x02\u0983" +
		"\u0984\x03\x02\x02\x02\u0984\u0982\x03\x02\x02\x02\u0984\u0985\x03\x02" +
		"\x02\x02\u0985\u0986\x03\x02\x02\x02\u0986\u0996\x07\u0175\x02\x02\u0987" +
		"\u0989\x05\b\x05\x02\u0988\u0987\x03\x02\x02\x02\u0989\u098A\x03\x02\x02" +
		"\x02\u098A\u0988\x03\x02\x02\x02\u098A\u098B\x03\x02\x02\x02\u098B\u098C" +
		"\x03\x02\x02\x02\u098C\u0994\x05\u0278\u013D\x02\u098D\u098F\x05\b\x05" +
		"\x02\u098E\u098D\x03\x02\x02\x02\u098F\u0990\x03\x02\x02\x02\u0990\u098E" +
		"\x03\x02\x02\x02\u0990\u0991\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02" +
		"\u0992\u0993\x07\u0142\x02\x02\u0993\u0995\x03\x02\x02\x02\u0994\u098E" +
		"\x03\x02\x02\x02\u0994\u0995\x03\x02\x02\x02\u0995\u0997\x03\x02\x02\x02" +
		"\u0996\u0988\x03\x02\x02\x02\u0997\u0998\x03\x02\x02\x02\u0998\u0996\x03" +
		"\x02\x02\x02\u0998\u0999\x03\x02\x02\x02\u0999\u09F7\x03\x02\x02\x02\u099A" +
		"\u09A4\x07\b\x02\x02\u099B\u099D\x05\b\x05\x02\u099C\u099B\x03\x02\x02" +
		"\x02\u099D\u099E\x03\x02\x02\x02\u099E\u099C\x03\x02\x02\x02\u099E\u099F" +
		"\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A1\x05\x9EP\x02" +
		"\u09A1\u09A3\x03\x02\x02\x02\u09A2\u099C\x03\x02\x02\x02\u09A3\u09A6\x03" +
		"\x02\x02\x02\u09A4\u09A2\x03\x02\x02\x02\u09A4\u09A5\x03\x02\x02\x02\u09A5" +
		"\u09AE\x03\x02\x02\x02\u09A6\u09A4\x03\x02\x02\x02\u09A7\u09A9\x05\b\x05" +
		"\x02\u09A8\u09A7\x03\x02\x02\x02\u09A9\u09AA\x03\x02\x02\x02\u09AA\u09A8" +
		"\x03\x02\x02\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09AC\x03\x02\x02\x02" +
		"\u09AC\u09AD\x07\u0175\x02\x02\u09AD\u09AF\x03\x02\x02\x02\u09AE\u09A8" +
		"\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09B7\x03\x02\x02\x02" +
		"\u09B0\u09B2\x05\b\x05\x02\u09B1\u09B0\x03\x02\x02\x02\u09B2\u09B3\x03" +
		"\x02\x02\x02\u09B3\u09B1\x03";
	private static readonly _serializedATNSegment7: string =
		"\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02\u09B4\u09B5\x03\x02\x02\x02\u09B5" +
		"\u09B6\x05\x9EP\x02\u09B6\u09B8\x03\x02\x02\x02\u09B7\u09B1\x03\x02\x02" +
		"\x02\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09B7\x03\x02\x02\x02\u09B9\u09BA" +
		"\x03\x02\x02\x02\u09BA\u09BC\x03\x02\x02\x02\u09BB\u09BD\x05\b\x05\x02" +
		"\u09BC\u09BB\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09BC\x03" +
		"\x02\x02\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C0\x03\x02\x02\x02\u09C0" +
		"\u09D0\x07\xBB\x02\x02\u09C1\u09C3\x05\b\x05\x02\u09C2\u09C1\x03\x02\x02" +
		"\x02\u09C3\u09C4\x03\x02\x02\x02\u09C4\u09C2\x03\x02\x02\x02\u09C4\u09C5" +
		"\x03\x02\x02\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\u09CE\x05\u0278\u013D" +
		"\x02\u09C7\u09C9\x05\b\x05\x02\u09C8\u09C7\x03\x02\x02\x02\u09C9\u09CA" +
		"\x03\x02\x02\x02\u09CA\u09C8\x03\x02\x02\x02\u09CA\u09CB\x03\x02\x02\x02" +
		"\u09CB\u09CC\x03\x02\x02\x02\u09CC\u09CD\x07\u0142\x02\x02\u09CD\u09CF" +
		"\x03\x02\x02\x02\u09CE\u09C8\x03\x02\x02\x02\u09CE\u09CF\x03\x02\x02\x02" +
		"\u09CF\u09D1\x03\x02\x02\x02\u09D0\u09C2\x03\x02\x02\x02\u09D1\u09D2\x03" +
		"\x02\x02\x02\u09D2\u09D0\x03\x02\x02\x02\u09D2\u09D3\x03\x02\x02\x02\u09D3" +
		"\u09F7\x03\x02\x02\x02\u09D4\u09D6\x07\b\x02\x02\u09D5\u09D7\x05\b\x05" +
		"\x02\u09D6\u09D5\x03\x02\x02\x02\u09D7\u09D8\x03\x02\x02\x02\u09D8\u09D6" +
		"\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02\x02\u09D9\u09DA\x03\x02\x02\x02" +
		"\u09DA\u09DC\t\x05\x02\x02\u09DB\u09DD\x05\b\x05\x02\u09DC\u09DB\x03\x02" +
		"\x02\x02\u09DD\u09DE\x03\x02\x02\x02\u09DE\u09DC\x03\x02\x02\x02\u09DE" +
		"\u09DF\x03\x02\x02\x02\u09DF\u09E0\x03\x02\x02\x02\u09E0\u09E2\x05\x9C" +
		"O\x02\u09E1\u09E3\x05\b\x05\x02\u09E2\u09E1\x03\x02\x02\x02\u09E3\u09E4" +
		"\x03\x02\x02\x02\u09E4\u09E2\x03\x02\x02\x02\u09E4\u09E5\x03\x02\x02\x02" +
		"\u09E5\u09E6\x03\x02\x02\x02\u09E6\u09E8\x07\u0175\x02\x02\u09E7\u09E9" +
		"\x05\b\x05\x02\u09E8\u09E7\x03\x02\x02\x02\u09E9\u09EA\x03\x02\x02\x02" +
		"\u09EA\u09E8\x03\x02\x02\x02\u09EA\u09EB\x03\x02\x02\x02\u09EB\u09EC\x03" +
		"\x02\x02\x02\u09EC\u09F4\x05\x9CO\x02\u09ED\u09EF\x05\b\x05\x02\u09EE" +
		"\u09ED\x03\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0\u09EE\x03\x02" +
		"\x02\x02\u09F0\u09F1\x03\x02\x02\x02\u09F1\u09F2\x03\x02\x02\x02\u09F2" +
		"\u09F3\x07\u0142\x02\x02\u09F3\u09F5\x03\x02\x02\x02\u09F4\u09EE\x03\x02" +
		"\x02\x02\u09F4\u09F5\x03\x02\x02\x02\u09F5\u09F7\x03\x02\x02\x02\u09F6" +
		"\u0975\x03\x02\x02\x02\u09F6\u099A\x03\x02\x02\x02\u09F6\u09D4\x03\x02" +
		"\x02\x02\u09F7\u09FF\x03\x02\x02\x02\u09F8\u09FA\x05\b\x05\x02\u09F9\u09F8" +
		"\x03\x02\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09F9\x03\x02\x02\x02" +
		"\u09FB\u09FC\x03\x02\x02\x02\u09FC\u09FD\x03\x02\x02\x02\u09FD\u09FE\x05" +
		"\xA6T\x02\u09FE\u0A00\x03\x02\x02\x02\u09FF\u09F9\x03\x02\x02\x02\u09FF" +
		"\u0A00\x03\x02\x02\x02\u0A00\u0A08\x03\x02\x02\x02\u0A01\u0A03\x05\b\x05" +
		"\x02\u0A02\u0A01\x03\x02\x02\x02\u0A03\u0A04\x03\x02\x02\x02\u0A04\u0A02" +
		"\x03\x02\x02\x02\u0A04\u0A05\x03\x02\x02\x02\u0A05\u0A06\x03\x02\x02\x02" +
		"\u0A06\u0A07\x07\x83\x02\x02\u0A07\u0A09\x03\x02\x02\x02\u0A08\u0A02\x03" +
		"\x02\x02\x02\u0A08\u0A09\x03\x02\x02\x02\u0A09\x9B\x03\x02\x02\x02\u0A0A" +
		"\u0A0B\x05\u01CE\xE8\x02\u0A0B\x9D\x03\x02\x02\x02\u0A0C\u0A0F\x07\u01B6" +
		"\x02\x02\u0A0D\u0A0F\x05\u027A\u013E\x02\u0A0E\u0A0C\x03\x02\x02\x02\u0A0E" +
		"\u0A0D\x03\x02\x02\x02\u0A0F\x9F\x03\x02\x02\x02\u0A10\u0A17\x05\xAEX" +
		"\x02\u0A11\u0A17\x05\xB0Y\x02\u0A12\u0A17\x05\xB2Z\x02\u0A13\u0A17\x05" +
		"\xB4[\x02\u0A14\u0A17\x05\xB6\\\x02\u0A15\u0A17\x05\xAAV\x02\u0A16\u0A10" +
		"\x03\x02\x02\x02\u0A16\u0A11\x03\x02\x02\x02\u0A16\u0A12\x03\x02\x02\x02" +
		"\u0A16\u0A13\x03\x02\x02\x02\u0A16\u0A14\x03\x02\x02\x02\u0A16\u0A15\x03" +
		"\x02\x02\x02\u0A17\xA1\x03\x02\x02\x02\u0A18\u0A26\x05\xD6l\x02\u0A19" +
		"\u0A1B\x05\b\x05\x02\u0A1A\u0A19\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02\x02" +
		"\x02\u0A1C\u0A1A\x03\x02\x02\x02\u0A1C\u0A1D\x03\x02\x02\x02\u0A1D\u0A1E" +
		"\x03\x02\x02\x02\u0A1E\u0A20\x07\xFA\x02\x02\u0A1F\u0A21\x05\b\x05\x02" +
		"\u0A20\u0A1F\x03\x02\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A20\x03" +
		"\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24" +
		"\u0A25\x05\xD6l\x02\u0A25\u0A27\x03\x02\x02\x02\u0A26\u0A1A\x03\x02\x02" +
		"\x02\u0A26\u0A27\x03\x02\x02\x02\u0A27\u0A39\x03\x02\x02\x02\u0A28\u0A2A" +
		"\x07\xFA\x02\x02\u0A29\u0A2B\x05\b\x05\x02\u0A2A\u0A29\x03\x02\x02\x02" +
		"\u0A2B\u0A2C\x03\x02\x02\x02\u0A2C\u0A2A\x03\x02\x02\x02\u0A2C\u0A2D\x03" +
		"\x02\x02\x02\u0A2D\u0A2E\x03\x02\x02\x02\u0A2E\u0A36\x05\xD6l\x02\u0A2F" +
		"\u0A31\x05\b\x05\x02\u0A30\u0A2F\x03\x02\x02\x02\u0A31\u0A32\x03\x02\x02" +
		"\x02\u0A32\u0A30\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33\u0A34" +
		"\x03\x02\x02\x02\u0A34\u0A35\x05\xD6l\x02\u0A35\u0A37\x03\x02\x02\x02" +
		"\u0A36\u0A30\x03\x02\x02\x02\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A39\x03" +
		"\x02\x02\x02\u0A38\u0A18\x03\x02\x02\x02\u0A38\u0A28\x03\x02\x02\x02\u0A39" +
		"\xA3\x03\x02\x02\x02\u0A3A\u0A48\x05\xD4k\x02\u0A3B\u0A3D\x05\b\x05\x02" +
		"\u0A3C\u0A3B\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A3C\x03" +
		"\x02\x02\x02\u0A3E\u0A3F\x03\x02\x02\x02\u0A3F\u0A40\x03\x02\x02\x02\u0A40" +
		"\u0A42\x07\xFA\x02\x02\u0A41\u0A43\x05\b\x05\x02\u0A42\u0A41\x03\x02\x02" +
		"\x02\u0A43\u0A44\x03\x02\x02\x02\u0A44\u0A42\x03\x02\x02\x02\u0A44\u0A45" +
		"\x03\x02\x02\x02\u0A45\u0A46\x03\x02\x02\x02\u0A46\u0A47\x05\xD4k\x02" +
		"\u0A47\u0A49\x03\x02\x02\x02\u0A48\u0A3C\x03\x02\x02\x02\u0A48\u0A49\x03" +
		"\x02\x02\x02\u0A49\u0A5B\x03\x02\x02\x02\u0A4A\u0A4C\x07\xFA\x02\x02\u0A4B" +
		"\u0A4D\x05\b\x05\x02\u0A4C\u0A4B\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02\x02" +
		"\x02\u0A4E\u0A4C\x03\x02\x02\x02\u0A4E\u0A4F\x03\x02\x02\x02\u0A4F\u0A50" +
		"\x03\x02\x02\x02\u0A50\u0A58\x05\xD4k\x02\u0A51\u0A53\x05\b\x05\x02\u0A52" +
		"\u0A51\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54\u0A52\x03\x02" +
		"\x02\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55\u0A56\x03\x02\x02\x02\u0A56" +
		"\u0A57\x05\xD4k\x02\u0A57\u0A59\x03\x02\x02\x02\u0A58\u0A52\x03\x02\x02" +
		"\x02\u0A58\u0A59\x03\x02\x02\x02\u0A59\u0A5B\x03\x02\x02\x02\u0A5A\u0A3A" +
		"\x03\x02\x02\x02\u0A5A\u0A4A\x03\x02\x02\x02\u0A5B\xA5\x03\x02\x02\x02" +
		"\u0A5C\u0A6A\x05\xD8m\x02\u0A5D\u0A5F\x05\b\x05\x02\u0A5E\u0A5D\x03\x02" +
		"\x02\x02\u0A5F\u0A60\x03\x02\x02\x02\u0A60\u0A5E\x03\x02\x02\x02\u0A60" +
		"\u0A61\x03\x02\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A64\x07\xFA" +
		"\x02\x02\u0A63\u0A65\x05\b\x05\x02\u0A64\u0A63\x03\x02\x02\x02\u0A65\u0A66" +
		"\x03\x02\x02\x02\u0A66\u0A64\x03\x02\x02\x02\u0A66\u0A67\x03\x02\x02\x02" +
		"\u0A67\u0A68\x03\x02\x02\x02\u0A68\u0A69\x05\xD8m\x02\u0A69\u0A6B\x03" +
		"\x02\x02\x02\u0A6A\u0A5E\x03\x02\x02\x02\u0A6A\u0A6B\x03\x02\x02\x02\u0A6B" +
		"\u0A7D\x03\x02\x02\x02\u0A6C\u0A6E\x07\xFA\x02\x02\u0A6D\u0A6F\x05\b\x05" +
		"\x02\u0A6E\u0A6D\x03\x02\x02\x02\u0A6F\u0A70\x03\x02\x02\x02\u0A70\u0A6E" +
		"\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A72\x03\x02\x02\x02" +
		"\u0A72\u0A7A\x05\xD8m\x02\u0A73\u0A75\x05\b\x05\x02\u0A74\u0A73\x03\x02" +
		"\x02\x02\u0A75\u0A76\x03\x02\x02\x02\u0A76\u0A74\x03\x02\x02\x02\u0A76" +
		"\u0A77\x03\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78\u0A79\x05\xD8" +
		"m\x02\u0A79\u0A7B\x03\x02\x02\x02\u0A7A\u0A74\x03\x02\x02\x02\u0A7A\u0A7B" +
		"\x03\x02\x02\x02\u0A7B\u0A7D\x03\x02\x02\x02\u0A7C\u0A5C\x03\x02\x02\x02" +
		"\u0A7C\u0A6C\x03\x02\x02\x02\u0A7D\xA7\x03\x02\x02\x02\u0A7E\u0A8C\x05" +
		"\xDAn\x02\u0A7F\u0A81\x05\b\x05\x02\u0A80\u0A7F\x03\x02\x02\x02\u0A81" +
		"\u0A82\x03\x02\x02\x02\u0A82\u0A80\x03\x02\x02\x02\u0A82\u0A83\x03\x02" +
		"\x02\x02\u0A83\u0A84\x03\x02\x02\x02\u0A84\u0A86\x07\xFA\x02\x02\u0A85" +
		"\u0A87\x05\b\x05\x02\u0A86\u0A85\x03\x02\x02\x02\u0A87\u0A88\x03\x02\x02" +
		"\x02\u0A88\u0A86\x03\x02\x02\x02\u0A88\u0A89\x03\x02\x02\x02\u0A89\u0A8A" +
		"\x03\x02\x02\x02\u0A8A\u0A8B\x05\xDAn\x02\u0A8B\u0A8D\x03\x02\x02\x02" +
		"\u0A8C\u0A80\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A9F\x03" +
		"\x02\x02\x02\u0A8E\u0A90\x07\xFA\x02\x02\u0A8F\u0A91\x05\b\x05\x02\u0A90" +
		"\u0A8F\x03\x02\x02\x02\u0A91\u0A92\x03\x02\x02\x02\u0A92\u0A90\x03\x02" +
		"\x02\x02\u0A92\u0A93\x03\x02\x02\x02\u0A93\u0A94\x03\x02\x02\x02\u0A94" +
		"\u0A9C\x05\xDAn\x02\u0A95\u0A97\x05\b\x05\x02\u0A96\u0A95\x03\x02\x02" +
		"\x02\u0A97\u0A98\x03\x02\x02\x02\u0A98\u0A96\x03\x02\x02\x02\u0A98\u0A99" +
		"\x03\x02\x02\x02\u0A99\u0A9A\x03\x02\x02\x02\u0A9A\u0A9B\x05\xDAn\x02" +
		"\u0A9B\u0A9D\x03\x02\x02\x02\u0A9C\u0A96\x03\x02\x02\x02\u0A9C\u0A9D\x03" +
		"\x02\x02\x02\u0A9D\u0A9F\x03\x02\x02\x02\u0A9E\u0A7E\x03\x02\x02\x02\u0A9E" +
		"\u0A8E\x03\x02\x02\x02\u0A9F\xA9\x03\x02\x02\x02\u0AA0\u0AA2\x07\x06\x02" +
		"\x02\u0AA1\u0AA3\x05\b\x05\x02\u0AA2\u0AA1\x03\x02\x02\x02\u0AA3\u0AA4" +
		"\x03\x02\x02\x02\u0AA4\u0AA2\x03\x02\x02\x02\u0AA4\u0AA5\x03\x02\x02\x02" +
		"\u0AA5\u0AA6\x03\x02\x02\x02\u0AA6\u0AA8\x05\xD0i\x02\u0AA7\u0AA9\x05" +
		"\b\x05\x02\u0AA8\u0AA7\x03\x02\x02\x02\u0AA9\u0AAA\x03\x02\x02\x02\u0AAA" +
		"\u0AA8\x03\x02\x02\x02\u0AAA\u0AAB\x03\x02\x02\x02\u0AAB\u0AB2\x03\x02" +
		"\x02\x02\u0AAC\u0AAE\x07\xB7\x02\x02\u0AAD\u0AAF\x05\b\x05\x02\u0AAE\u0AAD" +
		"\x03\x02\x02\x02\u0AAF\u0AB0\x03\x02\x02\x02\u0AB0\u0AAE\x03\x02\x02\x02" +
		"\u0AB0\u0AB1\x03\x02\x02\x02\u0AB1\u0AB3\x03\x02\x02\x02\u0AB2\u0AAC\x03" +
		"\x02\x02\x02\u0AB2\u0AB3\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02\u0AB4" +
		"\u0ABC\x05\xACW\x02\u0AB5\u0AB7\x05\b\x05\x02\u0AB6\u0AB5\x03\x02\x02" +
		"\x02\u0AB7\u0AB8\x03\x02\x02\x02\u0AB8\u0AB6\x03\x02\x02\x02\u0AB8\u0AB9" +
		"\x03\x02\x02\x02\u0AB9\u0ABA\x03\x02\x02\x02\u0ABA\u0ABB\x05\xA2R\x02" +
		"\u0ABB\u0ABD\x03\x02\x02\x02\u0ABC\u0AB6\x03\x02\x02\x02\u0ABC\u0ABD\x03" +
		"\x02\x02\x02\u0ABD\u0AC5\x03\x02\x02\x02\u0ABE\u0AC0\x05\b\x05\x02\u0ABF" +
		"\u0ABE\x03\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0ABF\x03\x02" +
		"\x02\x02\u0AC1\u0AC2\x03\x02\x02\x02\u0AC2\u0AC3\x03\x02\x02\x02\u0AC3" +
		"\u0AC4\x07\x82\x02\x02\u0AC4\u0AC6\x03\x02\x02\x02\u0AC5\u0ABF\x03\x02" +
		"\x02\x02\u0AC5\u0AC6\x03\x02\x02\x02\u0AC6\xAB\x03\x02\x02\x02\u0AC7\u0AC8" +
		"\x07\u01B8\x02\x02\u0AC8\xAD\x03\x02\x02\x02\u0AC9\u0ACB\x07\x06\x02\x02" +
		"\u0ACA\u0ACC\x05\b\x05\x02\u0ACB\u0ACA\x03\x02\x02\x02\u0ACC\u0ACD\x03" +
		"\x02\x02\x02\u0ACD\u0ACB\x03\x02\x02\x02\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE" +
		"\u0ACF\x03\x02\x02\x02\u0ACF\u0ADD\x05\xD0i\x02\u0AD0\u0AD2\x05\b\x05" +
		"\x02\u0AD1\u0AD0\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AD1" +
		"\x03\x02\x02\x02\u0AD3\u0AD4\x03\x02\x02\x02\u0AD4\u0AD5\x03\x02\x02\x02" +
		"\u0AD5\u0AD7\x07\xB7\x02\x02\u0AD6\u0AD8\x05\b\x05\x02\u0AD7\u0AD6\x03" +
		"\x02\x02\x02\u0AD8\u0AD9\x03\x02\x02\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0AD9" +
		"\u0ADA\x03\x02\x02\x02\u0ADA\u0ADB\x03\x02\x02\x02\u0ADB\u0ADC\x05\xD2" +
		"j\x02\u0ADC\u0ADE\x03\x02\x02\x02\u0ADD\u0AD1\x03\x02\x02\x02\u0ADD\u0ADE" +
		"\x03\x02\x02\x02\u0ADE\u0AEC\x03\x02\x02\x02\u0ADF\u0AE1\x05\b\x05\x02" +
		"\u0AE0\u0ADF\x03\x02\x02\x02\u0AE1\u0AE2\x03\x02\x02\x02\u0AE2\u0AE0\x03" +
		"\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3\u0AE4\x03\x02\x02\x02\u0AE4" +
		"\u0AE6\x07\u018B\x02\x02\u0AE5\u0AE7\x05\b\x05\x02\u0AE6\u0AE5\x03\x02" +
		"\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8\u0AE6\x03\x02\x02\x02\u0AE8" +
		"\u0AE9\x03\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02\u0AEA\u0AEB\x07\\\x02" +
		"\x02\u0AEB\u0AED\x03\x02\x02\x02\u0AEC\u0AE0\x03\x02\x02\x02\u0AEC\u0AED" +
		"\x03\x02\x02\x02\u0AED\u0AF5\x03\x02\x02\x02\u0AEE\u0AF0\x05\b\x05\x02" +
		"\u0AEF\u0AEE\x03\x02\x02\x02\u0AF0\u0AF1\x03\x02\x02\x02\u0AF1\u0AEF\x03" +
		"\x02\x02\x02\u0AF1\u0AF2\x03\x02\x02\x02\u0AF2\u0AF3\x03\x02\x02\x02\u0AF3" +
		"\u0AF4\x05\xA4S\x02\u0AF4\u0AF6\x03\x02\x02\x02\u0AF5\u0AEF\x03\x02\x02" +
		"\x02\u0AF5\u0AF6\x03\x02\x02\x02\u0AF6\u0AFE\x03\x02\x02\x02\u0AF7\u0AF9" +
		"\x05\b\x05\x02\u0AF8\u0AF7\x03\x02\x02\x02\u0AF9\u0AFA\x03\x02\x02\x02" +
		"\u0AFA\u0AF8\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\x03" +
		"\x02\x02\x02\u0AFC\u0AFD\x07\x82\x02\x02\u0AFD\u0AFF\x03\x02\x02\x02\u0AFE" +
		"\u0AF8\x03\x02\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\xAF\x03\x02\x02" +
		"\x02\u0B00\u0B02\x07\x06\x02\x02\u0B01\u0B03\x05\b\x05\x02\u0B02\u0B01" +
		"\x03\x02\x02\x02\u0B03\u0B04\x03\x02\x02\x02\u0B04\u0B02\x03\x02\x02\x02" +
		"\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B06\x03\x02\x02\x02\u0B06\u0B08\x05" +
		"\xD0i\x02\u0B07\u0B09\x05\b\x05\x02\u0B08\u0B07\x03\x02\x02\x02\u0B09" +
		"\u0B0A\x03\x02\x02\x02\u0B0A\u0B08\x03\x02\x02\x02\u0B0A\u0B0B\x03\x02" +
		"\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C\u0B0E\x07\xB7\x02\x02\u0B0D" +
		"\u0B0F\x05\b\x05\x02\u0B0E\u0B0D\x03\x02\x02\x02\u0B0F\u0B10\x03\x02\x02" +
		"\x02\u0B10\u0B0E\x03\x02\x02\x02\u0B10\u0B11\x03\x02\x02\x02\u0B11\u0B12" +
		"\x03\x02\x02\x02\u0B12\u0B13\x05\xCEh\x02\u0B13\xB1\x03\x02\x02\x02\u0B14" +
		"\u0B16\x07\x06\x02\x02\u0B15\u0B17\x05\b\x05\x02\u0B16\u0B15\x03\x02\x02" +
		"\x02\u0B17\u0B18\x03\x02\x02\x02\u0B18\u0B16\x03\x02\x02\x02\u0B18\u0B19" +
		"\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B22\x05\xD0i\x02" +
		"\u0B1B\u0B1D\x05\b\x05\x02\u0B1C\u0B1B\x03\x02\x02\x02\u0B1D\u0B1E\x03" +
		"\x02\x02\x02\u0B1E\u0B1C\x03\x02\x02\x02\u0B1E\u0B1F\x03\x02\x02\x02\u0B1F" +
		"\u0B20\x03\x02\x02\x02\u0B20\u0B21\x05\xC0a\x02\u0B21\u0B23\x03\x02\x02" +
		"\x02\u0B22\u0B1C\x03\x02\x02\x02\u0B23\u0B24\x03\x02\x02\x02\u0B24\u0B22" +
		"\x03\x02\x02\x02\u0B24\u0B25\x03\x02\x02\x02\u0B25\u0B2F\x03\x02\x02\x02" +
		"\u0B26\u0B28\x05\b\x05\x02\u0B27\u0B26\x03\x02\x02\x02\u0B28\u0B29\x03" +
		"\x02\x02\x02\u0B29\u0B27\x03\x02\x02\x02\u0B29\u0B2A\x03\x02\x02\x02\u0B2A" +
		"\u0B2D\x03\x02\x02\x02\u0B2B\u0B2E\x05\xA2R\x02\u0B2C\u0B2E\x05\xA4S\x02" +
		"\u0B2D\u0B2B\x03\x02\x02\x02\u0B2D\u0B2C\x03\x02\x02\x02\u0B2E\u0B30\x03" +
		"\x02\x02\x02\u0B2F\u0B27\x03\x02\x02\x02\u0B2F\u0B30\x03\x02\x02\x02\u0B30" +
		"\u0B38\x03\x02\x02\x02\u0B31\u0B33\x05\b\x05\x02\u0B32\u0B31\x03\x02\x02" +
		"\x02\u0B33\u0B34\x03\x02\x02\x02\u0B34\u0B32\x03\x02\x02\x02\u0B34\u0B35" +
		"\x03\x02\x02\x02\u0B35\u0B36\x03\x02\x02\x02\u0B36\u0B37\x07\x82\x02\x02" +
		"\u0B37\u0B39\x03\x02\x02\x02\u0B38\u0B32\x03\x02\x02\x02\u0B38\u0B39\x03" +
		"\x02\x02\x02\u0B39\xB3\x03\x02\x02\x02\u0B3A\u0B3C\x07\x06\x02\x02\u0B3B" +
		"\u0B3D\x05\b\x05\x02\u0B3C\u0B3B\x03\x02\x02\x02\u0B3D\u0B3E\x03\x02\x02" +
		"\x02\u0B3E\u0B3C\x03\x02\x02\x02\u0B3E\u0B3F\x03\x02\x02\x02\u0B3F\u0B46" +
		"\x03\x02\x02\x02\u0B40\u0B42\x07Z\x02\x02\u0B41\u0B43\x05\b\x05\x02\u0B42" +
		"\u0B41\x03\x02\x02\x02\u0B43\u0B44\x03\x02\x02\x02\u0B44\u0B42\x03\x02" +
		"\x02\x02\u0B44\u0B45\x03\x02\x02\x02\u0B45\u0B47\x03\x02\x02\x02\u0B46" +
		"\u0B40\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B48\x03\x02" +
		"\x02\x02\u0B48\u0B4A\x07\xDB\x02\x02\u0B49\u0B4B\x05\b\x05\x02\u0B4A\u0B49" +
		"\x03\x02\x02\x02\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02" +
		"\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B54\x03\x02\x02\x02\u0B4E\u0B50\x07" +
		"\xC9\x02\x02\u0B4F\u0B51\x05\b\x05\x02\u0B50\u0B4F\x03\x02\x02\x02\u0B51" +
		"\u0B52\x03\x02\x02\x02\u0B52\u0B50\x03\x02\x02\x02\u0B52\u0B53\x03\x02" +
		"\x02\x02\u0B53\u0B55\x03\x02\x02\x02\u0B54\u0B4E\x03\x02\x02\x02\u0B54" +
		"\u0B55\x03\x02\x02\x02\u0B55\u0B56\x03\x02\x02\x02\u0B56\u0B5E\x05\xC2" +
		"b\x02\u0B57\u0B59\x05\b\x05\x02\u0B58\u0B57\x03\x02\x02\x02\u0B59\u0B5A" +
		"\x03\x02\x02\x02\u0B5A\u0B58\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02\x02\x02" +
		"\u0B5B\u0B5C\x03\x02\x02\x02\u0B5C\u0B5D\x05\xBE`\x02\u0B5D\u0B5F\x03" +
		"\x02\x02\x02\u0B5E\u0B58\x03\x02\x02\x02\u0B5F\u0B60\x03\x02\x02\x02\u0B60" +
		"\u0B5E\x03\x02\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\u0B6B\x03\x02" +
		"\x02\x02\u0B62\u0B64\x05\b\x05\x02\u0B63\u0B62\x03\x02\x02\x02\u0B64\u0B65" +
		"\x03\x02\x02\x02\u0B65\u0B63\x03\x02\x02\x02\u0B65\u0B66\x03\x02\x02\x02" +
		"\u0B66\u0B69\x03\x02\x02\x02\u0B67\u0B6A\x05\xA2R\x02\u0B68\u0B6A\x05" +
		"\xA4S\x02\u0B69\u0B67\x03\x02\x02\x02\u0B69\u0B68\x03\x02\x02\x02\u0B6A" +
		"\u0B6C\x03\x02\x02\x02\u0B6B\u0B63\x03\x02\x02\x02\u0B6B\u0B6C\x03\x02" +
		"\x02\x02\u0B6C\u0B74\x03\x02\x02\x02\u0B6D\u0B6F\x05\b\x05\x02\u0B6E\u0B6D" +
		"\x03\x02\x02\x02\u0B6F\u0B70\x03\x02\x02\x02\u0B70\u0B6E\x03\x02\x02\x02" +
		"\u0B70\u0B71\x03\x02\x02\x02\u0B71\u0B72\x03\x02\x02\x02\u0B72\u0B73\x07" +
		"\x82\x02\x02\u0B73\u0B75\x03\x02\x02\x02\u0B74\u0B6E\x03\x02\x02\x02\u0B74" +
		"\u0B75\x03\x02\x02\x02\u0B75\xB5\x03\x02\x02\x02\u0B76\u0B78\x07\x06\x02" +
		"\x02\u0B77\u0B79\x05\b\x05\x02\u0B78\u0B77\x03\x02\x02\x02\u0B79\u0B7A" +
		"\x03\x02\x02\x02\u0B7A\u0B78\x03\x02\x02\x02\u0B7A\u0B7B\x03\x02\x02\x02" +
		"\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B84\x05\u0180\xC1\x02\u0B7D\u0B7F" +
		"\x05\b\x05\x02\u0B7E\u0B7D\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02" +
		"\u0B80\u0B7E\x03\x02\x02\x02\u0B80\u0B81\x03\x02\x02\x02\u0B81\u0B82\x03" +
		"\x02\x02\x02\u0B82\u0B83\x05\xB8]\x02\u0B83\u0B85\x03\x02\x02\x02\u0B84" +
		"\u0B7E\x03\x02\x02\x02\u0B84\u0B85\x03\x02\x02\x02\u0B85\u0B8D\x03\x02" +
		"\x02\x02\u0B86\u0B88\x05\b\x05\x02\u0B87\u0B86\x03\x02\x02\x02\u0B88\u0B89" +
		"\x03\x02\x02\x02\u0B89\u0B87\x03\x02\x02\x02\u0B89\u0B8A\x03\x02\x02\x02" +
		"\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B\u0B8C\x05\xA2R\x02\u0B8C\u0B8E\x03" +
		"\x02\x02\x02\u0B8D\u0B87\x03\x02\x02\x02\u0B8D\u0B8E\x03\x02\x02\x02\u0B8E" +
		"\u0B96\x03\x02\x02\x02\u0B8F\u0B91\x05\b\x05\x02\u0B90\u0B8F\x03\x02\x02" +
		"\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B90\x03\x02\x02\x02\u0B92\u0B93" +
		"\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02\u0B94\u0B95\x07\x82\x02\x02" +
		"\u0B95\u0B97\x03\x02\x02\x02\u0B96\u0B90\x03\x02\x02\x02\u0B96\u0B97\x03" +
		"\x02\x02\x02\u0B97\xB7\x03\x02\x02\x02\u0B98\u0B9A\x07\x1F\x02\x02\u0B99" +
		"\u0B9B\x05\b\x05\x02\u0B9A\u0B99\x03\x02\x02\x02\u0B9B\u0B9C\x03\x02\x02" +
		"\x02\u0B9C\u0B9A\x03\x02\x02\x02\u0B9C\u0B9D\x03\x02\x02\x02\u0B9D\u0B9F" +
		"\x03\x02\x02\x02\u0B9E\u0B98\x03\x02\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02" +
		"\u0B9F\u0BB4\x03\x02\x02\x02\u0BA0\u0BA8\x05\xBA^\x02\u0BA1\u0BA3\x05" +
		"\b\x05\x02\u0BA2\u0BA1\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4" +
		"\u0BA2\x03\x02\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02" +
		"\x02\x02\u0BA6\u0BA7\x05\xBC_\x02\u0BA7\u0BA9\x03\x02\x02\x02\u0BA8\u0BA2" +
		"\x03\x02\x02\x02\u0BA8\u0BA9\x03\x02\x02\x02\u0BA9\u0BB5\x03\x02\x02\x02" +
		"\u0BAA\u0BB2\x05\xBC_\x02\u0BAB\u0BAD\x05\b\x05\x02\u0BAC\u0BAB\x03\x02" +
		"\x02\x02\u0BAD\u0BAE\x03\x02\x02\x02\u0BAE\u0BAC\x03\x02\x02\x02\u0BAE" +
		"\u0BAF\x03\x02\x02\x02\u0BAF\u0BB0\x03\x02\x02\x02\u0BB0\u0BB1\x05\xBA" +
		"^\x02\u0BB1\u0BB3\x03\x02\x02\x02\u0BB2\u0BAC\x03\x02\x02\x02\u0BB2\u0BB3" +
		"\x03\x02\x02\x02\u0BB3\u0BB5\x03\x02\x02\x02\u0BB4\u0BA0\x03\x02\x02\x02" +
		"\u0BB4\u0BAA\x03\x02\x02\x02\u0BB5\xB9\x03\x02\x02\x02\u0BB6\u0BB8\x07" +
		"\xE4\x02\x02\u0BB7\u0BB9\x05\b\x05\x02\u0BB8\u0BB7\x03\x02\x02\x02\u0BB9" +
		"\u0BBA\x03\x02\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB\x03\x02" +
		"\x02\x02\u0BBB\u0BC2\x03\x02\x02\x02\u0BBC\u0BBE\x07\xFB\x02\x02\u0BBD" +
		"\u0BBF\x05\b\x05\x02\u0BBE\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02" +
		"\x02\u0BC0\u0BBE\x03\x02\x02\x02\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u0BC3" +
		"\x03\x02\x02\x02\u0BC2\u0BBC\x03\x02\x02\x02\u0BC2\u0BC3\x03\x02\x02\x02" +
		"\u0BC3\u0BC6\x03\x02\x02\x02\u0BC4\u0BC7\x07\u01B6\x02\x02\u0BC5\u0BC7" +
		"\x05\u01CE\xE8\x02\u0BC6\u0BC4\x03\x02\x02\x02\u0BC6\u0BC5\x03\x02\x02" +
		"\x02\u0BC7\xBB\x03\x02\x02\x02\u0BC8\u0BCA\x07A\x02\x02\u0BC9\u0BCB\x05" +
		"\b\x05\x02\u0BCA\u0BC9\x03\x02\x02\x02\u0BCB\u0BCC\x03\x02\x02\x02\u0BCC" +
		"\u0BCA\x03\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\u0BD4\x03\x02" +
		"\x02\x02\u0BCE\u0BD0\x07\xFB\x02\x02\u0BCF\u0BD1\x05\b\x05\x02\u0BD0\u0BCF" +
		"\x03\x02\x02\x02\u0BD1\u0BD2\x03\x02\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02" +
		"\u0BD2\u0BD3\x03\x02\x02\x02\u0BD3\u0BD5\x03\x02\x02\x02\u0BD4\u0BCE\x03" +
		"\x02\x02\x02\u0BD4\u0BD5\x03\x02\x02\x02\u0BD5\u0BD8\x03\x02\x02\x02\u0BD6" +
		"\u0BD9\x07\u01B6\x02\x02\u0BD7\u0BD9\x05\u01CE\xE8\x02\u0BD8\u0BD6\x03" +
		"\x02\x02\x02\u0BD8\u0BD7\x03\x02\x02\x02\u0BD9\xBD\x03\x02\x02\x02\u0BDA" +
		"\u0BDC\x07\xB7\x02\x02\u0BDB\u0BDD\x05\b\x05\x02\u0BDC\u0BDB\x03\x02\x02" +
		"\x02\u0BDD\u0BDE\x03\x02\x02\x02\u0BDE\u0BDC\x03\x02\x02\x02\u0BDE\u0BDF" +
		"\x03\x02\x02\x02\u0BDF\u0BE1\x03\x02\x02\x02\u0BE0\u0BDA\x03\x02\x02\x02" +
		"\u0BE0\u0BE1\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BEA\x07" +
		"\xE4\x02\x02\u0BE3\u0BE5\x05\b\x05\x02\u0BE4\u0BE3\x03\x02\x02\x02\u0BE5" +
		"\u0BE6\x03\x02\x02\x02\u0BE6\u0BE4\x03\x02\x02\x02\u0BE6\u0BE7\x03\x02" +
		"\x02\x02\u0BE7\u0BE8\x03\x02\x02\x02\u0BE8\u0BE9\x07\xFB\x02\x02\u0BE9" +
		"\u0BEB\x03\x02\x02\x02\u0BEA\u0BE4\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02" +
		"\x02\x02\u0BEB\u0BED\x03\x02\x02\x02\u0BEC\u0BEE\x05\b\x05\x02\u0BED\u0BEC" +
		"\x03\x02\x02\x02\u0BEE\u0BEF\x03\x02\x02\x02\u0BEF\u0BED\x03\x02\x02\x02" +
		"\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\u0BF2\x05" +
		"\xCCg\x02\u0BF2\u0C37\x03\x02\x02\x02\u0BF3\u0BF5\x07\xB7\x02\x02\u0BF4" +
		"\u0BF6\x05\b\x05\x02\u0BF5\u0BF4\x03\x02\x02\x02\u0BF6\u0BF7\x03\x02\x02" +
		"\x02\u0BF7\u0BF5\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02\x02\x02\u0BF8\u0BFA" +
		"\x03\x02\x02\x02\u0BF9\u0BF3\x03\x02\x02\x02\u0BF9\u0BFA\x03\x02\x02\x02" +
		"\u0BFA\u0BFB\x03\x02\x02\x02\u0BFB\u0C03\x07A\x02\x02\u0BFC\u0BFE\x05" +
		"\b\x05\x02\u0BFD\u0BFC\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF" +
		"\u0BFD\x03\x02\x02\x02\u0BFF\u0C00\x03\x02\x02\x02\u0C00\u0C01\x03\x02" +
		"\x02\x02\u0C01\u0C02\x07\xFB\x02\x02\u0C02\u0C04\x03\x02\x02\x02\u0C03" +
		"\u0BFD\x03\x02\x02\x02\u0C03\u0C04\x03\x02\x02\x02\u0C04\u0C06\x03\x02" +
		"\x02\x02\u0C05\u0C07\x05\b\x05\x02\u0C06\u0C05\x03\x02\x02\x02\u0C07\u0C08" +
		"\x03\x02\x02\x02\u0C08\u0C06\x03\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02" +
		"\u0C09\u0C0A\x03\x02\x02\x02\u0C0A\u0C0B\x05\xCCg\x02\u0C0B\u0C37\x03" +
		"\x02\x02\x02\u0C0C\u0C24\x07\x9D\x02\x02\u0C0D\u0C0F\x05\b\x05\x02\u0C0E" +
		"\u0C0D\x03\x02\x02\x02\u0C0F\u0C10\x03\x02\x02\x02\u0C10\u0C0E\x03\x02" +
		"\x02\x02\u0C10\u0C11\x03\x02\x02\x02\u0C11\u0C18\x03\x02\x02\x02\u0C12" +
		"\u0C14\x07\u0175\x02\x02\u0C13\u0C15\x05\b\x05\x02\u0C14\u0C13\x03\x02" +
		"\x02\x02\u0C15\u0C16\x03\x02\x02\x02\u0C16\u0C14\x03\x02\x02\x02\u0C16" +
		"\u0C17\x03\x02\x02\x02\u0C17\u0C19\x03\x02\x02\x02\u0C18\u0C12\x03\x02" +
		"\x02\x02\u0C18\u0C19\x03\x02\x02\x02\u0C19\u0C1A\x03\x02\x02\x02\u0C1A" +
		"\u0C22\x07\x81\x02\x02\u0C1B\u0C1D\x05\b\x05\x02\u0C1C\u0C1B\x03\x02\x02" +
		"\x02\u0C1D\u0C1E\x03\x02\x02\x02\u0C1E\u0C1C\x03\x02\x02\x02\u0C1E\u0C1F" +
		"\x03\x02\x02\x02\u0C1F\u0C20\x03\x02\x02\x02\u0C20\u0C21\x07\xFF\x02\x02" +
		"\u0C21\u0C23\x03\x02\x02\x02\u0C22\u0C1C\x03\x02\x02\x02\u0C22\u0C23\x03" +
		"\x02\x02\x02\u0C23\u0C25\x03\x02\x02\x02\u0C24\u0C0E\x03\x02\x02\x02\u0C24" +
		"\u0C25\x03\x02\x02\x02\u0C25\u0C27\x03\x02\x02\x02\u0C26\u0C28\x05\b\x05" +
		"\x02\u0C27\u0C26\x03\x02\x02\x02\u0C28\u0C29\x03\x02\x02\x02\u0C29\u0C27" +
		"\x03\x02\x02\x02\u0C29\u0C2A\x03\x02\x02\x02\u0C2A\u0C2B\x03\x02\x02\x02" +
		"\u0C2B\u0C2C\t\b\x02\x02\u0C2C\u0C37\x03\x02\x02\x02\u0C2D\u0C2F\x07\u018B" +
		"\x02\x02\u0C2E\u0C30\x05\b\x05\x02\u0C2F\u0C2E\x03\x02\x02\x02\u0C30\u0C31" +
		"\x03\x02\x02\x02\u0C31\u0C2F\x03\x02\x02\x02\u0C31\u0C32\x03\x02\x02\x02" +
		"\u0C32\u0C34\x03\x02\x02\x02\u0C33\u0C2D\x03\x02\x02\x02\u0C33\u0C34\x03" +
		"\x02\x02\x02\u0C34\u0C35\x03\x02\x02\x02\u0C35\u0C37\x07&\x02\x02\u0C36" +
		"\u0BE0\x03\x02\x02\x02\u0C36\u0BF9\x03\x02\x02\x02\u0C36\u0C0C\x03\x02" +
		"\x02\x02\u0C36\u0C33\x03\x02\x02\x02\u0C37\xBF\x03\x02\x02\x02\u0C38\u0C92" +
		"\x05\xBE`\x02\u0C39\u0C92\x07\u017B\x02\x02\u0C3A\u0C92\x070\x02\x02\u0C3B" +
		"\u0C3D\x07\u018B\x02\x02\u0C3C\u0C3E\x05\b\x05\x02\u0C3D\u0C3C\x03\x02" +
		"\x02\x02\u0C3E\u0C3F\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02\u0C3F" +
		"\u0C40\x03\x02\x02\x02\u0C40\u0C42\x03\x02\x02\x02\u0C41\u0C3B\x03\x02" +
		"\x02\x02\u0C41\u0C42\x03\x02\x02\x02\u0C42\u0C43\x03\x02\x02\x02\u0C43" +
		"\u0C92\x07.\x02\x02\u0C44\u0C4C\x07\u0120\x02\x02\u0C45\u0C47\x05\b\x05" +
		"\x02\u0C46\u0C45\x03\x02\x02\x02\u0C47\u0C48\x03\x02\x02\x02\u0C48\u0C46" +
		"\x03\x02\x02\x02\u0C48\u0C49\x03\x02\x02\x02\u0C49\u0C4A\x03\x02\x02\x02" +
		"\u0C4A\u0C4B\x05\xC6d\x02\u0C4B\u0C4D\x03\x02\x02\x02\u0C4C\u0C46\x03" +
		"\x02\x02\x02\u0C4C\u0C4D\x03\x02\x02\x02\u0C4D\u0C92\x03\x02\x02\x02\u0C4E" +
		"\u0C50\x07\u018B\x02\x02\u0C4F\u0C51\x05\b\x05\x02\u0C50\u0C4F\x03\x02" +
		"\x02\x02\u0C51\u0C52\x03\x02\x02\x02\u0C52\u0C50\x03\x02\x02\x02\u0C52" +
		"\u0C53\x03\x02\x02\x02\u0C53\u0C55\x03\x02\x02\x02\u0C54\u0C4E\x03\x02" +
		"\x02\x02\u0C54\u0C55\x03\x02\x02\x02\u0C55\u0C56\x03\x02\x02\x02\u0C56" +
		"\u0C92\x07\\\x02\x02\u0C57\u0C92\x07\u013A\x02\x02\u0C58\u0C5A\x07\u018B" +
		"\x02\x02\u0C59\u0C5B\x05\b\x05\x02\u0C5A\u0C59\x03\x02\x02\x02\u0C5B\u0C5C" +
		"\x03\x02\x02\x02\u0C5C\u0C5A\x03\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02\x02" +
		"\u0C5D\u0C5F\x03\x02\x02\x02\u0C5E\u0C58\x03\x02\x02\x02\u0C5E\u0C5F\x03" +
		"\x02\x02\x02\u0C5F\u0C60\x03\x02\x02\x02\u0C60\u0C62\x07\xF9\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0C61\u0C63\x05\b\x05\x02\u0C62\u0C61\x03\x02\x02\x02\u0C63\u0C64" +
		"\x03\x02\x02\x02\u0C64\u0C62\x03\x02\x02\x02\u0C64\u0C65\x03\x02\x02\x02" +
		"\u0C65\u0C66\x03\x02\x02\x02\u0C66\u0C67\x07\x7F\x02\x02\u0C67\u0C92\x03" +
		"\x02\x02\x02\u0C68\u0C6A\x07o\x02\x02\u0C69\u0C6B\x05\b\x05\x02\u0C6A" +
		"\u0C69\x03\x02\x02\x02\u0C6B\u0C6C\x03\x02\x02\x02\u0C6C\u0C6A\x03\x02" +
		"\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02\u0C6D\u0C74\x03\x02\x02\x02\u0C6E" +
		"\u0C70\x07\xD6\x02\x02\u0C6F\u0C71\x05\b\x05\x02\u0C70\u0C6F\x03\x02\x02" +
		"\x02\u0C71\u0C72\x03\x02\x02\x02\u0C72\u0C70\x03\x02\x02\x02\u0C72\u0C73" +
		"\x03\x02\x02\x02\u0C73\u0C75\x03\x02\x02\x02\u0C74\u0C6E\x03\x02\x02\x02" +
		"\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02\u0C76\u0C77\x05" +
		"\xC4c\x02\u0C77\u0C92\x03\x02\x02\x02\u0C78\u0C7A\x07Z\x02\x02\u0C79\u0C7B" +
		"\x05\b\x05\x02\u0C7A\u0C79\x03\x02\x02\x02\u0C7B\u0C7C\x03\x02\x02\x02" +
		"\u0C7C\u0C7A\x03\x02\x02\x02\u0C7C\u0C7D\x03\x02\x02\x02\u0C7D\u0C7F\x03" +
		"\x02\x02\x02\u0C7E\u0C78\x03\x02\x02\x02\u0C7E\u0C7F\x03\x02\x02\x02\u0C7F" +
		"\u0C80\x03\x02\x02\x02\u0C80\u0C88\x07\xDB\x02\x02\u0C81\u0C83\x05\b\x05" +
		"\x02\u0C82\u0C81\x03\x02\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C82" +
		"\x03\x02\x02\x02\u0C84\u0C85\x03\x02\x02\x02\u0C85\u0C86\x03\x02\x02\x02" +
		"\u0C86\u0C87\x07\xC9\x02\x02\u0C87\u0C89\x03\x02\x02\x02\u0C88\u0C82\x03" +
		"\x02\x02\x02\u0C88\u0C89\x03\x02\x02\x02\u0C89\u0C8B\x03\x02\x02\x02\u0C8A" +
		"\u0C8C\x05\b\x05\x02\u0C8B\u0C8A\x03\x02\x02\x02\u0C8C\u0C8D\x03\x02\x02" +
		"\x02\u0C8D\u0C8B\x03\x02\x02\x02\u0C8D\u0C8E\x03\x02\x02\x02\u0C8E\u0C8F" +
		"\x03\x02\x02\x02\u0C8F\u0C90\x05\xC2b\x02\u0C90\u0C92\x03\x02\x02\x02" +
		"\u0C91\u0C38\x03\x02\x02\x02\u0C91\u0C39\x03\x02\x02\x02\u0C91\u0C3A\x03" +
		"\x02\x02\x02\u0C91\u0C41\x03\x02\x02\x02\u0C91\u0C44\x03\x02\x02\x02\u0C91" +
		"\u0C54\x03\x02\x02\x02\u0C91\u0C57\x03\x02\x02\x02\u0C91\u0C5E\x03\x02" +
		"\x02\x02\u0C91\u0C68\x03\x02\x02\x02\u0C91\u0C7E\x03\x02\x02\x02\u0C92" +
		"\xC1\x03\x02\x02\x02\u0C93\u0C94\x05\u01CE\xE8\x02\u0C94\xC3\x03\x02\x02" +
		"\x02\u0C95\u0CA3\x05\x06\x04\x02\u0C96\u0CA3\x07\u01B5\x02\x02\u0C97\u0CA3" +
		"\x05\u01CE\xE8\x02\u0C98\u0CA0\x07c\x02\x02\u0C99\u0C9B\x05\b\x05\x02" +
		"\u0C9A\u0C99\x03\x02\x02\x02\u0C9B\u0C9C\x03\x02\x02\x02\u0C9C\u0C9A\x03" +
		"\x02\x02\x02\u0C9C\u0C9D\x03\x02\x02\x02\u0C9D\u0C9E\x03\x02\x02\x02\u0C9E" +
		"\u0C9F\x07\u0185\x02\x02\u0C9F\u0CA1\x03\x02\x02\x02\u0CA0\u0C9A\x03\x02" +
		"\x02\x02\u0CA0\u0CA1\x03\x02\x02\x02\u0CA1\u0CA3\x03\x02\x02\x02\u0CA2" +
		"\u0C95\x03\x02\x02\x02\u0CA2\u0C96\x03\x02\x02\x02\u0CA2\u0C97\x03\x02" +
		"\x02\x02\u0CA2\u0C98\x03\x02\x02\x02\u0CA3\xC5\x03\x02\x02\x02\u0CA4\u0CA6" +
		"\x07\u0152\x02\x02\u0CA5\u0CA7\x05\b\x05\x02\u0CA6\u0CA5\x03\x02\x02\x02" +
		"\u0CA7\u0CA8\x03\x02\x02\x02\u0CA8\u0CA6\x03\x02\x02\x02\u0CA8\u0CA9\x03" +
		"\x02\x02\x02\u0CA9\u0CAA\x03\x02\x02\x02\u0CAA\u0CAB\x05\xCAf\x02\u0CAB" +
		"\u0CDF\x03\x02\x02\x02\u0CAC\u0CAE\x07\u018B\x02\x02\u0CAD\u0CAF\x05\b" +
		"\x05\x02\u0CAE\u0CAD\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0" +
		"\u0CAE\x03\x02\x02\x02\u0CB0\u0CB1\x03\x02\x02\x02\u0CB1\u0CB3\x03\x02" +
		"\x02\x02\u0CB2\u0CAC\x03\x02\x02\x02\u0CB2\u0CB3\x03\x02\x02\x02\u0CB3" +
		"\u0CB4\x03\x02\x02\x02\u0CB4\u0CDF\x07#\x02\x02\u0CB5\u0CB7\x07\u018B" +
		"\x02\x02\u0CB6\u0CB8\x05\b\x05\x02\u0CB7\u0CB6\x03\x02\x02\x02\u0CB8\u0CB9" +
		"\x03\x02\x02\x02\u0CB9\u0CB7\x03\x02\x02\x02\u0CB9\u0CBA\x03\x02\x02\x02" +
		"\u0CBA\u0CBC\x03\x02\x02\x02\u0CBB\u0CB5\x03\x02\x02\x02\u0CBB\u0CBC\x03" +
		"\x02\x02\x02\u0CBC\u0CBD\x03\x02\x02\x02\u0CBD\u0CBF\x07\xF9\x02\x02\u0CBE" +
		"\u0CC0\x05\b\x05\x02\u0CBF\u0CBE\x03\x02\x02\x02\u0CC0\u0CC1\x03\x02\x02" +
		"\x02\u0CC1\u0CBF\x03\x02\x02\x02\u0CC1\u0CC2\x03\x02\x02\x02\u0CC2\u0CC3" +
		"\x03\x02\x02\x02\u0CC3\u0CC4\x07,\x02\x02\u0CC4\u0CDF\x03\x02\x02\x02" +
		"\u0CC5\u0CC7\x07\u018B\x02\x02\u0CC6\u0CC8\x05\b\x05\x02\u0CC7\u0CC6\x03" +
		"\x02\x02\x02\u0CC8\u0CC9\x03\x02\x02\x02\u0CC9\u0CC7\x03\x02\x02\x02\u0CC9" +
		"\u0CCA\x03\x02\x02\x02\u0CCA\u0CCC\x03\x02\x02\x02\u0CCB\u0CC5\x03\x02" +
		"\x02\x02\u0CCB\u0CCC\x03\x02\x02\x02\u0CCC\u0CCD\x03\x02\x02\x02\u0CCD" +
		"\u0CDF\x07\x80\x02\x02\u0CCE\u0CD0\x07\u018B\x02\x02\u0CCF\u0CD1\x05\b" +
		"\x05\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD1\u0CD2\x03\x02\x02\x02\u0CD2" +
		"\u0CD0\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD5\x03\x02" +
		"\x02\x02\u0CD4\u0CCE\x03\x02\x02\x02\u0CD4\u0CD5\x03\x02\x02\x02\u0CD5" +
		"\u0CD6\x03\x02\x02\x02\u0CD6\u0CD8\x07\xAD\x02\x02\u0CD7\u0CD9\x05\b\x05" +
		"\x02\u0CD8\u0CD7\x03\x02\x02\x02\u0CD9\u0CDA\x03\x02\x02\x02\u0CDA\u0CD8" +
		"\x03\x02\x02\x02\u0CDA\u0CDB\x03\x02\x02\x02\u0CDB\u0CDC\x03\x02\x02\x02" +
		"\u0CDC\u0CDD\x05\xC8e\x02\u0CDD\u0CDF\x03\x02\x02\x02\u0CDE\u0CA4\x03" +
		"\x02\x02\x02\u0CDE\u0CB2\x03\x02\x02\x02\u0CDE\u0CBB\x03\x02\x02\x02\u0CDE" +
		"\u0CCB\x03\x02\x02\x02\u0CDE\u0CD4\x03\x02\x02\x02\u0CDF\xC7\x03\x02\x02" +
		"\x02\u0CE0\u0CE1\x07\u01B5\x02\x02\u0CE1\xC9\x03\x02\x02\x02\u0CE2\u0CE5" +
		"\x07\u01B6\x02\x02\u0CE3\u0CE5\x05\u01CE\xE8\x02\u0CE4\u0CE2\x03\x02\x02" +
		"\x02\u0CE4\u0CE3\x03\x02\x02\x02\u0CE5\xCB\x03\x02\x02\x02\u0CE6\u0D04" +
		"\x05\u013A\x9E\x02\u0CE7\u0CF7\x05\u01CE\xE8\x02\u0CE8\u0CEA\x05\b\x05" +
		"\x02\u0CE9\u0CE8\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02\x02\u0CEB\u0CE9" +
		"\x03\x02\x02\x02\u0CEB\u0CEC\x03\x02\x02\x02\u0CEC\u0CED\x03\x02\x02\x02" +
		"\u0CED\u0CF5\x07\u0114\x02\x02\u0CEE\u0CF0\x05\b\x05\x02\u0CEF\u0CEE\x03" +
		"\x02\x02\x02\u0CF0\u0CF1\x03\x02\x02\x02\u0CF1\u0CEF\x03\x02\x02\x02\u0CF1" +
		"\u0CF2\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF4\x05\u013A" +
		"\x9E\x02\u0CF4\u0CF6\x03\x02\x02\x02\u0CF5\u0CEF\x03\x02\x02\x02\u0CF5" +
		"\u0CF6\x03\x02\x02\x02\u0CF6\u0CF8\x03\x02\x02\x02\u0CF7\u0CE9\x03\x02" +
		"\x02\x02\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0D04\x03\x02\x02\x02\u0CF9" +
		"\u0D01\x07\u0114\x02\x02\u0CFA\u0CFC\x05\b\x05\x02\u0CFB\u0CFA\x03\x02" +
		"\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0CFB\x03\x02\x02\x02\u0CFD" +
		"\u0CFE\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D00\x05\u013A" +
		"\x9E\x02\u0D00\u0D02\x03\x02\x02\x02\u0D01\u0CFB\x03\x02\x02\x02\u0D01" +
		"\u0D02\x03\x02\x02\x02\u0D02\u0D04\x03\x02\x02\x02\u0D03\u0CE6\x03\x02" +
		"\x02\x02\u0D03\u0CE7\x03\x02\x02\x02\u0D03\u0CF9\x03\x02\x02\x02\u0D04" +
		"\xCD\x03\x02\x02\x02\u0D05\u0D0D\x07f\x02\x02\u0D06\u0D08\x05\b\x05\x02" +
		"\u0D07\u0D06\x03\x02\x02\x02\u0D08\u0D09\x03\x02\x02\x02\u0D09\u0D07\x03" +
		"\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02\u0D0B" +
		"\u0D0C\x07\u0190\x02\x02\u0D0C\u0D0E\x03\x02\x02\x02\u0D0D\u0D07\x03\x02" +
		"\x02\x02\u0D0D\u0D0E\x03\x02\x02\x02\u0D0E\u0D1C\x03\x02\x02\x02\u0D0F" +
		"\u0D17\x07i\x02\x02\u0D10\u0D12\x05\b\x05\x02\u0D11\u0D10\x03\x02\x02" +
		"\x02\u0D12\u0D13\x03\x02\x02\x02\u0D13\u0D11\x03\x02\x02\x02\u0D13\u0D14" +
		"\x03\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0D16\x07\u018F\x02" +
		"\x02\u0D16\u0D18\x03\x02\x02\x02\u0D17\u0D11\x03\x02\x02\x02\u0D17\u0D18" +
		"\x03\x02\x02\x02\u0D18\u0D1C\x03\x02\x02\x02\u0D19\u0D1C\x07j\x02\x02" +
		"\u0D1A\u0D1C\x07\u0173\x02\x02\u0D1B\u0D05\x03\x02\x02\x02\u0D1B\u0D0F" +
		"\x03\x02\x02\x02\u0D1B\u0D19\x03\x02\x02\x02\u0D1B\u0D1A\x03\x02\x02\x02" +
		"\u0D1C\xCF\x03\x02\x02\x02\u0D1D\u0D1E\x05\u0278\u013D\x02\u0D1E\xD1\x03" +
		"\x02\x02\x02\u0D1F\u0D20\x07\u01B8\x02\x02\u0D20\xD3\x03\x02\x02\x02\u0D21" +
		"\u0D23\x07\x1F\x02\x02\u0D22\u0D24\x05\b\x05\x02\u0D23\u0D22\x03\x02\x02" +
		"\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25\u0D23\x03\x02\x02\x02\u0D25\u0D26" +
		"\x03\x02\x02\x02\u0D26\u0D28\x03\x02\x02\x02\u0D27\u0D21\x03\x02\x02\x02" +
		"\u0D27\u0D28\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0D31\x07" +
		"\x81\x02\x02\u0D2A\u0D2C\x05\b\x05\x02\u0D2B\u0D2A\x03\x02\x02\x02\u0D2C" +
		"\u0D2D\x03\x02\x02\x02\u0D2D\u0D2B\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02" +
		"\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x05 \x11\x02\u0D30\u0D32" +
		"\x03\x02\x02\x02\u0D31\u0D2B\x03\x02\x02\x02\u0D31\u0D32\x03\x02\x02\x02" +
		"\u0D32\xD5\x03\x02\x02\x02\u0D33\u0D35\x07\u0102\x02\x02\u0D34\u0D36\x05" +
		"\b\x05\x02\u0D35\u0D34\x03\x02\x02\x02\u0D36\u0D37\x03\x02\x02\x02\u0D37" +
		"\u0D35\x03\x02\x02\x02\u0D37\u0D38\x03\x02\x02\x02\u0D38\u0D3A\x03\x02" +
		"\x02\x02\u0D39\u0D33\x03\x02\x02\x02\u0D39\u0D3A\x03\x02\x02\x02\u0D3A" +
		"\u0D3B\x03\x02\x02\x02\u0D3B\u0D43\x07\xA1\x02\x02\u0D3C\u0D3E\x05\b\x05" +
		"\x02\u0D3D\u0D3C\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02\x02\x02\u0D3F\u0D3D" +
		"\x03\x02\x02\x02\u0D3F\u0D40\x03\x02\x02\x02\u0D40\u0D41\x03\x02\x02\x02" +
		"\u0D41\u0D42\x05 \x11\x02\u0D42\u0D44\x03\x02\x02\x02\u0D43\u0D3D\x03" +
		"\x02\x02\x02\u0D43\u0D44\x03\x02\x02\x02\u0D44\xD7\x03\x02\x02\x02\u0D45" +
		"\u0D47\x07\u0102\x02\x02\u0D46\u0D48\x05\b\x05\x02\u0D47\u0D46\x03\x02" +
		"\x02\x02\u0D48\u0D49\x03\x02\x02\x02\u0D49\u0D47\x03\x02\x02\x02\u0D49" +
		"\u0D4A\x03\x02\x02\x02\u0D4A\u0D4C\x03\x02\x02\x02\u0D4B\u0D45\x03\x02" +
		"\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C\u0D4D\x03\x02\x02\x02\u0D4D" +
		"\u0D4F\x07\u0152\x02\x02\u0D4E\u0D50\x05\b\x05\x02\u0D4F\u0D4E\x03\x02" +
		"\x02\x02\u0D50\u0D51\x03\x02\x02\x02\u0D51\u0D4F\x03\x02\x02\x02\u0D51" +
		"\u0D52\x03\x02\x02\x02\u0D52\u0D53\x03\x02\x02\x02\u0D53\u0D5B\x07\x9E" +
		"\x02\x02\u0D54\u0D56\x05\b\x05\x02\u0D55\u0D54\x03\x02\x02\x02\u0D56\u0D57" +
		"\x03\x02\x02\x02\u0D57\u0D55\x03\x02\x02\x02\u0D57\u0D58\x03\x02\x02\x02" +
		"\u0D58\u0D59\x03\x02\x02\x02\u0D59\u0D5A\x05 \x11\x02\u0D5A\u0D5C\x03" +
		"\x02\x02\x02\u0D5B\u0D55\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C" +
		"\xD9\x03\x02\x02\x02\u0D5D\u0D65\x07\xD5\x02\x02\u0D5E\u0D60\x05\b\x05" +
		"\x02\u0D5F\u0D5E\x03\x02\x02\x02\u0D60\u0D61\x03\x02\x02\x02\u0D61\u0D5F" +
		"\x03\x02\x02\x02\u0D61\u0D62\x03\x02\x02\x02\u0D62\u0D63\x03\x02\x02\x02" +
		"\u0D63\u0D64\x07\xDB\x02\x02\u0D64\u0D66\x03\x02\x02\x02\u0D65\u0D5F\x03" +
		"\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66\u0D6E\x03\x02\x02\x02\u0D67" +
		"\u0D69\x05\b\x05\x02\u0D68\u0D67\x03\x02\x02\x02\u0D69\u0D6A\x03\x02\x02" +
		"\x02\u0D6A\u0D68\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02\u0D6B\u0D6C" +
		"\x03\x02\x02\x02\u0D6C\u0D6D\x05 \x11\x02\u0D6D\u0D6F\x03\x02\x02\x02" +
		"\u0D6E\u0D68\x03\x02\x02\x02\u0D6E\u0D6F\x03\x02\x02\x02\u0D6F\xDB\x03" +
		"\x02\x02\x02\u0D70\u0D72\x07e\x02\x02\u0D71\u0D73\x05\b\x05\x02\u0D72" +
		"\u0D71\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D72\x03\x02" +
		"\x02\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75\u0D76\x03\x02\x02\x02\u0D76" +
		"\u0D7A\x07z\x02\x02\u0D77\u0D79\x05\b\x05\x02\u0D78\u0D77\x03\x02\x02" +
		"\x02\u0D79\u0D7C\x03\x02\x02\x02\u0D7A\u0D78\x03\x02\x02\x02\u0D7A\u0D7B" +
		"\x03\x02\x02\x02\u0D7B\u0D7D\x03\x02\x02\x02\u0D7C\u0D7A\x03\x02\x02\x02" +
		"\u0D7D\u0D81\x07\u01B2\x02\x02\u0D7E\u0D80\x05\b\x05\x02\u0D7F\u0D7E\x03" +
		"\x02\x02\x02\u0D80\u0D83\x03\x02\x02\x02\u0D81\u0D7F\x03\x02\x02\x02\u0D81" +
		"\u0D82\x03\x02\x02\x02\u0D82\u0D8B\x03\x02\x02\x02\u0D83\u0D81\x03\x02" +
		"\x02\x02\u0D84\u0D88\x05\xDEp\x02\u0D85\u0D87\x05\b\x05\x02\u0D86\u0D85" +
		"\x03\x02\x02\x02\u0D87\u0D8A\x03\x02\x02\x02\u0D88\u0D86\x03\x02\x02\x02" +
		"\u0D88\u0D89\x03\x02\x02\x02\u0D89\u0D8C\x03\x02\x02\x02\u0D8A\u0D88\x03" +
		"\x02\x02\x02\u0D8B\u0D84\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02\u0D8C" +
		"\u0D94\x03\x02\x02\x02\u0D8D\u0D91\x05\xE0q\x02\u0D8E\u0D90\x05\b\x05" +
		"\x02\u0D8F\u0D8E\x03\x02\x02\x02\u0D90\u0D93\x03\x02\x02\x02\u0D91\u0D8F" +
		"\x03\x02\x02\x02\u0D91\u0D92\x03\x02\x02\x02\u0D92\u0D95\x03\x02\x02\x02" +
		"\u0D93\u0D91\x03\x02\x02\x02\u0D94\u0D8D\x03\x02\x02\x02\u0D94\u0D95\x03" +
		"\x02\x02\x02\u0D95\u0D9D\x03\x02\x02\x02\u0D96\u0D9A\x05\xE2r\x02\u0D97" +
		"\u0D99\x05\b\x05\x02\u0D98\u0D97\x03\x02\x02\x02\u0D99\u0D9C\x03\x02\x02" +
		"\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9A\u0D9B\x03\x02\x02\x02\u0D9B\u0D9E" +
		"\x03\x02\x02\x02\u0D9C\u0D9A\x03\x02\x02\x02\u0D9D\u0D96\x03\x02\x02\x02" +
		"\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E\u0DA6\x03\x02\x02\x02\u0D9F\u0DA3\x05" +
		"\xE4s\x02\u0DA0\u0DA2\x05\b\x05\x02\u0DA1\u0DA0\x03\x02\x02\x02\u0DA2" +
		"\u0DA5\x03\x02\x02\x02\u0DA3\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02" +
		"\x02\x02\u0DA4\u0DA7\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02\u0DA6" +
		"\u0D9F\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DAF\x03\x02" +
		"\x02\x02\u0DA8\u0DAC\x05\xE6t\x02\u0DA9\u0DAB\x05\b\x05\x02\u0DAA\u0DA9" +
		"\x03\x02\x02\x02\u0DAB\u0DAE\x03\x02\x02\x02\u0DAC\u0DAA\x03\x02\x02\x02" +
		"\u0DAC\u0DAD\x03\x02\x02\x02\u0DAD\u0DB0\x03\x02\x02\x02\u0DAE\u0DAC\x03" +
		"\x02\x02\x02\u0DAF\u0DA8\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0" +
		"\xDD\x03\x02\x02\x02\u0DB1\u0DB3\x07\xAA\x02\x02\u0DB2\u0DB4\x05\b\x05" +
		"\x02\u0DB3\u0DB2\x03\x02\x02\x02\u0DB4\u0DB5\x03\x02\x02\x02\u0DB5\u0DB3" +
		"\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DB7\x03\x02\x02\x02" +
		"\u0DB7\u0DBB\x07\u0147\x02\x02\u0DB8\u0DBA\x05\b\x05\x02\u0DB9\u0DB8\x03" +
		"\x02\x02\x02\u0DBA\u0DBD\x03\x02\x02\x02\u0DBB\u0DB9\x03\x02\x02\x02\u0DBB" +
		"\u0DBC\x03\x02\x02\x02\u0DBC\u0DBE\x03\x02\x02\x02\u0DBD\u0DBB\x03\x02" +
		"\x02\x02\u0DBE\u0DC2\x07\u01B2\x02\x02\u0DBF\u0DC1\x05\b\x05\x02\u0DC0" +
		"\u0DBF\x03\x02\x02\x02\u0DC1\u0DC4\x03\x02\x02\x02\u0DC2\u0DC0\x03\x02" +
		"\x02\x02\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3\u0DEA\x03\x02\x02\x02\u0DC4" +
		"\u0DC2\x03\x02\x02\x02\u0DC5\u0DCF\x05\xE8u\x02\u0DC6\u0DC8\x05\b\x05" +
		"\x02\u0DC7\u0DC6\x03\x02\x02\x02\u0DC8\u0DCB\x03\x02\x02\x02\u0DC9\u0DC7" +
		"\x03\x02\x02\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA\u0DCC\x03\x02\x02\x02" +
		"\u0DCB\u0DC9\x03\x02\x02\x02\u0DCC\u0DCE\x05\xF0y\x02\u0DCD\u0DC9\x03" +
		"\x02\x02\x02\u0DCE\u0DD1\x03\x02\x02\x02\u0DCF\u0DCD\x03\x02\x02\x02\u0DCF" +
		"\u0DD0\x03\x02\x02\x02\u0DD0\u0DE1\x03\x02\x02\x02\u0DD1\u0DCF\x03\x02" +
		"\x02\x02\u0DD2\u0DE1\x05\xECw\x02\u0DD3\u0DDD\x05\xEAv\x02\u0DD4\u0DD6" +
		"\x05\b\x05\x02\u0DD5\u0DD4\x03\x02\x02\x02\u0DD6\u0DD9\x03\x02\x02\x02" +
		"\u0DD7\u0DD5\x03\x02\x02\x02\u0DD7\u0DD8\x03\x02\x02\x02\u0DD8\u0DDA\x03" +
		"\x02\x02\x02\u0DD9\u0DD7\x03\x02\x02\x02\u0DDA\u0DDC\x05\xF0y\x02\u0DDB" +
		"\u0DD7\x03\x02\x02\x02\u0DDC\u0DDF\x03\x02\x02\x02\u0DDD\u0DDB\x03\x02" +
		"\x02\x02\u0DDD\u0DDE\x03\x02\x02\x02\u0DDE\u0DE1\x03\x02\x02\x02\u0DDF" +
		"\u0DDD\x03\x02\x02\x02\u0DE0\u0DC5\x03\x02\x02\x02\u0DE0\u0DD2\x03\x02" +
		"\x02\x02\u0DE0\u0DD3\x03\x02\x02\x02\u0DE1\u0DE5\x03\x02\x02\x02\u0DE2" +
		"\u0DE4\x05\b\x05\x02\u0DE3\u0DE2\x03\x02\x02\x02\u0DE4\u0DE7\x03\x02\x02" +
		"\x02\u0DE5\u0DE3\x03\x02\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02\u0DE6\u0DE9" +
		"\x03\x02\x02\x02\u0DE7\u0DE5\x03\x02\x02\x02\u0DE8\u0DE0\x03\x02\x02\x02" +
		"\u0DE9\u0DEC\x03\x02\x02\x02\u0DEA\u0DE8\x03\x02\x02\x02\u0DEA\u0DEB\x03" +
		"\x02\x02\x02\u0DEB\xDF\x03\x02\x02\x02\u0DEC\u0DEA\x03\x02\x02\x02\u0DED" +
		"\u0DEF\x07\u018D\x02\x02\u0DEE\u0DF0\x05\b\x05\x02\u0DEF\u0DEE\x03\x02" +
		"\x02\x02\u0DF0\u0DF1\x03\x02\x02\x02\u0DF1\u0DEF\x03\x02\x02\x02\u0DF1" +
		"\u0DF2\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3\u0DF7\x07\u0147" +
		"\x02\x02\u0DF4\u0DF6\x05\b\x05\x02\u0DF5\u0DF4\x03\x02\x02\x02\u0DF6\u0DF9" +
		"\x03\x02\x02\x02\u0DF7\u0DF5\x03\x02\x02\x02\u0DF7\u0DF8\x03\x02\x02\x02" +
		"\u0DF8\u0DFA\x03\x02\x02\x02\u0DF9\u0DF7\x03\x02\x02\x02\u0DFA\u0DFE\x07" +
		"\u01B2\x02\x02\u0DFB\u0DFD\x05\b\x05\x02\u0DFC\u0DFB\x03\x02\x02\x02\u0DFD" +
		"\u0E00\x03\x02\x02\x02\u0DFE\u0DFC\x03\x02\x02\x02\u0DFE\u0DFF\x03\x02" +
		"\x02\x02\u0DFF\u0E0A\x03\x02\x02\x02\u0E00\u0DFE\x03\x02\x02\x02\u0E01" +
		"\u0E05\x05\xF0y\x02\u0E02\u0E04\x05\b\x05\x02\u0E03\u0E02\x03\x02\x02" +
		"\x02\u0E04\u0E07\x03\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02\u0E05\u0E06" +
		"\x03\x02\x02\x02\u0E06\u0E09\x03\x02\x02\x02\u0E07\u0E05\x03\x02\x02\x02" +
		"\u0E08\u0E01\x03\x02\x02\x02\u0E09\u0E0C\x03\x02\x02\x02\u0E0A\u0E08\x03" +
		"\x02\x02\x02\u0E0A\u0E0B\x03\x02\x02\x02\u0E0B\xE1\x03\x02\x02\x02\u0E0C" +
		"\u0E0A\x03\x02\x02\x02\u0E0D\u0E0F\x07\xE7\x02\x02\u0E0E\u0E10\x05\b\x05" +
		"\x02\u0E0F\u0E0E\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E0F" +
		"\x03\x02\x02\x02\u0E11\u0E12\x03\x02\x02\x02\u0E12\u0E13\x03\x02\x02\x02" +
		"\u0E13\u0E17\x07\u0147\x02\x02\u0E14\u0E16\x05\b\x05\x02\u0E15\u0E14\x03" +
		"\x02\x02\x02\u0E16\u0E19\x03\x02\x02\x02\u0E17\u0E15\x03\x02\x02\x02\u0E17" +
		"\u0E18\x03\x02\x02\x02\u0E18\u0E1A\x03\x02\x02\x02\u0E19\u0E17\x03\x02" +
		"\x02\x02\u0E1A\u0E1E\x07\u01B2\x02\x02\u0E1B\u0E1D\x05\b\x05\x02\u0E1C" +
		"\u0E1B\x03\x02\x02\x02\u0E1D\u0E20\x03\x02\x02\x02\u0E1E\u0E1C\x03\x02" +
		"\x02\x02\u0E1E\u0E1F\x03\x02\x02\x02\u0E1F\u0E2A\x03\x02\x02\x02\u0E20" +
		"\u0E1E\x03\x02\x02\x02\u0E21\u0E25\x05\xF0y\x02\u0E22\u0E24\x05\b\x05" +
		"\x02\u0E23\u0E22\x03\x02\x02\x02\u0E24\u0E27\x03\x02\x02\x02\u0E25\u0E23" +
		"\x03\x02\x02\x02\u0E25\u0E26\x03\x02\x02\x02\u0E26\u0E29\x03\x02\x02\x02" +
		"\u0E27\u0E25\x03\x02\x02\x02\u0E28\u0E21\x03\x02\x02\x02\u0E29\u0E2C\x03" +
		"\x02\x02\x02\u0E2A\u0E28\x03\x02\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B" +
		"\xE3\x03\x02\x02\x02\u0E2C\u0E2A\x03\x02\x02\x02\u0E2D\u0E2F\x07\u0132" +
		"\x02\x02\u0E2E\u0E30\x05\b\x05\x02\u0E2F\u0E2E\x03\x02\x02\x02\u0E30\u0E31" +
		"\x03\x02\x02\x02\u0E31\u0E2F\x03\x02\x02\x02\u0E31\u0E32\x03\x02\x02\x02" +
		"\u0E32\u0E33\x03\x02\x02\x02\u0E33\u0E37\x07\u0147\x02\x02\u0E34\u0E36" +
		"\x05\b\x05\x02\u0E35\u0E34\x03\x02\x02\x02\u0E36\u0E39\x03\x02\x02\x02" +
		"\u0E37\u0E35\x03\x02\x02\x02\u0E37\u0E38\x03\x02\x02\x02\u0E38\u0E3A\x03" +
		"\x02\x02\x02\u0E39\u0E37\x03\x02\x02\x02\u0E3A\u0E3E\x07\u01B2\x02\x02" +
		"\u0E3B\u0E3D\x05\b\x05\x02\u0E3C\u0E3B\x03\x02\x02\x02\u0E3D\u0E40\x03" +
		"\x02\x02\x02\u0E3E\u0E3C\x03\x02\x02\x02\u0E3E\u0E3F\x03\x02\x02\x02\u0E3F" +
		"\u0E56\x03\x02\x02\x02\u0E40\u0E3E\x03\x02\x02\x02\u0E41\u0E4B\x05\xEC" +
		"w\x02\u0E42\u0E44\x05\b\x05\x02\u0E43\u0E42\x03\x02\x02\x02\u0E44\u0E47" +
		"\x03\x02\x02\x02\u0E45\u0E43\x03\x02\x02\x02\u0E45\u0E46\x03\x02\x02\x02" +
		"\u0E46\u0E48\x03\x02\x02\x02\u0E47\u0E45\x03\x02\x02\x02\u0E48\u0E4A\x05" +
		"\u011E\x90\x02\u0E49\u0E45\x03\x02\x02\x02\u0E4A\u0E4D\x03\x02\x02\x02" +
		"\u0E4B\u0E49\x03\x02\x02\x02\u0E4B\u0E4C\x03\x02\x02\x02\u0E4C\u0E51\x03" +
		"\x02\x02\x02\u0E4D\u0E4B\x03\x02\x02\x02\u0E4E\u0E50\x05\b\x05\x02\u0E4F" +
		"\u0E4E\x03\x02\x02\x02\u0E50\u0E53\x03\x02\x02\x02\u0E51\u0E4F\x03\x02" +
		"\x02\x02\u0E51\u0E52\x03\x02\x02\x02\u0E52\u0E55\x03\x02\x02\x02\u0E53" +
		"\u0E51\x03\x02\x02\x02\u0E54\u0E41\x03\x02\x02\x02\u0E55\u0E58\x03\x02" +
		"\x02\x02\u0E56\u0E54\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02\u0E57" +
		"\xE5\x03\x02\x02\x02\u0E58\u0E56\x03\x02\x02\x02\u0E59\u0E5B\x07\u0144" +
		"\x02\x02\u0E5A\u0E5C\x05\b\x05\x02\u0E5B\u0E5A\x03\x02\x02\x02\u0E5C\u0E5D" +
		"\x03\x02\x02\x02\u0E5D\u0E5B\x03\x02\x02\x02\u0E5D\u0E5E\x03\x02\x02\x02" +
		"\u0E5E\u0E5F\x03\x02\x02\x02\u0E5F\u0E63\x07\u0147\x02\x02\u0E60\u0E62" +
		"\x05\b\x05\x02\u0E61\u0E60\x03\x02\x02\x02\u0E62\u0E65\x03\x02\x02\x02" +
		"\u0E63\u0E61\x03\x02\x02\x02\u0E63\u0E64\x03\x02\x02\x02\u0E64\u0E66\x03" +
		"\x02\x02\x02\u0E65\u0E63\x03\x02\x02\x02\u0E66\u0E6A\x07\u01B2\x02\x02" +
		"\u0E67\u0E69\x05\b\x05\x02\u0E68\u0E67\x03\x02\x02\x02\u0E69\u0E6C\x03" +
		"\x02\x02\x02\u0E6A\u0E68\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B" +
		"\u0E76\x03\x02\x02\x02\u0E6C\u0E6A\x03\x02\x02\x02\u0E6D\u0E71\x05\u017E" +
		"\xC0\x02\u0E6E\u0E70\x05\b\x05\x02\u0E6F\u0E6E\x03\x02\x02\x02\u0E70\u0E73" +
		"\x03\x02\x02\x02\u0E71\u0E6F\x03\x02\x02\x02\u0E71\u0E72\x03\x02\x02\x02" +
		"\u0E72\u0E75\x03\x02\x02\x02\u0E73\u0E71\x03\x02\x02\x02\u0E74\u0E6D\x03" +
		"\x02\x02\x02\u0E75\u0E78\x03\x02\x02\x02\u0E76\u0E74\x03\x02\x02\x02\u0E76" +
		"\u0E77\x03\x02\x02\x02\u0E77\xE7\x03\x02\x02\x02\u0E78\u0E76\x03\x02\x02" +
		"\x02\u0E79\u0E7B\x07\xA9\x02\x02\u0E7A\u0E7C\x05\b\x05\x02\u0E7B\u0E7A" +
		"\x03\x02\x02\x02\u0E7C\u0E7D\x03\x02\x02\x02\u0E7D\u0E7B\x03\x02\x02\x02" +
		"\u0E7D\u0E7E\x03\x02\x02\x02\u0E7E\u0E7F\x03\x02\x02\x02\u0E7F\u0E83\x05" +
		"\u0238\u011D\x02\u0E80\u0E82\x05\b\x05\x02\u0E81\u0E80\x03\x02\x02\x02" +
		"\u0E82\u0E85\x03\x02\x02\x02\u0E83\u0E81\x03\x02\x02\x02\u0E83\u0E84\x03" +
		"\x02\x02\x02\u0E84\u0E8F\x03\x02\x02\x02\u0E85\u0E83\x03\x02\x02\x02\u0E86" +
		"\u0E8A\x05\xEEx\x02\u0E87\u0E89\x05\b\x05\x02\u0E88\u0E87\x03\x02\x02" +
		"\x02\u0E89\u0E8C\x03\x02\x02\x02\u0E8A\u0E88\x03\x02\x02\x02\u0E8A\u0E8B" +
		"\x03\x02\x02\x02\u0E8B\u0E8E\x03\x02\x02\x02\u0E8C\u0E8A\x03\x02\x02\x02" +
		"\u0E8D\u0E86\x03\x02\x02\x02\u0E8E\u0E91\x03\x02\x02\x02\u0E8F\u0E8D\x03" +
		"\x02\x02\x02\u0E8F\u0E90\x03\x02\x02\x02\u0E90\u0E92\x03\x02\x02\x02\u0E91" +
		"\u0E8F\x03\x02\x02\x02\u0E92\u0E93\x07\u01B2\x02\x02\u0E93\xE9\x03\x02" +
		"\x02\x02\u0E94\u0E96\x07\u0145\x02\x02\u0E95\u0E97\x05\b\x05\x02\u0E96" +
		"\u0E95\x03\x02\x02\x02\u0E97\u0E98\x03\x02\x02\x02\u0E98\u0E96\x03\x02" +
		"\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99\u0E9A\x03\x02\x02\x02\u0E9A" +
		"\u0E9E\x05\u0238\u011D\x02\u0E9B\u0E9D\x05\b\x05\x02\u0E9C\u0E9B\x03\x02" +
		"\x02\x02\u0E9D\u0EA0\x03\x02\x02\x02\u0E9E\u0E9C\x03\x02\x02\x02\u0E9E" +
		"\u0E9F\x03\x02\x02\x02\u0E9F\u0EAA\x03\x02\x02\x02\u0EA0\u0E9E\x03\x02" +
		"\x02\x02\u0EA1\u0EA5\x05\u015A\xAE\x02\u0EA2\u0EA4\x05\b\x05\x02\u0EA3" +
		"\u0EA2\x03\x02\x02\x02\u0EA4\u0EA7\x03\x02\x02\x02\u0EA5\u0EA3\x03\x02" +
		"\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0EA9\x03\x02\x02\x02\u0EA7" +
		"\u0EA5\x03\x02\x02\x02\u0EA8\u0EA1\x03\x02\x02\x02\u0EA9\u0EAC\x03\x02" +
		"\x02\x02\u0EAA\u0EA8\x03\x02\x02\x02\u0EAA\u0EAB\x03\x02\x02\x02\u0EAB" +
		"\u0EAD\x03\x02\x02\x02\u0EAC\u0EAA\x03\x02\x02\x02\u0EAD\u0EAE\x07\u01B2" +
		"\x02\x02\u0EAE\xEB\x03\x02\x02\x02\u0EAF\u0EB1\x07\u0124\x02\x02\u0EB0" +
		"\u0EB2\x05\b\x05\x02\u0EB1\u0EB0\x03\x02\x02\x02\u0EB2\u0EB3\x03\x02\x02" +
		"\x02\u0EB3\u0EB1\x03\x02\x02\x02\u0EB3\u0EB4\x03\x02\x02\x02\u0EB4\u0EB5" +
		"\x03\x02\x02\x02\u0EB5\u0EB9\x05\u015E\xB0\x02\u0EB6\u0EB8\x05\b\x05\x02" +
		"\u0EB7\u0EB6\x03\x02\x02\x02\u0EB8\u0EBB\x03\x02\x02\x02\u0EB9\u0EB7\x03" +
		"\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0EC5\x03\x02\x02\x02\u0EBB" +
		"\u0EB9\x03\x02\x02\x02\u0EBC\u0EC0\x05\u013C\x9F\x02\u0EBD\u0EBF\x05\b" +
		"\x05\x02\u0EBE\u0EBD\x03\x02\x02\x02\u0EBF\u0EC2\x03\x02\x02\x02\u0EC0" +
		"\u0EBE\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02\x02\x02\u0EC1\u0EC4\x03\x02" +
		"\x02\x02\u0EC2\u0EC0\x03\x02\x02\x02\u0EC3\u0EBC\x03\x02\x02\x02\u0EC4" +
		"\u0EC7\x03\x02\x02\x02\u0EC5\u0EC3\x03\x02\x02\x02\u0EC5\u0EC6\x03\x02" +
		"\x02\x02\u0EC6\u0EC8\x03\x02\x02\x02\u0EC7\u0EC5\x03\x02\x02\x02\u0EC8" +
		"\u0EC9\x07\u01B2\x02\x02\u0EC9\xED\x03\x02\x02\x02\u0ECA\u0ECC\x07\xD6" +
		"\x02\x02\u0ECB\u0ECD\x05\b\x05\x02\u0ECC\u0ECB\x03\x02\x02\x02\u0ECD\u0ECE" +
		"\x03\x02\x02\x02\u0ECE\u0ECC\x03\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02" +
		"\u0ECF\u0ED1\x03\x02\x02\x02\u0ED0\u0ECA\x03\x02\x02\x02\u0ED0\u0ED1\x03" +
		"\x02\x02\x02\u0ED1\u0ED2\x03\x02\x02\x02\u0ED2\u0EE8\x07\xA6\x02\x02\u0ED3" +
		"\u0ED5\x07\xD6\x02\x02\u0ED4\u0ED6\x05\b\x05\x02\u0ED5\u0ED4\x03\x02\x02" +
		"\x02\u0ED6\u0ED7\x03\x02\x02\x02\u0ED7\u0ED5\x03\x02\x02\x02\u0ED7\u0ED8" +
		"\x03\x02\x02\x02\u0ED8\u0EDA\x03\x02\x02\x02\u0ED9\u0ED3\x03\x02\x02\x02" +
		"\u0ED9\u0EDA\x03\x02\x02\x02\u0EDA\u0EDB\x03\x02\x02\x02\u0EDB\u0EE8\x07" +
		"\xBC\x02\x02\u0EDC\u0EE8\x05\u022C\u0117\x02\u0EDD\u0EE8\x05\u0174\xBB" +
		"\x02\u0EDE\u0EE8\x05\u0172\xBA\x02\u0EDF\u0EE8\x05\u016E\xB8\x02\u0EE0" +
		"\u0EE8\x05\u016A\xB6\x02\u0EE1\u0EE8\x05\u0160\xB1\x02\u0EE2\u0EE8\x05" +
		"\u015C\xAF\x02\u0EE3\u0EE8\x05\u022A\u0116\x02\u0EE4\u0EE8\x05\u0218\u010D" +
		"\x02\u0EE5\u0EE8\x05\u0214\u010B\x02\u0EE6\u0EE8\x05\u0210\u0109\x02\u0EE7" +
		"\u0ED0\x03\x02\x02\x02\u0EE7\u0ED9\x03\x02\x02\x02\u0EE7\u0EDC\x03\x02" +
		"\x02\x02\u0EE7\u0EDD\x03\x02\x02\x02\u0EE7\u0EDE\x03\x02\x02\x02\u0EE7" +
		"\u0EDF\x03\x02\x02\x02\u0EE7\u0EE0\x03\x02\x02\x02\u0EE7\u0EE1\x03\x02" +
		"\x02\x02\u0EE7\u0EE2\x03\x02\x02\x02\u0EE7\u0EE3\x03\x02\x02\x02\u0EE7" +
		"\u0EE4\x03\x02\x02\x02\u0EE7\u0EE5\x03\x02\x02\x02\u0EE7\u0EE6\x03\x02" +
		"\x02\x02\u0EE8\xEF\x03\x02\x02\x02\u0EE9\u0EF3\x05\xF2z\x02\u0EEA\u0EEC" +
		"\x05\b\x05\x02\u0EEB\u0EEA\x03\x02\x02\x02\u0EEC\u0EEF\x03\x02\x02\x02" +
		"\u0EED\u0EEB\x03\x02\x02\x02\u0EED\u0EEE\x03\x02\x02\x02\u0EEE\u0EF0\x03" +
		"\x02\x02\x02\u0EEF\u0EED\x03\x02\x02\x02\u0EF0\u0EF2\x05\xF2z\x02\u0EF1" +
		"\u0EED\x03\x02\x02\x02\u0EF2\u0EF5\x03\x02\x02\x02\u0EF3\u0EF1\x03\x02" +
		"\x02\x02\u0EF3\u0EF4\x03\x02\x02\x02\u0EF4\xF1\x03\x02\x02\x02\u0EF5\u0EF3" +
		"\x03\x02\x02\x02\u0EF6\u0F00\x05\xF4{\x02\u0EF7\u0EF9\x05\b\x05\x02\u0EF8" +
		"\u0EF7\x03\x02\x02\x02\u0EF9\u0EFA\x03\x02\x02\x02\u0EFA\u0EF8\x03\x02" +
		"\x02\x02\u0EFA\u0EFB\x03\x02\x02\x02\u0EFB\u0EFE\x03\x02\x02\x02\u0EFC" +
		"\u0EFF\x05\u0158\xAD\x02\u0EFD\u0EFF\x07\xAD\x02\x02\u0EFE\u0EFC\x03\x02" +
		"\x02\x02\u0EFE\u0EFD\x03\x02\x02\x02\u0EFF\u0F01\x03\x02\x02\x02\u0F00" +
		"\u0EF8\x03\x02\x02\x02\u0F00\u0F01\x03\x02\x02\x02\u0F01\u0F0F\x03\x02" +
		"\x02\x02\u0F02\u0F04\x05\b\x05\x02\u0F03\u0F02\x03\x02\x02\x02\u0F04\u0F05" +
		"\x03\x02\x02\x02\u0F05\u0F03\x03\x02\x02\x02\u0F05\u0F06\x03\x02\x02\x02" +
		"\u0F06\u0F07\x03\x02\x02\x02\u0F07\u0F09\x07\u0128\x02\x02\u0F08\u0F0A" +
		"\x05\b\x05\x02\u0F09\u0F08\x03\x02\x02\x02\u0F0A\u0F0B\x03\x02\x02\x02" +
		"\u0F0B";
	private static readonly _serializedATNSegment9: string =
		"\u0F09\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C\u0F0D\x03\x02" +
		"\x02\x02\u0F0D\u0F0E\x05\u0156\xAC\x02\u0F0E\u0F10\x03\x02\x02\x02\u0F0F" +
		"\u0F03\x03\x02\x02\x02\u0F0F\u0F10\x03\x02\x02\x02\u0F10\u0F1A\x03\x02" +
		"\x02\x02\u0F11\u0F13\x05\b\x05\x02\u0F12\u0F11\x03\x02\x02\x02\u0F13\u0F14" +
		"\x03\x02\x02\x02\u0F14\u0F12\x03\x02\x02\x02\u0F14\u0F15\x03\x02\x02\x02" +
		"\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F17\x05\xF6|\x02\u0F17\u0F19\x03" +
		"\x02\x02\x02\u0F18\u0F12\x03\x02\x02\x02\u0F19\u0F1C\x03\x02\x02\x02\u0F1A" +
		"\u0F18\x03\x02\x02\x02\u0F1A\u0F1B\x03\x02\x02\x02\u0F1B\u0F1D\x03\x02" +
		"\x02\x02\u0F1C\u0F1A\x03\x02\x02\x02\u0F1D\u0F1E\x07\u01B2\x02\x02\u0F1E" +
		"\xF3\x03\x02\x02\x02\u0F1F\u0F20\x07\u01B6\x02\x02\u0F20\xF5\x03\x02\x02" +
		"\x02\u0F21\u0F23\x07\xD6\x02\x02\u0F22\u0F24\x05\b\x05\x02\u0F23\u0F22" +
		"\x03\x02\x02\x02\u0F24\u0F25\x03\x02\x02\x02\u0F25\u0F23\x03\x02\x02\x02" +
		"\u0F25\u0F26\x03\x02\x02\x02\u0F26\u0F28\x03\x02\x02\x02\u0F27\u0F21\x03" +
		"\x02\x02\x02\u0F27\u0F28\x03\x02\x02\x02\u0F28\u0F29\x03\x02\x02\x02\u0F29" +
		"\u0F5E\x07\xA6\x02\x02\u0F2A\u0F2C\x07\xD6\x02\x02\u0F2B\u0F2D\x05\b\x05" +
		"\x02\u0F2C\u0F2B\x03\x02\x02\x02\u0F2D\u0F2E\x03\x02\x02\x02\u0F2E\u0F2C" +
		"\x03\x02\x02\x02\u0F2E\u0F2F\x03\x02\x02\x02\u0F2F\u0F31\x03\x02\x02\x02" +
		"\u0F30\u0F2A\x03\x02\x02\x02\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0F32\x03" +
		"\x02\x02\x02\u0F32\u0F5E\x07\xBC\x02\x02\u0F33\u0F5E\x05\u0150\xA9\x02" +
		"\u0F34\u0F5E\x05\u014C\xA7\x02\u0F35\u0F5E\x05\u0124\x93\x02\u0F36\u0F5E" +
		"\x05\u010C\x87\x02\u0F37\u0F3F\t\v\x02\x02\u0F38\u0F3A\x05\b\x05\x02\u0F39" +
		"\u0F38\x03\x02\x02\x02\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F39\x03\x02" +
		"\x02\x02\u0F3B\u0F3C\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D" +
		"\u0F3E\t\f\x02\x02\u0F3E\u0F40\x03\x02\x02\x02\u0F3F\u0F39\x03\x02\x02" +
		"\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40\u0F5E\x03\x02\x02\x02\u0F41\u0F49" +
		"\t\r\x02\x02\u0F42\u0F44\x05\b\x05\x02\u0F43\u0F42\x03\x02\x02\x02\u0F44" +
		"\u0F45\x03\x02\x02\x02\u0F45\u0F43\x03\x02\x02\x02\u0F45\u0F46\x03\x02" +
		"\x02\x02\u0F46\u0F47\x03\x02\x02\x02\u0F47\u0F48\x07\u0140\x02\x02\u0F48" +
		"\u0F4A\x03\x02\x02\x02\u0F49\u0F43\x03\x02\x02\x02\u0F49\u0F4A\x03\x02" +
		"\x02\x02\u0F4A\u0F5E\x03\x02\x02\x02\u0F4B\u0F4D\x07,\x02\x02\u0F4C\u0F4E" +
		"\x05\b\x05\x02\u0F4D\u0F4C\x03\x02\x02\x02\u0F4E\u0F4F\x03\x02\x02\x02" +
		"\u0F4F\u0F4D\x03\x02\x02\x02\u0F4F\u0F50\x03\x02\x02\x02\u0F50\u0F57\x03" +
		"\x02\x02\x02\u0F51\u0F53\x07\u0189\x02\x02\u0F52\u0F54\x05\b\x05\x02\u0F53" +
		"\u0F52\x03\x02\x02\x02\u0F54\u0F55\x03\x02\x02\x02\u0F55\u0F53\x03\x02" +
		"\x02\x02\u0F55\u0F56\x03\x02\x02\x02\u0F56\u0F58\x03\x02\x02\x02\u0F57" +
		"\u0F51\x03\x02\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F59\x03\x02" +
		"\x02\x02\u0F59\u0F5A\x07\u0191\x02\x02\u0F5A\u0F5E\x03\x02\x02\x02\u0F5B" +
		"\u0F5E\x05\xFE\x80\x02\u0F5C\u0F5E\x05\xF8}\x02\u0F5D\u0F27\x03\x02\x02" +
		"\x02\u0F5D\u0F30\x03\x02\x02\x02\u0F5D\u0F33\x03\x02\x02\x02\u0F5D\u0F34" +
		"\x03\x02\x02\x02\u0F5D\u0F35\x03\x02\x02\x02\u0F5D\u0F36\x03\x02\x02\x02" +
		"\u0F5D\u0F37\x03\x02\x02\x02\u0F5D\u0F41\x03\x02\x02\x02\u0F5D\u0F4B\x03" +
		"\x02\x02\x02\u0F5D\u0F5B\x03\x02\x02\x02\u0F5D\u0F5C\x03\x02\x02\x02\u0F5E" +
		"\xF7\x03\x02\x02\x02\u0F5F\u0F61\x07\u012F\x02\x02\u0F60\u0F62\x05\b\x05" +
		"\x02\u0F61\u0F60\x03\x02\x02\x02\u0F62\u0F63\x03\x02\x02\x02\u0F63\u0F61" +
		"\x03\x02\x02\x02\u0F63\u0F64\x03\x02\x02\x02\u0F64\u0F65\x03\x02\x02\x02" +
		"\u0F65\u0F73\x05\xFA~\x02\u0F66\u0F68\x05\b\x05\x02\u0F67\u0F66\x03\x02" +
		"\x02\x02\u0F68\u0F69\x03\x02\x02\x02\u0F69\u0F67\x03\x02\x02\x02\u0F69" +
		"\u0F6A\x03\x02\x02\x02\u0F6A\u0F6B\x03\x02\x02\x02\u0F6B\u0F6D\t\x06\x02" +
		"\x02\u0F6C\u0F6E\x05\b\x05\x02\u0F6D\u0F6C\x03\x02\x02\x02\u0F6E\u0F6F" +
		"\x03\x02\x02\x02\u0F6F\u0F6D\x03\x02\x02\x02\u0F6F\u0F70\x03\x02\x02\x02" +
		"\u0F70\u0F71\x03\x02\x02\x02\u0F71\u0F72\x05\xFC\x7F\x02\u0F72\u0F74\x03" +
		"\x02\x02\x02\u0F73\u0F67\x03\x02\x02\x02\u0F73\u0F74\x03\x02\x02\x02\u0F74" +
		"\xF9\x03\x02\x02\x02\u0F75\u0F76\x05\u01CE\xE8\x02\u0F76\xFB\x03\x02\x02" +
		"\x02\u0F77\u0F78\x05\u01CE\xE8\x02\u0F78\xFD\x03\x02\x02\x02\u0F79\u0F81" +
		"\x07\u0185\x02\x02\u0F7A\u0F7C\x05\b\x05\x02\u0F7B\u0F7A\x03\x02\x02\x02" +
		"\u0F7C\u0F7D\x03\x02\x02\x02\u0F7D\u0F7B\x03\x02\x02\x02\u0F7D\u0F7E\x03" +
		"\x02\x02\x02\u0F7E\u0F7F\x03\x02\x02\x02\u0F7F\u0F80\x07\xD6\x02\x02\u0F80" +
		"\u0F82\x03\x02\x02\x02\u0F81\u0F7B\x03\x02\x02\x02\u0F81\u0F82\x03\x02" +
		"\x02\x02\u0F82\u0F8E\x03\x02\x02\x02\u0F83\u0F8B\x07\u0186\x02\x02\u0F84" +
		"\u0F86\x05\b\x05\x02\u0F85\u0F84\x03\x02\x02\x02\u0F86\u0F87\x03\x02\x02" +
		"\x02\u0F87\u0F85\x03\x02\x02\x02\u0F87\u0F88\x03\x02\x02\x02\u0F88\u0F89" +
		"\x03\x02\x02\x02\u0F89\u0F8A\x07\x16\x02\x02\u0F8A\u0F8C\x03\x02\x02\x02" +
		"\u0F8B\u0F85\x03\x02\x02\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F8E\x03" +
		"\x02\x02\x02\u0F8D\u0F79\x03\x02\x02\x02\u0F8D\u0F83\x03\x02\x02\x02\u0F8E" +
		"\u0F90\x03\x02\x02\x02\u0F8F\u0F91\x05\b\x05\x02\u0F90\u0F8F\x03\x02\x02" +
		"\x02\u0F91\u0F92\x03\x02\x02\x02\u0F92\u0F90\x03\x02\x02\x02\u0F92\u0F93" +
		"\x03\x02\x02\x02\u0F93\u0F94\x03\x02\x02\x02\u0F94\u0F9E\x05\u0100\x81" +
		"\x02\u0F95\u0F97\x05\b\x05\x02\u0F96\u0F95\x03\x02\x02\x02\u0F97\u0F98" +
		"\x03\x02\x02\x02\u0F98\u0F96\x03\x02\x02\x02\u0F98\u0F99\x03\x02\x02\x02" +
		"\u0F99\u0F9A\x03\x02\x02\x02\u0F9A\u0F9B\x05\u0100\x81\x02\u0F9B\u0F9D" +
		"\x03\x02\x02\x02\u0F9C\u0F96\x03\x02\x02\x02\u0F9D\u0FA0\x03\x02\x02\x02" +
		"\u0F9E\u0F9C\x03\x02\x02\x02\u0F9E\u0F9F\x03\x02\x02\x02\u0F9F\xFF\x03" +
		"\x02\x02\x02\u0FA0\u0F9E\x03\x02\x02\x02\u0FA1\u0FA9\x05\u0102\x82\x02" +
		"\u0FA2\u0FA4\x05\b\x05\x02\u0FA3\u0FA2\x03\x02\x02\x02\u0FA4\u0FA5\x03" +
		"\x02\x02\x02\u0FA5\u0FA3\x03\x02\x02\x02\u0FA5\u0FA6\x03\x02\x02\x02\u0FA6" +
		"\u0FA7\x03\x02\x02\x02\u0FA7\u0FA8\x05\u0104\x83\x02\u0FA8\u0FAA\x03\x02" +
		"\x02\x02\u0FA9\u0FA3\x03\x02\x02\x02\u0FA9\u0FAA\x03\x02\x02\x02\u0FAA" +
		"\u0101\x03\x02\x02\x02\u0FAB\u0FBD\x05\u010A\x86\x02\u0FAC\u0FAE\x07\u012A" +
		"\x02\x02\u0FAD\u0FAF\x05\b\x05\x02\u0FAE\u0FAD\x03\x02\x02\x02\u0FAF\u0FB0" +
		"\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02\x02\x02\u0FB0\u0FB1\x03\x02\x02\x02" +
		"\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u0FB3\x05\u0108\x85\x02\u0FB3\u0FBD" +
		"\x03\x02\x02\x02\u0FB4\u0FB6\x07\xA6\x02\x02\u0FB5\u0FB7\x05\b\x05\x02" +
		"\u0FB6\u0FB5\x03\x02\x02\x02\u0FB7\u0FB8\x03\x02\x02\x02\u0FB8\u0FB6\x03" +
		"\x02\x02\x02\u0FB8\u0FB9\x03\x02\x02\x02\u0FB9\u0FBA\x03\x02\x02\x02\u0FBA" +
		"\u0FBB\x05\u0106\x84\x02\u0FBB\u0FBD\x03\x02\x02\x02\u0FBC\u0FAB\x03\x02" +
		"\x02\x02\u0FBC\u0FAC\x03\x02\x02\x02\u0FBC\u0FB4\x03\x02\x02\x02\u0FBD" +
		"\u0103\x03\x02\x02\x02\u0FBE\u0FC0\t\x06\x02\x02\u0FBF\u0FC1\x05\b\x05" +
		"\x02\u0FC0\u0FBF\x03\x02\x02\x02\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u0FC0" +
		"\x03\x02\x02\x02\u0FC2\u0FC3\x03\x02\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02" +
		"\u0FC4\u0FC5\x05\u0102\x82\x02\u0FC5\u0105\x03\x02\x02\x02\u0FC6\u0FC7" +
		"\x07\u01B8\x02\x02\u0FC7\u0107\x03\x02\x02\x02\u0FC8\u0FC9\x05\u01CE\xE8" +
		"\x02\u0FC9\u0109\x03\x02\x02\x02\u0FCA\u0FCB\t\x0E\x02\x02\u0FCB\u010B" +
		"\x03\x02\x02\x02\u0FCC\u0FCE\x07\xFE\x02\x02\u0FCD\u0FCF\x05\b\x05\x02" +
		"\u0FCE\u0FCD\x03\x02\x02\x02\u0FCF\u0FD0\x03\x02\x02\x02\u0FD0\u0FCE\x03" +
		"\x02\x02\x02\u0FD0\u0FD1\x03\x02\x02\x02\u0FD1\u0FD2\x03\x02\x02\x02\u0FD2" +
		"\u0FDC\x05\u0116\x8C\x02\u0FD3\u0FD5\x05\b\x05\x02\u0FD4\u0FD3\x03\x02" +
		"\x02\x02\u0FD5\u0FD6\x03\x02\x02\x02\u0FD6\u0FD4\x03\x02\x02\x02\u0FD6" +
		"\u0FD7\x03\x02\x02\x02\u0FD7\u0FD8\x03\x02\x02\x02\u0FD8\u0FD9\x05\u0112" +
		"\x8A\x02\u0FD9\u0FDB\x03\x02\x02\x02\u0FDA\u0FD4\x03\x02\x02\x02\u0FDB" +
		"\u0FDE\x03\x02\x02\x02\u0FDC\u0FDA\x03\x02\x02\x02\u0FDC\u0FDD\x03\x02" +
		"\x02\x02\u0FDD\u0FE6\x03\x02\x02\x02\u0FDE\u0FDC\x03\x02\x02\x02\u0FDF" +
		"\u0FE1\x05\b\x05\x02\u0FE0\u0FDF\x03\x02\x02\x02\u0FE1\u0FE2\x03\x02\x02" +
		"\x02\u0FE2\u0FE0\x03\x02\x02\x02\u0FE2\u0FE3\x03\x02\x02\x02\u0FE3\u0FE4" +
		"\x03\x02\x02\x02\u0FE4\u0FE5\x05\u010E\x88\x02\u0FE5\u0FE7\x03\x02\x02" +
		"\x02\u0FE6\u0FE0\x03\x02\x02\x02\u0FE6\u0FE7\x03\x02\x02\x02\u0FE7\u010D" +
		"\x03\x02\x02\x02\u0FE8\u0FEA\x07\xCB\x02\x02\u0FE9\u0FEB\x05\b\x05\x02" +
		"\u0FEA\u0FE9\x03\x02\x02\x02\u0FEB\u0FEC\x03\x02\x02\x02\u0FEC\u0FEA\x03" +
		"\x02\x02\x02\u0FEC\u0FED\x03\x02\x02\x02\u0FED\u0FF4\x03\x02\x02\x02\u0FEE" +
		"\u0FF0\x072\x02\x02\u0FEF\u0FF1\x05\b\x05\x02\u0FF0\u0FEF\x03\x02\x02" +
		"\x02\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2\u0FF0\x03\x02\x02\x02\u0FF2\u0FF3" +
		"\x03\x02\x02\x02\u0FF3\u0FF5\x03\x02\x02\x02\u0FF4\u0FEE\x03\x02\x02\x02" +
		"\u0FF4\u0FF5\x03\x02\x02\x02\u0FF5\u0FF6\x03\x02\x02\x02\u0FF6\u1000\x05" +
		"\u0110\x89\x02\u0FF7\u0FF9\x05\b\x05\x02\u0FF8\u0FF7\x03\x02\x02\x02\u0FF9" +
		"\u0FFA\x03\x02\x02\x02\u0FFA\u0FF8\x03\x02\x02\x02\u0FFA\u0FFB\x03\x02" +
		"\x02\x02\u0FFB\u0FFC\x03\x02\x02\x02\u0FFC\u0FFD\x05\u0110\x89\x02\u0FFD" +
		"\u0FFF\x03\x02\x02\x02\u0FFE\u0FF8\x03\x02\x02\x02\u0FFF\u1002\x03\x02" +
		"\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1000\u1001\x03\x02\x02\x02\u1001" +
		"\u010F\x03\x02\x02\x02\u1002\u1000\x03\x02\x02\x02\u1003\u1004\x07\u01B8" +
		"\x02\x02\u1004\u0111\x03\x02\x02\x02\u1005\u1007\t\x0F\x02\x02\u1006\u1008" +
		"\x05\b\x05\x02\u1007\u1006\x03\x02\x02\x02\u1008\u1009\x03\x02\x02\x02" +
		"\u1009\u1007\x03\x02\x02\x02\u1009\u100A\x03\x02\x02\x02\u100A\u1011\x03" +
		"\x02\x02\x02\u100B\u100D\x07\xDB\x02\x02\u100C\u100E\x05\b\x05\x02\u100D" +
		"\u100C\x03\x02\x02\x02\u100E\u100F\x03\x02\x02\x02\u100F\u100D\x03\x02" +
		"\x02\x02\u100F\u1010\x03\x02\x02\x02\u1010\u1012\x03\x02\x02\x02\u1011" +
		"\u100B\x03\x02\x02\x02\u1011\u1012\x03\x02\x02\x02\u1012\u1019\x03\x02" +
		"\x02\x02\u1013\u1015\x07\xD6\x02\x02\u1014\u1016\x05\b\x05\x02\u1015\u1014" +
		"\x03\x02\x02\x02\u1016\u1017\x03\x02\x02\x02\u1017\u1015\x03\x02\x02\x02" +
		"\u1017\u1018\x03\x02\x02\x02\u1018\u101A\x03\x02\x02\x02\u1019\u1013\x03" +
		"\x02\x02\x02\u1019\u101A\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B" +
		"\u1025\x05\u0114\x8B\x02\u101C\u101E\x05\b\x05\x02\u101D\u101C\x03\x02" +
		"\x02\x02\u101E\u101F\x03\x02\x02\x02\u101F\u101D\x03\x02\x02\x02\u101F" +
		"\u1020\x03\x02\x02\x02\u1020\u1021\x03\x02\x02\x02\u1021\u1022\x05\u0114" +
		"\x8B\x02\u1022\u1024\x03\x02\x02\x02\u1023\u101D\x03\x02\x02\x02\u1024" +
		"\u1027\x03\x02\x02\x02\u1025\u1023\x03\x02\x02\x02\u1025\u1026\x03\x02" +
		"\x02\x02\u1026\u0113\x03\x02\x02\x02\u1027\u1025\x03\x02\x02\x02\u1028" +
		"\u1029\x05\u01CE\xE8\x02\u1029\u0115\x03\x02\x02\x02\u102A\u102C\x05\u0118" +
		"\x8D\x02\u102B\u102D\x05\b\x05\x02\u102C\u102B\x03\x02\x02\x02\u102D\u102E" +
		"\x03\x02\x02\x02\u102E\u102C\x03\x02\x02\x02\u102E\u102F\x03\x02\x02\x02" +
		"\u102F\u1030\x03\x02\x02\x02\u1030\u1031\x07\u0174\x02\x02\u1031\u105B" +
		"\x03\x02\x02\x02\u1032\u1034\x05\u011A\x8E\x02\u1033\u1035\x05\b\x05\x02" +
		"\u1034\u1033\x03\x02\x02\x02\u1035\u1036\x03\x02\x02\x02\u1036\u1034\x03" +
		"\x02\x02\x02\u1036\u1037\x03\x02\x02\x02\u1037\u1038\x03\x02\x02\x02\u1038" +
		"\u103A\x07\u0175\x02\x02\u1039\u103B\x05\b\x05\x02\u103A\u1039\x03\x02" +
		"\x02\x02\u103B\u103C\x03\x02\x02\x02\u103C\u103A\x03\x02\x02\x02\u103C" +
		"\u103D\x03\x02\x02\x02\u103D\u103E\x03\x02\x02\x02\u103E\u1040\x05\u011C" +
		"\x8F\x02\u103F\u1041\x05\b\x05\x02\u1040\u103F\x03\x02\x02\x02\u1041\u1042" +
		"\x03\x02\x02\x02\u1042\u1040\x03\x02\x02\x02\u1042\u1043\x03\x02\x02\x02" +
		"\u1043\u1044\x03\x02\x02\x02\u1044\u1046\x07\u0174\x02\x02\u1045\u1047" +
		"\x05\b\x05\x02\u1046\u1045\x03\x02\x02\x02\u1047\u1048\x03\x02\x02\x02" +
		"\u1048\u1046\x03\x02\x02\x02\u1048\u1049\x03\x02\x02\x02\u1049\u104A\x03" +
		"\x02\x02\x02\u104A\u104C\x07s\x02\x02\u104B\u104D\x05\b\x05\x02\u104C" +
		"\u104B\x03\x02\x02\x02\u104D\u104E\x03\x02\x02\x02\u104E\u104C\x03\x02" +
		"\x02\x02\u104E\u104F\x03\x02\x02\x02\u104F\u1056\x03\x02\x02\x02\u1050" +
		"\u1052\x07\u0102\x02\x02\u1051\u1053\x05\b\x05\x02\u1052\u1051\x03\x02" +
		"\x02\x02\u1053\u1054\x03\x02\x02\x02\u1054\u1052\x03\x02\x02\x02\u1054" +
		"\u1055\x03\x02\x02\x02\u1055\u1057\x03\x02\x02\x02\u1056\u1050\x03\x02" +
		"\x02\x02\u1056\u1057\x03\x02\x02\x02\u1057\u1058\x03\x02\x02\x02\u1058" +
		"\u1059\x05\u0178\xBD\x02\u1059\u105B\x03\x02\x02\x02\u105A\u102A\x03\x02" +
		"\x02\x02\u105A\u1032\x03\x02\x02\x02\u105B\u0117\x03\x02\x02\x02\u105C" +
		"\u105D\x07\u01B6\x02\x02\u105D\u0119\x03\x02\x02\x02\u105E\u105F\x07\u01B6" +
		"\x02\x02\u105F\u011B\x03\x02\x02\x02\u1060\u1061\x07\u01B6\x02\x02\u1061" +
		"\u011D\x03\x02\x02\x02\u1062\u106C\x05\u0120\x91\x02\u1063\u1065\x05\b" +
		"\x05\x02\u1064\u1063\x03\x02\x02\x02\u1065\u1068\x03\x02\x02\x02\u1066" +
		"\u1064\x03\x02\x02\x02\u1066\u1067\x03\x02\x02\x02\u1067\u1069\x03\x02" +
		"\x02\x02\u1068\u1066\x03\x02\x02\x02\u1069\u106B\x05\u0120\x91\x02\u106A" +
		"\u1066\x03\x02\x02\x02\u106B\u106E\x03\x02\x02\x02\u106C\u106A\x03\x02" +
		"\x02\x02\u106C\u106D\x03\x02\x02\x02\u106D\u011F\x03\x02\x02\x02\u106E" +
		"\u106C\x03\x02\x02\x02\u106F\u1077\x05\xF4{\x02\u1070\u1072\x05\b\x05" +
		"\x02\u1071\u1070\x03\x02\x02\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1071" +
		"\x03\x02\x02\x02\u1073\u1074\x03\x02\x02\x02\u1074\u1075\x03\x02\x02\x02" +
		"\u1075\u1076\x05\u0158\xAD\x02\u1076\u1078\x03\x02\x02\x02\u1077\u1071" +
		"\x03\x02\x02\x02\u1077\u1078\x03\x02\x02\x02\u1078\u1082\x03\x02\x02\x02" +
		"\u1079\u107B\x05\b\x05\x02\u107A\u1079\x03\x02\x02\x02\u107B\u107C\x03" +
		"\x02\x02\x02\u107C\u107A\x03\x02\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D" +
		"\u107E\x03\x02\x02\x02\u107E\u107F\x05\u0122\x92\x02\u107F\u1081\x03\x02" +
		"\x02\x02\u1080\u107A\x03\x02\x02\x02\u1081\u1084\x03\x02\x02\x02\u1082" +
		"\u1080\x03\x02\x02\x02\u1082\u1083\x03\x02\x02\x02\u1083\u1085\x03\x02" +
		"\x02\x02\u1084\u1082\x03\x02\x02\x02\u1085\u1086\x07\u01B2\x02\x02\u1086" +
		"\u0121\x03\x02\x02\x02\u1087\u1089\x07\xE4\x02\x02\u1088\u108A\x05\b\x05" +
		"\x02\u1089\u1088\x03\x02\x02\x02\u108A\u108B\x03\x02\x02\x02\u108B\u1089" +
		"\x03\x02\x02\x02\u108B\u108C\x03\x02\x02\x02\u108C\u1093\x03\x02\x02\x02" +
		"\u108D\u108F\x07\xFB\x02\x02\u108E\u1090\x05\b\x05\x02\u108F\u108E\x03" +
		"\x02\x02\x02\u1090\u1091\x03\x02\x02\x02\u1091\u108F\x03\x02\x02\x02\u1091" +
		"\u1092\x03\x02\x02\x02\u1092\u1094\x03\x02\x02\x02\u1093\u108D\x03\x02" +
		"\x02\x02\u1093\u1094\x03\x02\x02\x02\u1094\u109B\x03\x02\x02\x02\u1095" +
		"\u1097\x07\xD6\x02\x02\u1096\u1098\x05\b\x05\x02\u1097\u1096\x03\x02\x02" +
		"\x02\u1098\u1099\x03\x02\x02\x02\u1099\u1097\x03\x02\x02\x02\u1099\u109A" +
		"\x03\x02\x02\x02\u109A\u109C\x03\x02\x02\x02\u109B\u1095\x03\x02\x02\x02" +
		"\u109B\u109C\x03\x02\x02\x02\u109C\u109D\x03\x02\x02\x02\u109D\u109E\x05" +
		"\u0138\x9D\x02\u109E\u1136\x03\x02\x02\x02\u109F\u10A1\x07\xF8\x02\x02" +
		"\u10A0\u10A2\x05\b\x05\x02\u10A1\u10A0\x03\x02\x02\x02\u10A2\u10A3\x03" +
		"\x02\x02\x02\u10A3\u10A1\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4" +
		"\u10A5\x03\x02\x02\x02\u10A5\u10A7\x07\xBF\x02\x02\u10A6\u10A8\x05\b\x05" +
		"\x02\u10A7\u10A6\x03\x02\x02\x02\u10A8\u10A9\x03\x02\x02\x02\u10A9\u10A7" +
		"\x03\x02\x02\x02\u10A9\u10AA\x03\x02\x02\x02\u10AA\u10B1\x03\x02\x02\x02" +
		"\u10AB\u10AD\x07\xD6\x02\x02\u10AC\u10AE\x05\b\x05\x02\u10AD\u10AC\x03" +
		"\x02\x02\x02\u10AE\u10AF\x03\x02\x02\x02\u10AF\u10AD\x03\x02\x02\x02\u10AF" +
		"\u10B0\x03\x02\x02\x02\u10B0\u10B2\x03\x02\x02\x02\u10B1\u10AB\x03\x02" +
		"\x02\x02\u10B1\u10B2\x03\x02\x02\x02\u10B2\u10B3\x03\x02\x02\x02\u10B3" +
		"\u10B4\x05\u0136\x9C\x02\u10B4\u1136\x03\x02\x02\x02\u10B5\u10B7\x07\u0179" +
		"\x02\x02\u10B6\u10B8\x05\b\x05\x02\u10B7\u10B6\x03\x02\x02\x02\u10B8\u10B9" +
		"\x03\x02\x02\x02\u10B9\u10B7\x03\x02\x02\x02\u10B9\u10BA\x03\x02\x02\x02" +
		"\u10BA\u10C1\x03\x02\x02\x02\u10BB\u10BD\x07\xD6\x02\x02\u10BC\u10BE\x05" +
		"\b\x05\x02\u10BD\u10BC\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF" +
		"\u10BD\x03\x02\x02\x02\u10BF\u10C0\x03\x02\x02\x02\u10C0\u10C2\x03\x02" +
		"\x02\x02\u10C1\u10BB\x03\x02\x02\x02\u10C1\u10C2\x03\x02\x02\x02\u10C2" +
		"\u10C3\x03\x02\x02\x02\u10C3\u10C4\x05\u0132\x9A\x02\u10C4\u1136\x03\x02" +
		"\x02\x02\u10C5\u10C7\x07\u0182\x02\x02\u10C6\u10C8\x05\b\x05\x02\u10C7" +
		"\u10C6\x03\x02\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10C7\x03\x02" +
		"\x02\x02\u10C9\u10CA\x03\x02\x02\x02\u10CA\u10D1\x03\x02\x02\x02\u10CB" +
		"\u10CD\x07\xD6\x02\x02\u10CC\u10CE\x05\b\x05\x02\u10CD\u10CC\x03\x02\x02" +
		"\x02\u10CE\u10CF\x03\x02\x02\x02\u10CF\u10CD\x03\x02\x02\x02\u10CF\u10D0" +
		"\x03\x02\x02\x02\u10D0\u10D2\x03\x02\x02\x02\u10D1\u10CB\x03\x02\x02\x02" +
		"\u10D1\u10D2\x03\x02\x02\x02\u10D2\u10D4\x03\x02\x02\x02\u10D3\u10C5\x03" +
		"\x02\x02\x02\u10D3\u10D4\x03\x02\x02\x02\u10D4\u10D5\x03\x02\x02\x02\u10D5" +
		"\u1136\x07x\x02\x02\u10D6\u10D8\x07,\x02\x02\u10D7\u10D9\x05\b\x05\x02" +
		"\u10D8\u10D7\x03\x02\x02\x02\u10D9\u10DA\x03\x02\x02\x02\u10DA\u10D8\x03" +
		"\x02\x02\x02\u10DA\u10DB\x03\x02\x02\x02\u10DB\u10E2\x03\x02\x02\x02\u10DC" +
		"\u10DE\x07\u0189\x02\x02\u10DD\u10DF\x05\b\x05\x02\u10DE\u10DD\x03\x02" +
		"\x02\x02\u10DF\u10E0\x03\x02\x02\x02\u10E0\u10DE\x03\x02\x02\x02\u10E0" +
		"\u10E1\x03\x02\x02\x02\u10E1\u10E3\x03\x02\x02\x02\u10E2\u10DC\x03\x02" +
		"\x02\x02\u10E2\u10E3\x03\x02\x02\x02\u10E3\u10E4\x03\x02\x02\x02\u10E4" +
		"\u10E5\x07\u0191\x02\x02\u10E5\u1136\x03\x02\x02\x02\u10E6\u10E8\x07A" +
		"\x02\x02\u10E7\u10E9\x05\b\x05\x02\u10E8\u10E7\x03\x02\x02\x02\u10E9\u10EA" +
		"\x03\x02\x02\x02\u10EA\u10E8\x03\x02\x02\x02\u10EA\u10EB\x03\x02\x02\x02" +
		"\u10EB\u10F2\x03\x02\x02\x02\u10EC\u10EE\x07\xFB\x02\x02\u10ED\u10EF\x05" +
		"\b\x05\x02\u10EE\u10ED\x03\x02\x02\x02\u10EF\u10F0\x03\x02\x02\x02\u10F0" +
		"\u10EE\x03\x02\x02\x02\u10F0\u10F1\x03\x02\x02\x02\u10F1\u10F3\x03\x02" +
		"\x02\x02\u10F2\u10EC\x03\x02\x02\x02\u10F2\u10F3\x03\x02\x02\x02\u10F3" +
		"\u10FA\x03\x02\x02\x02\u10F4\u10F6\x07\xD6\x02\x02\u10F5\u10F7\x05\b\x05" +
		"\x02\u10F6\u10F5\x03\x02\x02\x02\u10F7\u10F8\x03\x02\x02\x02\u10F8\u10F6" +
		"\x03\x02\x02\x02\u10F8\u10F9\x03\x02\x02\x02\u10F9\u10FB\x03\x02\x02\x02" +
		"\u10FA\u10F4\x03\x02\x02\x02\u10FA\u10FB\x03\x02\x02\x02\u10FB\u10FC\x03" +
		"\x02\x02\x02\u10FC\u10FD\x05\u0130\x99\x02\u10FD\u1136\x03\x02\x02\x02" +
		"\u10FE\u1106\x07\xBF\x02\x02\u10FF\u1101\x05\b\x05\x02\u1100\u10FF\x03" +
		"\x02\x02\x02\u1101\u1102\x03\x02\x02\x02\u1102\u1100\x03\x02\x02\x02\u1102" +
		"\u1103\x03\x02\x02\x02\u1103\u1104\x03\x02\x02\x02\u1104\u1105\x07\xCC" +
		"\x02\x02\u1105\u1107\x03\x02\x02\x02\u1106\u1100\x03\x02\x02\x02\u1106" +
		"\u1107\x03\x02\x02\x02\u1107\u1136\x03\x02\x02\x02\u1108\u1110\t\r\x02" +
		"\x02\u1109\u110B\x05\b\x05\x02\u110A\u1109\x03\x02\x02\x02\u110B\u110C" +
		"\x03\x02\x02\x02\u110C\u110A\x03\x02\x02\x02\u110C\u110D\x03\x02\x02\x02" +
		"\u110D\u110E\x03\x02\x02\x02\u110E\u110F\x07\u0140\x02\x02\u110F\u1111" +
		"\x03\x02\x02\x02\u1110\u110A\x03\x02\x02\x02\u1110\u1111\x03\x02\x02\x02" +
		"\u1111\u1136\x03\x02\x02\x02\u1112\u1136\x05\u0150\xA9\x02\u1113\u1136" +
		"\x05\u0124\x93\x02\u1114\u1116\x07\u0155\x02\x02\u1115\u1117\x05\b\x05" +
		"\x02\u1116\u1115\x03\x02\x02\x02\u1117\u1118\x03\x02\x02\x02\u1118\u1116" +
		"\x03\x02\x02\x02\u1118\u1119\x03\x02\x02\x02\u1119\u1120\x03\x02\x02\x02" +
		"\u111A\u111C\x07\xD6\x02\x02\u111B\u111D\x05\b\x05\x02\u111C\u111B\x03" +
		"\x02\x02\x02\u111D\u111E\x03\x02\x02\x02\u111E\u111C\x03\x02\x02\x02\u111E" +
		"\u111F\x03\x02\x02\x02\u111F\u1121\x03\x02\x02\x02\u1120\u111A\x03\x02" +
		"\x02\x02\u1120\u1121\x03\x02\x02\x02\u1121\u1122\x03\x02\x02\x02\u1122" +
		"\u1123\x05\u012E\x98\x02\u1123\u1136\x03\x02\x02\x02\u1124\u1126\x07\u0185" +
		"\x02\x02\u1125\u1127\x05\b\x05\x02\u1126\u1125\x03\x02\x02\x02\u1127\u1128" +
		"\x03\x02\x02\x02\u1128\u1126\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02" +
		"\u1129\u1130\x03\x02\x02\x02\u112A\u112C\x07\xD6\x02\x02\u112B\u112D\x05" +
		"\b\x05\x02\u112C\u112B\x03\x02\x02\x02\u112D\u112E\x03\x02\x02\x02\u112E" +
		"\u112C\x03\x02\x02\x02\u112E\u112F\x03\x02\x02\x02\u112F\u1131\x03\x02" +
		"\x02\x02\u1130\u112A\x03\x02\x02\x02\u1130\u1131\x03\x02\x02\x02\u1131" +
		"\u1132\x03\x02\x02\x02\u1132\u1133\x05\u010A\x86\x02\u1133\u1136\x03\x02" +
		"\x02\x02\u1134\u1136\x05\u0126\x94\x02\u1135\u1087\x03\x02\x02\x02\u1135" +
		"\u109F\x03\x02\x02\x02\u1135\u10B5\x03\x02\x02\x02\u1135\u10D3\x03\x02" +
		"\x02\x02\u1135\u10D6\x03\x02\x02\x02\u1135\u10E6\x03\x02\x02\x02\u1135" +
		"\u10FE\x03\x02\x02\x02\u1135\u1108\x03\x02\x02\x02\u1135\u1112\x03\x02" +
		"\x02\x02\u1135\u1113\x03\x02\x02\x02\u1135\u1114\x03\x02\x02\x02\u1135" +
		"\u1124\x03\x02\x02\x02\u1135\u1134\x03\x02\x02\x02\u1136\u0123\x03\x02" +
		"\x02\x02\u1137\u113F\x07\u0150\x02\x02\u1138\u113A\x05\b\x05\x02\u1139" +
		"\u1138\x03\x02\x02\x02\u113A\u113B\x03\x02\x02\x02\u113B\u1139\x03\x02" +
		"\x02\x02\u113B\u113C\x03\x02\x02\x02\u113C\u113D\x03\x02\x02\x02\u113D" +
		"\u113E\x07\xD6\x02\x02\u113E\u1140\x03\x02\x02\x02\u113F\u1139\x03\x02" +
		"\x02\x02\u113F\u1140\x03\x02\x02\x02\u1140\u1142\x03\x02\x02\x02\u1141" +
		"\u1143\x05\b\x05\x02\u1142\u1141\x03\x02\x02\x02\u1143\u1144\x03\x02\x02" +
		"\x02\u1144\u1142\x03\x02\x02\x02\u1144\u1145\x03\x02\x02\x02\u1145\u1147" +
		"\x03\x02\x02\x02\u1146\u1137\x03\x02\x02\x02\u1146\u1147\x03\x02\x02\x02" +
		"\u1147\u1148\x03\x02\x02\x02\u1148\u1158\t\x10\x02\x02\u1149\u114B\x05" +
		"\b\x05\x02\u114A\u1149\x03\x02\x02\x02\u114B\u114C\x03\x02\x02\x02\u114C" +
		"\u114A\x03\x02\x02\x02\u114C\u114D\x03\x02\x02\x02\u114D\u114E\x03\x02" +
		"\x02\x02\u114E\u1156\x07\u014C\x02\x02\u114F\u1151\x05\b\x05\x02\u1150" +
		"\u114F\x03\x02\x02\x02\u1151\u1152\x03\x02\x02\x02\u1152\u1150\x03\x02" +
		"\x02\x02\u1152\u1153\x03\x02\x02\x02\u1153\u1154\x03\x02\x02\x02\u1154" +
		"\u1155\x079\x02\x02\u1155\u1157\x03\x02\x02\x02\u1156\u1150\x03\x02\x02" +
		"\x02\u1156\u1157\x03\x02\x02\x02\u1157\u1159\x03\x02\x02\x02\u1158\u114A" +
		"\x03\x02\x02\x02\u1158\u1159\x03\x02\x02\x02\u1159\u0125\x03\x02\x02\x02" +
		"\u115A\u115C\x07\u0163\x02\x02\u115B\u115D\x05\b\x05\x02\u115C\u115B\x03" +
		"\x02\x02\x02\u115D\u115E\x03\x02\x02\x02\u115E\u115C\x03\x02\x02\x02\u115E" +
		"\u115F\x03\x02\x02\x02\u115F\u1160\x03\x02\x02\x02\u1160\u116A\x05\u012C" +
		"\x97\x02\u1161\u1163\x05\b\x05\x02\u1162\u1161\x03\x02\x02\x02\u1163\u1164" +
		"\x03\x02\x02\x02\u1164\u1162\x03\x02\x02\x02\u1164\u1165\x03\x02\x02\x02" +
		"\u1165\u1166\x03\x02\x02\x02\u1166\u1167\x05\u012C\x97\x02\u1167\u1169" +
		"\x03\x02\x02\x02\u1168\u1162\x03\x02\x02\x02\u1169\u116C\x03\x02\x02\x02" +
		"\u116A\u1168\x03\x02\x02\x02\u116A\u116B\x03\x02\x02\x02\u116B\u1174\x03" +
		"\x02\x02\x02\u116C\u116A\x03\x02\x02\x02\u116D\u116F\x05\b\x05\x02\u116E" +
		"\u116D\x03\x02\x02\x02\u116F\u1170\x03\x02\x02\x02\u1170\u116E\x03\x02" +
		"\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171\u1172\x03\x02\x02\x02\u1172" +
		"\u1173\x07\u0181\x02\x02\u1173\u1175\x03\x02\x02\x02\u1174\u116E\x03\x02" +
		"\x02\x02\u1174\u1175\x03\x02\x02\x02\u1175\u117F\x03\x02\x02\x02\u1176" +
		"\u1178\x05\b\x05\x02\u1177\u1176\x03\x02\x02\x02\u1178\u1179\x03\x02\x02" +
		"\x02\u1179\u1177\x03\x02\x02\x02\u1179\u117A\x03\x02\x02\x02\u117A\u117B" +
		"\x03\x02\x02\x02\u117B\u117C\x05\u012A\x96\x02\u117C\u117E\x03\x02\x02" +
		"\x02\u117D\u1177\x03\x02\x02\x02\u117E\u1181\x03\x02\x02\x02\u117F\u117D" +
		"\x03\x02\x02\x02\u117F\u1180\x03\x02\x02\x02\u1180\u1183\x03\x02\x02\x02" +
		"\u1181\u117F\x03\x02\x02\x02\u1182\u115A\x03\x02\x02\x02\u1183\u1184\x03" +
		"\x02\x02\x02\u1184\u1182\x03\x02\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185" +
		"\u119C\x03\x02\x02\x02\u1186\u1188\x05\b\x05\x02\u1187\u1186\x03\x02\x02" +
		"\x02\u1188\u118B\x03\x02\x02\x02\u1189\u1187\x03\x02\x02\x02\u1189\u118A" +
		"\x03\x02\x02\x02\u118A\u118C\x03\x02\x02\x02\u118B\u1189\x03\x02\x02\x02" +
		"\u118C\u118E\x07\u0138\x02\x02\u118D\u118F\x05\b\x05\x02\u118E\u118D\x03" +
		"\x02\x02\x02\u118F\u1190\x03\x02\x02\x02\u1190\u118E\x03\x02\x02\x02\u1190" +
		"\u1191\x03\x02\x02\x02\u1191\u1198\x03\x02\x02\x02\u1192\u1194\x07\u0102" +
		"\x02\x02\u1193\u1195\x05\b\x05\x02\u1194\u1193\x03\x02\x02\x02\u1195\u1196" +
		"\x03\x02\x02\x02\u1196\u1194\x03\x02\x02\x02\u1196\u1197\x03\x02\x02\x02" +
		"\u1197\u1199\x03\x02\x02\x02\u1198\u1192\x03\x02\x02\x02\u1198\u1199\x03" +
		"\x02\x02\x02\u1199\u119A\x03\x02\x02\x02\u119A\u119B\x05\u0128\x95\x02" +
		"\u119B\u119D\x03\x02\x02\x02\u119C\u1189\x03\x02\x02\x02\u119C\u119D\x03" +
		"\x02\x02\x02\u119D\u0127\x03\x02\x02\x02\u119E\u119F\t\x11\x02\x02\u119F" +
		"\u0129\x03\x02\x02\x02\u11A0\u11A1\x07\u01B8\x02\x02\u11A1\u012B\x03\x02" +
		"\x02\x02\u11A2\u11A3\x07\u01B8\x02\x02\u11A3\u012D\x03\x02\x02\x02\u11A4" +
		"\u11A5\x05\u01CE\xE8\x02\u11A5\u012F\x03\x02\x02\x02\u11A6\u11A7\x07\u01B6" +
		"\x02\x02\u11A7\u0131\x03\x02\x02\x02\u11A8\u11AA\x07\u0132\x02\x02\u11A9" +
		"\u11AB\x05\b\x05\x02\u11AA\u11A9\x03\x02\x02\x02\u11AB\u11AC\x03\x02\x02" +
		"\x02\u11AC\u11AA\x03\x02\x02\x02\u11AC\u11AD\x03\x02\x02\x02\u11AD\u11AE" +
		"\x03\x02\x02\x02\u11AE\u11AF\x07\xC0\x02\x02\u11AF\u11F3\x03\x02\x02\x02" +
		"\u11B0\u11F3\x07\u013F\x02\x02\u11B1\u11B3\x07\u010C\x02\x02\u11B2\u11B4" +
		"\x05\b\x05\x02\u11B3\u11B2\x03\x02\x02\x02\u11B4\u11B5\x03\x02\x02\x02" +
		"\u11B5\u11B3\x03\x02\x02\x02\u11B5\u11B6\x03\x02\x02\x02\u11B6\u11B7\x03" +
		"\x02\x02\x02\u11B7\u11B8\x07\xC0\x02\x02\u11B8\u11F3\x03\x02\x02\x02\u11B9" +
		"\u11F3\x07\u0111\x02\x02\u11BA\u11BC\x07Z\x02\x02\u11BB\u11BD\x05";
	private static readonly _serializedATNSegment10: string =
		"\b\x05\x02\u11BC\u11BB\x03\x02\x02\x02\u11BD\u11BE\x03\x02\x02\x02\u11BE" +
		"\u11BC\x03\x02\x02\x02\u11BE\u11BF\x03\x02\x02\x02\u11BF\u11C0\x03\x02" +
		"\x02\x02\u11C0\u11C1\x07\xC0\x02\x02\u11C1\u11C4\x03\x02\x02\x02\u11C2" +
		"\u11C4\x078\x02\x02\u11C3\u11BA\x03\x02\x02\x02\u11C3\u11C2\x03\x02\x02" +
		"\x02\u11C4\u11C6\x03\x02\x02\x02\u11C5\u11C7\x05\b\x05\x02\u11C6\u11C5" +
		"\x03\x02\x02\x02\u11C7\u11C8\x03\x02\x02\x02\u11C8\u11C6\x03\x02\x02\x02" +
		"\u11C8\u11C9\x03\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CB\x05" +
		"\u0134\x9B\x02\u11CB\u11F3\x03\x02\x02\x02\u11CC\u11F3\x07v\x02\x02\u11CD" +
		"\u11F3\x07k\x02\x02\u11CE\u11D0\x07Z\x02\x02\u11CF\u11D1\x05\b\x05\x02" +
		"\u11D0\u11CF\x03\x02\x02\x02\u11D1\u11D2\x03\x02\x02\x02\u11D2\u11D0\x03" +
		"\x02\x02\x02\u11D2\u11D3\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4" +
		"\u11D5\x07\xB4\x02\x02\u11D5\u11D8\x03\x02\x02\x02\u11D6\u11D8\x077\x02" +
		"\x02\u11D7\u11CE\x03\x02\x02\x02\u11D7\u11D6\x03\x02\x02\x02\u11D8\u11DA" +
		"\x03\x02\x02\x02\u11D9\u11DB\x05\b\x05\x02\u11DA\u11D9\x03\x02\x02\x02" +
		"\u11DB\u11DC\x03\x02\x02\x02\u11DC\u11DA\x03\x02\x02\x02\u11DC\u11DD\x03" +
		"\x02\x02\x02\u11DD\u11DE\x03\x02\x02\x02\u11DE\u11DF\x05\u0134\x9B\x02" +
		"\u11DF\u11F3\x03\x02\x02\x02\u11E0\u11E2\x07\u010C\x02\x02\u11E1\u11E3" +
		"\x05\b\x05\x02\u11E2\u11E1\x03\x02\x02\x02\u11E3\u11E4\x03\x02\x02\x02" +
		"\u11E4\u11E2\x03\x02\x02\x02\u11E4\u11E5\x03\x02\x02\x02\u11E5\u11E6\x03" +
		"\x02\x02\x02\u11E6\u11E7\x07\xB4\x02\x02\u11E7\u11F3\x03\x02\x02\x02\u11E8" +
		"\u11F3\x07\u0110\x02\x02\u11E9\u11EB\x07\u0132\x02\x02\u11EA\u11EC\x05" +
		"\b\x05\x02\u11EB\u11EA\x03\x02\x02\x02\u11EC\u11ED\x03\x02\x02\x02\u11ED" +
		"\u11EB\x03\x02\x02\x02\u11ED\u11EE\x03\x02\x02\x02\u11EE\u11EF\x03\x02" +
		"\x02\x02\u11EF\u11F0\x07\xB4\x02\x02\u11F0\u11F3\x03\x02\x02\x02\u11F1" +
		"\u11F3\x07\u013E\x02\x02\u11F2\u11A8\x03\x02\x02\x02\u11F2\u11B0\x03\x02" +
		"\x02\x02\u11F2\u11B1\x03\x02\x02\x02\u11F2\u11B9\x03\x02\x02\x02\u11F2" +
		"\u11C3\x03\x02\x02\x02\u11F2\u11CC\x03\x02\x02\x02\u11F2\u11CD\x03\x02" +
		"\x02\x02\u11F2\u11D7\x03\x02\x02\x02\u11F2\u11E0\x03\x02\x02\x02\u11F2" +
		"\u11E8\x03\x02\x02\x02\u11F2\u11E9\x03\x02\x02\x02\u11F2\u11F1\x03\x02" +
		"\x02\x02\u11F3\u0133\x03\x02\x02\x02\u11F4\u11F5\t\x11\x02\x02\u11F5\u0135" +
		"\x03\x02\x02\x02\u11F6\u1208\x05\u013A\x9E\x02\u11F7\u11F9\x07\u0114\x02" +
		"\x02\u11F8\u11FA\x05\b\x05\x02\u11F9\u11F8\x03\x02\x02\x02\u11FA\u11FB" +
		"\x03\x02\x02\x02\u11FB\u11F9\x03\x02\x02\x02\u11FB\u11FC\x03\x02\x02\x02" +
		"\u11FC\u11FD\x03\x02\x02\x02\u11FD\u11FE\x05\u013A\x9E\x02\u11FE\u1208" +
		"\x03\x02\x02\x02\u11FF\u1201\x07\xF8\x02\x02\u1200\u1202\x05\b\x05\x02" +
		"\u1201\u1200\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02\u1203\u1201\x03" +
		"\x02\x02\x02\u1203\u1204\x03\x02\x02\x02\u1204\u1205\x03\x02\x02\x02\u1205" +
		"\u1206\x07\u010C\x02\x02\u1206\u1208\x03\x02\x02\x02\u1207\u11F6\x03\x02" +
		"\x02\x02\u1207\u11F7\x03\x02\x02\x02\u1207\u11FF\x03\x02\x02\x02\u1208" +
		"\u0137\x03\x02\x02\x02\u1209\u121F\x05\u013A\x9E\x02\u120A\u120C\x05\b" +
		"\x05\x02\u120B\u120A\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D" +
		"\u120B\x03\x02\x02\x02\u120D\u120E\x03\x02\x02\x02\u120E\u1215\x03\x02" +
		"\x02\x02\u120F\u1211\x07\u0102\x02\x02\u1210\u1212\x05\b\x05\x02\u1211" +
		"\u1210\x03\x02\x02\x02\u1212\u1213\x03\x02\x02\x02\u1213\u1211\x03\x02" +
		"\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u1216\x03\x02\x02\x02\u1215" +
		"\u120F\x03\x02\x02\x02\u1215\u1216\x03\x02\x02\x02\u1216\u1217\x03\x02" +
		"\x02\x02\u1217\u1219\x07\xF8\x02\x02\u1218\u121A\x05\b\x05\x02\u1219\u1218" +
		"\x03\x02\x02\x02\u121A\u121B\x03\x02\x02\x02\u121B\u1219\x03\x02\x02\x02" +
		"\u121B\u121C\x03\x02\x02\x02\u121C\u121D\x03\x02\x02\x02\u121D\u121E\x07" +
		"\u010C\x02\x02\u121E\u1220\x03\x02\x02\x02\u121F\u120B\x03\x02\x02\x02" +
		"\u121F\u1220\x03\x02\x02\x02\u1220\u122A\x03\x02\x02\x02\u1221\u1223\x07" +
		"\u0114\x02\x02\u1222\u1224\x05\b\x05\x02\u1223\u1222\x03\x02\x02\x02\u1224" +
		"\u1225\x03\x02\x02\x02\u1225\u1223\x03\x02\x02\x02\u1225\u1226\x03\x02" +
		"\x02\x02\u1226\u1227\x03\x02\x02\x02\u1227\u1228\x05\u013A\x9E\x02\u1228" +
		"\u122A\x03\x02\x02\x02\u1229\u1209\x03\x02\x02\x02\u1229\u1221\x03\x02" +
		"\x02\x02\u122A\u0139\x03\x02\x02\x02\u122B\u122C\x07\u01B6\x02\x02\u122C" +
		"\u013B\x03\x02\x02\x02\u122D\u122F\x07\xD6\x02\x02\u122E\u1230\x05\b\x05" +
		"\x02\u122F\u122E\x03\x02\x02\x02\u1230\u1231\x03\x02\x02\x02\u1231\u122F" +
		"\x03\x02\x02\x02\u1231\u1232\x03\x02\x02\x02\u1232\u1234\x03\x02\x02\x02" +
		"\u1233\u122D\x03\x02\x02\x02\u1233\u1234\x03\x02\x02\x02\u1234\u1235\x03" +
		"\x02\x02\x02\u1235\u12EC\x07\xBC\x02\x02\u1236\u1238\x07>\x02\x02\u1237" +
		"\u1239\x05\b\x05\x02\u1238\u1237\x03\x02\x02\x02\u1239\u123A\x03\x02\x02" +
		"\x02\u123A\u1238\x03\x02\x02\x02\u123A\u123B\x03\x02\x02\x02\u123B\u123C" +
		"\x03\x02\x02\x02\u123C\u123D\x05\u014A\xA6\x02\u123D\u12EC\x03\x02\x02" +
		"\x02\u123E\u1246\x07Z\x02\x02\u123F\u1241\x05\b\x05\x02\u1240\u123F\x03" +
		"\x02\x02\x02\u1241\u1242\x03\x02\x02\x02\u1242\u1240\x03\x02\x02\x02\u1242" +
		"\u1243\x03\x02\x02\x02\u1243\u1244\x03\x02\x02\x02\u1244\u1245\x07\xD6" +
		"\x02\x02\u1245\u1247\x03\x02\x02\x02\u1246\u1240\x03\x02\x02\x02\u1246" +
		"\u1247\x03\x02\x02\x02\u1247\u1253\x03\x02\x02\x02\u1248\u1250\x07[\x02" +
		"\x02\u1249\u124B\x05\b\x05\x02\u124A\u1249\x03\x02\x02\x02\u124B\u124C" +
		"\x03\x02\x02\x02\u124C\u124A\x03\x02\x02\x02\u124C\u124D\x03\x02\x02\x02" +
		"\u124D\u124E\x03\x02\x02\x02\u124E\u124F\x07\x16\x02\x02\u124F\u1251\x03" +
		"\x02\x02\x02\u1250\u124A\x03\x02\x02\x02\u1250\u1251\x03\x02\x02\x02\u1251" +
		"\u1253\x03\x02\x02\x02\u1252\u123E\x03\x02\x02\x02\u1252\u1248\x03\x02" +
		"\x02\x02\u1253\u1255\x03\x02\x02\x02\u1254\u1256\x05\b\x05\x02\u1255\u1254" +
		"\x03\x02\x02\x02\u1256\u1257\x03\x02\x02\x02\u1257\u1255\x03\x02\x02\x02" +
		"\u1257\u1258\x03\x02\x02\x02\u1258\u1273\x03\x02\x02\x02\u1259\u1263\x05" +
		"\u0148\xA5\x02\u125A\u125C\x05\b\x05\x02\u125B\u125A\x03\x02\x02\x02\u125C" +
		"\u125F\x03\x02\x02\x02\u125D\u125B\x03\x02\x02\x02\u125D\u125E\x03\x02" +
		"\x02\x02\u125E\u1260\x03\x02\x02\x02\u125F\u125D\x03\x02\x02\x02\u1260" +
		"\u1262\x05\u0148\xA5\x02\u1261\u125D\x03\x02\x02\x02\u1262\u1265\x03\x02" +
		"\x02\x02\u1263\u1261\x03\x02\x02\x02\u1263\u1264\x03\x02\x02\x02\u1264" +
		"\u1274\x03\x02\x02\x02\u1265\u1263\x03\x02\x02\x02\u1266\u1270\x07\xAF" +
		"\x02\x02\u1267\u1269\x05\b\x05\x02\u1268\u1267\x03\x02\x02\x02\u1269\u126C" +
		"\x03\x02\x02\x02\u126A\u1268\x03\x02\x02\x02\u126A\u126B\x03\x02\x02\x02" +
		"\u126B\u126D\x03\x02\x02\x02\u126C\u126A\x03\x02\x02\x02\u126D\u126F\x05" +
		"\u0148\xA5\x02\u126E\u126A\x03\x02\x02\x02\u126F\u1272\x03\x02\x02\x02" +
		"\u1270\u126E\x03\x02\x02\x02\u1270\u1271\x03\x02\x02\x02\u1271\u1274\x03" +
		"\x02\x02\x02\u1272\u1270\x03\x02\x02\x02\u1273\u1259\x03\x02\x02\x02\u1273" +
		"\u1266\x03\x02\x02\x02\u1274\u12EC\x03\x02\x02\x02\u1275\u1277\x07\u010C" +
		"\x02\x02\u1276\u1278\x05\b\x05\x02\u1277\u1276\x03\x02\x02\x02\u1278\u1279" +
		"\x03\x02\x02\x02\u1279\u1277\x03\x02\x02\x02\u1279\u127A\x03\x02\x02\x02" +
		"\u127A\u1297\x03\x02\x02\x02\u127B\u127D\x07\xE1\x02\x02\u127C\u127E\x05" +
		"\b\x05\x02\u127D\u127C\x03\x02\x02\x02\u127E\u127F\x03\x02\x02\x02\u127F" +
		"\u127D\x03\x02\x02\x02\u127F\u1280\x03\x02\x02\x02\u1280\u1287\x03\x02" +
		"\x02\x02\u1281\u1283\x07\xD6\x02\x02\u1282\u1284\x05\b\x05\x02\u1283\u1282" +
		"\x03\x02\x02\x02\u1284\u1285\x03\x02\x02\x02\u1285\u1283\x03\x02\x02\x02" +
		"\u1285\u1286\x03\x02\x02\x02\u1286\u1288\x03\x02\x02\x02\u1287\u1281\x03" +
		"\x02\x02\x02\u1287\u1288\x03\x02\x02\x02\u1288\u1298\x03\x02\x02\x02\u1289" +
		"\u128B\x07\xE2\x02\x02\u128A\u128C\x05\b\x05\x02\u128B\u128A\x03\x02\x02" +
		"\x02\u128C\u128D\x03\x02\x02\x02\u128D\u128B\x03\x02\x02\x02\u128D\u128E" +
		"\x03\x02\x02\x02\u128E\u1295\x03\x02\x02\x02\u128F\u1291\x07\x16\x02\x02" +
		"\u1290\u1292\x05\b\x05\x02\u1291\u1290\x03\x02\x02\x02\u1292\u1293\x03" +
		"\x02\x02\x02\u1293\u1291\x03\x02\x02\x02\u1293\u1294\x03\x02\x02\x02\u1294" +
		"\u1296\x03\x02\x02\x02\u1295\u128F\x03\x02\x02\x02\u1295\u1296\x03\x02" +
		"\x02\x02\u1296\u1298\x03\x02\x02\x02\u1297\u127B\x03\x02\x02\x02\u1297" +
		"\u1289\x03\x02\x02\x02\u1297\u1298\x03\x02\x02\x02\u1298\u1299\x03\x02" +
		"\x02\x02\u1299\u12A1\x05\u0146\xA4\x02\u129A\u129C\x05\b\x05\x02\u129B" +
		"\u129A\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02\u129D\u129B\x03\x02" +
		"\x02\x02\u129D\u129E\x03\x02\x02\x02\u129E\u129F\x03\x02\x02\x02\u129F" +
		"\u12A0\t\x12\x02\x02\u12A0\u12A2\x03\x02\x02\x02\u12A1\u129B\x03\x02\x02" +
		"\x02\u12A1\u12A2\x03\x02\x02\x02\u12A2\u12B0\x03\x02\x02\x02\u12A3\u12A5" +
		"\x05\b\x05\x02\u12A4\u12A3\x03\x02\x02\x02\u12A5\u12A6\x03\x02\x02\x02" +
		"\u12A6\u12A4\x03\x02\x02\x02\u12A6\u12A7\x03\x02\x02\x02\u12A7\u12A8\x03" +
		"\x02\x02\x02\u12A8\u12AA\x07\xC0\x02\x02\u12A9\u12AB\x05\b\x05\x02\u12AA" +
		"\u12A9\x03\x02\x02\x02\u12AB\u12AC\x03\x02\x02\x02\u12AC\u12AA\x03\x02" +
		"\x02\x02\u12AC\u12AD\x03\x02\x02\x02\u12AD\u12AE\x03\x02\x02\x02\u12AE" +
		"\u12AF\x05\u0144\xA3\x02\u12AF\u12B1\x03\x02\x02\x02\u12B0\u12A4\x03\x02" +
		"\x02\x02\u12B0\u12B1\x03\x02\x02\x02\u12B1\u12C5\x03\x02\x02\x02\u12B2" +
		"\u12B4\x05\b\x05\x02\u12B3\u12B2\x03\x02\x02\x02\u12B4\u12B5\x03\x02\x02" +
		"\x02\u12B5\u12B3\x03\x02\x02\x02\u12B5\u12B6\x03\x02\x02\x02\u12B6\u12B7" +
		"\x03\x02\x02\x02\u12B7\u12B9\x07\xB0\x02\x02\u12B8\u12BA\x05\b\x05\x02" +
		"\u12B9\u12B8\x03\x02\x02\x02\u12BA\u12BB\x03\x02\x02\x02\u12BB\u12B9\x03" +
		"\x02\x02\x02\u12BB\u12BC\x03\x02\x02\x02\u12BC\u12BD\x03\x02\x02\x02\u12BD" +
		"\u12BF\x07v\x02\x02\u12BE\u12C0\x05\b\x05\x02\u12BF\u12BE\x03\x02\x02" +
		"\x02\u12C0\u12C1\x03\x02\x02\x02\u12C1\u12BF\x03\x02\x02\x02\u12C1\u12C2" +
		"\x03\x02\x02\x02\u12C2\u12C3\x03\x02\x02\x02\u12C3\u12C4\x05\u0142\xA2" +
		"\x02\u12C4\u12C6\x03\x02\x02\x02\u12C5\u12B3\x03\x02\x02\x02\u12C5\u12C6" +
		"\x03\x02\x02\x02\u12C6\u12DA\x03\x02\x02\x02\u12C7\u12C9\x05\b\x05\x02" +
		"\u12C8\u12C7\x03\x02\x02\x02\u12C9\u12CA\x03\x02\x02\x02\u12CA\u12C8\x03" +
		"\x02\x02\x02\u12CA\u12CB\x03\x02\x02\x02\u12CB\u12CC\x03\x02\x02\x02\u12CC" +
		"\u12CE\x07\xDD\x02\x02\u12CD\u12CF\x05\b\x05\x02\u12CE\u12CD\x03\x02\x02" +
		"\x02\u12CF\u12D0\x03\x02\x02\x02\u12D0\u12CE\x03\x02\x02\x02\u12D0\u12D1" +
		"\x03\x02\x02\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u12D4\x07v\x02\x02" +
		"\u12D3\u12D5\x05\b\x05\x02\u12D4\u12D3\x03\x02\x02\x02\u12D5\u12D6\x03" +
		"\x02\x02\x02\u12D6\u12D4\x03\x02\x02\x02\u12D6\u12D7\x03\x02\x02\x02\u12D7" +
		"\u12D8\x03\x02\x02\x02\u12D8\u12D9\x05\u0140\xA1\x02\u12D9\u12DB\x03\x02" +
		"\x02\x02\u12DA\u12C8\x03\x02\x02\x02\u12DA\u12DB\x03\x02\x02\x02\u12DB" +
		"\u12E9\x03\x02\x02\x02\u12DC\u12DE\x05\b\x05\x02\u12DD\u12DC\x03\x02\x02" +
		"\x02\u12DE\u12DF\x03\x02\x02\x02\u12DF\u12DD\x03\x02\x02\x02\u12DF\u12E0" +
		"\x03\x02\x02\x02\u12E0\u12E1\x03\x02\x02\x02\u12E1\u12E3\x07\xB4\x02\x02" +
		"\u12E2\u12E4\x05\b\x05\x02\u12E3\u12E2\x03\x02\x02\x02\u12E4\u12E5\x03" +
		"\x02\x02\x02\u12E5\u12E3\x03\x02\x02\x02\u12E5\u12E6\x03\x02\x02\x02\u12E6" +
		"\u12E7\x03\x02\x02\x02\u12E7\u12E8\x05\u013E\xA0\x02\u12E8\u12EA\x03\x02" +
		"\x02\x02\u12E9\u12DD\x03\x02\x02\x02\u12E9\u12EA\x03\x02\x02\x02\u12EA" +
		"\u12EC\x03\x02\x02\x02\u12EB\u1233\x03\x02\x02\x02\u12EB\u1236\x03\x02" +
		"\x02\x02\u12EB\u1252\x03\x02\x02\x02\u12EB\u1275\x03\x02\x02\x02\u12EC" +
		"\u013D\x03\x02\x02\x02\u12ED\u12EE\x07\u01B6\x02\x02\u12EE\u013F\x03\x02" +
		"\x02\x02\u12EF\u12F0\x07\u01B6\x02\x02\u12F0\u0141\x03\x02\x02\x02\u12F1" +
		"\u12F2\x07\u01B6\x02\x02\u12F2\u0143\x03\x02\x02\x02\u12F3\u12F4\x07\u01B6" +
		"\x02\x02\u12F4\u0145\x03\x02\x02\x02\u12F5\u12F6\x07\u01B6\x02\x02\u12F6" +
		"\u0147\x03\x02\x02\x02\u12F7\u12F8\x05\u01CE\xE8\x02\u12F8\u0149\x03\x02" +
		"\x02\x02\u12F9\u12FA\x07\u01B5\x02\x02\u12FA\u014B\x03\x02\x02\x02\u12FB" +
		"\u1303\x07\u0182\x02\x02\u12FC\u12FE\x05\b\x05\x02\u12FD\u12FC\x03\x02" +
		"\x02\x02\u12FE\u12FF\x03\x02\x02\x02\u12FF\u12FD\x03\x02\x02\x02\u12FF" +
		"\u1300\x03\x02\x02\x02\u1300\u1301\x03\x02\x02\x02\u1301\u1302\x07\xD6" +
		"\x02\x02\u1302\u1304\x03\x02\x02\x02\u1303\u12FD\x03\x02\x02\x02\u1303" +
		"\u1304\x03\x02\x02\x02\u1304\u1306\x03\x02\x02\x02\u1305\u1307\x05\b\x05" +
		"\x02\u1306\u1305\x03\x02\x02\x02\u1307\u1308\x03\x02\x02\x02\u1308\u1306" +
		"\x03\x02\x02\x02\u1308\u1309\x03\x02\x02\x02\u1309\u130B\x03\x02\x02\x02" +
		"\u130A\u12FB\x03\x02\x02\x02\u130A\u130B\x03\x02\x02\x02\u130B\u130C\x03" +
		"\x02\x02\x02\u130C\u130D\x05\u014E\xA8\x02\u130D\u014D\x03\x02\x02\x02" +
		"\u130E\u134E\x07\'\x02\x02\u130F\u1317\x07(\x02\x02\u1310\u1312\x05\b" +
		"\x05\x02\u1311\u1310\x03\x02\x02\x02\u1312\u1313\x03\x02\x02\x02\u1313" +
		"\u1311\x03\x02\x02\x02\u1313\u1314\x03\x02\x02\x02\u1314\u1315\x03\x02" +
		"\x02\x02\u1315\u1316\t\x13\x02\x02\u1316\u1318\x03\x02\x02\x02\u1317\u1311" +
		"\x03\x02\x02\x02\u1317\u1318\x03\x02\x02\x02\u1318\u134E\x03\x02\x02\x02" +
		"\u1319\u1321\x07+\x02\x02\u131A\u131C\x05\b\x05\x02\u131B\u131A\x03\x02" +
		"\x02\x02\u131C\u131D\x03\x02\x02\x02\u131D\u131B\x03\x02\x02\x02\u131D" +
		"\u131E\x03\x02\x02\x02\u131E\u131F\x03\x02\x02\x02\u131F\u1320\t\x13\x02" +
		"\x02\u1320\u1322\x03\x02\x02\x02\u1321\u131B\x03\x02\x02\x02\u1321\u1322" +
		"\x03\x02\x02\x02\u1322\u134E\x03\x02\x02\x02\u1323\u132B\x07*\x02\x02" +
		"\u1324\u1326\x05\b\x05\x02\u1325\u1324\x03\x02\x02\x02\u1326\u1327\x03" +
		"\x02\x02\x02\u1327\u1325\x03\x02\x02\x02\u1327\u1328\x03\x02\x02\x02\u1328" +
		"\u1329\x03\x02\x02\x02\u1329\u132A\t\x13\x02\x02\u132A\u132C\x03\x02\x02" +
		"\x02\u132B\u1325\x03\x02\x02\x02\u132B\u132C\x03\x02\x02\x02\u132C\u134E" +
		"\x03\x02\x02\x02\u132D\u1335\x07)\x02\x02\u132E\u1330\x05\b\x05\x02\u132F" +
		"\u132E\x03\x02\x02\x02\u1330\u1331\x03\x02\x02\x02\u1331\u132F\x03\x02" +
		"\x02\x02\u1331\u1332\x03\x02\x02\x02\u1332\u1333\x03\x02\x02\x02\u1333" +
		"\u1334\t\x13\x02\x02\u1334\u1336\x03\x02\x02\x02\u1335\u132F\x03\x02\x02" +
		"\x02\u1335\u1336\x03\x02\x02\x02\u1336\u134E\x03\x02\x02\x02\u1337\u134E" +
		"\x07E\x02\x02\u1338\u134E\x07F\x02\x02\u1339\u134E\x07G\x02\x02\u133A" +
		"\u134E\x07H\x02\x02\u133B\u134E\x07I\x02\x02\u133C\u134E\x07J\x02\x02" +
		"\u133D\u134E\x07K\x02\x02\u133E\u134E\x07D\x02\x02\u133F\u134E\x07M\x02" +
		"\x02\u1340\u134E\x07N\x02\x02\u1341\u134E\x07O\x02\x02\u1342\u134E\x07" +
		"P\x02\x02\u1343\u134E\x07Q\x02\x02\u1344\u134E\x07R\x02\x02\u1345\u134E" +
		"\x07x\x02\x02\u1346\u134E\x07\xB3\x02\x02\u1347\u134E\x07\xB2\x02\x02" +
		"\u1348\u134E\x07\xB1\x02\x02\u1349\u134E\x07\xCA\x02\x02\u134A\u134E\x07" +
		"\u010A\x02\x02\u134B\u134E\x07\u0115\x02\x02\u134C\u134E\x07\u0116\x02" +
		"\x02\u134D\u130E\x03\x02\x02\x02\u134D\u130F\x03\x02\x02\x02\u134D\u1319" +
		"\x03\x02\x02\x02\u134D\u1323\x03\x02\x02\x02\u134D\u132D\x03\x02\x02\x02" +
		"\u134D\u1337\x03\x02\x02\x02\u134D\u1338\x03\x02\x02\x02\u134D\u1339\x03" +
		"\x02\x02\x02\u134D\u133A\x03\x02\x02\x02\u134D\u133B\x03\x02\x02\x02\u134D" +
		"\u133C\x03\x02\x02\x02\u134D\u133D\x03\x02\x02\x02\u134D\u133E\x03\x02" +
		"\x02\x02\u134D\u133F\x03\x02\x02\x02\u134D\u1340\x03\x02\x02\x02\u134D" +
		"\u1341\x03\x02\x02\x02\u134D\u1342\x03\x02\x02\x02\u134D\u1343\x03\x02" +
		"\x02\x02\u134D\u1344\x03\x02\x02\x02\u134D\u1345\x03\x02\x02\x02\u134D" +
		"\u1346\x03\x02\x02\x02\u134D\u1347\x03\x02\x02\x02\u134D\u1348\x03\x02" +
		"\x02\x02\u134D\u1349\x03\x02\x02\x02\u134D\u134A\x03\x02\x02\x02\u134D" +
		"\u134B\x03\x02\x02\x02\u134D\u134C\x03\x02\x02\x02\u134E\u014F\x03\x02" +
		"\x02\x02\u134F\u1351\t\x14\x02\x02\u1350\u1352\x05\b\x05\x02\u1351\u1350" +
		"\x03\x02\x02\x02\u1352\u1353\x03\x02\x02\x02\u1353\u1351\x03\x02\x02\x02" +
		"\u1353\u1354\x03\x02\x02\x02\u1354\u135B\x03\x02\x02\x02\u1355\u1357\x07" +
		"\xD6\x02\x02\u1356\u1358\x05\b\x05\x02\u1357\u1356\x03\x02\x02\x02\u1358" +
		"\u1359\x03\x02\x02\x02\u1359\u1357\x03\x02\x02\x02\u1359\u135A\x03\x02" +
		"\x02\x02\u135A\u135C\x03\x02\x02\x02\u135B\u1355\x03\x02\x02\x02\u135B" +
		"\u135C\x03\x02\x02\x02\u135C\u135D\x03\x02\x02\x02\u135D\u135E\x05\u0152" +
		"\xAA\x02\u135E\u0151\x03\x02\x02\x02\u135F\u1361\x05\u0154\xAB\x02\u1360" +
		"\u135F\x03\x02\x02\x02\u1361\u1362\x03\x02\x02\x02\u1362\u1360\x03\x02" +
		"\x02\x02\u1362\u1363\x03\x02\x02\x02\u1363\u0153\x03\x02\x02\x02\u1364" +
		"\u1365\t\x15\x02\x02\u1365\u0155\x03\x02\x02\x02\u1366\u1367\x07\u01B8" +
		"\x02\x02\u1367\u0157\x03\x02\x02\x02\u1368\u1369\x07\u01B8\x02\x02\u1369" +
		"\u0159\x03\x02\x02\x02\u136A\u136D\x05\u0174\xBB\x02\u136B\u136D\x05\u016A" +
		"\xB6\x02\u136C\u136A\x03\x02\x02\x02\u136C\u136B\x03\x02\x02\x02\u136D" +
		"\u015B\x03\x02\x02\x02\u136E\u1376\x07\u0132\x02\x02\u136F\u1371\x05\b" +
		"\x05\x02\u1370\u136F\x03\x02\x02\x02\u1371\u1372\x03\x02\x02\x02\u1372" +
		"\u1370\x03\x02\x02\x02\u1372\u1373\x03\x02\x02\x02\u1373\u1374\x03\x02" +
		"\x02\x02\u1374\u1375\x07\xD6\x02\x02\u1375\u1377\x03\x02\x02\x02\u1376" +
		"\u1370\x03\x02\x02\x02\u1376\u1377\x03\x02\x02\x02\u1377\u1383\x03\x02" +
		"\x02\x02\u1378\u1380\x07\u0134\x02\x02\u1379\u137B\x05\b\x05\x02\u137A" +
		"\u1379\x03\x02\x02\x02\u137B\u137C\x03\x02\x02\x02\u137C\u137A\x03\x02" +
		"\x02\x02\u137C\u137D\x03\x02\x02\x02\u137D\u137E\x03\x02\x02\x02\u137E" +
		"\u137F\x07\x16\x02\x02\u137F\u1381\x03\x02\x02\x02\u1380\u137A\x03\x02" +
		"\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381\u1383\x03\x02\x02\x02\u1382" +
		"\u136E\x03\x02\x02\x02\u1382\u1378\x03\x02\x02\x02\u1383\u1385\x03\x02" +
		"\x02\x02\u1384\u1386\x05\b\x05\x02\u1385\u1384\x03\x02\x02\x02\u1386\u1387" +
		"\x03\x02\x02\x02\u1387\u1385\x03\x02\x02\x02\u1387\u1388\x03\x02\x02\x02" +
		"\u1388\u1389\x03\x02\x02\x02\u1389\u1393\x05\u015E\xB0\x02\u138A\u138C" +
		"\x05\b\x05\x02\u138B\u138A\x03\x02\x02\x02\u138C\u138F\x03\x02\x02\x02" +
		"\u138D\u138B\x03\x02\x02\x02\u138D\u138E\x03\x02\x02\x02\u138E\u1390\x03" +
		"\x02\x02\x02\u138F\u138D\x03\x02\x02\x02\u1390\u1392\x05\u015E\xB0\x02" +
		"\u1391\u138D\x03\x02\x02\x02\u1392\u1395\x03\x02\x02\x02\u1393\u1391\x03" +
		"\x02\x02\x02\u1393\u1394\x03\x02\x02\x02\u1394\u015D\x03\x02\x02\x02\u1395" +
		"\u1393\x03\x02\x02\x02\u1396\u1397\x07\u01B8\x02\x02\u1397\u015F\x03\x02" +
		"\x02\x02\u1398\u139A\x07\xE3\x02\x02\u1399\u139B\x05\b\x05\x02\u139A\u1399" +
		"\x03\x02\x02\x02\u139B\u139C\x03\x02\x02\x02\u139C\u139A\x03\x02\x02\x02" +
		"\u139C\u139D\x03\x02\x02\x02\u139D\u13A4\x03\x02\x02\x02\u139E\u13A0\x07" +
		"\xD6\x02\x02\u139F\u13A1\x05\b\x05\x02\u13A0\u139F\x03\x02\x02\x02\u13A1" +
		"\u13A2\x03\x02\x02\x02\u13A2\u13A0\x03\x02\x02\x02\u13A2\u13A3\x03\x02" +
		"\x02\x02\u13A3\u13A5\x03\x02\x02\x02\u13A4\u139E\x03\x02\x02\x02\u13A4" +
		"\u13A5\x03\x02\x02\x02\u13A5\u13A6\x03\x02\x02\x02\u13A6\u13AE\x05\u0168" +
		"\xB5\x02\u13A7\u13A9\x05\b\x05\x02\u13A8\u13A7\x03\x02\x02\x02\u13A9\u13AA" +
		"\x03\x02\x02\x02\u13AA\u13A8\x03\x02\x02\x02\u13AA\u13AB\x03\x02\x02\x02" +
		"\u13AB\u13AC\x03\x02\x02\x02\u13AC\u13AD\x07\xE5\x02\x02\u13AD\u13AF\x03" +
		"\x02\x02\x02\u13AE\u13A8\x03\x02\x02\x02\u13AE\u13AF\x03\x02\x02\x02\u13AF" +
		"\u13CD\x03\x02\x02\x02\u13B0\u13B2\x05\b\x05\x02\u13B1\u13B0\x03\x02\x02" +
		"\x02\u13B2\u13B3\x03\x02\x02\x02\u13B3\u13B1\x03\x02\x02\x02\u13B3\u13B4" +
		"\x03\x02\x02\x02\u13B4\u13BB\x03\x02\x02\x02\u13B5\u13B7\x07\u018B\x02" +
		"\x02\u13B6\u13B8\x05\b\x05\x02\u13B7\u13B6\x03\x02\x02\x02\u13B8\u13B9" +
		"\x03\x02\x02\x02\u13B9\u13B7\x03\x02\x02\x02\u13B9\u13BA\x03\x02\x02\x02" +
		"\u13BA\u13BC\x03\x02\x02\x02\u13BB\u13B5\x03\x02\x02\x02\u13BB\u13BC\x03" +
		"\x02\x02\x02\u13BC\u13BD\x03\x02\x02\x02\u13BD\u13BF\x07\xB4\x02\x02\u13BE" +
		"\u13C0\x05\b\x05\x02\u13BF\u13BE\x03\x02\x02\x02\u13C0\u13C1\x03\x02\x02" +
		"\x02\u13C1\u13BF\x03\x02\x02\x02\u13C1\u13C2\x03\x02\x02\x02\u13C2\u13C9" +
		"\x03\x02\x02\x02\u13C3\u13C5\x07\x1F\x02\x02\u13C4\u13C6\x05\b\x05\x02" +
		"\u13C5\u13C4\x03\x02\x02\x02\u13C6\u13C7\x03\x02\x02\x02\u13C7\u13C5\x03" +
		"\x02\x02\x02\u13C7\u13C8\x03\x02\x02\x02\u13C8\u13CA\x03\x02\x02\x02\u13C9" +
		"\u13C3\x03\x02\x02\x02\u13C9\u13CA\x03\x02\x02\x02\u13CA\u13CB\x03\x02" +
		"\x02\x02\u13CB\u13CC\x05\u0166\xB4\x02\u13CC\u13CE\x03\x02\x02\x02\u13CD" +
		"\u13B1\x03\x02\x02\x02\u13CD\u13CE\x03\x02\x02\x02\u13CE\u13EC\x03\x02" +
		"\x02\x02\u13CF\u13D1\x05\b\x05\x02\u13D0\u13CF\x03\x02\x02\x02\u13D1\u13D2" +
		"\x03\x02\x02\x02\u13D2\u13D0\x03\x02\x02\x02\u13D2\u13D3\x03\x02\x02\x02" +
		"\u13D3\u13DA\x03\x02\x02\x02\u13D4\u13D6\x07\xE5\x02\x02\u13D5\u13D7\x05" +
		"\b\x05\x02\u13D6\u13D5\x03\x02\x02\x02\u13D7\u13D8\x03\x02\x02\x02\u13D8" +
		"\u13D6\x03\x02\x02\x02\u13D8\u13D9\x03\x02\x02\x02\u13D9\u13DB\x03\x02" +
		"\x02\x02\u13DA\u13D4\x03\x02\x02\x02\u13DA\u13DB\x03\x02\x02\x02\u13DB" +
		"\u13E2\x03\x02\x02\x02\u13DC\u13DE\x07\x1F\x02\x02\u13DD\u13DF\x05\b\x05" +
		"\x02\u13DE\u13DD\x03\x02\x02\x02\u13DF\u13E0\x03\x02\x02\x02\u13E0\u13DE" +
		"\x03\x02\x02\x02\u13E0\u13E1\x03\x02\x02\x02\u13E1\u13E3\x03\x02\x02\x02" +
		"\u13E2\u13DC\x03\x02\x02\x02\u13E2\u13E3\x03\x02\x02\x02\u13E3\u13E4\x03" +
		"\x02\x02\x02\u13E4\u13E6\x07\u0176\x02\x02\u13E5\u13E7\x05\b\x05\x02\u13E6" +
		"\u13E5\x03\x02\x02\x02\u13E7\u13E8\x03\x02\x02\x02\u13E8\u13E6\x03\x02" +
		"\x02\x02\u13E8\u13E9\x03\x02\x02\x02\u13E9\u13EA\x03\x02\x02\x02\u13EA" +
		"\u13EB\x05\u0164\xB3\x02\u13EB\u13ED\x03\x02\x02\x02\u13EC\u13D0\x03\x02" +
		"\x02\x02\u13EC\u13ED\x03\x02\x02\x02\u13ED\u140B\x03\x02\x02\x02\u13EE" +
		"\u13F0\x05\b\x05\x02\u13EF\u13EE\x03\x02\x02\x02\u13F0\u13F1\x03\x02\x02" +
		"\x02\u13F1\u13EF\x03\x02\x02\x02\u13F1\u13F2\x03\x02\x02\x02\u13F2\u13F9" +
		"\x03\x02\x02\x02\u13F3\u13F5\x07\xE5\x02\x02\u13F4\u13F6\x05\b\x05\x02" +
		"\u13F5\u13F4\x03\x02\x02\x02\u13F6\u13F7\x03\x02\x02\x02\u13F7\u13F5\x03" +
		"\x02\x02\x02\u13F7\u13F8\x03\x02\x02\x02\u13F8\u13FA\x03\x02\x02\x02\u13F9" +
		"\u13F3\x03\x02\x02\x02\u13F9\u13FA\x03\x02\x02\x02\u13FA\u1401\x03\x02" +
		"\x02\x02\u13FB\u13FD\x07\x1F\x02\x02\u13FC\u13FE\x05\b\x05\x02\u13FD\u13FC" +
		"\x03\x02\x02\x02\u13FE\u13FF\x03\x02\x02\x02\u13FF\u13FD\x03\x02\x02\x02" +
		"\u13FF\u1400\x03\x02\x02\x02\u1400\u1402\x03\x02\x02\x02\u1401\u13FB\x03" +
		"\x02\x02\x02\u1401\u1402\x03\x02\x02\x02\u1402\u1403\x03\x02\x02\x02\u1403" +
		"\u1405\x071\x02\x02\u1404\u1406\x05\b\x05\x02\u1405\u1404\x03\x02\x02" +
		"\x02\u1406\u1407\x03\x02\x02\x02\u1407\u1405\x03\x02\x02\x02\u1407\u1408" +
		"\x03\x02\x02\x02\u1408\u1409\x03\x02\x02\x02\u1409\u140A\x05\u0162\xB2" +
		"\x02\u140A\u140C\x03\x02\x02\x02\u140B\u13EF\x03\x02\x02\x02\u140B\u140C" +
		"\x03\x02\x02\x02\u140C\u0161\x03\x02\x02\x02\u140D\u1410\x07\u01B6\x02" +
		"\x02\u140E\u1410\x05\u01CE\xE8\x02\u140F\u140D\x03\x02\x02\x02\u140F\u140E" +
		"\x03\x02\x02\x02\u1410\u0163\x03\x02\x02\x02\u1411\u1414\x07\u01B6\x02" +
		"\x02\u1412\u1414\x05\u01CE\xE8\x02\u1413\u1411\x03\x02\x02\x02\u1413\u1412" +
		"\x03\x02\x02\x02\u1414\u0165\x03\x02\x02\x02\u1415\u1418\x07\u01B6\x02" +
		"\x02\u1416\u1418\x05\u01CE\xE8\x02\u1417\u1415\x03\x02\x02\x02\u1417\u1416" +
		"\x03\x02\x02\x02\u1418\u0167\x03\x02\x02\x02\u1419\u141C\x07\u01B6\x02" +
		"\x02\u141A\u141C\x05\u01CE\xE8\x02\u141B\u1419\x03\x02\x02\x02\u141B\u141A" +
		"\x03\x02\x02\x02\u141C\u0169\x03\x02\x02\x02\u141D\u141F\x07e\x02\x02" +
		"\u141E\u1420\x05\b\x05\x02\u141F\u141E\x03\x02\x02\x02\u1420\u1421\x03" +
		"\x02\x02\x02\u1421\u141F\x03\x02\x02\x02\u1421\u1422\x03\x02\x02\x02\u1422" +
		"\u1437\x03\x02\x02\x02\u1423\u142B\x07\u0127\x02\x02\u1424\u1426\x05\b" +
		"\x05\x02\u1425\u1424\x03\x02\x02\x02\u1426\u1427\x03\x02\x02\x02\u1427" +
		"\u1425\x03\x02\x02\x02\u1427\u1428\x03\x02\x02\x02\u1428\u1429\x03\x02" +
		"\x02\x02\u1429\u142A\x07\x16\x02\x02\u142A\u142C\x03\x02\x02\x02\u142B" +
		"\u1425\x03\x02\x02\x02\u142B\u142C\x03\x02\x02\x02\u142C\u1438\x03\x02" +
		"\x02\x02\u142D\u1435\x07\u0126\x02\x02\u142E\u1430\x05\b\x05\x02\u142F" +
		"\u142E\x03\x02\x02\x02\u1430\u1431\x03\x02\x02\x02\u1431\u142F\x03\x02" +
		"\x02\x02\u1431\u1432\x03\x02\x02\x02\u1432\u1433\x03\x02\x02\x02\u1433" +
		"\u1434\x07\xD6\x02\x02\u1434\u1436\x03\x02\x02\x02\u1435\u142F\x03\x02" +
		"\x02\x02\u1435\u1436\x03\x02\x02\x02\u1436\u1438\x03\x02\x02\x02\u1437" +
		"\u1423\x03\x02\x02\x02\u1437\u142D\x03\x02\x02\x02\u1438\u1439\x03\x02" +
		"\x02\x02\u1439\u1443\x05\u016C\xB7\x02\u143A\u143C\x05\b\x05\x02\u143B" +
		"\u143A\x03\x02\x02\x02\u143C\u143D\x03\x02\x02\x02\u143D\u143B\x03\x02" +
		"\x02\x02\u143D\u143E\x03\x02\x02\x02\u143E\u143F\x03\x02\x02\x02\u143F" +
		"\u1440\x05\u016C\xB7\x02\u1440\u1442\x03\x02\x02\x02\u1441\u143B\x03\x02" +
		"\x02\x02\u1442\u1445\x03\x02\x02\x02\u1443\u1441\x03\x02\x02\x02\u1443" +
		"\u1444\x03\x02\x02\x02\u1444\u016B\x03\x02\x02\x02\u1445\u1443\x03\x02" +
		"\x02\x02\u1446\u1447\x07\u01B8\x02\x02\u1447\u016D\x03\x02\x02\x02\u1448" +
		"\u144A\x07\u0185\x02\x02\u1449\u144B\x05\b\x05\x02\u144A\u1449\x03\x02" +
		"\x02\x02\u144B\u144C\x03\x02\x02\x02\u144C\u144A\x03\x02\x02\x02\u144C" +
		"\u144D\x03\x02\x02\x02\u144D\u144E\x03\x02\x02\x02\u144E\u1450\x07\xFF" +
		"\x02\x02\u144F\u1451\x05\b\x05\x02\u1450\u144F\x03\x02\x02\x02\u1451\u1452" +
		"\x03\x02\x02\x02\u1452\u1450\x03\x02\x02\x02\u1452\u1453\x03\x02\x02\x02" +
		"\u1453\u1454\x03\x02\x02\x02\u1454\u1456\t\x16\x02\x02\u1455\u1457\x05" +
		"\b\x05\x02\u1456\u1455\x03\x02\x02\x02\u1457\u1458\x03\x02\x02\x02\u1458" +
		"\u1456\x03\x02\x02\x02\u1458\u1459\x03\x02\x02";
	private static readonly _serializedATNSegment11: string =
		"\x02\u1459\u1460\x03\x02\x02\x02\u145A\u145C\x07\xD6\x02\x02\u145B\u145D" +
		"\x05\b\x05\x02\u145C\u145B\x03\x02\x02\x02\u145D\u145E\x03\x02\x02\x02" +
		"\u145E\u145C\x03\x02\x02\x02\u145E\u145F\x03\x02\x02\x02\u145F\u1461\x03" +
		"\x02\x02\x02\u1460\u145A\x03\x02\x02\x02\u1460\u1461\x03\x02\x02\x02\u1461" +
		"\u1462\x03\x02\x02\x02\u1462\u1463\x05\u0170\xB9\x02\u1463\u016F\x03\x02" +
		"\x02\x02\u1464\u1467\x07\u01B5\x02\x02\u1465\u1467\x05\u01CE\xE8\x02\u1466" +
		"\u1464\x03\x02\x02\x02\u1466\u1465\x03\x02\x02\x02\u1467\u0171\x03\x02" +
		"\x02\x02\u1468\u146A\x07\xDC\x02\x02\u1469\u146B\x05\b\x05\x02\u146A\u1469" +
		"\x03\x02\x02\x02\u146B\u146C\x03\x02\x02\x02\u146C\u146A\x03\x02\x02\x02" +
		"\u146C\u146D\x03\x02\x02\x02\u146D\u1482\x03\x02\x02\x02\u146E\u1476\x07" +
		"\u0127\x02\x02\u146F\u1471\x05\b\x05\x02\u1470\u146F\x03\x02\x02\x02\u1471" +
		"\u1472\x03\x02\x02\x02\u1472\u1470\x03\x02\x02\x02\u1472\u1473\x03\x02" +
		"\x02\x02\u1473\u1474\x03\x02\x02\x02\u1474\u1475\x07\x16\x02\x02\u1475" +
		"\u1477\x03\x02\x02\x02\u1476\u1470\x03\x02\x02\x02\u1476\u1477\x03\x02" +
		"\x02\x02\u1477\u1483\x03\x02\x02\x02\u1478\u1480\x07\u0126\x02\x02\u1479" +
		"\u147B\x05\b\x05\x02\u147A\u1479\x03\x02\x02\x02\u147B\u147C\x03\x02\x02" +
		"\x02\u147C\u147A\x03\x02\x02\x02\u147C\u147D\x03\x02\x02\x02\u147D\u147E" +
		"\x03\x02\x02\x02\u147E\u147F\x07\xD6\x02\x02\u147F\u1481\x03\x02\x02\x02" +
		"\u1480\u147A\x03\x02\x02\x02\u1480\u1481\x03\x02\x02\x02\u1481\u1483\x03" +
		"\x02\x02\x02\u1482\u146E\x03\x02\x02\x02\u1482\u1478\x03\x02\x02\x02\u1483" +
		"\u1485\x03\x02\x02\x02\u1484\u1486\x05\b\x05\x02\u1485\u1484\x03\x02\x02" +
		"\x02\u1486\u1487\x03\x02\x02\x02\u1487\u1485\x03\x02\x02\x02\u1487\u1488" +
		"\x03\x02\x02\x02\u1488\u1489\x03\x02\x02\x02\u1489\u148A\t\x17\x02\x02" +
		"\u148A\u0173\x03\x02\x02\x02\u148B\u148D\x07\u0126\x02\x02\u148C\u148E" +
		"\x05\b\x05\x02\u148D\u148C\x03\x02\x02\x02\u148E\u148F\x03\x02\x02\x02" +
		"\u148F\u148D\x03\x02\x02\x02\u148F\u1490\x03\x02\x02\x02\u1490\u1491\x03" +
		"\x02\x02\x02\u1491\u1492\x05\u0176\xBC\x02\u1492\u0175\x03\x02\x02\x02" +
		"\u1493\u1495\x07U\x02\x02\u1494\u1496\x05\b\x05\x02\u1495\u1494\x03\x02" +
		"\x02\x02\u1496\u1497\x03\x02\x02\x02\u1497\u1495\x03\x02\x02\x02\u1497" +
		"\u1498\x03\x02\x02\x02\u1498\u149A\x03\x02\x02\x02\u1499\u1493\x03\x02" +
		"\x02\x02\u1499\u149A\x03\x02\x02\x02\u149A\u14A7\x03\x02\x02\x02\u149B" +
		"\u149D\x05\u017A\xBE\x02\u149C\u149E\x05\b\x05\x02\u149D\u149C\x03\x02" +
		"\x02\x02\u149E\u149F\x03\x02\x02\x02\u149F\u149D\x03\x02\x02\x02\u149F" +
		"\u14A0\x03\x02\x02\x02\u14A0\u14A1\x03\x02\x02\x02\u14A1\u14A3\x07\u0175" +
		"\x02\x02\u14A2\u14A4\x05\b\x05\x02\u14A3\u14A2\x03\x02\x02\x02\u14A4\u14A5" +
		"\x03\x02\x02\x02\u14A5\u14A3\x03\x02\x02\x02\u14A5\u14A6\x03\x02\x02\x02" +
		"\u14A6\u14A8\x03\x02\x02\x02\u14A7\u149B\x03\x02\x02\x02\u14A7\u14A8\x03" +
		"\x02\x02\x02\u14A8\u14A9\x03\x02\x02\x02\u14A9\u14AD\x05\u017C\xBF\x02" +
		"\u14AA\u14AC\x05\b\x05\x02\u14AB\u14AA\x03\x02\x02\x02\u14AC\u14AF\x03" +
		"\x02\x02\x02\u14AD\u14AB\x03\x02\x02\x02\u14AD\u14AE\x03\x02\x02\x02\u14AE" +
		"\u14B7\x03\x02\x02\x02\u14AF\u14AD\x03\x02\x02\x02\u14B0\u14B4\x07:\x02" +
		"\x02\u14B1\u14B3\x05\b\x05\x02\u14B2\u14B1\x03\x02\x02\x02\u14B3\u14B6" +
		"\x03\x02\x02\x02\u14B4\u14B2\x03\x02\x02\x02\u14B4\u14B5\x03\x02\x02\x02" +
		"\u14B5\u14B8\x03\x02\x02\x02\u14B6\u14B4\x03\x02\x02\x02\u14B7\u14B0\x03" +
		"\x02\x02\x02\u14B7\u14B8\x03\x02\x02\x02\u14B8\u150F\x03\x02\x02\x02\u14B9" +
		"\u14BB\x07\xD6\x02\x02\u14BA\u14BC\x05\b\x05\x02\u14BB\u14BA\x03\x02\x02" +
		"\x02\u14BC\u14BD\x03\x02\x02\x02\u14BD\u14BB\x03\x02\x02\x02\u14BD\u14BE" +
		"\x03\x02\x02\x02\u14BE\u14C0\x03\x02\x02\x02\u14BF\u14B9\x03\x02\x02\x02" +
		"\u14BF\u14C0\x03\x02\x02\x02\u14C0\u14C1\x03\x02\x02\x02\u14C1\u14C3\x07" +
		"\u0187\x02\x02\u14C2\u14C4\x05\b\x05\x02\u14C3\u14C2\x03\x02\x02\x02\u14C4" +
		"\u14C5\x03\x02\x02\x02\u14C5\u14C3\x03\x02\x02\x02\u14C5\u14C6\x03\x02" +
		"\x02\x02\u14C6\u14CD\x03\x02\x02\x02\u14C7\u14C9\x07\xC9\x02\x02\u14C8" +
		"\u14CA\x05\b\x05\x02\u14C9\u14C8\x03\x02\x02\x02\u14CA\u14CB\x03\x02\x02" +
		"\x02\u14CB\u14C9\x03\x02\x02\x02\u14CB\u14CC\x03\x02\x02\x02\u14CC\u14CE" +
		"\x03\x02\x02\x02\u14CD\u14C7\x03\x02\x02\x02\u14CD\u14CE\x03\x02\x02\x02" +
		"\u14CE\u14D6\x03\x02\x02\x02\u14CF\u14D3\x07\u0152\x02\x02\u14D0\u14D2" +
		"\x05\b\x05\x02\u14D1\u14D0\x03\x02\x02\x02\u14D2\u14D5\x03\x02\x02\x02" +
		"\u14D3\u14D1\x03\x02\x02\x02\u14D3\u14D4\x03\x02\x02\x02\u14D4\u14D7\x03" +
		"\x02\x02\x02\u14D5\u14D3\x03\x02\x02\x02\u14D6\u14CF\x03\x02\x02\x02\u14D6" +
		"\u14D7\x03\x02\x02\x02\u14D7\u14E1\x03\x02\x02\x02\u14D8\u14DA\x07\xB7" +
		"\x02\x02\u14D9\u14DB\x05\b\x05\x02\u14DA\u14D9\x03\x02\x02\x02\u14DB\u14DC" +
		"\x03\x02\x02\x02\u14DC\u14DA\x03\x02\x02\x02\u14DC\u14DD\x03\x02\x02\x02" +
		"\u14DD\u14DF\x03\x02\x02\x02\u14DE\u14D8\x03\x02\x02\x02\u14DE\u14DF\x03" +
		"\x02\x02\x02\u14DF\u14E0\x03\x02\x02\x02\u14E0\u14E2\x05\u017A\xBE\x02" +
		"\u14E1\u14DE\x03\x02\x02\x02\u14E1\u14E2\x03\x02\x02\x02\u14E2\u14EB\x03" +
		"\x02\x02\x02\u14E3\u14E5\x07\u0175\x02\x02\u14E4\u14E6\x05\b\x05\x02\u14E5" +
		"\u14E4\x03\x02\x02\x02\u14E6\u14E7\x03\x02\x02\x02\u14E7\u14E5\x03\x02" +
		"\x02\x02\u14E7\u14E8\x03\x02\x02\x02\u14E8\u14E9\x03\x02\x02\x02\u14E9" +
		"\u14EA\x05\u017C\xBF\x02\u14EA\u14EC\x03\x02\x02\x02\u14EB\u14E3\x03\x02" +
		"\x02\x02\u14EB\u14EC\x03\x02\x02\x02\u14EC\u14FA\x03\x02\x02\x02\u14ED" +
		"\u14EF\x05\b\x05\x02\u14EE\u14ED\x03\x02\x02\x02\u14EF\u14F2\x03\x02\x02" +
		"\x02\u14F0\u14EE\x03\x02\x02\x02\u14F0\u14F1\x03\x02\x02\x02\u14F1\u14F3" +
		"\x03\x02\x02\x02\u14F2\u14F0\x03\x02\x02\x02\u14F3\u14F7\x07:\x02\x02" +
		"\u14F4\u14F6\x05\b\x05\x02\u14F5\u14F4\x03\x02\x02\x02\u14F6\u14F9\x03" +
		"\x02\x02\x02\u14F7\u14F5\x03\x02\x02\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8" +
		"\u14FB\x03\x02\x02\x02\u14F9\u14F7\x03\x02\x02\x02\u14FA\u14F0\x03\x02" +
		"\x02\x02\u14FA\u14FB\x03\x02\x02\x02\u14FB\u150C\x03\x02\x02\x02\u14FC" +
		"\u14FE\x07s\x02\x02\u14FD\u14FF\x05\b\x05\x02\u14FE\u14FD\x03\x02\x02" +
		"\x02\u14FF\u1500\x03\x02\x02\x02\u1500\u14FE\x03\x02\x02\x02\u1500\u1501" +
		"\x03\x02\x02\x02\u1501\u1508\x03\x02\x02\x02\u1502\u1504\x07\u0102\x02" +
		"\x02\u1503\u1505\x05\b\x05\x02\u1504\u1503\x03\x02\x02\x02\u1505\u1506" +
		"\x03\x02\x02\x02\u1506\u1504\x03\x02\x02\x02\u1506\u1507\x03\x02\x02\x02" +
		"\u1507\u1509\x03\x02\x02\x02\u1508\u1502\x03\x02\x02\x02\u1508\u1509\x03" +
		"\x02\x02\x02\u1509\u150A\x03\x02\x02\x02\u150A\u150B\x05\u0178\xBD\x02" +
		"\u150B\u150D\x03\x02\x02\x02\u150C\u14FC\x03\x02\x02\x02\u150C\u150D\x03" +
		"\x02\x02\x02\u150D\u150F\x03\x02\x02\x02\u150E\u1499\x03\x02\x02\x02\u150E" +
		"\u14BF\x03\x02\x02\x02\u150F\u0177\x03\x02\x02\x02\u1510\u1511\x05\u01CE" +
		"\xE8\x02\u1511\u0179\x03\x02\x02\x02\u1512\u1513\x07\u01B6\x02\x02\u1513" +
		"\u017B\x03\x02\x02\x02\u1514\u1515\x07\u01B6\x02\x02\u1515\u017D\x03\x02" +
		"\x02\x02\u1516\u1520\x05\xF4{\x02\u1517\u1519\x05\b\x05\x02\u1518\u1517" +
		"\x03\x02\x02\x02\u1519\u151A\x03\x02\x02\x02\u151A\u1518\x03\x02\x02\x02" +
		"\u151A\u151B\x03\x02\x02\x02\u151B\u151E\x03\x02\x02\x02\u151C\u151F\x05" +
		"\u0180\xC1\x02\u151D\u151F\x07\xAD\x02\x02\u151E\u151C\x03\x02\x02\x02" +
		"\u151E\u151D\x03\x02\x02\x02\u151F\u1521\x03\x02\x02\x02\u1520\u1518\x03" +
		"\x02\x02\x02\u1520\u1521\x03\x02\x02\x02\u1521\u152B\x03\x02\x02\x02\u1522" +
		"\u1524\x05\b\x05\x02\u1523\u1522\x03\x02\x02\x02\u1524\u1525\x03\x02\x02" +
		"\x02\u1525\u1523\x03\x02\x02\x02\u1525\u1526\x03\x02\x02\x02\u1526\u1527" +
		"\x03\x02\x02\x02\u1527\u1528\x05\u0182\xC2\x02\u1528\u152A\x03\x02\x02" +
		"\x02\u1529\u1523\x03\x02\x02\x02\u152A\u152D\x03\x02\x02\x02\u152B\u1529" +
		"\x03\x02\x02\x02\u152B\u152C\x03\x02\x02\x02\u152C\u152E\x03\x02\x02\x02" +
		"\u152D\u152B\x03\x02\x02\x02\u152E\u152F\x07\u01B2\x02\x02\u152F\u017F" +
		"\x03\x02\x02\x02\u1530\u1531\x07\u01B8\x02\x02\u1531\u0181\x03\x02\x02" +
		"\x02\u1532\u1534\x07,\x02\x02\u1533\u1535\x05\b\x05\x02\u1534\u1533\x03" +
		"\x02\x02\x02\u1535\u1536\x03\x02\x02\x02\u1536\u1534\x03\x02\x02\x02\u1536" +
		"\u1537\x03\x02\x02\x02\u1537\u1538\x03\x02\x02\x02\u1538\u1539\t\b\x02" +
		"\x02\u1539\u15FD\x03\x02\x02\x02\u153A\u153C\x07\xB6\x02\x02\u153B\u153D" +
		"\x05\b\x05\x02\u153C\u153B\x03\x02\x02\x02\u153D\u153E\x03\x02\x02\x02" +
		"\u153E\u153C\x03\x02\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u1546\x03" +
		"\x02\x02\x02\u1540\u1542\x07\xD6\x02\x02\u1541\u1543\x05\b\x05\x02\u1542" +
		"\u1541\x03\x02\x02\x02\u1543\u1544\x03\x02\x02\x02\u1544\u1542\x03\x02" +
		"\x02\x02\u1544\u1545\x03\x02\x02\x02\u1545\u1547\x03\x02\x02\x02\u1546" +
		"\u1540\x03\x02\x02\x02\u1546\u1547\x03\x02\x02\x02\u1547\u1548\x03\x02" +
		"\x02\x02\u1548\u1549\x05\u018E\xC8\x02\u1549\u15FD\x03\x02\x02\x02\u154A" +
		"\u154C\x07$\x02\x02\u154B\u154D\x05\b\x05\x02\u154C\u154B\x03\x02\x02" +
		"\x02\u154D\u154E\x03\x02\x02\x02\u154E\u154C\x03\x02\x02\x02\u154E\u154F" +
		"\x03\x02\x02\x02\u154F\u1556\x03\x02\x02\x02\u1550\u1552\x07\xD6\x02\x02" +
		"\u1551\u1553\x05\b\x05\x02\u1552\u1551\x03\x02\x02\x02\u1553\u1554\x03" +
		"\x02\x02\x02\u1554\u1552\x03\x02\x02\x02\u1554\u1555\x03\x02\x02\x02\u1555" +
		"\u1557\x03\x02\x02\x02\u1556\u1550\x03\x02\x02\x02\u1556\u1557\x03\x02" +
		"\x02\x02\u1557\u1558\x03\x02\x02\x02\u1558\u1559\x05\u018E\xC8\x02\u1559" +
		"\u15FD\x03\x02\x02\x02\u155A\u15FD\x07!\x02\x02\u155B\u15FD\x07\u0148" +
		"\x02\x02\u155C\u15FD\x07\u0135\x02\x02\u155D\u155F\x07\u0182\x02\x02\u155E" +
		"\u1560\x05\b\x05\x02\u155F\u155E\x03\x02\x02\x02\u1560\u1561\x03\x02\x02" +
		"\x02\u1561\u155F\x03\x02\x02\x02\u1561\u1562\x03\x02\x02\x02\u1562\u1569" +
		"\x03\x02\x02\x02\u1563\u1565\x07\xD6\x02\x02\u1564\u1566\x05\b\x05\x02" +
		"\u1565\u1564\x03\x02\x02\x02\u1566\u1567\x03\x02\x02\x02\u1567\u1565\x03" +
		"\x02\x02\x02\u1567\u1568\x03\x02\x02\x02\u1568\u156A\x03\x02\x02\x02\u1569" +
		"\u1563\x03\x02\x02\x02\u1569\u156A\x03\x02\x02\x02\u156A\u156C\x03\x02" +
		"\x02\x02\u156B\u155D\x03\x02\x02\x02\u156B\u156C\x03\x02\x02\x02\u156C" +
		"\u156D\x03\x02\x02\x02\u156D\u15FD\x07x\x02\x02\u156E\u15FD\x05\u0124" +
		"\x93\x02\u156F\u15FD\x07\xB8\x02\x02\u1570\u15FD\x07&\x02\x02\u1571\u15FD" +
		"\x07-\x02\x02\u1572\u1574\x07\x9D\x02\x02\u1573\u1575\x05\b\x05\x02\u1574" +
		"\u1573\x03\x02\x02\x02\u1575\u1576\x03\x02\x02\x02\u1576\u1574\x03\x02" +
		"\x02\x02\u1576\u1577\x03\x02\x02\x02\u1577\u1578\x03\x02\x02\x02\u1578" +
		"\u1579\t\x18\x02\x02\u1579\u15FD\x03\x02\x02\x02\u157A\u15FD\x07\xC1\x02" +
		"\x02\u157B\u15FD\x07\xEA\x02\x02\u157C\u15FD\x07\u013B\x02\x02\u157D\u15FD" +
		"\x07\u017A\x02\x02\u157E\u1580\x07\xE4\x02\x02\u157F\u1581\x05\b\x05\x02" +
		"\u1580\u157F\x03\x02\x02\x02\u1581\u1582\x03\x02\x02\x02\u1582\u1580\x03" +
		"\x02\x02\x02\u1582\u1583\x03\x02\x02\x02\u1583\u158A\x03\x02\x02\x02\u1584" +
		"\u1586\x07\xFB\x02\x02\u1585\u1587\x05\b\x05\x02\u1586\u1585\x03\x02\x02" +
		"\x02\u1587\u1588\x03\x02\x02\x02\u1588\u1586\x03\x02\x02\x02\u1588\u1589" +
		"\x03\x02\x02\x02\u1589\u158B\x03\x02\x02\x02\u158A\u1584\x03\x02\x02\x02" +
		"\u158A\u158B\x03\x02\x02\x02\u158B\u1592\x03\x02\x02\x02\u158C\u158E\x07" +
		"\xD6\x02\x02\u158D\u158F\x05\b\x05\x02\u158E\u158D\x03\x02\x02\x02\u158F" +
		"\u1590\x03\x02\x02\x02\u1590\u158E\x03\x02\x02\x02\u1590\u1591\x03\x02" +
		"\x02\x02\u1591\u1593\x03\x02\x02\x02\u1592\u158C\x03\x02\x02\x02\u1592" +
		"\u1593\x03\x02\x02\x02\u1593\u159A\x03\x02\x02\x02\u1594\u1596\x07\u0114" +
		"\x02\x02\u1595\u1597\x05\b\x05\x02\u1596\u1595\x03\x02\x02\x02\u1597\u1598" +
		"\x03\x02\x02\x02\u1598\u1596\x03\x02\x02\x02\u1598\u1599\x03\x02\x02\x02" +
		"\u1599\u159B\x03\x02\x02\x02\u159A\u1594\x03\x02\x02\x02\u159A\u159B\x03" +
		"\x02\x02\x02\u159B\u159C\x03\x02\x02\x02\u159C\u159D\x05\u018C\xC7\x02" +
		"\u159D\u15FD\x03\x02\x02\x02\u159E\u15A0\x07A\x02\x02\u159F\u15A1\x05" +
		"\b\x05\x02\u15A0\u159F\x03\x02\x02\x02\u15A1\u15A2\x03\x02\x02\x02\u15A2" +
		"\u15A0\x03\x02\x02\x02\u15A2\u15A3\x03\x02\x02\x02\u15A3\u15AA\x03\x02" +
		"\x02\x02\u15A4\u15A6\x07\xFB\x02\x02\u15A5\u15A7\x05\b\x05\x02\u15A6\u15A5" +
		"\x03\x02\x02\x02\u15A7\u15A8\x03\x02\x02\x02\u15A8\u15A6\x03\x02\x02\x02" +
		"\u15A8\u15A9\x03\x02\x02\x02\u15A9\u15AB\x03\x02\x02\x02\u15AA\u15A4\x03" +
		"\x02\x02\x02\u15AA\u15AB\x03\x02\x02\x02\u15AB\u15B2\x03\x02\x02\x02\u15AC" +
		"\u15AE\x07\xD6\x02\x02\u15AD\u15AF\x05\b\x05\x02\u15AE\u15AD\x03\x02\x02" +
		"\x02\u15AF\u15B0\x03\x02\x02\x02\u15B0\u15AE\x03\x02\x02\x02\u15B0\u15B1" +
		"\x03\x02\x02\x02\u15B1\u15B3\x03\x02\x02\x02\u15B2\u15AC\x03\x02\x02\x02" +
		"\u15B2\u15B3\x03\x02\x02\x02\u15B3\u15BA\x03\x02\x02\x02\u15B4\u15B6\x07" +
		"\u0114\x02\x02\u15B5\u15B7\x05\b\x05\x02\u15B6\u15B5\x03\x02\x02\x02\u15B7" +
		"\u15B8\x03\x02\x02\x02\u15B8\u15B6\x03\x02\x02\x02\u15B8\u15B9\x03\x02" +
		"\x02\x02\u15B9\u15BB\x03\x02\x02\x02\u15BA\u15B4\x03\x02\x02\x02\u15BA" +
		"\u15BB\x03\x02\x02\x02\u15BB\u15BC\x03\x02\x02\x02\u15BC\u15BD\x05\u018C" +
		"\xC7\x02\u15BD\u15FD\x03\x02\x02\x02\u15BE\u15C0\x07\u0185\x02\x02\u15BF" +
		"\u15C1\x05\b\x05\x02\u15C0\u15BF\x03\x02\x02\x02\u15C1\u15C2\x03\x02\x02" +
		"\x02\u15C2\u15C0\x03\x02\x02\x02\u15C2\u15C3\x03\x02\x02\x02\u15C3\u15CA" +
		"\x03\x02\x02\x02\u15C4\u15C6\x07\xD6\x02\x02\u15C5\u15C7\x05\b\x05\x02" +
		"\u15C6\u15C5\x03\x02\x02\x02\u15C7\u15C8\x03\x02\x02\x02\u15C8\u15C6\x03" +
		"\x02\x02\x02\u15C8\u15C9\x03\x02\x02\x02\u15C9\u15CB\x03\x02\x02\x02\u15CA" +
		"\u15C4\x03\x02\x02\x02\u15CA\u15CB\x03\x02\x02\x02\u15CB\u15CC\x03\x02" +
		"\x02\x02\u15CC\u15CD\x05\u018A\xC6\x02\u15CD\u15FD\x03\x02\x02\x02\u15CE" +
		"\u15D0\x07,\x02\x02\u15CF\u15D1\x05\b\x05\x02\u15D0\u15CF\x03\x02\x02" +
		"\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u15D0\x03\x02\x02\x02\u15D2\u15D3" +
		"\x03\x02\x02\x02\u15D3\u15DA\x03\x02\x02\x02\u15D4\u15D6\x07\u0189\x02" +
		"\x02\u15D5\u15D7\x05\b\x05\x02\u15D6\u15D5\x03\x02\x02\x02\u15D7\u15D8" +
		"\x03\x02\x02\x02\u15D8\u15D6\x03\x02\x02\x02\u15D8\u15D9\x03\x02\x02\x02" +
		"\u15D9\u15DB\x03\x02\x02\x02\u15DA\u15D4\x03\x02\x02\x02\u15DA\u15DB\x03" +
		"\x02\x02\x02\u15DB\u15DC\x03\x02\x02\x02\u15DC\u15DD\x07\u0191\x02\x02" +
		"\u15DD\u15FD\x03\x02\x02\x02\u15DE\u15E6\t\r\x02\x02\u15DF\u15E1\x05\b" +
		"\x05\x02\u15E0\u15DF\x03\x02\x02\x02\u15E1\u15E2\x03\x02\x02\x02\u15E2" +
		"\u15E0\x03\x02\x02\x02\u15E2\u15E3\x03\x02\x02\x02\u15E3\u15E4\x03\x02" +
		"\x02\x02\u15E4\u15E5\x07\u0140\x02\x02\u15E5\u15E7\x03\x02\x02\x02\u15E6" +
		"\u15E0\x03\x02\x02\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15FD\x03\x02" +
		"\x02\x02\u15E8\u15EA\x05\u0150\xA9\x02\u15E9\u15EB\x05\b\x05\x02\u15EA" +
		"\u15E9\x03\x02\x02\x02\u15EB\u15EC\x03\x02\x02\x02\u15EC\u15EA\x03\x02" +
		"\x02\x02\u15EC\u15ED\x03\x02\x02\x02\u15ED\u15FA\x03\x02\x02\x02\u15EE" +
		"\u15FB\x05\u0184\xC3\x02\u15EF\u15F7\x05\u0186\xC4\x02\u15F0\u15F2\x05" +
		"\b\x05\x02\u15F1\u15F0\x03\x02\x02\x02\u15F2\u15F3\x03\x02\x02\x02\u15F3" +
		"\u15F1\x03\x02\x02\x02\u15F3\u15F4\x03\x02\x02\x02\u15F4\u15F5\x03\x02" +
		"\x02\x02\u15F5\u15F6\x05\u0188\xC5\x02\u15F6\u15F8\x03\x02\x02\x02\u15F7" +
		"\u15F1\x03\x02\x02\x02\u15F7\u15F8\x03\x02\x02\x02\u15F8\u15FB\x03\x02" +
		"\x02\x02\u15F9\u15FB\x05\u0188\xC5\x02\u15FA\u15EE\x03\x02\x02\x02\u15FA" +
		"\u15EF\x03\x02\x02\x02\u15FA\u15F9\x03\x02\x02\x02\u15FB\u15FD\x03\x02" +
		"\x02\x02\u15FC\u1532\x03\x02\x02\x02\u15FC\u153A\x03\x02\x02\x02\u15FC" +
		"\u154A\x03\x02\x02\x02\u15FC\u155A\x03\x02\x02\x02\u15FC\u155B\x03\x02" +
		"\x02\x02\u15FC\u155C\x03\x02\x02\x02\u15FC\u156B\x03\x02\x02\x02\u15FC" +
		"\u156E\x03\x02\x02\x02\u15FC\u156F\x03\x02\x02\x02\u15FC\u1570\x03\x02" +
		"\x02\x02\u15FC\u1571\x03\x02\x02\x02\u15FC\u1572\x03\x02\x02\x02\u15FC" +
		"\u157A\x03\x02\x02\x02\u15FC\u157B\x03\x02\x02\x02\u15FC\u157C\x03\x02" +
		"\x02\x02\u15FC\u157D\x03\x02\x02\x02\u15FC\u157E\x03\x02\x02\x02\u15FC" +
		"\u159E\x03\x02\x02\x02\u15FC\u15BE\x03\x02\x02\x02\u15FC\u15CE\x03\x02" +
		"\x02\x02\u15FC\u15DE\x03\x02\x02\x02\u15FC\u15E8\x03\x02\x02\x02\u15FD" +
		"\u0183\x03\x02\x02\x02\u15FE\u1600\x07\u0184\x02\x02\u15FF\u1601\x05\b" +
		"\x05\x02\u1600\u15FF\x03\x02\x02\x02\u1601\u1602\x03\x02\x02\x02\u1602" +
		"\u1600\x03\x02\x02\x02\u1602\u1603\x03\x02\x02\x02\u1603\u1604\x03\x02" +
		"\x02\x02\u1604\u1605\x05\u01CE\xE8\x02\u1605\u0185\x03\x02\x02\x02\u1606" +
		"\u1608\x07\xB7\x02\x02\u1607\u1609\x05\b\x05\x02\u1608\u1607\x03\x02\x02" +
		"\x02\u1609\u160A\x03\x02\x02\x02\u160A\u1608\x03\x02\x02\x02\u160A\u160B" +
		"\x03\x02\x02\x02\u160B\u160E\x03\x02\x02\x02\u160C\u160F\x05\u01CE\xE8" +
		"\x02\u160D\u160F\x05\u018A\xC6\x02\u160E\u160C\x03\x02\x02\x02\u160E\u160D" +
		"\x03\x02\x02\x02\u160F\u0187\x03\x02\x02\x02\u1610\u1612\x07\u0175\x02" +
		"\x02\u1611\u1613\x05\b\x05\x02\u1612\u1611\x03\x02\x02\x02\u1613\u1614" +
		"\x03\x02\x02\x02\u1614\u1612\x03\x02\x02\x02\u1614\u1615\x03\x02\x02\x02" +
		"\u1615\u1616\x03\x02\x02\x02\u1616\u1617\x05\u01CE\xE8\x02\u1617\u0189" +
		"\x03\x02\x02\x02\u1618\u1619\x07\u01B5\x02\x02\u1619\u018B\x03\x02\x02" +
		"\x02\u161A\u161D\x05\u01CE\xE8\x02\u161B\u161D\x07\u01B6\x02\x02\u161C" +
		"\u161A\x03\x02\x02\x02\u161C\u161B\x03\x02\x02\x02\u161D\u018D\x03\x02" +
		"\x02\x02\u161E\u161F\x07\u01B6\x02\x02\u161F\u018F\x03\x02\x02\x02\u1620" +
		"\u1622\x07\x05\x02\x02\u1621\u1623\x05\b\x05\x02\u1622\u1621\x03\x02\x02" +
		"\x02\u1623\u1624\x03\x02\x02\x02\u1624\u1622\x03\x02\x02\x02\u1624\u1625" +
		"\x03\x02\x02\x02\u1625\u1626\x03\x02\x02\x02\u1626\u162A\x07z\x02\x02" +
		"\u1627\u1629\x05\b\x05\x02\u1628\u1627\x03\x02\x02\x02\u1629\u162C\x03" +
		"\x02\x02\x02\u162A\u1628\x03\x02\x02\x02\u162A\u162B\x03\x02\x02\x02\u162B" +
		"\u162D\x03\x02\x02\x02\u162C\u162A\x03\x02\x02\x02\u162D\u1631\x07\u01B2" +
		"\x02\x02\u162E\u1630\x05\b\x05\x02\u162F\u162E\x03\x02\x02\x02\u1630\u1633" +
		"\x03\x02\x02\x02\u1631\u162F\x03\x02\x02\x02\u1631\u1632\x03\x02\x02\x02" +
		"\u1632\u1637\x03\x02\x02\x02\u1633\u1631\x03\x02\x02\x02\u1634\u1636\x05" +
		"\u0192\xCA\x02\u1635\u1634\x03\x02\x02\x02\u1636\u1639\x03\x02\x02\x02" +
		"\u1637\u1635\x03\x02\x02\x02\u1637\u1638\x03\x02\x02\x02\u1638\u0191\x03" +
		"\x02\x02\x02\u1639\u1637\x03\x02\x02\x02\u163A\u1643\x05\u0194\xCB\x02" +
		"\u163B\u1643\x05\u01A0\xD1\x02\u163C\u1643\x05\u01A2\xD2\x02\u163D\u1643" +
		"\x05\u01A4\xD3\x02\u163E\u1643\x05\u01A6\xD4\x02\u163F\u1643\x05\u01A8" +
		"\xD5\x02\u1640\u1643\x05\u01AA\xD6\x02\u1641\u1643\x05\b\x05\x02\u1642" +
		"\u163A\x03\x02\x02\x02\u1642\u163B\x03\x02\x02\x02\u1642\u163C\x03\x02" +
		"\x02\x02\u1642\u163D\x03\x02\x02\x02\u1642\u163E\x03\x02\x02\x02\u1642" +
		"\u163F\x03\x02\x02\x02\u1642\u1640\x03\x02\x02\x02\u1642\u1641\x03\x02" +
		"\x02\x02\u1643\u0193\x03\x02\x02\x02\u1644\u1648\x07\u011F\x02\x02\u1645" +
		"\u1647\x05\b\x05\x02\u1646\u1645\x03\x02\x02\x02\u1647\u164A\x03\x02\x02" +
		"\x02\u1648\u1646\x03\x02\x02\x02\u1648\u1649\x03\x02\x02\x02\u1649\u164B" +
		"\x03\x02\x02\x02\u164A\u1648\x03\x02\x02\x02\u164B\u164F\x07\u01B2\x02" +
		"\x02\u164C\u164E\x05\b\x05\x02\u164D\u164C\x03\x02\x02\x02\u164E\u1651" +
		"\x03\x02\x02\x02\u164F\u164D\x03\x02\x02\x02\u164F\u1650\x03\x02\x02\x02" +
		"\u1650\u1652\x03\x02\x02\x02\u1651\u164F\x03\x02\x02\x02\u1652\u1656\x05" +
		"\u0196\xCC\x02\u1653\u1655\x05\b\x05\x02\u1654\u1653\x03\x02\x02\x02\u1655" +
		"\u1658\x03\x02\x02\x02\u1656\u1654\x03\x02\x02\x02\u1656\u1657\x03\x02" +
		"\x02\x02\u1657\u165A\x03\x02\x02\x02\u1658\u1656\x03\x02\x02\x02\u1659" +
		"\u165B\x05\u0198\xCD\x02\u165A\u1659\x03\x02\x02\x02\u165A\u165B\x03\x02" +
		"\x02\x02\u165B\u165F\x03\x02\x02\x02\u165C\u165E\x05\b\x05\x02\u165D\u165C" +
		"\x03\x02\x02\x02\u165E\u1661\x03\x02\x02\x02\u165F\u165D\x03\x02\x02\x02" +
		"\u165F\u1660\x03\x02\x02\x02\u1660\u1663\x03\x02\x02\x02\u1661\u165F\x03" +
		"\x02\x02\x02\u1662\u1664\x05\u019A\xCE\x02\u1663\u1662\x03\x02\x02\x02" +
		"\u1663\u1664\x03\x02\x02\x02\u1664\u1668\x03\x02\x02\x02\u1665\u1667\x05" +
		"\b\x05\x02\u1666\u1665\x03\x02\x02\x02\u1667\u166A\x03\x02\x02\x02\u1668" +
		"\u1666\x03\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669\u166B\x03\x02" +
		"\x02\x02\u166A\u1668\x03\x02\x02\x02\u166B\u166C\x07\u01B2\x02\x02\u166C" +
		"\u0195\x03\x02\x02\x02\u166D\u166E\x07\u01B8\x02\x02\u166E\u0197\x03\x02" +
		"\x02\x02\u166F\u1671\x07\xD6\x02\x02\u1670\u1672\x05\b\x05\x02\u1671\u1670" +
		"\x03\x02\x02\x02\u1672\u1673\x03\x02\x02\x02\u1673\u1671\x03\x02\x02\x02" +
		"\u1673\u1674\x03\x02\x02\x02\u1674\u1676\x03\x02\x02\x02\u1675\u166F\x03" +
		"\x02\x02\x02\u1675\u1676\x03\x02\x02\x02\u1676\u1677\x03\x02\x02\x02\u1677" +
		"\u167F\t\x19\x02\x02\u1678\u167A\x05\b\x05\x02\u1679\u1678\x03\x02\x02" +
		"\x02\u167A\u167B\x03\x02\x02\x02\u167B\u1679\x03\x02\x02\x02\u167B\u167C" +
		"\x03\x02\x02\x02\u167C\u167D\x03\x02\x02\x02\u167D\u167E\x07\u011E\x02" +
		"\x02\u167E\u1680\x03\x02\x02\x02\u167F\u1679\x03\x02\x02\x02\u167F\u1680" +
		"\x03\x02\x02\x02\u1680\u0199\x03\x02\x02\x02\u1681\u1683\x07\u018B\x02" +
		"\x02\u1682\u1684\x05\b\x05\x02\u1683\u1682\x03\x02\x02\x02\u1684\u1685" +
		"\x03\x02\x02\x02\u1685\u1683\x03\x02\x02\x02\u1685\u1686\x03\x02\x02\x02" +
		"\u1686\u1688\x03\x02\x02\x02\u1687\u1681\x03\x02\x02\x02\u1687\u1688\x03" +
		"\x02\x02\x02\u1688\u1689\x03\x02\x02\x02\u1689\u168B\x07\xC6\x02\x02\u168A" +
		"\u168C\x05\b\x05\x02\u168B\u168A\x03\x02\x02\x02\u168C\u168D\x03\x02\x02" +
		"\x02\u168D\u168B\x03\x02\x02\x02\u168D\u168E\x03\x02\x02\x02\u168E\u168F" +
		"\x03\x02\x02\x02\u168F\u1690\x05\u019C\xCF\x02\u1690\u019B\x03\x02\x02" +
		"\x02\u1691\u1692\x07\u01B5\x02\x02\u1692\u019D\x03\x02\x02\x02\u1693\u1697" +
		"\x07\u01B9\x02\x02\u1694\u1696\n\x02\x02\x02\u1695\u1694\x03\x02\x02\x02" +
		"\u1696\u1699\x03\x02\x02\x02\u1697\u1695\x03\x02\x02\x02\u1697\u1698\x03" +
		"\x02\x02\x02\u1698\u169A\x03\x02\x02\x02\u1699\u1697\x03\x02\x02\x02\u169A" +
		"\u169D\x07\u01BB\x02\x02\u169B\u169D\x05\f\x07\x02\u169C\u1693\x03\x02" +
		"\x02\x02\u169C\u169B\x03\x02\x02\x02\u169D\u019F\x03\x02\x02\x02\u169E" +
		"\u16A2\x07 \x02\x02\u169F\u16A1\x05\b\x05\x02\u16A0\u169F\x03\x02\x02" +
		"\x02\u16A1\u16A4\x03\x02\x02\x02\u16A2\u16A0\x03\x02\x02\x02\u16A2\u16A3" +
		"\x03\x02\x02\x02\u16A3\u16A5\x03\x02\x02\x02\u16A4\u16A2\x03\x02\x02\x02" +
		"\u16A5\u16A9\x07\u01B2\x02\x02\u16A6\u16A8\n\x02\x02\x02\u16A7\u16A6\x03" +
		"\x02\x02\x02\u16A8\u16AB\x03\x02\x02\x02\u16A9\u16A7\x03\x02\x02\x02\u16A9" +
		"\u16AA\x03\x02\x02\x02\u16AA\u16AC\x03\x02\x02\x02\u16AB\u16A9\x03\x02" +
		"\x02\x02\u16AC\u16B0\x07\u01BB\x02\x02\u16AD\u16AF\x05\u019E\xD0\x02\u16AE" +
		"\u16AD\x03\x02\x02\x02\u16AF\u16B2\x03\x02\x02\x02\u16B0\u16AE\x03\x02" +
		"\x02\x02\u16B0\u16B1\x03\x02\x02\x02\u16B1\u01A1\x03\x02\x02\x02\u16B2" +
		"\u16B0\x03\x02\x02\x02\u16B3\u16B7\x07\xD3\x02\x02\u16B4\u16B6\x05\b\x05" +
		"\x02\u16B5\u16B4\x03\x02\x02\x02\u16B6\u16B9\x03\x02\x02\x02\u16B7\u16B5" +
		"\x03\x02\x02\x02\u16B7\u16B8\x03\x02\x02\x02\u16B8\u16BA\x03\x02\x02\x02" +
		"\u16B9\u16B7\x03\x02\x02\x02\u16BA\u16BE\x07\u01B2\x02\x02\u16BB\u16BD" +
		"\n\x02\x02\x02\u16BC\u16BB\x03\x02\x02\x02\u16BD\u16C0\x03\x02\x02\x02" +
		"\u16BE\u16BC\x03\x02\x02\x02\u16BE\u16BF\x03\x02\x02\x02\u16BF\u16C1\x03" +
		"\x02\x02\x02\u16C0\u16BE\x03\x02\x02\x02\u16C1\u16C5\x07\u01BB\x02\x02" +
		"\u16C2\u16C4\x05\u019E\xD0\x02\u16C3\u16C2\x03\x02\x02\x02\u16C4\u16C7" +
		"\x03\x02\x02\x02\u16C5\u16C3\x03\x02\x02\x02\u16C5\u16C6\x03\x02\x02\x02" +
		"\u16C6\u01A3\x03\x02\x02\x02\u16C7\u16C5\x03\x02\x02\x02\u16C8\u16CC\x07" +
		"h\x02\x02\u16C9\u16CB\x05\b\x05\x02\u16CA\u16C9\x03\x02\x02\x02\u16CB" +
		"\u16CE\x03\x02\x02\x02\u16CC\u16CA\x03\x02\x02\x02\u16CC\u16CD\x03\x02" +
		"\x02\x02\u16CD\u16CF\x03\x02\x02\x02\u16CE\u16CC\x03\x02\x02\x02\u16CF" +
		"\u16D3\x07\u01B2\x02\x02\u16D0\u16D2\n\x02\x02\x02\u16D1\u16D0\x03\x02" +
		"\x02\x02\u16D2\u16D5\x03\x02\x02\x02\u16D3\u16D1\x03\x02\x02\x02\u16D3" +
		"\u16D4\x03\x02\x02\x02\u16D4\u16D6\x03\x02\x02\x02\u16D5\u16D3\x03\x02" +
		"\x02\x02\u16D6\u16DA\x07\u01BB\x02\x02\u16D7\u16D9\x05\u019E\xD0\x02\u16D8" +
		"\u16D7\x03\x02\x02\x02\u16D9\u16DC\x03\x02\x02\x02\u16DA\u16D8\x03\x02" +
		"\x02\x02\u16DA\u16DB\x03\x02\x02\x02\u16DB\u01A5\x03\x02\x02\x02\u16DC" +
		"\u16DA\x03\x02\x02\x02\u16DD\u16E1\x07g\x02\x02\u16DE\u16E0\x05\b\x05" +
		"\x02\u16DF\u16DE\x03\x02\x02\x02\u16E0\u16E3\x03\x02\x02\x02\u16E1\u16DF" +
		"\x03\x02\x02\x02\u16E1\u16E2\x03\x02\x02\x02\u16E2\u16E4\x03\x02\x02\x02" +
		"\u16E3\u16E1\x03\x02\x02\x02\u16E4\u16E8\x07\u01B2\x02\x02\u16E5\u16E7" +
		"\n\x02\x02\x02\u16E6\u16E5\x03\x02\x02\x02\u16E7\u16EA\x03\x02\x02\x02" +
		"\u16E8\u16E6\x03\x02\x02\x02\u16E8\u16E9\x03\x02\x02\x02\u16E9\u16EB\x03" +
		"\x02\x02\x02\u16EA\u16E8\x03\x02\x02\x02\u16EB\u16EF\x07\u01BB\x02\x02" +
		"\u16EC\u16EE\x05\u019E\xD0\x02\u16ED\u16EC\x03\x02\x02\x02\u16EE\u16F1" +
		"\x03\x02\x02\x02\u16EF\u16ED\x03\x02\x02\x02\u16EF\u16F0\x03\x02\x02\x02" +
		"\u16F0\u01A7\x03\x02\x02\x02\u16F1\u16EF\x03\x02\x02\x02\u16F2\u16F6\x07" +
		"\u0149\x02\x02\u16F3\u16F5\x05\b\x05\x02\u16F4\u16F3\x03\x02\x02\x02\u16F5" +
		"\u16F8\x03\x02\x02\x02\u16F6\u16F4\x03\x02\x02\x02\u16F6\u16F7\x03\x02" +
		"\x02\x02\u16F7\u16F9\x03\x02\x02\x02\u16F8\u16F6\x03\x02\x02\x02\u16F9" +
		"\u16FD\x07\u01B2\x02\x02\u16FA\u16FC\n\x02\x02\x02\u16FB\u16FA\x03\x02" +
		"\x02\x02\u16FC\u16FF\x03\x02\x02\x02\u16FD\u16FB\x03\x02\x02\x02\u16FD" +
		"\u16FE\x03\x02\x02\x02\u16FE\u1700\x03\x02\x02\x02\u16FF\u16FD\x03\x02" +
		"\x02\x02\u1700\u1704\x07\u01BB\x02\x02\u1701\u1703\x05\u019E\xD0\x02\u1702" +
		"\u1701\x03\x02\x02\x02\u1703\u1706\x03\x02\x02\x02\u1704";
	private static readonly _serializedATNSegment12: string =
		"\u1702\x03\x02\x02\x02\u1704\u1705\x03\x02\x02\x02\u1705\u01A9\x03\x02" +
		"\x02\x02\u1706\u1704\x03\x02\x02\x02\u1707\u170B\x07\u0105\x02\x02\u1708" +
		"\u170A\x05\b\x05\x02\u1709\u1708\x03\x02\x02\x02\u170A\u170D\x03\x02\x02" +
		"\x02\u170B\u1709\x03\x02\x02\x02\u170B\u170C\x03\x02\x02\x02\u170C\u170E" +
		"\x03\x02\x02\x02\u170D\u170B\x03\x02\x02\x02\u170E\u1712\x07\u01B2\x02" +
		"\x02\u170F\u1711\x05\b\x05\x02\u1710\u170F\x03\x02\x02\x02\u1711\u1714" +
		"\x03\x02\x02\x02\u1712\u1710\x03\x02\x02\x02\u1712\u1713\x03\x02\x02\x02" +
		"\u1713\u1716\x03\x02\x02\x02\u1714\u1712\x03\x02\x02\x02\u1715\u1717\x05" +
		"\u01AC\xD7\x02\u1716\u1715\x03\x02\x02\x02\u1716\u1717\x03\x02\x02\x02" +
		"\u1717\u171B\x03\x02\x02\x02\u1718\u171A\x05\b\x05\x02\u1719\u1718\x03" +
		"\x02\x02\x02\u171A\u171D\x03\x02\x02\x02\u171B\u1719\x03\x02\x02\x02\u171B" +
		"\u171C\x03\x02\x02\x02\u171C\u171F\x03\x02\x02\x02\u171D\u171B\x03\x02" +
		"\x02\x02\u171E\u1720\x07\u01B2\x02\x02\u171F\u171E\x03\x02\x02\x02\u171F" +
		"\u1720\x03\x02\x02\x02\u1720\u01AB\x03\x02\x02\x02\u1721\u1723\x07\x1B" +
		"\x02\x02\u1722\u1724\x05\b\x05\x02\u1723\u1722\x03\x02\x02\x02\u1724\u1725" +
		"\x03\x02\x02\x02\u1725\u1723\x03\x02\x02\x02\u1725\u1726\x03\x02\x02\x02" +
		"\u1726\u172D\x03\x02\x02\x02\u1727\u1729\x07\xD6\x02\x02\u1728\u172A\x05" +
		"\b\x05\x02\u1729\u1728\x03\x02\x02\x02\u172A\u172B\x03\x02\x02\x02\u172B" +
		"\u1729\x03\x02\x02\x02\u172B\u172C\x03\x02\x02\x02\u172C\u172E\x03\x02" +
		"\x02\x02\u172D\u1727\x03\x02\x02\x02\u172D\u172E\x03\x02\x02\x02\u172E" +
		"\u172F\x03\x02\x02\x02\u172F\u1733\t\x1A\x02\x02\u1730\u1732\x05\b\x05" +
		"\x02\u1731\u1730\x03\x02\x02\x02\u1732\u1735\x03\x02\x02\x02\u1733\u1731" +
		"\x03\x02\x02\x02\u1733\u1734\x03\x02\x02\x02\u1734\u1736\x03\x02\x02\x02" +
		"\u1735\u1733\x03\x02\x02\x02\u1736\u1737\x07\u01B2\x02\x02\u1737\u01AD" +
		"\x03\x02\x02\x02\u1738\u173A\x07\x97\x02\x02\u1739\u173B\x05\b\x05\x02" +
		"\u173A\u1739\x03\x02\x02\x02\u173B\u173C\x03\x02\x02\x02\u173C\u173A\x03" +
		"\x02\x02\x02\u173C\u173D\x03\x02\x02\x02\u173D\u173E\x03\x02\x02\x02\u173E" +
		"\u1742\x07z\x02\x02\u173F\u1741\x05\b\x05\x02\u1740\u173F\x03\x02\x02" +
		"\x02\u1741\u1744\x03\x02\x02\x02\u1742\u1740\x03\x02\x02\x02\u1742\u1743" +
		"\x03\x02\x02\x02\u1743\u1745\x03\x02\x02\x02\u1744\u1742\x03\x02\x02\x02" +
		"\u1745\u1749\x07\u01B2\x02\x02\u1746\u1748\x05\b\x05\x02\u1747\u1746\x03" +
		"\x02\x02\x02\u1748\u174B\x03\x02\x02\x02\u1749\u1747\x03\x02\x02\x02\u1749" +
		"\u174A\x03\x02\x02\x02\u174A\u174D\x03\x02\x02\x02\u174B\u1749\x03\x02" +
		"\x02\x02\u174C\u174E\x05\u01B0\xD9\x02\u174D\u174C\x03\x02\x02\x02\u174D" +
		"\u174E\x03\x02\x02\x02\u174E\u1750\x03\x02\x02\x02\u174F\u1751\x05\u01B2" +
		"\xDA\x02\u1750\u174F\x03\x02\x02\x02\u1750\u1751\x03\x02\x02\x02\u1751" +
		"\u01AF\x03\x02\x02\x02\u1752\u1754\x07S\x02\x02\u1753\u1755\x05\b\x05" +
		"\x02\u1754\u1753\x03\x02\x02\x02\u1755\u1756\x03\x02\x02\x02\u1756\u1754" +
		"\x03\x02\x02\x02\u1756\u1757\x03\x02\x02\x02\u1757\u1758\x03\x02\x02\x02" +
		"\u1758\u175C\x07\u0147\x02\x02\u1759\u175B\x05\b\x05\x02\u175A\u1759\x03" +
		"\x02\x02\x02\u175B\u175E\x03\x02\x02\x02\u175C\u175A\x03\x02\x02\x02\u175C" +
		"\u175D\x03\x02\x02\x02\u175D\u175F\x03\x02\x02\x02\u175E\u175C\x03\x02" +
		"\x02\x02\u175F\u1763\x07\u01B2\x02\x02\u1760\u1762\x05\b\x05\x02\u1761" +
		"\u1760\x03\x02\x02\x02\u1762\u1765\x03\x02\x02\x02\u1763\u1761\x03\x02" +
		"\x02\x02\u1763\u1764\x03\x02\x02\x02\u1764\u1767\x03\x02\x02\x02\u1765" +
		"\u1763\x03\x02\x02\x02\u1766\u1768\x05\u01B4\xDB\x02\u1767\u1766\x03\x02" +
		"\x02\x02\u1767\u1768\x03\x02\x02\x02\u1768\u176C\x03\x02\x02\x02\u1769" +
		"\u176B\x05\b\x05\x02\u176A\u1769\x03\x02\x02\x02\u176B\u176E\x03\x02\x02" +
		"\x02\u176C\u176A\x03\x02\x02\x02\u176C\u176D\x03\x02\x02\x02\u176D\u1770" +
		"\x03\x02\x02\x02\u176E\u176C\x03\x02\x02\x02\u176F\u1771\x05\u01BA\xDE" +
		"\x02\u1770\u176F\x03\x02\x02\x02\u1770\u1771\x03\x02\x02\x02\u1771\u1775" +
		"\x03\x02\x02\x02\u1772\u1774\x05\b\x05\x02\u1773\u1772\x03\x02\x02\x02" +
		"\u1774\u1777\x03\x02\x02\x02\u1775\u1773\x03\x02\x02\x02\u1775\u1776\x03" +
		"\x02\x02\x02\u1776\u1779\x03\x02\x02\x02\u1777\u1775\x03\x02\x02\x02\u1778" +
		"\u177A\x05\u01CA\xE6\x02\u1779\u1778\x03\x02\x02\x02\u1779\u177A\x03\x02" +
		"\x02\x02\u177A\u177E\x03\x02\x02\x02\u177B\u177D\x05\b\x05\x02\u177C\u177B" +
		"\x03\x02\x02\x02\u177D\u1780\x03\x02\x02\x02\u177E\u177C\x03\x02\x02\x02" +
		"\u177E\u177F\x03\x02\x02\x02\u177F\u01B1\x03\x02\x02\x02\u1780\u177E\x03" +
		"\x02\x02\x02\u1781\u1783\x07\xD1\x02\x02\u1782\u1784\x05\b\x05\x02\u1783" +
		"\u1782\x03\x02\x02\x02\u1784\u1785\x03\x02\x02\x02\u1785\u1783\x03\x02" +
		"\x02\x02\u1785\u1786\x03\x02\x02\x02\u1786\u1787\x03\x02\x02\x02\u1787" +
		"\u178B\x07\u0147\x02\x02\u1788\u178A\x05\b\x05\x02\u1789\u1788\x03\x02" +
		"\x02\x02\u178A\u178D\x03\x02\x02\x02\u178B\u1789\x03\x02\x02\x02\u178B" +
		"\u178C\x03\x02\x02\x02\u178C\u178E\x03\x02\x02\x02\u178D\u178B\x03\x02" +
		"\x02\x02\u178E\u1792\x07\u01B2\x02\x02\u178F\u1791\x05\b\x05\x02\u1790" +
		"\u178F\x03\x02\x02\x02\u1791\u1794\x03\x02\x02\x02\u1792\u1790\x03\x02" +
		"\x02\x02\u1792\u1793\x03\x02\x02\x02\u1793\u1796\x03\x02\x02\x02\u1794" +
		"\u1792\x03\x02\x02\x02\u1795\u1797\x05\u020C\u0107\x02\u1796\u1795\x03" +
		"\x02\x02\x02\u1796\u1797\x03\x02\x02\x02\u1797\u1799\x03\x02\x02\x02\u1798" +
		"\u179A\x05\u023A\u011E\x02\u1799\u1798\x03\x02\x02\x02\u1799\u179A\x03" +
		"\x02\x02\x02\u179A\u01B3\x03\x02\x02\x02\u179B\u179F\x07\u0156\x02\x02" +
		"\u179C\u179E\x05\b\x05\x02\u179D\u179C\x03\x02\x02\x02\u179E\u17A1\x03" +
		"\x02\x02\x02\u179F\u179D\x03\x02\x02\x02\u179F\u17A0\x03\x02\x02\x02\u17A0" +
		"\u17A2\x03\x02\x02\x02\u17A1\u179F\x03\x02\x02\x02\u17A2\u17A6\x07\u01B2" +
		"\x02\x02\u17A3\u17A5\x05\b\x05\x02\u17A4\u17A3\x03\x02\x02\x02\u17A5\u17A8" +
		"\x03\x02\x02\x02\u17A6\u17A4\x03\x02\x02\x02\u17A6\u17A7\x03\x02\x02\x02" +
		"\u17A7\u17BB\x03\x02\x02\x02\u17A8\u17A6\x03\x02\x02\x02\u17A9\u17B1\x05" +
		"\u01B6\xDC\x02\u17AA\u17AC\x05\b\x05\x02\u17AB\u17AA\x03\x02\x02\x02\u17AC" +
		"\u17AD\x03\x02\x02\x02\u17AD\u17AB\x03\x02\x02\x02\u17AD\u17AE\x03\x02" +
		"\x02\x02\u17AE\u17AF\x03\x02\x02\x02\u17AF\u17B0\x05\u01B8\xDD\x02\u17B0" +
		"\u17B2\x03\x02\x02\x02\u17B1\u17AB\x03\x02\x02\x02\u17B1\u17B2\x03\x02" +
		"\x02\x02\u17B2\u17B6\x03\x02\x02\x02\u17B3\u17B5\x05\b\x05\x02\u17B4\u17B3" +
		"\x03\x02\x02\x02\u17B5\u17B8\x03\x02\x02\x02\u17B6\u17B4\x03\x02\x02\x02" +
		"\u17B6\u17B7\x03\x02\x02\x02\u17B7\u17B9\x03\x02\x02\x02\u17B8\u17B6\x03" +
		"\x02\x02\x02\u17B9\u17BA\x07\u01B2\x02\x02\u17BA\u17BC\x03\x02\x02\x02" +
		"\u17BB\u17A9\x03\x02\x02\x02\u17BB\u17BC\x03\x02\x02\x02\u17BC\u01B5\x03" +
		"\x02\x02\x02\u17BD\u17BE\t\x1B\x02\x02\u17BE\u01B7\x03\x02\x02\x02\u17BF" +
		"\u17C1\x07\u018B\x02\x02\u17C0\u17C2\x05\b\x05\x02\u17C1\u17C0\x03\x02" +
		"\x02\x02\u17C2\u17C3\x03\x02\x02\x02\u17C3\u17C1\x03\x02\x02\x02\u17C3" +
		"\u17C4\x03\x02\x02\x02\u17C4\u17C6\x03\x02\x02\x02\u17C5\u17BF\x03\x02" +
		"\x02\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u17C7\x03\x02\x02\x02\u17C7" +
		"\u17C9\x07l\x02\x02\u17C8\u17CA\x05\b\x05\x02\u17C9\u17C8\x03\x02\x02" +
		"\x02\u17CA\u17CB\x03\x02\x02\x02\u17CB\u17C9\x03\x02\x02\x02\u17CB\u17CC" +
		"\x03\x02\x02\x02\u17CC\u17CD\x03\x02\x02\x02\u17CD\u17CE\x07\xF1\x02\x02" +
		"\u17CE\u01B9\x03\x02\x02\x02\u17CF\u17D3\x07\xFD\x02\x02\u17D0\u17D2\x05" +
		"\b\x05\x02\u17D1\u17D0\x03\x02\x02\x02\u17D2\u17D5\x03\x02\x02\x02\u17D3" +
		"\u17D1\x03\x02\x02\x02\u17D3\u17D4\x03\x02\x02\x02\u17D4\u17D6\x03\x02" +
		"\x02\x02\u17D5\u17D3\x03\x02\x02\x02\u17D6\u17DA\x07\u01B2\x02\x02\u17D7" +
		"\u17D9\x05\b\x05\x02\u17D8\u17D7\x03\x02\x02\x02\u17D9\u17DC\x03\x02\x02" +
		"\x02\u17DA\u17D8\x03\x02\x02\x02\u17DA\u17DB\x03\x02\x02\x02\u17DB\u1801" +
		"\x03\x02\x02\x02\u17DC\u17DA\x03\x02\x02\x02\u17DD\u17E5\x05\u01B6\xDC" +
		"\x02\u17DE\u17E0\x05\b\x05\x02\u17DF\u17DE\x03\x02\x02\x02\u17E0\u17E1" +
		"\x03\x02\x02\x02\u17E1\u17DF\x03\x02\x02\x02\u17E1\u17E2\x03\x02\x02\x02" +
		"\u17E2\u17E3\x03\x02\x02\x02\u17E3\u17E4\x05\u01BC\xDF\x02\u17E4\u17E6" +
		"\x03\x02\x02\x02\u17E5\u17DF\x03\x02\x02\x02\u17E5\u17E6\x03\x02\x02\x02" +
		"\u17E6\u17EE\x03\x02\x02\x02\u17E7\u17E9\x05\b\x05\x02\u17E8\u17E7\x03" +
		"\x02\x02\x02\u17E9\u17EA\x03\x02\x02\x02\u17EA\u17E8\x03\x02\x02\x02\u17EA" +
		"\u17EB\x03\x02\x02\x02\u17EB\u17EC\x03\x02\x02\x02\u17EC\u17ED\x05\u01C2" +
		"\xE2\x02\u17ED\u17EF\x03\x02\x02\x02\u17EE\u17E8\x03\x02\x02\x02\u17EE" +
		"\u17EF\x03\x02\x02\x02\u17EF\u17F7\x03\x02\x02\x02\u17F0\u17F2\x05\b\x05" +
		"\x02\u17F1\u17F0\x03\x02\x02\x02\u17F2\u17F3\x03\x02\x02\x02\u17F3\u17F1" +
		"\x03\x02\x02\x02\u17F3\u17F4\x03\x02\x02\x02\u17F4\u17F5\x03\x02\x02\x02" +
		"\u17F5\u17F6\x05\u01C6\xE4\x02\u17F6\u17F8\x03\x02\x02\x02\u17F7\u17F1" +
		"\x03\x02\x02\x02\u17F7\u17F8\x03\x02\x02\x02\u17F8\u17FC\x03\x02\x02\x02" +
		"\u17F9\u17FB\x05\b\x05\x02\u17FA\u17F9\x03\x02\x02\x02\u17FB\u17FE\x03" +
		"\x02\x02\x02\u17FC\u17FA\x03\x02\x02\x02\u17FC\u17FD\x03\x02\x02\x02\u17FD" +
		"\u17FF\x03\x02\x02\x02\u17FE\u17FC\x03\x02\x02\x02\u17FF\u1800\x07\u01B2" +
		"\x02\x02\u1800\u1802\x03\x02\x02\x02\u1801\u17DD\x03\x02\x02\x02\u1801" +
		"\u1802\x03\x02\x02\x02\u1802\u01BB\x03\x02\x02\x02\u1803\u180B\x07\xEF" +
		"\x02\x02\u1804\u1806\x05\b\x05\x02\u1805\u1804\x03\x02\x02\x02\u1806\u1807" +
		"\x03\x02\x02\x02\u1807\u1805\x03\x02\x02\x02\u1807\u1808\x03\x02\x02\x02" +
		"\u1808\u1809\x03\x02\x02\x02\u1809\u180A\x07\u0152\x02\x02\u180A\u180C" +
		"\x03\x02\x02\x02\u180B\u1805\x03\x02\x02\x02\u180B\u180C\x03\x02\x02\x02" +
		"\u180C\u180E\x03\x02\x02\x02\u180D\u180F\x05\b\x05\x02\u180E\u180D\x03" +
		"\x02\x02\x02\u180F\u1810\x03\x02\x02\x02\u1810\u180E\x03\x02\x02\x02\u1810" +
		"\u1811\x03\x02\x02\x02\u1811\u1812\x03\x02\x02\x02\u1812\u1814\x05\u01BE" +
		"\xE0\x02\u1813\u1815\x05\b\x05\x02\u1814\u1813\x03\x02\x02\x02\u1815\u1816" +
		"\x03\x02\x02\x02\u1816\u1814\x03\x02\x02\x02\u1816\u1817\x03\x02\x02\x02" +
		"\u1817\u1818\x03\x02\x02\x02\u1818\u1819\x05\u01C0\xE1\x02\u1819\u01BD" +
		"\x03\x02\x02\x02\u181A\u181B\x07\u01B6\x02\x02\u181B\u01BF\x03\x02\x02" +
		"\x02\u181C\u181D\t\x1C\x02\x02\u181D\u01C1\x03\x02\x02\x02\u181E\u1820" +
		"\x07\u011E\x02\x02\u181F\u1821\x05\b\x05\x02\u1820\u181F\x03\x02\x02\x02" +
		"\u1821\u1822\x03\x02\x02\x02\u1822\u1820\x03\x02\x02\x02\u1822\u1823\x03" +
		"\x02\x02\x02\u1823\u1825\x03\x02\x02\x02\u1824\u181E\x03\x02\x02\x02\u1824" +
		"\u1825\x03\x02\x02\x02\u1825\u182C\x03\x02\x02\x02\u1826\u1828\x07@\x02" +
		"\x02\u1827\u1829\x05\b\x05\x02\u1828\u1827\x03\x02\x02\x02\u1829\u182A" +
		"\x03\x02\x02\x02\u182A\u1828\x03\x02\x02\x02\u182A\u182B\x03\x02\x02\x02" +
		"\u182B\u182D\x03\x02\x02\x02\u182C\u1826\x03\x02\x02\x02\u182C\u182D\x03" +
		"\x02\x02\x02\u182D\u182E\x03\x02\x02\x02\u182E\u1836\x07\u014D\x02\x02" +
		"\u182F\u1831\x05\b\x05\x02\u1830\u182F\x03\x02\x02\x02\u1831\u1832\x03" +
		"\x02\x02\x02\u1832\u1830\x03\x02\x02\x02\u1832\u1833\x03\x02\x02\x02\u1833" +
		"\u1834\x03\x02\x02\x02\u1834\u1835\x07\xD6\x02\x02\u1835\u1837\x03\x02" +
		"\x02\x02\u1836\u1830\x03\x02\x02\x02\u1836\u1837\x03\x02\x02\x02\u1837" +
		"\u1839\x03\x02\x02\x02\u1838\u183A\x05\b\x05\x02\u1839\u1838\x03\x02\x02" +
		"\x02\u183A\u183B\x03\x02\x02\x02\u183B\u1839\x03\x02\x02\x02\u183B\u183C" +
		"\x03\x02\x02\x02\u183C\u183D\x03\x02\x02\x02\u183D\u183E\x05\u01C4\xE3" +
		"\x02\u183E\u01C3\x03\x02\x02\x02\u183F\u1840\x07\u01B8\x02\x02\u1840\u01C5" +
		"\x03\x02\x02\x02\u1841\u1849\x07\u014A\x02\x02\u1842\u1844\x05\b\x05\x02" +
		"\u1843\u1842\x03\x02\x02\x02\u1844\u1845\x03\x02\x02\x02\u1845\u1843\x03" +
		"\x02\x02\x02\u1845\u1846\x03\x02\x02\x02\u1846\u1847\x03\x02\x02\x02\u1847" +
		"\u1848\x07\xD6\x02\x02\u1848\u184A\x03\x02\x02\x02\u1849\u1843\x03\x02" +
		"\x02\x02\u1849\u184A\x03\x02\x02\x02\u184A\u184B\x03\x02\x02\x02\u184B" +
		"\u184C\x05\u01C8\xE5\x02\u184C\u01C7\x03\x02\x02\x02\u184D\u184E\x07\u01B6" +
		"\x02\x02\u184E\u01C9\x03\x02\x02\x02\u184F\u1853\x07\u0159\x02\x02\u1850" +
		"\u1852\x05\b\x05\x02\u1851\u1850\x03\x02\x02\x02\u1852\u1855\x03\x02\x02" +
		"\x02\u1853\u1851\x03\x02\x02\x02\u1853\u1854\x03\x02\x02\x02\u1854\u1856" +
		"\x03\x02\x02\x02\u1855\u1853\x03\x02\x02\x02\u1856\u185A\x07\u01B2\x02" +
		"\x02\u1857\u1859\x05\b\x05\x02\u1858\u1857\x03\x02\x02\x02\u1859\u185C" +
		"\x03\x02\x02\x02\u185A\u1858\x03\x02\x02\x02\u185A\u185B\x03\x02\x02\x02" +
		"\u185B\u186A\x03\x02\x02\x02\u185C\u185A\x03\x02\x02\x02\u185D\u1861\x05" +
		"\u01CC\xE7\x02\u185E\u1860\x05\b\x05\x02\u185F\u185E\x03\x02\x02\x02\u1860" +
		"\u1863\x03\x02\x02\x02\u1861\u185F\x03\x02\x02\x02\u1861\u1862\x03\x02" +
		"\x02\x02\u1862\u1865\x03\x02\x02\x02\u1863\u1861\x03\x02\x02\x02\u1864" +
		"\u185D\x03\x02\x02\x02\u1865\u1866\x03\x02\x02\x02\u1866\u1864\x03\x02" +
		"\x02\x02\u1866\u1867\x03\x02\x02\x02\u1867\u1868\x03\x02\x02\x02\u1868" +
		"\u1869\x07\u01B2\x02\x02\u1869\u186B\x03\x02\x02\x02\u186A\u1864\x03\x02" +
		"\x02\x02\u186A\u186B\x03\x02\x02\x02\u186B\u01CB\x03\x02\x02\x02\u186C" +
		"\u186E\x05\u0204\u0103\x02\u186D\u186F\x05\b\x05\x02\u186E\u186D\x03\x02" +
		"\x02\x02\u186F\u1870\x03\x02\x02\x02\u1870\u186E\x03\x02\x02\x02\u1870" +
		"\u1871\x03\x02\x02\x02\u1871\u1878\x03\x02\x02\x02\u1872\u1874\x07\xD6" +
		"\x02\x02\u1873\u1875\x05\b\x05\x02\u1874\u1873\x03\x02\x02\x02\u1875\u1876" +
		"\x03\x02\x02\x02\u1876\u1874\x03\x02\x02\x02\u1876\u1877\x03\x02\x02\x02" +
		"\u1877\u1879\x03\x02\x02\x02\u1878\u1872\x03\x02\x02\x02\u1878\u1879\x03" +
		"\x02\x02\x02\u1879\u187A\x03\x02\x02\x02\u187A\u187B\x05\u0206\u0104\x02" +
		"\u187B\u18D8\x03\x02\x02\x02\u187C\u187E\x05\u0208\u0105\x02\u187D\u187F" +
		"\x05\b\x05\x02\u187E\u187D\x03\x02\x02\x02\u187F\u1880\x03\x02\x02\x02" +
		"\u1880\u187E\x03\x02\x02\x02\u1880\u1881\x03\x02\x02\x02\u1881\u1888\x03" +
		"\x02\x02\x02\u1882\u1884\x07\xD6\x02\x02\u1883\u1885\x05\b\x05\x02\u1884" +
		"\u1883\x03\x02\x02\x02\u1885\u1886\x03\x02\x02\x02\u1886\u1884\x03\x02" +
		"\x02\x02\u1886\u1887\x03\x02\x02\x02\u1887\u1889\x03\x02\x02\x02\u1888" +
		"\u1882\x03\x02\x02\x02\u1888\u1889\x03\x02\x02\x02\u1889\u188A\x03\x02" +
		"\x02\x02\u188A\u188B\x05\u020A\u0106\x02\u188B\u18D8\x03\x02\x02\x02\u188C" +
		"\u188E\x073\x02\x02\u188D\u188F\x05\b\x05\x02\u188E\u188D\x03\x02\x02" +
		"\x02\u188F\u1890\x03\x02\x02\x02\u1890\u188E\x03\x02\x02\x02\u1890\u1891" +
		"\x03\x02\x02\x02\u1891\u1898\x03\x02\x02\x02\u1892\u1894\x07\xD6\x02\x02" +
		"\u1893\u1895\x05\b\x05\x02\u1894\u1893\x03\x02\x02\x02\u1895\u1896\x03" +
		"\x02\x02\x02\u1896\u1894\x03\x02\x02\x02\u1896\u1897\x03\x02\x02\x02\u1897" +
		"\u1899\x03\x02\x02\x02\u1898\u1892\x03\x02\x02\x02\u1898\u1899\x03\x02" +
		"\x02\x02\u1899\u189A\x03\x02\x02\x02\u189A\u189B\x05\u0202\u0102\x02\u189B" +
		"\u18D8\x03\x02\x02\x02\u189C\u18D8\x05\u01F6\xFC\x02\u189D\u18D8\x05\u01EA" +
		"\xF6\x02\u189E\u18D8\x05\u01DE\xF0\x02\u189F\u18D8\x05\u01D8\xED\x02\u18A0" +
		"\u18D8\x05\u01D0\xE9\x02\u18A1\u18A3\x07m\x02\x02\u18A2\u18A4\x05\b\x05" +
		"\x02\u18A3\u18A2\x03\x02\x02\x02\u18A4\u18A5\x03\x02\x02\x02\u18A5\u18A3" +
		"\x03\x02\x02\x02\u18A5\u18A6\x03\x02\x02\x02\u18A6\u18AD\x03\x02\x02\x02" +
		"\u18A7\u18A9\x07\xD6\x02\x02\u18A8\u18AA\x05\b\x05\x02\u18A9\u18A8\x03" +
		"\x02\x02\x02\u18AA\u18AB\x03\x02\x02\x02\u18AB\u18A9\x03\x02\x02\x02\u18AB" +
		"\u18AC\x03\x02\x02\x02\u18AC\u18AE\x03\x02\x02\x02\u18AD\u18A7\x03\x02" +
		"\x02\x02\u18AD\u18AE\x03\x02\x02\x02\u18AE\u18AF\x03\x02\x02\x02\u18AF" +
		"\u18B0\x07B\x02\x02\u18B0\u18D8\x03\x02\x02\x02\u18B1\u18B3\x07d\x02\x02" +
		"\u18B2\u18B4\x05\b\x05\x02\u18B3\u18B2\x03\x02\x02\x02\u18B4\u18B5\x03" +
		"\x02\x02\x02\u18B5\u18B3\x03\x02\x02\x02\u18B5\u18B6\x03\x02\x02\x02\u18B6" +
		"\u18BD\x03\x02\x02\x02\u18B7\u18B9\x07\xD6\x02\x02\u18B8\u18BA\x05\b\x05" +
		"\x02\u18B9\u18B8\x03\x02\x02\x02\u18BA\u18BB\x03\x02\x02\x02\u18BB\u18B9" +
		"\x03\x02\x02\x02\u18BB\u18BC\x03\x02\x02\x02\u18BC\u18BE\x03\x02\x02\x02" +
		"\u18BD\u18B7\x03\x02\x02\x02\u18BD\u18BE\x03\x02\x02\x02\u18BE\u18BF\x03" +
		"\x02\x02\x02\u18BF\u18C0\x05\u01CE\xE8\x02\u18C0\u18D8\x03\x02\x02\x02" +
		"\u18C1\u18C3\x07a\x02\x02\u18C2\u18C4\x05\b\x05\x02\u18C3\u18C2\x03\x02" +
		"\x02\x02\u18C4\u18C5\x03\x02\x02\x02\u18C5\u18C3\x03\x02\x02\x02\u18C5" +
		"\u18C6\x03\x02\x02\x02\u18C6\u18C7\x03\x02\x02\x02\u18C7\u18C9\x07\u015E" +
		"\x02\x02\u18C8\u18CA\x05\b\x05\x02\u18C9\u18C8\x03\x02\x02\x02\u18CA\u18CB" +
		"\x03\x02\x02\x02\u18CB\u18C9\x03\x02\x02\x02\u18CB\u18CC\x03\x02\x02\x02" +
		"\u18CC\u18D3\x03\x02\x02\x02\u18CD\u18CF\x07\xD6\x02\x02\u18CE\u18D0\x05" +
		"\b\x05\x02\u18CF\u18CE\x03\x02\x02\x02\u18D0\u18D1\x03\x02\x02\x02\u18D1" +
		"\u18CF\x03\x02\x02\x02\u18D1\u18D2\x03\x02\x02\x02\u18D2\u18D4\x03\x02" +
		"\x02\x02\u18D3\u18CD\x03\x02\x02\x02\u18D3\u18D4\x03\x02\x02\x02\u18D4" +
		"\u18D5\x03\x02\x02\x02\u18D5\u18D6\x05\u01CE\xE8\x02\u18D6\u18D8\x03\x02" +
		"\x02\x02\u18D7\u186C\x03\x02\x02\x02\u18D7\u187C\x03\x02\x02\x02\u18D7" +
		"\u188C\x03\x02\x02\x02\u18D7\u189C\x03\x02\x02\x02\u18D7\u189D\x03\x02" +
		"\x02\x02\u18D7\u189E\x03\x02\x02\x02\u18D7\u189F\x03\x02\x02\x02\u18D7" +
		"\u18A0\x03\x02\x02\x02\u18D7\u18A1\x03\x02\x02\x02\u18D7\u18B1\x03\x02" +
		"\x02\x02\u18D7\u18C1\x03\x02\x02\x02\u18D8\u01CD\x03\x02\x02\x02\u18D9" +
		"\u18E9\x07\u01B8\x02\x02\u18DA\u18DC\x05\b\x05\x02\u18DB\u18DA\x03\x02" +
		"\x02\x02\u18DC\u18DD\x03\x02\x02\x02\u18DD\u18DB\x03\x02\x02\x02\u18DD" +
		"\u18DE\x03\x02\x02\x02\u18DE\u18DF\x03\x02\x02\x02\u18DF\u18E1\t\x1D\x02" +
		"\x02\u18E0\u18E2\x05\b\x05\x02\u18E1\u18E0\x03\x02\x02\x02\u18E2\u18E3" +
		"\x03\x02\x02\x02\u18E3\u18E1\x03\x02\x02\x02\u18E3\u18E4\x03\x02\x02\x02" +
		"\u18E4\u18E5\x03\x02\x02\x02\u18E5\u18E6\x07\u01B8\x02\x02\u18E6\u18E8" +
		"\x03\x02\x02\x02\u18E7\u18DB\x03\x02\x02\x02\u18E8\u18EB\x03\x02\x02\x02" +
		"\u18E9\u18E7\x03\x02\x02\x02\u18E9\u18EA\x03\x02\x02\x02\u18EA\u01CF\x03" +
		"\x02\x02\x02\u18EB\u18E9\x03\x02\x02\x02\u18EC\u18EE\x07b\x02\x02\u18ED" +
		"\u18EF\x05\b\x05\x02\u18EE\u18ED\x03\x02\x02\x02\u18EF\u18F0\x03\x02\x02" +
		"\x02\u18F0\u18EE\x03\x02\x02\x02\u18F0\u18F1\x03\x02\x02\x02\u18F1\u18F8" +
		"\x03\x02\x02\x02\u18F2\u18F4\x07\u0150\x02\x02\u18F3\u18F5\x05\b\x05\x02" +
		"\u18F4\u18F3\x03\x02\x02\x02\u18F5\u18F6\x03\x02\x02\x02\u18F6\u18F4\x03" +
		"\x02\x02\x02\u18F6\u18F7\x03\x02\x02\x02\u18F7\u18F9\x03\x02\x02\x02\u18F8" +
		"\u18F2\x03\x02\x02\x02\u18F8\u18F9\x03\x02\x02\x02\u18F9\u1900\x03\x02" +
		"\x02\x02\u18FA\u18FC\x07\xD6\x02\x02\u18FB\u18FD\x05\b\x05\x02\u18FC\u18FB" +
		"\x03\x02\x02\x02\u18FD\u18FE\x03\x02\x02\x02\u18FE\u18FC\x03\x02\x02\x02" +
		"\u18FE\u18FF\x03\x02\x02\x02\u18FF\u1901\x03\x02\x02\x02\u1900\u18FA\x03" +
		"\x02\x02\x02\u1900\u1901\x03\x02\x02\x02\u1901\u1902\x03\x02\x02\x02\u1902" +
		"\u1903\x05\u01D2\xEA\x02\u1903\u01D1\x03\x02\x02\x02\u1904\u190B\x05\u01D4" +
		"\xEB\x02\u1905\u1907\x07\u018B\x02\x02\u1906\u1908\x05\b\x05\x02\u1907" +
		"\u1906\x03\x02\x02\x02\u1908\u1909\x03\x02\x02\x02\u1909\u1907\x03\x02" +
		"\x02\x02\u1909\u190A\x03\x02\x02\x02\u190A\u190C\x03\x02\x02\x02\u190B" +
		"\u1905\x03\x02\x02\x02\u190B\u190C\x03\x02\x02\x02\u190C\u190D\x03\x02" +
		"\x02\x02\u190D\u190F\x07\u0113\x02\x02\u190E\u1910\x05\b\x05\x02\u190F" +
		"\u190E\x03\x02\x02\x02\u1910\u1911\x03\x02\x02\x02\u1911\u190F\x03\x02" +
		"\x02\x02\u1911\u1912\x03\x02\x02\x02\u1912\u1913\x03\x02\x02\x02\u1913" +
		"\u1915\x07\u0166\x02\x02\u1914\u1916\x05\b\x05\x02\u1915\u1914\x03\x02" +
		"\x02\x02\u1916\u1917\x03\x02\x02\x02\u1917\u1915\x03\x02\x02\x02\u1917" +
		"\u1918\x03\x02\x02\x02\u1918\u1919\x03\x02\x02\x02\u1919\u191A\x05\u01D6" +
		"\xEC\x02\u191A\u191D\x03\x02\x02\x02\u191B\u191D\x07\u01B5\x02\x02\u191C" +
		"\u1904\x03\x02\x02\x02\u191C\u191B\x03\x02\x02\x02\u191D\u01D3\x03\x02" +
		"\x02\x02\u191E\u191F\x07\u01B5\x02\x02\u191F\u01D5\x03\x02\x02\x02\u1920" +
		"\u1921\x07\u01B5\x02\x02\u1921\u01D7\x03\x02\x02\x02\u1922\u1924\x07;" +
		"\x02\x02\u1923\u1925\x05\b\x05\x02\u1924\u1923\x03\x02\x02\x02\u1925\u1926" +
		"\x03\x02\x02\x02\u1926\u1924\x03\x02\x02\x02\u1926\u1927\x03\x02\x02\x02" +
		"\u1927\u1928\x03\x02\x02\x02\u1928\u192A\x05\u01DA\xEE\x02\u1929\u192B" +
		"\x05\b\x05\x02\u192A\u1929\x03\x02\x02\x02\u192B\u192C\x03\x02\x02\x02" +
		"\u192C\u192A\x03\x02\x02\x02\u192C\u192D\x03\x02\x02\x02\u192D\u1934\x03" +
		"\x02\x02\x02\u192E\u1930\x07\xD6\x02\x02\u192F\u1931\x05\b\x05\x02\u1930" +
		"\u192F\x03\x02\x02\x02\u1931\u1932\x03\x02\x02\x02\u1932\u1930\x03\x02" +
		"\x02\x02\u1932\u1933\x03\x02\x02\x02\u1933\u1935\x03\x02\x02\x02\u1934" +
		"\u192E\x03\x02\x02\x02\u1934\u1935\x03\x02\x02\x02\u1935\u193D\x03\x02" +
		"\x02\x02\u1936\u193A\x05\u01DC\xEF\x02\u1937\u1939\x05\b\x05\x02\u1938" +
		"\u1937\x03\x02\x02\x02\u1939\u193C\x03\x02\x02\x02\u193A\u1938\x03\x02" +
		"\x02\x02\u193A\u193B\x03\x02\x02\x02\u193B\u193E\x03\x02\x02\x02\u193C" +
		"\u193A\x03\x02\x02\x02\u193D\u1936\x03\x02\x02\x02\u193E\u193F\x03\x02" +
		"\x02\x02\u193F\u193D\x03\x02\x02\x02\u193F\u1940\x03\x02\x02\x02\u1940" +
		"\u01D9\x03\x02\x02\x02\u1941\u1942\x07\u01B8\x02\x02\u1942\u01DB\x03\x02" +
		"\x02\x02\u1943\u1951\x05\u01F0\xF9\x02\u1944\u1946\x05\b\x05\x02\u1945" +
		"\u1944\x03\x02\x02\x02\u1946\u1947\x03\x02\x02\x02\u1947\u1945\x03\x02" +
		"\x02\x02\u1947\u1948\x03\x02\x02\x02\u1948\u1949\x03\x02\x02\x02\u1949" +
		"\u194B\t\x06\x02\x02\u194A\u194C\x05\b\x05\x02\u194B\u194A\x03\x02\x02" +
		"\x02\u194C\u194D\x03\x02\x02\x02\u194D\u194B\x03\x02\x02\x02\u194D\u194E" +
		"\x03\x02\x02\x02\u194E\u194F\x03\x02\x02\x02\u194F\u1950\x05\u01F2\xFA" +
		"\x02\u1950\u1952\x03\x02\x02\x02\u1951\u1945\x03\x02\x02\x02\u1951\u1952" +
		"\x03\x02\x02\x02\u1952\u01DD\x03\x02\x02\x02\u1953\u1955\x07\u0167\x02" +
		"\x02\u1954\u1956\x05\b\x05\x02\u1955\u1954\x03\x02\x02\x02\u1956\u1957" +
		"\x03\x02\x02\x02\u1957\u1955\x03\x02\x02\x02\u1957\u1958\x03\x02\x02\x02" +
		"\u1958\u195F\x03\x02\x02\x02\u1959\u195B\x07:\x02\x02\u195A\u195C\x05" +
		"\b\x05\x02\u195B\u195A\x03\x02\x02\x02\u195C\u195D\x03\x02\x02\x02\u195D" +
		"\u195B\x03\x02\x02\x02\u195D\u195E\x03\x02\x02\x02\u195E\u1960\x03\x02" +
		"\x02\x02\u195F\u1959\x03\x02\x02\x02\u195F\u1960\x03\x02\x02\x02\u1960" +
		"\u1962\x03\x02\x02\x02\u1961\u1963\x05\u01E0\xF1\x02\u1962\u1961\x03\x02" +
		"\x02\x02\u1963\u1964\x03\x02\x02\x02\u1964\u1962\x03\x02\x02\x02\u1964" +
		"\u1965\x03\x02\x02\x02\u1965\u01DF\x03\x02\x02\x02\u1966\u1968\x05\u01E2" +
		"\xF2\x02\u1967\u1966\x03\x02\x02\x02\u1968\u1969\x03\x02\x02\x02\u1969" +
		"\u1967\x03\x02\x02\x02\u1969\u196A\x03\x02\x02\x02\u196A\u196C\x03\x02" +
		"\x02\x02\u196B\u196D\x05\u01E4\xF3\x02\u196C\u196B\x03\x02\x02\x02\u196C" +
		"\u196D\x03\x02\x02\x02\u196D\u01E1\x03\x02\x02\x02\u196E\u1970\x05\u01E6" +
		"\xF4\x02\u196F\u1971\x05\b\x05\x02\u1970\u196F\x03\x02\x02\x02\u1971\u1972" +
		"\x03\x02\x02\x02\u1972\u1970\x03\x02\x02\x02\u1972\u1973\x03\x02\x02\x02" +
		"\u1973\u1975\x03\x02\x02\x02\u1974\u196E\x03\x02\x02\x02\u1975\u1976\x03" +
		"\x02\x02\x02\u1976\u1974\x03\x02\x02\x02\u1976\u1977\x03\x02\x02\x02\u1977" +
		"\u197E\x03\x02\x02\x02\u1978\u197A\t\x1E\x02\x02\u1979\u197B\x05\b\x05" +
		"\x02\u197A\u1979\x03\x02\x02\x02\u197B\u197C\x03\x02\x02\x02\u197C\u197A" +
		"\x03\x02\x02\x02\u197C\u197D\x03\x02\x02\x02\u197D\u197F\x03\x02\x02\x02" +
		"\u197E\u1978\x03\x02\x02\x02\u197E\u197F\x03\x02\x02\x02\u197F\u1986\x03" +
		"\x02\x02\x02\u1980\u1982\x05\u01E8\xF5\x02\u1981\u1983\x05\b\x05\x02\u1982" +
		"\u1981\x03\x02\x02\x02\u1983\u1984\x03\x02\x02\x02\u1984\u1982\x03\x02" +
		"\x02\x02\u1984\u1985\x03\x02\x02\x02\u1985\u1987\x03\x02\x02\x02\u1986" +
		"\u1980\x03\x02\x02\x02\u1987\u1988\x03\x02\x02\x02\u1988\u1986\x03\x02" +
		"\x02\x02\u1988\u1989\x03\x02\x02\x02\u1989\u01E3\x03\x02\x02\x02\u198A" +
		"\u198C\x07\xC9\x02\x02\u198B\u198D\x05\b\x05\x02\u198C\u198B\x03\x02\x02" +
		"\x02\u198D\u198E\x03\x02\x02\x02\u198E\u198C\x03\x02\x02\x02\u198E\u198F" +
		"\x03\x02\x02\x02\u198F\u1990\x03\x02\x02\x02\u1990\u1994\x05\u01C4\xE3" +
		"\x02\u1991\u1993\x05\b\x05\x02\u1992\u1991\x03\x02\x02\x02\u1993\u1996" +
		"\x03\x02\x02\x02\u1994\u1992\x03\x02\x02\x02\u1994\u1995\x03\x02\x02\x02" +
		"\u1995\u01E5\x03\x02\x02\x02\u1996\u1994\x03\x02\x02\x02\u1997\u1998\x07" +
		"\u01B8\x02\x02\u1998\u01E7\x03\x02\x02\x02\u1999\u199A\x07\u01B6\x02\x02" +
		"\u199A\u01E9\x03\x02\x02\x02\u199B\u199D\x07\r\x02\x02\u199C\u199E\x05" +
		"\b\x05\x02\u199D\u199C\x03\x02\x02\x02\u199E\u199F\x03\x02\x02\x02\u199F" +
		"\u199D\x03\x02\x02\x02\u199F\u19A0\x03\x02\x02\x02\u19A0\u19A1\x03\x02" +
		"\x02\x02\u19A1\u19A3\x05\u01C4\xE3\x02\u19A2\u19A4\x05\b\x05\x02\u19A3" +
		"\u19A2\x03\x02\x02\x02\u19A4\u19A5\x03\x02\x02\x02\u19A5\u19A3\x03\x02" +
		"\x02\x02\u19A5\u19A6\x03\x02\x02\x02\u19A6\u19AD\x03\x02\x02\x02\u19A7" +
		"\u19A9\x07\xD6\x02\x02\u19A8\u19AA\x05\b\x05\x02\u19A9\u19A8\x03\x02\x02" +
		"\x02\u19AA\u19AB\x03\x02\x02\x02\u19AB\u19A9\x03\x02\x02\x02\u19AB\u19AC" +
		"\x03\x02\x02\x02\u19AC\u19AE\x03\x02\x02\x02\u19AD\u19A7\x03\x02\x02\x02" +
		"\u19AD\u19AE\x03\x02\x02\x02\u19AE\u19AF\x03\x02\x02\x02\u19AF\u19B0\x05" +
		"\u01EC\xF7\x02\u19B0\u01EB\x03\x02\x02\x02\u19B1\u19C2\x07\x1D\x02\x02" +
		"\u19B2\u19C2\x07\u015B\x02\x02\u19B3\u19C2\x07\u015C\x02\x02\u19B4\u19C2" +
		"\x07\xF6\x02\x02\u19B5\u19C2\x07~\x02\x02\u19B6\u19BA\x05\u01EE\xF8\x02" +
		"\u19B7\u19B9\x05\b\x05\x02\u19B8\u19B7\x03\x02\x02\x02\u19B9\u19BC\x03" +
		"\x02\x02\x02\u19BA\u19B8\x03\x02\x02\x02\u19BA\u19BB\x03\x02\x02\x02\u19BB" +
		"\u19BE\x03\x02\x02\x02\u19BC\u19BA\x03\x02\x02\x02\u19BD\u19B6\x03";
	private static readonly _serializedATNSegment13: string =
		"\x02\x02\x02\u19BE\u19BF\x03\x02\x02\x02\u19BF\u19BD\x03\x02\x02\x02\u19BF" +
		"\u19C0\x03\x02\x02\x02\u19C0\u19C2\x03\x02\x02\x02\u19C1\u19B1\x03\x02" +
		"\x02\x02\u19C1\u19B2\x03\x02\x02\x02\u19C1\u19B3\x03\x02\x02\x02\u19C1" +
		"\u19B4\x03\x02\x02\x02\u19C1\u19B5\x03\x02\x02\x02\u19C1\u19BD\x03\x02" +
		"\x02\x02\u19C2\u01ED\x03\x02\x02\x02\u19C3\u19D1\x05\u01F0\xF9\x02\u19C4" +
		"\u19C6\x05\b\x05\x02\u19C5\u19C4\x03\x02\x02\x02\u19C6\u19C7\x03\x02\x02" +
		"\x02\u19C7\u19C5\x03\x02\x02\x02\u19C7\u19C8\x03\x02\x02\x02\u19C8\u19C9" +
		"\x03\x02\x02\x02\u19C9\u19CB\t\x06\x02\x02\u19CA\u19CC\x05\b\x05\x02\u19CB" +
		"\u19CA\x03\x02\x02\x02\u19CC\u19CD\x03\x02\x02\x02\u19CD\u19CB\x03\x02" +
		"\x02\x02\u19CD\u19CE\x03\x02\x02\x02\u19CE\u19CF\x03\x02\x02\x02\u19CF" +
		"\u19D0\x05\u01F2\xFA\x02\u19D0\u19D2\x03\x02\x02\x02\u19D1\u19C5\x03\x02" +
		"\x02\x02\u19D1\u19D2\x03\x02\x02\x02\u19D2\u19E6\x03\x02\x02\x02\u19D3" +
		"\u19E1\x05\u01F0\xF9\x02\u19D4\u19D6\x05\b\x05\x02\u19D5\u19D4\x03\x02" +
		"\x02\x02\u19D6\u19D7\x03\x02\x02\x02\u19D7\u19D5\x03\x02\x02\x02\u19D7" +
		"\u19D8\x03\x02\x02\x02\u19D8\u19D9\x03\x02\x02\x02\u19D9\u19DB\x07\x11" +
		"\x02\x02\u19DA\u19DC\x05\b\x05\x02\u19DB\u19DA\x03\x02\x02\x02\u19DC\u19DD" +
		"\x03\x02\x02\x02\u19DD\u19DB\x03\x02\x02\x02\u19DD\u19DE\x03\x02\x02\x02" +
		"\u19DE\u19DF\x03\x02\x02\x02\u19DF\u19E0\x05\u01F4\xFB\x02\u19E0\u19E2" +
		"\x03\x02\x02\x02\u19E1\u19D5\x03\x02\x02\x02\u19E2\u19E3\x03\x02\x02\x02" +
		"\u19E3\u19E1\x03\x02\x02\x02\u19E3\u19E4\x03\x02\x02\x02\u19E4\u19E6\x03" +
		"\x02\x02\x02\u19E5\u19C3\x03\x02\x02\x02\u19E5\u19D3\x03\x02\x02\x02\u19E6" +
		"\u01EF\x03\x02\x02\x02\u19E7\u19E8\t\x0E\x02\x02\u19E8\u01F1\x03\x02\x02" +
		"\x02\u19E9\u19EA\t\x0E\x02\x02\u19EA\u01F3\x03\x02\x02\x02\u19EB\u19EC" +
		"\t\x0E\x02\x02\u19EC\u01F5\x03\x02\x02\x02\u19ED\u19EF\x07\u0165\x02\x02" +
		"\u19EE\u19F0\x05\b\x05\x02\u19EF\u19EE\x03\x02\x02\x02\u19F0\u19F1\x03" +
		"\x02\x02\x02\u19F1\u19EF\x03\x02\x02\x02\u19F1\u19F2\x03\x02\x02\x02\u19F2" +
		"\u19F3\x03\x02\x02\x02\u19F3\u19F7\x05\u0200\u0101\x02\u19F4\u19F6\x05" +
		"\b\x05\x02\u19F5\u19F4\x03\x02\x02\x02\u19F6\u19F9\x03\x02\x02\x02\u19F7" +
		"\u19F5\x03\x02\x02\x02\u19F7\u19F8\x03\x02\x02\x02\u19F8\u1A08\x03\x02" +
		"\x02\x02\u19F9\u19F7\x03\x02\x02\x02\u19FA\u19FC\x07\xD6\x02\x02\u19FB" +
		"\u19FD\x05\b\x05\x02\u19FC\u19FB\x03\x02\x02\x02\u19FD\u19FE\x03\x02\x02" +
		"\x02\u19FE\u19FC\x03\x02\x02\x02\u19FE\u19FF\x03\x02\x02\x02\u19FF\u1A01" +
		"\x03\x02\x02\x02\u1A00\u19FA\x03\x02\x02\x02\u1A00\u1A01\x03\x02\x02\x02" +
		"\u1A01\u1A02\x03\x02\x02\x02\u1A02\u1A04\x05\u01FE\u0100\x02\u1A03\u1A05" +
		"\x05\b\x05\x02\u1A04\u1A03\x03\x02\x02\x02\u1A05\u1A06\x03\x02\x02\x02" +
		"\u1A06\u1A04\x03\x02\x02\x02\u1A06\u1A07\x03\x02\x02\x02\u1A07\u1A09\x03" +
		"\x02\x02\x02\u1A08\u1A00\x03\x02\x02\x02\u1A08\u1A09\x03\x02\x02\x02\u1A09" +
		"\u1A1E\x03\x02\x02\x02\u1A0A\u1A12\x05\u01F8\xFD\x02\u1A0B\u1A0D\x05\b" +
		"\x05\x02\u1A0C\u1A0B\x03\x02\x02\x02\u1A0D\u1A0E\x03\x02\x02\x02\u1A0E" +
		"\u1A0C\x03\x02\x02\x02\u1A0E\u1A0F\x03\x02\x02\x02\u1A0F\u1A10\x03\x02" +
		"\x02\x02\u1A10\u1A11\x05\u01FA\xFE\x02\u1A11\u1A13\x03\x02\x02\x02\u1A12" +
		"\u1A0C\x03\x02\x02\x02\u1A12\u1A13\x03\x02\x02\x02\u1A13\u1A1F\x03\x02" +
		"\x02\x02\u1A14\u1A1C\x05\u01FA\xFE\x02\u1A15\u1A17\x05\b\x05\x02\u1A16" +
		"\u1A15\x03\x02\x02\x02\u1A17\u1A18\x03\x02\x02\x02\u1A18\u1A16\x03\x02" +
		"\x02\x02\u1A18\u1A19\x03\x02\x02\x02\u1A19\u1A1A\x03\x02\x02\x02\u1A1A" +
		"\u1A1B\x05\u01F8\xFD\x02\u1A1B\u1A1D\x03\x02\x02\x02\u1A1C\u1A16\x03\x02" +
		"\x02\x02\u1A1C\u1A1D\x03\x02\x02\x02\u1A1D\u1A1F\x03\x02\x02\x02\u1A1E" +
		"\u1A0A\x03\x02\x02\x02\u1A1E\u1A14\x03\x02\x02\x02\u1A1E\u1A1F\x03\x02" +
		"\x02\x02\u1A1F\u1A23\x03\x02\x02\x02\u1A20\u1A22\x05\b\x05\x02\u1A21\u1A20" +
		"\x03\x02\x02\x02\u1A22\u1A25\x03\x02\x02\x02\u1A23\u1A21\x03\x02\x02\x02" +
		"\u1A23\u1A24\x03\x02\x02\x02\u1A24\u01F7\x03\x02\x02\x02\u1A25\u1A23\x03" +
		"\x02\x02\x02\u1A26\u1A28\x07\u0102\x02\x02\u1A27\u1A29\x05\b\x05\x02\u1A28" +
		"\u1A27\x03\x02\x02\x02\u1A29\u1A2A\x03\x02\x02\x02\u1A2A\u1A28\x03\x02" +
		"\x02\x02\u1A2A\u1A2B\x03\x02\x02\x02\u1A2B\u1A32\x03\x02\x02\x02\u1A2C" +
		"\u1A2E\x07\u015E\x02\x02\u1A2D\u1A2F\x05\b\x05\x02\u1A2E\u1A2D\x03\x02" +
		"\x02\x02\u1A2F\u1A30\x03\x02\x02\x02\u1A30\u1A2E\x03\x02\x02\x02\u1A30" +
		"\u1A31\x03\x02\x02\x02\u1A31\u1A33\x03\x02\x02\x02\u1A32\u1A2C\x03\x02" +
		"\x02\x02\u1A32\u1A33\x03\x02\x02\x02\u1A33\u1A3A\x03\x02\x02\x02\u1A34" +
		"\u1A36\x07\xD6\x02\x02\u1A35\u1A37\x05\b\x05\x02\u1A36\u1A35\x03\x02\x02" +
		"\x02\u1A37\u1A38\x03\x02\x02\x02\u1A38\u1A36\x03\x02\x02\x02\u1A38\u1A39" +
		"\x03\x02\x02\x02\u1A39\u1A3B\x03\x02\x02\x02\u1A3A\u1A34\x03\x02\x02\x02" +
		"\u1A3A\u1A3B\x03\x02\x02\x02\u1A3B\u1A3C\x03\x02\x02\x02\u1A3C\u1A3D\x05" +
		"\u01FC\xFF\x02\u1A3D\u01F9\x03\x02\x02\x02\u1A3E\u1A40\x07\u0100\x02\x02" +
		"\u1A3F\u1A41\x05\b\x05\x02\u1A40\u1A3F\x03\x02\x02\x02\u1A41\u1A42\x03" +
		"\x02\x02\x02\u1A42\u1A40\x03\x02\x02\x02\u1A42\u1A43\x03\x02\x02\x02\u1A43" +
		"\u1A4A\x03\x02\x02\x02\u1A44\u1A46\x07\u015E\x02\x02\u1A45\u1A47\x05\b" +
		"\x05\x02\u1A46\u1A45\x03\x02\x02\x02\u1A47\u1A48\x03\x02\x02\x02\u1A48" +
		"\u1A46\x03\x02\x02\x02\u1A48\u1A49\x03\x02\x02\x02\u1A49\u1A4B\x03\x02" +
		"\x02\x02\u1A4A\u1A44\x03\x02\x02\x02\u1A4A\u1A4B\x03\x02\x02\x02\u1A4B" +
		"\u1A52\x03\x02\x02\x02\u1A4C\u1A4E\x07\xD6\x02\x02\u1A4D\u1A4F\x05\b\x05" +
		"\x02\u1A4E\u1A4D\x03\x02\x02\x02\u1A4F\u1A50\x03\x02\x02\x02\u1A50\u1A4E" +
		"\x03\x02\x02\x02\u1A50\u1A51\x03\x02\x02\x02\u1A51\u1A53\x03\x02\x02\x02" +
		"\u1A52\u1A4C\x03\x02\x02\x02\u1A52\u1A53\x03\x02\x02\x02\u1A53\u1A54\x03" +
		"\x02\x02\x02\u1A54\u1A55\x05\u01FC\xFF\x02\u1A55\u01FB\x03\x02\x02\x02" +
		"\u1A56\u1A57\x07\u01B8\x02\x02\u1A57\u01FD\x03\x02\x02\x02\u1A58\u1A59" +
		"\x07\u01B8\x02\x02\u1A59\u01FF\x03\x02\x02\x02\u1A5A\u1A5B\x07\u01B6\x02" +
		"\x02\u1A5B\u0201\x03\x02\x02\x02\u1A5C\u1A5D\x07\u01B8\x02\x02\u1A5D\u0203" +
		"\x03\x02\x02\x02\u1A5E\u1A5F\t\x1F\x02\x02\u1A5F\u0205\x03\x02\x02\x02" +
		"\u1A60\u1A61\x07\u01B8\x02\x02\u1A61\u0207\x03\x02\x02\x02\u1A62\u1A63" +
		"\t \x02\x02\u1A63\u0209\x03\x02\x02\x02\u1A64\u1A65\x07\u01B8\x02\x02" +
		"\u1A65\u020B\x03\x02\x02\x02\u1A66\u1A6A\x07\xAB\x02\x02\u1A67\u1A69\x05" +
		"\b\x05\x02\u1A68\u1A67\x03\x02\x02\x02\u1A69\u1A6C\x03\x02\x02\x02\u1A6A" +
		"\u1A68\x03\x02\x02\x02\u1A6A\u1A6B\x03\x02\x02\x02\u1A6B\u1A6D\x03\x02" +
		"\x02\x02\u1A6C\u1A6A\x03\x02\x02\x02\u1A6D\u1A71\x07\u01B2\x02\x02\u1A6E" +
		"\u1A70\x05\b\x05\x02\u1A6F\u1A6E\x03\x02\x02\x02\u1A70\u1A73\x03\x02\x02" +
		"\x02\u1A71\u1A6F\x03\x02\x02\x02\u1A71\u1A72\x03\x02\x02\x02\u1A72\u1A7D" +
		"\x03\x02\x02\x02\u1A73\u1A71\x03\x02\x02\x02\u1A74\u1A78\x05\u020E\u0108" +
		"\x02\u1A75\u1A77\x05\b\x05\x02\u1A76\u1A75\x03\x02\x02\x02\u1A77\u1A7A" +
		"\x03\x02\x02\x02\u1A78\u1A76\x03\x02\x02\x02\u1A78\u1A79\x03\x02\x02\x02" +
		"\u1A79\u1A7C\x03\x02\x02\x02\u1A7A\u1A78\x03\x02\x02\x02\u1A7B\u1A74\x03" +
		"\x02\x02\x02\u1A7C\u1A7F\x03\x02\x02\x02\u1A7D\u1A7B\x03\x02\x02\x02\u1A7D" +
		"\u1A7E\x03\x02\x02\x02\u1A7E\u020D\x03\x02\x02\x02\u1A7F\u1A7D\x03\x02" +
		"\x02\x02\u1A80\u1A82\x07\u014B\x02\x02\u1A81\u1A83\x05\b\x05\x02\u1A82" +
		"\u1A81\x03\x02\x02\x02\u1A83\u1A84\x03\x02\x02\x02\u1A84\u1A82\x03\x02" +
		"\x02\x02\u1A84\u1A85\x03\x02\x02\x02\u1A85\u1A8C\x03\x02\x02\x02\u1A86" +
		"\u1A88\x07\u0104\x02\x02\u1A87\u1A89\x05\b\x05\x02\u1A88\u1A87\x03\x02" +
		"\x02\x02\u1A89\u1A8A\x03\x02\x02\x02\u1A8A\u1A88\x03\x02\x02\x02\u1A8A" +
		"\u1A8B\x03\x02\x02\x02\u1A8B\u1A8D\x03\x02\x02\x02\u1A8C\u1A86\x03\x02" +
		"\x02\x02\u1A8C\u1A8D\x03\x02\x02\x02\u1A8D\u1A8E\x03\x02\x02\x02\u1A8E" +
		"\u1A92\x05\u0238\u011D\x02\u1A8F\u1A91\x05\b\x05\x02\u1A90\u1A8F\x03\x02" +
		"\x02\x02\u1A91\u1A94\x03\x02\x02\x02\u1A92\u1A90\x03\x02\x02\x02\u1A92" +
		"\u1A93\x03\x02\x02\x02\u1A93\u1A95\x03\x02\x02\x02\u1A94\u1A92\x03\x02" +
		"\x02\x02\u1A95\u1A99\x05\u0232\u011A\x02\u1A96\u1A98\x05\b\x05\x02\u1A97" +
		"\u1A96\x03\x02\x02\x02\u1A98\u1A9B\x03\x02\x02\x02\u1A99\u1A97\x03\x02" +
		"\x02\x02\u1A99\u1A9A\x03\x02\x02\x02\u1A9A\u1AA3\x03\x02\x02\x02\u1A9B" +
		"\u1A99\x03\x02\x02\x02\u1A9C\u1AA0\x05\u021A\u010E\x02\u1A9D\u1A9F\x05" +
		"\b\x05\x02\u1A9E\u1A9D\x03\x02\x02\x02\u1A9F\u1AA2\x03\x02\x02\x02\u1AA0" +
		"\u1A9E\x03\x02\x02\x02\u1AA0\u1AA1\x03\x02\x02\x02\u1AA1\u1AA4\x03\x02" +
		"\x02\x02\u1AA2\u1AA0\x03\x02\x02\x02\u1AA3\u1A9C\x03\x02\x02\x02\u1AA3" +
		"\u1AA4\x03\x02\x02\x02\u1AA4\u1AAC\x03\x02\x02\x02\u1AA5\u1AA9\x05\u0224" +
		"\u0113\x02\u1AA6\u1AA8\x05\b\x05\x02\u1AA7\u1AA6\x03\x02\x02\x02\u1AA8" +
		"\u1AAB\x03\x02\x02\x02\u1AA9\u1AA7\x03\x02\x02\x02\u1AA9\u1AAA\x03\x02" +
		"\x02\x02\u1AAA\u1AAD\x03\x02\x02\x02\u1AAB\u1AA9\x03\x02\x02\x02\u1AAC" +
		"\u1AA5\x03\x02\x02\x02\u1AAC\u1AAD\x03\x02\x02\x02\u1AAD\u1AB5\x03\x02" +
		"\x02\x02\u1AAE\u1AB2\x05\u022C\u0117\x02\u1AAF\u1AB1\x05\b\x05\x02\u1AB0" +
		"\u1AAF\x03\x02\x02\x02\u1AB1\u1AB4\x03\x02\x02\x02\u1AB2\u1AB0\x03\x02" +
		"\x02\x02\u1AB2\u1AB3\x03\x02\x02\x02\u1AB3\u1AB6\x03\x02\x02\x02\u1AB4" +
		"\u1AB2\x03\x02\x02\x02\u1AB5\u1AAE\x03\x02\x02\x02\u1AB5\u1AB6\x03\x02" +
		"\x02\x02\u1AB6\u1ABE\x03\x02\x02\x02\u1AB7\u1ABB\x05\u022A\u0116\x02\u1AB8" +
		"\u1ABA\x05\b\x05\x02\u1AB9\u1AB8\x03\x02\x02\x02\u1ABA\u1ABD\x03\x02\x02" +
		"\x02\u1ABB\u1AB9\x03\x02\x02\x02\u1ABB\u1ABC\x03\x02\x02\x02\u1ABC\u1ABF" +
		"\x03\x02\x02\x02\u1ABD\u1ABB\x03\x02\x02\x02\u1ABE\u1AB7\x03\x02\x02\x02" +
		"\u1ABE\u1ABF\x03\x02\x02\x02\u1ABF\u1AC7\x03\x02\x02\x02\u1AC0\u1AC4\x05" +
		"\u0220\u0111\x02\u1AC1\u1AC3\x05\b\x05\x02\u1AC2\u1AC1\x03\x02\x02\x02" +
		"\u1AC3\u1AC6\x03\x02\x02\x02\u1AC4\u1AC2\x03\x02\x02\x02\u1AC4\u1AC5\x03" +
		"\x02\x02\x02\u1AC5\u1AC8\x03\x02\x02\x02\u1AC6\u1AC4\x03\x02\x02\x02\u1AC7" +
		"\u1AC0\x03\x02\x02\x02\u1AC7\u1AC8\x03\x02\x02\x02\u1AC8\u1AD0\x03\x02" +
		"\x02\x02\u1AC9\u1ACD\x05\u021E\u0110\x02\u1ACA\u1ACC\x05\b\x05\x02\u1ACB" +
		"\u1ACA\x03\x02\x02\x02\u1ACC\u1ACF\x03\x02\x02\x02\u1ACD\u1ACB\x03\x02" +
		"\x02\x02\u1ACD\u1ACE\x03\x02\x02\x02\u1ACE\u1AD1\x03\x02\x02\x02\u1ACF" +
		"\u1ACD\x03\x02\x02\x02\u1AD0\u1AC9\x03\x02\x02\x02\u1AD0\u1AD1\x03\x02" +
		"\x02\x02\u1AD1\u1AD9\x03\x02\x02\x02\u1AD2\u1AD6\x05\u0218\u010D\x02\u1AD3" +
		"\u1AD5\x05\b\x05\x02\u1AD4\u1AD3\x03\x02\x02\x02\u1AD5\u1AD8\x03\x02\x02" +
		"\x02\u1AD6\u1AD4\x03\x02\x02\x02\u1AD6\u1AD7\x03\x02\x02\x02\u1AD7\u1ADA" +
		"\x03\x02\x02\x02\u1AD8\u1AD6\x03\x02\x02\x02\u1AD9\u1AD2\x03\x02\x02\x02" +
		"\u1AD9\u1ADA\x03\x02\x02\x02\u1ADA\u1AE4\x03\x02\x02\x02\u1ADB\u1ADF\x05" +
		"\u0214\u010B\x02\u1ADC\u1ADE\x05\b\x05\x02\u1ADD\u1ADC\x03\x02\x02\x02" +
		"\u1ADE\u1AE1\x03\x02\x02\x02\u1ADF\u1ADD\x03\x02\x02\x02\u1ADF\u1AE0\x03" +
		"\x02\x02\x02\u1AE0\u1AE3\x03\x02\x02\x02\u1AE1\u1ADF\x03\x02\x02\x02\u1AE2" +
		"\u1ADB\x03\x02\x02\x02\u1AE3\u1AE6\x03\x02\x02\x02\u1AE4\u1AE2\x03\x02" +
		"\x02\x02\u1AE4\u1AE5\x03\x02\x02\x02\u1AE5\u1AEE\x03\x02\x02\x02\u1AE6" +
		"\u1AE4\x03\x02\x02\x02\u1AE7\u1AEB\x05\u0226\u0114\x02\u1AE8\u1AEA\x05" +
		"\b\x05\x02\u1AE9\u1AE8\x03\x02\x02\x02\u1AEA\u1AED\x03\x02\x02\x02\u1AEB" +
		"\u1AE9\x03\x02\x02\x02\u1AEB\u1AEC\x03\x02\x02\x02\u1AEC\u1AEF\x03\x02" +
		"\x02\x02\u1AED\u1AEB\x03\x02\x02\x02\u1AEE\u1AE7\x03\x02\x02\x02\u1AEE" +
		"\u1AEF\x03\x02\x02\x02\u1AEF\u1AF7\x03\x02\x02\x02\u1AF0\u1AF4\x05\u0210" +
		"\u0109\x02\u1AF1\u1AF3\x05\b\x05\x02\u1AF2\u1AF1\x03\x02\x02\x02\u1AF3" +
		"\u1AF6\x03\x02\x02\x02\u1AF4\u1AF2\x03\x02\x02\x02\u1AF4\u1AF5\x03\x02" +
		"\x02\x02\u1AF5\u1AF8\x03\x02\x02\x02\u1AF6\u1AF4\x03\x02\x02\x02\u1AF7" +
		"\u1AF0\x03\x02\x02\x02\u1AF7\u1AF8\x03\x02\x02\x02\u1AF8\u1AF9\x03\x02" +
		"\x02\x02\u1AF9\u1AFA\x07\u01B2\x02\x02\u1AFA\u020F\x03\x02\x02\x02\u1AFB" +
		"\u1AFD\x07\xAA\x02\x02\u1AFC\u1AFE\x05\b\x05\x02\u1AFD\u1AFC\x03\x02\x02" +
		"\x02\u1AFE\u1AFF\x03\x02\x02\x02\u1AFF\u1AFD\x03\x02\x02\x02\u1AFF\u1B00" +
		"\x03\x02\x02\x02\u1B00\u1B02\x03\x02\x02\x02\u1B01\u1AFB\x03\x02\x02\x02" +
		"\u1B01\u1B02\x03\x02\x02\x02\u1B02\u1B03\x03\x02\x02\x02\u1B03\u1B05\x07" +
		"\u015E\x02\x02\u1B04\u1B06\x05\b\x05\x02\u1B05\u1B04\x03\x02\x02\x02\u1B06" +
		"\u1B07\x03\x02\x02\x02\u1B07\u1B05\x03\x02\x02\x02\u1B07\u1B08\x03\x02" +
		"\x02\x02\u1B08\u1B0F\x03\x02\x02\x02\u1B09\u1B0B\x07\xD6\x02\x02\u1B0A" +
		"\u1B0C\x05\b\x05\x02\u1B0B\u1B0A\x03\x02\x02\x02\u1B0C\u1B0D\x03\x02\x02" +
		"\x02\u1B0D\u1B0B\x03\x02\x02\x02\u1B0D\u1B0E\x03\x02\x02\x02\u1B0E\u1B10" +
		"\x03\x02\x02\x02\u1B0F\u1B09\x03\x02\x02\x02\u1B0F\u1B10\x03\x02\x02\x02" +
		"\u1B10\u1B11\x03\x02\x02\x02\u1B11\u1B12\x05\u0212\u010A\x02\u1B12\u0211" +
		"\x03\x02\x02\x02\u1B13\u1B14\x05\u01CE\xE8\x02\u1B14\u0213\x03\x02\x02" +
		"\x02\u1B15\u1B17\x07\x13\x02\x02\u1B16\u1B18\x05\b\x05\x02\u1B17\u1B16" +
		"\x03\x02\x02\x02\u1B18\u1B19\x03\x02\x02\x02\u1B19\u1B17\x03\x02\x02\x02" +
		"\u1B19\u1B1A\x03\x02\x02\x02\u1B1A\u1B1C\x03\x02\x02\x02\u1B1B\u1B15\x03" +
		"\x02\x02\x02\u1B1B\u1B1C\x03\x02\x02\x02\u1B1C\u1B1D\x03\x02\x02\x02\u1B1D" +
		"\u1B1F\x07\u0126\x02\x02\u1B1E\u1B20\x05\b\x05\x02\u1B1F\u1B1E\x03\x02" +
		"\x02\x02\u1B20\u1B21\x03\x02\x02\x02\u1B21\u1B1F\x03\x02\x02\x02\u1B21" +
		"\u1B22\x03\x02\x02\x02\u1B22\u1B29\x03\x02\x02\x02\u1B23\u1B25\x07\xDB" +
		"\x02\x02\u1B24\u1B26\x05\b\x05\x02\u1B25\u1B24\x03\x02\x02\x02\u1B26\u1B27" +
		"\x03\x02\x02\x02\u1B27\u1B25\x03\x02\x02\x02\u1B27\u1B28\x03\x02\x02\x02" +
		"\u1B28\u1B2A\x03\x02\x02\x02\u1B29\u1B23\x03\x02\x02\x02\u1B29\u1B2A\x03" +
		"\x02\x02\x02\u1B2A\u1B31\x03\x02\x02\x02\u1B2B\u1B2D\x07\xD6\x02\x02\u1B2C" +
		"\u1B2E\x05\b\x05\x02\u1B2D\u1B2C\x03\x02\x02\x02\u1B2E\u1B2F\x03\x02\x02" +
		"\x02\u1B2F\u1B2D\x03\x02\x02\x02\u1B2F\u1B30\x03\x02\x02\x02\u1B30\u1B32" +
		"\x03\x02\x02\x02\u1B31\u1B2B\x03\x02\x02\x02\u1B31\u1B32\x03\x02\x02\x02" +
		"\u1B32\u1B33\x03\x02\x02\x02\u1B33\u1B43\x05\u0216\u010C\x02\u1B34\u1B36" +
		"\x05\b\x05\x02\u1B35\u1B34\x03\x02\x02\x02\u1B36\u1B37\x03\x02\x02\x02" +
		"\u1B37\u1B35\x03\x02\x02\x02\u1B37\u1B38\x03\x02\x02\x02\u1B38\u1B3F\x03" +
		"\x02\x02\x02\u1B39\u1B3B\x07\u018B\x02\x02\u1B3A\u1B3C\x05\b\x05\x02\u1B3B" +
		"\u1B3A\x03\x02\x02\x02\u1B3C\u1B3D\x03\x02\x02\x02\u1B3D\u1B3B\x03\x02" +
		"\x02\x02\u1B3D\u1B3E\x03\x02\x02\x02\u1B3E\u1B40\x03\x02\x02\x02\u1B3F" +
		"\u1B39\x03\x02\x02\x02\u1B3F\u1B40\x03\x02\x02\x02\u1B40\u1B41\x03\x02" +
		"\x02\x02\u1B41\u1B42\x07|\x02\x02\u1B42\u1B44\x03\x02\x02\x02\u1B43\u1B35" +
		"\x03\x02\x02\x02\u1B43\u1B44\x03\x02\x02\x02\u1B44\u1B4C\x03\x02\x02\x02" +
		"\u1B45\u1B47\x05\b\x05\x02\u1B46\u1B45\x03\x02\x02\x02\u1B47\u1B48\x03" +
		"\x02\x02\x02\u1B48\u1B46\x03\x02\x02\x02\u1B48\u1B49\x03\x02\x02\x02\u1B49" +
		"\u1B4A\x03\x02\x02\x02\u1B4A\u1B4B\t\x0F\x02\x02\u1B4B\u1B4D\x03\x02\x02" +
		"\x02\u1B4C\u1B46\x03\x02\x02\x02\u1B4C\u1B4D\x03\x02\x02\x02\u1B4D\u0215" +
		"\x03\x02\x02\x02\u1B4E\u1B6B\x05\u01CE\xE8\x02\u1B4F\u1B53\x07\u01B8\x02" +
		"\x02\u1B50\u1B52\x05\b\x05\x02\u1B51\u1B50\x03\x02\x02\x02\u1B52\u1B55" +
		"\x03\x02\x02\x02\u1B53\u1B51\x03\x02\x02\x02\u1B53\u1B54\x03\x02\x02\x02" +
		"\u1B54\u1B56\x03\x02\x02\x02\u1B55\u1B53\x03\x02\x02\x02\u1B56\u1B5A\x07" +
		"\u01A7\x02\x02\u1B57\u1B59\x05\b\x05\x02\u1B58\u1B57\x03\x02\x02\x02\u1B59" +
		"\u1B5C\x03\x02\x02\x02\u1B5A\u1B58\x03\x02\x02\x02\u1B5A\u1B5B\x03\x02" +
		"\x02\x02\u1B5B\u1B5D\x03\x02\x02\x02\u1B5C\u1B5A\x03\x02\x02\x02\u1B5D" +
		"\u1B67\x05\u01CE\xE8\x02\u1B5E\u1B60\x05\b\x05\x02\u1B5F\u1B5E\x03\x02" +
		"\x02\x02\u1B60\u1B63\x03\x02\x02\x02\u1B61\u1B5F\x03\x02\x02\x02\u1B61" +
		"\u1B62\x03\x02\x02\x02\u1B62\u1B64\x03\x02\x02\x02\u1B63\u1B61\x03\x02" +
		"\x02\x02\u1B64\u1B66\x05\u01CE\xE8\x02\u1B65\u1B61\x03\x02\x02\x02\u1B66" +
		"\u1B69\x03\x02\x02\x02\u1B67\u1B65\x03\x02\x02\x02\u1B67\u1B68\x03\x02" +
		"\x02\x02\u1B68\u1B6B\x03\x02\x02\x02\u1B69\u1B67\x03\x02\x02\x02\u1B6A" +
		"\u1B4E\x03\x02\x02\x02\u1B6A\u1B4F\x03\x02\x02\x02\u1B6B\u0217\x03\x02" +
		"\x02\x02\u1B6C\u1B6E\x07\x07\x02\x02\u1B6D\u1B6F\x05\b\x05\x02\u1B6E\u1B6D" +
		"\x03\x02\x02\x02\u1B6F\u1B70\x03\x02\x02\x02\u1B70\u1B6E\x03\x02\x02\x02" +
		"\u1B70\u1B71\x03\x02\x02\x02\u1B71\u1B78\x03\x02\x02\x02\u1B72\u1B74\x07" +
		"\xF1\x02\x02\u1B73\u1B75\x05\b\x05\x02\u1B74\u1B73\x03\x02\x02\x02\u1B75" +
		"\u1B76\x03\x02\x02\x02\u1B76\u1B74\x03\x02\x02\x02\u1B76\u1B77\x03\x02" +
		"\x02\x02\u1B77\u1B79\x03\x02\x02\x02\u1B78\u1B72\x03\x02\x02\x02\u1B78" +
		"\u1B79\x03\x02\x02\x02\u1B79\u1B80\x03\x02\x02\x02\u1B7A\u1B7C\x07\xD6" +
		"\x02\x02\u1B7B\u1B7D\x05\b\x05\x02\u1B7C\u1B7B\x03\x02\x02\x02\u1B7D\u1B7E" +
		"\x03\x02\x02\x02\u1B7E\u1B7C\x03\x02\x02\x02\u1B7E\u1B7F\x03\x02\x02\x02" +
		"\u1B7F\u1B81\x03\x02\x02\x02\u1B80\u1B7A\x03\x02\x02\x02\u1B80\u1B81\x03" +
		"\x02\x02\x02\u1B81\u1B83\x03\x02\x02\x02\u1B82\u1B6C\x03\x02\x02\x02\u1B82" +
		"\u1B83\x03\x02\x02\x02\u1B83\u1B84\x03\x02\x02\x02\u1B84\u1BA2\t!\x02" +
		"\x02\u1B85\u1B87\x05\b\x05\x02\u1B86\u1B85\x03\x02\x02\x02\u1B87\u1B88" +
		"\x03\x02\x02\x02\u1B88\u1B86\x03\x02\x02\x02\u1B88\u1B89\x03\x02\x02\x02" +
		"\u1B89\u1B8A\x03\x02\x02\x02\u1B8A\u1B8C\x07\u012B\x02\x02\u1B8B\u1B8D" +
		"\x05\b\x05\x02\u1B8C\u1B8B\x03\x02\x02\x02\u1B8D\u1B8E\x03\x02\x02\x02" +
		"\u1B8E\u1B8C\x03\x02\x02\x02\u1B8E\u1B8F\x03\x02\x02\x02\u1B8F\u1B96\x03" +
		"\x02\x02\x02\u1B90\u1B92\x07\xDB\x02\x02\u1B91\u1B93\x05\b\x05\x02\u1B92" +
		"\u1B91\x03\x02\x02\x02\u1B93\u1B94\x03\x02\x02\x02\u1B94\u1B92\x03\x02" +
		"\x02\x02\u1B94\u1B95\x03\x02\x02\x02\u1B95\u1B97\x03\x02\x02\x02\u1B96" +
		"\u1B90\x03\x02\x02\x02\u1B96\u1B97\x03\x02\x02\x02\u1B97\u1B9E\x03\x02" +
		"\x02\x02\u1B98\u1B9A\x07\xD6\x02\x02\u1B99\u1B9B\x05\b\x05\x02\u1B9A\u1B99" +
		"\x03\x02\x02\x02\u1B9B\u1B9C\x03\x02\x02\x02\u1B9C\u1B9A\x03\x02\x02\x02" +
		"\u1B9C\u1B9D\x03\x02\x02\x02\u1B9D\u1B9F\x03\x02\x02\x02\u1B9E\u1B98\x03" +
		"\x02\x02\x02\u1B9E\u1B9F\x03\x02\x02\x02\u1B9F\u1BA0\x03\x02\x02\x02\u1BA0" +
		"\u1BA1\x05\u01CE\xE8\x02\u1BA1\u1BA3\x03\x02\x02\x02\u1BA2\u1B86\x03\x02" +
		"\x02\x02\u1BA2\u1BA3\x03\x02\x02\x02\u1BA3\u0219\x03\x02\x02\x02\u1BA4" +
		"\u1BA6\x07\u0137\x02\x02\u1BA5\u1BA7\x05\b\x05\x02\u1BA6\u1BA5\x03\x02" +
		"\x02\x02\u1BA7\u1BA8\x03\x02\x02\x02\u1BA8\u1BA6\x03\x02\x02\x02\u1BA8" +
		"\u1BA9\x03\x02\x02\x02\u1BA9\u1BAA\x03\x02\x02\x02\u1BAA\u1BB2\x05\u021C" +
		"\u010F\x02\u1BAB\u1BAD\x05\b\x05\x02\u1BAC\u1BAB\x03\x02\x02\x02\u1BAD" +
		"\u1BAE\x03\x02\x02\x02\u1BAE\u1BAC\x03\x02\x02\x02\u1BAE\u1BAF\x03\x02" +
		"\x02\x02\u1BAF\u1BB0\x03\x02\x02\x02\u1BB0\u1BB1\t\"\x02\x02\u1BB1\u1BB3" +
		"\x03\x02\x02\x02\u1BB2\u1BAC\x03\x02\x02\x02\u1BB2\u1BB3\x03\x02\x02\x02" +
		"\u1BB3\u021B\x03\x02\x02\x02\u1BB4\u1BB5\x07\u01B6\x02\x02\u1BB5\u021D" +
		"\x03\x02\x02\x02\u1BB6\u1BB8\x07\u0126\x02\x02\u1BB7\u1BB9\x05\b\x05\x02" +
		"\u1BB8\u1BB7\x03\x02\x02\x02\u1BB9\u1BBA\x03\x02\x02\x02\u1BBA\u1BB8\x03" +
		"\x02\x02\x02\u1BBA\u1BBB\x03\x02\x02\x02\u1BBB\u1BBC\x03\x02\x02\x02\u1BBC" +
		"\u1BBE\x07r\x02\x02\u1BBD\u1BBF\x05\b\x05\x02\u1BBE\u1BBD\x03\x02\x02" +
		"\x02\u1BBF\u1BC0\x03\x02\x02\x02\u1BC0\u1BBE\x03\x02\x02\x02\u1BC0\u1BC1" +
		"\x03\x02\x02\x02\u1BC1\u1BC8\x03\x02\x02\x02\u1BC2\u1BC4\x07\xD6\x02\x02" +
		"\u1BC3\u1BC5\x05\b\x05\x02\u1BC4\u1BC3\x03\x02\x02\x02\u1BC5\u1BC6\x03" +
		"\x02\x02\x02\u1BC6\u1BC4\x03\x02\x02\x02\u1BC6\u1BC7\x03\x02\x02\x02\u1BC7" +
		"\u1BC9\x03\x02\x02\x02\u1BC8\u1BC2\x03\x02\x02\x02\u1BC8\u1BC9\x03\x02" +
		"\x02\x02\u1BC9\u1BCA\x03\x02\x02\x02\u1BCA\u1BCB\x07\u015B\x02\x02\u1BCB" +
		"\u021F\x03\x02\x02\x02\u1BCC\u1BCE\x07\u010B\x02\x02\u1BCD\u1BCF\x05\b" +
		"\x05\x02\u1BCE\u1BCD\x03\x02\x02\x02\u1BCF\u1BD0\x03\x02\x02\x02\u1BD0" +
		"\u1BCE\x03\x02\x02\x02\u1BD0\u1BD1\x03\x02\x02\x02\u1BD1\u1BD8\x03\x02" +
		"\x02\x02\u1BD2\u1BD4\x079\x02\x02\u1BD3\u1BD5\x05\b\x05\x02\u1BD4\u1BD3" +
		"\x03\x02\x02\x02\u1BD5\u1BD6\x03\x02\x02\x02\u1BD6\u1BD4\x03\x02\x02\x02" +
		"\u1BD6\u1BD7\x03\x02\x02\x02\u1BD7\u1BD9\x03\x02\x02\x02\u1BD8\u1BD2\x03" +
		"\x02\x02\x02\u1BD8\u1BD9\x03\x02\x02\x02\u1BD9\u1BE0\x03\x02\x02\x02\u1BDA" +
		"\u1BDC\x07\xD6\x02\x02\u1BDB\u1BDD\x05\b\x05\x02\u1BDC\u1BDB\x03\x02\x02" +
		"\x02\u1BDD\u1BDE\x03\x02\x02\x02\u1BDE\u1BDC\x03\x02\x02\x02\u1BDE\u1BDF" +
		"\x03\x02\x02\x02\u1BDF\u1BE1\x03\x02\x02\x02\u1BE0\u1BDA\x03\x02\x02\x02" +
		"\u1BE0\u1BE1\x03\x02\x02\x02\u1BE1\u1BE2\x03\x02\x02\x02\u1BE2\u1BE3\x05" +
		"\u0222\u0112\x02\u1BE3\u0221\x03\x02\x02\x02\u1BE4\u1BE5\x07\u01B5\x02" +
		"\x02\u1BE5\u0223\x03\x02\x02\x02\u1BE6\u1BE8\x07\u0107\x02\x02\u1BE7\u1BE9" +
		"\x05\b\x05\x02\u1BE8\u1BE7\x03\x02\x02\x02\u1BE9\u1BEA\x03\x02\x02\x02" +
		"\u1BEA\u1BE8\x03\x02\x02\x02\u1BEA\u1BEB\x03\x02\x02\x02\u1BEB\u1BF2\x03" +
		"\x02\x02\x02\u1BEC\u1BEE\x07\xD6\x02\x02\u1BED\u1BEF\x05\b\x05\x02\u1BEE" +
		"\u1BED\x03\x02\x02\x02\u1BEF\u1BF0\x03\x02\x02\x02\u1BF0\u1BEE\x03\x02" +
		"\x02\x02\u1BF0\u1BF1\x03\x02\x02\x02\u1BF1\u1BF3\x03\x02\x02\x02\u1BF2" +
		"\u1BEC\x03\x02\x02\x02\u1BF2\u1BF3\x03\x02\x02\x02\u1BF3\u1BF5\x03\x02" +
		"\x02\x02\u1BF4\u1BE6\x03\x02\x02\x02\u1BF4\u1BF5\x03\x02\x02\x02\u1BF5" +
		"\u1C01\x03\x02\x02\x02\u1BF6\u1C02\x07\u014E\x02\x02\u1BF7\u1BF9\x07\xE4" +
		"\x02\x02\u1BF8\u1BFA\x05\b\x05\x02\u1BF9\u1BF8\x03\x02\x02\x02\u1BFA\u1BFB" +
		"\x03\x02\x02\x02\u1BFB\u1BF9\x03\x02\x02\x02\u1BFB\u1BFC\x03\x02\x02\x02" +
		"\u1BFC\u1BFD\x03\x02\x02\x02\u1BFD\u1BFE\x07\u014E\x02\x02\u1BFE\u1C02" +
		"\x03\x02\x02\x02\u1BFF\u1C02\x07\u012B\x02\x02\u1C00\u1C02\x07\xCB\x02" +
		"\x02\u1C01\u1BF6\x03\x02\x02\x02\u1C01\u1BF7\x03\x02\x02\x02\u1C01\u1BFF" +
		"\x03\x02\x02\x02\u1C01\u1C00\x03\x02\x02\x02\u1C02\u0225\x03\x02\x02\x02" +
		"\u1C03\u1C05\x07\xE8\x02\x02\u1C04\u1C06\x05\b\x05\x02\u1C05\u1C04\x03" +
		"\x02\x02\x02\u1C06\u1C07\x03\x02\x02\x02\u1C07\u1C05\x03\x02\x02\x02\u1C07" +
		"\u1C08\x03\x02\x02\x02\u1C08\u1C0F\x03\x02\x02\x02\u1C09\u1C0B\x07\xF1" +
		"\x02\x02\u1C0A\u1C0C\x05\b\x05\x02\u1C0B\u1C0A\x03\x02\x02\x02\u1C0C\u1C0D" +
		"\x03\x02\x02\x02\u1C0D\u1C0B\x03\x02\x02\x02\u1C0D\u1C0E\x03\x02\x02\x02" +
		"\u1C0E\u1C10\x03\x02\x02\x02\u1C0F\u1C09\x03\x02\x02\x02\u1C0F\u1C10\x03" +
		"\x02\x02\x02\u1C10\u1C17\x03\x02\x02\x02\u1C11\u1C13\x07\xD6\x02\x02\u1C12" +
		"\u1C14\x05\b\x05\x02\u1C13\u1C12\x03\x02\x02\x02\u1C14\u1C15\x03\x02\x02" +
		"\x02\u1C15\u1C13\x03\x02\x02\x02\u1C15\u1C16\x03\x02\x02\x02\u1C16\u1C18" +
		"\x03\x02\x02\x02\u1C17\u1C11\x03\x02\x02\x02\u1C17\u1C18\x03\x02\x02\x02" +
		"\u1C18\u1C19\x03\x02\x02\x02\u1C19\u1C1A\x05\u0228\u0115\x02\u1C1A\u0227" +
		"\x03\x02\x02\x02\u1C1B\u1C1D\x07\xED\x02\x02\u1C1C\u1C1E\x05\b\x05\x02" +
		"\u1C1D\u1C1C\x03\x02\x02\x02\u1C1E\u1C1F\x03\x02\x02\x02\u1C1F\u1C1D\x03" +
		"\x02\x02\x02\u1C1F\u1C20\x03\x02\x02\x02\u1C20\u1C27\x03\x02\x02\x02\u1C21" +
		"\u1C23\x07\u018B\x02\x02\u1C22\u1C24\x05\b\x05\x02\u1C23\u1C22\x03\x02" +
		"\x02\x02\u1C24\u1C25\x03\x02\x02\x02\u1C25\u1C23\x03\x02\x02\x02\u1C25" +
		"\u1C26\x03\x02\x02\x02\u1C26\u1C28\x03\x02\x02\x02\u1C27\u1C21\x03\x02" +
		"\x02\x02\u1C27\u1C28\x03\x02\x02\x02\u1C28\u1C29\x03\x02\x02\x02\u1C29" +
		"\u1C2B\x07\xE8\x02\x02\u1C2A\u1C2C\x05\b\x05\x02\u1C2B\u1C2A\x03\x02\x02" +
		"\x02\u1C2C\u1C2D\x03\x02\x02\x02\u1C2D\u1C2B\x03\x02\x02\x02\u1C2D\u1C2E" +
		"\x03\x02\x02\x02\u1C2E\u1C2F\x03\x02\x02\x02\u1C2F\u1C31\x07\u0102\x02" +
		"\x02\u1C30\u1C32\x05\b\x05\x02\u1C31\u1C30\x03\x02\x02\x02\u1C32\u1C33" +
		"\x03\x02\x02\x02\u1C33\u1C31\x03\x02\x02\x02\u1C33\u1C34\x03\x02\x02\x02" +
		"\u1C34\u1C35\x03\x02\x02\x02\u1C35\u1C37\x07\xF4\x02\x02\u1C36\u1C38\x05" +
		"\b\x05\x02\u1C37\u1C36\x03\x02\x02\x02\u1C38\u1C39\x03\x02\x02\x02\u1C39" +
		"\u1C37\x03\x02\x02\x02\u1C39\u1C3A\x03\x02\x02\x02\u1C3A\u1C3B\x03\x02" +
		"\x02\x02\u1C3B\u1C3C\x07\u0127\x02\x02\u1C3C\u1C60\x03\x02\x02\x02\u1C3D" +
		"\u1C5C\x07\"\x02\x02\u1C3E\u1C40\x05\b\x05\x02\u1C3F\u1C3E\x03\x02\x02" +
		"\x02\u1C40\u1C41\x03\x02\x02\x02\u1C41\u1C3F\x03\x02\x02\x02\u1C41\u1C42" +
		"\x03\x02\x02\x02\u1C42\u1C49\x03\x02\x02\x02\u1C43\u1C45\x07\u018B\x02" +
		"\x02\u1C44\u1C46\x05\b\x05\x02\u1C45\u1C44\x03\x02\x02\x02\u1C46\u1C47" +
		"\x03\x02\x02\x02\u1C47\u1C45\x03\x02\x02\x02\u1C47\u1C48\x03\x02\x02\x02" +
		"\u1C48\u1C4A\x03\x02\x02\x02\u1C49\u1C43\x03\x02\x02\x02\u1C49\u1C4A\x03" +
		"\x02\x02\x02\u1C4A\u1C5A\x03\x02\x02\x02\u1C4B\u1C4D\x07\xE8\x02\x02\u1C4C" +
		"\u1C4E\x05\b\x05\x02\u1C4D\u1C4C\x03\x02\x02\x02\u1C4E\u1C4F\x03\x02\x02" +
		"\x02\u1C4F\u1C4D\x03\x02\x02\x02\u1C4F\u1C50\x03\x02\x02\x02\u1C50\u1C51" +
		"\x03\x02\x02\x02\u1C51\u1C53\x07\u0102\x02\x02\u1C52\u1C54\x05\b\x05\x02" +
		"\u1C53\u1C52\x03\x02\x02\x02\u1C54\u1C55\x03\x02\x02\x02\u1C55\u1C53\x03" +
		"\x02\x02\x02\u1C55\u1C56\x03\x02\x02\x02\u1C56\u1C57\x03\x02\x02\x02\u1C57" +
		"\u1C58\x07\u0126\x02\x02\u1C58\u1C5B\x03\x02\x02\x02\u1C59\u1C5B\x07\u0141" +
		"\x02\x02\u1C5A\u1C4B\x03\x02\x02\x02\u1C5A\u1C59\x03\x02\x02\x02\u1C5B" +
		"\u1C5D\x03\x02\x02\x02\u1C5C\u1C3F\x03\x02\x02\x02\u1C5C\u1C5D\x03\x02" +
		"\x02\x02\u1C5D\u1C60\x03\x02\x02\x02\u1C5E\u1C60\x07\xA2\x02\x02\u1C5F" +
		"\u1C1B\x03\x02\x02\x02\u1C5F\u1C3D\x03\x02\x02\x02\u1C5F\u1C5E\x03\x02" +
		"\x02\x02\u1C60\u0229\x03\x02\x02\x02\u1C61\u1C63\x07?\x02\x02\u1C62\u1C64" +
		"\x05\b\x05\x02\u1C63\u1C62\x03\x02\x02\x02\u1C64\u1C65\x03\x02\x02\x02" +
		"\u1C65\u1C63\x03\x02\x02\x02\u1C65\u1C66\x03\x02\x02\x02\u1C66\u1C6D\x03" +
		"\x02\x02\x02\u1C67\u1C69\x07\xD6\x02\x02\u1C68\u1C6A\x05\b\x05\x02\u1C69" +
		"\u1C68\x03\x02\x02\x02\u1C6A\u1C6B\x03\x02\x02\x02\u1C6B\u1C69\x03\x02" +
		"\x02\x02\u1C6B\u1C6C\x03\x02\x02\x02\u1C6C\u1C6E\x03\x02\x02\x02\u1C6D" +
		"\u1C67\x03\x02\x02\x02\u1C6D\u1C6E\x03\x02\x02\x02\u1C6E\u1C6F\x03\x02" +
		"\x02";
	private static readonly _serializedATNSegment14: string =
		"\x02\u1C6F\u1C70\x05\u01C4\xE3\x02\u1C70\u022B\x03\x02\x02\x02\u1C71\u1C73" +
		"\x07/\x02\x02\u1C72\u1C74\x05\b\x05\x02\u1C73\u1C72\x03\x02\x02\x02\u1C74" +
		"\u1C75\x03\x02\x02\x02\u1C75\u1C73\x03\x02\x02\x02\u1C75\u1C76\x03\x02" +
		"\x02\x02\u1C76\u1C7D\x03\x02\x02\x02\u1C77\u1C79\x07U\x02\x02\u1C78\u1C7A" +
		"\x05\b\x05\x02\u1C79\u1C78\x03\x02\x02\x02\u1C7A\u1C7B\x03\x02\x02\x02" +
		"\u1C7B\u1C79\x03\x02\x02\x02\u1C7B\u1C7C\x03\x02\x02\x02\u1C7C\u1C7E\x03" +
		"\x02\x02\x02\u1C7D\u1C77\x03\x02\x02\x02\u1C7D\u1C7E\x03\x02\x02\x02\u1C7E" +
		"\u1C8B\x03\x02\x02\x02\u1C7F\u1C81\x05\u022E\u0118\x02\u1C80\u1C82\x05" +
		"\b\x05\x02\u1C81\u1C80\x03\x02\x02\x02\u1C82\u1C83\x03\x02\x02\x02\u1C83" +
		"\u1C81\x03\x02\x02\x02\u1C83\u1C84\x03\x02\x02\x02\u1C84\u1C85\x03\x02" +
		"\x02\x02\u1C85\u1C87\x07\u0175\x02\x02\u1C86\u1C88\x05\b\x05\x02\u1C87" +
		"\u1C86\x03\x02\x02\x02\u1C88\u1C89\x03\x02\x02\x02\u1C89\u1C87\x03\x02" +
		"\x02\x02\u1C89\u1C8A\x03\x02\x02\x02\u1C8A\u1C8C\x03\x02\x02\x02\u1C8B" +
		"\u1C7F\x03\x02\x02\x02\u1C8B\u1C8C\x03\x02\x02\x02\u1C8C\u1C8D\x03\x02" +
		"\x02\x02\u1C8D\u1C8F\x05\u0230\u0119\x02\u1C8E\u1C90\x05\b\x05\x02\u1C8F" +
		"\u1C8E\x03\x02\x02\x02\u1C90\u1C91\x03\x02\x02\x02\u1C91\u1C8F\x03\x02" +
		"\x02\x02\u1C91\u1C92\x03\x02\x02\x02\u1C92\u1C93\x03\x02\x02\x02\u1C93" +
		"\u1C94\t#\x02\x02\u1C94\u022D\x03\x02\x02\x02\u1C95\u1C96\x07\u01B6\x02" +
		"\x02\u1C96\u022F\x03\x02\x02\x02\u1C97\u1C98\x07\u01B6\x02\x02\u1C98\u0231" +
		"\x03\x02\x02\x02\u1C99\u1C9B\x07\x1E\x02\x02\u1C9A\u1C9C\x05\b\x05\x02" +
		"\u1C9B\u1C9A\x03\x02\x02\x02\u1C9C\u1C9D\x03\x02\x02\x02\u1C9D\u1C9B\x03" +
		"\x02\x02\x02\u1C9D\u1C9E\x03\x02\x02\x02\u1C9E\u1CA5\x03\x02\x02\x02\u1C9F" +
		"\u1CA1\x07\u0175\x02\x02\u1CA0\u1CA2\x05\b\x05\x02\u1CA1\u1CA0\x03\x02" +
		"\x02\x02\u1CA2\u1CA3\x03\x02\x02\x02\u1CA3\u1CA1\x03\x02\x02\x02\u1CA3" +
		"\u1CA4\x03\x02\x02\x02\u1CA4\u1CA6\x03\x02\x02\x02\u1CA5\u1C9F\x03\x02" +
		"\x02\x02\u1CA5\u1CA6\x03\x02\x02\x02\u1CA6\u1CA7\x03\x02\x02\x02\u1CA7" +
		"\u1CA8\x05\u0234\u011B\x02\u1CA8\u0233\x03\x02\x02\x02\u1CA9\u1CAB\t$" +
		"\x02\x02\u1CAA\u1CAC\x05\b\x05\x02\u1CAB\u1CAA\x03\x02\x02\x02\u1CAC\u1CAD" +
		"\x03\x02\x02\x02\u1CAD\u1CAB\x03\x02\x02\x02\u1CAD\u1CAE\x03\x02\x02\x02" +
		"\u1CAE\u1CB0\x03\x02\x02\x02\u1CAF\u1CA9\x03\x02\x02\x02\u1CAF\u1CB0\x03" +
		"\x02\x02\x02\u1CB0\u1CB1\x03\x02\x02\x02\u1CB1\u1CC5\x05\u0236\u011C\x02" +
		"\u1CB2\u1CB4\x07\xF4\x02\x02\u1CB3\u1CB5\x05\b\x05\x02\u1CB4\u1CB3\x03" +
		"\x02\x02\x02\u1CB5\u1CB6\x03\x02\x02\x02\u1CB6\u1CB4\x03\x02\x02\x02\u1CB6" +
		"\u1CB7\x03\x02\x02\x02\u1CB7\u1CB9\x03\x02\x02\x02\u1CB8\u1CB2\x03\x02" +
		"\x02\x02\u1CB8\u1CB9\x03\x02\x02\x02\u1CB9\u1CBA\x03\x02\x02\x02\u1CBA" +
		"\u1CC2\t\t\x02\x02\u1CBB\u1CBD\x05\b\x05\x02\u1CBC\u1CBB\x03\x02\x02\x02" +
		"\u1CBD\u1CBE\x03\x02\x02\x02\u1CBE\u1CBC\x03\x02\x02\x02\u1CBE\u1CBF\x03" +
		"\x02\x02\x02\u1CBF\u1CC0\x03\x02\x02\x02\u1CC0\u1CC1\x07\xAA\x02\x02\u1CC1" +
		"\u1CC3\x03\x02\x02\x02\u1CC2\u1CBC\x03\x02\x02\x02\u1CC2\u1CC3\x03\x02" +
		"\x02\x02\u1CC3\u1CC5\x03\x02\x02\x02\u1CC4\u1CAF\x03\x02\x02\x02\u1CC4" +
		"\u1CB8\x03\x02\x02\x02\u1CC5\u0235\x03\x02\x02\x02\u1CC6\u1CCB\x07\u01B5" +
		"\x02\x02\u1CC7\u1CCB\x05\u01CE\xE8\x02\u1CC8\u1CCB\x07w\x02\x02\u1CC9" +
		"\u1CCB\x07\u011A\x02\x02\u1CCA\u1CC6\x03\x02\x02\x02\u1CCA\u1CC7\x03\x02" +
		"\x02\x02\u1CCA\u1CC8\x03\x02\x02\x02\u1CCA\u1CC9\x03\x02\x02\x02\u1CCB" +
		"\u0237\x03\x02\x02\x02\u1CCC\u1CCD\x07\u01B8\x02\x02\u1CCD\u0239\x03\x02" +
		"\x02\x02\u1CCE\u1CD2\x07\xD8\x02\x02\u1CCF\u1CD1\x05\b\x05\x02\u1CD0\u1CCF" +
		"\x03\x02\x02\x02\u1CD1\u1CD4\x03\x02\x02\x02\u1CD2\u1CD0\x03\x02\x02\x02" +
		"\u1CD2\u1CD3\x03\x02\x02\x02\u1CD3\u1CD5\x03\x02\x02\x02\u1CD4\u1CD2\x03" +
		"\x02\x02\x02\u1CD5\u1CD9\x07\u01B2\x02\x02\u1CD6\u1CD8\x05\b\x05\x02\u1CD7" +
		"\u1CD6\x03\x02\x02\x02\u1CD8\u1CDB\x03\x02\x02\x02\u1CD9\u1CD7\x03\x02" +
		"\x02\x02\u1CD9\u1CDA\x03\x02\x02\x02\u1CDA\u1D13\x03\x02\x02\x02\u1CDB" +
		"\u1CD9\x03\x02\x02\x02\u1CDC\u1CE0\x05\u0254\u012B\x02\u1CDD\u1CDF\x05" +
		"\b\x05\x02\u1CDE\u1CDD\x03\x02\x02\x02\u1CDF\u1CE2\x03\x02\x02\x02\u1CE0" +
		"\u1CDE\x03\x02\x02\x02\u1CE0\u1CE1\x03\x02\x02\x02\u1CE1\u1CE4\x03\x02" +
		"\x02\x02\u1CE2\u1CE0\x03\x02\x02\x02\u1CE3\u1CDC\x03\x02\x02\x02\u1CE4" +
		"\u1CE7\x03\x02\x02\x02\u1CE5\u1CE3\x03\x02\x02\x02\u1CE5\u1CE6\x03\x02" +
		"\x02\x02\u1CE6\u1CF1\x03\x02\x02\x02\u1CE7\u1CE5\x03\x02\x02\x02\u1CE8" +
		"\u1CEC\x05\u0250\u0129\x02\u1CE9\u1CEB\x05\b\x05\x02\u1CEA\u1CE9\x03\x02" +
		"\x02\x02\u1CEB\u1CEE\x03\x02\x02\x02\u1CEC\u1CEA\x03\x02\x02\x02\u1CEC" +
		"\u1CED\x03\x02\x02\x02\u1CED\u1CF0\x03\x02\x02\x02\u1CEE\u1CEC\x03\x02" +
		"\x02\x02\u1CEF\u1CE8\x03\x02\x02\x02\u1CF0\u1CF3\x03\x02\x02\x02\u1CF1" +
		"\u1CEF\x03\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02\u1CF2\u1CFD\x03\x02" +
		"\x02\x02\u1CF3\u1CF1\x03\x02\x02\x02\u1CF4\u1CF8\x05\u0244\u0123\x02\u1CF5" +
		"\u1CF7\x05\b\x05\x02\u1CF6\u1CF5\x03\x02\x02\x02\u1CF7\u1CFA\x03\x02\x02" +
		"\x02\u1CF8\u1CF6\x03\x02\x02\x02\u1CF8\u1CF9\x03\x02\x02\x02\u1CF9\u1CFC" +
		"\x03\x02\x02\x02\u1CFA\u1CF8\x03\x02\x02\x02\u1CFB\u1CF4\x03\x02\x02\x02" +
		"\u1CFC\u1CFF\x03\x02\x02\x02\u1CFD\u1CFB\x03\x02\x02\x02\u1CFD\u1CFE\x03" +
		"\x02\x02\x02\u1CFE\u1D09\x03\x02\x02\x02\u1CFF\u1CFD\x03\x02\x02\x02\u1D00" +
		"\u1D04\x05\u023C\u011F\x02\u1D01\u1D03\x05\b\x05\x02\u1D02\u1D01\x03\x02" +
		"\x02\x02\u1D03\u1D06\x03\x02\x02\x02\u1D04\u1D02\x03\x02\x02\x02\u1D04" +
		"\u1D05\x03\x02\x02\x02\u1D05\u1D08\x03\x02\x02\x02\u1D06\u1D04\x03\x02" +
		"\x02\x02\u1D07\u1D00\x03\x02\x02\x02\u1D08\u1D0B\x03\x02\x02\x02\u1D09" +
		"\u1D07\x03\x02\x02\x02\u1D09\u1D0A\x03\x02\x02\x02\u1D0A\u1D0C\x03\x02" +
		"\x02\x02\u1D0B\u1D09\x03\x02\x02\x02\u1D0C\u1D10\x07\u01B2\x02\x02\u1D0D" +
		"\u1D0F\x05\b\x05\x02\u1D0E\u1D0D\x03\x02\x02\x02\u1D0F\u1D12\x03\x02\x02" +
		"\x02\u1D10\u1D0E\x03\x02\x02\x02\u1D10\u1D11\x03\x02\x02\x02\u1D11\u1D14" +
		"\x03\x02\x02\x02\u1D12\u1D10\x03\x02\x02\x02\u1D13\u1CE5\x03\x02\x02\x02" +
		"\u1D13\u1D14\x03\x02\x02\x02\u1D14\u023B\x03\x02\x02\x02\u1D15\u1D17\x07" +
		"\xF4\x02\x02\u1D16\u1D18\x05\b\x05\x02\u1D17\u1D16\x03\x02\x02\x02\u1D18" +
		"\u1D19\x03\x02\x02\x02\u1D19\u1D17\x03\x02\x02\x02\u1D19\u1D1A\x03\x02" +
		"\x02\x02\u1D1A\u1D1B\x03\x02\x02\x02\u1D1B\u1D1D\x07\xAA\x02\x02\u1D1C" +
		"\u1D1E\x05\b\x05\x02\u1D1D\u1D1C\x03\x02\x02\x02\u1D1E\u1D1F\x03\x02\x02" +
		"\x02\u1D1F\u1D1D\x03\x02\x02\x02\u1D1F\u1D20\x03\x02\x02\x02\u1D20\u1D27" +
		"\x03\x02\x02\x02\u1D21\u1D23\x07\u016E\x02\x02\u1D22\u1D24\x05\b\x05\x02" +
		"\u1D23\u1D22\x03\x02\x02\x02\u1D24\u1D25\x03\x02\x02\x02\u1D25\u1D23\x03" +
		"\x02\x02\x02\u1D25\u1D26\x03\x02\x02\x02\u1D26\u1D28\x03\x02\x02\x02\u1D27" +
		"\u1D21\x03\x02\x02\x02\u1D27\u1D28\x03\x02\x02\x02\u1D28\u1D2F\x03\x02" +
		"\x02\x02\u1D29\u1D2B\x07U\x02\x02\u1D2A\u1D2C\x05\b\x05\x02\u1D2B\u1D2A" +
		"\x03\x02\x02\x02\u1D2C\u1D2D\x03\x02\x02\x02\u1D2D\u1D2B\x03\x02\x02\x02" +
		"\u1D2D\u1D2E\x03\x02\x02\x02\u1D2E\u1D30\x03\x02\x02\x02\u1D2F\u1D29\x03" +
		"\x02\x02\x02\u1D2F\u1D30\x03\x02\x02\x02\u1D30\u1D38\x03\x02\x02\x02\u1D31" +
		"\u1D35\x05\u023E\u0120\x02\u1D32\u1D34\x05\b\x05\x02\u1D33\u1D32\x03\x02" +
		"\x02\x02\u1D34\u1D37\x03\x02\x02\x02\u1D35\u1D33\x03\x02\x02\x02\u1D35" +
		"\u1D36\x03\x02\x02\x02\u1D36\u1D39\x03\x02\x02\x02\u1D37\u1D35\x03\x02" +
		"\x02\x02\u1D38\u1D31\x03\x02\x02\x02\u1D39\u1D3A\x03\x02\x02\x02\u1D3A" +
		"\u1D38\x03\x02\x02\x02\u1D3A\u1D3B\x03\x02\x02\x02\u1D3B\u023D\x03\x02" +
		"\x02\x02\u1D3C\u1D4A\x05\u0240\u0121\x02\u1D3D\u1D3F\x05\b\x05\x02\u1D3E" +
		"\u1D3D\x03\x02\x02\x02\u1D3F\u1D40\x03\x02\x02\x02\u1D40\u1D3E\x03\x02" +
		"\x02\x02\u1D40\u1D41\x03\x02\x02\x02\u1D41\u1D42\x03\x02\x02\x02\u1D42" +
		"\u1D44\x07\u0117\x02\x02\u1D43\u1D45\x05\b\x05\x02\u1D44\u1D43\x03\x02" +
		"\x02\x02\u1D45\u1D46\x03\x02\x02\x02\u1D46\u1D44\x03\x02\x02\x02\u1D46" +
		"\u1D47\x03\x02\x02\x02\u1D47\u1D48\x03\x02\x02\x02\u1D48\u1D49\x05\u0242" +
		"\u0122\x02\u1D49\u1D4B\x03\x02\x02\x02\u1D4A\u1D3E\x03\x02\x02\x02\u1D4A" +
		"\u1D4B\x03\x02\x02\x02\u1D4B\u023F\x03\x02\x02\x02\u1D4C\u1D4D\x07\u01B8" +
		"\x02\x02\u1D4D\u0241\x03\x02\x02\x02\u1D4E\u1D4F\x07\u01B6\x02\x02\u1D4F" +
		"\u0243\x03\x02\x02\x02\u1D50\u1D52\x07\u0136\x02\x02\u1D51\u1D53\x05\b" +
		"\x05\x02\u1D52\u1D51\x03\x02\x02\x02\u1D53\u1D54\x03\x02\x02\x02\u1D54" +
		"\u1D52\x03\x02\x02\x02\u1D54\u1D55\x03\x02\x02\x02\u1D55\u1D62\x03\x02" +
		"\x02\x02\u1D56\u1D58\x07\u0102\x02\x02\u1D57\u1D59\x05\b\x05\x02\u1D58" +
		"\u1D57\x03\x02\x02\x02\u1D59\u1D5A\x03\x02\x02\x02\u1D5A\u1D58\x03\x02" +
		"\x02\x02\u1D5A\u1D5B\x03\x02\x02\x02\u1D5B\u1D5C\x03\x02\x02\x02\u1D5C" +
		"\u1D5E\x05\u0238\u011D\x02\u1D5D\u1D5F\x05\b\x05\x02\u1D5E\u1D5D\x03\x02" +
		"\x02\x02\u1D5F\u1D60\x03\x02\x02\x02\u1D60\u1D5E\x03\x02\x02\x02\u1D60" +
		"\u1D61\x03\x02\x02\x02\u1D61\u1D63\x03\x02\x02\x02\u1D62\u1D56\x03\x02" +
		"\x02\x02\u1D62\u1D63\x03\x02\x02\x02\u1D63\u1D6A\x03\x02\x02\x02\u1D64" +
		"\u1D66\x07\xA0\x02\x02\u1D65\u1D67\x05\b\x05\x02\u1D66\u1D65\x03\x02\x02" +
		"\x02\u1D67\u1D68\x03\x02\x02\x02\u1D68\u1D66\x03\x02\x02\x02\u1D68\u1D69" +
		"\x03\x02\x02\x02\u1D69\u1D6B\x03\x02\x02\x02\u1D6A\u1D64\x03\x02\x02\x02" +
		"\u1D6A\u1D6B\x03\x02\x02\x02\u1D6B\u1D6C\x03\x02\x02\x02\u1D6C\u1D6D\x05" +
		"\u0246\u0124\x02\u1D6D\u0245\x03\x02\x02\x02\u1D6E\u1D70\x05\u024C\u0127" +
		"\x02\u1D6F\u1D71\x05\b\x05\x02\u1D70\u1D6F\x03\x02\x02\x02\u1D71\u1D72" +
		"\x03\x02\x02\x02\u1D72\u1D70\x03\x02\x02\x02\u1D72\u1D73\x03\x02\x02\x02" +
		"\u1D73\u1D7A\x03\x02\x02\x02\u1D74\u1D76\x07\xFF\x02\x02\u1D75\u1D77\x05" +
		"\b\x05\x02\u1D76\u1D75\x03\x02\x02\x02\u1D77\u1D78\x03\x02\x02\x02\u1D78" +
		"\u1D76\x03\x02\x02\x02\u1D78\u1D79\x03\x02\x02\x02\u1D79\u1D7B\x03\x02" +
		"\x02\x02\u1D7A\u1D74\x03\x02\x02\x02\u1D7A\u1D7B\x03\x02\x02\x02\u1D7B" +
		"\u1D7C\x03\x02\x02\x02\u1D7C\u1D7D\x05\u0238\u011D\x02\u1D7D\u1D88\x03" +
		"\x02\x02\x02\u1D7E\u1D80\x05\u0248\u0125\x02\u1D7F\u1D81\x05\b\x05\x02" +
		"\u1D80\u1D7F\x03\x02\x02\x02\u1D81\u1D82\x03\x02\x02\x02\u1D82\u1D80\x03" +
		"\x02\x02\x02\u1D82\u1D83\x03\x02\x02\x02\u1D83\u1D84\x03\x02\x02\x02\u1D84" +
		"\u1D85\x07<\x02\x02\u1D85\u1D88\x03\x02\x02\x02\u1D86\u1D88\x05\u024A" +
		"\u0126\x02\u1D87\u1D6E\x03\x02\x02\x02\u1D87\u1D7E\x03\x02\x02\x02\u1D87" +
		"\u1D86\x03\x02\x02\x02\u1D88\u0247\x03\x02\x02\x02\u1D89\u1D8A\x07\u01B6" +
		"\x02\x02\u1D8A\u0249\x03\x02\x02\x02\u1D8B\u1D8C\x07\u01B8\x02\x02\u1D8C" +
		"\u024B\x03\x02\x02\x02\u1D8D\u1D8F\x07\x81\x02\x02\u1D8E\u1D90\x05\b\x05" +
		"\x02\u1D8F\u1D8E\x03\x02\x02\x02\u1D90\u1D91\x03\x02\x02\x02\u1D91\u1D8F" +
		"\x03\x02\x02\x02\u1D91\u1D92\x03\x02\x02\x02\u1D92\u1D99\x03\x02\x02\x02" +
		"\u1D93\u1D95\x07\xFF\x02\x02\u1D94\u1D96\x05\b\x05\x02\u1D95\u1D94\x03" +
		"\x02\x02\x02\u1D96\u1D97\x03\x02\x02\x02\u1D97\u1D95\x03\x02\x02\x02\u1D97" +
		"\u1D98\x03\x02\x02\x02\u1D98\u1D9A\x03\x02\x02\x02\u1D99\u1D93\x03\x02" +
		"\x02\x02\u1D99\u1D9A\x03\x02\x02\x02\u1D9A\u1D9C\x03\x02\x02\x02\u1D9B" +
		"\u1D8D\x03\x02\x02\x02\u1D9B\u1D9C\x03\x02\x02\x02\u1D9C\u1D9D\x03\x02" +
		"\x02\x02\u1D9D\u1DA7\t\t\x02\x02\u1D9E\u1DA0\x05\u024E\u0128\x02\u1D9F" +
		"\u1DA1\x05\b\x05\x02\u1DA0\u1D9F\x03\x02\x02\x02\u1DA1\u1DA2\x03\x02\x02" +
		"\x02\u1DA2\u1DA0\x03\x02\x02\x02\u1DA2\u1DA3\x03\x02\x02\x02\u1DA3\u1DA4" +
		"\x03\x02\x02\x02\u1DA4\u1DA5\x07\u0127\x02\x02\u1DA5\u1DA7\x03\x02\x02" +
		"\x02\u1DA6\u1D9B\x03\x02\x02\x02\u1DA6\u1D9E\x03\x02\x02\x02\u1DA7\u024D" +
		"\x03\x02\x02\x02\u1DA8\u1DA9\x07\u01B6\x02\x02\u1DA9\u024F\x03\x02\x02" +
		"\x02\u1DAA\u1DAC\x07\u0143\x02\x02\u1DAB\u1DAD\x05\b\x05\x02\u1DAC\u1DAB" +
		"\x03\x02\x02\x02\u1DAD\u1DAE\x03\x02\x02\x02\u1DAE\u1DAC\x03\x02\x02\x02" +
		"\u1DAE\u1DAF\x03\x02\x02\x02\u1DAF\u1DB6\x03\x02\x02\x02\u1DB0\u1DB2\t" +
		"%\x02\x02\u1DB1\u1DB3\x05\b\x05\x02\u1DB2\u1DB1\x03\x02\x02\x02\u1DB3" +
		"\u1DB4\x03\x02\x02\x02\u1DB4\u1DB2\x03\x02\x02\x02\u1DB4\u1DB5\x03\x02" +
		"\x02\x02\u1DB5\u1DB7\x03\x02\x02\x02\u1DB6\u1DB0\x03\x02\x02\x02\u1DB6" +
		"\u1DB7\x03\x02\x02\x02\u1DB7\u1DBE\x03\x02\x02\x02\u1DB8\u1DBA\x07\x17" +
		"\x02\x02\u1DB9\u1DBB\x05\b\x05\x02\u1DBA\u1DB9\x03\x02\x02\x02\u1DBB\u1DBC" +
		"\x03\x02\x02\x02\u1DBC\u1DBA\x03\x02\x02\x02\u1DBC\u1DBD\x03\x02\x02\x02" +
		"\u1DBD\u1DBF\x03\x02\x02\x02\u1DBE\u1DB8\x03\x02\x02\x02\u1DBE\u1DBF\x03" +
		"\x02\x02\x02\u1DBF\u1DC6\x03\x02\x02\x02\u1DC0\u1DC2\x07\xB5\x02\x02\u1DC1" +
		"\u1DC3\x05\b\x05\x02\u1DC2\u1DC1\x03\x02\x02\x02\u1DC3\u1DC4\x03\x02\x02" +
		"\x02\u1DC4\u1DC2\x03\x02\x02\x02\u1DC4\u1DC5\x03\x02\x02\x02\u1DC5\u1DC7" +
		"\x03\x02\x02\x02\u1DC6\u1DC0\x03\x02\x02\x02\u1DC6\u1DC7\x03\x02\x02\x02" +
		"\u1DC7\u1DC8\x03\x02\x02\x02\u1DC8\u1DD0\x05\u0252\u012A\x02\u1DC9\u1DCB" +
		"\x05\b\x05\x02\u1DCA\u1DC9\x03\x02\x02\x02\u1DCB\u1DCC\x03\x02\x02\x02" +
		"\u1DCC\u1DCA\x03\x02\x02\x02\u1DCC\u1DCD\x03\x02\x02\x02\u1DCD\u1DCE\x03" +
		"\x02\x02\x02\u1DCE\u1DCF\x05\u0252\u012A\x02\u1DCF\u1DD1\x03\x02\x02\x02" +
		"\u1DD0\u1DCA\x03\x02\x02\x02\u1DD1\u1DD2\x03\x02\x02\x02\u1DD2\u1DD0\x03" +
		"\x02\x02\x02\u1DD2\u1DD3\x03\x02\x02\x02\u1DD3\u0251\x03\x02\x02\x02\u1DD4" +
		"\u1DD5\x07\u01B8\x02\x02\u1DD5\u0253\x03\x02\x02\x02\u1DD6\u1DD8\x07\x15" +
		"\x02\x02\u1DD7\u1DD9\x05\b\x05\x02\u1DD8\u1DD7\x03\x02\x02\x02\u1DD9\u1DDA" +
		"\x03\x02\x02\x02\u1DDA\u1DD8\x03\x02\x02\x02\u1DDA\u1DDB\x03\x02\x02\x02" +
		"\u1DDB\u1DE2\x03\x02\x02\x02\u1DDC\u1DDE\x05\u0256\u012C\x02\u1DDD\u1DDF" +
		"\x05\b\x05\x02\u1DDE\u1DDD\x03\x02\x02\x02\u1DDF\u1DE0\x03\x02\x02\x02" +
		"\u1DE0\u1DDE\x03\x02\x02\x02\u1DE0\u1DE1\x03\x02\x02\x02\u1DE1\u1DE3\x03" +
		"\x02\x02\x02\u1DE2\u1DDC\x03\x02\x02\x02\u1DE3\u1DE4\x03\x02\x02\x02\u1DE4" +
		"\u1DE2\x03\x02\x02\x02\u1DE4\u1DE5\x03\x02\x02\x02\u1DE5\u1DE6\x03\x02" +
		"\x02\x02\u1DE6\u1DE8\x07\u0102\x02\x02\u1DE7\u1DE9\x05\b\x05\x02\u1DE8" +
		"\u1DE7\x03\x02\x02\x02\u1DE9\u1DEA\x03\x02\x02\x02\u1DEA\u1DE8\x03\x02" +
		"\x02\x02\u1DEA\u1DEB\x03\x02\x02\x02\u1DEB\u1DF3\x03\x02\x02\x02\u1DEC" +
		"\u1DF0\x05\u0238\u011D\x02\u1DED\u1DEF\x05\b\x05\x02\u1DEE\u1DED\x03\x02" +
		"\x02\x02\u1DEF\u1DF2\x03\x02\x02\x02\u1DF0\u1DEE\x03\x02\x02\x02\u1DF0" +
		"\u1DF1\x03\x02\x02\x02\u1DF1\u1DF4\x03\x02\x02\x02\u1DF2\u1DF0\x03\x02" +
		"\x02\x02\u1DF3\u1DEC\x03\x02\x02\x02\u1DF4\u1DF5\x03\x02\x02\x02\u1DF5" +
		"\u1DF3\x03\x02\x02\x02\u1DF5\u1DF6\x03\x02\x02\x02\u1DF6\u0255\x03\x02" +
		"\x02\x02\u1DF7\u1E1D\x07p\x02\x02\u1DF8\u1DFA\x07\xA5\x02\x02\u1DF9\u1DFB" +
		"\x05\b\x05\x02\u1DFA\u1DF9\x03\x02\x02\x02\u1DFB\u1DFC\x03\x02\x02\x02" +
		"\u1DFC\u1DFA\x03\x02\x02\x02\u1DFC\u1DFD\x03\x02\x02\x02\u1DFD\u1DFE\x03" +
		"\x02\x02\x02\u1DFE\u1DFF\x05\u025C\u012F\x02\u1DFF\u1E1D\x03\x02\x02\x02" +
		"\u1E00\u1E1D\x07\xAE\x02\x02\u1E01\u1E1D\x07\xE9\x02\x02\u1E02\u1E1D\x07" +
		"\xEE\x02\x02\u1E03\u1E05\t&\x02\x02\u1E04\u1E06\x05\b\x05\x02\u1E05\u1E04" +
		"\x03\x02\x02\x02\u1E06\u1E07\x03\x02\x02\x02\u1E07\u1E05\x03\x02\x02\x02" +
		"\u1E07\u1E08\x03\x02\x02\x02\u1E08\u1E0A\x03\x02\x02\x02\u1E09\u1E03\x03" +
		"\x02\x02\x02\u1E09\u1E0A\x03\x02\x02\x02\u1E0A\u1E0B\x03\x02\x02\x02\u1E0B" +
		"\u1E0D\x07\u0119\x02\x02\u1E0C\u1E0E\x05\b\x05\x02\u1E0D\u1E0C\x03\x02" +
		"\x02\x02\u1E0E\u1E0F\x03\x02\x02\x02\u1E0F\u1E0D\x03\x02\x02\x02\u1E0F" +
		"\u1E10\x03\x02\x02\x02\u1E10\u1E11\x03\x02\x02\x02\u1E11\u1E12\x05\u025A" +
		"\u012E\x02\u1E12\u1E1D\x03\x02\x02\x02\u1E13\u1E1D\x07\u011B\x02\x02\u1E14" +
		"\u1E16\x07\u018A\x02\x02\u1E15\u1E17\x05\b\x05\x02\u1E16\u1E15\x03\x02" +
		"\x02\x02\u1E17\u1E18\x03\x02\x02\x02\u1E18\u1E16\x03\x02\x02\x02\u1E18" +
		"\u1E19\x03\x02\x02\x02\u1E19\u1E1A\x03\x02\x02\x02\u1E1A\u1E1B\x05\u0258" +
		"\u012D\x02\u1E1B\u1E1D\x03\x02\x02\x02\u1E1C\u1DF7\x03\x02\x02\x02\u1E1C" +
		"\u1DF8\x03\x02\x02\x02\u1E1C\u1E00\x03\x02\x02\x02\u1E1C\u1E01\x03\x02" +
		"\x02\x02\u1E1C\u1E02\x03\x02\x02\x02\u1E1C\u1E09\x03\x02\x02\x02\u1E1C" +
		"\u1E13\x03\x02\x02\x02\u1E1C\u1E14\x03\x02\x02\x02\u1E1D\u0257\x03\x02" +
		"\x02\x02\u1E1E\u1E1F\x07\u01B6\x02\x02\u1E1F\u0259\x03\x02\x02\x02\u1E20" +
		"\u1E21\x07\u01B6\x02\x02\u1E21\u025B\x03\x02\x02\x02\u1E22\u1E23\x07\u01B6" +
		"\x02\x02\u1E23\u025D\x03\x02\x02\x02\u1E24\u1E25\b\u0130\x01\x02\u1E25" +
		"\u1E29\x07\u01AC\x02\x02\u1E26\u1E28\x05\n\x06\x02\u1E27\u1E26\x03\x02" +
		"\x02\x02\u1E28\u1E2B\x03\x02\x02\x02\u1E29\u1E27\x03\x02\x02\x02\u1E29" +
		"\u1E2A\x03\x02\x02\x02\u1E2A\u1E2C\x03\x02\x02\x02\u1E2B\u1E29\x03\x02" +
		"\x02\x02\u1E2C\u1E30\x05\u025E\u0130\x02\u1E2D\u1E2F\x05\n\x06\x02\u1E2E" +
		"\u1E2D\x03\x02\x02\x02\u1E2F\u1E32\x03\x02\x02\x02\u1E30\u1E2E\x03\x02" +
		"\x02\x02\u1E30\u1E31\x03\x02\x02\x02\u1E31\u1E33\x03\x02\x02\x02\u1E32" +
		"\u1E30\x03\x02\x02\x02\u1E33\u1E34\x07\u01AD\x02\x02\u1E34\u1E41\x03\x02" +
		"\x02\x02\u1E35\u1E39\x05\u0264\u0133\x02\u1E36\u1E38\x05\n\x06\x02\u1E37" +
		"\u1E36\x03\x02\x02\x02\u1E38\u1E3B\x03\x02\x02\x02\u1E39\u1E37\x03\x02" +
		"\x02\x02\u1E39\u1E3A\x03\x02\x02\x02\u1E3A\u1E3C\x03\x02\x02\x02\u1E3B" +
		"\u1E39\x03\x02\x02\x02\u1E3C\u1E3D\x05\u025E\u0130\x05\u1E3D\u1E41\x03" +
		"\x02\x02\x02\u1E3E\u1E41\x05\u027A\u013E\x02\u1E3F\u1E41\x05\u0260\u0131" +
		"\x02\u1E40\u1E24\x03\x02\x02\x02\u1E40\u1E35\x03\x02\x02\x02\u1E40\u1E3E" +
		"\x03\x02\x02\x02\u1E40\u1E3F\x03\x02\x02\x02\u1E41\u1E54\x03\x02\x02\x02" +
		"\u1E42\u1E46\f\x06\x02\x02\u1E43\u1E45\x05\n\x06\x02\u1E44\u1E43\x03\x02" +
		"\x02\x02\u1E45\u1E48\x03\x02\x02\x02\u1E46\u1E44\x03\x02\x02\x02\u1E46" +
		"\u1E47\x03\x02\x02\x02\u1E47\u1E49\x03\x02\x02\x02\u1E48\u1E46\x03\x02" +
		"\x02\x02\u1E49\u1E4D\x05\u0262\u0132\x02\u1E4A\u1E4C\x05\n\x06\x02\u1E4B" +
		"\u1E4A\x03\x02\x02\x02\u1E4C\u1E4F\x03\x02\x02\x02\u1E4D\u1E4B\x03\x02" +
		"\x02\x02\u1E4D\u1E4E\x03\x02\x02\x02\u1E4E\u1E50\x03\x02\x02\x02\u1E4F" +
		"\u1E4D\x03\x02\x02\x02\u1E50\u1E51\x05\u025E\u0130\x07\u1E51\u1E53\x03" +
		"\x02\x02\x02\u1E52\u1E42\x03\x02\x02\x02\u1E53\u1E56\x03\x02\x02\x02\u1E54" +
		"\u1E52\x03\x02\x02\x02\u1E54\u1E55\x03\x02\x02\x02\u1E55\u025F\x03\x02" +
		"\x02\x02\u1E56\u1E54\x03\x02\x02\x02\u1E57\u1E5B\x07\u01B6\x02\x02\u1E58" +
		"\u1E5B\x07\u01B5\x02\x02\u1E59\u1E5B\x05\x06\x04\x02\u1E5A\u1E57\x03\x02" +
		"\x02\x02\u1E5A\u1E58\x03\x02\x02\x02\u1E5A\u1E59\x03\x02\x02\x02\u1E5B" +
		"\u0261\x03\x02\x02\x02\u1E5C\u1E63\x07\u01A0\x02\x02\u1E5D\u1E63\x07\u01A1" +
		"\x02\x02\u1E5E\u1E63\x07\u01A2\x02\x02\u1E5F\u1E63\x07\u01A3\x02\x02\u1E60" +
		"\u1E61\x07\u01A2\x02\x02\u1E61\u1E63\x07\u01A2\x02\x02\u1E62\u1E5C\x03" +
		"\x02\x02\x02\u1E62\u1E5D\x03\x02\x02\x02\u1E62\u1E5E\x03\x02\x02\x02\u1E62" +
		"\u1E5F\x03\x02\x02\x02\u1E62\u1E60\x03\x02\x02\x02\u1E63\u0263\x03\x02" +
		"\x02\x02\u1E64\u1E65\t\'\x02\x02\u1E65\u0265\x03\x02\x02\x02\u1E66\u1E67" +
		"\b\u0134\x01\x02\u1E67\u1E6B\x07\u01AC\x02\x02\u1E68\u1E6A\x05\n\x06\x02" +
		"\u1E69\u1E68\x03\x02\x02\x02\u1E6A\u1E6D\x03\x02\x02\x02\u1E6B\u1E69\x03" +
		"\x02\x02\x02\u1E6B\u1E6C\x03\x02\x02\x02\u1E6C\u1E6E\x03\x02\x02\x02\u1E6D" +
		"\u1E6B\x03\x02\x02\x02\u1E6E\u1E72\x05\u0266\u0134\x02\u1E6F\u1E71\x05" +
		"\n\x06\x02\u1E70\u1E6F\x03\x02\x02\x02\u1E71\u1E74\x03\x02\x02\x02\u1E72" +
		"\u1E70\x03\x02\x02\x02\u1E72\u1E73\x03\x02\x02\x02\u1E73\u1E75\x03\x02" +
		"\x02\x02\u1E74\u1E72\x03\x02\x02\x02\u1E75\u1E76\x07\u01AD\x02\x02\u1E76" +
		"\u1E84\x03\x02\x02\x02\u1E77\u1E7B\x07\xFA\x02\x02\u1E78\u1E7A\x05\n\x06" +
		"\x02\u1E79\u1E78\x03\x02\x02\x02\u1E7A\u1E7D\x03\x02\x02\x02\u1E7B\u1E79" +
		"\x03\x02\x02\x02\u1E7B\u1E7C\x03\x02\x02\x02\u1E7C\u1E7E\x03\x02\x02\x02" +
		"\u1E7D\u1E7B\x03\x02\x02\x02\u1E7E\u1E84\x05\u0266\u0134\x07\u1E7F\u1E84" +
		"\x05\u0272\u013A\x02\u1E80\u1E84\x05\u026A\u0136\x02\u1E81\u1E84\x05\u026E" +
		"\u0138\x02\u1E82\u1E84\x05\u0268\u0135\x02\u1E83\u1E66\x03\x02\x02\x02" +
		"\u1E83\u1E77\x03\x02\x02\x02\u1E83\u1E7F\x03\x02\x02\x02\u1E83\u1E80\x03" +
		"\x02\x02\x02\u1E83\u1E81\x03\x02\x02\x02\u1E83\u1E82\x03\x02\x02\x02\u1E84" +
		"\u1E97\x03\x02\x02\x02\u1E85\u1E89\f\b\x02\x02\u1E86\u1E88\x05\n\x06\x02" +
		"\u1E87\u1E86\x03\x02\x02\x02\u1E88\u1E8B\x03\x02\x02\x02\u1E89\u1E87\x03" +
		"\x02\x02\x02\u1E89\u1E8A\x03\x02\x02\x02\u1E8A\u1E8C\x03\x02\x02\x02\u1E8B" +
		"\u1E89\x03\x02\x02\x02\u1E8C\u1E90\x05\u026C\u0137\x02\u1E8D\u1E8F\x05" +
		"\n\x06\x02\u1E8E\u1E8D\x03\x02\x02\x02\u1E8F\u1E92\x03\x02\x02\x02\u1E90" +
		"\u1E8E\x03\x02\x02\x02\u1E90\u1E91\x03\x02\x02\x02\u1E91\u1E93\x03\x02" +
		"\x02\x02\u1E92\u1E90\x03\x02\x02\x02\u1E93\u1E94\x05\u0266\u0134\t\u1E94" +
		"\u1E96\x03\x02\x02\x02\u1E95\u1E85\x03\x02\x02\x02\u1E96\u1E99\x03\x02" +
		"\x02\x02\u1E97\u1E95\x03\x02\x02\x02\u1E97\u1E98\x03\x02\x02\x02\u1E98" +
		"\u0267\x03\x02\x02\x02\u1E99\u1E97\x03\x02\x02\x02\u1E9A\u1EA2\x05\u01CE" +
		"\xE8\x02\u1E9B\u1E9D\x05\n\x06\x02\u1E9C\u1E9B\x03\x02\x02\x02\u1E9D\u1E9E" +
		"\x03\x02\x02\x02\u1E9E\u1E9C\x03\x02\x02\x02\u1E9E\u1E9F\x03\x02\x02\x02" +
		"\u1E9F\u1EA0\x03\x02\x02\x02\u1EA0\u1EA1\x07\xD6\x02\x02\u1EA1\u1EA3\x03" +
		"\x02\x02\x02\u1EA2\u1E9C\x03\x02\x02\x02\u1EA2\u1EA3\x03\x02\x02\x02\u1EA3" +
		"\u1EA5\x03\x02\x02\x02\u1EA4\u1EA6\x05\n\x06\x02\u1EA5\u1EA4\x03\x02\x02" +
		"\x02\u1EA6\u1EA7\x03\x02\x02\x02\u1EA7\u1EA5\x03\x02\x02\x02\u1EA7\u1EA8" +
		"\x03\x02\x02\x02\u1EA8\u1EA9\x03\x02\x02\x02\u1EA9\u1EAA\t(\x02\x02\u1EAA" +
		"\u0269\x03\x02\x02\x02\u1EAB\u1EAC\b\u0136\x01\x02\u1EAC\u1EB0\x05\u025E" +
		"\u0130\x02\u1EAD\u1EAF\x05\n\x06\x02\u1EAE\u1EAD\x03\x02\x02\x02\u1EAF" +
		"\u1EB2\x03\x02\x02\x02\u1EB0\u1EAE\x03\x02\x02\x02\u1EB0\u1EB1\x03\x02" +
		"\x02\x02\u1EB1\u1EB3\x03\x02\x02\x02\u1EB2\u1EB0\x03\x02\x02\x02\u1EB3" +
		"\u1EB7\x05\u0276\u013C\x02\u1EB4\u1EB6\x05\n\x06\x02\u1EB5\u1EB4\x03\x02" +
		"\x02\x02\u1EB6\u1EB9\x03\x02\x02\x02\u1EB7\u1EB5\x03\x02\x02\x02\u1EB7" +
		"\u1EB8\x03\x02\x02\x02\u1EB8\u1EBA\x03\x02\x02\x02\u1EB9\u1EB7\x03\x02" +
		"\x02\x02\u1EBA\u1EBB\x05\u025E\u0130\x02\u1EBB\u1EBF\x03\x02\x02\x02\u1EBC" +
		"\u1EBF\x05\u0272\u013A\x02\u1EBD\u1EBF\x05\u01CE\xE8\x02\u1EBE\u1EAB\x03" +
		"\x02\x02\x02\u1EBE\u1EBC\x03\x02\x02\x02\u1EBE\u1EBD\x03\x02\x02\x02\u1EBF" +
		"\u1ED8\x03\x02\x02\x02\u1EC0\u1EC2\f\x03\x02\x02\u1EC1\u1EC3\x05\n\x06" +
		"\x02\u1EC2\u1EC1\x03\x02\x02\x02\u1EC3\u1EC4\x03\x02\x02\x02\u1EC4\u1EC2" +
		"\x03\x02\x02\x02\u1EC4\u1EC5\x03\x02\x02\x02\u1EC5\u1EC6\x03\x02\x02\x02" +
		"\u1EC6\u1ECA\x05\u026C\u0137\x02\u1EC7\u1EC9\x05\n\x06\x02\u1EC8\u1EC7" +
		"\x03\x02\x02\x02\u1EC9\u1ECC\x03\x02\x02\x02\u1ECA\u1EC8\x03\x02\x02\x02" +
		"\u1ECA\u1ECB\x03\x02\x02\x02\u1ECB\u1ECD\x03\x02\x02\x02\u1ECC\u1ECA\x03" +
		"\x02\x02\x02\u1ECD\u1ED1\x05\u0276\u013C\x02\u1ECE\u1ED0\x05\n\x06\x02" +
		"\u1ECF\u1ECE\x03\x02\x02\x02\u1ED0\u1ED3\x03\x02\x02\x02\u1ED1\u1ECF\x03" +
		"\x02\x02\x02\u1ED1\u1ED2\x03\x02\x02\x02\u1ED2\u1ED4\x03\x02\x02\x02\u1ED3" +
		"\u1ED1\x03\x02\x02\x02\u1ED4\u1ED5\x05\u025E\u0130\x02\u1ED5\u1ED7\x03" +
		"\x02\x02\x02\u1ED6\u1EC0\x03\x02\x02\x02\u1ED7\u1EDA\x03\x02\x02\x02\u1ED8" +
		"\u1ED6\x03\x02\x02\x02\u1ED8\u1ED9\x03\x02\x02\x02\u1ED9\u026B\x03\x02" +
		"\x02\x02\u1EDA\u1ED8\x03\x02\x02\x02\u1EDB\u1EDC\t)\x02\x02\u1EDC\u026D" +
		"\x03\x02\x02\x02\u1EDD\u1EE5\x05\u025E\u0130\x02\u1EDE\u1EE0\x05\n\x06" +
		"\x02\u1EDF\u1EDE\x03\x02\x02\x02\u1EE0\u1EE1\x03\x02\x02\x02\u1EE1\u1EDF" +
		"\x03\x02\x02\x02\u1EE1\u1EE2\x03\x02\x02\x02\u1EE2\u1EE3\x03\x02\x02\x02" +
		"\u1EE3\u1EE4\x07\xD6\x02\x02\u1EE4\u1EE6\x03\x02\x02\x02\u1EE5\u1EDF\x03" +
		"\x02\x02\x02\u1EE5\u1EE6\x03\x02\x02\x02\u1EE6\u1EEE\x03\x02\x02\x02\u1EE7" +
		"\u1EE9\x05\n\x06\x02\u1EE8\u1EE7\x03\x02\x02\x02\u1EE9\u1EEA\x03\x02\x02" +
		"\x02\u1EEA\u1EE8\x03\x02\x02\x02\u1EEA\u1EEB\x03\x02\x02\x02\u1EEB\u1EEC" +
		"\x03\x02\x02\x02\u1EEC\u1EED\x07\xFA\x02\x02\u1EED\u1EEF\x03\x02\x02\x02" +
		"\u1EEE\u1EE8\x03\x02\x02\x02\u1EEE\u1EEF\x03\x02\x02\x02\u1EEF\u1EF1\x03" +
		"\x02\x02\x02\u1EF0\u1EF2\x05\n\x06\x02\u1EF1\u1EF0\x03\x02\x02\x02\u1EF2" +
		"\u1EF3\x03\x02\x02\x02\u1EF3\u1EF1\x03\x02\x02\x02\u1EF3\u1EF4\x03\x02" +
		"\x02\x02\u1EF4\u1EF5\x03\x02\x02\x02\u1EF5\u1EF6\x05\u0270\u0139\x02\u1EF6" +
		"\u026F\x03\x02\x02\x02\u1EF7\u1EF8\t*\x02\x02\u1EF8\u0271\x03\x02\x02" +
		"\x02\u1EF9\u1F01\x05\u027A\u013E\x02\u1EFA\u1EFC\x05\n\x06\x02\u1EFB\u1EFA" +
		"\x03\x02\x02\x02\u1EFC\u1EFD\x03\x02\x02\x02\u1EFD\u1EFB\x03\x02\x02\x02" +
		"\u1EFD\u1EFE\x03\x02\x02\x02\u1EFE\u1EFF\x03\x02\x02\x02\u1EFF\u1F00\x07" +
		"\xD6\x02\x02\u1F00\u1F02\x03\x02\x02\x02\u1F01\u1EFB\x03\x02\x02\x02\u1F01" +
		"\u1F02\x03\x02\x02\x02\u1F02\u1F0A\x03\x02\x02\x02\u1F03\u1F05\x05\n\x06" +
		"\x02\u1F04\u1F03\x03\x02\x02\x02\u1F05\u1F06\x03\x02\x02\x02\u1F06\u1F04" +
		"\x03\x02\x02\x02\u1F06\u1F07\x03\x02\x02\x02\u1F07\u1F08\x03\x02\x02\x02" +
		"\u1F08\u1F09\x07\xFA\x02\x02\u1F09\u1F0B\x03\x02\x02\x02\u1F0A\u1F04\x03" +
		"\x02\x02\x02\u1F0A\u1F0B\x03\x02\x02\x02\u1F0B\u1F0D\x03\x02\x02\x02\u1F0C" +
		"\u1F0E\x05\n\x06\x02\u1F0D\u1F0C\x03\x02\x02\x02\u1F0E\u1F0F\x03\x02\x02" +
		"\x02\u1F0F\u1F0D\x03\x02\x02\x02\u1F0F\u1F10\x03\x02\x02\x02\u1F10\u1F11" +
		"\x03\x02\x02\x02\u1F11\u1F12\x05\u0274\u013B\x02\u1F12\u0273\x03\x02\x02" +
		"\x02\u1F13\u1F14\t+\x02\x02\u1F14\u0275\x03\x02\x02\x02\u1F15\u1F19\x07" +
		"\xD6\x02\x02\u1F16\u1F18\x05\n\x06\x02\u1F17\u1F16\x03\x02\x02\x02\u1F18" +
		"\u1F1B\x03\x02\x02\x02\u1F19\u1F17\x03\x02\x02\x02\u1F19\u1F1A\x03\x02" +
		"\x02\x02\u1F1A\u1F1D\x03\x02\x02\x02\u1F1B\u1F19\x03\x02\x02\x02\u1F1C" +
		"\u1F15\x03\x02\x02\x02\u1F1C\u1F1D\x03\x02\x02\x02\u1F1D\u1FA5\x03\x02" +
		"\x02\x02\u1F1E\u1F22\x07\xFA\x02\x02\u1F1F\u1F21\x05\n\x06\x02\u1F20\u1F1F" +
		"\x03\x02\x02\x02\u1F21\u1F24\x03\x02\x02\x02\u1F22\u1F20\x03\x02\x02\x02" +
		"\u1F22\u1F23\x03\x02\x02\x02\u1F23\u1F26\x03\x02\x02\x02\u1F24\u1F22\x03" +
		"\x02\x02\x02\u1F25\u1F1E\x03\x02\x02\x02\u1F25";
	private static readonly _serializedATNSegment15: string =
		"\u1F26\x03\x02\x02\x02\u1F26\u1F63\x03\x02\x02\x02\u1F27\u1F2F\x07\xBE" +
		"\x02\x02\u1F28\u1F2A\x05\n\x06\x02\u1F29\u1F28\x03\x02\x02\x02\u1F2A\u1F2B" +
		"\x03\x02\x02\x02\u1F2B\u1F29\x03\x02\x02\x02\u1F2B\u1F2C\x03\x02\x02\x02" +
		"\u1F2C\u1F2D\x03\x02\x02\x02\u1F2D\u1F2E\x07\u0170\x02\x02\u1F2E\u1F30" +
		"\x03\x02\x02\x02\u1F2F\u1F29\x03\x02\x02\x02\u1F2F\u1F30\x03\x02\x02\x02" +
		"\u1F30\u1F64\x03\x02\x02\x02\u1F31\u1F39\x07\u01AB\x02\x02\u1F32\u1F34" +
		"\x05\n\x06\x02\u1F33\u1F32\x03\x02\x02\x02\u1F34\u1F35\x03\x02\x02\x02" +
		"\u1F35\u1F33\x03\x02\x02\x02\u1F35\u1F36\x03\x02\x02\x02\u1F36\u1F37\x03" +
		"\x02\x02\x02\u1F37\u1F38\x07\u0170\x02\x02\u1F38\u1F3A\x03\x02\x02\x02" +
		"\u1F39\u1F33\x03\x02\x02\x02\u1F39\u1F3A\x03\x02\x02\x02\u1F3A\u1F64\x03" +
		"\x02\x02\x02\u1F3B\u1F43\x07\xE0\x02\x02\u1F3C\u1F3E\x05\n\x06\x02\u1F3D" +
		"\u1F3C\x03\x02\x02\x02\u1F3E\u1F3F\x03\x02\x02\x02\u1F3F\u1F3D\x03\x02" +
		"\x02\x02\u1F3F\u1F40\x03\x02\x02\x02\u1F40\u1F41\x03\x02\x02\x02\u1F41" +
		"\u1F42\x07\u0170\x02\x02\u1F42\u1F44\x03\x02\x02\x02\u1F43\u1F3D\x03\x02" +
		"\x02\x02\u1F43\u1F44\x03\x02\x02\x02\u1F44\u1F64\x03\x02\x02\x02\u1F45" +
		"\u1F4D\x07\u01A8\x02\x02\u1F46\u1F48\x05\n\x06\x02\u1F47\u1F46\x03\x02" +
		"\x02\x02\u1F48\u1F49\x03\x02\x02\x02\u1F49\u1F47\x03\x02\x02\x02\u1F49" +
		"\u1F4A\x03\x02\x02\x02\u1F4A\u1F4B\x03\x02\x02\x02\u1F4B\u1F4C\x07\u0170" +
		"\x02\x02\u1F4C\u1F4E\x03\x02\x02\x02\u1F4D\u1F47\x03\x02\x02\x02\u1F4D" +
		"\u1F4E\x03\x02\x02\x02\u1F4E\u1F64\x03\x02\x02\x02\u1F4F\u1F57\x07\x9C" +
		"\x02\x02\u1F50\u1F52\x05\n\x06\x02\u1F51\u1F50\x03\x02\x02\x02\u1F52\u1F53" +
		"\x03\x02\x02\x02\u1F53\u1F51\x03\x02\x02\x02\u1F53\u1F54\x03\x02\x02\x02" +
		"\u1F54\u1F55\x03\x02\x02\x02\u1F55\u1F56\x07\u0175\x02\x02\u1F56\u1F58" +
		"\x03\x02\x02\x02\u1F57\u1F51\x03\x02\x02\x02\u1F57\u1F58\x03\x02\x02\x02" +
		"\u1F58\u1F64\x03\x02\x02\x02\u1F59\u1F61\x07\u01A7\x02\x02\u1F5A\u1F5C" +
		"\x05\n\x06\x02\u1F5B\u1F5A\x03\x02\x02\x02\u1F5C\u1F5D\x03\x02\x02\x02" +
		"\u1F5D\u1F5B\x03\x02\x02\x02\u1F5D\u1F5E\x03\x02\x02\x02\u1F5E\u1F5F\x03" +
		"\x02\x02\x02\u1F5F\u1F60\x07\u0175\x02\x02\u1F60\u1F62\x03\x02\x02\x02" +
		"\u1F61\u1F5B\x03\x02\x02\x02\u1F61\u1F62\x03\x02\x02\x02\u1F62\u1F64\x03" +
		"\x02\x02\x02\u1F63\u1F27\x03\x02\x02\x02\u1F63\u1F31\x03\x02\x02\x02\u1F63" +
		"\u1F3B\x03\x02\x02\x02\u1F63\u1F45\x03\x02\x02\x02\u1F63\u1F4F\x03\x02" +
		"\x02\x02\u1F63\u1F59\x03\x02\x02\x02\u1F64\u1FA6\x03\x02\x02\x02\u1F65" +
		"\u1F6D\x07\xBE\x02\x02\u1F66\u1F68\x05\n\x06\x02\u1F67\u1F66\x03\x02\x02" +
		"\x02\u1F68\u1F69\x03\x02\x02\x02\u1F69\u1F67\x03\x02\x02\x02\u1F69\u1F6A" +
		"\x03\x02\x02\x02\u1F6A\u1F6B\x03\x02\x02\x02\u1F6B\u1F6C\x07\u0170\x02" +
		"\x02\u1F6C\u1F6E\x03\x02\x02\x02\u1F6D\u1F67\x03\x02\x02\x02\u1F6D\u1F6E" +
		"\x03\x02\x02\x02\u1F6E\u1F70\x03\x02\x02\x02\u1F6F\u1F71\x05\n\x06\x02" +
		"\u1F70\u1F6F\x03\x02\x02\x02\u1F71\u1F72\x03\x02\x02\x02\u1F72\u1F70\x03" +
		"\x02\x02\x02\u1F72\u1F73\x03\x02\x02\x02\u1F73\u1F74\x03\x02\x02\x02\u1F74" +
		"\u1F76\x07\u0106\x02\x02\u1F75\u1F77\x05\n\x06\x02\u1F76\u1F75\x03\x02" +
		"\x02\x02\u1F77\u1F78\x03\x02\x02\x02\u1F78\u1F76\x03\x02\x02\x02\u1F78" +
		"\u1F79\x03\x02\x02\x02\u1F79\u1F7A\x03\x02\x02\x02\u1F7A\u1F82\x07\x9C" +
		"\x02\x02\u1F7B\u1F7D\x05\n\x06\x02\u1F7C\u1F7B\x03\x02\x02\x02\u1F7D\u1F7E" +
		"\x03\x02\x02\x02\u1F7E\u1F7C\x03\x02\x02\x02\u1F7E\u1F7F\x03\x02\x02\x02" +
		"\u1F7F\u1F80\x03\x02\x02\x02\u1F80\u1F81\x07\u0175\x02\x02\u1F81\u1F83" +
		"\x03\x02\x02\x02\u1F82\u1F7C\x03\x02\x02\x02\u1F82\u1F83\x03\x02\x02\x02" +
		"\u1F83\u1FA6\x03\x02\x02\x02\u1F84\u1FA6\x07\u01AA\x02\x02\u1F85\u1F8D" +
		"\x07\xE0\x02\x02\u1F86\u1F88\x05\n\x06\x02\u1F87\u1F86\x03\x02\x02\x02" +
		"\u1F88\u1F89\x03\x02\x02\x02\u1F89\u1F87\x03\x02\x02\x02\u1F89\u1F8A\x03" +
		"\x02\x02\x02\u1F8A\u1F8B\x03\x02\x02\x02\u1F8B\u1F8C\x07\u0170\x02\x02" +
		"\u1F8C\u1F8E\x03\x02\x02\x02\u1F8D\u1F87\x03\x02\x02\x02\u1F8D\u1F8E\x03" +
		"\x02\x02\x02\u1F8E\u1F90\x03\x02\x02\x02\u1F8F\u1F91\x05\n\x06\x02\u1F90" +
		"\u1F8F\x03\x02\x02\x02\u1F91\u1F92\x03\x02\x02\x02\u1F92\u1F90\x03\x02" +
		"\x02\x02\u1F92\u1F93\x03\x02\x02\x02\u1F93\u1F94\x03\x02\x02\x02\u1F94" +
		"\u1F96\x07\u0106\x02\x02\u1F95\u1F97\x05\n\x06\x02\u1F96\u1F95\x03\x02" +
		"\x02\x02\u1F97\u1F98\x03\x02\x02\x02\u1F98\u1F96\x03\x02\x02\x02\u1F98" +
		"\u1F99\x03\x02\x02\x02\u1F99\u1F9A\x03\x02\x02\x02\u1F9A\u1FA2\x07\x9C" +
		"\x02\x02\u1F9B\u1F9D\x05\n\x06\x02\u1F9C\u1F9B\x03\x02\x02\x02\u1F9D\u1F9E" +
		"\x03\x02\x02\x02\u1F9E\u1F9C\x03\x02\x02\x02\u1F9E\u1F9F\x03\x02\x02\x02" +
		"\u1F9F\u1FA0\x03\x02\x02\x02\u1FA0\u1FA1\x07\u0175\x02\x02\u1FA1\u1FA3" +
		"\x03\x02\x02\x02\u1FA2\u1F9C\x03\x02\x02\x02\u1FA2\u1FA3\x03\x02\x02\x02" +
		"\u1FA3\u1FA6\x03\x02\x02\x02\u1FA4\u1FA6\x07\u01A9\x02\x02\u1FA5\u1F25" +
		"\x03\x02\x02\x02\u1FA5\u1F65\x03\x02\x02\x02\u1FA5\u1F84\x03\x02\x02\x02" +
		"\u1FA5\u1F85\x03\x02\x02\x02\u1FA5\u1FA4\x03\x02\x02\x02\u1FA6\u0277\x03" +
		"\x02\x02\x02\u1FA7\u1FAF\x05\u01CE\xE8\x02\u1FA8\u1FAA\x05\n\x06\x02\u1FA9" +
		"\u1FA8\x03\x02\x02\x02\u1FAA\u1FAD\x03\x02\x02\x02\u1FAB\u1FA9\x03\x02" +
		"\x02\x02\u1FAB\u1FAC\x03\x02\x02\x02\u1FAC\u1FAE\x03\x02\x02\x02\u1FAD" +
		"\u1FAB\x03\x02\x02\x02\u1FAE\u1FB0\x05\u027E\u0140\x02\u1FAF\u1FAB\x03" +
		"\x02\x02\x02\u1FAF\u1FB0\x03\x02\x02\x02\u1FB0\u1FB8\x03\x02\x02\x02\u1FB1" +
		"\u1FB3\x05\n\x06\x02\u1FB2\u1FB1\x03\x02\x02\x02\u1FB3\u1FB6\x03\x02\x02" +
		"\x02\u1FB4\u1FB2\x03\x02\x02\x02\u1FB4\u1FB5\x03\x02\x02\x02\u1FB5\u1FB7" +
		"\x03\x02\x02\x02\u1FB6\u1FB4\x03\x02\x02\x02\u1FB7\u1FB9\x05\u0280\u0141" +
		"\x02\u1FB8\u1FB4\x03\x02\x02\x02\u1FB8\u1FB9\x03\x02\x02\x02\u1FB9\u0279" +
		"\x03\x02\x02\x02\u1FBA\u1FD6\x05\u0278\u013D\x02\u1FBB\u1FBF\x07\xB9\x02" +
		"\x02\u1FBC\u1FBE\x05\n\x06\x02\u1FBD\u1FBC\x03\x02\x02\x02\u1FBE\u1FC1" +
		"\x03\x02\x02\x02\u1FBF\u1FBD\x03\x02\x02\x02\u1FBF\u1FC0\x03\x02\x02\x02" +
		"\u1FC0\u1FC2\x03\x02\x02\x02\u1FC1\u1FBF\x03\x02\x02\x02\u1FC2\u1FCA\x05" +
		"\u0286\u0144\x02\u1FC3\u1FC5\x05\n\x06\x02\u1FC4\u1FC3\x03\x02\x02\x02" +
		"\u1FC5\u1FC8\x03\x02\x02\x02\u1FC6\u1FC4\x03\x02\x02\x02\u1FC6\u1FC7\x03" +
		"\x02\x02\x02\u1FC7\u1FC9\x03\x02\x02\x02\u1FC8\u1FC6\x03\x02\x02\x02\u1FC9" +
		"\u1FCB\x05\u027C\u013F\x02\u1FCA\u1FC6\x03\x02\x02\x02\u1FCA\u1FCB\x03" +
		"\x02\x02\x02\u1FCB\u1FD3\x03\x02\x02\x02\u1FCC\u1FCE\x05\n\x06\x02\u1FCD" +
		"\u1FCC\x03\x02\x02\x02\u1FCE\u1FD1\x03\x02\x02\x02\u1FCF\u1FCD\x03\x02" +
		"\x02\x02\u1FCF\u1FD0\x03\x02\x02\x02\u1FD0\u1FD2\x03\x02\x02\x02\u1FD1" +
		"\u1FCF\x03\x02\x02\x02\u1FD2\u1FD4\x05\u0280\u0141\x02\u1FD3\u1FCF\x03" +
		"\x02\x02\x02\u1FD3\u1FD4\x03\x02\x02\x02\u1FD4\u1FD6\x03\x02\x02\x02\u1FD5" +
		"\u1FBA\x03\x02\x02\x02\u1FD5\u1FBB\x03\x02\x02\x02\u1FD6\u027B\x03\x02" +
		"\x02\x02\u1FD7\u1FD8\x05\u027E\u0140\x02\u1FD8\u027D\x03\x02\x02\x02\u1FD9" +
		"\u1FDD\x07\u01AC\x02\x02\u1FDA\u1FDC\x05\n\x06\x02\u1FDB\u1FDA\x03\x02" +
		"\x02\x02\u1FDC\u1FDF\x03\x02\x02\x02\u1FDD\u1FDB\x03\x02\x02\x02\u1FDD" +
		"\u1FDE\x03\x02\x02\x02\u1FDE\u1FE2\x03\x02\x02\x02\u1FDF\u1FDD\x03\x02" +
		"\x02\x02\u1FE0\u1FE3\x05\u025E\u0130\x02\u1FE1\u1FE3\x07\v\x02\x02\u1FE2" +
		"\u1FE0\x03\x02\x02\x02\u1FE2\u1FE1\x03\x02\x02\x02\u1FE3\u1FF0\x03\x02" +
		"\x02\x02\u1FE4\u1FE6\x05\b\x05\x02\u1FE5\u1FE4\x03\x02\x02\x02\u1FE6\u1FE9" +
		"\x03\x02\x02\x02\u1FE7\u1FE5\x03\x02\x02\x02\u1FE7\u1FE8\x03\x02\x02\x02" +
		"\u1FE8\u1FEC\x03\x02\x02\x02\u1FE9\u1FE7\x03\x02\x02\x02\u1FEA\u1FED\x05" +
		"\u025E\u0130\x02\u1FEB\u1FED\x07\v\x02\x02\u1FEC\u1FEA\x03\x02\x02\x02" +
		"\u1FEC\u1FEB\x03\x02\x02\x02\u1FED\u1FEF\x03\x02\x02\x02\u1FEE\u1FE7\x03" +
		"\x02\x02\x02\u1FEF\u1FF2\x03\x02\x02\x02\u1FF0\u1FEE\x03\x02\x02\x02\u1FF0" +
		"\u1FF1\x03\x02\x02\x02\u1FF1\u1FF6\x03\x02\x02\x02\u1FF2\u1FF0\x03\x02" +
		"\x02\x02\u1FF3\u1FF5\x05\n\x06\x02\u1FF4\u1FF3\x03\x02\x02\x02\u1FF5\u1FF8" +
		"\x03\x02\x02\x02\u1FF6\u1FF4\x03\x02\x02\x02\u1FF6\u1FF7\x03\x02\x02\x02" +
		"\u1FF7\u1FF9\x03\x02\x02\x02\u1FF8\u1FF6\x03\x02\x02\x02\u1FF9\u1FFA\x07" +
		"\u01AD\x02\x02\u1FFA\u027F\x03\x02\x02\x02\u1FFB\u1FFF\x07\u01AC\x02\x02" +
		"\u1FFC\u1FFE\x05\n\x06\x02\u1FFD\u1FFC\x03\x02\x02\x02\u1FFE\u2001\x03" +
		"\x02\x02\x02\u1FFF\u1FFD\x03\x02\x02\x02\u1FFF\u2000\x03\x02\x02\x02\u2000" +
		"\u2002\x03\x02\x02\x02\u2001\u1FFF\x03\x02\x02\x02\u2002\u2006\x05\u0282" +
		"\u0142\x02\u2003\u2005\x05\n\x06\x02\u2004\u2003\x03\x02\x02\x02\u2005" +
		"\u2008\x03\x02\x02\x02\u2006\u2004\x03\x02\x02\x02\u2006\u2007\x03\x02" +
		"\x02\x02\u2007\u2009\x03\x02\x02\x02\u2008\u2006\x03\x02\x02\x02\u2009" +
		"\u2011\x07\u01A6\x02\x02\u200A\u200C\x05\n\x06\x02\u200B\u200A\x03\x02" +
		"\x02\x02\u200C\u200F\x03\x02\x02\x02\u200D\u200B\x03\x02\x02\x02\u200D" +
		"\u200E\x03\x02\x02\x02\u200E\u2010\x03\x02\x02\x02\u200F\u200D\x03\x02" +
		"\x02\x02\u2010\u2012\x05\u0284\u0143\x02\u2011\u200D\x03\x02\x02\x02\u2011" +
		"\u2012\x03\x02\x02\x02\u2012\u2016\x03\x02\x02\x02\u2013\u2015\x05\n\x06" +
		"\x02\u2014\u2013\x03\x02\x02\x02\u2015\u2018\x03\x02\x02\x02\u2016\u2014" +
		"\x03\x02\x02\x02\u2016\u2017\x03\x02\x02\x02\u2017\u2019\x03\x02\x02\x02" +
		"\u2018\u2016\x03\x02\x02\x02\u2019\u201A\x07\u01AD\x02\x02\u201A\u0281" +
		"\x03\x02\x02\x02\u201B\u201C\x05\u025E\u0130\x02\u201C\u0283\x03\x02\x02" +
		"\x02\u201D\u201E\x05\u025E\u0130\x02\u201E\u0285\x03\x02\x02\x02\u201F" +
		"\u2020\x07\u01B8\x02\x02\u2020\u0287\x03\x02\x02\x02\u057F\u028A\u028C" +
		"\u029C\u02A0\u02A8\u02AE\u02B4\u02BC\u02C0\u02C4\u02C7\u02CA\u02CE\u02D4" +
		"\u02D9\u02E0\u02E5\u02E8\u02ED\u02F1\u02F6\u02FD\u0302\u0309\u030F\u0313" +
		"\u0318\u031F\u0326\u032C\u0330\u0335\u0339\u033E\u0345\u034E\u0355\u035C" +
		"\u0361\u0367\u036D\u0374\u037C\u0382\u038B\u0392\u0399\u039E\u03A5\u03AA" +
		"\u03AF\u03B6\u03B9\u03BF\u03C3\u03C8\u03CE\u03D2\u03D7\u03DD\u03E3\u03E7" +
		"\u03EC\u03F2\u03F9\u0400\u0406\u040A\u040F\u0416\u041F\u0425\u042C\u0432" +
		"\u0438\u043C\u0441\u0448\u0453\u0459\u045F\u0466\u046E\u0477\u047D\u0492" +
		"\u0498\u049E\u04A3\u04A9\u04B0\u04B6\u04BC\u04BE\u04C4\u04CA\u04CE\u04D6" +
		"\u04DC\u04DE\u04E4\u04EA\u04F2\u04F8\u04FC\u0501\u0508\u050C\u0511\u0517" +
		"\u051E\u0522\u0524\u0529\u052D\u0533\u053F\u0547\u054B\u0550\u0554\u055A" +
		"\u055E\u0563\u0569\u056F\u0576\u057A\u0582\u0588\u058C\u0591\u0597\u059D" +
		"\u05A3\u05A9\u05AD\u05B2\u05B8\u05BE\u05C4\u05C9\u05CF\u05D5\u05D9\u05DE" +
		"\u05E2\u05E9\u05EB\u05F1\u05F7\u05FB\u0600\u0606\u060A\u0610\u0616\u061C" +
		"\u0622\u0626\u062B\u0631\u0635\u0639\u063E\u0642\u0647\u064B\u0651\u0657" +
		"\u065D\u0663\u0667\u066C\u0672\u0676\u067B\u0681\u0687\u068B\u0690\u0694" +
		"\u069A\u06A0\u06A6\u06AC\u06B2\u06B7\u06BC\u06C0\u06C6\u06CC\u06D2\u06D7" +
		"\u06DC\u06E0\u06E6\u06EC\u06F2\u06F4\u06FA\u06FE\u0701\u0703\u0708\u070C" +
		"\u0712\u0718\u071E\u0724\u0728\u072D\u0731\u0735\u073D\u0744\u0748\u074E" +
		"\u0755\u0759\u075F\u0761\u0768\u0770\u0772\u0778\u077C\u077E\u0787\u078D" +
		"\u078F\u0795\u0799\u079B\u07A0\u07A8\u07AA\u07B3\u07B5\u07BD\u07BF\u07C6" +
		"\u07C8\u07CE\u07D2\u07D4\u07DA\u07DC\u07E2\u07E6\u07EB\u07F3\u07F5\u07FB" +
		"\u07FF\u0804\u080E\u0814\u0818\u081D\u0821\u0826\u082A\u0832\u0838\u083C" +
		"\u0840\u0845\u084B\u0850\u0857\u085A\u0860\u0864\u0869\u086D\u0873\u0879" +
		"\u087D\u0881\u0887\u088D\u088F\u0896\u0898\u089E\u08A2\u08A4\u08AA\u08AC" +
		"\u08B2\u08B7\u08B9\u08BF\u08C5\u08CB\u08D1\u08D5\u08DA\u08DE\u08E3\u08E7" +
		"\u08EC\u08F0\u08F6\u08FE\u0904\u090B\u090D\u0913\u0919\u091C\u0922\u0924" +
		"\u092B\u092D\u0934\u0936\u093D\u093F\u0942\u0947\u094F\u0955\u095B\u0961" +
		"\u0967\u0969\u096F\u0979\u097F\u0984\u098A\u0990\u0994\u0998\u099E\u09A4" +
		"\u09AA\u09AE\u09B3\u09B9\u09BE\u09C4\u09CA\u09CE\u09D2\u09D8\u09DE\u09E4" +
		"\u09EA\u09F0\u09F4\u09F6\u09FB\u09FF\u0A04\u0A08\u0A0E\u0A16\u0A1C\u0A22" +
		"\u0A26\u0A2C\u0A32\u0A36\u0A38\u0A3E\u0A44\u0A48\u0A4E\u0A54\u0A58\u0A5A" +
		"\u0A60\u0A66\u0A6A\u0A70\u0A76\u0A7A\u0A7C\u0A82\u0A88\u0A8C\u0A92\u0A98" +
		"\u0A9C\u0A9E\u0AA4\u0AAA\u0AB0\u0AB2\u0AB8\u0ABC\u0AC1\u0AC5\u0ACD\u0AD3" +
		"\u0AD9\u0ADD\u0AE2\u0AE8\u0AEC\u0AF1\u0AF5\u0AFA\u0AFE\u0B04\u0B0A\u0B10" +
		"\u0B18\u0B1E\u0B24\u0B29\u0B2D\u0B2F\u0B34\u0B38\u0B3E\u0B44\u0B46\u0B4C" +
		"\u0B52\u0B54\u0B5A\u0B60\u0B65\u0B69\u0B6B\u0B70\u0B74\u0B7A\u0B80\u0B84" +
		"\u0B89\u0B8D\u0B92\u0B96\u0B9C\u0B9E\u0BA4\u0BA8\u0BAE\u0BB2\u0BB4\u0BBA" +
		"\u0BC0\u0BC2\u0BC6\u0BCC\u0BD2\u0BD4\u0BD8\u0BDE\u0BE0\u0BE6\u0BEA\u0BEF" +
		"\u0BF7\u0BF9\u0BFF\u0C03\u0C08\u0C10\u0C16\u0C18\u0C1E\u0C22\u0C24\u0C29" +
		"\u0C31\u0C33\u0C36\u0C3F\u0C41\u0C48\u0C4C\u0C52\u0C54\u0C5C\u0C5E\u0C64" +
		"\u0C6C\u0C72\u0C74\u0C7C\u0C7E\u0C84\u0C88\u0C8D\u0C91\u0C9C\u0CA0\u0CA2" +
		"\u0CA8\u0CB0\u0CB2\u0CB9\u0CBB\u0CC1\u0CC9\u0CCB\u0CD2\u0CD4\u0CDA\u0CDE" +
		"\u0CE4\u0CEB\u0CF1\u0CF5\u0CF7\u0CFD\u0D01\u0D03\u0D09\u0D0D\u0D13\u0D17" +
		"\u0D1B\u0D25\u0D27\u0D2D\u0D31\u0D37\u0D39\u0D3F\u0D43\u0D49\u0D4B\u0D51" +
		"\u0D57\u0D5B\u0D61\u0D65\u0D6A\u0D6E\u0D74\u0D7A\u0D81\u0D88\u0D8B\u0D91" +
		"\u0D94\u0D9A\u0D9D\u0DA3\u0DA6\u0DAC\u0DAF\u0DB5\u0DBB\u0DC2\u0DC9\u0DCF" +
		"\u0DD7\u0DDD\u0DE0\u0DE5\u0DEA\u0DF1\u0DF7\u0DFE\u0E05\u0E0A\u0E11\u0E17" +
		"\u0E1E\u0E25\u0E2A\u0E31\u0E37\u0E3E\u0E45\u0E4B\u0E51\u0E56\u0E5D\u0E63" +
		"\u0E6A\u0E71\u0E76\u0E7D\u0E83\u0E8A\u0E8F\u0E98\u0E9E\u0EA5\u0EAA\u0EB3" +
		"\u0EB9\u0EC0\u0EC5\u0ECE\u0ED0\u0ED7\u0ED9\u0EE7\u0EED\u0EF3\u0EFA\u0EFE" +
		"\u0F00\u0F05\u0F0B\u0F0F\u0F14\u0F1A\u0F25\u0F27\u0F2E\u0F30\u0F3B\u0F3F" +
		"\u0F45\u0F49\u0F4F\u0F55\u0F57\u0F5D\u0F63\u0F69\u0F6F\u0F73\u0F7D\u0F81" +
		"\u0F87\u0F8B\u0F8D\u0F92\u0F98\u0F9E\u0FA5\u0FA9\u0FB0\u0FB8\u0FBC\u0FC2" +
		"\u0FD0\u0FD6\u0FDC\u0FE2\u0FE6\u0FEC\u0FF2\u0FF4\u0FFA\u1000\u1009\u100F" +
		"\u1011\u1017\u1019\u101F\u1025\u102E\u1036\u103C\u1042\u1048\u104E\u1054" +
		"\u1056\u105A\u1066\u106C\u1073\u1077\u107C\u1082\u108B\u1091\u1093\u1099" +
		"\u109B\u10A3\u10A9\u10AF\u10B1\u10B9\u10BF\u10C1\u10C9\u10CF\u10D1\u10D3" +
		"\u10DA\u10E0\u10E2\u10EA\u10F0\u10F2\u10F8\u10FA\u1102\u1106\u110C\u1110" +
		"\u1118\u111E\u1120\u1128\u112E\u1130\u1135\u113B\u113F\u1144\u1146\u114C" +
		"\u1152\u1156\u1158\u115E\u1164\u116A\u1170\u1174\u1179\u117F\u1184\u1189" +
		"\u1190\u1196\u1198\u119C\u11AC\u11B5\u11BE\u11C3\u11C8\u11D2\u11D7\u11DC" +
		"\u11E4\u11ED\u11F2\u11FB\u1203\u1207\u120D\u1213\u1215\u121B\u121F\u1225" +
		"\u1229\u1231\u1233\u123A\u1242\u1246\u124C\u1250\u1252\u1257\u125D\u1263" +
		"\u126A\u1270\u1273\u1279\u127F\u1285\u1287\u128D\u1293\u1295\u1297\u129D" +
		"\u12A1\u12A6\u12AC\u12B0\u12B5\u12BB\u12C1\u12C5\u12CA\u12D0\u12D6\u12DA" +
		"\u12DF\u12E5\u12E9\u12EB\u12FF\u1303\u1308\u130A\u1313\u1317\u131D\u1321" +
		"\u1327\u132B\u1331\u1335\u134D\u1353\u1359\u135B\u1362\u136C\u1372\u1376" +
		"\u137C\u1380\u1382\u1387\u138D\u1393\u139C\u13A2\u13A4\u13AA\u13AE\u13B3" +
		"\u13B9\u13BB\u13C1\u13C7\u13C9\u13CD\u13D2\u13D8\u13DA\u13E0\u13E2\u13E8" +
		"\u13EC\u13F1\u13F7\u13F9\u13FF\u1401\u1407\u140B\u140F\u1413\u1417\u141B" +
		"\u1421\u1427\u142B\u1431\u1435\u1437\u143D\u1443\u144C\u1452\u1458\u145E" +
		"\u1460\u1466\u146C\u1472\u1476\u147C\u1480\u1482\u1487\u148F\u1497\u1499" +
		"\u149F\u14A5\u14A7\u14AD\u14B4\u14B7\u14BD\u14BF\u14C5\u14CB\u14CD\u14D3" +
		"\u14D6\u14DC\u14DE\u14E1\u14E7\u14EB\u14F0\u14F7\u14FA\u1500\u1506\u1508" +
		"\u150C\u150E\u151A\u151E\u1520\u1525\u152B\u1536\u153E\u1544\u1546\u154E" +
		"\u1554\u1556\u1561\u1567\u1569\u156B\u1576\u1582\u1588\u158A\u1590\u1592" +
		"\u1598\u159A\u15A2\u15A8\u15AA\u15B0\u15B2\u15B8\u15BA\u15C2\u15C8\u15CA" +
		"\u15D2\u15D8\u15DA\u15E2\u15E6\u15EC\u15F3\u15F7\u15FA\u15FC\u1602\u160A" +
		"\u160E\u1614\u161C\u1624\u162A\u1631\u1637\u1642\u1648\u164F\u1656\u165A" +
		"\u165F\u1663\u1668\u1673\u1675\u167B\u167F\u1685\u1687\u168D\u1697\u169C" +
		"\u16A2\u16A9\u16B0\u16B7\u16BE\u16C5\u16CC\u16D3\u16DA\u16E1\u16E8\u16EF" +
		"\u16F6\u16FD\u1704\u170B\u1712\u1716\u171B\u171F\u1725\u172B\u172D\u1733" +
		"\u173C\u1742\u1749\u174D\u1750\u1756\u175C\u1763\u1767\u176C\u1770\u1775" +
		"\u1779\u177E\u1785\u178B\u1792\u1796\u1799\u179F\u17A6\u17AD\u17B1\u17B6" +
		"\u17BB\u17C3\u17C5\u17CB\u17D3\u17DA\u17E1\u17E5\u17EA\u17EE\u17F3\u17F7" +
		"\u17FC\u1801\u1807\u180B\u1810\u1816\u1822\u1824\u182A\u182C\u1832\u1836" +
		"\u183B\u1845\u1849\u1853\u185A\u1861\u1866\u186A\u1870\u1876\u1878\u1880" +
		"\u1886\u1888\u1890\u1896\u1898\u18A5\u18AB\u18AD\u18B5\u18BB\u18BD\u18C5" +
		"\u18CB\u18D1\u18D3\u18D7\u18DD\u18E3\u18E9\u18F0\u18F6\u18F8\u18FE\u1900" +
		"\u1909\u190B\u1911\u1917\u191C\u1926\u192C\u1932\u1934\u193A\u193F\u1947" +
		"\u194D\u1951\u1957\u195D\u195F\u1964\u1969\u196C\u1972\u1976\u197C\u197E" +
		"\u1984\u1988\u198E\u1994\u199F\u19A5\u19AB\u19AD\u19BA\u19BF\u19C1\u19C7" +
		"\u19CD\u19D1\u19D7\u19DD\u19E3\u19E5\u19F1\u19F7\u19FE\u1A00\u1A06\u1A08" +
		"\u1A0E\u1A12\u1A18\u1A1C\u1A1E\u1A23\u1A2A\u1A30\u1A32\u1A38\u1A3A\u1A42" +
		"\u1A48\u1A4A\u1A50\u1A52\u1A6A\u1A71\u1A78\u1A7D\u1A84\u1A8A\u1A8C\u1A92" +
		"\u1A99\u1AA0\u1AA3\u1AA9\u1AAC\u1AB2\u1AB5\u1ABB\u1ABE\u1AC4\u1AC7\u1ACD" +
		"\u1AD0\u1AD6\u1AD9\u1ADF\u1AE4\u1AEB\u1AEE\u1AF4\u1AF7\u1AFF\u1B01\u1B07" +
		"\u1B0D\u1B0F\u1B19\u1B1B\u1B21\u1B27\u1B29\u1B2F\u1B31\u1B37\u1B3D\u1B3F" +
		"\u1B43\u1B48\u1B4C\u1B53\u1B5A\u1B61\u1B67\u1B6A\u1B70\u1B76\u1B78\u1B7E" +
		"\u1B80\u1B82\u1B88\u1B8E\u1B94\u1B96\u1B9C\u1B9E\u1BA2\u1BA8\u1BAE\u1BB2" +
		"\u1BBA\u1BC0\u1BC6\u1BC8\u1BD0\u1BD6\u1BD8\u1BDE\u1BE0\u1BEA\u1BF0\u1BF2" +
		"\u1BF4\u1BFB\u1C01\u1C07\u1C0D\u1C0F\u1C15\u1C17\u1C1F\u1C25\u1C27\u1C2D" +
		"\u1C33\u1C39\u1C41\u1C47\u1C49\u1C4F\u1C55\u1C5A\u1C5C\u1C5F\u1C65\u1C6B" +
		"\u1C6D\u1C75\u1C7B\u1C7D\u1C83\u1C89\u1C8B\u1C91\u1C9D\u1CA3\u1CA5\u1CAD" +
		"\u1CAF\u1CB6\u1CB8\u1CBE\u1CC2\u1CC4\u1CCA\u1CD2\u1CD9\u1CE0\u1CE5\u1CEC" +
		"\u1CF1\u1CF8\u1CFD\u1D04\u1D09\u1D10\u1D13\u1D19\u1D1F\u1D25\u1D27\u1D2D" +
		"\u1D2F\u1D35\u1D3A\u1D40\u1D46\u1D4A\u1D54\u1D5A\u1D60\u1D62\u1D68\u1D6A" +
		"\u1D72\u1D78\u1D7A\u1D82\u1D87\u1D91\u1D97\u1D99\u1D9B\u1DA2\u1DA6\u1DAE" +
		"\u1DB4\u1DB6\u1DBC\u1DBE\u1DC4\u1DC6\u1DCC\u1DD2\u1DDA\u1DE0\u1DE4\u1DEA" +
		"\u1DF0\u1DF5\u1DFC\u1E07\u1E09\u1E0F\u1E18\u1E1C\u1E29\u1E30\u1E39\u1E40" +
		"\u1E46\u1E4D\u1E54\u1E5A\u1E62\u1E6B\u1E72\u1E7B\u1E83\u1E89\u1E90\u1E97" +
		"\u1E9E\u1EA2\u1EA7\u1EB0\u1EB7\u1EBE\u1EC4\u1ECA\u1ED1\u1ED8\u1EE1\u1EE5" +
		"\u1EEA\u1EEE\u1EF3\u1EFD\u1F01\u1F06\u1F0A\u1F0F\u1F19\u1F1C\u1F22\u1F25" +
		"\u1F2B\u1F2F\u1F35\u1F39\u1F3F\u1F43\u1F49\u1F4D\u1F53\u1F57\u1F5D\u1F61" +
		"\u1F63\u1F69\u1F6D\u1F72\u1F78\u1F7E\u1F82\u1F89\u1F8D\u1F92\u1F98\u1F9E" +
		"\u1FA2\u1FA5\u1FAB\u1FAF\u1FB4\u1FB8\u1FBF\u1FC6\u1FCA\u1FCF\u1FD3\u1FD5" +
		"\u1FDD\u1FE2\u1FE7\u1FEC\u1FF0\u1FF6\u1FFF\u2006\u200D\u2011\u2016";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
			cobolParser._serializedATNSegment10,
			cobolParser._serializedATNSegment11,
			cobolParser._serializedATNSegment12,
			cobolParser._serializedATNSegment13,
			cobolParser._serializedATNSegment14,
			cobolParser._serializedATNSegment15,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constant_witout_zeroContext extends ParserRuleContext {
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACES, 0); }
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUES, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTES, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant_witout_zero; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant_witout_zero) {
			listener.enterFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant_witout_zero) {
			listener.exitFigurative_constant_witout_zero(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant_witout_zero) {
			return visitor.visitFigurative_constant_witout_zero(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constantContext extends ParserRuleContext {
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public figurative_constant_witout_zero(): Figurative_constant_witout_zeroContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constant_witout_zeroContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant) {
			listener.enterFigurative_constant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant) {
			listener.exitFigurative_constant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant) {
			return visitor.visitFigurative_constant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_separatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_separator) {
			listener.enterArithmetic_separator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_separator) {
			listener.exitArithmetic_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_separator) {
			return visitor.visitArithmetic_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public procedure_division_header(): Procedure_division_headerContext {
		return this.getRuleContext(0, Procedure_division_headerContext);
	}
	public declaratives(): DeclarativesContext | undefined {
		return this.tryGetRuleContext(0, DeclarativesContext);
	}
	public end_program(): End_programContext | undefined {
		return this.tryGetRuleContext(0, End_programContext);
	}
	public procedure_test_line(): Procedure_test_lineContext[];
	public procedure_test_line(i: number): Procedure_test_lineContext;
	public procedure_test_line(i?: number): Procedure_test_lineContext | Procedure_test_lineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_test_lineContext);
		} else {
			return this.getRuleContext(i, Procedure_test_lineContext);
		}
	}
	public section(): SectionContext[];
	public section(i: number): SectionContext;
	public section(i?: number): SectionContext | SectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SectionContext);
		} else {
			return this.getRuleContext(i, SectionContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_programContext extends ParserRuleContext {
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public program_name(): Program_nameContext | undefined {
		return this.tryGetRuleContext(0, Program_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_end_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnd_program) {
			listener.enterEnd_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnd_program) {
			listener.exitEnd_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnd_program) {
			return visitor.visitEnd_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_headerContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public using(): UsingContext | undefined {
		return this.tryGetRuleContext(0, UsingContext);
	}
	public giving(): GivingContext | undefined {
		return this.tryGetRuleContext(0, GivingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header) {
			listener.enterProcedure_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header) {
			listener.exitProcedure_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header) {
			return visitor.visitProcedure_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection) {
			listener.enterSection(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection) {
			listener.exitSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection) {
			return visitor.visitSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarativesContext extends ParserRuleContext {
	public DECLARATIVES_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES_IN_A_AREA, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public declaratives_section(): Declaratives_sectionContext[];
	public declaratives_section(i: number): Declaratives_sectionContext;
	public declaratives_section(i?: number): Declaratives_sectionContext | Declaratives_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declaratives_sectionContext);
		} else {
			return this.getRuleContext(i, Declaratives_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives) {
			listener.enterDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives) {
			listener.exitDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives) {
			return visitor.visitDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_sectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public use_statement(): Use_statementContext {
		return this.getRuleContext(0, Use_statementContext);
	}
	public declarative_paragraph(): Declarative_paragraphContext[];
	public declarative_paragraph(i: number): Declarative_paragraphContext;
	public declarative_paragraph(i?: number): Declarative_paragraphContext | Declarative_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declarative_paragraphContext);
		} else {
			return this.getRuleContext(i, Declarative_paragraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_section) {
			listener.enterDeclaratives_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_section) {
			listener.exitDeclaratives_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_section) {
			return visitor.visitDeclaratives_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declarative_paragraphContext extends ParserRuleContext {
	public paragraph(): ParagraphContext {
		return this.getRuleContext(0, ParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declarative_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclarative_paragraph) {
			listener.enterDeclarative_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclarative_paragraph) {
			listener.exitDeclarative_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclarative_paragraph) {
			return visitor.visitDeclarative_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraph_name(): Paragraph_nameContext {
		return this.getRuleContext(0, Paragraph_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SentenseContext extends ParserRuleContext {
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sentense; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSentense) {
			listener.enterSentense(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSentense) {
			listener.exitSentense(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSentense) {
			return visitor.visitSentense(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(cobolParser.USE, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROCEDURE, 0); }
	public use_on(): Use_onContext | undefined {
		return this.tryGetRuleContext(0, Use_onContext);
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public REPORTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTING, 0); }
	public group_data_name(): Group_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Group_data_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERROR, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_group_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGroup_data_name) {
			listener.enterGroup_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGroup_data_name) {
			listener.exitGroup_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGroup_data_name) {
			return visitor.visitGroup_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_onContext extends ParserRuleContext {
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_on) {
			listener.enterUse_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_on) {
			listener.exitUse_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_on) {
			return visitor.visitUse_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_headerContext extends ParserRuleContext {
	public section_name(): Section_nameContext {
		return this.getRuleContext(0, Section_nameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public segment_number(): Segment_numberContext | undefined {
		return this.tryGetRuleContext(0, Segment_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_header) {
			listener.enterSection_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_header) {
			listener.exitSection_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_header) {
			return visitor.visitSection_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Paragraph_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph_name) {
			listener.enterParagraph_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph_name) {
			listener.exitParagraph_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph_name) {
			return visitor.visitParagraph_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_name) {
			listener.enterSection_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_name) {
			listener.exitSection_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_name) {
			return visitor.visitSection_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing) {
			listener.enterUsing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing) {
			listener.exitUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing) {
			return visitor.visitUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GivingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving) {
			listener.enterGiving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving) {
			listener.exitGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving) {
			return visitor.visitGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_test_lineContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_test_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_test_line) {
			listener.enterProcedure_test_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_test_line) {
			listener.exitProcedure_test_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_test_line) {
			return visitor.visitProcedure_test_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public accept_statement(): Accept_statementContext | undefined {
		return this.tryGetRuleContext(0, Accept_statementContext);
	}
	public add_statement(): Add_statementContext | undefined {
		return this.tryGetRuleContext(0, Add_statementContext);
	}
	public alter_statement(): Alter_statementContext | undefined {
		return this.tryGetRuleContext(0, Alter_statementContext);
	}
	public call_statement(): Call_statementContext | undefined {
		return this.tryGetRuleContext(0, Call_statementContext);
	}
	public cancel_statement(): Cancel_statementContext | undefined {
		return this.tryGetRuleContext(0, Cancel_statementContext);
	}
	public close_statement(): Close_statementContext | undefined {
		return this.tryGetRuleContext(0, Close_statementContext);
	}
	public compute_statement(): Compute_statementContext | undefined {
		return this.tryGetRuleContext(0, Compute_statementContext);
	}
	public continue_statement(): Continue_statementContext | undefined {
		return this.tryGetRuleContext(0, Continue_statementContext);
	}
	public delete_statement(): Delete_statementContext | undefined {
		return this.tryGetRuleContext(0, Delete_statementContext);
	}
	public display_statement(): Display_statementContext | undefined {
		return this.tryGetRuleContext(0, Display_statementContext);
	}
	public divide_statement(): Divide_statementContext | undefined {
		return this.tryGetRuleContext(0, Divide_statementContext);
	}
	public evaluate_statement(): Evaluate_statementContext | undefined {
		return this.tryGetRuleContext(0, Evaluate_statementContext);
	}
	public go_to_statement(): Go_to_statementContext | undefined {
		return this.tryGetRuleContext(0, Go_to_statementContext);
	}
	public exit_statement(): Exit_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_statementContext);
	}
	public exit_program_statement(): Exit_program_statementContext | undefined {
		return this.tryGetRuleContext(0, Exit_program_statementContext);
	}
	public generate_statement(): Generate_statementContext | undefined {
		return this.tryGetRuleContext(0, Generate_statementContext);
	}
	public if_statement(): If_statementContext | undefined {
		return this.tryGetRuleContext(0, If_statementContext);
	}
	public move_statement(): Move_statementContext | undefined {
		return this.tryGetRuleContext(0, Move_statementContext);
	}
	public initialize_statement(): Initialize_statementContext | undefined {
		return this.tryGetRuleContext(0, Initialize_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initialize_statementContext extends ParserRuleContext {
	public INITIALIZE(): TerminalNode { return this.getToken(cobolParser.INITIALIZE, 0); }
	public fld_name(): Fld_nameContext[];
	public fld_name(i: number): Fld_nameContext;
	public fld_name(i?: number): Fld_nameContext | Fld_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fld_nameContext);
		} else {
			return this.getRuleContext(i, Fld_nameContext);
		}
	}
	public replacing(): ReplacingContext[];
	public replacing(i: number): ReplacingContext;
	public replacing(i?: number): ReplacingContext | ReplacingContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplacingContext);
		} else {
			return this.getRuleContext(i, ReplacingContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_initialize_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInitialize_statement) {
			listener.enterInitialize_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInitialize_statement) {
			listener.exitInitialize_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInitialize_statement) {
			return visitor.visitInitialize_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplacingContext extends ParserRuleContext {
	public REPLACING(): TerminalNode { return this.getToken(cobolParser.REPLACING, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.BY);
		} else {
			return this.getToken(cobolParser.BY, i);
		}
	}
	public init_value(): Init_valueContext[];
	public init_value(i: number): Init_valueContext;
	public init_value(i?: number): Init_valueContext | Init_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Init_valueContext);
		} else {
			return this.getRuleContext(i, Init_valueContext);
		}
	}
	public ALPHABETIC(): TerminalNode[];
	public ALPHABETIC(i: number): TerminalNode;
	public ALPHABETIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHABETIC);
		} else {
			return this.getToken(cobolParser.ALPHABETIC, i);
		}
	}
	public ALPHANUMERIC(): TerminalNode[];
	public ALPHANUMERIC(i: number): TerminalNode;
	public ALPHANUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC, i);
		}
	}
	public NUMERIC(): TerminalNode[];
	public NUMERIC(i: number): TerminalNode;
	public NUMERIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC);
		} else {
			return this.getToken(cobolParser.NUMERIC, i);
		}
	}
	public ALPHANUMERIC_EDITED(): TerminalNode[];
	public ALPHANUMERIC_EDITED(i: number): TerminalNode;
	public ALPHANUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALPHANUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.ALPHANUMERIC_EDITED, i);
		}
	}
	public NUMERIC_EDITED(): TerminalNode[];
	public NUMERIC_EDITED(i: number): TerminalNode;
	public NUMERIC_EDITED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NUMERIC_EDITED);
		} else {
			return this.getToken(cobolParser.NUMERIC_EDITED, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DATA(): TerminalNode[];
	public DATA(i: number): TerminalNode;
	public DATA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DATA);
		} else {
			return this.getToken(cobolParser.DATA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_replacing; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReplacing) {
			listener.enterReplacing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReplacing) {
			listener.exitReplacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReplacing) {
			return visitor.visitReplacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Init_valueContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_init_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInit_value) {
			listener.enterInit_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInit_value) {
			listener.exitInit_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInit_value) {
			return visitor.visitInit_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fld_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fld_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFld_name) {
			listener.enterFld_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFld_name) {
			listener.exitFld_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFld_name) {
			return visitor.visitFld_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Move_statementContext extends ParserRuleContext {
	public MOVE(): TerminalNode { return this.getToken(cobolParser.MOVE, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_move_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMove_statement) {
			listener.enterMove_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMove_statement) {
			listener.exitMove_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMove_statement) {
			return visitor.visitMove_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_statementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(cobolParser.IF, 0); }
	public logic_expression(): Logic_expressionContext {
		return this.getRuleContext(0, Logic_expressionContext);
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	public NEXT(): TerminalNode[];
	public NEXT(i: number): TerminalNode;
	public NEXT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEXT);
		} else {
			return this.getToken(cobolParser.NEXT, i);
		}
	}
	public SENTENCE(): TerminalNode[];
	public SENTENCE(i: number): TerminalNode;
	public SENTENCE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SENTENCE);
		} else {
			return this.getToken(cobolParser.SENTENCE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public THEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THEN, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ELSE, 0); }
	public END_IF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_IF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_if_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIf_statement) {
			listener.enterIf_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIf_statement) {
			listener.exitIf_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIf_statement) {
			return visitor.visitIf_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generate_statementContext extends ParserRuleContext {
	public GENERATE(): TerminalNode { return this.getToken(cobolParser.GENERATE, 0); }
	public report_item(): Report_itemContext {
		return this.getRuleContext(0, Report_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_generate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGenerate_statement) {
			listener.enterGenerate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGenerate_statement) {
			listener.exitGenerate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGenerate_statement) {
			return visitor.visitGenerate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_item) {
			listener.enterReport_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_item) {
			listener.exitReport_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_item) {
			return visitor.visitReport_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_statement) {
			listener.enterExit_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_statement) {
			listener.exitExit_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_statement) {
			return visitor.visitExit_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_program_statementContext extends ParserRuleContext {
	public EXIT(): TerminalNode { return this.getToken(cobolParser.EXIT, 0); }
	public PROGRAM(): TerminalNode { return this.getToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_exit_program_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExit_program_statement) {
			listener.enterExit_program_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExit_program_statement) {
			listener.exitExit_program_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExit_program_statement) {
			return visitor.visitExit_program_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Go_to_statementContext extends ParserRuleContext {
	public GO(): TerminalNode { return this.getToken(cobolParser.GO, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public proc_name(): Proc_nameContext[];
	public proc_name(i: number): Proc_nameContext;
	public proc_name(i?: number): Proc_nameContext | Proc_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_nameContext);
		} else {
			return this.getRuleContext(i, Proc_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_go_to_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGo_to_statement) {
			listener.enterGo_to_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGo_to_statement) {
			listener.exitGo_to_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGo_to_statement) {
			return visitor.visitGo_to_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_proc_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProc_name) {
			listener.enterProc_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProc_name) {
			listener.exitProc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProc_name) {
			return visitor.visitProc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Evaluate_statementContext extends ParserRuleContext {
	public EVALUATE(): TerminalNode { return this.getToken(cobolParser.EVALUATE, 0); }
	public subj_item(): Subj_itemContext[];
	public subj_item(i: number): Subj_itemContext;
	public subj_item(i?: number): Subj_itemContext | Subj_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Subj_itemContext);
		} else {
			return this.getRuleContext(i, Subj_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.WHEN);
		} else {
			return this.getToken(cobolParser.WHEN, i);
		}
	}
	public when_condition(): When_conditionContext[];
	public when_condition(i: number): When_conditionContext;
	public when_condition(i?: number): When_conditionContext | When_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(When_conditionContext);
		} else {
			return this.getRuleContext(i, When_conditionContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	public OTHER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OTHER, 0); }
	public END_EVALUATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_EVALUATE, 0); }
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_evaluate_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEvaluate_statement) {
			listener.enterEvaluate_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEvaluate_statement) {
			listener.exitEvaluate_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEvaluate_statement) {
			return visitor.visitEvaluate_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class When_conditionContext extends ParserRuleContext {
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ANY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ANY, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_when_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWhen_condition) {
			listener.enterWhen_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWhen_condition) {
			listener.exitWhen_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWhen_condition) {
			return visitor.visitWhen_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subj_itemContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subj_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubj_item) {
			listener.enterSubj_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubj_item) {
			listener.exitSubj_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubj_item) {
			return visitor.visitSubj_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statementContext extends ParserRuleContext {
	public divide_statement_form1(): Divide_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form1Context);
	}
	public divide_statement_form2(): Divide_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Divide_statement_form2Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement) {
			listener.enterDivide_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement) {
			listener.exitDivide_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement) {
			return visitor.visitDivide_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form1Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form1) {
			listener.enterDivide_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form1) {
			listener.exitDivide_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form1) {
			return visitor.visitDivide_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_statement_form2Context extends ParserRuleContext {
	public DIVIDE(): TerminalNode { return this.getToken(cobolParser.DIVIDE, 0); }
	public divide_num(): Divide_numContext[];
	public divide_num(i: number): Divide_numContext;
	public divide_num(i?: number): Divide_numContext | Divide_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Divide_numContext);
		} else {
			return this.getRuleContext(i, Divide_numContext);
		}
	}
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public REMAINDER(): TerminalNode { return this.getToken(cobolParser.REMAINDER, 0); }
	public remaind(): RemaindContext {
		return this.getRuleContext(0, RemaindContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INTO, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public ROUNDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROUNDED, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_DIVIDE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DIVIDE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_statement_form2) {
			listener.enterDivide_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_statement_form2) {
			listener.exitDivide_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_statement_form2) {
			return visitor.visitDivide_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemaindContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_remaind; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRemaind) {
			listener.enterRemaind(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRemaind) {
			listener.exitRemaind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRemaind) {
			return visitor.visitRemaind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Divide_numContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_divide_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDivide_num) {
			listener.enterDivide_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDivide_num) {
			listener.exitDivide_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDivide_num) {
			return visitor.visitDivide_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statementContext extends ParserRuleContext {
	public display_statement_form1(): Display_statement_form1Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form1Context);
	}
	public display_statement_form2(): Display_statement_form2Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form2Context);
	}
	public display_statement_form3(): Display_statement_form3Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form3Context);
	}
	public display_statement_form4(): Display_statement_form4Context | undefined {
		return this.tryGetRuleContext(0, Display_statement_form4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement) {
			listener.enterDisplay_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement) {
			listener.exitDisplay_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement) {
			return visitor.visitDisplay_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form1Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form1_clause(): Display_form1_clauseContext[];
	public display_form1_clause(i: number): Display_form1_clauseContext;
	public display_form1_clause(i?: number): Display_form1_clauseContext | Display_form1_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form1_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form1_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form1) {
			listener.enterDisplay_statement_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form1) {
			listener.exitDisplay_statement_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form1) {
			return visitor.visitDisplay_statement_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form2Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext[];
	public src_item(i: number): Src_itemContext;
	public src_item(i?: number): Src_itemContext | Src_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Src_itemContext);
		} else {
			return this.getRuleContext(i, Src_itemContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public display_form2_clause(): Display_form2_clauseContext[];
	public display_form2_clause(i: number): Display_form2_clauseContext;
	public display_form2_clause(i?: number): Display_form2_clauseContext | Display_form2_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Display_form2_clauseContext);
		} else {
			return this.getRuleContext(i, Display_form2_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form2) {
			listener.enterDisplay_statement_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form2) {
			listener.exitDisplay_statement_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form2) {
			return visitor.visitDisplay_statement_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form3Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	public disp_f3_line(): Disp_f3_lineContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_lineContext);
	}
	public disp_f3_column(): Disp_f3_columnContext | undefined {
		return this.tryGetRuleContext(0, Disp_f3_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form3) {
			listener.enterDisplay_statement_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form3) {
			listener.exitDisplay_statement_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form3) {
			return visitor.visitDisplay_statement_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_statement_form4Context extends ParserRuleContext {
	public DISPLAY(): TerminalNode { return this.getToken(cobolParser.DISPLAY, 0); }
	public src_item(): Src_itemContext {
		return this.getRuleContext(0, Src_itemContext);
	}
	public UPON(): TerminalNode { return this.getToken(cobolParser.UPON, 0); }
	public display_upon(): Display_uponContext {
		return this.getRuleContext(0, Display_uponContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DISPLAY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_statement_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_statement_form4) {
			listener.enterDisplay_statement_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_statement_form4) {
			listener.exitDisplay_statement_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_statement_form4) {
			return visitor.visitDisplay_statement_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_itemContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_item) {
			listener.enterSrc_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_item) {
			listener.exitSrc_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_item) {
			return visitor.visitSrc_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_uponContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_upon; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_upon) {
			listener.enterDisplay_upon(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_upon) {
			listener.exitDisplay_upon(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_upon) {
			return visitor.visitDisplay_upon(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_line) {
			listener.enterDisp_f3_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_line) {
			listener.exitDisp_f3_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_line) {
			return visitor.visitDisp_f3_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Disp_f3_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_disp_f3_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisp_f3_column) {
			listener.enterDisp_f3_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisp_f3_column) {
			listener.exitDisp_f3_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisp_f3_column) {
			return visitor.visitDisp_f3_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form1_clauseContext extends ParserRuleContext {
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UPON, 0); }
	public out_dest(): Out_destContext | undefined {
		return this.tryGetRuleContext(0, Out_destContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form1_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form1_clause) {
			listener.enterDisplay_form1_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form1_clause) {
			listener.exitDisplay_form1_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form1_clause) {
			return visitor.visitDisplay_form1_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Display_form2_clauseContext extends ParserRuleContext {
	public display_form1_clause(): Display_form1_clauseContext | undefined {
		return this.tryGetRuleContext(0, Display_form1_clauseContext);
	}
	public at_line_number(): At_line_numberContext | undefined {
		return this.tryGetRuleContext(0, At_line_numberContext);
	}
	public at_column_number(): At_column_numberContext | undefined {
		return this.tryGetRuleContext(0, At_column_numberContext);
	}
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ADVANCING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADVANCING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_display_form2_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDisplay_form2_clause) {
			listener.enterDisplay_form2_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDisplay_form2_clause) {
			listener.exitDisplay_form2_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDisplay_form2_clause) {
			return visitor.visitDisplay_form2_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_line_numberContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_line_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_line_number) {
			listener.enterAt_line_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_line_number) {
			listener.exitAt_line_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_line_number) {
			return visitor.visitAt_line_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_column_numberContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public number_value(): Number_valueContext {
		return this.getRuleContext(0, Number_valueContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_column_number) {
			listener.enterAt_column_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_column_number) {
			listener.exitAt_column_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_column_number) {
			return visitor.visitAt_column_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Out_destContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_out_dest; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOut_dest) {
			listener.enterOut_dest(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOut_dest) {
			listener.exitOut_dest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOut_dest) {
			return visitor.visitOut_dest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_statementContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(cobolParser.DELETE, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public on_key_variants(): On_key_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_key_variantsContext);
	}
	public END_DELETE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_delete_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDelete_statement) {
			listener.enterDelete_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDelete_statement) {
			listener.exitDelete_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDelete_statement) {
			return visitor.visitDelete_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Continue_statementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode { return this.getToken(cobolParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_continue_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterContinue_statement) {
			listener.enterContinue_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitContinue_statement) {
			listener.exitContinue_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitContinue_statement) {
			return visitor.visitContinue_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Compute_statementContext extends ParserRuleContext {
	public COMPUTE(): TerminalNode { return this.getToken(cobolParser.COMPUTE, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_COMPUTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_COMPUTE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_compute_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCompute_statement) {
			listener.enterCompute_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCompute_statement) {
			listener.exitCompute_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCompute_statement) {
			return visitor.visitCompute_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_statementContext extends ParserRuleContext {
	public CLOSE(): TerminalNode { return this.getToken(cobolParser.CLOSE, 0); }
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public close_params(): Close_paramsContext[];
	public close_params(i: number): Close_paramsContext;
	public close_params(i?: number): Close_paramsContext | Close_paramsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Close_paramsContext);
		} else {
			return this.getRuleContext(i, Close_paramsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_statement) {
			listener.enterClose_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_statement) {
			listener.exitClose_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_statement) {
			return visitor.visitClose_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_paramsContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public REMOVAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REMOVAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public REWIND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REWIND, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_close_params; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClose_params) {
			listener.enterClose_params(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClose_params) {
			listener.exitClose_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClose_params) {
			return visitor.visitClose_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cancel_statementContext extends ParserRuleContext {
	public CANCEL(): TerminalNode { return this.getToken(cobolParser.CANCEL, 0); }
	public prog_name(): Prog_nameContext[];
	public prog_name(i: number): Prog_nameContext;
	public prog_name(i?: number): Prog_nameContext | Prog_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Prog_nameContext);
		} else {
			return this.getRuleContext(i, Prog_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cancel_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCancel_statement) {
			listener.enterCancel_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCancel_statement) {
			listener.exitCancel_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCancel_statement) {
			return visitor.visitCancel_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_statementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(cobolParser.CALL, 0); }
	public prog_name(): Prog_nameContext {
		return this.getRuleContext(0, Prog_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public call_using(): Call_usingContext | undefined {
		return this.tryGetRuleContext(0, Call_usingContext);
	}
	public call_giving(): Call_givingContext | undefined {
		return this.tryGetRuleContext(0, Call_givingContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_CALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_CALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_statement) {
			listener.enterCall_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_statement) {
			listener.exitCall_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_statement) {
			return visitor.visitCall_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_givingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_giving) {
			listener.enterCall_giving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_giving) {
			listener.exitCall_giving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_giving) {
			return visitor.visitCall_giving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public using_arg(): Using_argContext[];
	public using_arg(i: number): Using_argContext;
	public using_arg(i?: number): Using_argContext | Using_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Using_argContext);
		} else {
			return this.getRuleContext(i, Using_argContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_call_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCall_using) {
			listener.enterCall_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCall_using) {
			listener.exitCall_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCall_using) {
			return visitor.visitCall_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_argContext extends ParserRuleContext {
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public argument(): ArgumentContext[];
	public argument(i: number): ArgumentContext;
	public argument(i?: number): ArgumentContext | ArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArgumentContext);
		} else {
			return this.getRuleContext(i, ArgumentContext);
		}
	}
	public using_prefix(): Using_prefixContext | undefined {
		return this.tryGetRuleContext(0, Using_prefixContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_arg; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_arg) {
			listener.enterUsing_arg(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_arg) {
			listener.exitUsing_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_arg) {
			return visitor.visitUsing_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_prefixContext extends ParserRuleContext {
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTENT, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCRIPTOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using_prefix; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing_prefix) {
			listener.enterUsing_prefix(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing_prefix) {
			listener.exitUsing_prefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing_prefix) {
			return visitor.visitUsing_prefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_argument; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArgument) {
			listener.enterArgument(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArgument) {
			listener.exitArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArgument) {
			return visitor.visitArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prog_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prog_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProg_name) {
			listener.enterProg_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProg_name) {
			listener.exitProg_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProg_name) {
			return visitor.visitProg_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_statementContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(cobolParser.ALTER, 0); }
	public alter_proc(): Alter_procContext[];
	public alter_proc(i: number): Alter_procContext;
	public alter_proc(i?: number): Alter_procContext | Alter_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_procContext);
		} else {
			return this.getRuleContext(i, Alter_procContext);
		}
	}
	public TO(): TerminalNode[];
	public TO(i: number): TerminalNode;
	public TO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.TO);
		} else {
			return this.getToken(cobolParser.TO, i);
		}
	}
	public alter_new_proc(): Alter_new_procContext[];
	public alter_new_proc(i: number): Alter_new_procContext;
	public alter_new_proc(i?: number): Alter_new_procContext | Alter_new_procContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_new_procContext);
		} else {
			return this.getRuleContext(i, Alter_new_procContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROCEED(): TerminalNode[];
	public PROCEED(i: number): TerminalNode;
	public PROCEED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.PROCEED);
		} else {
			return this.getToken(cobolParser.PROCEED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_statement) {
			listener.enterAlter_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_statement) {
			listener.exitAlter_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_statement) {
			return visitor.visitAlter_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_new_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_new_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_new_proc) {
			listener.enterAlter_new_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_new_proc) {
			listener.exitAlter_new_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_new_proc) {
			return visitor.visitAlter_new_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_procContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alter_proc; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlter_proc) {
			listener.enterAlter_proc(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlter_proc) {
			listener.exitAlter_proc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlter_proc) {
			return visitor.visitAlter_proc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_statementContext extends ParserRuleContext {
	public ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ADD, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public GIVING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GIVING, 0); }
	public add_grp(): Add_grpContext[];
	public add_grp(i: number): Add_grpContext;
	public add_grp(i?: number): Add_grpContext | Add_grpContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_grpContext);
		} else {
			return this.getRuleContext(i, Add_grpContext);
		}
	}
	public CORR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORR, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CORRESPONDING, 0); }
	public on_size_variants(): On_size_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_size_variantsContext);
	}
	public END_ADD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ADD, 0); }
	public add_num(): Add_numContext[];
	public add_num(i: number): Add_numContext;
	public add_num(i?: number): Add_numContext | Add_numContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Add_numContext);
		} else {
			return this.getRuleContext(i, Add_numContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identifier_result(): Identifier_resultContext[];
	public identifier_result(i: number): Identifier_resultContext;
	public identifier_result(i?: number): Identifier_resultContext | Identifier_resultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_resultContext);
		} else {
			return this.getRuleContext(i, Identifier_resultContext);
		}
	}
	public ROUNDED(): TerminalNode[];
	public ROUNDED(i: number): TerminalNode;
	public ROUNDED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ROUNDED);
		} else {
			return this.getToken(cobolParser.ROUNDED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_statement) {
			listener.enterAdd_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_statement) {
			listener.exitAdd_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_statement) {
			return visitor.visitAdd_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_grpContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_grp; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_grp) {
			listener.enterAdd_grp(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_grp) {
			listener.exitAdd_grp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_grp) {
			return visitor.visitAdd_grp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_add_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAdd_num) {
			listener.enterAdd_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAdd_num) {
			listener.exitAdd_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAdd_num) {
			return visitor.visitAdd_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_statementContext extends ParserRuleContext {
	public accept_form1(): Accept_form1Context | undefined {
		return this.tryGetRuleContext(0, Accept_form1Context);
	}
	public accept_form2(): Accept_form2Context | undefined {
		return this.tryGetRuleContext(0, Accept_form2Context);
	}
	public accept_form3(): Accept_form3Context | undefined {
		return this.tryGetRuleContext(0, Accept_form3Context);
	}
	public accept_form4(): Accept_form4Context | undefined {
		return this.tryGetRuleContext(0, Accept_form4Context);
	}
	public accept_form5(): Accept_form5Context | undefined {
		return this.tryGetRuleContext(0, Accept_form5Context);
	}
	public accept_form6(): Accept_form6Context | undefined {
		return this.tryGetRuleContext(0, Accept_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_statement) {
			listener.enterAccept_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_statement) {
			listener.exitAccept_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_statement) {
			return visitor.visitAccept_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exception_variantsContext extends ParserRuleContext {
	public on_exception(): On_exceptionContext[];
	public on_exception(i: number): On_exceptionContext;
	public on_exception(i?: number): On_exceptionContext | On_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_exceptionContext);
		} else {
			return this.getRuleContext(i, On_exceptionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception_variants) {
			listener.enterOn_exception_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception_variants) {
			listener.exitOn_exception_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception_variants) {
			return visitor.visitOn_exception_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_end_variantsContext extends ParserRuleContext {
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end_variants) {
			listener.enterAt_end_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end_variants) {
			listener.exitAt_end_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end_variants) {
			return visitor.visitAt_end_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_size_variantsContext extends ParserRuleContext {
	public on_size(): On_sizeContext[];
	public on_size(i: number): On_sizeContext;
	public on_size(i?: number): On_sizeContext | On_sizeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_sizeContext);
		} else {
			return this.getRuleContext(i, On_sizeContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size_variants) {
			listener.enterOn_size_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size_variants) {
			listener.exitOn_size_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size_variants) {
			return visitor.visitOn_size_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_key_variantsContext extends ParserRuleContext {
	public on_key(): On_keyContext[];
	public on_key(i: number): On_keyContext;
	public on_key(i?: number): On_keyContext | On_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_keyContext);
		} else {
			return this.getRuleContext(i, On_keyContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_key_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_key_variants) {
			listener.enterOn_key_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_key_variants) {
			listener.exitOn_key_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_key_variants) {
			return visitor.visitOn_key_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form6Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public accept6_item(): Accept6_itemContext {
		return this.getRuleContext(0, Accept6_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form6) {
			listener.enterAccept_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form6) {
			listener.exitAccept_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form6) {
			return visitor.visitAccept_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept6_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept6_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept6_item) {
			listener.enterAccept6_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept6_item) {
			listener.exitAccept6_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept6_item) {
			return visitor.visitAccept6_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form1Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public input_source(): Input_sourceContext | undefined {
		return this.tryGetRuleContext(0, Input_sourceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form1) {
			listener.enterAccept_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form1) {
			listener.exitAccept_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form1) {
			return visitor.visitAccept_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form2Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public date_time(): Date_timeContext {
		return this.getRuleContext(0, Date_timeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form2) {
			listener.enterAccept_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form2) {
			listener.exitAccept_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form2) {
			return visitor.visitAccept_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_form3_clause(): Accept_form3_clauseContext[];
	public accept_form3_clause(i: number): Accept_form3_clauseContext;
	public accept_form3_clause(i?: number): Accept_form3_clauseContext | Accept_form3_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form3_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form3_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3) {
			listener.enterAccept_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3) {
			listener.exitAccept_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3) {
			return visitor.visitAccept_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public accept_form4_clause(): Accept_form4_clauseContext[];
	public accept_form4_clause(i: number): Accept_form4_clauseContext;
	public accept_form4_clause(i?: number): Accept_form4_clauseContext | Accept_form4_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form4_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form4_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4) {
			listener.enterAccept_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4) {
			listener.exitAccept_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4) {
			return visitor.visitAccept_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form5Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public screen_name(): Screen_nameContext {
		return this.getRuleContext(0, Screen_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_at(): Accept_atContext | undefined {
		return this.tryGetRuleContext(0, Accept_atContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form5) {
			listener.enterAccept_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form5) {
			listener.exitAccept_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form5) {
			return visitor.visitAccept_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_atContext extends ParserRuleContext {
	public accept_at_line(): Accept_at_lineContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_lineContext);
	}
	public accept_at_column(): Accept_at_columnContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at) {
			listener.enterAccept_at(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at) {
			listener.exitAccept_at(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at) {
			return visitor.visitAccept_at(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_line) {
			listener.enterAccept_at_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_line) {
			listener.exitAccept_at_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_line) {
			return visitor.visitAccept_at_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_column) {
			listener.enterAccept_at_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_column) {
			listener.exitAccept_at_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_column) {
			return visitor.visitAccept_at_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext | undefined {
		return this.tryGetRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4_clause) {
			listener.enterAccept_form4_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4_clause) {
			listener.exitAccept_form4_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4_clause) {
			return visitor.visitAccept_form4_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3_clauseContext extends ParserRuleContext {
	public accept_form4_clause(): Accept_form4_clauseContext | undefined {
		return this.tryGetRuleContext(0, Accept_form4_clauseContext);
	}
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROTECTED, 0); }
	public protected_value(): Protected_valueContext | undefined {
		return this.tryGetRuleContext(0, Protected_valueContext);
	}
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ECHO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ECHO, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFAULT, 0); }
	public def_value(): Def_valueContext | undefined {
		return this.tryGetRuleContext(0, Def_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3_clause) {
			listener.enterAccept_form3_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3_clause) {
			listener.exitAccept_form3_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3_clause) {
			return visitor.visitAccept_form3_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_dest_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_dest_item) {
			listener.enterKey_dest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_dest_item) {
			listener.exitKey_dest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_dest_item) {
			return visitor.visitKey_dest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_valueContext extends ParserRuleContext {
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURRENT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_def_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDef_value) {
			listener.enterDef_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDef_value) {
			listener.exitDef_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDef_value) {
			return visitor.visitDef_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_valueContext extends ParserRuleContext {
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public prot_size_value(): Prot_size_valueContext | undefined {
		return this.tryGetRuleContext(0, Prot_size_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AUTOTERMINATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOTERMINATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public EDITING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EDITING, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public prot_fill_lit(): Prot_fill_litContext | undefined {
		return this.tryGetRuleContext(0, Prot_fill_litContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_value) {
			listener.enterProtected_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_value) {
			listener.exitProtected_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_value) {
			return visitor.visitProtected_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_fill_litContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_fill_lit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_fill_lit) {
			listener.enterProt_fill_lit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_fill_lit) {
			listener.exitProt_fill_lit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_fill_lit) {
			return visitor.visitProt_fill_lit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_size_valueContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_size_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_size_value) {
			listener.enterProt_size_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_size_value) {
			listener.exitProt_size_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_size_value) {
			return visitor.visitProt_size_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Number_valueContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_number_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNumber_value) {
			listener.enterNumber_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNumber_value) {
			listener.exitNumber_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNumber_value) {
			return visitor.visitNumber_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_timeContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DATE, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYMMDD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYDDD, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_time; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_time) {
			listener.enterDate_time(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_time) {
			listener.exitDate_time(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_time) {
			return visitor.visitDate_time(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_itemContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext {
		return this.getRuleContext(0, Identifier_resultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_item) {
			listener.enterDest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_item) {
			listener.exitDest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_item) {
			return visitor.visitDest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_sourceContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_source) {
			listener.enterInput_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_source) {
			listener.exitInput_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_source) {
			return visitor.visitInput_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_endContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end) {
			listener.enterAt_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end) {
			listener.exitAt_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end) {
			return visitor.visitAt_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exceptionContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(cobolParser.EXCEPTION, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception) {
			listener.enterOn_exception(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception) {
			listener.exitOn_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception) {
			return visitor.visitOn_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_sizeContext extends ParserRuleContext {
	public SIZE(): TerminalNode { return this.getToken(cobolParser.SIZE, 0); }
	public ERROR(): TerminalNode { return this.getToken(cobolParser.ERROR, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_size) {
			listener.enterOn_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_size) {
			listener.exitOn_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_size) {
			return visitor.visitOn_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_keyContext extends ParserRuleContext {
	public INVALID(): TerminalNode { return this.getToken(cobolParser.INVALID, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public sentense(): SentenseContext | undefined {
		return this.tryGetRuleContext(0, SentenseContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_key) {
			listener.enterOn_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_key) {
			listener.exitOn_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_key) {
			return visitor.visitOn_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_group_description_entry(): Report_group_description_entryContext[];
	public report_group_description_entry(i: number): Report_group_description_entryContext;
	public report_group_description_entry(i?: number): Report_group_description_entryContext | Report_group_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_description_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_description_entry) {
			listener.enterRecord_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_description_entry) {
			listener.exitRecord_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_description_entry) {
			return visitor.visitRecord_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_description_entryContext extends ParserRuleContext {
	public report_group_data_description(): Report_group_data_descriptionContext[];
	public report_group_data_description(i: number): Report_group_data_descriptionContext;
	public report_group_data_description(i?: number): Report_group_data_descriptionContext | Report_group_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_group_data_descriptionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_description_entry) {
			listener.enterReport_group_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_description_entry) {
			listener.exitReport_group_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_description_entry) {
			return visitor.visitReport_group_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description) {
			listener.enterReport_group_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description) {
			listener.exitReport_group_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description) {
			return visitor.visitReport_group_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public screen_name(): Screen_nameContext | undefined {
		return this.tryGetRuleContext(0, Screen_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_name) {
			listener.enterScreen_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_name) {
			listener.exitScreen_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_name) {
			return visitor.visitScreen_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext | undefined {
		return this.tryGetRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BACKGROUND_COLOR, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTO, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SECURE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REQUIRED, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FULL, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINK, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOWLIGHT, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSE_VIDEO, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINE, 0); }
	public src_number(): Src_numberContext | undefined {
		return this.tryGetRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public sign_condition(): Sign_conditionContext | undefined {
		return this.tryGetRuleContext(0, Sign_conditionContext);
	}
	public success_failure_condition(): Success_failure_conditionContext | undefined {
		return this.tryGetRuleContext(0, Success_failure_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_expression) {
			listener.enterLogic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_expression) {
			listener.exitLogic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_expression) {
			return visitor.visitLogic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Success_failure_conditionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_success_failure_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSuccess_failure_condition) {
			listener.enterSuccess_failure_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSuccess_failure_condition) {
			listener.exitSuccess_failure_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSuccess_failure_condition) {
			return visitor.visitSuccess_failure_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition) {
			listener.enterLogic_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition) {
			listener.exitLogic_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition) {
			return visitor.visitLogic_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_operationContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_operation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_operation) {
			listener.enterLogic_operation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_operation) {
			listener.exitLogic_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_operation) {
			return visitor.visitLogic_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public sign_condition_name(): Sign_condition_nameContext {
		return this.getRuleContext(0, Sign_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition) {
			listener.enterSign_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition) {
			listener.exitSign_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition) {
			return visitor.visitSign_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_condition_nameContext extends ParserRuleContext {
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition_name) {
			listener.enterSign_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition_name) {
			listener.exitSign_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition_name) {
			return visitor.visitSign_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_conditionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public class_condition_name(): Class_condition_nameContext {
		return this.getRuleContext(0, Class_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition) {
			listener.enterClass_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition) {
			listener.exitClass_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition) {
			return visitor.visitClass_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_condition_nameContext extends ParserRuleContext {
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_UPPER, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition_name) {
			listener.enterClass_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition_name) {
			listener.exitClass_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition_name) {
			return visitor.visitClass_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_operatorContext extends ParserRuleContext {
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public GE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GE_, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LESS, 0); }
	public LE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LE_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public GT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GT_, 0); }
	public LT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LT_, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THAN, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_operator) {
			listener.enterCondition_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_operator) {
			listener.exitCondition_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_operator) {
			return visitor.visitCondition_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_resultContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier_result; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier_result) {
			listener.enterIdentifier_result(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier_result) {
			listener.exitIdentifier_result(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier_result) {
			return visitor.visitIdentifier_result(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public identifier_result(): Identifier_resultContext | undefined {
		return this.tryGetRuleContext(0, Identifier_resultContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


