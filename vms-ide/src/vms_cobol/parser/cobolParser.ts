// Generated from src/vms_cobol/parser/cobol.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { cobolListener } from "./cobolListener";
import { cobolVisitor } from "./cobolVisitor";


export class cobolParser extends Parser {
	public static readonly ACCEPT = 1;
	public static readonly ACCESS = 2;
	public static readonly ADD = 3;
	public static readonly AFTER = 4;
	public static readonly ALL = 5;
	public static readonly ALPHA = 6;
	public static readonly ALPHABET = 7;
	public static readonly ALPHABETIC = 8;
	public static readonly ALPHABETIC_LOWER = 9;
	public static readonly ALPHABETIC_UPPER = 10;
	public static readonly ALSO = 11;
	public static readonly ALTER = 12;
	public static readonly ALTERNATE = 13;
	public static readonly AND = 14;
	public static readonly APPLY = 15;
	public static readonly ARE = 16;
	public static readonly AREA = 17;
	public static readonly AREAS = 18;
	public static readonly ARGUMENT_NUMBER = 19;
	public static readonly ARGUMENT_VALUE = 20;
	public static readonly ARITHMETIC = 21;
	public static readonly ASCENDING = 22;
	public static readonly ASCII = 23;
	public static readonly ASSIGN = 24;
	public static readonly AT = 25;
	public static readonly AUTHOR = 26;
	public static readonly AUTO = 27;
	public static readonly AUTOMATIC = 28;
	public static readonly AUTOTERMINATE = 29;
	public static readonly BACKGROUND_COLOR = 30;
	public static readonly BEFORE = 31;
	public static readonly BELL = 32;
	public static readonly BINARY = 33;
	public static readonly BINARY_CHAR = 34;
	public static readonly BINARY_DOUBLE = 35;
	public static readonly BINARY_LONG = 36;
	public static readonly BINARY_SHORT = 37;
	public static readonly BLANK = 38;
	public static readonly BLINK = 39;
	public static readonly BLINKING = 40;
	public static readonly BLOCK = 41;
	public static readonly BOLD = 42;
	public static readonly BOTTOM = 43;
	public static readonly BY = 44;
	public static readonly C01 = 45;
	public static readonly CALL = 46;
	public static readonly CANCEL = 47;
	public static readonly CARD_READER = 48;
	public static readonly CF = 49;
	public static readonly CH = 50;
	public static readonly CHARACTER = 51;
	public static readonly CHARACTERS = 52;
	public static readonly CLASS = 53;
	public static readonly CLOCK_UNITS = 54;
	public static readonly CLOSE = 55;
	public static readonly CODE = 56;
	public static readonly CODE_SET = 57;
	public static readonly COLLATING = 58;
	public static readonly COLUMN = 59;
	public static readonly COMMA = 60;
	public static readonly COMMON = 61;
	public static readonly COMP = 62;
	public static readonly COMPUTATIONAL = 63;
	public static readonly COMPUTATIONAL_1 = 64;
	public static readonly COMPUTATIONAL_2 = 65;
	public static readonly COMPUTATIONAL_3 = 66;
	public static readonly COMPUTATIONAL_4 = 67;
	public static readonly COMPUTATIONAL_5 = 68;
	public static readonly COMPUTATIONAL_X = 69;
	public static readonly COMPUTE = 70;
	public static readonly COMP_1 = 71;
	public static readonly COMP_2 = 72;
	public static readonly COMP_3 = 73;
	public static readonly COMP_4 = 74;
	public static readonly COMP_5 = 75;
	public static readonly COMP_X = 76;
	public static readonly CONFIGURATION = 77;
	public static readonly CONSOLE = 78;
	public static readonly CONTAINS = 79;
	public static readonly CONTIGUOUS = 80;
	public static readonly CONTIGUOUS_BEST_TRY = 81;
	public static readonly CONTINUE = 82;
	public static readonly CONTROL = 83;
	public static readonly CONTROLS = 84;
	public static readonly CONVERSION = 85;
	public static readonly CONVERTING = 86;
	public static readonly COPY = 87;
	public static readonly CRT = 88;
	public static readonly CURRENCY = 89;
	public static readonly CURRENT = 90;
	public static readonly CURSOR = 91;
	public static readonly DATA = 92;
	public static readonly DATE = 93;
	public static readonly DATE_COMPILED = 94;
	public static readonly DATE_WRITTEN = 95;
	public static readonly DAY = 96;
	public static readonly DAY_OF_WEEK = 97;
	public static readonly DE = 98;
	public static readonly DEBUGGING = 99;
	public static readonly DECIMAL_POINT = 100;
	public static readonly DECLARATIVES = 101;
	public static readonly DECLARATIVES_IN_A_AREA = 102;
	public static readonly DEFAULT = 103;
	public static readonly DEFERRED_WRITE = 104;
	public static readonly DELETE = 105;
	public static readonly DELIMITER = 106;
	public static readonly DEPENDING = 107;
	public static readonly DESCENDING = 108;
	public static readonly DETAIL = 109;
	public static readonly DISK = 110;
	public static readonly DISPLAY = 111;
	public static readonly DIVIDE = 112;
	public static readonly DIVISION = 113;
	public static readonly DOWN = 114;
	public static readonly DUPLICATES = 115;
	public static readonly DYNAMIC = 116;
	public static readonly EBCDIC = 117;
	public static readonly ECHO = 118;
	public static readonly EDITING = 119;
	public static readonly END = 120;
	public static readonly END_ACCEPT = 121;
	public static readonly END_ADD = 122;
	public static readonly END_CALL = 123;
	public static readonly END_COMPUTE = 124;
	public static readonly END_DELETE = 125;
	public static readonly END_DIVIDE = 126;
	public static readonly END_EVALUATE = 127;
	public static readonly END_IF = 128;
	public static readonly END_IN_A_AREA = 129;
	public static readonly END_MULTIPLY = 130;
	public static readonly END_OF_PAGE = 131;
	public static readonly END_PERFORM = 132;
	public static readonly END_READ = 133;
	public static readonly END_RETURN = 134;
	public static readonly END_REWRITE = 135;
	public static readonly END_SEARCH = 136;
	public static readonly END_START = 137;
	public static readonly END_STRING = 138;
	public static readonly END_SUBTRACT = 139;
	public static readonly END_UNSTRING = 140;
	public static readonly END_WRITE = 141;
	public static readonly ENVIRONMENT = 142;
	public static readonly ENVIRONMENT_NAME = 143;
	public static readonly ENVIRONMENT_VALUE = 144;
	public static readonly EOL = 145;
	public static readonly EOS = 146;
	public static readonly EQUAL = 147;
	public static readonly ERASE = 148;
	public static readonly ERROR = 149;
	public static readonly EVALUATE = 150;
	public static readonly EVERY = 151;
	public static readonly EXCEPTION = 152;
	public static readonly EXCLUSIVE = 153;
	public static readonly EXIT = 154;
	public static readonly EXTEND = 155;
	public static readonly EXTENSION = 156;
	public static readonly EXTERNAL = 157;
	public static readonly FAILURE = 158;
	public static readonly FD = 159;
	public static readonly FILE = 160;
	public static readonly FILE_CONTROL = 161;
	public static readonly FILE_ID = 162;
	public static readonly FILLER = 163;
	public static readonly FILL_SIZE = 164;
	public static readonly FINAL = 165;
	public static readonly FIRST = 166;
	public static readonly FLOAT_EXTENDED = 167;
	public static readonly FLOAT_LONG = 168;
	public static readonly FLOAT_SHORT = 169;
	public static readonly FOOTING = 170;
	public static readonly FOR = 171;
	public static readonly FOREGROUND_COLOR = 172;
	public static readonly FROM = 173;
	public static readonly FULL = 174;
	public static readonly FUNCTION = 175;
	public static readonly GENERATE = 176;
	public static readonly GIVING = 177;
	public static readonly GLOBAL = 178;
	public static readonly GO = 179;
	public static readonly GREATER = 180;
	public static readonly GROUP = 181;
	public static readonly HEADING = 182;
	public static readonly HIGHLIGHT = 183;
	public static readonly HIGH_VALUE = 184;
	public static readonly HIGH_VALUES = 185;
	public static readonly I64 = 186;
	public static readonly ID = 187;
	public static readonly IDENT = 188;
	public static readonly IDENTIFICATION = 189;
	public static readonly IDENTIFICATION_IN_A_AREA = 190;
	public static readonly IF = 191;
	public static readonly IN = 192;
	public static readonly INDEX = 193;
	public static readonly INDEXED = 194;
	public static readonly INDICATE = 195;
	public static readonly INITIAL = 196;
	public static readonly INITIALIZE = 197;
	public static readonly INITIATE = 198;
	public static readonly INPUT = 199;
	public static readonly INPUT_OUTPUT = 200;
	public static readonly INSPECT = 201;
	public static readonly INSTALLATION = 202;
	public static readonly INVALID = 203;
	public static readonly IS = 204;
	public static readonly I_O = 205;
	public static readonly I_O_CONTROL = 206;
	public static readonly JUST = 207;
	public static readonly JUSTIFIED = 208;
	public static readonly KEY = 209;
	public static readonly LABEL = 210;
	public static readonly LAST = 211;
	public static readonly LEADING = 212;
	public static readonly LEFT = 213;
	public static readonly LESS = 214;
	public static readonly LIMIT = 215;
	public static readonly LIMITS = 216;
	public static readonly LINAGE = 217;
	public static readonly LINE = 218;
	public static readonly LINES = 219;
	public static readonly LINE_PRINTER = 220;
	public static readonly LINKAGE = 221;
	public static readonly LOCK = 222;
	public static readonly LOCK_HOLDING = 223;
	public static readonly LOWLIGHT = 224;
	public static readonly LOW_VALUE = 225;
	public static readonly LOW_VALUES = 226;
	public static readonly MANUAL = 227;
	public static readonly MASS_INSERT = 228;
	public static readonly MEMORY = 229;
	public static readonly MERGE = 230;
	public static readonly MODE = 231;
	public static readonly MODULES = 232;
	public static readonly MOVE = 233;
	public static readonly MULTIPLE = 234;
	public static readonly MULTIPLY = 235;
	public static readonly NATIVE = 236;
	public static readonly NEGATIVE = 237;
	public static readonly NEXT = 238;
	public static readonly NO = 239;
	public static readonly NOT = 240;
	public static readonly NUMBER = 241;
	public static readonly NUMERIC = 242;
	public static readonly OBJECT_COMPUTER = 243;
	public static readonly OCCURS = 244;
	public static readonly OF = 245;
	public static readonly OFF = 246;
	public static readonly OMITTED = 247;
	public static readonly ON = 248;
	public static readonly OPEN = 249;
	public static readonly OPTIONAL = 250;
	public static readonly OPTIONS = 251;
	public static readonly OR = 252;
	public static readonly ORGANIZATION = 253;
	public static readonly OUTPUT = 254;
	public static readonly OVERFLOW = 255;
	public static readonly PACKED_DECIMAL = 256;
	public static readonly PADDING = 257;
	public static readonly PAGE = 258;
	public static readonly PAPER_TAPE_PUNCH = 259;
	public static readonly PAPER_TAPE_READER = 260;
	public static readonly PERFORM = 261;
	public static readonly PF = 262;
	public static readonly PH = 263;
	public static readonly PIC = 264;
	public static readonly PICTURE = 265;
	public static readonly PLUS = 266;
	public static readonly POINTER = 267;
	public static readonly POINTER_64 = 268;
	public static readonly POSITION = 269;
	public static readonly POSITIVE = 270;
	public static readonly PREALLOCATION = 271;
	public static readonly PRINTER = 272;
	public static readonly PRINT_CONTROL = 273;
	public static readonly PROCEDURE = 274;
	public static readonly PROGRAM = 275;
	public static readonly PROGRAM_ID = 276;
	public static readonly PROTECTED = 277;
	public static readonly QUOTE = 278;
	public static readonly QUOTES = 279;
	public static readonly RANDOM = 280;
	public static readonly RD = 281;
	public static readonly READ = 282;
	public static readonly RECORD = 283;
	public static readonly RECORDS = 284;
	public static readonly REDEFINES = 285;
	public static readonly REEL = 286;
	public static readonly REFERENCE = 287;
	public static readonly RELATIVE = 288;
	public static readonly RELEASE = 289;
	public static readonly RENAMES = 290;
	public static readonly REPLACE = 291;
	public static readonly REPLACING = 292;
	public static readonly REPORT = 293;
	public static readonly REPORTING = 294;
	public static readonly REPORTS = 295;
	public static readonly REQUIRED = 296;
	public static readonly RERUN = 297;
	public static readonly RESERVE = 298;
	public static readonly RESET = 299;
	public static readonly RETURN = 300;
	public static readonly REVERSED = 301;
	public static readonly REVERSE_VIDEO = 302;
	public static readonly REWRITE = 303;
	public static readonly RF = 304;
	public static readonly RH = 305;
	public static readonly RIGHT = 306;
	public static readonly ROLLBACK = 307;
	public static readonly SAME = 308;
	public static readonly SCREEN = 309;
	public static readonly SD = 310;
	public static readonly SEARCH = 311;
	public static readonly SECTION = 312;
	public static readonly SECURE = 313;
	public static readonly SECURITY = 314;
	public static readonly SEGMENT_LIMIT = 315;
	public static readonly SELECT = 316;
	public static readonly SEPARATE = 317;
	public static readonly SEQUENCE = 318;
	public static readonly SEQUENTIAL = 319;
	public static readonly SET = 320;
	public static readonly SIGN = 321;
	public static readonly SIGNED = 322;
	public static readonly SIZE = 323;
	public static readonly SORT = 324;
	public static readonly SORT_MERGE = 325;
	public static readonly SOURCE = 326;
	public static readonly SOURCE_COMPUTER = 327;
	public static readonly SPACE = 328;
	public static readonly SPACES = 329;
	public static readonly SPECIAL_NAMES = 330;
	public static readonly STANDARD = 331;
	public static readonly STANDARD_1 = 332;
	public static readonly STANDARD_2 = 333;
	public static readonly START = 334;
	public static readonly STATUS = 335;
	public static readonly STOP = 336;
	public static readonly STRING = 337;
	public static readonly SUBTRACT = 338;
	public static readonly SUCCESS = 339;
	public static readonly SUM = 340;
	public static readonly SUPPRESS = 341;
	public static readonly SWITCH = 342;
	public static readonly SYMBOL = 343;
	public static readonly SYMBOLIC = 344;
	public static readonly SYNC = 345;
	public static readonly SYNCHRONIZED = 346;
	public static readonly SYSERR = 347;
	public static readonly SYSIN = 348;
	public static readonly SYSOUT = 349;
	public static readonly TALLYING = 350;
	public static readonly TAPE = 351;
	public static readonly TERMINATE = 352;
	public static readonly THAN = 353;
	public static readonly THROUGH = 354;
	public static readonly THRU = 355;
	public static readonly TIME = 356;
	public static readonly TIMES = 357;
	public static readonly TO = 358;
	public static readonly TOP = 359;
	public static readonly TRAILING = 360;
	public static readonly TRUE = 361;
	public static readonly TYPE = 362;
	public static readonly UNDERLINE = 363;
	public static readonly UNDERLINED = 364;
	public static readonly UNIT = 365;
	public static readonly UNLOCK = 366;
	public static readonly UNSIGNED = 367;
	public static readonly UNSTRING = 368;
	public static readonly UP = 369;
	public static readonly UPON = 370;
	public static readonly USAGE = 371;
	public static readonly USE = 372;
	public static readonly USING = 373;
	public static readonly VALUE = 374;
	public static readonly VALUES = 375;
	public static readonly VARYING = 376;
	public static readonly VAX = 377;
	public static readonly WHEN = 378;
	public static readonly WINDOW = 379;
	public static readonly WITH = 380;
	public static readonly WORDS = 381;
	public static readonly WORKING_STORAGE = 382;
	public static readonly WRITE = 383;
	public static readonly YYYYDDD = 384;
	public static readonly YYYYMMDD = 385;
	public static readonly ZERO = 386;
	public static readonly ZEROES = 387;
	public static readonly ZEROS = 388;
	public static readonly START_SLASH_ = 389;
	public static readonly START_STAR_ = 390;
	public static readonly EXCLAM_ = 391;
	public static readonly UNDER_ = 392;
	public static readonly PLUS_ = 393;
	public static readonly MINUS_ = 394;
	public static readonly STAR_ = 395;
	public static readonly SLASH_ = 396;
	public static readonly COMMA_ = 397;
	public static readonly SEMI_ = 398;
	public static readonly COLON_ = 399;
	public static readonly EQUAL_ = 400;
	public static readonly LT_ = 401;
	public static readonly LE_ = 402;
	public static readonly GE_ = 403;
	public static readonly GT_ = 404;
	public static readonly LPAREN_ = 405;
	public static readonly RPAREN_ = 406;
	public static readonly LBRACK_ = 407;
	public static readonly RBRACK_ = 408;
	public static readonly POINTER_ = 409;
	public static readonly ATP_ = 410;
	public static readonly DOT_ = 411;
	public static readonly LCURLY_ = 412;
	public static readonly RCURLY_ = 413;
	public static readonly STRING_LITERAL = 414;
	public static readonly NUMERIC_LITERAL = 415;
	public static readonly HEX_LITERAL = 416;
	public static readonly USER_DEFINED_WORD = 417;
	public static readonly START_FOUR_SPACES = 418;
	public static readonly WHITESPACE = 419;
	public static readonly NEWLINE = 420;
	public static readonly RULE_cobol_source = 0;
	public static readonly RULE_figurative_constant = 1;
	public static readonly RULE_separator = 2;
	public static readonly RULE_arithmetic_separator = 3;
	public static readonly RULE_line_comment = 4;
	public static readonly RULE_program = 5;
	public static readonly RULE_procedure_division = 6;
	public static readonly RULE_procedure_division_header = 7;
	public static readonly RULE_section = 8;
	public static readonly RULE_declaratives = 9;
	public static readonly RULE_declaratives_section = 10;
	public static readonly RULE_declarative_paragraph = 11;
	public static readonly RULE_paragraph = 12;
	public static readonly RULE_sentense = 13;
	public static readonly RULE_use_statement = 14;
	public static readonly RULE_group_data_name = 15;
	public static readonly RULE_use_on = 16;
	public static readonly RULE_section_header = 17;
	public static readonly RULE_paragraph_name = 18;
	public static readonly RULE_section_name = 19;
	public static readonly RULE_using = 20;
	public static readonly RULE_giving = 21;
	public static readonly RULE_procedure_test_line = 22;
	public static readonly RULE_statement = 23;
	public static readonly RULE_accept_statement = 24;
	public static readonly RULE_on_exception_variants = 25;
	public static readonly RULE_at_end_variants = 26;
	public static readonly RULE_accept_form6 = 27;
	public static readonly RULE_accept6_item = 28;
	public static readonly RULE_accept_form1 = 29;
	public static readonly RULE_accept_form2 = 30;
	public static readonly RULE_accept_form3 = 31;
	public static readonly RULE_accept_form4 = 32;
	public static readonly RULE_accept_form5 = 33;
	public static readonly RULE_accept_at = 34;
	public static readonly RULE_accept_at_line = 35;
	public static readonly RULE_accept_at_column = 36;
	public static readonly RULE_accept_form4_clause = 37;
	public static readonly RULE_accept_form3_clause = 38;
	public static readonly RULE_key_dest_item = 39;
	public static readonly RULE_def_value = 40;
	public static readonly RULE_protected_value = 41;
	public static readonly RULE_prot_fill_lit = 42;
	public static readonly RULE_prot_size_value = 43;
	public static readonly RULE_number_value = 44;
	public static readonly RULE_date_time = 45;
	public static readonly RULE_dest_item = 46;
	public static readonly RULE_input_source = 47;
	public static readonly RULE_at_end = 48;
	public static readonly RULE_on_exception = 49;
	public static readonly RULE_data_division = 50;
	public static readonly RULE_file_section = 51;
	public static readonly RULE_working_storage_section = 52;
	public static readonly RULE_linkage_section = 53;
	public static readonly RULE_report_section = 54;
	public static readonly RULE_screen_section = 55;
	public static readonly RULE_file_description_entry = 56;
	public static readonly RULE_sort_merge_file_description_entry = 57;
	public static readonly RULE_report_description_entry = 58;
	public static readonly RULE_fd_clause = 59;
	public static readonly RULE_record_description_entry = 60;
	public static readonly RULE_data_description_entry = 61;
	public static readonly RULE_level_number = 62;
	public static readonly RULE_data_description_clause = 63;
	public static readonly RULE_renames = 64;
	public static readonly RULE_rename_start = 65;
	public static readonly RULE_rename_end = 66;
	public static readonly RULE_value_is = 67;
	public static readonly RULE_value_is_definition = 68;
	public static readonly RULE_value_is_definition_part = 69;
	public static readonly RULE_value_is_definition_thru = 70;
	public static readonly RULE_external_name = 71;
	public static readonly RULE_ref_data_name = 72;
	public static readonly RULE_value_is_literal = 73;
	public static readonly RULE_occurs = 74;
	public static readonly RULE_indexed_by = 75;
	public static readonly RULE_ind_name = 76;
	public static readonly RULE_key_is = 77;
	public static readonly RULE_key_name = 78;
	public static readonly RULE_times_definition = 79;
	public static readonly RULE_table_size = 80;
	public static readonly RULE_min_times = 81;
	public static readonly RULE_max_times = 82;
	public static readonly RULE_report_group_description_entry = 83;
	public static readonly RULE_report_group_data_description = 84;
	public static readonly RULE_report_group_data_description_clause = 85;
	public static readonly RULE_sign_is = 86;
	public static readonly RULE_sum = 87;
	public static readonly RULE_control_foot_name = 88;
	public static readonly RULE_detail_report_group_name = 89;
	public static readonly RULE_sum_name = 90;
	public static readonly RULE_source_name = 91;
	public static readonly RULE_column_number = 92;
	public static readonly RULE_type_is_definition = 93;
	public static readonly RULE_type_control_name = 94;
	public static readonly RULE_next_group_definition = 95;
	public static readonly RULE_line_num_definition = 96;
	public static readonly RULE_line_num = 97;
	public static readonly RULE_rd_clause = 98;
	public static readonly RULE_footing_line_rd = 99;
	public static readonly RULE_last_detail_line = 100;
	public static readonly RULE_first_detail_line = 101;
	public static readonly RULE_heading_line = 102;
	public static readonly RULE_page_size_rd = 103;
	public static readonly RULE_control_name = 104;
	public static readonly RULE_report_code = 105;
	public static readonly RULE_usage = 106;
	public static readonly RULE_usage_definition = 107;
	public static readonly RULE_picture = 108;
	public static readonly RULE_character_string = 109;
	public static readonly RULE_char_str_part = 110;
	public static readonly RULE_other_data_item = 111;
	public static readonly RULE_data_name = 112;
	public static readonly RULE_sd_clause = 113;
	public static readonly RULE_report_is = 114;
	public static readonly RULE_report_name = 115;
	public static readonly RULE_linage = 116;
	public static readonly RULE_bottom_lines = 117;
	public static readonly RULE_top_lines = 118;
	public static readonly RULE_footing_line = 119;
	public static readonly RULE_page_size = 120;
	public static readonly RULE_data_rec = 121;
	public static readonly RULE_rec_name = 122;
	public static readonly RULE_value_of_id = 123;
	public static readonly RULE_value_of_id_definition = 124;
	public static readonly RULE_label = 125;
	public static readonly RULE_record = 126;
	public static readonly RULE_record_definition = 127;
	public static readonly RULE_depending_item = 128;
	public static readonly RULE_shortest_rec = 129;
	public static readonly RULE_longest_rec = 130;
	public static readonly RULE_screen_description_entry = 131;
	public static readonly RULE_screen_name = 132;
	public static readonly RULE_screen_description_clause = 133;
	public static readonly RULE_scr_pic_using = 134;
	public static readonly RULE_scr_pic_from = 135;
	public static readonly RULE_scr_pic_to = 136;
	public static readonly RULE_nonnumeric_literal = 137;
	public static readonly RULE_src_number = 138;
	public static readonly RULE_color_num = 139;
	public static readonly RULE_identification_division = 140;
	public static readonly RULE_identification_division_paragraph = 141;
	public static readonly RULE_program_id = 142;
	public static readonly RULE_program_name = 143;
	public static readonly RULE_is_program = 144;
	public static readonly RULE_with_ident = 145;
	public static readonly RULE_ident_string = 146;
	public static readonly RULE_comment_entry = 147;
	public static readonly RULE_author = 148;
	public static readonly RULE_installation = 149;
	public static readonly RULE_date_written = 150;
	public static readonly RULE_date_compiled = 151;
	public static readonly RULE_security = 152;
	public static readonly RULE_options_ = 153;
	public static readonly RULE_arithmetic = 154;
	public static readonly RULE_environment_division = 155;
	public static readonly RULE_configuration_section = 156;
	public static readonly RULE_input_output_section = 157;
	public static readonly RULE_source_computer = 158;
	public static readonly RULE_computer_type = 159;
	public static readonly RULE_with_debugging = 160;
	public static readonly RULE_object_computer = 161;
	public static readonly RULE_memory_size = 162;
	public static readonly RULE_memory_size_amount = 163;
	public static readonly RULE_memory_size_unit = 164;
	public static readonly RULE_program_collating = 165;
	public static readonly RULE_alpha_name = 166;
	public static readonly RULE_segment_limit = 167;
	public static readonly RULE_segment_number = 168;
	public static readonly RULE_special_names = 169;
	public static readonly RULE_special_names_content = 170;
	public static readonly RULE_qualified_data_item = 171;
	public static readonly RULE_currency = 172;
	public static readonly RULE_currency_definition = 173;
	public static readonly RULE_literal_7 = 174;
	public static readonly RULE_literal_8 = 175;
	public static readonly RULE_class_ = 176;
	public static readonly RULE_class_name = 177;
	public static readonly RULE_user_class = 178;
	public static readonly RULE_symbolic_chars = 179;
	public static readonly RULE_symb_ch_definition = 180;
	public static readonly RULE_symb_ch_def_clause = 181;
	public static readonly RULE_symb_ch_def_in_alphabet = 182;
	public static readonly RULE_symbol_char = 183;
	public static readonly RULE_char_val = 184;
	public static readonly RULE_alphabet = 185;
	public static readonly RULE_alpha_value = 186;
	public static readonly RULE_user_alpha = 187;
	public static readonly RULE_first_literal = 188;
	public static readonly RULE_last_literal = 189;
	public static readonly RULE_same_literal = 190;
	public static readonly RULE_switch_ = 191;
	public static readonly RULE_switch_clause_on = 192;
	public static readonly RULE_switch_clause_off = 193;
	public static readonly RULE_cond_name = 194;
	public static readonly RULE_switch_name = 195;
	public static readonly RULE_switch_num = 196;
	public static readonly RULE_top_of_page_name = 197;
	public static readonly RULE_predefined_device = 198;
	public static readonly RULE_device_name = 199;
	public static readonly RULE_arg_env = 200;
	public static readonly RULE_arg_env_name = 201;
	public static readonly RULE_file_control = 202;
	public static readonly RULE_select = 203;
	public static readonly RULE_file_status = 204;
	public static readonly RULE_file_stat = 205;
	public static readonly RULE_record_key = 206;
	public static readonly RULE_record_key_definition = 207;
	public static readonly RULE_access_mode = 208;
	public static readonly RULE_reserve = 209;
	public static readonly RULE_reserve_num = 210;
	public static readonly RULE_record_delimiter = 211;
	public static readonly RULE_padding = 212;
	public static readonly RULE_pad_char = 213;
	public static readonly RULE_organization = 214;
	public static readonly RULE_lock_mode = 215;
	public static readonly RULE_lock_mode_definition = 216;
	public static readonly RULE_code_set = 217;
	public static readonly RULE_block_contains = 218;
	public static readonly RULE_smallest_block = 219;
	public static readonly RULE_blocksize = 220;
	public static readonly RULE_assign_to = 221;
	public static readonly RULE_assign_to_definition = 222;
	public static readonly RULE_file_spec = 223;
	public static readonly RULE_file_name = 224;
	public static readonly RULE_i_o_control = 225;
	public static readonly RULE_multiple_file = 226;
	public static readonly RULE_multiple_file_definition = 227;
	public static readonly RULE_multiple_file_name = 228;
	public static readonly RULE_pos_integer = 229;
	public static readonly RULE_rerun = 230;
	public static readonly RULE_rerun_definition = 231;
	public static readonly RULE_clock_count = 232;
	public static readonly RULE_condition_name = 233;
	public static readonly RULE_rerun_def_file = 234;
	public static readonly RULE_rec_count = 235;
	public static readonly RULE_same = 236;
	public static readonly RULE_same_area_file = 237;
	public static readonly RULE_apply = 238;
	public static readonly RULE_apply_definition = 239;
	public static readonly RULE_window_ptrs = 240;
	public static readonly RULE_preall_amt = 241;
	public static readonly RULE_extend_amt = 242;
	public static readonly RULE_arithmetic_expression = 243;
	public static readonly RULE_binary_arithmetic_operator = 244;
	public static readonly RULE_unary_arithmetic_operator = 245;
	public static readonly RULE_logic_expression = 246;
	public static readonly RULE_success_failure_condition = 247;
	public static readonly RULE_logic_condition = 248;
	public static readonly RULE_logic_operation = 249;
	public static readonly RULE_sign_condition = 250;
	public static readonly RULE_sign_condition_name = 251;
	public static readonly RULE_class_condition = 252;
	public static readonly RULE_class_condition_name = 253;
	public static readonly RULE_condition_operator = 254;
	public static readonly RULE_identifier_lvalue = 255;
	public static readonly RULE_identifier = 256;
	public static readonly RULE_arguments = 257;
	public static readonly RULE_subscripting = 258;
	public static readonly RULE_reference_modification = 259;
	public static readonly RULE_leftmost_character_position = 260;
	public static readonly RULE_length = 261;
	public static readonly RULE_function_name = 262;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"cobol_source", "figurative_constant", "separator", "arithmetic_separator", 
		"line_comment", "program", "procedure_division", "procedure_division_header", 
		"section", "declaratives", "declaratives_section", "declarative_paragraph", 
		"paragraph", "sentense", "use_statement", "group_data_name", "use_on", 
		"section_header", "paragraph_name", "section_name", "using", "giving", 
		"procedure_test_line", "statement", "accept_statement", "on_exception_variants", 
		"at_end_variants", "accept_form6", "accept6_item", "accept_form1", "accept_form2", 
		"accept_form3", "accept_form4", "accept_form5", "accept_at", "accept_at_line", 
		"accept_at_column", "accept_form4_clause", "accept_form3_clause", "key_dest_item", 
		"def_value", "protected_value", "prot_fill_lit", "prot_size_value", "number_value", 
		"date_time", "dest_item", "input_source", "at_end", "on_exception", "data_division", 
		"file_section", "working_storage_section", "linkage_section", "report_section", 
		"screen_section", "file_description_entry", "sort_merge_file_description_entry", 
		"report_description_entry", "fd_clause", "record_description_entry", "data_description_entry", 
		"level_number", "data_description_clause", "renames", "rename_start", 
		"rename_end", "value_is", "value_is_definition", "value_is_definition_part", 
		"value_is_definition_thru", "external_name", "ref_data_name", "value_is_literal", 
		"occurs", "indexed_by", "ind_name", "key_is", "key_name", "times_definition", 
		"table_size", "min_times", "max_times", "report_group_description_entry", 
		"report_group_data_description", "report_group_data_description_clause", 
		"sign_is", "sum", "control_foot_name", "detail_report_group_name", "sum_name", 
		"source_name", "column_number", "type_is_definition", "type_control_name", 
		"next_group_definition", "line_num_definition", "line_num", "rd_clause", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "report_code", "usage", "usage_definition", 
		"picture", "character_string", "char_str_part", "other_data_item", "data_name", 
		"sd_clause", "report_is", "report_name", "linage", "bottom_lines", "top_lines", 
		"footing_line", "page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_name", "screen_description_clause", 
		"scr_pic_using", "scr_pic_from", "scr_pic_to", "nonnumeric_literal", "src_number", 
		"color_num", "identification_division", "identification_division_paragraph", 
		"program_id", "program_name", "is_program", "with_ident", "ident_string", 
		"comment_entry", "author", "installation", "date_written", "date_compiled", 
		"security", "options_", "arithmetic", "environment_division", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "qualified_data_item", "currency", 
		"currency_definition", "literal_7", "literal_8", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "switch_", 
		"switch_clause_on", "switch_clause_off", "cond_name", "switch_name", "switch_num", 
		"top_of_page_name", "predefined_device", "device_name", "arg_env", "arg_env_name", 
		"file_control", "select", "file_status", "file_stat", "record_key", "record_key_definition", 
		"access_mode", "reserve", "reserve_num", "record_delimiter", "padding", 
		"pad_char", "organization", "lock_mode", "lock_mode_definition", "code_set", 
		"block_contains", "smallest_block", "blocksize", "assign_to", "assign_to_definition", 
		"file_spec", "file_name", "i_o_control", "multiple_file", "multiple_file_definition", 
		"multiple_file_name", "pos_integer", "rerun", "rerun_definition", "clock_count", 
		"condition_name", "rerun_def_file", "rec_count", "same", "same_area_file", 
		"apply", "apply_definition", "window_ptrs", "preall_amt", "extend_amt", 
		"arithmetic_expression", "binary_arithmetic_operator", "unary_arithmetic_operator", 
		"logic_expression", "success_failure_condition", "logic_condition", "logic_operation", 
		"sign_condition", "sign_condition_name", "class_condition", "class_condition_name", 
		"condition_operator", "identifier_lvalue", "identifier", "arguments", 
		"subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'!'", 
		"'_'", "'+'", "'-'", undefined, undefined, "','", "';'", "':'", "'='", 
		"'<'", "'<='", "'>='", "'>'", "'('", "')'", "'['", "']'", "'^'", "'@'", 
		"'.'", "'{'", "'}'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ACCEPT", "ACCESS", "ADD", "AFTER", "ALL", "ALPHA", "ALPHABET", 
		"ALPHABETIC", "ALPHABETIC_LOWER", "ALPHABETIC_UPPER", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CRT", "CURRENCY", "CURRENT", "CURSOR", "DATA", "DATE", "DATE_COMPILED", 
		"DATE_WRITTEN", "DAY", "DAY_OF_WEEK", "DE", "DEBUGGING", "DECIMAL_POINT", 
		"DECLARATIVES", "DECLARATIVES_IN_A_AREA", "DEFAULT", "DEFERRED_WRITE", 
		"DELETE", "DELIMITER", "DEPENDING", "DESCENDING", "DETAIL", "DISK", "DISPLAY", 
		"DIVIDE", "DIVISION", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "ECHO", 
		"EDITING", "END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", 
		"END_DELETE", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_IN_A_AREA", 
		"END_MULTIPLY", "END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", 
		"END_REWRITE", "END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", 
		"END_UNSTRING", "END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", 
		"EOL", "EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", 
		"EXCLUSIVE", "EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FD", 
		"FILE", "FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", "FIRST", 
		"FLOAT_EXTENDED", "FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", "FOREGROUND_COLOR", 
		"FROM", "FULL", "FUNCTION", "GENERATE", "GIVING", "GLOBAL", "GO", "GREATER", 
		"GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", "I64", "ID", 
		"IDENT", "IDENTIFICATION", "IDENTIFICATION_IN_A_AREA", "IF", "IN", "INDEX", 
		"INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
		"INSPECT", "INSTALLATION", "INVALID", "IS", "I_O", "I_O_CONTROL", "JUST", 
		"JUSTIFIED", "KEY", "LABEL", "LAST", "LEADING", "LEFT", "LESS", "LIMIT", 
		"LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", "LINKAGE", "LOCK", 
		"LOCK_HOLDING", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MANUAL", "MASS_INSERT", 
		"MEMORY", "MERGE", "MODE", "MODULES", "MOVE", "MULTIPLE", "MULTIPLY", 
		"NATIVE", "NEGATIVE", "NEXT", "NO", "NOT", "NUMBER", "NUMERIC", "OBJECT_COMPUTER", 
		"OCCURS", "OF", "OFF", "OMITTED", "ON", "OPEN", "OPTIONAL", "OPTIONS", 
		"OR", "ORGANIZATION", "OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", 
		"PAGE", "PAPER_TAPE_PUNCH", "PAPER_TAPE_READER", "PERFORM", "PF", "PH", 
		"PIC", "PICTURE", "PLUS", "POINTER", "POINTER_64", "POSITION", "POSITIVE", 
		"PREALLOCATION", "PRINTER", "PRINT_CONTROL", "PROCEDURE", "PROGRAM", "PROGRAM_ID", 
		"PROTECTED", "QUOTE", "QUOTES", "RANDOM", "RD", "READ", "RECORD", "RECORDS", 
		"REDEFINES", "REEL", "REFERENCE", "RELATIVE", "RELEASE", "RENAMES", "REPLACE", 
		"REPLACING", "REPORT", "REPORTING", "REPORTS", "REQUIRED", "RERUN", "RESERVE", 
		"RESET", "RETURN", "REVERSED", "REVERSE_VIDEO", "REWRITE", "RF", "RH", 
		"RIGHT", "ROLLBACK", "SAME", "SCREEN", "SD", "SEARCH", "SECTION", "SECURE", 
		"SECURITY", "SEGMENT_LIMIT", "SELECT", "SEPARATE", "SEQUENCE", "SEQUENTIAL", 
		"SET", "SIGN", "SIGNED", "SIZE", "SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", 
		"SPACE", "SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", 
		"START", "STATUS", "STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", 
		"SWITCH", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", 
		"SYSOUT", "TALLYING", "TAPE", "TERMINATE", "THAN", "THROUGH", "THRU", 
		"TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", 
		"UNDERLINED", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UP", "UPON", 
		"USAGE", "USE", "USING", "VALUE", "VALUES", "VARYING", "VAX", "WHEN", 
		"WINDOW", "WITH", "WORDS", "WORKING_STORAGE", "WRITE", "YYYYDDD", "YYYYMMDD", 
		"ZERO", "ZEROES", "ZEROS", "START_SLASH_", "START_STAR_", "EXCLAM_", "UNDER_", 
		"PLUS_", "MINUS_", "STAR_", "SLASH_", "COMMA_", "SEMI_", "COLON_", "EQUAL_", 
		"LT_", "LE_", "GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", 
		"POINTER_", "ATP_", "DOT_", "LCURLY_", "RCURLY_", "STRING_LITERAL", "NUMERIC_LITERAL", 
		"HEX_LITERAL", "USER_DEFINED_WORD", "START_FOUR_SPACES", "WHITESPACE", 
		"NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(cobolParser._LITERAL_NAMES, cobolParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return cobolParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "cobol.g4"; }

	// @Override
	public get ruleNames(): string[] { return cobolParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return cobolParser._serializedATN; }

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(cobolParser._ATN, this);
	}
	// @RuleVersion(0)
	public cobol_source(): Cobol_sourceContext {
		let _localctx: Cobol_sourceContext = new Cobol_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, cobolParser.RULE_cobol_source);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.IDENTIFICATION_IN_A_AREA || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				this.state = 528;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.IDENTIFICATION_IN_A_AREA:
					{
					this.state = 526;
					this.program();
					}
					break;
				case cobolParser.START_SLASH_:
				case cobolParser.START_STAR_:
				case cobolParser.COMMA_:
				case cobolParser.SEMI_:
				case cobolParser.START_FOUR_SPACES:
				case cobolParser.WHITESPACE:
				case cobolParser.NEWLINE:
					{
					this.state = 527;
					this.separator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 533;
			this.match(cobolParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public figurative_constant(): Figurative_constantContext {
		let _localctx: Figurative_constantContext = new Figurative_constantContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, cobolParser.RULE_figurative_constant);
		try {
			this.state = 547;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 535;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.SPACE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 536;
				this.match(cobolParser.SPACE);
				}
				break;
			case cobolParser.SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 537;
				this.match(cobolParser.SPACES);
				}
				break;
			case cobolParser.HIGH_VALUE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 538;
				this.match(cobolParser.HIGH_VALUE);
				}
				break;
			case cobolParser.HIGH_VALUES:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 539;
				this.match(cobolParser.HIGH_VALUES);
				}
				break;
			case cobolParser.LOW_VALUE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 540;
				this.match(cobolParser.LOW_VALUE);
				}
				break;
			case cobolParser.LOW_VALUES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 541;
				this.match(cobolParser.LOW_VALUES);
				}
				break;
			case cobolParser.QUOTE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 542;
				this.match(cobolParser.QUOTE);
				}
				break;
			case cobolParser.QUOTES:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 543;
				this.match(cobolParser.QUOTES);
				}
				break;
			case cobolParser.ALL:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 544;
				this.match(cobolParser.ALL);
				this.state = 545;
				this.match(cobolParser.WHITESPACE);
				this.state = 546;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public separator(): SeparatorContext {
		let _localctx: SeparatorContext = new SeparatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, cobolParser.RULE_separator);
		try {
			this.state = 555;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 549;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 550;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 551;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.COMMA_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 552;
				this.match(cobolParser.COMMA_);
				}
				break;
			case cobolParser.SEMI_:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 553;
				this.match(cobolParser.SEMI_);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 554;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic_separator(): Arithmetic_separatorContext {
		let _localctx: Arithmetic_separatorContext = new Arithmetic_separatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, cobolParser.RULE_arithmetic_separator);
		try {
			this.state = 561;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.WHITESPACE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 557;
				this.match(cobolParser.WHITESPACE);
				}
				break;
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 558;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 559;
				this.match(cobolParser.START_FOUR_SPACES);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 560;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_comment(): Line_commentContext {
		let _localctx: Line_commentContext = new Line_commentContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, cobolParser.RULE_line_comment);
		let _la: number;
		try {
			this.state = 579;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_SLASH_:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 563;
				this.match(cobolParser.START_SLASH_);
				this.state = 567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 564;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 570;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 571;
				this.match(cobolParser.START_STAR_);
				this.state = 575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 572;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 577;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 578;
				this.match(cobolParser.NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, cobolParser.RULE_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 581;
			this.identification_division();
			this.state = 583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ENVIRONMENT) {
				{
				this.state = 582;
				this.environment_division();
				}
			}

			this.state = 586;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DATA) {
				{
				this.state = 585;
				this.data_division();
				}
			}

			this.state = 589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROCEDURE) {
				{
				this.state = 588;
				this.procedure_division();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division(): Procedure_divisionContext {
		let _localctx: Procedure_divisionContext = new Procedure_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, cobolParser.RULE_procedure_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 591;
			this.procedure_division_header();
			this.state = 593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DECLARATIVES_IN_A_AREA) {
				{
				this.state = 592;
				this.declaratives();
				}
			}

			this.state = 619;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				{
				this.state = 604;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 595;
						this.section();
						this.state = 599;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 596;
								this.separator();
								}
								}
							}
							this.state = 601;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
						}
						}
						}
					}
					this.state = 606;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 13, this._ctx);
				}
				}
				break;

			case 2:
				{
				this.state = 616;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 607;
						this.paragraph();
						this.state = 611;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 608;
								this.separator();
								}
								}
							}
							this.state = 613;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
						}
						}
						}
					}
					this.state = 618;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);
				}
				}
				break;
			}
			this.state = 635;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.END_IN_A_AREA) {
				{
				this.state = 621;
				this.match(cobolParser.END_IN_A_AREA);
				this.state = 623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 622;
					this.separator();
					}
					}
					this.state = 625;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 627;
				this.match(cobolParser.PROGRAM);
				this.state = 629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 628;
					this.separator();
					}
					}
					this.state = 631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 633;
				this.program_name();
				}
			}

			this.state = 640;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 637;
					this.procedure_test_line();
					}
					}
				}
				this.state = 642;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_division_header(): Procedure_division_headerContext {
		let _localctx: Procedure_division_headerContext = new Procedure_division_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, cobolParser.RULE_procedure_division_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 643;
			this.match(cobolParser.PROCEDURE);
			this.state = 645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 644;
				this.separator();
				}
				}
				this.state = 647;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 649;
			this.match(cobolParser.DIVISION);
			this.state = 657;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 650;
					this.separator();
					}
					}
					this.state = 653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 655;
				this.using();
				}
				break;
			}
			this.state = 666;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
			case 1:
				{
				this.state = 660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 659;
					this.separator();
					}
					}
					this.state = 662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 664;
				this.giving();
				}
				break;
			}
			this.state = 671;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 668;
				this.separator();
				}
				}
				this.state = 673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 674;
			this.match(cobolParser.DOT_);
			this.state = 678;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 675;
					this.separator();
					}
					}
				}
				this.state = 680;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section(): SectionContext {
		let _localctx: SectionContext = new SectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, cobolParser.RULE_section);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 681;
			this.section_header();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives(): DeclarativesContext {
		let _localctx: DeclarativesContext = new DeclarativesContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, cobolParser.RULE_declaratives);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 683;
			this.match(cobolParser.DECLARATIVES_IN_A_AREA);
			this.state = 687;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 684;
				this.separator();
				}
				}
				this.state = 689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 690;
			this.match(cobolParser.DOT_);
			this.state = 694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 691;
				this.separator();
				}
				}
				this.state = 696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 697;
				this.declaratives_section();
				this.state = 701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 698;
					this.separator();
					}
					}
					this.state = 703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 708;
			this.match(cobolParser.END_IN_A_AREA);
			this.state = 710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 709;
				this.separator();
				}
				}
				this.state = 712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 714;
			this.match(cobolParser.DECLARATIVES);
			this.state = 718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 715;
				this.separator();
				}
				}
				this.state = 720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 721;
			this.match(cobolParser.DOT_);
			this.state = 725;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 722;
					this.separator();
					}
					}
				}
				this.state = 727;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declaratives_section(): Declaratives_sectionContext {
		let _localctx: Declaratives_sectionContext = new Declaratives_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, cobolParser.RULE_declaratives_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 728;
			this.section_header();
			this.state = 729;
			this.use_statement();
			this.state = 739;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 731;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 730;
						this.separator();
						}
						}
						this.state = 733;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 735;
					this.declarative_paragraph();
					}
					}
				}
				this.state = 741;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarative_paragraph(): Declarative_paragraphContext {
		let _localctx: Declarative_paragraphContext = new Declarative_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, cobolParser.RULE_declarative_paragraph);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 742;
			this.paragraph();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph(): ParagraphContext {
		let _localctx: ParagraphContext = new ParagraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, cobolParser.RULE_paragraph);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 744;
			this.paragraph_name();
			this.state = 748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 745;
				this.separator();
				}
				}
				this.state = 750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 751;
			this.match(cobolParser.DOT_);
			this.state = 755;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 752;
					this.separator();
					}
					}
				}
				this.state = 757;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
			}
			this.state = 767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCEPT) {
				{
				{
				this.state = 758;
				this.sentense();
				this.state = 762;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 759;
						this.separator();
						}
						}
					}
					this.state = 764;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
				}
				}
				}
				this.state = 769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sentense(): SentenseContext {
		let _localctx: SentenseContext = new SentenseContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, cobolParser.RULE_sentense);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 770;
				this.statement();
				this.state = 774;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 771;
						this.separator();
						}
						}
					}
					this.state = 776;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
				}
				}
				}
				this.state = 779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.ACCEPT);
			this.state = 784;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 781;
				this.separator();
				}
				}
				this.state = 786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 787;
			this.match(cobolParser.DOT_);
			this.state = 791;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 788;
					this.separator();
					}
					}
				}
				this.state = 793;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 44, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_statement(): Use_statementContext {
		let _localctx: Use_statementContext = new Use_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, cobolParser.RULE_use_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 794;
			this.match(cobolParser.USE);
			this.state = 802;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				{
				this.state = 796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 795;
					this.separator();
					}
					}
					this.state = 798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 800;
				this.match(cobolParser.GLOBAL);
				}
				break;
			}
			this.state = 805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 804;
				this.separator();
				}
				}
				this.state = 807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 873;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AFTER:
				{
				this.state = 809;
				this.match(cobolParser.AFTER);
				this.state = 817;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 49, this._ctx) ) {
				case 1:
					{
					this.state = 811;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 810;
						this.separator();
						}
						}
						this.state = 813;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 815;
					this.match(cobolParser.STANDARD);
					}
					break;
				}
				this.state = 820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 819;
					this.separator();
					}
					}
					this.state = 822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 824;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ERROR || _la === cobolParser.EXCEPTION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 825;
					this.separator();
					}
					}
					this.state = 828;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 830;
				this.match(cobolParser.PROCEDURE);
				this.state = 838;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
				case 1:
					{
					this.state = 832;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 831;
						this.separator();
						}
						}
						this.state = 834;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 836;
					this.match(cobolParser.ON);
					}
					break;
				}
				this.state = 841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 840;
					this.separator();
					}
					}
					this.state = 843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 845;
				this.use_on();
				this.state = 849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 846;
					this.separator();
					}
					}
					this.state = 851;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 852;
				this.match(cobolParser.DOT_);
				this.state = 856;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 853;
						this.separator();
						}
						}
					}
					this.state = 858;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
				}
				}
				break;
			case cobolParser.BEFORE:
				{
				this.state = 859;
				this.match(cobolParser.BEFORE);
				this.state = 861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 860;
					this.separator();
					}
					}
					this.state = 863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 865;
				this.match(cobolParser.REPORTING);
				this.state = 867;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 866;
					this.separator();
					}
					}
					this.state = 869;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 871;
				this.group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_data_name(): Group_data_nameContext {
		let _localctx: Group_data_nameContext = new Group_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, cobolParser.RULE_group_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 875;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_on(): Use_onContext {
		let _localctx: Use_onContext = new Use_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, cobolParser.RULE_use_on);
		let _la: number;
		try {
			let _alt: number;
			this.state = 894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 877;
				this.file_name();
				this.state = 887;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 879;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 878;
							this.separator();
							}
							}
							this.state = 881;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 883;
						this.file_name();
						}
						}
					}
					this.state = 889;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 61, this._ctx);
				}
				}
				break;
			case cobolParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 890;
				this.match(cobolParser.INPUT);
				}
				break;
			case cobolParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 891;
				this.match(cobolParser.OUTPUT);
				}
				break;
			case cobolParser.I_O:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 892;
				this.match(cobolParser.I_O);
				}
				break;
			case cobolParser.EXTEND:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 893;
				this.match(cobolParser.EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_header(): Section_headerContext {
		let _localctx: Section_headerContext = new Section_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, cobolParser.RULE_section_header);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 896;
			this.section_name();
			this.state = 898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 897;
				this.separator();
				}
				}
				this.state = 900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 902;
			this.match(cobolParser.SECTION);
			this.state = 910;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				{
				this.state = 904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 903;
					this.separator();
					}
					}
					this.state = 906;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 908;
				this.segment_number();
				}
				break;
			}
			this.state = 915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 912;
				this.separator();
				}
				}
				this.state = 917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 918;
			this.match(cobolParser.DOT_);
			this.state = 922;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 919;
					this.separator();
					}
					}
				}
				this.state = 924;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public paragraph_name(): Paragraph_nameContext {
		let _localctx: Paragraph_nameContext = new Paragraph_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, cobolParser.RULE_paragraph_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 925;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public section_name(): Section_nameContext {
		let _localctx: Section_nameContext = new Section_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, cobolParser.RULE_section_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 927;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using(): UsingContext {
		let _localctx: UsingContext = new UsingContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, cobolParser.RULE_using);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 929;
			this.match(cobolParser.USING);
			this.state = 931;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 930;
				this.separator();
				}
				}
				this.state = 933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 935;
			this.qualified_data_item();
			this.state = 945;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 937;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 936;
						this.separator();
						}
						}
						this.state = 939;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 941;
					this.qualified_data_item();
					}
					}
				}
				this.state = 947;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giving(): GivingContext {
		let _localctx: GivingContext = new GivingContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, cobolParser.RULE_giving);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 948;
			this.match(cobolParser.GIVING);
			this.state = 950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 949;
				this.separator();
				}
				}
				this.state = 952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 954;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedure_test_line(): Procedure_test_lineContext {
		let _localctx: Procedure_test_lineContext = new Procedure_test_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, cobolParser.RULE_procedure_test_line);
		let _la: number;
		try {
			this.state = 975;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 956;
				this.arithmetic_expression(0);
				this.state = 960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 957;
					this.separator();
					}
					}
					this.state = 962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 963;
				this.match(cobolParser.DOT_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 965;
				this.logic_expression(0);
				this.state = 969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 966;
					this.separator();
					}
					}
					this.state = 971;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 972;
				this.match(cobolParser.DOT_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 974;
				this.separator();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, cobolParser.RULE_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 977;
			this.accept_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_statement(): Accept_statementContext {
		let _localctx: Accept_statementContext = new Accept_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, cobolParser.RULE_accept_statement);
		try {
			this.state = 985;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 979;
				this.accept_form1();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 980;
				this.accept_form2();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 981;
				this.accept_form3();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 982;
				this.accept_form4();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 983;
				this.accept_form5();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 984;
				this.accept_form6();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception_variants(): On_exception_variantsContext {
		let _localctx: On_exception_variantsContext = new On_exception_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, cobolParser.RULE_on_exception_variants);
		let _la: number;
		try {
			this.state = 1019;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.EXCEPTION:
			case cobolParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 987;
				this.on_exception();
				this.state = 1001;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 78, this._ctx) ) {
				case 1:
					{
					this.state = 989;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 988;
						this.separator();
						}
						}
						this.state = 991;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 993;
					this.match(cobolParser.NOT);
					this.state = 995;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 994;
						this.separator();
						}
						}
						this.state = 997;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 999;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 1003;
				this.match(cobolParser.NOT);
				this.state = 1005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1004;
					this.separator();
					}
					}
					this.state = 1007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1009;
				this.on_exception();
				this.state = 1017;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 81, this._ctx) ) {
				case 1:
					{
					this.state = 1011;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1010;
						this.separator();
						}
						}
						this.state = 1013;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1015;
					this.on_exception();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end_variants(): At_end_variantsContext {
		let _localctx: At_end_variantsContext = new At_end_variantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, cobolParser.RULE_at_end_variants);
		let _la: number;
		try {
			this.state = 1053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.AT:
			case cobolParser.END:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 1021;
				this.at_end();
				this.state = 1035;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
				case 1:
					{
					this.state = 1023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1022;
						this.separator();
						}
						}
						this.state = 1025;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1027;
					this.match(cobolParser.NOT);
					this.state = 1029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1028;
						this.separator();
						}
						}
						this.state = 1031;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1033;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			case cobolParser.NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 1037;
				this.match(cobolParser.NOT);
				this.state = 1039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1038;
					this.separator();
					}
					}
					this.state = 1041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1043;
				this.at_end();
				this.state = 1051;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 88, this._ctx) ) {
				case 1:
					{
					this.state = 1045;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1044;
						this.separator();
						}
						}
						this.state = 1047;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1049;
					this.at_end();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form6(): Accept_form6Context {
		let _localctx: Accept_form6Context = new Accept_form6Context(this._ctx, this.state);
		this.enterRule(_localctx, 54, cobolParser.RULE_accept_form6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1055;
			this.match(cobolParser.ACCEPT);
			this.state = 1057;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1056;
				this.separator();
				}
				}
				this.state = 1059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1061;
			this.dest_item();
			this.state = 1063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1062;
				this.separator();
				}
				}
				this.state = 1065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			{
			this.state = 1067;
			this.match(cobolParser.FROM);
			this.state = 1069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1068;
				this.separator();
				}
				}
				this.state = 1071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			}
			this.state = 1073;
			this.accept6_item();
			this.state = 1081;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				{
				this.state = 1075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1074;
					this.separator();
					}
					}
					this.state = 1077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1079;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 1090;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				{
				this.state = 1084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1083;
					this.separator();
					}
					}
					this.state = 1086;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1088;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept6_item(): Accept6_itemContext {
		let _localctx: Accept6_itemContext = new Accept6_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, cobolParser.RULE_accept6_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1092;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form1(): Accept_form1Context {
		let _localctx: Accept_form1Context = new Accept_form1Context(this._ctx, this.state);
		this.enterRule(_localctx, 58, cobolParser.RULE_accept_form1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1094;
			this.match(cobolParser.ACCEPT);
			this.state = 1096;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1095;
				this.separator();
				}
				}
				this.state = 1098;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1100;
			this.dest_item();
			this.state = 1114;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 100, this._ctx) ) {
			case 1:
				{
				this.state = 1102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1101;
					this.separator();
					}
					}
					this.state = 1104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1106;
				this.match(cobolParser.FROM);
				this.state = 1108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1107;
					this.separator();
					}
					}
					this.state = 1110;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1112;
				this.input_source();
				}
				break;
			}
			this.state = 1129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1116;
					this.separator();
					}
					}
					this.state = 1119;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1121;
				this.match(cobolParser.WITH);
				this.state = 1123;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1122;
					this.separator();
					}
					}
					this.state = 1125;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1127;
				this.match(cobolParser.CONVERSION);
				}
				break;
			}
			this.state = 1138;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				{
				this.state = 1132;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1131;
					this.separator();
					}
					}
					this.state = 1134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1136;
				this.at_end_variants();
				}
				break;
			}
			this.state = 1147;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				{
				this.state = 1141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1140;
					this.separator();
					}
					}
					this.state = 1143;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1145;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form2(): Accept_form2Context {
		let _localctx: Accept_form2Context = new Accept_form2Context(this._ctx, this.state);
		this.enterRule(_localctx, 60, cobolParser.RULE_accept_form2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1149;
			this.match(cobolParser.ACCEPT);
			this.state = 1151;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1150;
				this.separator();
				}
				}
				this.state = 1153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1155;
			this.dest_item();
			this.state = 1157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1156;
				this.separator();
				}
				}
				this.state = 1159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1161;
			this.match(cobolParser.FROM);
			this.state = 1163;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1162;
				this.separator();
				}
				}
				this.state = 1165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1167;
			this.date_time();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3(): Accept_form3Context {
		let _localctx: Accept_form3Context = new Accept_form3Context(this._ctx, this.state);
		this.enterRule(_localctx, 62, cobolParser.RULE_accept_form3);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1169;
			this.match(cobolParser.ACCEPT);
			this.state = 1171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1170;
				this.separator();
				}
				}
				this.state = 1173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1175;
			this.dest_item();
			this.state = 1183;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1176;
						this.separator();
						}
						}
						this.state = 1179;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1181;
					this.accept_form3_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1185;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 113, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1196;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 116, this._ctx) ) {
			case 1:
				{
				this.state = 1188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1187;
					this.separator();
					}
					}
					this.state = 1190;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1194;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
				case 1:
					{
					this.state = 1192;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 1193;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 1205;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				{
				this.state = 1199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1198;
					this.separator();
					}
					}
					this.state = 1201;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1203;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4(): Accept_form4Context {
		let _localctx: Accept_form4Context = new Accept_form4Context(this._ctx, this.state);
		this.enterRule(_localctx, 64, cobolParser.RULE_accept_form4);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1207;
			this.match(cobolParser.ACCEPT);
			this.state = 1209;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1208;
				this.separator();
				}
				}
				this.state = 1211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1219;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTROL) {
				{
				this.state = 1213;
				this.match(cobolParser.CONTROL);
				this.state = 1215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1214;
					this.separator();
					}
					}
					this.state = 1217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1221;
			this.match(cobolParser.KEY);
			this.state = 1223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1222;
				this.separator();
				}
				}
				this.state = 1225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 1227;
				this.match(cobolParser.IN);
				this.state = 1229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1228;
					this.separator();
					}
					}
					this.state = 1231;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1235;
			this.key_dest_item();
			this.state = 1243;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1236;
						this.separator();
						}
						}
						this.state = 1239;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1241;
					this.accept_form4_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1245;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 1256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
			case 1:
				{
				this.state = 1248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1247;
					this.separator();
					}
					}
					this.state = 1250;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1254;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
				case 1:
					{
					this.state = 1252;
					this.on_exception_variants();
					}
					break;

				case 2:
					{
					this.state = 1253;
					this.at_end_variants();
					}
					break;
				}
				}
				break;
			}
			this.state = 1265;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
			case 1:
				{
				this.state = 1259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1258;
					this.separator();
					}
					}
					this.state = 1261;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1263;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form5(): Accept_form5Context {
		let _localctx: Accept_form5Context = new Accept_form5Context(this._ctx, this.state);
		this.enterRule(_localctx, 66, cobolParser.RULE_accept_form5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1267;
			this.match(cobolParser.ACCEPT);
			this.state = 1269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1268;
				this.separator();
				}
				}
				this.state = 1271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1273;
			this.screen_name();
			this.state = 1281;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				{
				this.state = 1275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1274;
					this.separator();
					}
					}
					this.state = 1277;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1279;
				this.accept_at();
				}
				break;
			}
			this.state = 1290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				{
				this.state = 1284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1283;
					this.separator();
					}
					}
					this.state = 1286;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1288;
				this.on_exception_variants();
				}
				break;
			}
			this.state = 1299;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
			case 1:
				{
				this.state = 1293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1292;
					this.separator();
					}
					}
					this.state = 1295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1297;
				this.match(cobolParser.END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at(): Accept_atContext {
		let _localctx: Accept_atContext = new Accept_atContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, cobolParser.RULE_accept_at);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 1301;
				this.match(cobolParser.AT);
				this.state = 1303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1302;
					this.separator();
					}
					}
					this.state = 1305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1329;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				{
				this.state = 1309;
				this.accept_at_line();
				this.state = 1317;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 142, this._ctx) ) {
				case 1:
					{
					this.state = 1311;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1310;
						this.separator();
						}
						}
						this.state = 1313;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1315;
					this.accept_at_column();
					}
					break;
				}
				}
				break;
			case cobolParser.COLUMN:
				{
				this.state = 1319;
				this.accept_at_column();
				this.state = 1327;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
				case 1:
					{
					this.state = 1321;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1320;
						this.separator();
						}
						}
						this.state = 1323;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1325;
					this.accept_at_line();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_line(): Accept_at_lineContext {
		let _localctx: Accept_at_lineContext = new Accept_at_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, cobolParser.RULE_accept_at_line);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1331;
			this.match(cobolParser.LINE);
			this.state = 1333;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1332;
				this.separator();
				}
				}
				this.state = 1335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 1337;
				this.match(cobolParser.NUMBER);
				this.state = 1339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1338;
					this.separator();
					}
					}
					this.state = 1341;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1347;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1345;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1346;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_at_column(): Accept_at_columnContext {
		let _localctx: Accept_at_columnContext = new Accept_at_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, cobolParser.RULE_accept_at_column);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1349;
			this.match(cobolParser.COLUMN);
			this.state = 1351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1350;
				this.separator();
				}
				}
				this.state = 1353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.NUMBER) {
				{
				this.state = 1355;
				this.match(cobolParser.NUMBER);
				this.state = 1357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1356;
					this.separator();
					}
					}
					this.state = 1359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 1363;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 1364;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form4_clause(): Accept_form4_clauseContext {
		let _localctx: Accept_form4_clauseContext = new Accept_form4_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, cobolParser.RULE_accept_form4_clause);
		let _la: number;
		try {
			this.state = 1459;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 1367;
					this.match(cobolParser.FROM);
					this.state = 1369;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1368;
						this.separator();
						}
						}
						this.state = 1371;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1375;
				this.match(cobolParser.LINE);
				this.state = 1383;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
				case 1:
					{
					this.state = 1377;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1376;
						this.separator();
						}
						}
						this.state = 1379;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1381;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 1386;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1385;
					this.separator();
					}
					}
					this.state = 1388;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1390;
				this.number_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM) {
					{
					this.state = 1392;
					this.match(cobolParser.FROM);
					this.state = 1394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1393;
						this.separator();
						}
						}
						this.state = 1396;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1400;
				this.match(cobolParser.COLUMN);
				this.state = 1408;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
				case 1:
					{
					this.state = 1402;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1401;
						this.separator();
						}
						}
						this.state = 1404;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1406;
					this.match(cobolParser.NUMBER);
					}
					break;
				}
				this.state = 1411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1410;
					this.separator();
					}
					}
					this.state = 1413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1415;
				this.number_value();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1417;
				this.match(cobolParser.ERASE);
				this.state = 1441;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
				case 1:
					{
					this.state = 1419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1418;
						this.separator();
						}
						}
						this.state = 1421;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1429;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.TO) {
						{
						this.state = 1423;
						this.match(cobolParser.TO);
						this.state = 1425;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1424;
							this.separator();
							}
							}
							this.state = 1427;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					this.state = 1431;
					this.match(cobolParser.END);
					this.state = 1439;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 168, this._ctx) ) {
					case 1:
						{
						this.state = 1433;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1432;
							this.separator();
							}
							}
							this.state = 1435;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 1437;
						this.match(cobolParser.OF);
						}
						break;
					}
					}
					break;
				}
				this.state = 1444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1443;
					this.separator();
					}
					}
					this.state = 1446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1448;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1450;
					this.match(cobolParser.WITH);
					this.state = 1452;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1451;
						this.separator();
						}
						}
						this.state = 1454;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1458;
				this.match(cobolParser.BELL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public accept_form3_clause(): Accept_form3_clauseContext {
		let _localctx: Accept_form3_clauseContext = new Accept_form3_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, cobolParser.RULE_accept_form3_clause);
		let _la: number;
		try {
			this.state = 1550;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1461;
				this.accept_form4_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1462;
				this.match(cobolParser.UNDERLINED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1463;
				this.match(cobolParser.BOLD);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1464;
					this.match(cobolParser.WITH);
					this.state = 1466;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1465;
						this.separator();
						}
						}
						this.state = 1468;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1472;
				this.match(cobolParser.BLINKING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1473;
				this.match(cobolParser.PROTECTED);
				this.state = 1481;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
				case 1:
					{
					this.state = 1475;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1474;
						this.separator();
						}
						}
						this.state = 1477;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1479;
					this.protected_value();
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1483;
					this.match(cobolParser.WITH);
					this.state = 1485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1484;
						this.separator();
						}
						}
						this.state = 1487;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1491;
				this.match(cobolParser.CONVERSION);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1492;
				this.match(cobolParser.REVERSED);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1499;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1493;
					this.match(cobolParser.WITH);
					this.state = 1495;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1494;
						this.separator();
						}
						}
						this.state = 1497;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1501;
				this.match(cobolParser.NO);
				this.state = 1503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1502;
					this.separator();
					}
					}
					this.state = 1505;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1507;
				this.match(cobolParser.ECHO);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1509;
				this.match(cobolParser.DEFAULT);
				this.state = 1511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1510;
					this.separator();
					}
					}
					this.state = 1513;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 1515;
					this.match(cobolParser.IS);
					this.state = 1517;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1516;
						this.separator();
						}
						}
						this.state = 1519;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1523;
				this.def_value();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1531;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTROL) {
					{
					this.state = 1525;
					this.match(cobolParser.CONTROL);
					this.state = 1527;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1526;
						this.separator();
						}
						}
						this.state = 1529;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1533;
				this.match(cobolParser.KEY);
				this.state = 1541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
				case 1:
					{
					this.state = 1535;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1534;
						this.separator();
						}
						}
						this.state = 1537;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1539;
					this.match(cobolParser.IN);
					}
					break;
				}
				this.state = 1544;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1543;
					this.separator();
					}
					}
					this.state = 1546;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1548;
				this.key_dest_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_dest_item(): Key_dest_itemContext {
		let _localctx: Key_dest_itemContext = new Key_dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, cobolParser.RULE_key_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1552;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_value(): Def_valueContext {
		let _localctx: Def_valueContext = new Def_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, cobolParser.RULE_def_value);
		let _la: number;
		try {
			this.state = 1567;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ALL:
			case cobolParser.HIGH_VALUE:
			case cobolParser.HIGH_VALUES:
			case cobolParser.LOW_VALUE:
			case cobolParser.LOW_VALUES:
			case cobolParser.QUOTE:
			case cobolParser.QUOTES:
			case cobolParser.SPACE:
			case cobolParser.SPACES:
			case cobolParser.ZERO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1554;
				this.figurative_constant();
				}
				break;
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1555;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1556;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CURRENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1557;
				this.match(cobolParser.CURRENT);
				this.state = 1565;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 193, this._ctx) ) {
				case 1:
					{
					this.state = 1559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1558;
						this.separator();
						}
						}
						this.state = 1561;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1563;
					this.match(cobolParser.VALUE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public protected_value(): Protected_valueContext {
		let _localctx: Protected_valueContext = new Protected_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, cobolParser.RULE_protected_value);
		let _la: number;
		try {
			this.state = 1627;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1569;
				this.match(cobolParser.SIZE);
				this.state = 1571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1570;
					this.separator();
					}
					}
					this.state = 1573;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1575;
				this.prot_size_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1577;
					this.match(cobolParser.WITH);
					this.state = 1579;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1578;
						this.separator();
						}
						}
						this.state = 1581;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1585;
				this.match(cobolParser.AUTOTERMINATE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1586;
					this.match(cobolParser.WITH);
					this.state = 1588;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1587;
						this.separator();
						}
						}
						this.state = 1590;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1594;
				this.match(cobolParser.NO);
				this.state = 1596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1595;
					this.separator();
					}
					}
					this.state = 1598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1600;
				this.match(cobolParser.BLANK);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1602;
					this.match(cobolParser.WITH);
					this.state = 1604;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1603;
						this.separator();
						}
						}
						this.state = 1606;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1610;
				this.match(cobolParser.EDITING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 1611;
					this.match(cobolParser.WITH);
					this.state = 1613;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1612;
						this.separator();
						}
						}
						this.state = 1615;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 1619;
				this.match(cobolParser.FILLER);
				this.state = 1621;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1620;
					this.separator();
					}
					}
					this.state = 1623;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 1625;
				this.prot_fill_lit();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_fill_lit(): Prot_fill_litContext {
		let _localctx: Prot_fill_litContext = new Prot_fill_litContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, cobolParser.RULE_prot_fill_lit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1629;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prot_size_value(): Prot_size_valueContext {
		let _localctx: Prot_size_valueContext = new Prot_size_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, cobolParser.RULE_prot_size_value);
		try {
			this.state = 1633;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1631;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1632;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number_value(): Number_valueContext {
		let _localctx: Number_valueContext = new Number_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, cobolParser.RULE_number_value);
		let _la: number;
		try {
			this.state = 1664;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1635;
				this.line_num();
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1636;
				this.qualified_data_item();
				this.state = 1652;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
				case 1:
					{
					this.state = 1638;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1637;
						this.separator();
						}
						}
						this.state = 1640;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1642;
					this.match(cobolParser.PLUS);
					this.state = 1650;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
					case 1:
						{
						this.state = 1644;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 1643;
							this.separator();
							}
							}
							this.state = 1646;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 1648;
						this.line_num();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1654;
				this.match(cobolParser.PLUS);
				this.state = 1662;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
				case 1:
					{
					this.state = 1656;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1655;
						this.separator();
						}
						}
						this.state = 1658;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1660;
					this.line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_time(): Date_timeContext {
		let _localctx: Date_timeContext = new Date_timeContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, cobolParser.RULE_date_time);
		let _la: number;
		try {
			this.state = 1688;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1666;
				this.match(cobolParser.DATE);
				this.state = 1674;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
				case 1:
					{
					this.state = 1668;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1667;
						this.separator();
						}
						}
						this.state = 1670;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1672;
					this.match(cobolParser.YYYYMMDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1676;
				this.match(cobolParser.DAY);
				this.state = 1684;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
				case 1:
					{
					this.state = 1678;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 1677;
						this.separator();
						}
						}
						this.state = 1680;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 1682;
					this.match(cobolParser.YYYYDDD);
					}
					break;
				}
				}
				break;
			case cobolParser.DAY_OF_WEEK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1686;
				this.match(cobolParser.DAY_OF_WEEK);
				}
				break;
			case cobolParser.TIME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1687;
				this.match(cobolParser.TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dest_item(): Dest_itemContext {
		let _localctx: Dest_itemContext = new Dest_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, cobolParser.RULE_dest_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1690;
			this.identifier_lvalue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_source(): Input_sourceContext {
		let _localctx: Input_sourceContext = new Input_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, cobolParser.RULE_input_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1692;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public at_end(): At_endContext {
		let _localctx: At_endContext = new At_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, cobolParser.RULE_at_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AT) {
				{
				this.state = 1694;
				this.match(cobolParser.AT);
				this.state = 1696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1695;
					this.separator();
					}
					}
					this.state = 1698;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1702;
			this.match(cobolParser.END);
			this.state = 1704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1703;
				this.separator();
				}
				}
				this.state = 1706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1708;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public on_exception(): On_exceptionContext {
		let _localctx: On_exceptionContext = new On_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, cobolParser.RULE_on_exception);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1716;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 1710;
				this.match(cobolParser.ON);
				this.state = 1712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1711;
					this.separator();
					}
					}
					this.state = 1714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 1718;
			this.match(cobolParser.EXCEPTION);
			this.state = 1720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1719;
				this.separator();
				}
				}
				this.state = 1722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1724;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_division(): Data_divisionContext {
		let _localctx: Data_divisionContext = new Data_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, cobolParser.RULE_data_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1726;
			this.match(cobolParser.DATA);
			this.state = 1728;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1727;
				this.separator();
				}
				}
				this.state = 1730;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1732;
			this.match(cobolParser.DIVISION);
			this.state = 1736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1733;
				this.separator();
				}
				}
				this.state = 1738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1739;
			this.match(cobolParser.DOT_);
			this.state = 1743;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1740;
					this.separator();
					}
					}
				}
				this.state = 1745;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 228, this._ctx);
			}
			this.state = 1753;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 1746;
				this.file_section();
				this.state = 1750;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1747;
						this.separator();
						}
						}
					}
					this.state = 1752;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 229, this._ctx);
				}
				}
			}

			this.state = 1762;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WORKING_STORAGE) {
				{
				this.state = 1755;
				this.working_storage_section();
				this.state = 1759;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1756;
						this.separator();
						}
						}
					}
					this.state = 1761;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 231, this._ctx);
				}
				}
			}

			this.state = 1771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LINKAGE) {
				{
				this.state = 1764;
				this.linkage_section();
				this.state = 1768;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1765;
						this.separator();
						}
						}
					}
					this.state = 1770;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 233, this._ctx);
				}
				}
			}

			this.state = 1780;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.REPORT) {
				{
				this.state = 1773;
				this.report_section();
				this.state = 1777;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1774;
						this.separator();
						}
						}
					}
					this.state = 1779;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 235, this._ctx);
				}
				}
			}

			this.state = 1789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SCREEN) {
				{
				this.state = 1782;
				this.screen_section();
				this.state = 1786;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1783;
						this.separator();
						}
						}
					}
					this.state = 1788;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 237, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_section(): File_sectionContext {
		let _localctx: File_sectionContext = new File_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, cobolParser.RULE_file_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1791;
			this.match(cobolParser.FILE);
			this.state = 1793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1792;
				this.separator();
				}
				}
				this.state = 1795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1797;
			this.match(cobolParser.SECTION);
			this.state = 1801;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1798;
				this.separator();
				}
				}
				this.state = 1803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1804;
			this.match(cobolParser.DOT_);
			this.state = 1808;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1805;
					this.separator();
					}
					}
				}
				this.state = 1810;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 241, this._ctx);
			}
			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.FD || _la === cobolParser.RD || _la === cobolParser.SD) {
				{
				{
				this.state = 1838;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.FD:
					{
					this.state = 1811;
					this.file_description_entry();
					this.state = 1821;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1815;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
								{
								{
								this.state = 1812;
								this.separator();
								}
								}
								this.state = 1817;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1818;
							this.record_description_entry();
							}
							}
						}
						this.state = 1823;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
					}
					}
					break;
				case cobolParser.RD:
					{
					this.state = 1824;
					this.report_description_entry();
					}
					break;
				case cobolParser.SD:
					{
					this.state = 1825;
					this.sort_merge_file_description_entry();
					this.state = 1835;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1829;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
								{
								{
								this.state = 1826;
								this.separator();
								}
								}
								this.state = 1831;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 1832;
							this.record_description_entry();
							}
							}
						}
						this.state = 1837;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 245, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1843;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1840;
						this.separator();
						}
						}
					}
					this.state = 1845;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 247, this._ctx);
				}
				}
				}
				this.state = 1850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public working_storage_section(): Working_storage_sectionContext {
		let _localctx: Working_storage_sectionContext = new Working_storage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, cobolParser.RULE_working_storage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1851;
			this.match(cobolParser.WORKING_STORAGE);
			this.state = 1853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1852;
				this.separator();
				}
				}
				this.state = 1855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1857;
			this.match(cobolParser.SECTION);
			this.state = 1861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1858;
				this.separator();
				}
				}
				this.state = 1863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1864;
			this.match(cobolParser.DOT_);
			this.state = 1868;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1865;
					this.separator();
					}
					}
				}
				this.state = 1870;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);
			}
			this.state = 1880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 1871;
				this.record_description_entry();
				this.state = 1875;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1872;
						this.separator();
						}
						}
					}
					this.state = 1877;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 252, this._ctx);
				}
				}
				}
				this.state = 1882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linkage_section(): Linkage_sectionContext {
		let _localctx: Linkage_sectionContext = new Linkage_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, cobolParser.RULE_linkage_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1883;
			this.match(cobolParser.LINKAGE);
			this.state = 1885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1884;
				this.separator();
				}
				}
				this.state = 1887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1889;
			this.match(cobolParser.SECTION);
			this.state = 1893;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1890;
				this.separator();
				}
				}
				this.state = 1895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1896;
			this.match(cobolParser.DOT_);
			this.state = 1900;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1897;
					this.separator();
					}
					}
				}
				this.state = 1902;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
			}
			this.state = 1912;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 1903;
				this.record_description_entry();
				this.state = 1907;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1904;
						this.separator();
						}
						}
					}
					this.state = 1909;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
				}
				}
				}
				this.state = 1914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_section(): Report_sectionContext {
		let _localctx: Report_sectionContext = new Report_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, cobolParser.RULE_report_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1915;
			this.match(cobolParser.REPORT);
			this.state = 1917;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1916;
				this.separator();
				}
				}
				this.state = 1919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1921;
			this.match(cobolParser.SECTION);
			this.state = 1925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1922;
				this.separator();
				}
				}
				this.state = 1927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1928;
			this.match(cobolParser.DOT_);
			this.state = 1932;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1929;
					this.separator();
					}
					}
				}
				this.state = 1934;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
			}
			this.state = 1956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.RD) {
				{
				{
				this.state = 1935;
				this.report_description_entry();
				this.state = 1945;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1939;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
							{
							{
							this.state = 1936;
							this.separator();
							}
							}
							this.state = 1941;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 1942;
						this.report_group_description_entry();
						}
						}
					}
					this.state = 1947;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
				}
				this.state = 1951;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1948;
						this.separator();
						}
						}
					}
					this.state = 1953;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);
				}
				}
				}
				this.state = 1958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_section(): Screen_sectionContext {
		let _localctx: Screen_sectionContext = new Screen_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, cobolParser.RULE_screen_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1959;
			this.match(cobolParser.SCREEN);
			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1960;
				this.separator();
				}
				}
				this.state = 1963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1965;
			this.match(cobolParser.SECTION);
			this.state = 1969;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1966;
				this.separator();
				}
				}
				this.state = 1971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1972;
			this.match(cobolParser.DOT_);
			this.state = 1976;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1973;
					this.separator();
					}
					}
				}
				this.state = 1978;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 268, this._ctx);
			}
			this.state = 1988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.NUMERIC_LITERAL) {
				{
				{
				this.state = 1979;
				this.screen_description_entry();
				this.state = 1983;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1980;
						this.separator();
						}
						}
					}
					this.state = 1985;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 269, this._ctx);
				}
				}
				}
				this.state = 1990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_description_entry(): File_description_entryContext {
		let _localctx: File_description_entryContext = new File_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, cobolParser.RULE_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1991;
			this.match(cobolParser.FD);
			this.state = 1993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1992;
				this.separator();
				}
				}
				this.state = 1995;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 1997;
			this.file_name();
			this.state = 2001;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 1998;
				this.separator();
				}
				}
				this.state = 2003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2013;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ACCESS || _la === cobolParser.ALTERNATE || _la === cobolParser.BLOCK || _la === cobolParser.CODE_SET || _la === cobolParser.DATA || _la === cobolParser.DYNAMIC || ((((_la - 157)) & ~0x1F) === 0 && ((1 << (_la - 157)) & ((1 << (cobolParser.EXTERNAL - 157)) | (1 << (cobolParser.FILE - 157)) | (1 << (cobolParser.GLOBAL - 157)))) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & ((1 << (cobolParser.IS - 204)) | (1 << (cobolParser.LABEL - 204)) | (1 << (cobolParser.LINAGE - 204)))) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (cobolParser.RANDOM - 280)) | (1 << (cobolParser.RECORD - 280)) | (1 << (cobolParser.REPORT - 280)) | (1 << (cobolParser.REPORTS - 280)))) !== 0) || _la === cobolParser.SEQUENTIAL || _la === cobolParser.STATUS || _la === cobolParser.VALUE) {
				{
				{
				this.state = 2004;
				this.fd_clause();
				this.state = 2008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 2005;
					this.separator();
					}
					}
					this.state = 2010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2016;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext {
		let _localctx: Sort_merge_file_description_entryContext = new Sort_merge_file_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, cobolParser.RULE_sort_merge_file_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2018;
			this.match(cobolParser.SD);
			this.state = 2020;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2019;
				this.separator();
				}
				}
				this.state = 2022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2024;
			this.file_name();
			this.state = 2028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 2025;
				this.separator();
				}
				}
				this.state = 2030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.DATA || _la === cobolParser.RECORD) {
				{
				{
				this.state = 2031;
				this.sd_clause();
				this.state = 2035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 2032;
					this.separator();
					}
					}
					this.state = 2037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2043;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_description_entry(): Report_description_entryContext {
		let _localctx: Report_description_entryContext = new Report_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, cobolParser.RULE_report_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2045;
			this.match(cobolParser.RD);
			this.state = 2047;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2046;
				this.separator();
				}
				}
				this.state = 2049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2051;
			this.report_name();
			this.state = 2055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 2052;
				this.separator();
				}
				}
				this.state = 2057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2067;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 56)) & ~0x1F) === 0 && ((1 << (_la - 56)) & ((1 << (cobolParser.CODE - 56)) | (1 << (cobolParser.CONTROL - 56)) | (1 << (cobolParser.CONTROLS - 56)))) !== 0) || _la === cobolParser.GLOBAL || _la === cobolParser.IS || _la === cobolParser.PAGE) {
				{
				{
				this.state = 2058;
				this.rd_clause();
				this.state = 2062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 2059;
					this.separator();
					}
					}
					this.state = 2064;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2070;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fd_clause(): Fd_clauseContext {
		let _localctx: Fd_clauseContext = new Fd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, cobolParser.RULE_fd_clause);
		let _la: number;
		try {
			this.state = 2101;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2072;
					this.match(cobolParser.IS);
					this.state = 2074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2073;
						this.separator();
						}
						}
						this.state = 2076;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2080;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2081;
					this.match(cobolParser.IS);
					this.state = 2083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2082;
						this.separator();
						}
						}
						this.state = 2085;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2089;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2090;
				this.block_contains();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2091;
				this.record();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2092;
				this.label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2093;
				this.value_of_id();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2094;
				this.data_rec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2095;
				this.linage();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2096;
				this.report_is();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2097;
				this.code_set();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2098;
				this.access_mode();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2099;
				this.record_key();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2100;
				this.file_status();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_description_entry(): Record_description_entryContext {
		let _localctx: Record_description_entryContext = new Record_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, cobolParser.RULE_record_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2103;
			this.data_description_entry();
			this.state = 2113;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 2104;
						this.separator();
						}
						}
						this.state = 2109;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2110;
					this.data_description_entry();
					}
					}
				}
				this.state = 2115;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 289, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_entry(): Data_description_entryContext {
		let _localctx: Data_description_entryContext = new Data_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, cobolParser.RULE_data_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2116;
			this.level_number();
			this.state = 2126;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 292, this._ctx) ) {
			case 1:
				{
				this.state = 2118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2117;
					this.separator();
					}
					}
					this.state = 2120;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2124;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 2122;
					this.data_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 2123;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2141;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 295, this._ctx) ) {
			case 1:
				{
				this.state = 2129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2128;
					this.separator();
					}
					}
					this.state = 2131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2133;
				this.match(cobolParser.REDEFINES);
				this.state = 2135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2134;
					this.separator();
					}
					}
					this.state = 2137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2139;
				this.other_data_item();
				}
				break;
			}
			this.state = 2152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 2144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2143;
					this.separator();
					}
					}
					this.state = 2146;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2148;
				this.data_description_clause();
				}
				}
				this.state = 2154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2155;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public level_number(): Level_numberContext {
		let _localctx: Level_numberContext = new Level_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, cobolParser.RULE_level_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2157;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_description_clause(): Data_description_clauseContext {
		let _localctx: Data_description_clauseContext = new Data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, cobolParser.RULE_data_description_clause);
		let _la: number;
		try {
			this.state = 2219;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 309, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2159;
					this.match(cobolParser.IS);
					this.state = 2161;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2160;
						this.separator();
						}
						}
						this.state = 2163;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2167;
				this.match(cobolParser.EXTERNAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2174;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2168;
					this.match(cobolParser.IS);
					this.state = 2170;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2169;
						this.separator();
						}
						}
						this.state = 2172;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2176;
				this.match(cobolParser.GLOBAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2177;
				this.picture();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2178;
				this.usage();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2179;
				this.sign_is();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2180;
				this.occurs();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2181;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.SYNC || _la === cobolParser.SYNCHRONIZED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2189;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
				case 1:
					{
					this.state = 2183;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2182;
						this.separator();
						}
						}
						this.state = 2185;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2187;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LEFT || _la === cobolParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2191;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2199;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 2193;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2192;
						this.separator();
						}
						}
						this.state = 2195;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2197;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2201;
				this.match(cobolParser.BLANK);
				this.state = 2203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2202;
					this.separator();
					}
					}
					this.state = 2205;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 2207;
					this.match(cobolParser.WHEN);
					this.state = 2209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2208;
						this.separator();
						}
						}
						this.state = 2211;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2215;
				this.match(cobolParser.ZERO);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2217;
				this.value_is();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2218;
				this.renames();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renames(): RenamesContext {
		let _localctx: RenamesContext = new RenamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, cobolParser.RULE_renames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2221;
			this.match(cobolParser.RENAMES);
			this.state = 2223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2222;
				this.separator();
				}
				}
				this.state = 2225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2227;
			this.rename_start();
			this.state = 2241;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
			case 1:
				{
				this.state = 2229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2228;
					this.separator();
					}
					}
					this.state = 2231;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2233;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2234;
					this.separator();
					}
					}
					this.state = 2237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2239;
				this.rename_end();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_start(): Rename_startContext {
		let _localctx: Rename_startContext = new Rename_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, cobolParser.RULE_rename_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2243;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rename_end(): Rename_endContext {
		let _localctx: Rename_endContext = new Rename_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, cobolParser.RULE_rename_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2245;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is(): Value_isContext {
		let _localctx: Value_isContext = new Value_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, cobolParser.RULE_value_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2267;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.VALUE:
				{
				this.state = 2247;
				this.match(cobolParser.VALUE);
				this.state = 2255;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
				case 1:
					{
					this.state = 2249;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2248;
						this.separator();
						}
						}
						this.state = 2251;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2253;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.VALUES:
				{
				this.state = 2257;
				this.match(cobolParser.VALUES);
				this.state = 2265;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 317, this._ctx) ) {
				case 1:
					{
					this.state = 2259;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2258;
						this.separator();
						}
						}
						this.state = 2261;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2263;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2269;
				this.separator();
				}
				}
				this.state = 2272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2274;
			this.value_is_definition();
			this.state = 2284;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2275;
						this.separator();
						}
						}
						this.state = 2278;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2280;
					this.value_is_definition();
					}
					}
				}
				this.state = 2286;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 321, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition(): Value_is_definitionContext {
		let _localctx: Value_is_definitionContext = new Value_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, cobolParser.RULE_value_is_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2287;
			this.value_is_definition_part();
			this.state = 2295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				{
				this.state = 2289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2288;
					this.separator();
					}
					}
					this.state = 2291;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2293;
				this.value_is_definition_thru();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_part(): Value_is_definition_partContext {
		let _localctx: Value_is_definition_partContext = new Value_is_definition_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, cobolParser.RULE_value_is_definition_part);
		let _la: number;
		try {
			this.state = 2314;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2297;
				this.value_is_literal();
				}
				break;
			case cobolParser.REFERENCE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2298;
				this.match(cobolParser.REFERENCE);
				this.state = 2300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2299;
					this.separator();
					}
					}
					this.state = 2302;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2304;
				this.ref_data_name();
				}
				break;
			case cobolParser.EXTERNAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2306;
				this.match(cobolParser.EXTERNAL);
				this.state = 2308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2307;
					this.separator();
					}
					}
					this.state = 2310;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2312;
				this.external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_definition_thru(): Value_is_definition_thruContext {
		let _localctx: Value_is_definition_thruContext = new Value_is_definition_thruContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, cobolParser.RULE_value_is_definition_thru);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2316;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2317;
				this.separator();
				}
				}
				this.state = 2320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2322;
			this.value_is_definition_part();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public external_name(): External_nameContext {
		let _localctx: External_nameContext = new External_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, cobolParser.RULE_external_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2324;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_data_name(): Ref_data_nameContext {
		let _localctx: Ref_data_nameContext = new Ref_data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, cobolParser.RULE_ref_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2326;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_is_literal(): Value_is_literalContext {
		let _localctx: Value_is_literalContext = new Value_is_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, cobolParser.RULE_value_is_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2328;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public occurs(): OccursContext {
		let _localctx: OccursContext = new OccursContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, cobolParser.RULE_occurs);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2330;
			this.match(cobolParser.OCCURS);
			this.state = 2332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2331;
				this.separator();
				}
				}
				this.state = 2334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2336;
			this.times_definition();
			this.state = 2346;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2337;
						this.separator();
						}
						}
						this.state = 2340;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2342;
					this.key_is();
					}
					}
				}
				this.state = 2348;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);
			}
			this.state = 2356;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				{
				this.state = 2350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2349;
					this.separator();
					}
					}
					this.state = 2352;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2354;
				this.indexed_by();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_by(): Indexed_byContext {
		let _localctx: Indexed_byContext = new Indexed_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, cobolParser.RULE_indexed_by);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2358;
			this.match(cobolParser.INDEXED);
			this.state = 2360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2359;
				this.separator();
				}
				}
				this.state = 2362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BY) {
				{
				this.state = 2364;
				this.match(cobolParser.BY);
				this.state = 2366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2365;
					this.separator();
					}
					}
					this.state = 2368;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 2372;
			this.ind_name();
			this.state = 2382;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2374;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2373;
						this.separator();
						}
						}
						this.state = 2376;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2378;
					this.ind_name();
					}
					}
				}
				this.state = 2384;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 337, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ind_name(): Ind_nameContext {
		let _localctx: Ind_nameContext = new Ind_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, cobolParser.RULE_ind_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2385;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_is(): Key_isContext {
		let _localctx: Key_isContext = new Key_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, cobolParser.RULE_key_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2387;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2388;
				this.separator();
				}
				}
				this.state = 2391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 2399;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 2393;
				this.match(cobolParser.KEY);
				this.state = 2395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2394;
					this.separator();
					}
					}
					this.state = 2397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 2407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 2401;
				this.match(cobolParser.IS);
				this.state = 2403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2402;
					this.separator();
					}
					}
					this.state = 2405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 2409;
			this.key_name();
			this.state = 2419;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2410;
						this.separator();
						}
						}
						this.state = 2413;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2415;
					this.key_name();
					}
					}
				}
				this.state = 2421;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 344, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_name(): Key_nameContext {
		let _localctx: Key_nameContext = new Key_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, cobolParser.RULE_key_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2422;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public times_definition(): Times_definitionContext {
		let _localctx: Times_definitionContext = new Times_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, cobolParser.RULE_times_definition);
		let _la: number;
		try {
			this.state = 2472;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 353, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2424;
				this.table_size();
				this.state = 2426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2425;
					this.separator();
					}
					}
					this.state = 2428;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2430;
				this.match(cobolParser.TIMES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2432;
				this.min_times();
				this.state = 2434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2433;
					this.separator();
					}
					}
					this.state = 2436;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2438;
				this.match(cobolParser.TO);
				this.state = 2440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2439;
					this.separator();
					}
					}
					this.state = 2442;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2444;
				this.max_times();
				this.state = 2446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2445;
					this.separator();
					}
					}
					this.state = 2448;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2450;
				this.match(cobolParser.TIMES);
				this.state = 2452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2451;
					this.separator();
					}
					}
					this.state = 2454;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2456;
				this.match(cobolParser.DEPENDING);
				this.state = 2458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2457;
					this.separator();
					}
					}
					this.state = 2460;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 2462;
					this.match(cobolParser.ON);
					this.state = 2464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2463;
						this.separator();
						}
						}
						this.state = 2466;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2470;
				this.depending_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_size(): Table_sizeContext {
		let _localctx: Table_sizeContext = new Table_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, cobolParser.RULE_table_size);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2474;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public min_times(): Min_timesContext {
		let _localctx: Min_timesContext = new Min_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, cobolParser.RULE_min_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2476;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public max_times(): Max_timesContext {
		let _localctx: Max_timesContext = new Max_timesContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, cobolParser.RULE_max_times);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2478;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_description_entry(): Report_group_description_entryContext {
		let _localctx: Report_group_description_entryContext = new Report_group_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, cobolParser.RULE_report_group_description_entry);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2480;
			this.report_group_data_description();
			this.state = 2490;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2484;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 2481;
						this.separator();
						}
						}
						this.state = 2486;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2487;
					this.report_group_data_description();
					}
					}
				}
				this.state = 2492;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 355, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description(): Report_group_data_descriptionContext {
		let _localctx: Report_group_data_descriptionContext = new Report_group_data_descriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, cobolParser.RULE_report_group_data_description);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2493;
			this.level_number();
			this.state = 2501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 357, this._ctx) ) {
			case 1:
				{
				this.state = 2495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2494;
					this.separator();
					}
					}
					this.state = 2497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2499;
				this.data_name();
				}
				break;
			}
			this.state = 2512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 2504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2503;
					this.separator();
					}
					}
					this.state = 2506;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2508;
				this.report_group_data_description_clause();
				}
				}
				this.state = 2514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2515;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_group_data_description_clause(): Report_group_data_description_clauseContext {
		let _localctx: Report_group_data_description_clauseContext = new Report_group_data_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, cobolParser.RULE_report_group_data_description_clause);
		let _la: number;
		try {
			this.state = 2691;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LINE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2517;
				this.match(cobolParser.LINE);
				this.state = 2519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2518;
					this.separator();
					}
					}
					this.state = 2521;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 2523;
					this.match(cobolParser.NUMBER);
					this.state = 2525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2524;
						this.separator();
						}
						}
						this.state = 2527;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2531;
					this.match(cobolParser.IS);
					this.state = 2533;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2532;
						this.separator();
						}
						}
						this.state = 2535;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2539;
				this.line_num_definition();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2541;
				this.match(cobolParser.NEXT);
				this.state = 2543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2542;
					this.separator();
					}
					}
					this.state = 2545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2547;
				this.match(cobolParser.GROUP);
				this.state = 2549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2548;
					this.separator();
					}
					}
					this.state = 2551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2553;
					this.match(cobolParser.IS);
					this.state = 2555;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2554;
						this.separator();
						}
						}
						this.state = 2557;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2561;
				this.next_group_definition();
				}
				break;
			case cobolParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2563;
				this.match(cobolParser.TYPE);
				this.state = 2565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2564;
					this.separator();
					}
					}
					this.state = 2567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2569;
					this.match(cobolParser.IS);
					this.state = 2571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2570;
						this.separator();
						}
						}
						this.state = 2573;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2577;
				this.type_is_definition();
				}
				break;
			case cobolParser.DISPLAY:
			case cobolParser.USAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 2579;
					this.match(cobolParser.USAGE);
					this.state = 2581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2580;
						this.separator();
						}
						}
						this.state = 2583;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2591;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 2585;
						this.match(cobolParser.IS);
						this.state = 2587;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2586;
							this.separator();
							}
							}
							this.state = 2589;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					}
				}

				this.state = 2595;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.BLANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2596;
				this.match(cobolParser.BLANK);
				this.state = 2598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2597;
					this.separator();
					}
					}
					this.state = 2600;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 2602;
					this.match(cobolParser.WHEN);
					this.state = 2604;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2603;
						this.separator();
						}
						}
						this.state = 2606;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2610;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.COLUMN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2612;
				this.match(cobolParser.COLUMN);
				this.state = 2614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2613;
					this.separator();
					}
					}
					this.state = 2616;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 2618;
					this.match(cobolParser.NUMBER);
					this.state = 2620;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2619;
						this.separator();
						}
						}
						this.state = 2622;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2626;
					this.match(cobolParser.IS);
					this.state = 2628;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2627;
						this.separator();
						}
						}
						this.state = 2630;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2634;
				this.column_number();
				}
				break;
			case cobolParser.GROUP:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2636;
				this.match(cobolParser.GROUP);
				this.state = 2644;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 385, this._ctx) ) {
				case 1:
					{
					this.state = 2638;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2637;
						this.separator();
						}
						}
						this.state = 2640;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2642;
					this.match(cobolParser.INDICATE);
					}
					break;
				}
				}
				break;
			case cobolParser.JUST:
			case cobolParser.JUSTIFIED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2646;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2654;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 387, this._ctx) ) {
				case 1:
					{
					this.state = 2648;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2647;
						this.separator();
						}
						}
						this.state = 2650;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2652;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;
			case cobolParser.PIC:
			case cobolParser.PICTURE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2656;
				this.picture();
				}
				break;
			case cobolParser.LEADING:
			case cobolParser.SIGN:
			case cobolParser.TRAILING:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2657;
				this.sign_is();
				}
				break;
			case cobolParser.SOURCE:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2658;
				this.match(cobolParser.SOURCE);
				this.state = 2660;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2659;
					this.separator();
					}
					}
					this.state = 2662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2664;
					this.match(cobolParser.IS);
					this.state = 2666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2665;
						this.separator();
						}
						}
						this.state = 2668;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2672;
				this.source_name();
				}
				break;
			case cobolParser.VALUE:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2674;
				this.match(cobolParser.VALUE);
				this.state = 2676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2675;
					this.separator();
					}
					}
					this.state = 2678;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2680;
					this.match(cobolParser.IS);
					this.state = 2682;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2681;
						this.separator();
						}
						}
						this.state = 2684;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2688;
				this.value_is_literal();
				}
				break;
			case cobolParser.SUM:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2690;
				this.sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_is(): Sign_isContext {
		let _localctx: Sign_isContext = new Sign_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, cobolParser.RULE_sign_is);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 2693;
				this.match(cobolParser.SIGN);
				this.state = 2701;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 2695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2694;
						this.separator();
						}
						}
						this.state = 2697;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2699;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 2704;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2703;
					this.separator();
					}
					}
					this.state = 2706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 2710;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.LEADING || _la === cobolParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2724;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				{
				this.state = 2712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2711;
					this.separator();
					}
					}
					this.state = 2714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2716;
				this.match(cobolParser.SEPARATE);
				{
				this.state = 2718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2717;
					this.separator();
					}
					}
					this.state = 2720;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2722;
				this.match(cobolParser.CHARACTER);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum(): SumContext {
		let _localctx: SumContext = new SumContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, cobolParser.RULE_sum);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2726;
				this.match(cobolParser.SUM);
				this.state = 2728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2727;
					this.separator();
					}
					}
					this.state = 2730;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2732;
				this.sum_name();
				this.state = 2742;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2734;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2733;
							this.separator();
							}
							}
							this.state = 2736;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 2738;
						this.sum_name();
						}
						}
					}
					this.state = 2744;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 404, this._ctx);
				}
				this.state = 2752;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 2746;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2745;
						this.separator();
						}
						}
						this.state = 2748;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2750;
					this.match(cobolParser.UPON);
					}
					break;
				}
				this.state = 2763;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2755;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2754;
							this.separator();
							}
							}
							this.state = 2757;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 2759;
						this.detail_report_group_name();
						}
						}
					}
					this.state = 2765;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 408, this._ctx);
				}
				}
				}
				this.state = 2768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.SUM);
			this.state = 2792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				{
				this.state = 2773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 2770;
					this.separator();
					}
					}
					this.state = 2775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2776;
				this.match(cobolParser.RESET);
				this.state = 2778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2777;
					this.separator();
					}
					}
					this.state = 2780;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.ON) {
					{
					this.state = 2782;
					this.match(cobolParser.ON);
					this.state = 2784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2783;
						this.separator();
						}
						}
						this.state = 2786;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2790;
				this.control_foot_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_foot_name(): Control_foot_nameContext {
		let _localctx: Control_foot_nameContext = new Control_foot_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, cobolParser.RULE_control_foot_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2794;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public detail_report_group_name(): Detail_report_group_nameContext {
		let _localctx: Detail_report_group_nameContext = new Detail_report_group_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, cobolParser.RULE_detail_report_group_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2796;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sum_name(): Sum_nameContext {
		let _localctx: Sum_nameContext = new Sum_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, cobolParser.RULE_sum_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2798;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_name(): Source_nameContext {
		let _localctx: Source_nameContext = new Source_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, cobolParser.RULE_source_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2800;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_number(): Column_numberContext {
		let _localctx: Column_numberContext = new Column_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, cobolParser.RULE_column_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2802;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_is_definition(): Type_is_definitionContext {
		let _localctx: Type_is_definitionContext = new Type_is_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, cobolParser.RULE_type_is_definition);
		let _la: number;
		try {
			this.state = 2878;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2804;
				this.match(cobolParser.REPORT);
				this.state = 2806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2805;
					this.separator();
					}
					}
					this.state = 2808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2810;
				this.match(cobolParser.HEADING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2812;
				this.match(cobolParser.RH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2813;
				this.match(cobolParser.PAGE);
				this.state = 2815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2814;
					this.separator();
					}
					}
					this.state = 2817;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2819;
				this.match(cobolParser.HEADING);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2821;
				this.match(cobolParser.PH);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2831;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 2822;
					this.match(cobolParser.CONTROL);
					this.state = 2824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2823;
						this.separator();
						}
						}
						this.state = 2826;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2828;
					this.match(cobolParser.HEADING);
					}
					break;
				case cobolParser.CH:
					{
					this.state = 2830;
					this.match(cobolParser.CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2833;
					this.separator();
					}
					}
					this.state = 2836;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2838;
				this.type_control_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2840;
				this.match(cobolParser.DETAIL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2841;
				this.match(cobolParser.DE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2851;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 2842;
					this.match(cobolParser.CONTROL);
					this.state = 2844;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2843;
						this.separator();
						}
						}
						this.state = 2846;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2848;
					this.match(cobolParser.FOOTING);
					}
					break;
				case cobolParser.CF:
					{
					this.state = 2850;
					this.match(cobolParser.CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2853;
					this.separator();
					}
					}
					this.state = 2856;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2858;
				this.type_control_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2860;
				this.match(cobolParser.PAGE);
				this.state = 2862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2861;
					this.separator();
					}
					}
					this.state = 2864;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2866;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2868;
				this.match(cobolParser.PF);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2869;
				this.match(cobolParser.REPORT);
				this.state = 2871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2870;
					this.separator();
					}
					}
					this.state = 2873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2875;
				this.match(cobolParser.FOOTING);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2877;
				this.match(cobolParser.RF);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_control_name(): Type_control_nameContext {
		let _localctx: Type_control_nameContext = new Type_control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, cobolParser.RULE_type_control_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2880;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FINAL || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public next_group_definition(): Next_group_definitionContext {
		let _localctx: Next_group_definitionContext = new Next_group_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, cobolParser.RULE_next_group_definition);
		let _la: number;
		try {
			this.state = 2899;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2882;
				this.line_num();
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2883;
				this.match(cobolParser.PLUS);
				this.state = 2885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2884;
					this.separator();
					}
					}
					this.state = 2887;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2889;
				this.line_num();
				}
				break;
			case cobolParser.NEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2891;
				this.match(cobolParser.NEXT);
				this.state = 2893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2892;
					this.separator();
					}
					}
					this.state = 2895;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2897;
				this.match(cobolParser.PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num_definition(): Line_num_definitionContext {
		let _localctx: Line_num_definitionContext = new Line_num_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, cobolParser.RULE_line_num_definition);
		let _la: number;
		try {
			this.state = 2933;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2901;
				this.line_num();
				this.state = 2923;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
				case 1:
					{
					this.state = 2903;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2902;
						this.separator();
						}
						}
						this.state = 2905;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 2907;
						this.match(cobolParser.ON);
						this.state = 2909;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2908;
							this.separator();
							}
							}
							this.state = 2911;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					this.state = 2915;
					this.match(cobolParser.NEXT);
					this.state = 2917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2916;
						this.separator();
						}
						}
						this.state = 2919;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 2921;
					this.match(cobolParser.PAGE);
					}
					break;
				}
				}
				break;
			case cobolParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2925;
				this.match(cobolParser.PLUS);
				this.state = 2927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2926;
					this.separator();
					}
					}
					this.state = 2929;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2931;
				this.line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public line_num(): Line_numContext {
		let _localctx: Line_numContext = new Line_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, cobolParser.RULE_line_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2935;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rd_clause(): Rd_clauseContext {
		let _localctx: Rd_clauseContext = new Rd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, cobolParser.RULE_rd_clause);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3127;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.GLOBAL:
			case cobolParser.IS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 2937;
					this.match(cobolParser.IS);
					this.state = 2939;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 2938;
						this.separator();
						}
						}
						this.state = 2941;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 2945;
				this.match(cobolParser.GLOBAL);
				}
				break;
			case cobolParser.CODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2946;
				this.match(cobolParser.CODE);
				this.state = 2948;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2947;
					this.separator();
					}
					}
					this.state = 2950;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 2952;
				this.report_code();
				}
				break;
			case cobolParser.CONTROL:
			case cobolParser.CONTROLS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2974;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.CONTROL:
					{
					this.state = 2954;
					this.match(cobolParser.CONTROL);
					this.state = 2962;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
					case 1:
						{
						this.state = 2956;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2955;
							this.separator();
							}
							}
							this.state = 2958;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 2960;
						this.match(cobolParser.IS);
						}
						break;
					}
					}
					break;
				case cobolParser.CONTROLS:
					{
					this.state = 2964;
					this.match(cobolParser.CONTROLS);
					this.state = 2972;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
					case 1:
						{
						this.state = 2966;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 2965;
							this.separator();
							}
							}
							this.state = 2968;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 2970;
						this.match(cobolParser.ARE);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2976;
					this.separator();
					}
					}
					this.state = 2979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3007;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 2981;
					this.control_name();
					this.state = 2991;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2985;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
								{
								{
								this.state = 2982;
								this.separator();
								}
								}
								this.state = 2987;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 2988;
							this.control_name();
							}
							}
						}
						this.state = 2993;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 446, this._ctx);
					}
					}
					break;
				case cobolParser.FINAL:
					{
					this.state = 2994;
					this.match(cobolParser.FINAL);
					this.state = 3004;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2998;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
								{
								{
								this.state = 2995;
								this.separator();
								}
								}
								this.state = 3000;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							}
							this.state = 3001;
							this.control_name();
							}
							}
						}
						this.state = 3006;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 448, this._ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case cobolParser.PAGE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3009;
				this.match(cobolParser.PAGE);
				this.state = 3011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3010;
					this.separator();
					}
					}
					this.state = 3013;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3043;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.LIMIT:
					{
					this.state = 3015;
					this.match(cobolParser.LIMIT);
					this.state = 3017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3016;
						this.separator();
						}
						}
						this.state = 3019;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3027;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 3021;
						this.match(cobolParser.IS);
						this.state = 3023;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3022;
							this.separator();
							}
							}
							this.state = 3025;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.LIMITS:
					{
					this.state = 3029;
					this.match(cobolParser.LIMITS);
					this.state = 3031;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3030;
						this.separator();
						}
						}
						this.state = 3033;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ARE) {
						{
						this.state = 3035;
						this.match(cobolParser.ARE);
						this.state = 3037;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3036;
							this.separator();
							}
							}
							this.state = 3039;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					}
					break;
				case cobolParser.NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				this.state = 3045;
				this.page_size_rd();
				this.state = 3053;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
				case 1:
					{
					this.state = 3047;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3046;
						this.separator();
						}
						}
						this.state = 3049;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3051;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.LINE || _la === cobolParser.LINES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3068;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
				case 1:
					{
					this.state = 3056;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3055;
						this.separator();
						}
						}
						this.state = 3058;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3060;
					this.match(cobolParser.HEADING);
					this.state = 3062;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3061;
						this.separator();
						}
						}
						this.state = 3064;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3066;
					this.heading_line();
					}
					break;
				}
				this.state = 3089;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 466, this._ctx) ) {
				case 1:
					{
					this.state = 3071;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3070;
						this.separator();
						}
						}
						this.state = 3073;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3075;
					this.match(cobolParser.FIRST);
					this.state = 3077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3076;
						this.separator();
						}
						}
						this.state = 3079;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3081;
					this.match(cobolParser.DETAIL);
					this.state = 3083;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3082;
						this.separator();
						}
						}
						this.state = 3085;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3087;
					this.first_detail_line();
					}
					break;
				}
				this.state = 3110;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 470, this._ctx) ) {
				case 1:
					{
					this.state = 3092;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3091;
						this.separator();
						}
						}
						this.state = 3094;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3096;
					this.match(cobolParser.LAST);
					this.state = 3098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3097;
						this.separator();
						}
						}
						this.state = 3100;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3102;
					this.match(cobolParser.DETAIL);
					this.state = 3104;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3103;
						this.separator();
						}
						}
						this.state = 3106;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3108;
					this.last_detail_line();
					}
					break;
				}
				this.state = 3125;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 473, this._ctx) ) {
				case 1:
					{
					this.state = 3113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3112;
						this.separator();
						}
						}
						this.state = 3115;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3117;
					this.match(cobolParser.FOOTING);
					this.state = 3119;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3118;
						this.separator();
						}
						}
						this.state = 3121;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3123;
					this.footing_line_rd();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line_rd(): Footing_line_rdContext {
		let _localctx: Footing_line_rdContext = new Footing_line_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, cobolParser.RULE_footing_line_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3129;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_detail_line(): Last_detail_lineContext {
		let _localctx: Last_detail_lineContext = new Last_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, cobolParser.RULE_last_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3131;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_detail_line(): First_detail_lineContext {
		let _localctx: First_detail_lineContext = new First_detail_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, cobolParser.RULE_first_detail_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3133;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public heading_line(): Heading_lineContext {
		let _localctx: Heading_lineContext = new Heading_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, cobolParser.RULE_heading_line);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3135;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size_rd(): Page_size_rdContext {
		let _localctx: Page_size_rdContext = new Page_size_rdContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, cobolParser.RULE_page_size_rd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3137;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public control_name(): Control_nameContext {
		let _localctx: Control_nameContext = new Control_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, cobolParser.RULE_control_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3139;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_code(): Report_codeContext {
		let _localctx: Report_codeContext = new Report_codeContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, cobolParser.RULE_report_code);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3141;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage(): UsageContext {
		let _localctx: UsageContext = new UsageContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, cobolParser.RULE_usage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.USAGE) {
				{
				this.state = 3143;
				this.match(cobolParser.USAGE);
				this.state = 3151;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
				case 1:
					{
					this.state = 3145;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3144;
						this.separator();
						}
						}
						this.state = 3147;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3149;
					this.match(cobolParser.IS);
					}
					break;
				}
				this.state = 3154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3153;
					this.separator();
					}
					}
					this.state = 3156;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 3160;
			this.usage_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public usage_definition(): Usage_definitionContext {
		let _localctx: Usage_definitionContext = new Usage_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, cobolParser.RULE_usage_definition);
		let _la: number;
		try {
			this.state = 3225;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.BINARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3162;
				this.match(cobolParser.BINARY);
				}
				break;
			case cobolParser.BINARY_CHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3163;
				this.match(cobolParser.BINARY_CHAR);
				this.state = 3171;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 480, this._ctx) ) {
				case 1:
					{
					this.state = 3165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3164;
						this.separator();
						}
						}
						this.state = 3167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3169;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_SHORT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3173;
				this.match(cobolParser.BINARY_SHORT);
				this.state = 3181;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 482, this._ctx) ) {
				case 1:
					{
					this.state = 3175;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3174;
						this.separator();
						}
						}
						this.state = 3177;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3179;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_LONG:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3183;
				this.match(cobolParser.BINARY_LONG);
				this.state = 3191;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
				case 1:
					{
					this.state = 3185;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3184;
						this.separator();
						}
						}
						this.state = 3187;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3189;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.BINARY_DOUBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3193;
				this.match(cobolParser.BINARY_DOUBLE);
				this.state = 3201;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 486, this._ctx) ) {
				case 1:
					{
					this.state = 3195;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3194;
						this.separator();
						}
						}
						this.state = 3197;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3199;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.SIGNED || _la === cobolParser.UNSIGNED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			case cobolParser.COMPUTATIONAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3203;
				this.match(cobolParser.COMPUTATIONAL);
				}
				break;
			case cobolParser.COMPUTATIONAL_1:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3204;
				this.match(cobolParser.COMPUTATIONAL_1);
				}
				break;
			case cobolParser.COMPUTATIONAL_2:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3205;
				this.match(cobolParser.COMPUTATIONAL_2);
				}
				break;
			case cobolParser.COMPUTATIONAL_3:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3206;
				this.match(cobolParser.COMPUTATIONAL_3);
				}
				break;
			case cobolParser.COMPUTATIONAL_4:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3207;
				this.match(cobolParser.COMPUTATIONAL_4);
				}
				break;
			case cobolParser.COMPUTATIONAL_5:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3208;
				this.match(cobolParser.COMPUTATIONAL_5);
				}
				break;
			case cobolParser.COMPUTATIONAL_X:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3209;
				this.match(cobolParser.COMPUTATIONAL_X);
				}
				break;
			case cobolParser.COMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3210;
				this.match(cobolParser.COMP);
				}
				break;
			case cobolParser.COMP_1:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3211;
				this.match(cobolParser.COMP_1);
				}
				break;
			case cobolParser.COMP_2:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3212;
				this.match(cobolParser.COMP_2);
				}
				break;
			case cobolParser.COMP_3:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3213;
				this.match(cobolParser.COMP_3);
				}
				break;
			case cobolParser.COMP_4:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3214;
				this.match(cobolParser.COMP_4);
				}
				break;
			case cobolParser.COMP_5:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3215;
				this.match(cobolParser.COMP_5);
				}
				break;
			case cobolParser.COMP_X:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3216;
				this.match(cobolParser.COMP_X);
				}
				break;
			case cobolParser.DISPLAY:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3217;
				this.match(cobolParser.DISPLAY);
				}
				break;
			case cobolParser.FLOAT_SHORT:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3218;
				this.match(cobolParser.FLOAT_SHORT);
				}
				break;
			case cobolParser.FLOAT_LONG:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3219;
				this.match(cobolParser.FLOAT_LONG);
				}
				break;
			case cobolParser.FLOAT_EXTENDED:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3220;
				this.match(cobolParser.FLOAT_EXTENDED);
				}
				break;
			case cobolParser.INDEX:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 3221;
				this.match(cobolParser.INDEX);
				}
				break;
			case cobolParser.PACKED_DECIMAL:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 3222;
				this.match(cobolParser.PACKED_DECIMAL);
				}
				break;
			case cobolParser.POINTER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 3223;
				this.match(cobolParser.POINTER);
				}
				break;
			case cobolParser.POINTER_64:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 3224;
				this.match(cobolParser.POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public picture(): PictureContext {
		let _localctx: PictureContext = new PictureContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, cobolParser.RULE_picture);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3227;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PIC || _la === cobolParser.PICTURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3229;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3228;
					this.separator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3231;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 3239;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3233;
				this.match(cobolParser.IS);
				this.state = 3235;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3234;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3237;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 489, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 3241;
			this.character_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_string(): Character_stringContext {
		let _localctx: Character_stringContext = new Character_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, cobolParser.RULE_character_string);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3244;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3243;
					this.char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3246;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 491, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_str_part(): Char_str_partContext {
		let _localctx: Char_str_partContext = new Char_str_partContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, cobolParser.RULE_char_str_part);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3248;
			_la = this._input.LA(1);
			if (!(((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & ((1 << (cobolParser.SLASH_ - 396)) | (1 << (cobolParser.COMMA_ - 396)) | (1 << (cobolParser.LPAREN_ - 396)) | (1 << (cobolParser.RPAREN_ - 396)) | (1 << (cobolParser.DOT_ - 396)) | (1 << (cobolParser.NUMERIC_LITERAL - 396)) | (1 << (cobolParser.USER_DEFINED_WORD - 396)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public other_data_item(): Other_data_itemContext {
		let _localctx: Other_data_itemContext = new Other_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, cobolParser.RULE_other_data_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3250;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_name(): Data_nameContext {
		let _localctx: Data_nameContext = new Data_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, cobolParser.RULE_data_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3252;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sd_clause(): Sd_clauseContext {
		let _localctx: Sd_clauseContext = new Sd_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, cobolParser.RULE_sd_clause);
		try {
			this.state = 3256;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3254;
				this.record();
				}
				break;
			case cobolParser.DATA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3255;
				this.data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_is(): Report_isContext {
		let _localctx: Report_isContext = new Report_isContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, cobolParser.RULE_report_is);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3278;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.REPORT:
				{
				this.state = 3258;
				this.match(cobolParser.REPORT);
				this.state = 3266;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
				case 1:
					{
					this.state = 3260;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3259;
						this.separator();
						}
						}
						this.state = 3262;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3264;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			case cobolParser.REPORTS:
				{
				this.state = 3268;
				this.match(cobolParser.REPORTS);
				this.state = 3276;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
				case 1:
					{
					this.state = 3270;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3269;
						this.separator();
						}
						}
						this.state = 3272;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3274;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3280;
				this.separator();
				}
				}
				this.state = 3283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3285;
			this.report_name();
			this.state = 3295;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3289;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 3286;
						this.separator();
						}
						}
						this.state = 3291;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3292;
					this.report_name();
					}
					}
				}
				this.state = 3297;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 500, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public report_name(): Report_nameContext {
		let _localctx: Report_nameContext = new Report_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, cobolParser.RULE_report_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3298;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public linage(): LinageContext {
		let _localctx: LinageContext = new LinageContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, cobolParser.RULE_linage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3300;
			this.match(cobolParser.LINAGE);
			this.state = 3302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3301;
				this.separator();
				}
				}
				this.state = 3304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3306;
				this.match(cobolParser.IS);
				this.state = 3308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3307;
					this.separator();
					}
					}
					this.state = 3310;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 3314;
			this.page_size();
			this.state = 3322;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
			case 1:
				{
				this.state = 3316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3315;
					this.separator();
					}
					}
					this.state = 3318;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3320;
				this.match(cobolParser.LINES);
				}
				break;
			}
			this.state = 3353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 512, this._ctx) ) {
			case 1:
				{
				this.state = 3325;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3324;
					this.separator();
					}
					}
					this.state = 3327;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3335;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 3329;
					this.match(cobolParser.WITH);
					this.state = 3331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3330;
						this.separator();
						}
						}
						this.state = 3333;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3337;
				this.match(cobolParser.FOOTING);
				this.state = 3339;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3338;
					this.separator();
					}
					}
					this.state = 3341;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 3343;
					this.match(cobolParser.AT);
					this.state = 3345;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3344;
						this.separator();
						}
						}
						this.state = 3347;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3351;
				this.footing_line();
				}
				break;
			}
			this.state = 3384;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
			case 1:
				{
				this.state = 3356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3355;
					this.separator();
					}
					}
					this.state = 3358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 3360;
					this.match(cobolParser.LINES);
					this.state = 3362;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3361;
						this.separator();
						}
						}
						this.state = 3364;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3374;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 3368;
					this.match(cobolParser.AT);
					this.state = 3370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3369;
						this.separator();
						}
						}
						this.state = 3372;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3376;
				this.match(cobolParser.TOP);
				this.state = 3378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3377;
					this.separator();
					}
					}
					this.state = 3380;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3382;
				this.top_lines();
				}
				break;
			}
			this.state = 3415;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				{
				this.state = 3387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3386;
					this.separator();
					}
					}
					this.state = 3389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.LINES) {
					{
					this.state = 3391;
					this.match(cobolParser.LINES);
					this.state = 3393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3392;
						this.separator();
						}
						}
						this.state = 3395;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.AT) {
					{
					this.state = 3399;
					this.match(cobolParser.AT);
					this.state = 3401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3400;
						this.separator();
						}
						}
						this.state = 3403;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3407;
				this.match(cobolParser.BOTTOM);
				this.state = 3409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3408;
					this.separator();
					}
					}
					this.state = 3411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3413;
				this.bottom_lines();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bottom_lines(): Bottom_linesContext {
		let _localctx: Bottom_linesContext = new Bottom_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, cobolParser.RULE_bottom_lines);
		try {
			this.state = 3419;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3417;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3418;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_lines(): Top_linesContext {
		let _localctx: Top_linesContext = new Top_linesContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, cobolParser.RULE_top_lines);
		try {
			this.state = 3423;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3421;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3422;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public footing_line(): Footing_lineContext {
		let _localctx: Footing_lineContext = new Footing_lineContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, cobolParser.RULE_footing_line);
		try {
			this.state = 3427;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3425;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3426;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public page_size(): Page_sizeContext {
		let _localctx: Page_sizeContext = new Page_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, cobolParser.RULE_page_size);
		try {
			this.state = 3431;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3429;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3430;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_rec(): Data_recContext {
		let _localctx: Data_recContext = new Data_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, cobolParser.RULE_data_rec);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3433;
			this.match(cobolParser.DATA);
			this.state = 3435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3434;
				this.separator();
				}
				}
				this.state = 3437;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3459;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 3439;
				this.match(cobolParser.RECORDS);
				this.state = 3447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					this.state = 3441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3440;
						this.separator();
						}
						}
						this.state = 3443;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3445;
					this.match(cobolParser.ARE);
					}
				}

				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 3449;
				this.match(cobolParser.RECORD);
				this.state = 3457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					this.state = 3451;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3450;
						this.separator();
						}
						}
						this.state = 3453;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3455;
					this.match(cobolParser.IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3461;
			this.rec_name();
			this.state = 3471;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3463;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3462;
						this.separator();
						}
						}
						this.state = 3465;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3467;
					this.rec_name();
					}
					}
				}
				this.state = 3473;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 538, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_name(): Rec_nameContext {
		let _localctx: Rec_nameContext = new Rec_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, cobolParser.RULE_rec_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3474;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id(): Value_of_idContext {
		let _localctx: Value_of_idContext = new Value_of_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, cobolParser.RULE_value_of_id);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3476;
			this.match(cobolParser.VALUE);
			this.state = 3478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3477;
				this.separator();
				}
				}
				this.state = 3480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3482;
			this.match(cobolParser.OF);
			this.state = 3484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3483;
				this.separator();
				}
				}
				this.state = 3486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3488;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FILE_ID || _la === cobolParser.ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3489;
				this.separator();
				}
				}
				this.state = 3492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 3494;
				this.match(cobolParser.IS);
				this.state = 3496;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3495;
					this.separator();
					}
					}
					this.state = 3498;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 3502;
			this.value_of_id_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_of_id_definition(): Value_of_id_definitionContext {
		let _localctx: Value_of_id_definitionContext = new Value_of_id_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, cobolParser.RULE_value_of_id_definition);
		try {
			this.state = 3506;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3504;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3505;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, cobolParser.RULE_label);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3508;
			this.match(cobolParser.LABEL);
			this.state = 3510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3509;
				this.separator();
				}
				}
				this.state = 3512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3534;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.RECORDS:
				{
				this.state = 3514;
				this.match(cobolParser.RECORDS);
				this.state = 3522;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 3516;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3515;
						this.separator();
						}
						}
						this.state = 3518;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3520;
					this.match(cobolParser.ARE);
					}
					break;
				}
				}
				break;
			case cobolParser.RECORD:
				{
				this.state = 3524;
				this.match(cobolParser.RECORD);
				this.state = 3532;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 549, this._ctx) ) {
				case 1:
					{
					this.state = 3526;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3525;
						this.separator();
						}
						}
						this.state = 3528;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3530;
					this.match(cobolParser.IS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3537;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3536;
				this.separator();
				}
				}
				this.state = 3539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3541;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.OMITTED || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record(): RecordContext {
		let _localctx: RecordContext = new RecordContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, cobolParser.RULE_record);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3543;
			this.match(cobolParser.RECORD);
			this.state = 3545;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3544;
				this.separator();
				}
				}
				this.state = 3547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3549;
			this.record_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_definition(): Record_definitionContext {
		let _localctx: Record_definitionContext = new Record_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, cobolParser.RULE_record_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3674;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CONTAINS:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTAINS) {
					{
					this.state = 3551;
					this.match(cobolParser.CONTAINS);
					this.state = 3553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3552;
						this.separator();
						}
						}
						this.state = 3555;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3571;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 557, this._ctx) ) {
				case 1:
					{
					this.state = 3559;
					this.shortest_rec();
					this.state = 3561;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3560;
						this.separator();
						}
						}
						this.state = 3563;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3565;
					this.match(cobolParser.TO);
					this.state = 3567;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3566;
						this.separator();
						}
						}
						this.state = 3569;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
					break;
				}
				this.state = 3573;
				this.longest_rec();
				this.state = 3577;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3574;
						this.separator();
						}
						}
					}
					this.state = 3579;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 558, this._ctx);
				}
				this.state = 3587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CHARACTERS) {
					{
					this.state = 3580;
					this.match(cobolParser.CHARACTERS);
					this.state = 3584;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3581;
							this.separator();
							}
							}
						}
						this.state = 3586;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 559, this._ctx);
					}
					}
				}

				}
				break;
			case cobolParser.IS:
			case cobolParser.VARYING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3589;
					this.match(cobolParser.IS);
					this.state = 3591;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3590;
						this.separator();
						}
						}
						this.state = 3593;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3597;
				this.match(cobolParser.VARYING);
				this.state = 3599;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3598;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3601;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 563, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3609;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IN) {
					{
					this.state = 3603;
					this.match(cobolParser.IN);
					this.state = 3605;
					this._errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							this.state = 3604;
							this.separator();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 3607;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 564, this._ctx);
					} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
					}
				}

				this.state = 3618;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.SIZE) {
					{
					this.state = 3611;
					this.match(cobolParser.SIZE);
					this.state = 3615;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3612;
							this.separator();
							}
							}
						}
						this.state = 3617;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 566, this._ctx);
					}
					}
				}

				this.state = 3629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.FROM || _la === cobolParser.NUMERIC_LITERAL) {
					{
					this.state = 3626;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.FROM) {
						{
						this.state = 3620;
						this.match(cobolParser.FROM);
						this.state = 3622;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3621;
							this.separator();
							}
							}
							this.state = 3624;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					this.state = 3628;
					this.shortest_rec();
					}
				}

				this.state = 3639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.TO) {
					{
					this.state = 3631;
					this.match(cobolParser.TO);
					this.state = 3633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3632;
						this.separator();
						}
						}
						this.state = 3635;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3637;
					this.longest_rec();
					}
				}

				this.state = 3654;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 575, this._ctx) ) {
				case 1:
					{
					this.state = 3644;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 3641;
						this.separator();
						}
						}
						this.state = 3646;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 3647;
					this.match(cobolParser.CHARACTERS);
					this.state = 3651;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3648;
							this.separator();
							}
							}
						}
						this.state = 3653;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 574, this._ctx);
					}
					}
					break;
				}
				this.state = 3672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DEPENDING) {
					{
					this.state = 3656;
					this.match(cobolParser.DEPENDING);
					this.state = 3658;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3657;
						this.separator();
						}
						}
						this.state = 3660;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3668;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.ON) {
						{
						this.state = 3662;
						this.match(cobolParser.ON);
						this.state = 3664;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3663;
							this.separator();
							}
							}
							this.state = 3666;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					this.state = 3670;
					this.depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public depending_item(): Depending_itemContext {
		let _localctx: Depending_itemContext = new Depending_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, cobolParser.RULE_depending_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3676;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortest_rec(): Shortest_recContext {
		let _localctx: Shortest_recContext = new Shortest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, cobolParser.RULE_shortest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3678;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public longest_rec(): Longest_recContext {
		let _localctx: Longest_recContext = new Longest_recContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, cobolParser.RULE_longest_rec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3680;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_entry(): Screen_description_entryContext {
		let _localctx: Screen_description_entryContext = new Screen_description_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, cobolParser.RULE_screen_description_entry);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3682;
			this.level_number();
			this.state = 3692;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
			case 1:
				{
				this.state = 3684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3683;
					this.separator();
					}
					}
					this.state = 3686;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3690;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USER_DEFINED_WORD:
					{
					this.state = 3688;
					this.screen_name();
					}
					break;
				case cobolParser.FILLER:
					{
					this.state = 3689;
					this.match(cobolParser.FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 3703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 3695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3694;
					this.separator();
					}
					}
					this.state = 3697;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3699;
				this.screen_description_clause();
				}
				}
				this.state = 3705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3706;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_name(): Screen_nameContext {
		let _localctx: Screen_nameContext = new Screen_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, cobolParser.RULE_screen_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3708;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public screen_description_clause(): Screen_description_clauseContext {
		let _localctx: Screen_description_clauseContext = new Screen_description_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, cobolParser.RULE_screen_description_clause);
		let _la: number;
		try {
			this.state = 3912;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 624, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3710;
				this.match(cobolParser.BLANK);
				this.state = 3712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3711;
					this.separator();
					}
					}
					this.state = 3714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3716;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.LINE || _la === cobolParser.SCREEN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3718;
				this.match(cobolParser.FOREGROUND_COLOR);
				this.state = 3720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3719;
					this.separator();
					}
					}
					this.state = 3722;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3730;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3724;
					this.match(cobolParser.IS);
					this.state = 3726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3725;
						this.separator();
						}
						}
						this.state = 3728;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3732;
				this.color_num();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3734;
				this.match(cobolParser.BACKGROUND_COLOR);
				this.state = 3736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3735;
					this.separator();
					}
					}
					this.state = 3738;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3746;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3740;
					this.match(cobolParser.IS);
					this.state = 3742;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3741;
						this.separator();
						}
						}
						this.state = 3744;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3748;
				this.color_num();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3750;
				this.match(cobolParser.AUTO);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3751;
				this.match(cobolParser.SECURE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3752;
				this.match(cobolParser.REQUIRED);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.USAGE) {
					{
					this.state = 3753;
					this.match(cobolParser.USAGE);
					this.state = 3755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3754;
						this.separator();
						}
						}
						this.state = 3757;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3765;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.IS) {
						{
						this.state = 3759;
						this.match(cobolParser.IS);
						this.state = 3761;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3760;
							this.separator();
							}
							}
							this.state = 3763;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					}
				}

				this.state = 3769;
				this.match(cobolParser.DISPLAY);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3770;
				this.sign_is();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3771;
				this.match(cobolParser.FULL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3772;
				this.match(cobolParser.BELL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3773;
				this.match(cobolParser.BLINK);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3774;
				this.match(cobolParser.ERASE);
				this.state = 3776;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3775;
					this.separator();
					}
					}
					this.state = 3778;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3780;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.EOL || _la === cobolParser.EOS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3782;
				this.match(cobolParser.HIGHLIGHT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3783;
				this.match(cobolParser.LOWLIGHT);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3784;
				this.match(cobolParser.REVERSE_VIDEO);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3785;
				this.match(cobolParser.UNDERLINE);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3786;
				this.match(cobolParser.LINE);
				this.state = 3788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3787;
					this.separator();
					}
					}
					this.state = 3790;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3798;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 3792;
					this.match(cobolParser.NUMBER);
					this.state = 3794;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3793;
						this.separator();
						}
						}
						this.state = 3796;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3800;
					this.match(cobolParser.IS);
					this.state = 3802;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3801;
						this.separator();
						}
						}
						this.state = 3804;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 3808;
					this.match(cobolParser.PLUS);
					this.state = 3810;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3809;
						this.separator();
						}
						}
						this.state = 3812;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3816;
				this.src_number();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3818;
				this.match(cobolParser.COLUMN);
				this.state = 3820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3819;
					this.separator();
					}
					}
					this.state = 3822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NUMBER) {
					{
					this.state = 3824;
					this.match(cobolParser.NUMBER);
					this.state = 3826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3825;
						this.separator();
						}
						}
						this.state = 3828;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3832;
					this.match(cobolParser.IS);
					this.state = 3834;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3833;
						this.separator();
						}
						}
						this.state = 3836;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.PLUS) {
					{
					this.state = 3840;
					this.match(cobolParser.PLUS);
					this.state = 3842;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3841;
						this.separator();
						}
						}
						this.state = 3844;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3848;
				this.src_number();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3850;
				this.match(cobolParser.VALUE);
				this.state = 3852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3851;
					this.separator();
					}
					}
					this.state = 3854;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 3856;
					this.match(cobolParser.IS);
					this.state = 3858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3857;
						this.separator();
						}
						}
						this.state = 3860;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3864;
				this.nonnumeric_literal();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3866;
				this.match(cobolParser.BLANK);
				this.state = 3868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3867;
					this.separator();
					}
					}
					this.state = 3870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WHEN) {
					{
					this.state = 3872;
					this.match(cobolParser.WHEN);
					this.state = 3874;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3873;
						this.separator();
						}
						}
						this.state = 3876;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 3880;
				this.match(cobolParser.ZERO);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3882;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.JUST || _la === cobolParser.JUSTIFIED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3890;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
				case 1:
					{
					this.state = 3884;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 3883;
						this.separator();
						}
						}
						this.state = 3886;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 3888;
					this.match(cobolParser.RIGHT);
					}
					break;
				}
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3892;
				this.picture();
				this.state = 3894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3893;
					this.separator();
					}
					}
					this.state = 3896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 3910;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.USING:
					{
					this.state = 3898;
					this.scr_pic_using();
					}
					break;
				case cobolParser.FROM:
					{
					this.state = 3899;
					this.scr_pic_from();
					this.state = 3907;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
					case 1:
						{
						this.state = 3901;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 3900;
							this.separator();
							}
							}
							this.state = 3903;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 3905;
						this.scr_pic_to();
						}
						break;
					}
					}
					break;
				case cobolParser.TO:
					{
					this.state = 3909;
					this.scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_using(): Scr_pic_usingContext {
		let _localctx: Scr_pic_usingContext = new Scr_pic_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, cobolParser.RULE_scr_pic_using);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3914;
			this.match(cobolParser.USING);
			this.state = 3916;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3915;
				this.separator();
				}
				}
				this.state = 3918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3920;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_from(): Scr_pic_fromContext {
		let _localctx: Scr_pic_fromContext = new Scr_pic_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, cobolParser.RULE_scr_pic_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3922;
			this.match(cobolParser.FROM);
			this.state = 3924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3923;
				this.separator();
				}
				}
				this.state = 3926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3930;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 3928;
				this.qualified_data_item();
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 3929;
				this.nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scr_pic_to(): Scr_pic_toContext {
		let _localctx: Scr_pic_toContext = new Scr_pic_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, cobolParser.RULE_scr_pic_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3932;
			this.match(cobolParser.TO);
			this.state = 3934;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3933;
				this.separator();
				}
				}
				this.state = 3936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3938;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonnumeric_literal(): Nonnumeric_literalContext {
		let _localctx: Nonnumeric_literalContext = new Nonnumeric_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, cobolParser.RULE_nonnumeric_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3940;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public src_number(): Src_numberContext {
		let _localctx: Src_numberContext = new Src_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, cobolParser.RULE_src_number);
		try {
			this.state = 3944;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3942;
				this.qualified_data_item();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3943;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public color_num(): Color_numContext {
		let _localctx: Color_numContext = new Color_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, cobolParser.RULE_color_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3946;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division(): Identification_divisionContext {
		let _localctx: Identification_divisionContext = new Identification_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, cobolParser.RULE_identification_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3948;
			this.match(cobolParser.IDENTIFICATION_IN_A_AREA);
			this.state = 3950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3949;
				this.separator();
				}
				}
				this.state = 3952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 3954;
			this.match(cobolParser.DIVISION);
			this.state = 3958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 3955;
				this.separator();
				}
				}
				this.state = 3960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3961;
			this.match(cobolParser.DOT_);
			this.state = 3965;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3962;
					this.separator();
					}
					}
				}
				this.state = 3967;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 632, this._ctx);
			}
			this.state = 3971;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3968;
					this.identification_division_paragraph();
					}
					}
				}
				this.state = 3973;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identification_division_paragraph(): Identification_division_paragraphContext {
		let _localctx: Identification_division_paragraphContext = new Identification_division_paragraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, cobolParser.RULE_identification_division_paragraph);
		try {
			this.state = 3982;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.PROGRAM_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3974;
				this.program_id();
				}
				break;
			case cobolParser.AUTHOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3975;
				this.author();
				}
				break;
			case cobolParser.INSTALLATION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3976;
				this.installation();
				}
				break;
			case cobolParser.DATE_WRITTEN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3977;
				this.date_written();
				}
				break;
			case cobolParser.DATE_COMPILED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3978;
				this.date_compiled();
				}
				break;
			case cobolParser.SECURITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3979;
				this.security();
				}
				break;
			case cobolParser.OPTIONS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3980;
				this.options_();
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3981;
				this.separator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_id(): Program_idContext {
		let _localctx: Program_idContext = new Program_idContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, cobolParser.RULE_program_id);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3984;
			this.match(cobolParser.PROGRAM_ID);
			this.state = 3988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 3985;
				this.separator();
				}
				}
				this.state = 3990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3991;
			this.match(cobolParser.DOT_);
			this.state = 3995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 3992;
				this.separator();
				}
				}
				this.state = 3997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3998;
			this.program_name();
			this.state = 4002;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3999;
					this.separator();
					}
					}
				}
				this.state = 4004;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 637, this._ctx);
			}
			this.state = 4006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COMMON || _la === cobolParser.INITIAL || _la === cobolParser.IS) {
				{
				this.state = 4005;
				this.is_program();
				}
			}

			this.state = 4011;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4008;
					this.separator();
					}
					}
				}
				this.state = 4013;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 639, this._ctx);
			}
			this.state = 4015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IDENT || _la === cobolParser.WITH) {
				{
				this.state = 4014;
				this.with_ident();
				}
			}

			this.state = 4020;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4017;
				this.separator();
				}
				}
				this.state = 4022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4023;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_name(): Program_nameContext {
		let _localctx: Program_nameContext = new Program_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, cobolParser.RULE_program_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4025;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public is_program(): Is_programContext {
		let _localctx: Is_programContext = new Is_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, cobolParser.RULE_is_program);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4027;
				this.match(cobolParser.IS);
				this.state = 4029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4028;
					this.separator();
					}
					}
					this.state = 4031;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4035;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.COMMON || _la === cobolParser.INITIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4043;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 645, this._ctx) ) {
			case 1:
				{
				this.state = 4037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4036;
					this.separator();
					}
					}
					this.state = 4039;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4041;
				this.match(cobolParser.PROGRAM);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_ident(): With_identContext {
		let _localctx: With_identContext = new With_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, cobolParser.RULE_with_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4051;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 4045;
				this.match(cobolParser.WITH);
				this.state = 4047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4046;
					this.separator();
					}
					}
					this.state = 4049;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4053;
			this.match(cobolParser.IDENT);
			this.state = 4055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4054;
				this.separator();
				}
				}
				this.state = 4057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4059;
			this.ident_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident_string(): Ident_stringContext {
		let _localctx: Ident_stringContext = new Ident_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, cobolParser.RULE_ident_string);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4061;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_entry(): Comment_entryContext {
		let _localctx: Comment_entryContext = new Comment_entryContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, cobolParser.RULE_comment_entry);
		let _la: number;
		try {
			this.state = 4072;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.START_FOUR_SPACES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4063;
				this.match(cobolParser.START_FOUR_SPACES);
				this.state = 4067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
					{
					{
					this.state = 4064;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 4069;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4070;
				this.match(cobolParser.NEWLINE);
				}
				break;
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4071;
				this.line_comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public author(): AuthorContext {
		let _localctx: AuthorContext = new AuthorContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, cobolParser.RULE_author);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4074;
			this.match(cobolParser.AUTHOR);
			this.state = 4078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4075;
				this.separator();
				}
				}
				this.state = 4080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4081;
			this.match(cobolParser.DOT_);
			this.state = 4085;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 4082;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4088;
			this.match(cobolParser.NEWLINE);
			this.state = 4092;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 653, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4089;
					this.comment_entry();
					}
					}
				}
				this.state = 4094;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 653, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installation(): InstallationContext {
		let _localctx: InstallationContext = new InstallationContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, cobolParser.RULE_installation);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4095;
			this.match(cobolParser.INSTALLATION);
			this.state = 4099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4096;
				this.separator();
				}
				}
				this.state = 4101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4102;
			this.match(cobolParser.DOT_);
			this.state = 4106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 4103;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4109;
			this.match(cobolParser.NEWLINE);
			this.state = 4113;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4110;
					this.comment_entry();
					}
					}
				}
				this.state = 4115;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 656, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_written(): Date_writtenContext {
		let _localctx: Date_writtenContext = new Date_writtenContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, cobolParser.RULE_date_written);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4116;
			this.match(cobolParser.DATE_WRITTEN);
			this.state = 4120;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4117;
				this.separator();
				}
				}
				this.state = 4122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4123;
			this.match(cobolParser.DOT_);
			this.state = 4127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 4124;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4130;
			this.match(cobolParser.NEWLINE);
			this.state = 4134;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4131;
					this.comment_entry();
					}
					}
				}
				this.state = 4136;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_compiled(): Date_compiledContext {
		let _localctx: Date_compiledContext = new Date_compiledContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, cobolParser.RULE_date_compiled);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4137;
			this.match(cobolParser.DATE_COMPILED);
			this.state = 4141;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4138;
				this.separator();
				}
				}
				this.state = 4143;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4144;
			this.match(cobolParser.DOT_);
			this.state = 4148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 4145;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4151;
			this.match(cobolParser.NEWLINE);
			this.state = 4155;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4152;
					this.comment_entry();
					}
					}
				}
				this.state = 4157;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 662, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security(): SecurityContext {
		let _localctx: SecurityContext = new SecurityContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, cobolParser.RULE_security);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4158;
			this.match(cobolParser.SECURITY);
			this.state = 4162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4159;
				this.separator();
				}
				}
				this.state = 4164;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4165;
			this.match(cobolParser.DOT_);
			this.state = 4169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ACCEPT) | (1 << cobolParser.ACCESS) | (1 << cobolParser.ADD) | (1 << cobolParser.AFTER) | (1 << cobolParser.ALL) | (1 << cobolParser.ALPHA) | (1 << cobolParser.ALPHABET) | (1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER) | (1 << cobolParser.ALSO) | (1 << cobolParser.ALTER) | (1 << cobolParser.ALTERNATE) | (1 << cobolParser.AND) | (1 << cobolParser.APPLY) | (1 << cobolParser.ARE) | (1 << cobolParser.AREA) | (1 << cobolParser.AREAS) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE) | (1 << cobolParser.ARITHMETIC) | (1 << cobolParser.ASCENDING) | (1 << cobolParser.ASCII) | (1 << cobolParser.ASSIGN) | (1 << cobolParser.AT) | (1 << cobolParser.AUTHOR) | (1 << cobolParser.AUTO) | (1 << cobolParser.AUTOMATIC) | (1 << cobolParser.AUTOTERMINATE) | (1 << cobolParser.BACKGROUND_COLOR) | (1 << cobolParser.BEFORE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (cobolParser.BELL - 32)) | (1 << (cobolParser.BINARY - 32)) | (1 << (cobolParser.BINARY_CHAR - 32)) | (1 << (cobolParser.BINARY_DOUBLE - 32)) | (1 << (cobolParser.BINARY_LONG - 32)) | (1 << (cobolParser.BINARY_SHORT - 32)) | (1 << (cobolParser.BLANK - 32)) | (1 << (cobolParser.BLINK - 32)) | (1 << (cobolParser.BLINKING - 32)) | (1 << (cobolParser.BLOCK - 32)) | (1 << (cobolParser.BOLD - 32)) | (1 << (cobolParser.BOTTOM - 32)) | (1 << (cobolParser.BY - 32)) | (1 << (cobolParser.C01 - 32)) | (1 << (cobolParser.CALL - 32)) | (1 << (cobolParser.CANCEL - 32)) | (1 << (cobolParser.CARD_READER - 32)) | (1 << (cobolParser.CF - 32)) | (1 << (cobolParser.CH - 32)) | (1 << (cobolParser.CHARACTER - 32)) | (1 << (cobolParser.CHARACTERS - 32)) | (1 << (cobolParser.CLASS - 32)) | (1 << (cobolParser.CLOCK_UNITS - 32)) | (1 << (cobolParser.CLOSE - 32)) | (1 << (cobolParser.CODE - 32)) | (1 << (cobolParser.CODE_SET - 32)) | (1 << (cobolParser.COLLATING - 32)) | (1 << (cobolParser.COLUMN - 32)) | (1 << (cobolParser.COMMA - 32)) | (1 << (cobolParser.COMMON - 32)) | (1 << (cobolParser.COMP - 32)) | (1 << (cobolParser.COMPUTATIONAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (cobolParser.COMPUTATIONAL_1 - 64)) | (1 << (cobolParser.COMPUTATIONAL_2 - 64)) | (1 << (cobolParser.COMPUTATIONAL_3 - 64)) | (1 << (cobolParser.COMPUTATIONAL_4 - 64)) | (1 << (cobolParser.COMPUTATIONAL_5 - 64)) | (1 << (cobolParser.COMPUTATIONAL_X - 64)) | (1 << (cobolParser.COMPUTE - 64)) | (1 << (cobolParser.COMP_1 - 64)) | (1 << (cobolParser.COMP_2 - 64)) | (1 << (cobolParser.COMP_3 - 64)) | (1 << (cobolParser.COMP_4 - 64)) | (1 << (cobolParser.COMP_5 - 64)) | (1 << (cobolParser.COMP_X - 64)) | (1 << (cobolParser.CONFIGURATION - 64)) | (1 << (cobolParser.CONSOLE - 64)) | (1 << (cobolParser.CONTAINS - 64)) | (1 << (cobolParser.CONTIGUOUS - 64)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 64)) | (1 << (cobolParser.CONTINUE - 64)) | (1 << (cobolParser.CONTROL - 64)) | (1 << (cobolParser.CONTROLS - 64)) | (1 << (cobolParser.CONVERSION - 64)) | (1 << (cobolParser.CONVERTING - 64)) | (1 << (cobolParser.COPY - 64)) | (1 << (cobolParser.CRT - 64)) | (1 << (cobolParser.CURRENCY - 64)) | (1 << (cobolParser.CURRENT - 64)) | (1 << (cobolParser.CURSOR - 64)) | (1 << (cobolParser.DATA - 64)) | (1 << (cobolParser.DATE - 64)) | (1 << (cobolParser.DATE_COMPILED - 64)) | (1 << (cobolParser.DATE_WRITTEN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (cobolParser.DAY - 96)) | (1 << (cobolParser.DAY_OF_WEEK - 96)) | (1 << (cobolParser.DE - 96)) | (1 << (cobolParser.DEBUGGING - 96)) | (1 << (cobolParser.DECIMAL_POINT - 96)) | (1 << (cobolParser.DECLARATIVES - 96)) | (1 << (cobolParser.DECLARATIVES_IN_A_AREA - 96)) | (1 << (cobolParser.DEFAULT - 96)) | (1 << (cobolParser.DEFERRED_WRITE - 96)) | (1 << (cobolParser.DELETE - 96)) | (1 << (cobolParser.DELIMITER - 96)) | (1 << (cobolParser.DEPENDING - 96)) | (1 << (cobolParser.DESCENDING - 96)) | (1 << (cobolParser.DETAIL - 96)) | (1 << (cobolParser.DISK - 96)) | (1 << (cobolParser.DISPLAY - 96)) | (1 << (cobolParser.DIVIDE - 96)) | (1 << (cobolParser.DIVISION - 96)) | (1 << (cobolParser.DOWN - 96)) | (1 << (cobolParser.DUPLICATES - 96)) | (1 << (cobolParser.DYNAMIC - 96)) | (1 << (cobolParser.EBCDIC - 96)) | (1 << (cobolParser.ECHO - 96)) | (1 << (cobolParser.EDITING - 96)) | (1 << (cobolParser.END - 96)) | (1 << (cobolParser.END_ACCEPT - 96)) | (1 << (cobolParser.END_ADD - 96)) | (1 << (cobolParser.END_CALL - 96)) | (1 << (cobolParser.END_COMPUTE - 96)) | (1 << (cobolParser.END_DELETE - 96)) | (1 << (cobolParser.END_DIVIDE - 96)) | (1 << (cobolParser.END_EVALUATE - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (cobolParser.END_IF - 128)) | (1 << (cobolParser.END_IN_A_AREA - 128)) | (1 << (cobolParser.END_MULTIPLY - 128)) | (1 << (cobolParser.END_OF_PAGE - 128)) | (1 << (cobolParser.END_PERFORM - 128)) | (1 << (cobolParser.END_READ - 128)) | (1 << (cobolParser.END_RETURN - 128)) | (1 << (cobolParser.END_REWRITE - 128)) | (1 << (cobolParser.END_SEARCH - 128)) | (1 << (cobolParser.END_START - 128)) | (1 << (cobolParser.END_STRING - 128)) | (1 << (cobolParser.END_SUBTRACT - 128)) | (1 << (cobolParser.END_UNSTRING - 128)) | (1 << (cobolParser.END_WRITE - 128)) | (1 << (cobolParser.ENVIRONMENT - 128)) | (1 << (cobolParser.ENVIRONMENT_NAME - 128)) | (1 << (cobolParser.ENVIRONMENT_VALUE - 128)) | (1 << (cobolParser.EOL - 128)) | (1 << (cobolParser.EOS - 128)) | (1 << (cobolParser.EQUAL - 128)) | (1 << (cobolParser.ERASE - 128)) | (1 << (cobolParser.ERROR - 128)) | (1 << (cobolParser.EVALUATE - 128)) | (1 << (cobolParser.EVERY - 128)) | (1 << (cobolParser.EXCEPTION - 128)) | (1 << (cobolParser.EXCLUSIVE - 128)) | (1 << (cobolParser.EXIT - 128)) | (1 << (cobolParser.EXTEND - 128)) | (1 << (cobolParser.EXTENSION - 128)) | (1 << (cobolParser.EXTERNAL - 128)) | (1 << (cobolParser.FAILURE - 128)) | (1 << (cobolParser.FD - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (cobolParser.FILE - 160)) | (1 << (cobolParser.FILE_CONTROL - 160)) | (1 << (cobolParser.FILE_ID - 160)) | (1 << (cobolParser.FILLER - 160)) | (1 << (cobolParser.FILL_SIZE - 160)) | (1 << (cobolParser.FINAL - 160)) | (1 << (cobolParser.FIRST - 160)) | (1 << (cobolParser.FLOAT_EXTENDED - 160)) | (1 << (cobolParser.FLOAT_LONG - 160)) | (1 << (cobolParser.FLOAT_SHORT - 160)) | (1 << (cobolParser.FOOTING - 160)) | (1 << (cobolParser.FOR - 160)) | (1 << (cobolParser.FOREGROUND_COLOR - 160)) | (1 << (cobolParser.FROM - 160)) | (1 << (cobolParser.FULL - 160)) | (1 << (cobolParser.FUNCTION - 160)) | (1 << (cobolParser.GENERATE - 160)) | (1 << (cobolParser.GIVING - 160)) | (1 << (cobolParser.GLOBAL - 160)) | (1 << (cobolParser.GO - 160)) | (1 << (cobolParser.GREATER - 160)) | (1 << (cobolParser.GROUP - 160)) | (1 << (cobolParser.HEADING - 160)) | (1 << (cobolParser.HIGHLIGHT - 160)) | (1 << (cobolParser.HIGH_VALUE - 160)) | (1 << (cobolParser.HIGH_VALUES - 160)) | (1 << (cobolParser.I64 - 160)) | (1 << (cobolParser.ID - 160)) | (1 << (cobolParser.IDENT - 160)) | (1 << (cobolParser.IDENTIFICATION - 160)) | (1 << (cobolParser.IDENTIFICATION_IN_A_AREA - 160)) | (1 << (cobolParser.IF - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (cobolParser.IN - 192)) | (1 << (cobolParser.INDEX - 192)) | (1 << (cobolParser.INDEXED - 192)) | (1 << (cobolParser.INDICATE - 192)) | (1 << (cobolParser.INITIAL - 192)) | (1 << (cobolParser.INITIALIZE - 192)) | (1 << (cobolParser.INITIATE - 192)) | (1 << (cobolParser.INPUT - 192)) | (1 << (cobolParser.INPUT_OUTPUT - 192)) | (1 << (cobolParser.INSPECT - 192)) | (1 << (cobolParser.INSTALLATION - 192)) | (1 << (cobolParser.INVALID - 192)) | (1 << (cobolParser.IS - 192)) | (1 << (cobolParser.I_O - 192)) | (1 << (cobolParser.I_O_CONTROL - 192)) | (1 << (cobolParser.JUST - 192)) | (1 << (cobolParser.JUSTIFIED - 192)) | (1 << (cobolParser.KEY - 192)) | (1 << (cobolParser.LABEL - 192)) | (1 << (cobolParser.LAST - 192)) | (1 << (cobolParser.LEADING - 192)) | (1 << (cobolParser.LEFT - 192)) | (1 << (cobolParser.LESS - 192)) | (1 << (cobolParser.LIMIT - 192)) | (1 << (cobolParser.LIMITS - 192)) | (1 << (cobolParser.LINAGE - 192)) | (1 << (cobolParser.LINE - 192)) | (1 << (cobolParser.LINES - 192)) | (1 << (cobolParser.LINE_PRINTER - 192)) | (1 << (cobolParser.LINKAGE - 192)) | (1 << (cobolParser.LOCK - 192)) | (1 << (cobolParser.LOCK_HOLDING - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (cobolParser.LOWLIGHT - 224)) | (1 << (cobolParser.LOW_VALUE - 224)) | (1 << (cobolParser.LOW_VALUES - 224)) | (1 << (cobolParser.MANUAL - 224)) | (1 << (cobolParser.MASS_INSERT - 224)) | (1 << (cobolParser.MEMORY - 224)) | (1 << (cobolParser.MERGE - 224)) | (1 << (cobolParser.MODE - 224)) | (1 << (cobolParser.MODULES - 224)) | (1 << (cobolParser.MOVE - 224)) | (1 << (cobolParser.MULTIPLE - 224)) | (1 << (cobolParser.MULTIPLY - 224)) | (1 << (cobolParser.NATIVE - 224)) | (1 << (cobolParser.NEGATIVE - 224)) | (1 << (cobolParser.NEXT - 224)) | (1 << (cobolParser.NO - 224)) | (1 << (cobolParser.NOT - 224)) | (1 << (cobolParser.NUMBER - 224)) | (1 << (cobolParser.NUMERIC - 224)) | (1 << (cobolParser.OBJECT_COMPUTER - 224)) | (1 << (cobolParser.OCCURS - 224)) | (1 << (cobolParser.OF - 224)) | (1 << (cobolParser.OFF - 224)) | (1 << (cobolParser.OMITTED - 224)) | (1 << (cobolParser.ON - 224)) | (1 << (cobolParser.OPEN - 224)) | (1 << (cobolParser.OPTIONAL - 224)) | (1 << (cobolParser.OPTIONS - 224)) | (1 << (cobolParser.OR - 224)) | (1 << (cobolParser.ORGANIZATION - 224)) | (1 << (cobolParser.OUTPUT - 224)) | (1 << (cobolParser.OVERFLOW - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (cobolParser.PACKED_DECIMAL - 256)) | (1 << (cobolParser.PADDING - 256)) | (1 << (cobolParser.PAGE - 256)) | (1 << (cobolParser.PAPER_TAPE_PUNCH - 256)) | (1 << (cobolParser.PAPER_TAPE_READER - 256)) | (1 << (cobolParser.PERFORM - 256)) | (1 << (cobolParser.PF - 256)) | (1 << (cobolParser.PH - 256)) | (1 << (cobolParser.PIC - 256)) | (1 << (cobolParser.PICTURE - 256)) | (1 << (cobolParser.PLUS - 256)) | (1 << (cobolParser.POINTER - 256)) | (1 << (cobolParser.POINTER_64 - 256)) | (1 << (cobolParser.POSITION - 256)) | (1 << (cobolParser.POSITIVE - 256)) | (1 << (cobolParser.PREALLOCATION - 256)) | (1 << (cobolParser.PRINTER - 256)) | (1 << (cobolParser.PRINT_CONTROL - 256)) | (1 << (cobolParser.PROCEDURE - 256)) | (1 << (cobolParser.PROGRAM - 256)) | (1 << (cobolParser.PROGRAM_ID - 256)) | (1 << (cobolParser.PROTECTED - 256)) | (1 << (cobolParser.QUOTE - 256)) | (1 << (cobolParser.QUOTES - 256)) | (1 << (cobolParser.RANDOM - 256)) | (1 << (cobolParser.RD - 256)) | (1 << (cobolParser.READ - 256)) | (1 << (cobolParser.RECORD - 256)) | (1 << (cobolParser.RECORDS - 256)) | (1 << (cobolParser.REDEFINES - 256)) | (1 << (cobolParser.REEL - 256)) | (1 << (cobolParser.REFERENCE - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (cobolParser.RELATIVE - 288)) | (1 << (cobolParser.RELEASE - 288)) | (1 << (cobolParser.RENAMES - 288)) | (1 << (cobolParser.REPLACE - 288)) | (1 << (cobolParser.REPLACING - 288)) | (1 << (cobolParser.REPORT - 288)) | (1 << (cobolParser.REPORTING - 288)) | (1 << (cobolParser.REPORTS - 288)) | (1 << (cobolParser.REQUIRED - 288)) | (1 << (cobolParser.RERUN - 288)) | (1 << (cobolParser.RESERVE - 288)) | (1 << (cobolParser.RESET - 288)) | (1 << (cobolParser.RETURN - 288)) | (1 << (cobolParser.REVERSED - 288)) | (1 << (cobolParser.REVERSE_VIDEO - 288)) | (1 << (cobolParser.REWRITE - 288)) | (1 << (cobolParser.RF - 288)) | (1 << (cobolParser.RH - 288)) | (1 << (cobolParser.RIGHT - 288)) | (1 << (cobolParser.ROLLBACK - 288)) | (1 << (cobolParser.SAME - 288)) | (1 << (cobolParser.SCREEN - 288)) | (1 << (cobolParser.SD - 288)) | (1 << (cobolParser.SEARCH - 288)) | (1 << (cobolParser.SECTION - 288)) | (1 << (cobolParser.SECURE - 288)) | (1 << (cobolParser.SECURITY - 288)) | (1 << (cobolParser.SEGMENT_LIMIT - 288)) | (1 << (cobolParser.SELECT - 288)) | (1 << (cobolParser.SEPARATE - 288)) | (1 << (cobolParser.SEQUENCE - 288)) | (1 << (cobolParser.SEQUENTIAL - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (cobolParser.SET - 320)) | (1 << (cobolParser.SIGN - 320)) | (1 << (cobolParser.SIGNED - 320)) | (1 << (cobolParser.SIZE - 320)) | (1 << (cobolParser.SORT - 320)) | (1 << (cobolParser.SORT_MERGE - 320)) | (1 << (cobolParser.SOURCE - 320)) | (1 << (cobolParser.SOURCE_COMPUTER - 320)) | (1 << (cobolParser.SPACE - 320)) | (1 << (cobolParser.SPACES - 320)) | (1 << (cobolParser.SPECIAL_NAMES - 320)) | (1 << (cobolParser.STANDARD - 320)) | (1 << (cobolParser.STANDARD_1 - 320)) | (1 << (cobolParser.STANDARD_2 - 320)) | (1 << (cobolParser.START - 320)) | (1 << (cobolParser.STATUS - 320)) | (1 << (cobolParser.STOP - 320)) | (1 << (cobolParser.STRING - 320)) | (1 << (cobolParser.SUBTRACT - 320)) | (1 << (cobolParser.SUCCESS - 320)) | (1 << (cobolParser.SUM - 320)) | (1 << (cobolParser.SUPPRESS - 320)) | (1 << (cobolParser.SWITCH - 320)) | (1 << (cobolParser.SYMBOL - 320)) | (1 << (cobolParser.SYMBOLIC - 320)) | (1 << (cobolParser.SYNC - 320)) | (1 << (cobolParser.SYNCHRONIZED - 320)) | (1 << (cobolParser.SYSERR - 320)) | (1 << (cobolParser.SYSIN - 320)) | (1 << (cobolParser.SYSOUT - 320)) | (1 << (cobolParser.TALLYING - 320)) | (1 << (cobolParser.TAPE - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (cobolParser.TERMINATE - 352)) | (1 << (cobolParser.THAN - 352)) | (1 << (cobolParser.THROUGH - 352)) | (1 << (cobolParser.THRU - 352)) | (1 << (cobolParser.TIME - 352)) | (1 << (cobolParser.TIMES - 352)) | (1 << (cobolParser.TO - 352)) | (1 << (cobolParser.TOP - 352)) | (1 << (cobolParser.TRAILING - 352)) | (1 << (cobolParser.TRUE - 352)) | (1 << (cobolParser.TYPE - 352)) | (1 << (cobolParser.UNDERLINE - 352)) | (1 << (cobolParser.UNDERLINED - 352)) | (1 << (cobolParser.UNIT - 352)) | (1 << (cobolParser.UNLOCK - 352)) | (1 << (cobolParser.UNSIGNED - 352)) | (1 << (cobolParser.UNSTRING - 352)) | (1 << (cobolParser.UP - 352)) | (1 << (cobolParser.UPON - 352)) | (1 << (cobolParser.USAGE - 352)) | (1 << (cobolParser.USE - 352)) | (1 << (cobolParser.USING - 352)) | (1 << (cobolParser.VALUE - 352)) | (1 << (cobolParser.VALUES - 352)) | (1 << (cobolParser.VARYING - 352)) | (1 << (cobolParser.VAX - 352)) | (1 << (cobolParser.WHEN - 352)) | (1 << (cobolParser.WINDOW - 352)) | (1 << (cobolParser.WITH - 352)) | (1 << (cobolParser.WORDS - 352)) | (1 << (cobolParser.WORKING_STORAGE - 352)) | (1 << (cobolParser.WRITE - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (cobolParser.YYYYDDD - 384)) | (1 << (cobolParser.YYYYMMDD - 384)) | (1 << (cobolParser.ZERO - 384)) | (1 << (cobolParser.ZEROES - 384)) | (1 << (cobolParser.ZEROS - 384)) | (1 << (cobolParser.START_SLASH_ - 384)) | (1 << (cobolParser.START_STAR_ - 384)) | (1 << (cobolParser.EXCLAM_ - 384)) | (1 << (cobolParser.UNDER_ - 384)) | (1 << (cobolParser.PLUS_ - 384)) | (1 << (cobolParser.MINUS_ - 384)) | (1 << (cobolParser.STAR_ - 384)) | (1 << (cobolParser.SLASH_ - 384)) | (1 << (cobolParser.COMMA_ - 384)) | (1 << (cobolParser.SEMI_ - 384)) | (1 << (cobolParser.COLON_ - 384)) | (1 << (cobolParser.EQUAL_ - 384)) | (1 << (cobolParser.LT_ - 384)) | (1 << (cobolParser.LE_ - 384)) | (1 << (cobolParser.GE_ - 384)) | (1 << (cobolParser.GT_ - 384)) | (1 << (cobolParser.LPAREN_ - 384)) | (1 << (cobolParser.RPAREN_ - 384)) | (1 << (cobolParser.LBRACK_ - 384)) | (1 << (cobolParser.RBRACK_ - 384)) | (1 << (cobolParser.POINTER_ - 384)) | (1 << (cobolParser.ATP_ - 384)) | (1 << (cobolParser.DOT_ - 384)) | (1 << (cobolParser.LCURLY_ - 384)) | (1 << (cobolParser.RCURLY_ - 384)) | (1 << (cobolParser.STRING_LITERAL - 384)) | (1 << (cobolParser.NUMERIC_LITERAL - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (cobolParser.HEX_LITERAL - 416)) | (1 << (cobolParser.USER_DEFINED_WORD - 416)) | (1 << (cobolParser.START_FOUR_SPACES - 416)) | (1 << (cobolParser.WHITESPACE - 416)))) !== 0)) {
				{
				{
				this.state = 4166;
				_la = this._input.LA(1);
				if (_la <= 0 || (_la === cobolParser.NEWLINE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				}
				this.state = 4171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4172;
			this.match(cobolParser.NEWLINE);
			this.state = 4176;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4173;
					this.comment_entry();
					}
					}
				}
				this.state = 4178;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 665, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 306, cobolParser.RULE_options_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4179;
			this.match(cobolParser.OPTIONS);
			this.state = 4183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4180;
				this.separator();
				}
				}
				this.state = 4185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4186;
			this.match(cobolParser.DOT_);
			this.state = 4190;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 667, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4187;
					this.separator();
					}
					}
				}
				this.state = 4192;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 667, this._ctx);
			}
			this.state = 4194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARITHMETIC) {
				{
				this.state = 4193;
				this.arithmetic();
				}
			}

			this.state = 4199;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 669, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4196;
					this.separator();
					}
					}
				}
				this.state = 4201;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 669, this._ctx);
			}
			this.state = 4203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.DOT_) {
				{
				this.state = 4202;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arithmetic(): ArithmeticContext {
		let _localctx: ArithmeticContext = new ArithmeticContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, cobolParser.RULE_arithmetic);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4205;
			this.match(cobolParser.ARITHMETIC);
			this.state = 4207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4206;
				this.separator();
				}
				}
				this.state = 4209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4211;
				this.match(cobolParser.IS);
				this.state = 4213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4212;
					this.separator();
					}
					}
					this.state = 4215;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4219;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NATIVE || _la === cobolParser.STANDARD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4220;
				this.separator();
				}
				}
				this.state = 4225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4226;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public environment_division(): Environment_divisionContext {
		let _localctx: Environment_divisionContext = new Environment_divisionContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, cobolParser.RULE_environment_division);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4228;
			this.match(cobolParser.ENVIRONMENT);
			this.state = 4230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4229;
				this.separator();
				}
				}
				this.state = 4232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4234;
			this.match(cobolParser.DIVISION);
			this.state = 4238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4235;
				this.separator();
				}
				}
				this.state = 4240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4241;
			this.match(cobolParser.DOT_);
			this.state = 4245;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 677, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4242;
					this.separator();
					}
					}
				}
				this.state = 4247;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 677, this._ctx);
			}
			this.state = 4249;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONFIGURATION) {
				{
				this.state = 4248;
				this.configuration_section();
				}
			}

			this.state = 4252;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.INPUT_OUTPUT) {
				{
				this.state = 4251;
				this.input_output_section();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public configuration_section(): Configuration_sectionContext {
		let _localctx: Configuration_sectionContext = new Configuration_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, cobolParser.RULE_configuration_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4254;
			this.match(cobolParser.CONFIGURATION);
			this.state = 4256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4255;
				this.separator();
				}
				}
				this.state = 4258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4260;
			this.match(cobolParser.SECTION);
			this.state = 4264;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4261;
				this.separator();
				}
				}
				this.state = 4266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4267;
			this.match(cobolParser.DOT_);
			this.state = 4271;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4268;
					this.separator();
					}
					}
				}
				this.state = 4273;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 682, this._ctx);
			}
			this.state = 4275;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SOURCE_COMPUTER) {
				{
				this.state = 4274;
				this.source_computer();
				}
			}

			this.state = 4280;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4277;
					this.separator();
					}
					}
				}
				this.state = 4282;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 684, this._ctx);
			}
			this.state = 4284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OBJECT_COMPUTER) {
				{
				this.state = 4283;
				this.object_computer();
				}
			}

			this.state = 4289;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4286;
					this.separator();
					}
					}
				}
				this.state = 4291;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 686, this._ctx);
			}
			this.state = 4293;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SPECIAL_NAMES) {
				{
				this.state = 4292;
				this.special_names();
				}
			}

			this.state = 4298;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4295;
					this.separator();
					}
					}
				}
				this.state = 4300;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 688, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_output_section(): Input_output_sectionContext {
		let _localctx: Input_output_sectionContext = new Input_output_sectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, cobolParser.RULE_input_output_section);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4301;
			this.match(cobolParser.INPUT_OUTPUT);
			this.state = 4303;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4302;
				this.separator();
				}
				}
				this.state = 4305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4307;
			this.match(cobolParser.SECTION);
			this.state = 4311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4308;
				this.separator();
				}
				}
				this.state = 4313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4314;
			this.match(cobolParser.DOT_);
			this.state = 4318;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4315;
					this.separator();
					}
					}
				}
				this.state = 4320;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 691, this._ctx);
			}
			this.state = 4322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE_CONTROL) {
				{
				this.state = 4321;
				this.file_control();
				}
			}

			this.state = 4325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.I_O_CONTROL) {
				{
				this.state = 4324;
				this.i_o_control();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public source_computer(): Source_computerContext {
		let _localctx: Source_computerContext = new Source_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, cobolParser.RULE_source_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4327;
			this.match(cobolParser.SOURCE_COMPUTER);
			this.state = 4331;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4328;
				this.separator();
				}
				}
				this.state = 4333;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4334;
			this.match(cobolParser.DOT_);
			this.state = 4338;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4335;
					this.separator();
					}
					}
				}
				this.state = 4340;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 695, this._ctx);
			}
			this.state = 4359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 4341;
				this.computer_type();
				this.state = 4349;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 697, this._ctx) ) {
				case 1:
					{
					this.state = 4343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4342;
						this.separator();
						}
						}
						this.state = 4345;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4347;
					this.with_debugging();
					}
					break;
				}
				this.state = 4354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 4351;
					this.separator();
					}
					}
					this.state = 4356;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4357;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public computer_type(): Computer_typeContext {
		let _localctx: Computer_typeContext = new Computer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, cobolParser.RULE_computer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4361;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_debugging(): With_debuggingContext {
		let _localctx: With_debuggingContext = new With_debuggingContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, cobolParser.RULE_with_debugging);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.WITH) {
				{
				this.state = 4363;
				this.match(cobolParser.WITH);
				this.state = 4365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4364;
					this.separator();
					}
					}
					this.state = 4367;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4371;
			this.match(cobolParser.DEBUGGING);
			this.state = 4373;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4372;
				this.separator();
				}
				}
				this.state = 4375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4377;
			this.match(cobolParser.MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_computer(): Object_computerContext {
		let _localctx: Object_computerContext = new Object_computerContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, cobolParser.RULE_object_computer);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4379;
			this.match(cobolParser.OBJECT_COMPUTER);
			this.state = 4383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4380;
				this.separator();
				}
				}
				this.state = 4385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4386;
			this.match(cobolParser.DOT_);
			this.state = 4390;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 704, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4387;
					this.separator();
					}
					}
				}
				this.state = 4392;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 704, this._ctx);
			}
			this.state = 4429;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALPHA || _la === cobolParser.I64 || _la === cobolParser.VAX || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 4393;
				this.computer_type();
				this.state = 4401;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 706, this._ctx) ) {
				case 1:
					{
					this.state = 4395;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4394;
						this.separator();
						}
						}
						this.state = 4397;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4399;
					this.memory_size();
					}
					break;
				}
				this.state = 4410;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 708, this._ctx) ) {
				case 1:
					{
					this.state = 4404;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4403;
						this.separator();
						}
						}
						this.state = 4406;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4408;
					this.program_collating();
					}
					break;
				}
				this.state = 4419;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 710, this._ctx) ) {
				case 1:
					{
					this.state = 4413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4412;
						this.separator();
						}
						}
						this.state = 4415;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4417;
					this.segment_limit();
					}
					break;
				}
				this.state = 4424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 4421;
					this.separator();
					}
					}
					this.state = 4426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4427;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size(): Memory_sizeContext {
		let _localctx: Memory_sizeContext = new Memory_sizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, cobolParser.RULE_memory_size);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4431;
			this.match(cobolParser.MEMORY);
			this.state = 4439;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 714, this._ctx) ) {
			case 1:
				{
				this.state = 4433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4432;
					this.separator();
					}
					}
					this.state = 4435;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4437;
				this.match(cobolParser.SIZE);
				}
				break;
			}
			this.state = 4442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4441;
				this.separator();
				}
				}
				this.state = 4444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4446;
			this.memory_size_amount();
			this.state = 4448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4447;
				this.separator();
				}
				}
				this.state = 4450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4452;
			this.memory_size_unit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_amount(): Memory_size_amountContext {
		let _localctx: Memory_size_amountContext = new Memory_size_amountContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, cobolParser.RULE_memory_size_amount);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4454;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public memory_size_unit(): Memory_size_unitContext {
		let _localctx: Memory_size_unitContext = new Memory_size_unitContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, cobolParser.RULE_memory_size_unit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4456;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.MODULES || _la === cobolParser.WORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public program_collating(): Program_collatingContext {
		let _localctx: Program_collatingContext = new Program_collatingContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, cobolParser.RULE_program_collating);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PROGRAM) {
				{
				this.state = 4458;
				this.match(cobolParser.PROGRAM);
				this.state = 4460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4459;
					this.separator();
					}
					}
					this.state = 4462;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.COLLATING) {
				{
				this.state = 4466;
				this.match(cobolParser.COLLATING);
				this.state = 4468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4467;
					this.separator();
					}
					}
					this.state = 4470;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4474;
			this.match(cobolParser.SEQUENCE);
			this.state = 4482;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 722, this._ctx) ) {
			case 1:
				{
				this.state = 4476;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4475;
					this.separator();
					}
					}
					this.state = 4478;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4480;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 4485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4484;
				this.separator();
				}
				}
				this.state = 4487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4489;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_name(): Alpha_nameContext {
		let _localctx: Alpha_nameContext = new Alpha_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, cobolParser.RULE_alpha_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4491;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_limit(): Segment_limitContext {
		let _localctx: Segment_limitContext = new Segment_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, cobolParser.RULE_segment_limit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4493;
			this.match(cobolParser.SEGMENT_LIMIT);
			this.state = 4501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				this.state = 4495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4494;
					this.separator();
					}
					}
					this.state = 4497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4499;
				this.match(cobolParser.IS);
				}
			}

			this.state = 4503;
			this.segment_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public segment_number(): Segment_numberContext {
		let _localctx: Segment_numberContext = new Segment_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, cobolParser.RULE_segment_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4505;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names(): Special_namesContext {
		let _localctx: Special_namesContext = new Special_namesContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, cobolParser.RULE_special_names);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4507;
			this.match(cobolParser.SPECIAL_NAMES);
			this.state = 4511;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 4508;
				this.separator();
				}
				}
				this.state = 4513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4514;
			this.match(cobolParser.DOT_);
			this.state = 4518;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 727, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4515;
					this.separator();
					}
					}
				}
				this.state = 4520;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 727, this._ctx);
			}
			this.state = 4534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (cobolParser.C01 - 45)) | (1 << (cobolParser.CARD_READER - 45)) | (1 << (cobolParser.CLASS - 45)))) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (cobolParser.CONSOLE - 78)) | (1 << (cobolParser.CRT - 78)) | (1 << (cobolParser.CURRENCY - 78)) | (1 << (cobolParser.CURSOR - 78)) | (1 << (cobolParser.DECIMAL_POINT - 78)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (cobolParser.SWITCH - 342)) | (1 << (cobolParser.SYMBOLIC - 342)) | (1 << (cobolParser.SYSERR - 342)) | (1 << (cobolParser.SYSIN - 342)) | (1 << (cobolParser.SYSOUT - 342)))) !== 0)) {
				{
				this.state = 4528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4521;
					this.special_names_content();
					this.state = 4525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 4522;
						this.separator();
						}
						}
						this.state = 4527;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 4530;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABET) | (1 << cobolParser.ARGUMENT_NUMBER) | (1 << cobolParser.ARGUMENT_VALUE))) !== 0) || ((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (cobolParser.C01 - 45)) | (1 << (cobolParser.CARD_READER - 45)) | (1 << (cobolParser.CLASS - 45)))) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (cobolParser.CONSOLE - 78)) | (1 << (cobolParser.CRT - 78)) | (1 << (cobolParser.CURRENCY - 78)) | (1 << (cobolParser.CURSOR - 78)) | (1 << (cobolParser.DECIMAL_POINT - 78)))) !== 0) || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & ((1 << (cobolParser.SWITCH - 342)) | (1 << (cobolParser.SYMBOLIC - 342)) | (1 << (cobolParser.SYSERR - 342)) | (1 << (cobolParser.SYSIN - 342)) | (1 << (cobolParser.SYSOUT - 342)))) !== 0));
				this.state = 4532;
				this.match(cobolParser.DOT_);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public special_names_content(): Special_names_contentContext {
		let _localctx: Special_names_contentContext = new Special_names_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, cobolParser.RULE_special_names_content);
		let _la: number;
		try {
			this.state = 4643;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.CARD_READER:
			case cobolParser.CONSOLE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4536;
				this.predefined_device();
				this.state = 4538;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4537;
					this.separator();
					}
					}
					this.state = 4540;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4542;
					this.match(cobolParser.IS);
					this.state = 4544;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4543;
						this.separator();
						}
						}
						this.state = 4546;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4550;
				this.device_name();
				}
				break;
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4552;
				this.arg_env();
				this.state = 4554;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4553;
					this.separator();
					}
					}
					this.state = 4556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4558;
					this.match(cobolParser.IS);
					this.state = 4560;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4559;
						this.separator();
						}
						}
						this.state = 4562;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4566;
				this.arg_env_name();
				}
				break;
			case cobolParser.C01:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4568;
				this.match(cobolParser.C01);
				this.state = 4570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4569;
					this.separator();
					}
					}
					this.state = 4572;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4574;
					this.match(cobolParser.IS);
					this.state = 4576;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4575;
						this.separator();
						}
						}
						this.state = 4578;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4582;
				this.top_of_page_name();
				}
				break;
			case cobolParser.SWITCH:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4584;
				this.switch_();
				}
				break;
			case cobolParser.ALPHABET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4585;
				this.alphabet();
				}
				break;
			case cobolParser.SYMBOLIC:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4586;
				this.symbolic_chars();
				}
				break;
			case cobolParser.CLASS:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4587;
				this.class_();
				}
				break;
			case cobolParser.CURRENCY:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4588;
				this.currency();
				}
				break;
			case cobolParser.DECIMAL_POINT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4589;
				this.match(cobolParser.DECIMAL_POINT);
				this.state = 4591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4590;
					this.separator();
					}
					}
					this.state = 4593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4595;
					this.match(cobolParser.IS);
					this.state = 4597;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4596;
						this.separator();
						}
						}
						this.state = 4599;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4603;
				this.match(cobolParser.COMMA);
				}
				break;
			case cobolParser.CURSOR:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4605;
				this.match(cobolParser.CURSOR);
				this.state = 4607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4606;
					this.separator();
					}
					}
					this.state = 4609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4611;
					this.match(cobolParser.IS);
					this.state = 4613;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4612;
						this.separator();
						}
						}
						this.state = 4615;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4619;
				this.qualified_data_item();
				}
				break;
			case cobolParser.CRT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4621;
				this.match(cobolParser.CRT);
				this.state = 4623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4622;
					this.separator();
					}
					}
					this.state = 4625;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4627;
				this.match(cobolParser.STATUS);
				this.state = 4629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4628;
					this.separator();
					}
					}
					this.state = 4631;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4639;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4633;
					this.match(cobolParser.IS);
					this.state = 4635;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4634;
						this.separator();
						}
						}
						this.state = 4637;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4641;
				this.qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_data_item(): Qualified_data_itemContext {
		let _localctx: Qualified_data_itemContext = new Qualified_data_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, cobolParser.RULE_qualified_data_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4645;
			this.match(cobolParser.USER_DEFINED_WORD);
			this.state = 4661;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 753, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4647;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4646;
						this.separator();
						}
						}
						this.state = 4649;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4651;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.IN || _la === cobolParser.OF)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4652;
						this.separator();
						}
						}
						this.state = 4655;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4657;
					this.match(cobolParser.USER_DEFINED_WORD);
					}
					}
				}
				this.state = 4663;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 753, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency(): CurrencyContext {
		let _localctx: CurrencyContext = new CurrencyContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, cobolParser.RULE_currency);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4664;
			this.match(cobolParser.CURRENCY);
			this.state = 4666;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4665;
				this.separator();
				}
				}
				this.state = 4668;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4676;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.SIGN) {
				{
				this.state = 4670;
				this.match(cobolParser.SIGN);
				this.state = 4672;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4671;
					this.separator();
					}
					}
					this.state = 4674;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4678;
				this.match(cobolParser.IS);
				this.state = 4680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4679;
					this.separator();
					}
					}
					this.state = 4682;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4686;
			this.currency_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currency_definition(): Currency_definitionContext {
		let _localctx: Currency_definitionContext = new Currency_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, cobolParser.RULE_currency_definition);
		let _la: number;
		try {
			this.state = 4712;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4688;
				this.literal_7();
				this.state = 4695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 4689;
					this.match(cobolParser.WITH);
					this.state = 4691;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4690;
						this.separator();
						}
						}
						this.state = 4693;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4697;
				this.match(cobolParser.PICTURE);
				this.state = 4699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4698;
					this.separator();
					}
					}
					this.state = 4701;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4703;
				this.match(cobolParser.SYMBOL);
				this.state = 4705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4704;
					this.separator();
					}
					}
					this.state = 4707;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4709;
				this.literal_8();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4711;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_7(): Literal_7Context {
		let _localctx: Literal_7Context = new Literal_7Context(this._ctx, this.state);
		this.enterRule(_localctx, 348, cobolParser.RULE_literal_7);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4714;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal_8(): Literal_8Context {
		let _localctx: Literal_8Context = new Literal_8Context(this._ctx, this.state);
		this.enterRule(_localctx, 350, cobolParser.RULE_literal_8);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4716;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_(): Class_Context {
		let _localctx: Class_Context = new Class_Context(this._ctx, this.state);
		this.enterRule(_localctx, 352, cobolParser.RULE_class_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4718;
			this.match(cobolParser.CLASS);
			this.state = 4720;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4719;
				this.separator();
				}
				}
				this.state = 4722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4724;
			this.class_name();
			this.state = 4726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4725;
				this.separator();
				}
				}
				this.state = 4728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4730;
				this.match(cobolParser.IS);
				this.state = 4732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4731;
					this.separator();
					}
					}
					this.state = 4734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4745;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4738;
				this.user_class();
				this.state = 4742;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 768, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4739;
						this.separator();
						}
						}
					}
					this.state = 4744;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 768, this._ctx);
				}
				}
				}
				this.state = 4747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_name(): Class_nameContext {
		let _localctx: Class_nameContext = new Class_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, cobolParser.RULE_class_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4749;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_class(): User_classContext {
		let _localctx: User_classContext = new User_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, cobolParser.RULE_user_class);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4751;
			this.first_literal();
			this.state = 4765;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
			case 1:
				{
				this.state = 4753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4752;
					this.separator();
					}
					}
					this.state = 4755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4757;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4758;
					this.separator();
					}
					}
					this.state = 4761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 4763;
				this.last_literal();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolic_chars(): Symbolic_charsContext {
		let _localctx: Symbolic_charsContext = new Symbolic_charsContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, cobolParser.RULE_symbolic_chars);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4767;
			this.match(cobolParser.SYMBOLIC);
			this.state = 4769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4768;
				this.separator();
				}
				}
				this.state = 4771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTERS) {
				{
				this.state = 4773;
				this.match(cobolParser.CHARACTERS);
				this.state = 4775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4774;
					this.separator();
					}
					}
					this.state = 4777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4781;
				this.symb_ch_definition();
				}
				}
				this.state = 4784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_definition(): Symb_ch_definitionContext {
		let _localctx: Symb_ch_definitionContext = new Symb_ch_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, cobolParser.RULE_symb_ch_definition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4787;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4786;
					this.symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4789;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 777, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4792;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IN) {
				{
				this.state = 4791;
				this.symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_clause(): Symb_ch_def_clauseContext {
		let _localctx: Symb_ch_def_clauseContext = new Symb_ch_def_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, cobolParser.RULE_symb_ch_def_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4794;
				this.symbol_char();
				this.state = 4796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4795;
					this.separator();
					}
					}
					this.state = 4798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
				}
				this.state = 4802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			this.state = 4810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ARE || _la === cobolParser.IS) {
				{
				this.state = 4804;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ARE || _la === cobolParser.IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4805;
					this.separator();
					}
					}
					this.state = 4808;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4812;
				this.char_val();
				this.state = 4814;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4813;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4816;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 783, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				}
				this.state = 4820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext {
		let _localctx: Symb_ch_def_in_alphabetContext = new Symb_ch_def_in_alphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, cobolParser.RULE_symb_ch_def_in_alphabet);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4822;
			this.match(cobolParser.IN);
			this.state = 4824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4823;
				this.separator();
				}
				}
				this.state = 4826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4828;
			this.alpha_name();
			this.state = 4832;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 786, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4829;
					this.separator();
					}
					}
				}
				this.state = 4834;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 786, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbol_char(): Symbol_charContext {
		let _localctx: Symbol_charContext = new Symbol_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, cobolParser.RULE_symbol_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4835;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public char_val(): Char_valContext {
		let _localctx: Char_valContext = new Char_valContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, cobolParser.RULE_char_val);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4837;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alphabet(): AlphabetContext {
		let _localctx: AlphabetContext = new AlphabetContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, cobolParser.RULE_alphabet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4839;
			this.match(cobolParser.ALPHABET);
			this.state = 4841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4840;
				this.separator();
				}
				}
				this.state = 4843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4845;
			this.alpha_name();
			this.state = 4847;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4846;
				this.separator();
				}
				}
				this.state = 4849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4851;
				this.match(cobolParser.IS);
				this.state = 4853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4852;
					this.separator();
					}
					}
					this.state = 4855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4859;
			this.alpha_value();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alpha_value(): Alpha_valueContext {
		let _localctx: Alpha_valueContext = new Alpha_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, cobolParser.RULE_alpha_value);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4877;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ASCII:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4861;
				this.match(cobolParser.ASCII);
				}
				break;
			case cobolParser.STANDARD_1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4862;
				this.match(cobolParser.STANDARD_1);
				}
				break;
			case cobolParser.STANDARD_2:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4863;
				this.match(cobolParser.STANDARD_2);
				}
				break;
			case cobolParser.NATIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4864;
				this.match(cobolParser.NATIVE);
				}
				break;
			case cobolParser.EBCDIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4865;
				this.match(cobolParser.EBCDIC);
				}
				break;
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4866;
					this.user_alpha();
					this.state = 4870;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 791, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 4867;
							this.separator();
							}
							}
						}
						this.state = 4872;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 791, this._ctx);
					}
					}
					}
					this.state = 4875;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public user_alpha(): User_alphaContext {
		let _localctx: User_alphaContext = new User_alphaContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, cobolParser.RULE_user_alpha);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4913;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 800, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4879;
				this.first_literal();
				this.state = 4893;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 796, this._ctx) ) {
				case 1:
					{
					this.state = 4881;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4880;
						this.separator();
						}
						}
						this.state = 4883;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4885;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.THROUGH || _la === cobolParser.THRU)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4887;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4886;
						this.separator();
						}
						}
						this.state = 4889;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4891;
					this.last_literal();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4895;
				this.first_literal();
				this.state = 4909;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4897;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4896;
							this.separator();
							}
							}
							this.state = 4899;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 4901;
						this.match(cobolParser.ALSO);
						this.state = 4903;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 4902;
							this.separator();
							}
							}
							this.state = 4905;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 4907;
						this.same_literal();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4911;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 799, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_literal(): First_literalContext {
		let _localctx: First_literalContext = new First_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, cobolParser.RULE_first_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4915;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public last_literal(): Last_literalContext {
		let _localctx: Last_literalContext = new Last_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, cobolParser.RULE_last_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4917;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_literal(): Same_literalContext {
		let _localctx: Same_literalContext = new Same_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, cobolParser.RULE_same_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4919;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.STRING_LITERAL || _la === cobolParser.NUMERIC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_(): Switch_Context {
		let _localctx: Switch_Context = new Switch_Context(this._ctx, this.state);
		this.enterRule(_localctx, 382, cobolParser.RULE_switch_);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4921;
			this.match(cobolParser.SWITCH);
			this.state = 4923;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4922;
				this.separator();
				}
				}
				this.state = 4925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4927;
			this.switch_num();
			this.state = 4931;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4928;
					this.separator();
					}
					}
				}
				this.state = 4933;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 802, this._ctx);
			}
			this.state = 4948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS || _la === cobolParser.USER_DEFINED_WORD) {
				{
				this.state = 4940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 4934;
					this.match(cobolParser.IS);
					this.state = 4936;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4935;
						this.separator();
						}
						}
						this.state = 4938;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 4942;
				this.switch_name();
				this.state = 4944;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4943;
						this.separator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4946;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 805, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4970;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.ON:
				{
				this.state = 4950;
				this.switch_clause_on();
				this.state = 4958;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
				case 1:
					{
					this.state = 4952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4951;
						this.separator();
						}
						}
						this.state = 4954;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4956;
					this.switch_clause_off();
					}
					break;
				}
				}
				break;
			case cobolParser.OFF:
				{
				this.state = 4960;
				this.switch_clause_off();
				this.state = 4968;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
				case 1:
					{
					this.state = 4962;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4961;
						this.separator();
						}
						}
						this.state = 4964;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 4966;
					this.switch_clause_on();
					}
					break;
				}
				}
				break;
			case cobolParser.ALPHABET:
			case cobolParser.ARGUMENT_NUMBER:
			case cobolParser.ARGUMENT_VALUE:
			case cobolParser.C01:
			case cobolParser.CARD_READER:
			case cobolParser.CLASS:
			case cobolParser.CONSOLE:
			case cobolParser.CRT:
			case cobolParser.CURRENCY:
			case cobolParser.CURSOR:
			case cobolParser.DECIMAL_POINT:
			case cobolParser.ENVIRONMENT_NAME:
			case cobolParser.ENVIRONMENT_VALUE:
			case cobolParser.LINE_PRINTER:
			case cobolParser.PAPER_TAPE_PUNCH:
			case cobolParser.PAPER_TAPE_READER:
			case cobolParser.SWITCH:
			case cobolParser.SYMBOLIC:
			case cobolParser.SYSERR:
			case cobolParser.SYSIN:
			case cobolParser.SYSOUT:
			case cobolParser.START_SLASH_:
			case cobolParser.START_STAR_:
			case cobolParser.COMMA_:
			case cobolParser.SEMI_:
			case cobolParser.DOT_:
			case cobolParser.START_FOUR_SPACES:
			case cobolParser.WHITESPACE:
			case cobolParser.NEWLINE:
				break;
			default:
				break;
			}
			this.state = 4975;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 812, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4972;
					this.separator();
					}
					}
				}
				this.state = 4977;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 812, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_on(): Switch_clause_onContext {
		let _localctx: Switch_clause_onContext = new Switch_clause_onContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, cobolParser.RULE_switch_clause_on);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4978;
			this.match(cobolParser.ON);
			this.state = 4980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4979;
				this.separator();
				}
				}
				this.state = 4982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 4990;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 4984;
				this.match(cobolParser.STATUS);
				this.state = 4986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4985;
					this.separator();
					}
					}
					this.state = 4988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 4998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 4992;
				this.match(cobolParser.IS);
				this.state = 4994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4993;
					this.separator();
					}
					}
					this.state = 4996;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5000;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_clause_off(): Switch_clause_offContext {
		let _localctx: Switch_clause_offContext = new Switch_clause_offContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, cobolParser.RULE_switch_clause_off);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5002;
			this.match(cobolParser.OFF);
			this.state = 5004;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5003;
				this.separator();
				}
				}
				this.state = 5006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.STATUS) {
				{
				this.state = 5008;
				this.match(cobolParser.STATUS);
				this.state = 5010;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5009;
					this.separator();
					}
					}
					this.state = 5012;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5016;
				this.match(cobolParser.IS);
				this.state = 5018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5017;
					this.separator();
					}
					}
					this.state = 5020;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5024;
			this.cond_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_name(): Cond_nameContext {
		let _localctx: Cond_nameContext = new Cond_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, cobolParser.RULE_cond_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5026;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_name(): Switch_nameContext {
		let _localctx: Switch_nameContext = new Switch_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, cobolParser.RULE_switch_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5028;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public switch_num(): Switch_numContext {
		let _localctx: Switch_numContext = new Switch_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, cobolParser.RULE_switch_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5030;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public top_of_page_name(): Top_of_page_nameContext {
		let _localctx: Top_of_page_nameContext = new Top_of_page_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, cobolParser.RULE_top_of_page_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5032;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predefined_device(): Predefined_deviceContext {
		let _localctx: Predefined_deviceContext = new Predefined_deviceContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, cobolParser.RULE_predefined_device);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5034;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CARD_READER || _la === cobolParser.CONSOLE || _la === cobolParser.LINE_PRINTER || _la === cobolParser.PAPER_TAPE_PUNCH || _la === cobolParser.PAPER_TAPE_READER || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (cobolParser.SYSERR - 347)) | (1 << (cobolParser.SYSIN - 347)) | (1 << (cobolParser.SYSOUT - 347)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public device_name(): Device_nameContext {
		let _localctx: Device_nameContext = new Device_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, cobolParser.RULE_device_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5036;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env(): Arg_envContext {
		let _localctx: Arg_envContext = new Arg_envContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, cobolParser.RULE_arg_env);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5038;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.ARGUMENT_NUMBER || _la === cobolParser.ARGUMENT_VALUE || _la === cobolParser.ENVIRONMENT_NAME || _la === cobolParser.ENVIRONMENT_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_env_name(): Arg_env_nameContext {
		let _localctx: Arg_env_nameContext = new Arg_env_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, cobolParser.RULE_arg_env_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5040;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_control(): File_controlContext {
		let _localctx: File_controlContext = new File_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, cobolParser.RULE_file_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5042;
			this.match(cobolParser.FILE_CONTROL);
			this.state = 5046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 5043;
				this.separator();
				}
				}
				this.state = 5048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5049;
			this.match(cobolParser.DOT_);
			this.state = 5053;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 824, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5050;
					this.separator();
					}
					}
				}
				this.state = 5055;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 824, this._ctx);
			}
			this.state = 5065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.SELECT) {
				{
				{
				this.state = 5056;
				this.select();
				this.state = 5060;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5057;
						this.separator();
						}
						}
					}
					this.state = 5062;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 825, this._ctx);
				}
				}
				}
				this.state = 5067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, cobolParser.RULE_select);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5068;
			this.match(cobolParser.SELECT);
			this.state = 5070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5069;
				this.separator();
				}
				}
				this.state = 5072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.OPTIONAL) {
				{
				this.state = 5074;
				this.match(cobolParser.OPTIONAL);
				this.state = 5076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5075;
					this.separator();
					}
					}
					this.state = 5078;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5082;
			this.file_name();
			this.state = 5086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 5083;
				this.separator();
				}
				}
				this.state = 5088;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5089;
			this.assign_to();
			this.state = 5093;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 5090;
				this.separator();
				}
				}
				this.state = 5095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RESERVE) {
				{
				this.state = 5096;
				this.reserve();
				this.state = 5100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5097;
					this.separator();
					}
					}
					this.state = 5102;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 835, this._ctx) ) {
			case 1:
				{
				this.state = 5105;
				this.organization();
				this.state = 5109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5106;
					this.separator();
					}
					}
					this.state = 5111;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 5121;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.BLOCK) {
				{
				this.state = 5114;
				this.block_contains();
				this.state = 5118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5115;
					this.separator();
					}
					}
					this.state = 5120;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5130;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CODE_SET) {
				{
				this.state = 5123;
				this.code_set();
				this.state = 5127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5124;
					this.separator();
					}
					}
					this.state = 5129;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.PADDING) {
				{
				this.state = 5132;
				this.padding();
				this.state = 5136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5133;
					this.separator();
					}
					}
					this.state = 5138;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 843, this._ctx) ) {
			case 1:
				{
				this.state = 5141;
				this.record_delimiter();
				this.state = 5145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5142;
					this.separator();
					}
					}
					this.state = 5147;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 5157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS || _la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL) {
				{
				this.state = 5150;
				this.access_mode();
				this.state = 5154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5151;
					this.separator();
					}
					}
					this.state = 5156;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === cobolParser.ALTERNATE || _la === cobolParser.RECORD) {
				{
				{
				this.state = 5159;
				this.record_key();
				this.state = 5163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5160;
					this.separator();
					}
					}
					this.state = 5165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 5170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.LOCK) {
				{
				this.state = 5171;
				this.lock_mode();
				this.state = 5175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5172;
					this.separator();
					}
					}
					this.state = 5177;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE || _la === cobolParser.STATUS) {
				{
				this.state = 5180;
				this.file_status();
				this.state = 5184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5181;
					this.separator();
					}
					}
					this.state = 5186;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5189;
			this.match(cobolParser.DOT_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_status(): File_statusContext {
		let _localctx: File_statusContext = new File_statusContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, cobolParser.RULE_file_status);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FILE) {
				{
				this.state = 5191;
				this.match(cobolParser.FILE);
				this.state = 5193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5192;
					this.separator();
					}
					}
					this.state = 5195;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5199;
			this.match(cobolParser.STATUS);
			this.state = 5201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5200;
				this.separator();
				}
				}
				this.state = 5203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5205;
				this.match(cobolParser.IS);
				this.state = 5207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5206;
					this.separator();
					}
					}
					this.state = 5209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5213;
			this.file_stat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_stat(): File_statContext {
		let _localctx: File_statContext = new File_statContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, cobolParser.RULE_file_stat);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5215;
			this.qualified_data_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key(): Record_keyContext {
		let _localctx: Record_keyContext = new Record_keyContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, cobolParser.RULE_record_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ALTERNATE) {
				{
				this.state = 5217;
				this.match(cobolParser.ALTERNATE);
				this.state = 5219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5218;
					this.separator();
					}
					}
					this.state = 5221;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5225;
			this.match(cobolParser.RECORD);
			this.state = 5227;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5226;
				this.separator();
				}
				}
				this.state = 5229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.KEY) {
				{
				this.state = 5231;
				this.match(cobolParser.KEY);
				this.state = 5233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5232;
					this.separator();
					}
					}
					this.state = 5235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5239;
				this.match(cobolParser.IS);
				this.state = 5241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5240;
					this.separator();
					}
					}
					this.state = 5243;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5247;
			this.record_key_definition();
			this.state = 5263;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
			case 1:
				{
				this.state = 5249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5248;
					this.separator();
					}
					}
					this.state = 5251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 5253;
					this.match(cobolParser.WITH);
					this.state = 5255;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5254;
						this.separator();
						}
						}
						this.state = 5257;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5261;
				this.match(cobolParser.DUPLICATES);
				}
				break;
			}
			this.state = 5272;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 869, this._ctx) ) {
			case 1:
				{
				this.state = 5266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5265;
					this.separator();
					}
					}
					this.state = 5268;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5270;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.ASCENDING || _la === cobolParser.DESCENDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_key_definition(): Record_key_definitionContext {
		let _localctx: Record_key_definitionContext = new Record_key_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, cobolParser.RULE_record_key_definition);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5302;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5274;
				this.qualified_data_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5275;
				this.match(cobolParser.USER_DEFINED_WORD);
				this.state = 5279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5276;
					this.separator();
					}
					}
					this.state = 5281;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5282;
				this.match(cobolParser.EQUAL_);
				this.state = 5286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 5283;
					this.separator();
					}
					}
					this.state = 5288;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5289;
				this.qualified_data_item();
				this.state = 5299;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 873, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5293;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
							{
							{
							this.state = 5290;
							this.separator();
							}
							}
							this.state = 5295;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 5296;
						this.qualified_data_item();
						}
						}
					}
					this.state = 5301;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 873, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_mode(): Access_modeContext {
		let _localctx: Access_modeContext = new Access_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, cobolParser.RULE_access_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ACCESS) {
				{
				this.state = 5304;
				this.match(cobolParser.ACCESS);
				this.state = 5306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5305;
					this.separator();
					}
					}
					this.state = 5308;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MODE) {
					{
					this.state = 5310;
					this.match(cobolParser.MODE);
					this.state = 5312;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5311;
						this.separator();
						}
						}
						this.state = 5314;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5318;
					this.match(cobolParser.IS);
					this.state = 5320;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5319;
						this.separator();
						}
						}
						this.state = 5322;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				}
			}

			this.state = 5328;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.RANDOM || _la === cobolParser.SEQUENTIAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5358;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 887, this._ctx) ) {
			case 1:
				{
				this.state = 5330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5329;
					this.separator();
					}
					}
					this.state = 5332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5334;
				this.match(cobolParser.RELATIVE);
				this.state = 5336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5335;
					this.separator();
					}
					}
					this.state = 5338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.KEY) {
					{
					this.state = 5340;
					this.match(cobolParser.KEY);
					this.state = 5342;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5341;
						this.separator();
						}
						}
						this.state = 5344;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5348;
					this.match(cobolParser.IS);
					this.state = 5350;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5349;
						this.separator();
						}
						}
						this.state = 5352;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5356;
				this.qualified_data_item();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve(): ReserveContext {
		let _localctx: ReserveContext = new ReserveContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, cobolParser.RULE_reserve);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5360;
			this.match(cobolParser.RESERVE);
			this.state = 5362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5361;
				this.separator();
				}
				}
				this.state = 5364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5366;
			this.reserve_num();
			this.state = 5374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 890, this._ctx) ) {
			case 1:
				{
				this.state = 5368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5367;
					this.separator();
					}
					}
					this.state = 5370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5372;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.AREA || _la === cobolParser.AREAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserve_num(): Reserve_numContext {
		let _localctx: Reserve_numContext = new Reserve_numContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, cobolParser.RULE_reserve_num);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5376;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public record_delimiter(): Record_delimiterContext {
		let _localctx: Record_delimiterContext = new Record_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, cobolParser.RULE_record_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5378;
			this.match(cobolParser.RECORD);
			this.state = 5380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5379;
				this.separator();
				}
				}
				this.state = 5382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5384;
			this.match(cobolParser.DELIMITER);
			this.state = 5386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5385;
				this.separator();
				}
				}
				this.state = 5388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5390;
				this.match(cobolParser.IS);
				this.state = 5392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5391;
					this.separator();
					}
					}
					this.state = 5394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5398;
			this.match(cobolParser.STANDARD_1);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public padding(): PaddingContext {
		let _localctx: PaddingContext = new PaddingContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, cobolParser.RULE_padding);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5400;
			this.match(cobolParser.PADDING);
			this.state = 5402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5401;
				this.separator();
				}
				}
				this.state = 5404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5412;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CHARACTER) {
				{
				this.state = 5406;
				this.match(cobolParser.CHARACTER);
				this.state = 5408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5407;
					this.separator();
					}
					}
					this.state = 5410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5414;
				this.match(cobolParser.IS);
				this.state = 5416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5415;
					this.separator();
					}
					}
					this.state = 5418;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5422;
			this.pad_char();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pad_char(): Pad_charContext {
		let _localctx: Pad_charContext = new Pad_charContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, cobolParser.RULE_pad_char);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5424;
			this.match(cobolParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public organization(): OrganizationContext {
		let _localctx: OrganizationContext = new OrganizationContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, cobolParser.RULE_organization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ORGANIZATION) {
				{
				this.state = 5426;
				this.match(cobolParser.ORGANIZATION);
				this.state = 5428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5427;
					this.separator();
					}
					}
					this.state = 5430;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.IS) {
					{
					this.state = 5432;
					this.match(cobolParser.IS);
					this.state = 5434;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5433;
						this.separator();
						}
						}
						this.state = 5436;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				}
			}

			this.state = 5453;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.SEQUENTIAL:
				{
				this.state = 5442;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.LINE:
				{
				this.state = 5443;
				this.match(cobolParser.LINE);
				this.state = 5445;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5444;
					this.separator();
					}
					}
					this.state = 5447;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5449;
				this.match(cobolParser.SEQUENTIAL);
				}
				break;
			case cobolParser.RELATIVE:
				{
				this.state = 5451;
				this.match(cobolParser.RELATIVE);
				}
				break;
			case cobolParser.INDEXED:
				{
				this.state = 5452;
				this.match(cobolParser.INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode(): Lock_modeContext {
		let _localctx: Lock_modeContext = new Lock_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, cobolParser.RULE_lock_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5455;
			this.match(cobolParser.LOCK);
			this.state = 5457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5456;
				this.separator();
				}
				}
				this.state = 5459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.MODE) {
				{
				this.state = 5461;
				this.match(cobolParser.MODE);
				this.state = 5463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5462;
					this.separator();
					}
					}
					this.state = 5465;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5469;
				this.match(cobolParser.IS);
				this.state = 5471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5470;
					this.separator();
					}
					}
					this.state = 5473;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5477;
			this.lock_mode_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_mode_definition(): Lock_mode_definitionContext {
		let _localctx: Lock_mode_definitionContext = new Lock_mode_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, cobolParser.RULE_lock_mode_definition);
		let _la: number;
		try {
			this.state = 5547;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.MANUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5479;
				this.match(cobolParser.MANUAL);
				this.state = 5481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5480;
					this.separator();
					}
					}
					this.state = 5483;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.WITH) {
					{
					this.state = 5485;
					this.match(cobolParser.WITH);
					this.state = 5487;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5486;
						this.separator();
						}
						}
						this.state = 5489;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5493;
				this.match(cobolParser.LOCK);
				this.state = 5495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5494;
					this.separator();
					}
					}
					this.state = 5497;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5499;
				this.match(cobolParser.ON);
				this.state = 5501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5500;
					this.separator();
					}
					}
					this.state = 5503;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5505;
				this.match(cobolParser.MULTIPLE);
				this.state = 5507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5506;
					this.separator();
					}
					}
					this.state = 5509;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5511;
				this.match(cobolParser.RECORDS);
				}
				break;
			case cobolParser.AUTOMATIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5513;
				this.match(cobolParser.AUTOMATIC);
				this.state = 5544;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 923, this._ctx) ) {
				case 1:
					{
					this.state = 5515;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5514;
						this.separator();
						}
						}
						this.state = 5517;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 5525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.WITH) {
						{
						this.state = 5519;
						this.match(cobolParser.WITH);
						this.state = 5521;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5520;
							this.separator();
							}
							}
							this.state = 5523;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					this.state = 5542;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.LOCK:
						{
						{
						this.state = 5527;
						this.match(cobolParser.LOCK);
						this.state = 5529;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5528;
							this.separator();
							}
							}
							this.state = 5531;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 5533;
						this.match(cobolParser.ON);
						this.state = 5535;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5534;
							this.separator();
							}
							}
							this.state = 5537;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 5539;
						this.match(cobolParser.RECORD);
						}
						}
						break;
					case cobolParser.ROLLBACK:
						{
						this.state = 5541;
						this.match(cobolParser.ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case cobolParser.EXCLUSIVE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5546;
				this.match(cobolParser.EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public code_set(): Code_setContext {
		let _localctx: Code_setContext = new Code_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, cobolParser.RULE_code_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5549;
			this.match(cobolParser.CODE_SET);
			this.state = 5551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5550;
				this.separator();
				}
				}
				this.state = 5553;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 5555;
				this.match(cobolParser.IS);
				this.state = 5557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5556;
					this.separator();
					}
					}
					this.state = 5559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5563;
			this.alpha_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_contains(): Block_containsContext {
		let _localctx: Block_containsContext = new Block_containsContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, cobolParser.RULE_block_contains);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5565;
			this.match(cobolParser.BLOCK);
			this.state = 5567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5566;
				this.separator();
				}
				}
				this.state = 5569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5577;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 5571;
				this.match(cobolParser.CONTAINS);
				this.state = 5573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5572;
					this.separator();
					}
					}
					this.state = 5575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5591;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 933, this._ctx) ) {
			case 1:
				{
				this.state = 5579;
				this.smallest_block();
				this.state = 5581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5580;
					this.separator();
					}
					}
					this.state = 5583;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5585;
				this.match(cobolParser.TO);
				this.state = 5587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5586;
					this.separator();
					}
					}
					this.state = 5589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
				break;
			}
			this.state = 5593;
			this.blocksize();
			this.state = 5595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5594;
				this.separator();
				}
				}
				this.state = 5597;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5599;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.CHARACTERS || _la === cobolParser.RECORDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public smallest_block(): Smallest_blockContext {
		let _localctx: Smallest_blockContext = new Smallest_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, cobolParser.RULE_smallest_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5601;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocksize(): BlocksizeContext {
		let _localctx: BlocksizeContext = new BlocksizeContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, cobolParser.RULE_blocksize);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5603;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to(): Assign_toContext {
		let _localctx: Assign_toContext = new Assign_toContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, cobolParser.RULE_assign_to);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5605;
			this.match(cobolParser.ASSIGN);
			this.state = 5607;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5606;
				this.separator();
				}
				}
				this.state = 5609;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5617;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TO) {
				{
				this.state = 5611;
				this.match(cobolParser.TO);
				this.state = 5613;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5612;
					this.separator();
					}
					}
					this.state = 5615;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5619;
			this.assign_to_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_to_definition(): Assign_to_definitionContext {
		let _localctx: Assign_to_definitionContext = new Assign_to_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, cobolParser.RULE_assign_to_definition);
		let _la: number;
		try {
			this.state = 5648;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DISK:
			case cobolParser.DYNAMIC:
			case cobolParser.EXTERNAL:
			case cobolParser.PRINTER:
			case cobolParser.STRING_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL) {
					{
					this.state = 5621;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.DYNAMIC || _la === cobolParser.EXTERNAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5623;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5622;
						this.separator();
						}
						}
						this.state = 5625;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5629;
				this.file_spec();
				}
				break;
			case cobolParser.MULTIPLE:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.MULTIPLE) {
					{
					this.state = 5630;
					this.match(cobolParser.MULTIPLE);
					this.state = 5632;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5631;
						this.separator();
						}
						}
						this.state = 5634;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5638;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5646;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 943, this._ctx) ) {
				case 1:
					{
					this.state = 5640;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5639;
						this.separator();
						}
						}
						this.state = 5642;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 5644;
					this.match(cobolParser.FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_spec(): File_specContext {
		let _localctx: File_specContext = new File_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, cobolParser.RULE_file_spec);
		try {
			this.state = 5654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5650;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5651;
				this.qualified_data_item();
				}
				break;
			case cobolParser.DISK:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5652;
				this.match(cobolParser.DISK);
				}
				break;
			case cobolParser.PRINTER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5653;
				this.match(cobolParser.PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, cobolParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5656;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_o_control(): I_o_controlContext {
		let _localctx: I_o_controlContext = new I_o_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, cobolParser.RULE_i_o_control);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5658;
			this.match(cobolParser.I_O_CONTROL);
			this.state = 5662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 5659;
				this.separator();
				}
				}
				this.state = 5664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5665;
			this.match(cobolParser.DOT_);
			this.state = 5669;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 947, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5666;
					this.separator();
					}
					}
				}
				this.state = 5671;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 947, this._ctx);
			}
			this.state = 5727;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.APPLY || _la === cobolParser.MULTIPLE || _la === cobolParser.RERUN || _la === cobolParser.SAME || _la === cobolParser.DOT_) {
				{
				this.state = 5681;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.APPLY) {
					{
					{
					this.state = 5672;
					this.apply();
					this.state = 5676;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 5673;
						this.separator();
						}
						}
						this.state = 5678;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.SAME) {
					{
					{
					this.state = 5684;
					this.same();
					this.state = 5688;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 5685;
						this.separator();
						}
						}
						this.state = 5690;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5695;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.RERUN) {
					{
					{
					this.state = 5696;
					this.rerun();
					this.state = 5700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 5697;
						this.separator();
						}
						}
						this.state = 5702;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5707;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === cobolParser.MULTIPLE) {
					{
					{
					this.state = 5708;
					this.multiple_file();
					this.state = 5712;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 5709;
						this.separator();
						}
						}
						this.state = 5714;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					this.state = 5719;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5720;
				this.match(cobolParser.DOT_);
				this.state = 5724;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 956, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5721;
						this.separator();
						}
						}
					}
					this.state = 5726;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 956, this._ctx);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file(): Multiple_fileContext {
		let _localctx: Multiple_fileContext = new Multiple_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, cobolParser.RULE_multiple_file);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5729;
			this.match(cobolParser.MULTIPLE);
			this.state = 5731;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5730;
				this.separator();
				}
				}
				this.state = 5733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5735;
			this.match(cobolParser.FILE);
			this.state = 5737;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5736;
				this.separator();
				}
				}
				this.state = 5739;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5747;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.TAPE) {
				{
				this.state = 5741;
				this.match(cobolParser.TAPE);
				this.state = 5743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5742;
					this.separator();
					}
					}
					this.state = 5745;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5755;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.CONTAINS) {
				{
				this.state = 5749;
				this.match(cobolParser.CONTAINS);
				this.state = 5751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5750;
					this.separator();
					}
					}
					this.state = 5753;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5757;
				this.multiple_file_definition();
				this.state = 5761;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 964, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5758;
						this.separator();
						}
						}
					}
					this.state = 5763;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 964, this._ctx);
				}
				}
				}
				this.state = 5766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_definition(): Multiple_file_definitionContext {
		let _localctx: Multiple_file_definitionContext = new Multiple_file_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, cobolParser.RULE_multiple_file_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5768;
			this.multiple_file_name();
			this.state = 5782;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 968, this._ctx) ) {
			case 1:
				{
				this.state = 5770;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5769;
					this.separator();
					}
					}
					this.state = 5772;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5774;
				this.match(cobolParser.POSITION);
				this.state = 5776;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5775;
					this.separator();
					}
					}
					this.state = 5778;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5780;
				this.pos_integer();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_file_name(): Multiple_file_nameContext {
		let _localctx: Multiple_file_nameContext = new Multiple_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, cobolParser.RULE_multiple_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5784;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos_integer(): Pos_integerContext {
		let _localctx: Pos_integerContext = new Pos_integerContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, cobolParser.RULE_pos_integer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5786;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun(): RerunContext {
		let _localctx: RerunContext = new RerunContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, cobolParser.RULE_rerun);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5788;
			this.match(cobolParser.RERUN);
			this.state = 5790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5789;
				this.separator();
				}
				}
				this.state = 5792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.ON) {
				{
				this.state = 5794;
				this.match(cobolParser.ON);
				this.state = 5796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5795;
					this.separator();
					}
					}
					this.state = 5798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5800;
				this.file_name();
				this.state = 5802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5801;
					this.separator();
					}
					}
					this.state = 5804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.EVERY) {
				{
				this.state = 5808;
				this.match(cobolParser.EVERY);
				this.state = 5810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5809;
					this.separator();
					}
					}
					this.state = 5812;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5816;
			this.rerun_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_definition(): Rerun_definitionContext {
		let _localctx: Rerun_definitionContext = new Rerun_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, cobolParser.RULE_rerun_definition);
		let _la: number;
		try {
			this.state = 5843;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 979, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5818;
				this.rerun_def_file();
				this.state = 5820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5819;
					this.separator();
					}
					}
					this.state = 5822;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.OF) {
					{
					this.state = 5824;
					this.match(cobolParser.OF);
					this.state = 5826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5825;
						this.separator();
						}
						}
						this.state = 5828;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5832;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5834;
				this.clock_count();
				this.state = 5836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5835;
					this.separator();
					}
					}
					this.state = 5838;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5840;
				this.match(cobolParser.CLOCK_UNITS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5842;
				this.condition_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clock_count(): Clock_countContext {
		let _localctx: Clock_countContext = new Clock_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, cobolParser.RULE_clock_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5845;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_name(): Condition_nameContext {
		let _localctx: Condition_nameContext = new Condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, cobolParser.RULE_condition_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5847;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rerun_def_file(): Rerun_def_fileContext {
		let _localctx: Rerun_def_fileContext = new Rerun_def_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, cobolParser.RULE_rerun_def_file);
		let _la: number;
		try {
			this.state = 5874;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.END:
			case cobolParser.REEL:
			case cobolParser.UNIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.END) {
					{
					this.state = 5849;
					this.match(cobolParser.END);
					this.state = 5851;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5850;
						this.separator();
						}
						}
						this.state = 5853;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 5861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === cobolParser.OF) {
						{
						this.state = 5855;
						this.match(cobolParser.OF);
						this.state = 5857;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 5856;
							this.separator();
							}
							}
							this.state = 5859;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						}
					}

					}
				}

				this.state = 5865;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.REEL || _la === cobolParser.UNIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5866;
				this.rec_count();
				this.state = 5868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5867;
					this.separator();
					}
					}
					this.state = 5870;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5872;
				this.match(cobolParser.RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rec_count(): Rec_countContext {
		let _localctx: Rec_countContext = new Rec_countContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, cobolParser.RULE_rec_count);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5876;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same(): SameContext {
		let _localctx: SameContext = new SameContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, cobolParser.RULE_same);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5878;
			this.match(cobolParser.SAME);
			this.state = 5880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5879;
				this.separator();
				}
				}
				this.state = 5882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5890;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE) {
				{
				this.state = 5884;
				_la = this._input.LA(1);
				if (!(_la === cobolParser.RECORD || _la === cobolParser.SORT || _la === cobolParser.SORT_MERGE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5885;
					this.separator();
					}
					}
					this.state = 5888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.AREA) {
				{
				this.state = 5892;
				this.match(cobolParser.AREA);
				this.state = 5894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5893;
					this.separator();
					}
					}
					this.state = 5896;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.FOR) {
				{
				this.state = 5900;
				this.match(cobolParser.FOR);
				this.state = 5902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5901;
					this.separator();
					}
					}
					this.state = 5904;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
			}

			this.state = 5908;
			this.same_area_file();
			this.state = 5916;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5910;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5909;
						this.separator();
						}
						}
						this.state = 5912;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 5914;
					this.same_area_file();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5918;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 994, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public same_area_file(): Same_area_fileContext {
		let _localctx: Same_area_fileContext = new Same_area_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, cobolParser.RULE_same_area_file);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5920;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply(): ApplyContext {
		let _localctx: ApplyContext = new ApplyContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, cobolParser.RULE_apply);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5922;
			this.match(cobolParser.APPLY);
			this.state = 5924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5923;
				this.separator();
				}
				}
				this.state = 5926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5934;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5928;
				this.apply_definition();
				this.state = 5930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5929;
					this.separator();
					}
					}
					this.state = 5932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				}
				}
				this.state = 5936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (cobolParser.CONTIGUOUS - 80)) | (1 << (cobolParser.CONTIGUOUS_BEST_TRY - 80)) | (1 << (cobolParser.DEFERRED_WRITE - 80)))) !== 0) || _la === cobolParser.EXTENSION || _la === cobolParser.FILL_SIZE || _la === cobolParser.LOCK_HOLDING || _la === cobolParser.MASS_INSERT || _la === cobolParser.PREALLOCATION || _la === cobolParser.PRINT_CONTROL || _la === cobolParser.WINDOW);
			this.state = 5938;
			this.match(cobolParser.ON);
			this.state = 5940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5939;
				this.separator();
				}
				}
				this.state = 5942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 5951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5944;
				this.file_name();
				this.state = 5948;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 5945;
						this.separator();
						}
						}
					}
					this.state = 5950;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
				}
				}
				}
				this.state = 5953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public apply_definition(): Apply_definitionContext {
		let _localctx: Apply_definitionContext = new Apply_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, cobolParser.RULE_apply_definition);
		let _la: number;
		try {
			this.state = 5992;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.DEFERRED_WRITE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5955;
				this.match(cobolParser.DEFERRED_WRITE);
				}
				break;
			case cobolParser.EXTENSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5956;
				this.match(cobolParser.EXTENSION);
				this.state = 5958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5957;
					this.separator();
					}
					}
					this.state = 5960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5962;
				this.extend_amt();
				}
				break;
			case cobolParser.FILL_SIZE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5964;
				this.match(cobolParser.FILL_SIZE);
				}
				break;
			case cobolParser.LOCK_HOLDING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5965;
				this.match(cobolParser.LOCK_HOLDING);
				}
				break;
			case cobolParser.MASS_INSERT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5966;
				this.match(cobolParser.MASS_INSERT);
				}
				break;
			case cobolParser.CONTIGUOUS:
			case cobolParser.CONTIGUOUS_BEST_TRY:
			case cobolParser.PREALLOCATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY) {
					{
					this.state = 5967;
					_la = this._input.LA(1);
					if (!(_la === cobolParser.CONTIGUOUS || _la === cobolParser.CONTIGUOUS_BEST_TRY)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5969;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5968;
						this.separator();
						}
						}
						this.state = 5971;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					}
				}

				this.state = 5975;
				this.match(cobolParser.PREALLOCATION);
				this.state = 5977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5976;
					this.separator();
					}
					}
					this.state = 5979;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5981;
				this.preall_amt();
				}
				break;
			case cobolParser.PRINT_CONTROL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5983;
				this.match(cobolParser.PRINT_CONTROL);
				}
				break;
			case cobolParser.WINDOW:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5984;
				this.match(cobolParser.WINDOW);
				this.state = 5986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5985;
					this.separator();
					}
					}
					this.state = 5988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 5990;
				this.window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_ptrs(): Window_ptrsContext {
		let _localctx: Window_ptrsContext = new Window_ptrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, cobolParser.RULE_window_ptrs);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5994;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preall_amt(): Preall_amtContext {
		let _localctx: Preall_amtContext = new Preall_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, cobolParser.RULE_preall_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5996;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extend_amt(): Extend_amtContext {
		let _localctx: Extend_amtContext = new Extend_amtContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, cobolParser.RULE_extend_amt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5998;
			this.match(cobolParser.NUMERIC_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public arithmetic_expression(): Arithmetic_expressionContext;
	public arithmetic_expression(_p: number): Arithmetic_expressionContext;
	// @RuleVersion(0)
	public arithmetic_expression(_p?: number): Arithmetic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Arithmetic_expressionContext = new Arithmetic_expressionContext(this._ctx, _parentState);
		let _prevctx: Arithmetic_expressionContext = _localctx;
		let _startState: number = 486;
		this.enterRecursionRule(_localctx, 486, cobolParser.RULE_arithmetic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6032;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.LPAREN_:
				{
				this.state = 6001;
				this.match(cobolParser.LPAREN_);
				this.state = 6005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6002;
					this.arithmetic_separator();
					}
					}
					this.state = 6007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6008;
				this.arithmetic_expression(0);
				this.state = 6012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6009;
					this.arithmetic_separator();
					}
					}
					this.state = 6014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6015;
				this.match(cobolParser.RPAREN_);
				}
				break;
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
				{
				this.state = 6017;
				this.unary_arithmetic_operator();
				this.state = 6021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6018;
					this.arithmetic_separator();
					}
					}
					this.state = 6023;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6024;
				this.arithmetic_expression(7);
				}
				break;
			case cobolParser.FUNCTION:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 6026;
				this.identifier();
				}
				break;
			case cobolParser.NUMERIC_LITERAL:
				{
				this.state = 6027;
				this.match(cobolParser.NUMERIC_LITERAL);
				}
				break;
			case cobolParser.STRING_LITERAL:
				{
				this.state = 6028;
				this.match(cobolParser.STRING_LITERAL);
				}
				break;
			case cobolParser.ZERO:
				{
				this.state = 6029;
				this.match(cobolParser.ZERO);
				}
				break;
			case cobolParser.ZEROS:
				{
				this.state = 6030;
				this.match(cobolParser.ZEROS);
				}
				break;
			case cobolParser.ZEROES:
				{
				this.state = 6031;
				this.match(cobolParser.ZEROES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6052;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1013, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_arithmetic_expression);
					this.state = 6034;
					if (!(this.precpred(this._ctx, 8))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 8)");
					}
					this.state = 6038;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6035;
						this.arithmetic_separator();
						}
						}
						this.state = 6040;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6041;
					this.binary_arithmetic_operator();
					this.state = 6045;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6042;
						this.arithmetic_separator();
						}
						}
						this.state = 6047;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6048;
					this.arithmetic_expression(9);
					}
					}
				}
				this.state = 6054;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1013, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext {
		let _localctx: Binary_arithmetic_operatorContext = new Binary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, cobolParser.RULE_binary_arithmetic_operator);
		try {
			this.state = 6061;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1014, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6055;
				this.match(cobolParser.PLUS_);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6056;
				this.match(cobolParser.MINUS_);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6057;
				this.match(cobolParser.STAR_);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6058;
				this.match(cobolParser.SLASH_);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6059;
				this.match(cobolParser.STAR_);
				this.state = 6060;
				this.match(cobolParser.STAR_);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext {
		let _localctx: Unary_arithmetic_operatorContext = new Unary_arithmetic_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, cobolParser.RULE_unary_arithmetic_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6063;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.PLUS_ || _la === cobolParser.MINUS_)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_expression(): Logic_expressionContext;
	public logic_expression(_p: number): Logic_expressionContext;
	// @RuleVersion(0)
	public logic_expression(_p?: number): Logic_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_expressionContext = new Logic_expressionContext(this._ctx, _parentState);
		let _prevctx: Logic_expressionContext = _localctx;
		let _startState: number = 492;
		this.enterRecursionRule(_localctx, 492, cobolParser.RULE_logic_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6094;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1018, this._ctx) ) {
			case 1:
				{
				this.state = 6066;
				this.match(cobolParser.LPAREN_);
				this.state = 6070;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6067;
					this.arithmetic_separator();
					}
					}
					this.state = 6072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6073;
				this.logic_expression(0);
				this.state = 6077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6074;
					this.arithmetic_separator();
					}
					}
					this.state = 6079;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6080;
				this.match(cobolParser.RPAREN_);
				}
				break;

			case 2:
				{
				this.state = 6082;
				this.match(cobolParser.NOT);
				this.state = 6086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6083;
					this.arithmetic_separator();
					}
					}
					this.state = 6088;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6089;
				this.logic_expression(5);
				}
				break;

			case 3:
				{
				this.state = 6090;
				this.class_condition();
				}
				break;

			case 4:
				{
				this.state = 6091;
				this.logic_condition(0);
				}
				break;

			case 5:
				{
				this.state = 6092;
				this.sign_condition();
				}
				break;

			case 6:
				{
				this.state = 6093;
				this.success_failure_condition();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6114;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1021, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_expression);
					this.state = 6096;
					if (!(this.precpred(this._ctx, 6))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 6)");
					}
					this.state = 6100;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6097;
						this.arithmetic_separator();
						}
						}
						this.state = 6102;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6103;
					this.logic_operation();
					this.state = 6107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6104;
						this.arithmetic_separator();
						}
						}
						this.state = 6109;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6110;
					this.logic_expression(7);
					}
					}
				}
				this.state = 6116;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1021, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public success_failure_condition(): Success_failure_conditionContext {
		let _localctx: Success_failure_conditionContext = new Success_failure_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, cobolParser.RULE_success_failure_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6117;
			this.qualified_data_item();
			this.state = 6125;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1023, this._ctx) ) {
			case 1:
				{
				this.state = 6119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6118;
					this.arithmetic_separator();
					}
					}
					this.state = 6121;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6123;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 6128;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6127;
				this.arithmetic_separator();
				}
				}
				this.state = 6130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 6132;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.FAILURE || _la === cobolParser.SUCCESS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public logic_condition(): Logic_conditionContext;
	public logic_condition(_p: number): Logic_conditionContext;
	// @RuleVersion(0)
	public logic_condition(_p?: number): Logic_conditionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Logic_conditionContext = new Logic_conditionContext(this._ctx, _parentState);
		let _prevctx: Logic_conditionContext = _localctx;
		let _startState: number = 496;
		this.enterRecursionRule(_localctx, 496, cobolParser.RULE_logic_condition, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6153;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1027, this._ctx) ) {
			case 1:
				{
				this.state = 6135;
				this.arithmetic_expression(0);
				this.state = 6139;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6136;
					this.arithmetic_separator();
					}
					}
					this.state = 6141;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6142;
				this.condition_operator();
				this.state = 6146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6143;
					this.arithmetic_separator();
					}
					}
					this.state = 6148;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6149;
				this.arithmetic_expression(0);
				}
				break;

			case 2:
				{
				this.state = 6151;
				this.class_condition();
				}
				break;

			case 3:
				{
				this.state = 6152;
				this.qualified_data_item();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 6179;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1031, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_conditionContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, cobolParser.RULE_logic_condition);
					this.state = 6155;
					if (!(this.precpred(this._ctx, 1))) {
						throw new FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 6157;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6156;
						this.arithmetic_separator();
						}
						}
						this.state = 6159;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 6161;
					this.logic_operation();
					this.state = 6165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6162;
						this.arithmetic_separator();
						}
						}
						this.state = 6167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6168;
					this.condition_operator();
					this.state = 6172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6169;
						this.arithmetic_separator();
						}
						}
						this.state = 6174;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6175;
					this.arithmetic_expression(0);
					}
					}
				}
				this.state = 6181;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1031, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logic_operation(): Logic_operationContext {
		let _localctx: Logic_operationContext = new Logic_operationContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, cobolParser.RULE_logic_operation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6182;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.AND || _la === cobolParser.OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition(): Sign_conditionContext {
		let _localctx: Sign_conditionContext = new Sign_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, cobolParser.RULE_sign_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6184;
			this.arithmetic_expression(0);
			this.state = 6192;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1033, this._ctx) ) {
			case 1:
				{
				this.state = 6186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6185;
					this.arithmetic_separator();
					}
					}
					this.state = 6188;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6190;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 6201;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1035, this._ctx) ) {
			case 1:
				{
				this.state = 6195;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6194;
					this.arithmetic_separator();
					}
					}
					this.state = 6197;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6199;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 6204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6203;
				this.arithmetic_separator();
				}
				}
				this.state = 6206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 6208;
			this.sign_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sign_condition_name(): Sign_condition_nameContext {
		let _localctx: Sign_condition_nameContext = new Sign_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, cobolParser.RULE_sign_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6210;
			_la = this._input.LA(1);
			if (!(_la === cobolParser.NEGATIVE || _la === cobolParser.POSITIVE || _la === cobolParser.ZERO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition(): Class_conditionContext {
		let _localctx: Class_conditionContext = new Class_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, cobolParser.RULE_class_condition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6212;
			this.identifier();
			this.state = 6220;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1038, this._ctx) ) {
			case 1:
				{
				this.state = 6214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6213;
					this.arithmetic_separator();
					}
					}
					this.state = 6216;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6218;
				this.match(cobolParser.IS);
				}
				break;
			}
			this.state = 6229;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1040, this._ctx) ) {
			case 1:
				{
				this.state = 6223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6222;
					this.arithmetic_separator();
					}
					}
					this.state = 6225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6227;
				this.match(cobolParser.NOT);
				}
				break;
			}
			this.state = 6232;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6231;
				this.arithmetic_separator();
				}
				}
				this.state = 6234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
			this.state = 6236;
			this.class_condition_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_condition_name(): Class_condition_nameContext {
		let _localctx: Class_condition_nameContext = new Class_condition_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, cobolParser.RULE_class_condition_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6238;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << cobolParser.ALPHABETIC) | (1 << cobolParser.ALPHABETIC_LOWER) | (1 << cobolParser.ALPHABETIC_UPPER))) !== 0) || _la === cobolParser.NUMERIC || _la === cobolParser.USER_DEFINED_WORD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public condition_operator(): Condition_operatorContext {
		let _localctx: Condition_operatorContext = new Condition_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, cobolParser.RULE_condition_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === cobolParser.IS) {
				{
				this.state = 6240;
				this.match(cobolParser.IS);
				this.state = 6244;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6241;
					this.arithmetic_separator();
					}
					}
					this.state = 6246;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 6384;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1071, this._ctx) ) {
			case 1:
				{
				this.state = 6256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === cobolParser.NOT) {
					{
					this.state = 6249;
					this.match(cobolParser.NOT);
					this.state = 6253;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6250;
						this.arithmetic_separator();
						}
						}
						this.state = 6255;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6318;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case cobolParser.GREATER:
					{
					this.state = 6258;
					this.match(cobolParser.GREATER);
					this.state = 6266;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1047, this._ctx) ) {
					case 1:
						{
						this.state = 6260;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6259;
							this.arithmetic_separator();
							}
							}
							this.state = 6262;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6264;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.GT_:
					{
					this.state = 6268;
					this.match(cobolParser.GT_);
					this.state = 6276;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1049, this._ctx) ) {
					case 1:
						{
						this.state = 6270;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6269;
							this.arithmetic_separator();
							}
							}
							this.state = 6272;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6274;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LESS:
					{
					this.state = 6278;
					this.match(cobolParser.LESS);
					this.state = 6286;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1051, this._ctx) ) {
					case 1:
						{
						this.state = 6280;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6279;
							this.arithmetic_separator();
							}
							}
							this.state = 6282;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6284;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.LT_:
					{
					this.state = 6288;
					this.match(cobolParser.LT_);
					this.state = 6296;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1053, this._ctx) ) {
					case 1:
						{
						this.state = 6290;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6289;
							this.arithmetic_separator();
							}
							}
							this.state = 6292;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6294;
						this.match(cobolParser.THAN);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL:
					{
					this.state = 6298;
					this.match(cobolParser.EQUAL);
					this.state = 6306;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1055, this._ctx) ) {
					case 1:
						{
						this.state = 6300;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6299;
							this.arithmetic_separator();
							}
							}
							this.state = 6302;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6304;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				case cobolParser.EQUAL_:
					{
					this.state = 6308;
					this.match(cobolParser.EQUAL_);
					this.state = 6316;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1057, this._ctx) ) {
					case 1:
						{
						this.state = 6310;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						do {
							{
							{
							this.state = 6309;
							this.arithmetic_separator();
							}
							}
							this.state = 6312;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
						this.state = 6314;
						this.match(cobolParser.TO);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 6320;
				this.match(cobolParser.GREATER);
				this.state = 6328;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1060, this._ctx) ) {
				case 1:
					{
					this.state = 6322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6321;
						this.arithmetic_separator();
						}
						}
						this.state = 6324;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 6326;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 6331;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6330;
					this.arithmetic_separator();
					}
					}
					this.state = 6333;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6335;
				this.match(cobolParser.OR);
				this.state = 6337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6336;
					this.arithmetic_separator();
					}
					}
					this.state = 6339;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6341;
				this.match(cobolParser.EQUAL);
				this.state = 6349;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1064, this._ctx) ) {
				case 1:
					{
					this.state = 6343;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6342;
						this.arithmetic_separator();
						}
						}
						this.state = 6345;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 6347;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 6351;
				this.match(cobolParser.GE_);
				}
				break;

			case 4:
				{
				this.state = 6352;
				this.match(cobolParser.LESS);
				this.state = 6360;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1066, this._ctx) ) {
				case 1:
					{
					this.state = 6354;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6353;
						this.arithmetic_separator();
						}
						}
						this.state = 6356;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 6358;
					this.match(cobolParser.THAN);
					}
					break;
				}
				this.state = 6363;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6362;
					this.arithmetic_separator();
					}
					}
					this.state = 6365;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6367;
				this.match(cobolParser.OR);
				this.state = 6369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6368;
					this.arithmetic_separator();
					}
					}
					this.state = 6371;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
				this.state = 6373;
				this.match(cobolParser.EQUAL);
				this.state = 6381;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1070, this._ctx) ) {
				case 1:
					{
					this.state = 6375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 6374;
						this.arithmetic_separator();
						}
						}
						this.state = 6377;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0));
					this.state = 6379;
					this.match(cobolParser.TO);
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 6383;
				this.match(cobolParser.LE_);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_lvalue(): Identifier_lvalueContext {
		let _localctx: Identifier_lvalueContext = new Identifier_lvalueContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, cobolParser.RULE_identifier_lvalue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6386;
			this.qualified_data_item();
			this.state = 6394;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1073, this._ctx) ) {
			case 1:
				{
				this.state = 6390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6387;
					this.arithmetic_separator();
					}
					}
					this.state = 6392;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6393;
				this.subscripting();
				}
				break;
			}
			this.state = 6403;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1075, this._ctx) ) {
			case 1:
				{
				this.state = 6399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6396;
					this.arithmetic_separator();
					}
					}
					this.state = 6401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6402;
				this.reference_modification();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, cobolParser.RULE_identifier);
		let _la: number;
		try {
			this.state = 6432;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.USER_DEFINED_WORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6405;
				this.identifier_lvalue();
				}
				break;
			case cobolParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6406;
				this.match(cobolParser.FUNCTION);
				this.state = 6410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6407;
					this.arithmetic_separator();
					}
					}
					this.state = 6412;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6413;
				this.function_name();
				this.state = 6421;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1078, this._ctx) ) {
				case 1:
					{
					this.state = 6417;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6414;
						this.arithmetic_separator();
						}
						}
						this.state = 6419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6420;
					this.arguments();
					}
					break;
				}
				this.state = 6430;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1080, this._ctx) ) {
				case 1:
					{
					this.state = 6426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6423;
						this.arithmetic_separator();
						}
						}
						this.state = 6428;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6429;
					this.reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arguments(): ArgumentsContext {
		let _localctx: ArgumentsContext = new ArgumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, cobolParser.RULE_arguments);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6434;
			this.subscripting();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subscripting(): SubscriptingContext {
		let _localctx: SubscriptingContext = new SubscriptingContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, cobolParser.RULE_subscripting);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6436;
			this.match(cobolParser.LPAREN_);
			this.state = 6440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 6437;
				this.arithmetic_separator();
				}
				}
				this.state = 6442;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6445;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case cobolParser.FUNCTION:
			case cobolParser.ZERO:
			case cobolParser.ZEROES:
			case cobolParser.ZEROS:
			case cobolParser.PLUS_:
			case cobolParser.MINUS_:
			case cobolParser.LPAREN_:
			case cobolParser.STRING_LITERAL:
			case cobolParser.NUMERIC_LITERAL:
			case cobolParser.USER_DEFINED_WORD:
				{
				this.state = 6443;
				this.arithmetic_expression(0);
				}
				break;
			case cobolParser.ALL:
				{
				this.state = 6444;
				this.match(cobolParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6459;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1086, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6450;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.COMMA_ - 389)) | (1 << (cobolParser.SEMI_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
						{
						{
						this.state = 6447;
						this.separator();
						}
						}
						this.state = 6452;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 6455;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case cobolParser.FUNCTION:
					case cobolParser.ZERO:
					case cobolParser.ZEROES:
					case cobolParser.ZEROS:
					case cobolParser.PLUS_:
					case cobolParser.MINUS_:
					case cobolParser.LPAREN_:
					case cobolParser.STRING_LITERAL:
					case cobolParser.NUMERIC_LITERAL:
					case cobolParser.USER_DEFINED_WORD:
						{
						this.state = 6453;
						this.arithmetic_expression(0);
						}
						break;
					case cobolParser.ALL:
						{
						this.state = 6454;
						this.match(cobolParser.ALL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 6461;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1086, this._ctx);
			}
			this.state = 6465;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 6462;
				this.arithmetic_separator();
				}
				}
				this.state = 6467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6468;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reference_modification(): Reference_modificationContext {
		let _localctx: Reference_modificationContext = new Reference_modificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, cobolParser.RULE_reference_modification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6470;
			this.match(cobolParser.LPAREN_);
			this.state = 6474;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 6471;
				this.arithmetic_separator();
				}
				}
				this.state = 6476;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6477;
			this.leftmost_character_position();
			this.state = 6481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 6478;
				this.arithmetic_separator();
				}
				}
				this.state = 6483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6484;
			this.match(cobolParser.COLON_);
			this.state = 6492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1091, this._ctx) ) {
			case 1:
				{
				this.state = 6488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
					{
					{
					this.state = 6485;
					this.arithmetic_separator();
					}
					}
					this.state = 6490;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 6491;
				this.length();
				}
				break;
			}
			this.state = 6497;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (cobolParser.START_SLASH_ - 389)) | (1 << (cobolParser.START_STAR_ - 389)) | (1 << (cobolParser.START_FOUR_SPACES - 389)) | (1 << (cobolParser.WHITESPACE - 389)) | (1 << (cobolParser.NEWLINE - 389)))) !== 0)) {
				{
				{
				this.state = 6494;
				this.arithmetic_separator();
				}
				}
				this.state = 6499;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6500;
			this.match(cobolParser.RPAREN_);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftmost_character_position(): Leftmost_character_positionContext {
		let _localctx: Leftmost_character_positionContext = new Leftmost_character_positionContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, cobolParser.RULE_leftmost_character_position);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6502;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public length(): LengthContext {
		let _localctx: LengthContext = new LengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, cobolParser.RULE_length);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6504;
			this.arithmetic_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_name(): Function_nameContext {
		let _localctx: Function_nameContext = new Function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, cobolParser.RULE_function_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6506;
			this.match(cobolParser.USER_DEFINED_WORD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 243:
			return this.arithmetic_expression_sempred(_localctx as Arithmetic_expressionContext, predIndex);

		case 246:
			return this.logic_expression_sempred(_localctx as Logic_expressionContext, predIndex);

		case 248:
			return this.logic_condition_sempred(_localctx as Logic_conditionContext, predIndex);
		}
		return true;
	}
	private arithmetic_expression_sempred(_localctx: Arithmetic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 8);
		}
		return true;
	}
	private logic_expression_sempred(_localctx: Logic_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 6);
		}
		return true;
	}
	private logic_condition_sempred(_localctx: Logic_conditionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 13;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u01A6\u196F\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x03\x02\x03\x02\x07\x02\u0213\n\x02\f" +
		"\x02\x0E\x02\u0216\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03" +
		"\u0226\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u022E" +
		"\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u0234\n\x05\x03\x06\x03" +
		"\x06\x07\x06\u0238\n\x06\f\x06\x0E\x06\u023B\v\x06\x03\x06\x03\x06\x03" +
		"\x06\x07\x06\u0240\n\x06\f\x06\x0E\x06\u0243\v\x06\x03\x06\x05\x06\u0246" +
		"\n\x06\x03\x07\x03\x07\x05\x07\u024A\n\x07\x03\x07\x05\x07\u024D\n\x07" +
		"\x03\x07\x05\x07\u0250\n\x07\x03\b\x03\b\x05\b\u0254\n\b\x03\b\x03\b\x07" +
		"\b\u0258\n\b\f\b\x0E\b\u025B\v\b\x07\b\u025D\n\b\f\b\x0E\b\u0260\v\b\x03" +
		"\b\x03\b\x07\b\u0264\n\b\f\b\x0E\b\u0267\v\b\x07\b\u0269\n\b\f\b\x0E\b" +
		"\u026C\v\b\x05\b\u026E\n\b\x03\b\x03\b\x06\b\u0272\n\b\r\b\x0E\b\u0273" +
		"\x03\b\x03\b\x06\b\u0278\n\b\r\b\x0E\b\u0279\x03\b\x03\b\x05\b\u027E\n" +
		"\b\x03\b\x07\b\u0281\n\b\f\b\x0E\b\u0284\v\b\x03\t\x03\t\x06\t\u0288\n" +
		"\t\r\t\x0E\t\u0289\x03\t\x03\t\x06\t\u028E\n\t\r\t\x0E\t\u028F\x03\t\x03" +
		"\t\x05\t\u0294\n\t\x03\t\x06\t\u0297\n\t\r\t\x0E\t\u0298\x03\t\x03\t\x05" +
		"\t\u029D\n\t\x03\t\x07\t\u02A0\n\t\f\t\x0E\t\u02A3\v\t\x03\t\x03\t\x07" +
		"\t\u02A7\n\t\f\t\x0E\t\u02AA\v\t\x03\n\x03\n\x03\v\x03\v\x07\v\u02B0\n" +
		"\v\f\v\x0E\v\u02B3\v\v\x03\v\x03\v\x07\v\u02B7\n\v\f\v\x0E\v\u02BA\v\v" +
		"\x03\v\x03\v\x07\v\u02BE\n\v\f\v\x0E\v\u02C1\v\v\x06\v\u02C3\n\v\r\v\x0E" +
		"\v\u02C4\x03\v\x03\v\x06\v\u02C9\n\v\r\v\x0E\v\u02CA\x03\v\x03\v\x07\v" +
		"\u02CF\n\v\f\v\x0E\v\u02D2\v\v\x03\v\x03\v\x07\v\u02D6\n\v\f\v\x0E\v\u02D9" +
		"\v\v\x03\f\x03\f\x03\f\x06\f\u02DE\n\f\r\f\x0E\f\u02DF\x03\f\x03\f\x07" +
		"\f\u02E4\n\f\f\f\x0E\f\u02E7\v\f\x03\r\x03\r\x03\x0E\x03\x0E\x07\x0E\u02ED" +
		"\n\x0E\f\x0E\x0E\x0E\u02F0\v\x0E\x03\x0E\x03\x0E\x07\x0E\u02F4\n\x0E\f" +
		"\x0E\x0E\x0E\u02F7\v\x0E\x03\x0E\x03\x0E\x07\x0E\u02FB\n\x0E\f\x0E\x0E" +
		"\x0E\u02FE\v\x0E\x07\x0E\u0300\n\x0E\f\x0E\x0E\x0E\u0303\v\x0E\x03\x0F" +
		"\x03\x0F\x07\x0F\u0307\n\x0F\f\x0F\x0E\x0F\u030A\v\x0F\x06\x0F\u030C\n" +
		"\x0F\r\x0F\x0E\x0F\u030D\x03\x0F\x07\x0F\u0311\n\x0F\f\x0F\x0E\x0F\u0314" +
		"\v\x0F\x03\x0F\x03\x0F\x07\x0F\u0318\n\x0F\f\x0F\x0E\x0F\u031B\v\x0F\x03" +
		"\x10\x03\x10\x06\x10\u031F\n\x10\r\x10\x0E\x10\u0320\x03\x10\x03\x10\x05" +
		"\x10\u0325\n\x10\x03\x10\x06\x10\u0328\n\x10\r\x10\x0E\x10\u0329\x03\x10" +
		"\x03\x10\x06\x10\u032E\n\x10\r\x10\x0E\x10\u032F\x03\x10\x03\x10\x05\x10" +
		"\u0334\n\x10\x03\x10\x06\x10\u0337\n\x10\r\x10\x0E\x10\u0338\x03\x10\x03" +
		"\x10\x06\x10\u033D\n\x10\r\x10\x0E\x10\u033E\x03\x10\x03\x10\x06\x10\u0343" +
		"\n\x10\r\x10\x0E\x10\u0344\x03\x10\x03\x10\x05\x10\u0349\n\x10\x03\x10" +
		"\x06\x10\u034C\n\x10\r\x10\x0E\x10\u034D\x03\x10\x03\x10\x07\x10\u0352" +
		"\n\x10\f\x10\x0E\x10\u0355\v\x10\x03\x10\x03\x10\x07\x10\u0359\n\x10\f" +
		"\x10\x0E\x10\u035C\v\x10\x03\x10\x03\x10\x06\x10\u0360\n\x10\r\x10\x0E" +
		"\x10\u0361\x03\x10\x03\x10\x06\x10\u0366\n\x10\r\x10\x0E\x10\u0367\x03" +
		"\x10\x03\x10\x05\x10\u036C\n\x10\x03\x11\x03\x11\x03\x12\x03\x12\x06\x12" +
		"\u0372\n\x12\r\x12\x0E\x12\u0373\x03\x12\x03\x12\x07\x12\u0378\n\x12\f" +
		"\x12\x0E\x12\u037B\v\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u0381" +
		"\n\x12\x03\x13\x03\x13\x06\x13\u0385\n\x13\r\x13\x0E\x13\u0386\x03\x13" +
		"\x03\x13\x06\x13\u038B\n\x13\r\x13\x0E\x13\u038C\x03\x13\x03\x13\x05\x13" +
		"\u0391\n\x13\x03\x13\x07\x13\u0394\n\x13\f\x13\x0E\x13\u0397\v\x13\x03" +
		"\x13\x03\x13\x07\x13\u039B\n\x13\f\x13\x0E\x13\u039E\v\x13\x03\x14\x03" +
		"\x14\x03\x15\x03\x15\x03\x16\x03\x16\x06\x16\u03A6\n\x16\r\x16\x0E\x16" +
		"\u03A7\x03\x16\x03\x16\x06\x16\u03AC\n\x16\r\x16\x0E\x16\u03AD\x03\x16" +
		"\x03\x16\x07\x16\u03B2\n\x16\f\x16\x0E\x16\u03B5\v\x16\x03\x17\x03\x17" +
		"\x06\x17\u03B9\n\x17\r\x17\x0E\x17\u03BA\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x07\x18\u03C1\n\x18\f\x18\x0E\x18\u03C4\v\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x07\x18\u03CA\n\x18\f\x18\x0E\x18\u03CD\v\x18\x03\x18\x03\x18" +
		"\x03\x18\x05\x18\u03D2\n\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1A\x05\x1A\u03DC\n\x1A\x03\x1B\x03\x1B\x06\x1B\u03E0" +
		"\n\x1B\r\x1B\x0E\x1B\u03E1\x03\x1B\x03\x1B\x06\x1B\u03E6\n\x1B\r\x1B\x0E" +
		"\x1B\u03E7\x03\x1B\x03\x1B\x05\x1B\u03EC\n\x1B\x03\x1B\x03\x1B\x06\x1B" +
		"\u03F0\n\x1B\r\x1B\x0E\x1B\u03F1\x03\x1B\x03\x1B\x06\x1B\u03F6\n\x1B\r" +
		"\x1B\x0E\x1B\u03F7\x03\x1B\x03\x1B\x05\x1B\u03FC\n\x1B\x05\x1B\u03FE\n" +
		"\x1B\x03\x1C\x03\x1C\x06\x1C\u0402\n\x1C\r\x1C\x0E\x1C\u0403\x03\x1C\x03" +
		"\x1C\x06\x1C\u0408\n\x1C\r\x1C\x0E\x1C\u0409\x03\x1C\x03\x1C\x05\x1C\u040E" +
		"\n\x1C\x03\x1C\x03\x1C\x06\x1C\u0412\n\x1C\r\x1C\x0E\x1C\u0413\x03\x1C" +
		"\x03\x1C\x06\x1C\u0418\n\x1C\r\x1C\x0E\x1C\u0419\x03\x1C\x03\x1C\x05\x1C" +
		"\u041E\n\x1C\x05\x1C\u0420\n\x1C\x03\x1D\x03\x1D\x06\x1D\u0424\n\x1D\r" +
		"\x1D\x0E\x1D\u0425\x03\x1D\x03\x1D\x06\x1D\u042A\n\x1D\r\x1D\x0E\x1D\u042B" +
		"\x03\x1D\x03\x1D\x06\x1D\u0430\n\x1D\r\x1D\x0E\x1D\u0431\x03\x1D\x03\x1D" +
		"\x06\x1D\u0436\n\x1D\r\x1D\x0E\x1D\u0437\x03\x1D\x03\x1D\x05\x1D\u043C" +
		"\n\x1D\x03\x1D\x06\x1D\u043F\n\x1D\r\x1D\x0E\x1D\u0440\x03\x1D\x03\x1D" +
		"\x05\x1D\u0445\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x06\x1F\u044B\n\x1F" +
		"\r\x1F\x0E\x1F\u044C\x03\x1F\x03\x1F\x06\x1F\u0451\n\x1F\r\x1F\x0E\x1F" +
		"\u0452\x03\x1F\x03\x1F\x06\x1F\u0457\n\x1F\r\x1F\x0E\x1F\u0458\x03\x1F" +
		"\x03\x1F\x05\x1F\u045D\n\x1F\x03\x1F\x06\x1F\u0460\n\x1F\r\x1F\x0E\x1F" +
		"\u0461\x03\x1F\x03\x1F\x06\x1F\u0466\n\x1F\r\x1F\x0E\x1F\u0467\x03\x1F" +
		"\x03\x1F\x05\x1F\u046C\n\x1F\x03\x1F\x06\x1F\u046F\n\x1F\r\x1F\x0E\x1F" +
		"\u0470\x03\x1F\x03\x1F\x05\x1F\u0475\n\x1F\x03\x1F\x06\x1F\u0478\n\x1F" +
		"\r\x1F\x0E\x1F\u0479\x03\x1F\x03\x1F\x05\x1F\u047E\n\x1F\x03 \x03 \x06" +
		" \u0482\n \r \x0E \u0483\x03 \x03 \x06 \u0488\n \r \x0E \u0489\x03 \x03" +
		" \x06 \u048E\n \r \x0E \u048F\x03 \x03 \x03!\x03!\x06!\u0496\n!\r!\x0E" +
		"!\u0497\x03!\x03!\x06!\u049C\n!\r!\x0E!\u049D\x03!\x03!\x06!\u04A2\n!" +
		"\r!\x0E!\u04A3\x03!\x06!\u04A7\n!\r!\x0E!\u04A8\x03!\x03!\x05!\u04AD\n" +
		"!\x05!\u04AF\n!\x03!\x06!\u04B2\n!\r!\x0E!\u04B3\x03!\x03!\x05!\u04B8" +
		"\n!\x03\"\x03\"\x06\"\u04BC\n\"\r\"\x0E\"\u04BD\x03\"\x03\"\x06\"\u04C2" +
		"\n\"\r\"\x0E\"\u04C3\x05\"\u04C6\n\"\x03\"\x03\"\x06\"\u04CA\n\"\r\"\x0E" +
		"\"\u04CB\x03\"\x03\"\x06\"\u04D0\n\"\r\"\x0E\"\u04D1\x05\"\u04D4\n\"\x03" +
		"\"\x03\"\x06\"\u04D8\n\"\r\"\x0E\"\u04D9\x03\"\x03\"\x06\"\u04DE\n\"\r" +
		"\"\x0E\"\u04DF\x03\"\x06\"\u04E3\n\"\r\"\x0E\"\u04E4\x03\"\x03\"\x05\"" +
		"\u04E9\n\"\x05\"\u04EB\n\"\x03\"\x06\"\u04EE\n\"\r\"\x0E\"\u04EF\x03\"" +
		"\x03\"\x05\"\u04F4\n\"\x03#\x03#\x06#\u04F8\n#\r#\x0E#\u04F9\x03#\x03" +
		"#\x06#\u04FE\n#\r#\x0E#\u04FF\x03#\x03#\x05#\u0504\n#\x03#\x06#\u0507" +
		"\n#\r#\x0E#\u0508\x03#\x03#\x05#\u050D\n#\x03#\x06#\u0510\n#\r#\x0E#\u0511" +
		"\x03#\x03#\x05#\u0516\n#\x03$\x03$\x06$\u051A\n$\r$\x0E$\u051B\x05$\u051E" +
		"\n$\x03$\x03$\x06$\u0522\n$\r$\x0E$\u0523\x03$\x03$\x05$\u0528\n$\x03" +
		"$\x03$\x06$\u052C\n$\r$\x0E$\u052D\x03$\x03$\x05$\u0532\n$\x05$\u0534" +
		"\n$\x03%\x03%\x06%\u0538\n%\r%\x0E%\u0539\x03%\x03%\x06%\u053E\n%\r%\x0E" +
		"%\u053F\x05%\u0542\n%\x03%\x03%\x05%\u0546\n%\x03&\x03&\x06&\u054A\n&" +
		"\r&\x0E&\u054B\x03&\x03&\x06&\u0550\n&\r&\x0E&\u0551\x05&\u0554\n&\x03" +
		"&\x03&\x05&\u0558\n&\x03\'\x03\'\x06\'\u055C\n\'\r\'\x0E\'\u055D\x05\'" +
		"\u0560\n\'\x03\'\x03\'\x06\'\u0564\n\'\r\'\x0E\'\u0565\x03\'\x03\'\x05" +
		"\'\u056A\n\'\x03\'\x06\'\u056D\n\'\r\'\x0E\'\u056E\x03\'\x03\'\x03\'\x03" +
		"\'\x06\'\u0575\n\'\r\'\x0E\'\u0576\x05\'\u0579\n\'\x03\'\x03\'\x06\'\u057D" +
		"\n\'\r\'\x0E\'\u057E\x03\'\x03\'\x05\'\u0583\n\'\x03\'\x06\'\u0586\n\'" +
		"\r\'\x0E\'\u0587\x03\'\x03\'\x03\'\x03\'\x06\'\u058E\n\'\r\'\x0E\'\u058F" +
		"\x03\'\x03\'\x06\'\u0594\n\'\r\'\x0E\'\u0595\x05\'\u0598\n\'\x03\'\x03" +
		"\'\x06\'\u059C\n\'\r\'\x0E\'\u059D\x03\'\x03\'\x05\'\u05A2\n\'\x05\'\u05A4" +
		"\n\'\x03\'\x06\'\u05A7\n\'\r\'\x0E\'\u05A8\x03\'\x03\'\x03\'\x03\'\x06" +
		"\'\u05AF\n\'\r\'\x0E\'\u05B0\x05\'\u05B3\n\'\x03\'\x05\'\u05B6\n\'\x03" +
		"(\x03(\x03(\x03(\x03(\x06(\u05BD\n(\r(\x0E(\u05BE\x05(\u05C1\n(\x03(\x03" +
		"(\x03(\x06(\u05C6\n(\r(\x0E(\u05C7\x03(\x03(\x05(\u05CC\n(\x03(\x03(\x06" +
		"(\u05D0\n(\r(\x0E(\u05D1\x05(\u05D4\n(\x03(\x03(\x03(\x03(\x06(\u05DA" +
		"\n(\r(\x0E(\u05DB\x05(\u05DE\n(\x03(\x03(\x06(\u05E2\n(\r(\x0E(\u05E3" +
		"\x03(\x03(\x03(\x03(\x06(\u05EA\n(\r(\x0E(\u05EB\x03(\x03(\x06(\u05F0" +
		"\n(\r(\x0E(\u05F1\x05(\u05F4\n(\x03(\x03(\x03(\x03(\x06(\u05FA\n(\r(\x0E" +
		"(\u05FB\x05(\u05FE\n(\x03(\x03(\x06(\u0602\n(\r(\x0E(\u0603\x03(\x03(" +
		"\x05(\u0608\n(\x03(\x06(\u060B\n(\r(\x0E(\u060C\x03(\x03(\x05(\u0611\n" +
		"(\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x06*\u061A\n*\r*\x0E*\u061B\x03*" +
		"\x03*\x05*\u0620\n*\x05*\u0622\n*\x03+\x03+\x06+\u0626\n+\r+\x0E+\u0627" +
		"\x03+\x03+\x03+\x03+\x06+\u062E\n+\r+\x0E+\u062F\x05+\u0632\n+\x03+\x03" +
		"+\x03+\x06+\u0637\n+\r+\x0E+\u0638\x05+\u063B\n+\x03+\x03+\x06+\u063F" +
		"\n+\r+\x0E+\u0640\x03+\x03+\x03+\x03+\x06+\u0647\n+\r+\x0E+\u0648\x05" +
		"+\u064B\n+\x03+\x03+\x03+\x06+\u0650\n+\r+\x0E+\u0651\x05+\u0654\n+\x03" +
		"+\x03+\x06+\u0658\n+\r+\x0E+\u0659\x03+\x03+\x05+\u065E\n+\x03,\x03,\x03" +
		"-\x03-\x05-\u0664\n-\x03.\x03.\x03.\x06.\u0669\n.\r.\x0E.\u066A\x03.\x03" +
		".\x06.\u066F\n.\r.\x0E.\u0670\x03.\x03.\x05.\u0675\n.\x05.\u0677\n.\x03" +
		".\x03.\x06.\u067B\n.\r.\x0E.\u067C\x03.\x03.\x05.\u0681\n.\x05.\u0683" +
		"\n.\x03/\x03/\x06/\u0687\n/\r/\x0E/\u0688\x03/\x03/\x05/\u068D\n/\x03" +
		"/\x03/\x06/\u0691\n/\r/\x0E/\u0692\x03/\x03/\x05/\u0697\n/\x03/\x03/\x05" +
		"/\u069B\n/\x030\x030\x031\x031\x032\x032\x062\u06A3\n2\r2\x0E2\u06A4\x05" +
		"2\u06A7\n2\x032\x032\x062\u06AB\n2\r2\x0E2\u06AC\x032\x032\x033\x033\x06" +
		"3\u06B3\n3\r3\x0E3\u06B4\x053\u06B7\n3\x033\x033\x063\u06BB\n3\r3\x0E" +
		"3\u06BC\x033\x033\x034\x034\x064\u06C3\n4\r4\x0E4\u06C4\x034\x034\x07" +
		"4\u06C9\n4\f4\x0E4\u06CC\v4\x034\x034\x074\u06D0\n4\f4\x0E4\u06D3\v4\x03" +
		"4\x034\x074\u06D7\n4\f4\x0E4\u06DA\v4\x054\u06DC\n4\x034\x034\x074\u06E0" +
		"\n4\f4\x0E4\u06E3\v4\x054\u06E5\n4\x034\x034\x074\u06E9\n4\f4\x0E4\u06EC" +
		"\v4\x054\u06EE\n4\x034\x034\x074\u06F2\n4\f4\x0E4\u06F5\v4\x054\u06F7" +
		"\n4\x034\x034\x074\u06FB\n4\f4\x0E4\u06FE\v4\x054\u0700\n4\x035\x035\x06" +
		"5\u0704\n5\r5\x0E5\u0705\x035\x035\x075\u070A\n5\f5\x0E5\u070D\v5\x03" +
		"5\x035\x075\u0711\n5\f5\x0E5\u0714\v5\x035\x035\x075\u0718\n5\f5\x0E5" +
		"\u071B\v5\x035\x075\u071E\n5\f5\x0E5\u0721\v5\x035\x035\x035\x075\u0726" +
		"\n5\f5\x0E5\u0729\v5\x035\x075\u072C\n5\f5\x0E5\u072F\v5\x055\u0731\n" +
		"5\x035\x075\u0734\n5\f5\x0E5\u0737\v5\x075\u0739\n5\f5\x0E5\u073C\v5\x03" +
		"6\x036\x066\u0740\n6\r6\x0E6\u0741\x036\x036\x076\u0746\n6\f6\x0E6\u0749" +
		"\v6\x036\x036\x076\u074D\n6\f6\x0E6\u0750\v6\x036\x036\x076\u0754\n6\f" +
		"6\x0E6\u0757\v6\x076\u0759\n6\f6\x0E6\u075C\v6\x037\x037\x067\u0760\n" +
		"7\r7\x0E7\u0761\x037\x037\x077\u0766\n7\f7\x0E7\u0769\v7\x037\x037\x07" +
		"7\u076D\n7\f7\x0E7\u0770\v7\x037\x037\x077\u0774\n7\f7\x0E7\u0777\v7\x07" +
		"7\u0779\n7\f7\x0E7\u077C\v7\x038\x038\x068\u0780\n8\r8\x0E8\u0781\x03" +
		"8\x038\x078\u0786\n8\f8\x0E8\u0789\v8\x038\x038\x078\u078D\n8\f8\x0E8" +
		"\u0790\v8\x038\x038\x078\u0794\n8\f8\x0E8\u0797\v8\x038\x078\u079A\n8" +
		"\f8\x0E8\u079D\v8\x038\x078\u07A0\n8\f8\x0E8\u07A3\v8\x078\u07A5\n8\f" +
		"8\x0E8\u07A8\v8\x039\x039\x069\u07AC\n9\r9\x0E9\u07AD\x039\x039\x079\u07B2" +
		"\n9\f9\x0E9\u07B5\v9\x039\x039\x079\u07B9\n9\f9\x0E9\u07BC\v9\x039\x03" +
		"9\x079\u07C0\n9\f9\x0E9\u07C3\v9\x079\u07C5\n9\f9\x0E9\u07C8\v9\x03:\x03" +
		":\x06:\u07CC\n:\r:\x0E:\u07CD\x03:\x03:\x07:\u07D2\n:\f:\x0E:\u07D5\v" +
		":\x03:\x03:\x07:\u07D9\n:\f:\x0E:\u07DC\v:\x07:\u07DE\n:\f:\x0E:\u07E1" +
		"\v:\x03:\x03:\x03;\x03;\x06;\u07E7\n;\r;\x0E;\u07E8\x03;\x03;\x07;\u07ED" +
		"\n;\f;\x0E;\u07F0\v;\x03;\x03;\x07;\u07F4\n;\f;\x0E;\u07F7\v;\x07;\u07F9" +
		"\n;\f;\x0E;\u07FC\v;\x03;\x03;\x03<\x03<\x06<\u0802\n<\r<\x0E<\u0803\x03" +
		"<\x03<\x07<\u0808\n<\f<\x0E<\u080B\v<\x03<\x03<\x07<\u080F\n<\f<\x0E<" +
		"\u0812\v<\x07<\u0814\n<\f<\x0E<\u0817\v<\x03<\x03<\x03=\x03=\x06=\u081D" +
		"\n=\r=\x0E=\u081E\x05=\u0821\n=\x03=\x03=\x03=\x06=\u0826\n=\r=\x0E=\u0827" +
		"\x05=\u082A\n=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=" +
		"\x03=\x05=\u0838\n=\x03>\x03>\x07>\u083C\n>\f>\x0E>\u083F\v>\x03>\x07" +
		">\u0842\n>\f>\x0E>\u0845\v>\x03?\x03?\x06?\u0849\n?\r?\x0E?\u084A\x03" +
		"?\x03?\x05?\u084F\n?\x05?\u0851\n?\x03?\x06?\u0854\n?\r?\x0E?\u0855\x03" +
		"?\x03?\x06?\u085A\n?\r?\x0E?\u085B\x03?\x03?\x05?\u0860\n?\x03?\x06?\u0863" +
		"\n?\r?\x0E?\u0864\x03?\x03?\x07?\u0869\n?\f?\x0E?\u086C\v?\x03?\x03?\x03" +
		"@\x03@\x03A\x03A\x06A\u0874\nA\rA\x0EA\u0875\x05A\u0878\nA\x03A\x03A\x03" +
		"A\x06A\u087D\nA\rA\x0EA\u087E\x05A\u0881\nA\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x03A\x06A\u088A\nA\rA\x0EA\u088B\x03A\x03A\x05A\u0890\nA\x03A\x03A\x06" +
		"A\u0894\nA\rA\x0EA\u0895\x03A\x03A\x05A\u089A\nA\x03A\x03A\x06A\u089E" +
		"\nA\rA\x0EA\u089F\x03A\x03A\x06A\u08A4\nA\rA\x0EA\u08A5\x05A\u08A8\nA" +
		"\x03A\x03A\x03A\x03A\x05A\u08AE\nA\x03B\x03B\x06B\u08B2\nB\rB\x0EB\u08B3" +
		"\x03B\x03B\x06B\u08B8\nB\rB\x0EB\u08B9\x03B\x03";
	private static readonly _serializedATNSegment1: string =
		"B\x06B\u08BE\nB\rB\x0EB\u08BF\x03B\x03B\x05B\u08C4\nB\x03C\x03C\x03D\x03" +
		"D\x03E\x03E\x06E\u08CC\nE\rE\x0EE\u08CD\x03E\x03E\x05E\u08D2\nE\x03E\x03" +
		"E\x06E\u08D6\nE\rE\x0EE\u08D7\x03E\x03E\x05E\u08DC\nE\x05E\u08DE\nE\x03" +
		"E\x06E\u08E1\nE\rE\x0EE\u08E2\x03E\x03E\x06E\u08E7\nE\rE\x0EE\u08E8\x03" +
		"E\x03E\x07E\u08ED\nE\fE\x0EE\u08F0\vE\x03F\x03F\x06F\u08F4\nF\rF\x0EF" +
		"\u08F5\x03F\x03F\x05F\u08FA\nF\x03G\x03G\x03G\x06G\u08FF\nG\rG\x0EG\u0900" +
		"\x03G\x03G\x03G\x03G\x06G\u0907\nG\rG\x0EG\u0908\x03G\x03G\x05G\u090D" +
		"\nG\x03H\x03H\x06H\u0911\nH\rH\x0EH\u0912\x03H\x03H\x03I\x03I\x03J\x03" +
		"J\x03K\x03K\x03L\x03L\x06L\u091F\nL\rL\x0EL\u0920\x03L\x03L\x06L\u0925" +
		"\nL\rL\x0EL\u0926\x03L\x03L\x07L\u092B\nL\fL\x0EL\u092E\vL\x03L\x06L\u0931" +
		"\nL\rL\x0EL\u0932\x03L\x03L\x05L\u0937\nL\x03M\x03M\x06M\u093B\nM\rM\x0E" +
		"M\u093C\x03M\x03M\x06M\u0941\nM\rM\x0EM\u0942\x05M\u0945\nM\x03M\x03M" +
		"\x06M\u0949\nM\rM\x0EM\u094A\x03M\x03M\x07M\u094F\nM\fM\x0EM\u0952\vM" +
		"\x03N\x03N\x03O\x03O\x06O\u0958\nO\rO\x0EO\u0959\x03O\x03O\x06O\u095E" +
		"\nO\rO\x0EO\u095F\x05O\u0962\nO\x03O\x03O\x06O\u0966\nO\rO\x0EO\u0967" +
		"\x05O\u096A\nO\x03O\x03O\x06O\u096E\nO\rO\x0EO\u096F\x03O\x03O\x07O\u0974" +
		"\nO\fO\x0EO\u0977\vO\x03P\x03P\x03Q\x03Q\x06Q\u097D\nQ\rQ\x0EQ\u097E\x03" +
		"Q\x03Q\x03Q\x03Q\x06Q\u0985\nQ\rQ\x0EQ\u0986\x03Q\x03Q\x06Q\u098B\nQ\r" +
		"Q\x0EQ\u098C\x03Q\x03Q\x06Q\u0991\nQ\rQ\x0EQ\u0992\x03Q\x03Q\x06Q\u0997" +
		"\nQ\rQ\x0EQ\u0998\x03Q\x03Q\x06Q\u099D\nQ\rQ\x0EQ\u099E\x03Q\x03Q\x06" +
		"Q\u09A3\nQ\rQ\x0EQ\u09A4\x05Q\u09A7\nQ\x03Q\x03Q\x05Q\u09AB\nQ\x03R\x03" +
		"R\x03S\x03S\x03T\x03T\x03U\x03U\x07U\u09B5\nU\fU\x0EU\u09B8\vU\x03U\x07" +
		"U\u09BB\nU\fU\x0EU\u09BE\vU\x03V\x03V\x06V\u09C2\nV\rV\x0EV\u09C3\x03" +
		"V\x03V\x05V\u09C8\nV\x03V\x06V\u09CB\nV\rV\x0EV\u09CC\x03V\x03V\x07V\u09D1" +
		"\nV\fV\x0EV\u09D4\vV\x03V\x03V\x03W\x03W\x06W\u09DA\nW\rW\x0EW\u09DB\x03" +
		"W\x03W\x06W\u09E0\nW\rW\x0EW\u09E1\x05W\u09E4\nW\x03W\x03W\x06W\u09E8" +
		"\nW\rW\x0EW\u09E9\x05W\u09EC\nW\x03W\x03W\x03W\x03W\x06W\u09F2\nW\rW\x0E" +
		"W\u09F3\x03W\x03W\x06W\u09F8\nW\rW\x0EW\u09F9\x03W\x03W\x06W\u09FE\nW" +
		"\rW\x0EW\u09FF\x05W\u0A02\nW\x03W\x03W\x03W\x03W\x06W\u0A08\nW\rW\x0E" +
		"W\u0A09\x03W\x03W\x06W\u0A0E\nW\rW\x0EW\u0A0F\x05W\u0A12\nW\x03W\x03W" +
		"\x03W\x03W\x06W\u0A18\nW\rW\x0EW\u0A19\x03W\x03W\x06W\u0A1E\nW\rW\x0E" +
		"W\u0A1F\x05W\u0A22\nW\x05W\u0A24\nW\x03W\x03W\x03W\x06W\u0A29\nW\rW\x0E" +
		"W\u0A2A\x03W\x03W\x06W\u0A2F\nW\rW\x0EW\u0A30\x05W\u0A33\nW\x03W\x03W" +
		"\x03W\x03W\x06W\u0A39\nW\rW\x0EW\u0A3A\x03W\x03W\x06W\u0A3F\nW\rW\x0E" +
		"W\u0A40\x05W\u0A43\nW\x03W\x03W\x06W\u0A47\nW\rW\x0EW\u0A48\x05W\u0A4B" +
		"\nW\x03W\x03W\x03W\x03W\x06W\u0A51\nW\rW\x0EW\u0A52\x03W\x03W\x05W\u0A57" +
		"\nW\x03W\x03W\x06W\u0A5B\nW\rW\x0EW\u0A5C\x03W\x03W\x05W\u0A61\nW\x03" +
		"W\x03W\x03W\x03W\x06W\u0A67\nW\rW\x0EW\u0A68\x03W\x03W\x06W\u0A6D\nW\r" +
		"W\x0EW\u0A6E\x05W\u0A71\nW\x03W\x03W\x03W\x03W\x06W\u0A77\nW\rW\x0EW\u0A78" +
		"\x03W\x03W\x06W\u0A7D\nW\rW\x0EW\u0A7E\x05W\u0A81\nW\x03W\x03W\x03W\x05" +
		"W\u0A86\nW\x03X\x03X\x06X\u0A8A\nX\rX\x0EX\u0A8B\x03X\x03X\x05X\u0A90" +
		"\nX\x03X\x06X\u0A93\nX\rX\x0EX\u0A94\x05X\u0A97\nX\x03X\x03X\x06X\u0A9B" +
		"\nX\rX\x0EX\u0A9C\x03X\x03X\x06X\u0AA1\nX\rX\x0EX\u0AA2\x03X\x03X\x05" +
		"X\u0AA7\nX\x03Y\x03Y\x06Y\u0AAB\nY\rY\x0EY\u0AAC\x03Y\x03Y\x06Y\u0AB1" +
		"\nY\rY\x0EY\u0AB2\x03Y\x03Y\x07Y\u0AB7\nY\fY\x0EY\u0ABA\vY\x03Y\x06Y\u0ABD" +
		"\nY\rY\x0EY\u0ABE\x03Y\x03Y\x05Y\u0AC3\nY\x03Y\x06Y\u0AC6\nY\rY\x0EY\u0AC7" +
		"\x03Y\x03Y\x07Y\u0ACC\nY\fY\x0EY\u0ACF\vY\x06Y\u0AD1\nY\rY\x0EY\u0AD2" +
		"\x03Y\x07Y\u0AD6\nY\fY\x0EY\u0AD9\vY\x03Y\x03Y\x06Y\u0ADD\nY\rY\x0EY\u0ADE" +
		"\x03Y\x03Y\x06Y\u0AE3\nY\rY\x0EY\u0AE4\x05Y\u0AE7\nY\x03Y\x03Y\x05Y\u0AEB" +
		"\nY\x03Z\x03Z\x03[\x03[\x03\\\x03\\\x03]\x03]\x03^\x03^\x03_\x03_\x06" +
		"_\u0AF9\n_\r_\x0E_\u0AFA\x03_\x03_\x03_\x03_\x03_\x06_\u0B02\n_\r_\x0E" +
		"_\u0B03\x03_\x03_\x03_\x03_\x03_\x06_\u0B0B\n_\r_\x0E_\u0B0C\x03_\x03" +
		"_\x03_\x05_\u0B12\n_\x03_\x06_\u0B15\n_\r_\x0E_\u0B16\x03_\x03_\x03_\x03" +
		"_\x03_\x03_\x06_\u0B1F\n_\r_\x0E_\u0B20\x03_\x03_\x03_\x05_\u0B26\n_\x03" +
		"_\x06_\u0B29\n_\r_\x0E_\u0B2A\x03_\x03_\x03_\x03_\x06_\u0B31\n_\r_\x0E" +
		"_\u0B32\x03_\x03_\x03_\x03_\x03_\x06_\u0B3A\n_\r_\x0E_\u0B3B\x03_\x03" +
		"_\x03_\x05_\u0B41\n_\x03`\x03`\x03a\x03a\x03a\x06a\u0B48\na\ra\x0Ea\u0B49" +
		"\x03a\x03a\x03a\x03a\x06a\u0B50\na\ra\x0Ea\u0B51\x03a\x03a\x05a\u0B56" +
		"\na\x03b\x03b\x06b\u0B5A\nb\rb\x0Eb\u0B5B\x03b\x03b\x06b\u0B60\nb\rb\x0E" +
		"b\u0B61\x05b\u0B64\nb\x03b\x03b\x06b\u0B68\nb\rb\x0Eb\u0B69\x03b\x03b" +
		"\x05b\u0B6E\nb\x03b\x03b\x06b\u0B72\nb\rb\x0Eb\u0B73\x03b\x03b\x05b\u0B78" +
		"\nb\x03c\x03c\x03d\x03d\x06d\u0B7E\nd\rd\x0Ed\u0B7F\x05d\u0B82\nd\x03" +
		"d\x03d\x03d\x06d\u0B87\nd\rd\x0Ed\u0B88\x03d\x03d\x03d\x03d\x06d\u0B8F" +
		"\nd\rd\x0Ed\u0B90\x03d\x03d\x05d\u0B95\nd\x03d\x03d\x06d\u0B99\nd\rd\x0E" +
		"d\u0B9A\x03d\x03d\x05d\u0B9F\nd\x05d\u0BA1\nd\x03d\x06d\u0BA4\nd\rd\x0E" +
		"d\u0BA5\x03d\x03d\x07d\u0BAA\nd\fd\x0Ed\u0BAD\vd\x03d\x07d\u0BB0\nd\f" +
		"d\x0Ed\u0BB3\vd\x03d\x03d\x07d\u0BB7\nd\fd\x0Ed\u0BBA\vd\x03d\x07d\u0BBD" +
		"\nd\fd\x0Ed\u0BC0\vd\x05d\u0BC2\nd\x03d\x03d\x06d\u0BC6\nd\rd\x0Ed\u0BC7" +
		"\x03d\x03d\x06d\u0BCC\nd\rd\x0Ed\u0BCD\x03d\x03d\x06d\u0BD2\nd\rd\x0E" +
		"d\u0BD3\x05d\u0BD6\nd\x03d\x03d\x06d\u0BDA\nd\rd\x0Ed\u0BDB\x03d\x03d" +
		"\x06d\u0BE0\nd\rd\x0Ed\u0BE1\x05d\u0BE4\nd\x05d\u0BE6\nd\x03d\x03d\x06" +
		"d\u0BEA\nd\rd\x0Ed\u0BEB\x03d\x03d\x05d\u0BF0\nd\x03d\x06d\u0BF3\nd\r" +
		"d\x0Ed\u0BF4\x03d\x03d\x06d\u0BF9\nd\rd\x0Ed\u0BFA\x03d\x03d\x05d\u0BFF" +
		"\nd\x03d\x06d\u0C02\nd\rd\x0Ed\u0C03\x03d\x03d\x06d\u0C08\nd\rd\x0Ed\u0C09" +
		"\x03d\x03d\x06d\u0C0E\nd\rd\x0Ed\u0C0F\x03d\x03d\x05d\u0C14\nd\x03d\x06" +
		"d\u0C17\nd\rd\x0Ed\u0C18\x03d\x03d\x06d\u0C1D\nd\rd\x0Ed\u0C1E\x03d\x03" +
		"d\x06d\u0C23\nd\rd\x0Ed\u0C24\x03d\x03d\x05d\u0C29\nd\x03d\x06d\u0C2C" +
		"\nd\rd\x0Ed\u0C2D\x03d\x03d\x06d\u0C32\nd\rd\x0Ed\u0C33\x03d\x03d\x05" +
		"d\u0C38\nd\x05d\u0C3A\nd\x03e\x03e\x03f\x03f\x03g\x03g\x03h\x03h\x03i" +
		"\x03i\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u0C4C\nl\rl\x0El\u0C4D\x03l\x03" +
		"l\x05l\u0C52\nl\x03l\x06l\u0C55\nl\rl\x0El\u0C56\x05l\u0C59\nl\x03l\x03" +
		"l\x03m\x03m\x03m\x06m\u0C60\nm\rm\x0Em\u0C61\x03m\x03m\x05m\u0C66\nm\x03" +
		"m\x03m\x06m\u0C6A\nm\rm\x0Em\u0C6B\x03m\x03m\x05m\u0C70\nm\x03m\x03m\x06" +
		"m\u0C74\nm\rm\x0Em\u0C75\x03m\x03m\x05m\u0C7A\nm\x03m\x03m\x06m\u0C7E" +
		"\nm\rm\x0Em\u0C7F\x03m\x03m\x05m\u0C84\nm\x03m\x03m\x03m\x03m\x03m\x03" +
		"m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03" +
		"m\x03m\x03m\x05m\u0C9C\nm\x03n\x03n\x06n\u0CA0\nn\rn\x0En\u0CA1\x03n\x03" +
		"n\x06n\u0CA6\nn\rn\x0En\u0CA7\x05n\u0CAA\nn\x03n\x03n\x03o\x06o\u0CAF" +
		"\no\ro\x0Eo\u0CB0\x03p\x03p\x03q\x03q\x03r\x03r\x03s\x03s\x05s\u0CBB\n" +
		"s\x03t\x03t\x06t\u0CBF\nt\rt\x0Et\u0CC0\x03t\x03t\x05t\u0CC5\nt\x03t\x03" +
		"t\x06t\u0CC9\nt\rt\x0Et\u0CCA\x03t\x03t\x05t\u0CCF\nt\x05t\u0CD1\nt\x03" +
		"t\x06t\u0CD4\nt\rt\x0Et\u0CD5\x03t\x03t\x07t\u0CDA\nt\ft\x0Et\u0CDD\v" +
		"t\x03t\x07t\u0CE0\nt\ft\x0Et\u0CE3\vt\x03u\x03u\x03v\x03v\x06v\u0CE9\n" +
		"v\rv\x0Ev\u0CEA\x03v\x03v\x06v\u0CEF\nv\rv\x0Ev\u0CF0\x05v\u0CF3\nv\x03" +
		"v\x03v\x06v\u0CF7\nv\rv\x0Ev\u0CF8\x03v\x03v\x05v\u0CFD\nv\x03v\x06v\u0D00" +
		"\nv\rv\x0Ev\u0D01\x03v\x03v\x06v\u0D06\nv\rv\x0Ev\u0D07\x05v\u0D0A\nv" +
		"\x03v\x03v\x06v\u0D0E\nv\rv\x0Ev\u0D0F\x03v\x03v\x06v\u0D14\nv\rv\x0E" +
		"v\u0D15\x05v\u0D18\nv\x03v\x03v\x05v\u0D1C\nv\x03v\x06v\u0D1F\nv\rv\x0E" +
		"v\u0D20\x03v\x03v\x06v\u0D25\nv\rv\x0Ev\u0D26\x05v\u0D29\nv\x03v\x03v" +
		"\x06v\u0D2D\nv\rv\x0Ev\u0D2E\x05v\u0D31\nv\x03v\x03v\x06v\u0D35\nv\rv" +
		"\x0Ev\u0D36\x03v\x03v\x05v\u0D3B\nv\x03v\x06v\u0D3E\nv\rv\x0Ev\u0D3F\x03" +
		"v\x03v\x06v\u0D44\nv\rv\x0Ev\u0D45\x05v\u0D48\nv\x03v\x03v\x06v\u0D4C" +
		"\nv\rv\x0Ev\u0D4D\x05v\u0D50\nv\x03v\x03v\x06v\u0D54\nv\rv\x0Ev\u0D55" +
		"\x03v\x03v\x05v\u0D5A\nv\x03w\x03w\x05w\u0D5E\nw\x03x\x03x\x05x\u0D62" +
		"\nx\x03y\x03y\x05y\u0D66\ny\x03z\x03z\x05z\u0D6A\nz\x03{\x03{\x06{\u0D6E" +
		"\n{\r{\x0E{\u0D6F\x03{\x03{\x06{\u0D74\n{\r{\x0E{\u0D75\x03{\x03{\x05" +
		"{\u0D7A\n{\x03{\x03{\x06{\u0D7E\n{\r{\x0E{\u0D7F\x03{\x03{\x05{\u0D84" +
		"\n{\x05{\u0D86\n{\x03{\x03{\x06{\u0D8A\n{\r{\x0E{\u0D8B\x03{\x03{\x07" +
		"{\u0D90\n{\f{\x0E{\u0D93\v{\x03|\x03|\x03}\x03}\x06}\u0D99\n}\r}\x0E}" +
		"\u0D9A\x03}\x03}\x06}\u0D9F\n}\r}\x0E}\u0DA0\x03}\x03}\x06}\u0DA5\n}\r" +
		"}\x0E}\u0DA6\x03}\x03}\x06}\u0DAB\n}\r}\x0E}\u0DAC\x05}\u0DAF\n}\x03}" +
		"\x03}\x03~\x03~\x05~\u0DB5\n~\x03\x7F\x03\x7F\x06\x7F\u0DB9\n\x7F\r\x7F" +
		"\x0E\x7F\u0DBA\x03\x7F\x03\x7F\x06\x7F\u0DBF\n\x7F\r\x7F\x0E\x7F\u0DC0" +
		"\x03\x7F\x03\x7F\x05\x7F\u0DC5\n\x7F\x03\x7F\x03\x7F\x06\x7F\u0DC9\n\x7F" +
		"\r\x7F\x0E\x7F\u0DCA\x03\x7F\x03\x7F\x05\x7F\u0DCF\n\x7F\x05\x7F\u0DD1" +
		"\n\x7F\x03\x7F\x06\x7F\u0DD4\n\x7F\r\x7F\x0E\x7F\u0DD5\x03\x7F\x03\x7F" +
		"\x03\x80\x03\x80\x06\x80\u0DDC\n\x80\r\x80\x0E\x80\u0DDD\x03\x80\x03\x80" +
		"\x03\x81\x03\x81\x06\x81\u0DE4\n\x81\r\x81\x0E\x81\u0DE5\x05\x81\u0DE8" +
		"\n\x81\x03\x81\x03\x81\x06\x81\u0DEC\n\x81\r\x81\x0E\x81\u0DED\x03\x81" +
		"\x03\x81\x06\x81\u0DF2\n\x81\r\x81\x0E\x81\u0DF3\x05\x81\u0DF6\n\x81\x03" +
		"\x81\x03\x81\x07\x81\u0DFA\n\x81\f\x81\x0E\x81\u0DFD\v\x81\x03\x81\x03" +
		"\x81\x07\x81\u0E01\n\x81\f\x81\x0E\x81\u0E04\v\x81\x05\x81\u0E06\n\x81" +
		"\x03\x81\x03\x81\x06\x81\u0E0A\n\x81\r\x81\x0E\x81\u0E0B\x05\x81\u0E0E" +
		"\n\x81\x03\x81\x03\x81\x06\x81\u0E12\n\x81\r\x81\x0E\x81\u0E13\x03\x81" +
		"\x03\x81\x06\x81\u0E18\n\x81\r\x81\x0E\x81\u0E19\x05\x81\u0E1C\n\x81\x03" +
		"\x81\x03\x81\x07\x81\u0E20\n\x81\f\x81\x0E\x81\u0E23\v\x81\x05\x81\u0E25" +
		"\n\x81\x03\x81\x03\x81\x06\x81\u0E29\n\x81\r\x81\x0E\x81\u0E2A\x05\x81" +
		"\u0E2D\n\x81\x03\x81\x05\x81\u0E30\n\x81\x03\x81\x03\x81\x06\x81\u0E34" +
		"\n\x81\r\x81\x0E\x81\u0E35\x03\x81\x03\x81\x05\x81\u0E3A\n\x81\x03\x81" +
		"\x07\x81\u0E3D\n\x81\f\x81\x0E\x81\u0E40\v\x81\x03\x81\x03\x81\x07\x81" +
		"\u0E44\n\x81\f\x81\x0E\x81\u0E47\v\x81\x05\x81\u0E49\n\x81\x03\x81\x03" +
		"\x81\x06\x81\u0E4D\n\x81\r\x81\x0E\x81\u0E4E\x03\x81\x03\x81\x06\x81\u0E53" +
		"\n\x81\r\x81\x0E\x81\u0E54\x05\x81\u0E57\n\x81\x03\x81\x03\x81\x05\x81" +
		"\u0E5B\n\x81\x05\x81\u0E5D\n\x81\x03\x82\x03\x82\x03\x83\x03\x83\x03\x84" +
		"\x03\x84\x03\x85\x03\x85\x06\x85\u0E67\n\x85\r\x85\x0E\x85\u0E68\x03\x85" +
		"\x03\x85\x05\x85\u0E6D\n\x85\x05\x85\u0E6F\n\x85\x03\x85\x06\x85\u0E72" +
		"\n\x85\r\x85\x0E\x85\u0E73\x03\x85\x03\x85\x07\x85\u0E78\n\x85\f\x85\x0E" +
		"\x85\u0E7B\v\x85\x03\x85\x03\x85\x03\x86\x03\x86\x03\x87\x03\x87\x06\x87" +
		"\u0E83\n\x87\r\x87\x0E\x87\u0E84\x03\x87\x03\x87\x03\x87\x03\x87\x06\x87" +
		"\u0E8B\n\x87\r\x87\x0E\x87\u0E8C\x03\x87\x03\x87\x06\x87\u0E91\n\x87\r" +
		"\x87\x0E\x87\u0E92\x05\x87\u0E95\n\x87\x03\x87\x03\x87\x03\x87\x03\x87" +
		"\x06\x87\u0E9B\n\x87\r\x87\x0E\x87\u0E9C\x03\x87\x03\x87\x06\x87\u0EA1" +
		"\n\x87\r\x87\x0E\x87\u0EA2\x05\x87\u0EA5\n\x87\x03\x87\x03\x87\x03\x87" +
		"\x03\x87\x03\x87\x03\x87\x03\x87\x06\x87\u0EAE\n\x87\r\x87\x0E\x87\u0EAF" +
		"\x03\x87\x03\x87\x06\x87\u0EB4\n\x87\r\x87\x0E\x87\u0EB5\x05\x87\u0EB8" +
		"\n\x87\x05\x87\u0EBA\n\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x06\x87\u0EC3\n\x87\r\x87\x0E\x87\u0EC4\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x06\x87\u0ECF\n\x87\r\x87" +
		"\x0E\x87\u0ED0\x03\x87\x03\x87\x06\x87\u0ED5\n\x87\r\x87\x0E\x87\u0ED6" +
		"\x05\x87\u0ED9\n\x87\x03\x87\x03\x87\x06\x87\u0EDD\n\x87\r\x87\x0E\x87" +
		"\u0EDE\x05\x87\u0EE1\n\x87\x03\x87\x03\x87\x06\x87\u0EE5\n\x87\r\x87\x0E" +
		"\x87\u0EE6\x05\x87\u0EE9\n\x87\x03\x87\x03\x87\x03\x87\x03\x87\x06\x87" +
		"\u0EEF\n\x87\r\x87\x0E\x87\u0EF0\x03\x87\x03\x87\x06\x87\u0EF5\n\x87\r" +
		"\x87\x0E\x87\u0EF6\x05\x87\u0EF9\n\x87\x03\x87\x03\x87\x06\x87\u0EFD\n" +
		"\x87\r\x87\x0E\x87\u0EFE\x05\x87\u0F01\n\x87\x03\x87\x03\x87\x06\x87\u0F05" +
		"\n\x87\r\x87\x0E\x87\u0F06\x05\x87\u0F09\n\x87\x03\x87\x03\x87\x03\x87" +
		"\x03\x87\x06\x87\u0F0F\n\x87\r\x87\x0E\x87\u0F10\x03\x87\x03\x87\x06\x87" +
		"\u0F15\n\x87\r\x87\x0E\x87\u0F16\x05\x87\u0F19\n\x87\x03\x87\x03\x87\x03" +
		"\x87\x03\x87\x06\x87\u0F1F\n\x87\r\x87\x0E\x87\u0F20\x03\x87\x03\x87\x06" +
		"\x87\u0F25\n\x87\r\x87\x0E\x87\u0F26\x05\x87\u0F29\n\x87\x03\x87\x03\x87" +
		"\x03\x87\x03\x87\x06\x87\u0F2F\n\x87\r\x87\x0E\x87\u0F30\x03\x87\x03\x87" +
		"\x05\x87\u0F35\n\x87\x03\x87\x03\x87\x06\x87\u0F39\n\x87\r\x87\x0E\x87" +
		"\u0F3A\x03\x87\x03\x87\x03\x87\x06\x87\u0F40\n\x87\r\x87\x0E\x87\u0F41" +
		"\x03\x87\x03\x87\x05\x87\u0F46\n\x87\x03\x87\x05\x87\u0F49\n\x87\x05\x87" +
		"\u0F4B\n\x87\x03\x88\x03\x88\x06\x88\u0F4F\n\x88\r\x88\x0E\x88\u0F50\x03" +
		"\x88\x03\x88\x03\x89\x03\x89\x06\x89\u0F57\n\x89\r\x89\x0E\x89\u0F58\x03" +
		"\x89\x03\x89\x05\x89\u0F5D\n\x89\x03\x8A\x03\x8A\x06\x8A\u0F61\n\x8A\r" +
		"\x8A\x0E\x8A\u0F62\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x05" +
		"\x8C\u0F6B\n\x8C\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x06\x8E\u0F71\n\x8E\r" +
		"\x8E\x0E\x8E\u0F72\x03\x8E\x03\x8E\x07\x8E\u0F77\n\x8E\f\x8E\x0E\x8E\u0F7A" +
		"\v\x8E\x03\x8E\x03\x8E\x07\x8E\u0F7E\n\x8E\f\x8E\x0E\x8E\u0F81\v\x8E\x03" +
		"\x8E\x07\x8E\u0F84\n\x8E\f\x8E\x0E\x8E\u0F87\v\x8E\x03\x8F\x03\x8F\x03" +
		"\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x05\x8F\u0F91\n\x8F\x03\x90" +
		"\x03\x90\x07\x90\u0F95\n\x90\f\x90\x0E\x90\u0F98\v\x90\x03\x90\x03\x90" +
		"\x07\x90\u0F9C\n\x90\f\x90\x0E\x90\u0F9F\v\x90\x03\x90\x03\x90\x07\x90" +
		"\u0FA3\n\x90\f\x90\x0E\x90\u0FA6\v\x90\x03\x90\x05\x90\u0FA9\n\x90\x03" +
		"\x90\x07\x90\u0FAC\n\x90\f\x90\x0E\x90\u0FAF\v\x90\x03\x90\x05\x90\u0FB2" +
		"\n\x90\x03\x90\x07\x90\u0FB5\n\x90\f\x90\x0E\x90\u0FB8\v\x90\x03\x90\x03" +
		"\x90\x03\x91\x03\x91\x03\x92\x03\x92\x06\x92\u0FC0\n\x92\r\x92\x0E\x92" +
		"\u0FC1\x05\x92\u0FC4\n\x92\x03\x92\x03\x92\x06\x92\u0FC8\n\x92\r\x92\x0E" +
		"\x92\u0FC9\x03\x92\x03\x92\x05\x92\u0FCE\n\x92\x03\x93\x03\x93\x06\x93" +
		"\u0FD2\n\x93\r\x93\x0E\x93\u0FD3\x05\x93\u0FD6\n\x93\x03\x93\x03\x93\x06" +
		"\x93\u0FDA\n\x93\r\x93\x0E\x93\u0FDB\x03\x93\x03\x93\x03\x94\x03\x94\x03" +
		"\x95\x03\x95\x07\x95\u0FE4\n\x95\f\x95\x0E\x95\u0FE7\v\x95\x03\x95\x03" +
		"\x95\x05\x95\u0FEB\n\x95\x03\x96\x03\x96\x07\x96\u0FEF\n\x96\f\x96\x0E" +
		"\x96\u0FF2\v\x96\x03\x96\x03\x96\x07\x96\u0FF6\n\x96\f\x96\x0E\x96\u0FF9" +
		"\v\x96\x03\x96\x03\x96\x07\x96\u0FFD\n\x96\f\x96\x0E\x96\u1000\v\x96\x03" +
		"\x97\x03\x97\x07\x97\u1004\n\x97\f\x97\x0E\x97\u1007\v\x97\x03\x97\x03" +
		"\x97\x07\x97\u100B\n\x97\f\x97\x0E\x97\u100E\v\x97\x03\x97\x03\x97\x07" +
		"\x97\u1012\n\x97\f\x97\x0E\x97\u1015\v\x97\x03\x98\x03\x98\x07\x98\u1019" +
		"\n\x98\f\x98\x0E\x98\u101C\v\x98\x03\x98\x03\x98\x07\x98\u1020\n\x98\f" +
		"\x98\x0E\x98\u1023\v\x98\x03\x98\x03\x98\x07\x98\u1027\n\x98\f\x98\x0E" +
		"\x98\u102A\v\x98\x03\x99\x03\x99\x07\x99\u102E\n\x99\f\x99\x0E\x99\u1031" +
		"\v\x99\x03\x99\x03\x99\x07\x99\u1035\n\x99\f\x99\x0E\x99\u1038\v\x99\x03" +
		"\x99\x03\x99\x07\x99\u103C\n\x99\f\x99\x0E\x99\u103F\v\x99\x03\x9A\x03" +
		"\x9A\x07\x9A\u1043\n\x9A\f\x9A\x0E\x9A\u1046\v\x9A\x03\x9A\x03\x9A\x07" +
		"\x9A\u104A\n\x9A\f\x9A\x0E\x9A\u104D\v\x9A\x03\x9A\x03\x9A\x07\x9A\u1051" +
		"\n\x9A\f\x9A\x0E\x9A\u1054\v\x9A\x03\x9B\x03\x9B\x07\x9B\u1058\n\x9B\f" +
		"\x9B\x0E\x9B\u105B\v\x9B\x03\x9B\x03\x9B\x07\x9B\u105F\n\x9B\f\x9B\x0E" +
		"\x9B\u1062\v\x9B\x03\x9B\x05\x9B\u1065\n\x9B\x03\x9B\x07\x9B\u1068\n\x9B" +
		"\f\x9B\x0E\x9B\u106B\v\x9B\x03\x9B\x05\x9B\u106E\n\x9B\x03\x9C\x03\x9C" +
		"\x06\x9C\u1072\n\x9C\r\x9C\x0E\x9C\u1073\x03\x9C\x03\x9C\x06\x9C\u1078" +
		"\n\x9C\r\x9C\x0E\x9C\u1079\x05\x9C\u107C\n\x9C\x03\x9C\x03\x9C\x07\x9C" +
		"\u1080\n\x9C\f\x9C\x0E\x9C\u1083\v\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D" +
		"\x06\x9D\u1089\n\x9D\r\x9D\x0E\x9D\u108A\x03\x9D\x03\x9D\x07\x9D\u108F" +
		"\n\x9D\f\x9D\x0E\x9D\u1092\v\x9D\x03\x9D\x03\x9D\x07\x9D\u1096\n\x9D\f" +
		"\x9D\x0E\x9D\u1099\v\x9D\x03\x9D\x05\x9D\u109C\n\x9D\x03\x9D\x05\x9D\u109F" +
		"\n\x9D\x03\x9E\x03\x9E\x06\x9E\u10A3\n\x9E\r\x9E\x0E\x9E\u10A4\x03\x9E" +
		"\x03\x9E\x07\x9E\u10A9\n\x9E\f\x9E\x0E\x9E\u10AC\v\x9E\x03\x9E\x03\x9E" +
		"\x07\x9E\u10B0\n\x9E\f\x9E\x0E\x9E\u10B3\v\x9E\x03\x9E\x05\x9E\u10B6\n" +
		"\x9E\x03\x9E\x07\x9E\u10B9\n\x9E\f\x9E\x0E\x9E\u10BC\v\x9E\x03\x9E\x05" +
		"\x9E\u10BF\n\x9E\x03\x9E\x07\x9E\u10C2\n\x9E\f\x9E\x0E\x9E\u10C5\v\x9E" +
		"\x03\x9E\x05\x9E\u10C8\n\x9E\x03\x9E\x07\x9E\u10CB\n\x9E\f\x9E\x0E\x9E" +
		"\u10CE\v\x9E\x03\x9F\x03\x9F\x06\x9F\u10D2\n\x9F\r\x9F\x0E\x9F\u10D3\x03" +
		"\x9F\x03\x9F\x07\x9F\u10D8\n\x9F\f\x9F\x0E\x9F\u10DB\v\x9F\x03\x9F\x03" +
		"\x9F\x07\x9F\u10DF\n\x9F\f\x9F\x0E\x9F\u10E2\v\x9F\x03\x9F\x05\x9F\u10E5" +
		"\n\x9F\x03\x9F\x05\x9F\u10E8\n\x9F\x03\xA0\x03\xA0\x07\xA0\u10EC\n\xA0" +
		"\f\xA0\x0E\xA0\u10EF\v\xA0\x03\xA0\x03\xA0\x07\xA0\u10F3\n\xA0\f\xA0\x0E" +
		"\xA0\u10F6\v\xA0\x03\xA0\x03\xA0\x06\xA0\u10FA\n\xA0\r\xA0\x0E\xA0\u10FB" +
		"\x03\xA0\x03\xA0\x05\xA0\u1100\n\xA0\x03\xA0\x07\xA0\u1103\n\xA0\f\xA0" +
		"\x0E\xA0\u1106\v\xA0\x03\xA0\x03\xA0\x05\xA0\u110A\n\xA0\x03\xA1\x03\xA1" +
		"\x03\xA2\x03\xA2\x06\xA2\u1110\n\xA2\r\xA2\x0E\xA2\u1111\x05\xA2\u1114" +
		"\n\xA2\x03\xA2\x03\xA2\x06\xA2\u1118\n\xA2\r\xA2\x0E\xA2\u1119\x03\xA2" +
		"\x03\xA2\x03\xA3\x03\xA3\x07\xA3\u1120\n\xA3\f\xA3\x0E\xA3\u1123\v\xA3" +
		"\x03\xA3\x03\xA3\x07\xA3\u1127\n\xA3\f\xA3\x0E\xA3\u112A\v\xA3\x03\xA3" +
		"\x03\xA3\x06\xA3\u112E\n\xA3\r\xA3\x0E\xA3\u112F\x03\xA3\x03\xA3\x05\xA3" +
		"\u1134\n\xA3\x03\xA3\x06\xA3\u1137\n\xA3\r\xA3\x0E\xA3\u1138\x03\xA3\x03" +
		"\xA3";
	private static readonly _serializedATNSegment2: string =
		"\x05\xA3\u113D\n\xA3\x03\xA3\x06\xA3\u1140\n\xA3\r\xA3\x0E\xA3\u1141\x03" +
		"\xA3\x03\xA3\x05\xA3\u1146\n\xA3\x03\xA3\x07\xA3\u1149\n\xA3\f\xA3\x0E" +
		"\xA3\u114C\v\xA3\x03\xA3\x03\xA3\x05\xA3\u1150\n\xA3\x03\xA4\x03\xA4\x06" +
		"\xA4\u1154\n\xA4\r\xA4\x0E\xA4\u1155\x03\xA4\x03\xA4\x05\xA4\u115A\n\xA4" +
		"\x03\xA4\x06\xA4\u115D\n\xA4\r\xA4\x0E\xA4\u115E\x03\xA4\x03\xA4\x06\xA4" +
		"\u1163\n\xA4\r\xA4\x0E\xA4\u1164\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA6" +
		"\x03\xA6\x03\xA7\x03\xA7\x06\xA7\u116F\n\xA7\r\xA7\x0E\xA7\u1170\x05\xA7" +
		"\u1173\n\xA7\x03\xA7\x03\xA7\x06\xA7\u1177\n\xA7\r\xA7\x0E\xA7\u1178\x05" +
		"\xA7\u117B\n\xA7\x03\xA7\x03\xA7\x06\xA7\u117F\n\xA7\r\xA7\x0E\xA7\u1180" +
		"\x03\xA7\x03\xA7\x05\xA7\u1185\n\xA7\x03\xA7\x06\xA7\u1188\n\xA7\r\xA7" +
		"\x0E\xA7\u1189\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA9\x03\xA9\x06\xA9" +
		"\u1192\n\xA9\r\xA9\x0E\xA9\u1193\x03\xA9\x03\xA9\x05\xA9\u1198\n\xA9\x03" +
		"\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x07\xAB\u11A0\n\xAB\f\xAB" +
		"\x0E\xAB\u11A3\v\xAB\x03\xAB\x03\xAB\x07\xAB\u11A7\n\xAB\f\xAB\x0E\xAB" +
		"\u11AA\v\xAB\x03\xAB\x03\xAB\x07\xAB\u11AE\n\xAB\f\xAB\x0E\xAB\u11B1\v" +
		"\xAB\x06\xAB\u11B3\n\xAB\r\xAB\x0E\xAB\u11B4\x03\xAB\x03\xAB\x05\xAB\u11B9" +
		"\n\xAB\x03\xAC\x03\xAC\x06\xAC\u11BD\n\xAC\r\xAC\x0E\xAC\u11BE\x03\xAC" +
		"\x03\xAC\x06\xAC\u11C3\n\xAC\r\xAC\x0E\xAC\u11C4\x05\xAC\u11C7\n\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x06\xAC\u11CD\n\xAC\r\xAC\x0E\xAC\u11CE\x03" +
		"\xAC\x03\xAC\x06\xAC\u11D3\n\xAC\r\xAC\x0E\xAC\u11D4\x05\xAC\u11D7\n\xAC" +
		"\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x06\xAC\u11DD\n\xAC\r\xAC\x0E\xAC\u11DE" +
		"\x03\xAC\x03\xAC\x06\xAC\u11E3\n\xAC\r\xAC\x0E\xAC\u11E4\x05\xAC\u11E7" +
		"\n\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC" +
		"\x03\xAC\x06\xAC\u11F2\n\xAC\r\xAC\x0E\xAC\u11F3\x03\xAC\x03\xAC\x06\xAC" +
		"\u11F8\n\xAC\r\xAC\x0E\xAC\u11F9\x05\xAC\u11FC\n\xAC\x03\xAC\x03\xAC\x03" +
		"\xAC\x03\xAC\x06\xAC\u1202\n\xAC\r\xAC\x0E\xAC\u1203\x03\xAC\x03\xAC\x06" +
		"\xAC\u1208\n\xAC\r\xAC\x0E\xAC\u1209\x05\xAC\u120C\n\xAC\x03\xAC\x03\xAC" +
		"\x03\xAC\x03\xAC\x06\xAC\u1212\n\xAC\r\xAC\x0E\xAC\u1213\x03\xAC\x03\xAC" +
		"\x06\xAC\u1218\n\xAC\r\xAC\x0E\xAC\u1219\x03\xAC\x03\xAC\x06\xAC\u121E" +
		"\n\xAC\r\xAC\x0E\xAC\u121F\x05\xAC\u1222\n\xAC\x03\xAC\x03\xAC\x05\xAC" +
		"\u1226\n\xAC\x03\xAD\x03\xAD\x06\xAD\u122A\n\xAD\r\xAD\x0E\xAD\u122B\x03" +
		"\xAD\x03\xAD\x06\xAD\u1230\n\xAD\r\xAD\x0E\xAD\u1231\x03\xAD\x03\xAD\x07" +
		"\xAD\u1236\n\xAD\f\xAD\x0E\xAD\u1239\v\xAD\x03\xAE\x03\xAE\x06\xAE\u123D" +
		"\n\xAE\r\xAE\x0E\xAE\u123E\x03\xAE\x03\xAE\x06\xAE\u1243\n\xAE\r\xAE\x0E" +
		"\xAE\u1244\x05\xAE\u1247\n\xAE\x03\xAE\x03\xAE\x06\xAE\u124B\n\xAE\r\xAE" +
		"\x0E\xAE\u124C\x05\xAE\u124F\n\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03" +
		"\xAF\x06\xAF\u1256\n\xAF\r\xAF\x0E\xAF\u1257\x05\xAF\u125A\n\xAF\x03\xAF" +
		"\x03\xAF\x06\xAF\u125E\n\xAF\r\xAF\x0E\xAF\u125F\x03\xAF\x03\xAF\x06\xAF" +
		"\u1264\n\xAF\r\xAF\x0E\xAF\u1265\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u126B" +
		"\n\xAF\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x06\xB2\u1273\n" +
		"\xB2\r\xB2\x0E\xB2\u1274\x03\xB2\x03\xB2\x06\xB2\u1279\n\xB2\r\xB2\x0E" +
		"\xB2\u127A\x03\xB2\x03\xB2\x06\xB2\u127F\n\xB2\r\xB2\x0E\xB2\u1280\x05" +
		"\xB2\u1283\n\xB2\x03\xB2\x03\xB2\x07\xB2\u1287\n\xB2\f\xB2\x0E\xB2\u128A" +
		"\v\xB2\x06\xB2\u128C\n\xB2\r\xB2\x0E\xB2\u128D\x03\xB3\x03\xB3\x03\xB4" +
		"\x03\xB4\x06\xB4\u1294\n\xB4\r\xB4\x0E\xB4\u1295\x03\xB4\x03\xB4\x06\xB4" +
		"\u129A\n\xB4\r\xB4\x0E\xB4\u129B\x03\xB4\x03\xB4\x05\xB4\u12A0\n\xB4\x03" +
		"\xB5\x03\xB5\x06\xB5\u12A4\n\xB5\r\xB5\x0E\xB5\u12A5\x03\xB5\x03\xB5\x06" +
		"\xB5\u12AA\n\xB5\r\xB5\x0E\xB5\u12AB\x05\xB5\u12AE\n\xB5\x03\xB5\x06\xB5" +
		"\u12B1\n\xB5\r\xB5\x0E\xB5\u12B2\x03\xB6\x06\xB6\u12B6\n\xB6\r\xB6\x0E" +
		"\xB6\u12B7\x03\xB6\x05\xB6\u12BB\n\xB6\x03\xB7\x03\xB7\x06\xB7\u12BF\n" +
		"\xB7\r\xB7\x0E\xB7\u12C0\x06\xB7\u12C3\n\xB7\r\xB7\x0E\xB7\u12C4\x03\xB7" +
		"\x03\xB7\x06\xB7\u12C9\n\xB7\r\xB7\x0E\xB7\u12CA\x05\xB7\u12CD\n\xB7\x03" +
		"\xB7\x03\xB7\x06\xB7\u12D1\n\xB7\r\xB7\x0E\xB7\u12D2\x06\xB7\u12D5\n\xB7" +
		"\r\xB7\x0E\xB7\u12D6\x03\xB8\x03\xB8\x06\xB8\u12DB\n\xB8\r\xB8\x0E\xB8" +
		"\u12DC\x03\xB8\x03\xB8\x07\xB8\u12E1\n\xB8\f\xB8\x0E\xB8\u12E4\v\xB8\x03" +
		"\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x06\xBB\u12EC\n\xBB\r\xBB" +
		"\x0E\xBB\u12ED\x03\xBB\x03\xBB\x06\xBB\u12F2\n\xBB\r\xBB\x0E\xBB\u12F3" +
		"\x03\xBB\x03\xBB\x06\xBB\u12F8\n\xBB\r\xBB\x0E\xBB\u12F9\x05\xBB\u12FC" +
		"\n\xBB\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x07\xBC\u1307\n\xBC\f\xBC\x0E\xBC\u130A\v\xBC\x06\xBC\u130C\n" +
		"\xBC\r\xBC\x0E\xBC\u130D\x05\xBC\u1310\n\xBC\x03\xBD\x03\xBD\x06\xBD\u1314" +
		"\n\xBD\r\xBD\x0E\xBD\u1315\x03\xBD\x03\xBD\x06\xBD\u131A\n\xBD\r\xBD\x0E" +
		"\xBD\u131B\x03\xBD\x03\xBD\x05\xBD\u1320\n\xBD\x03\xBD\x03\xBD\x06\xBD" +
		"\u1324\n\xBD\r\xBD\x0E\xBD\u1325\x03\xBD\x03\xBD\x06\xBD\u132A\n\xBD\r" +
		"\xBD\x0E\xBD\u132B\x03\xBD\x03\xBD\x06\xBD\u1330\n\xBD\r\xBD\x0E\xBD\u1331" +
		"\x05\xBD\u1334\n\xBD\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x03" +
		"\xC1\x03\xC1\x06\xC1\u133E\n\xC1\r\xC1\x0E\xC1\u133F\x03\xC1\x03\xC1\x07" +
		"\xC1\u1344\n\xC1\f\xC1\x0E\xC1\u1347\v\xC1\x03\xC1\x03\xC1\x06\xC1\u134B" +
		"\n\xC1\r\xC1\x0E\xC1\u134C\x05\xC1\u134F\n\xC1\x03\xC1\x03\xC1\x06\xC1" +
		"\u1353\n\xC1\r\xC1\x0E\xC1\u1354\x05\xC1\u1357\n\xC1\x03\xC1\x03\xC1\x06" +
		"\xC1\u135B\n\xC1\r\xC1\x0E\xC1\u135C\x03\xC1\x03\xC1\x05\xC1\u1361\n\xC1" +
		"\x03\xC1\x03\xC1\x06\xC1\u1365\n\xC1\r\xC1\x0E\xC1\u1366\x03\xC1\x03\xC1" +
		"\x05\xC1\u136B\n\xC1\x05\xC1\u136D\n\xC1\x03\xC1\x07\xC1\u1370\n\xC1\f" +
		"\xC1\x0E\xC1\u1373\v\xC1\x03\xC2\x03\xC2\x06\xC2\u1377\n\xC2\r\xC2\x0E" +
		"\xC2\u1378\x03\xC2\x03\xC2\x06\xC2\u137D\n\xC2\r\xC2\x0E\xC2\u137E\x05" +
		"\xC2\u1381\n\xC2\x03\xC2\x03\xC2\x06\xC2\u1385\n\xC2\r\xC2\x0E\xC2\u1386" +
		"\x05\xC2\u1389\n\xC2\x03\xC2\x03\xC2\x03\xC3\x03\xC3\x06\xC3\u138F\n\xC3" +
		"\r\xC3\x0E\xC3\u1390\x03\xC3\x03\xC3\x06\xC3\u1395\n\xC3\r\xC3\x0E\xC3" +
		"\u1396\x05\xC3\u1399\n\xC3\x03\xC3\x03\xC3\x06\xC3\u139D\n\xC3\r\xC3\x0E" +
		"\xC3\u139E\x05\xC3\u13A1\n\xC3\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC5" +
		"\x03\xC5\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC9\x03\xC9" +
		"\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x07\xCC\u13B7\n\xCC\f" +
		"\xCC\x0E\xCC\u13BA\v\xCC\x03\xCC\x03\xCC\x07\xCC\u13BE\n\xCC\f\xCC\x0E" +
		"\xCC\u13C1\v\xCC\x03\xCC\x03\xCC\x07\xCC\u13C5\n\xCC\f\xCC\x0E\xCC\u13C8" +
		"\v\xCC\x07\xCC\u13CA\n\xCC\f\xCC\x0E\xCC\u13CD\v\xCC\x03\xCD\x03\xCD\x06" +
		"\xCD\u13D1\n\xCD\r\xCD\x0E\xCD\u13D2\x03\xCD\x03\xCD\x06\xCD\u13D7\n\xCD" +
		"\r\xCD\x0E\xCD\u13D8\x05\xCD\u13DB\n\xCD\x03\xCD\x03\xCD\x07\xCD\u13DF" +
		"\n\xCD\f\xCD\x0E\xCD\u13E2\v\xCD\x03\xCD\x03\xCD\x07\xCD\u13E6\n\xCD\f" +
		"\xCD\x0E\xCD\u13E9\v\xCD\x03\xCD\x03\xCD\x07\xCD\u13ED\n\xCD\f\xCD\x0E" +
		"\xCD\u13F0\v\xCD\x05\xCD\u13F2\n\xCD\x03\xCD\x03\xCD\x07\xCD\u13F6\n\xCD" +
		"\f\xCD\x0E\xCD\u13F9\v\xCD\x05\xCD\u13FB\n\xCD\x03\xCD\x03\xCD\x07\xCD" +
		"\u13FF\n\xCD\f\xCD\x0E\xCD\u1402\v\xCD\x05\xCD\u1404\n\xCD\x03\xCD\x03" +
		"\xCD\x07\xCD\u1408\n\xCD\f\xCD\x0E\xCD\u140B\v\xCD\x05\xCD\u140D\n\xCD" +
		"\x03\xCD\x03\xCD\x07\xCD\u1411\n\xCD\f\xCD\x0E\xCD\u1414\v\xCD\x05\xCD" +
		"\u1416\n\xCD\x03\xCD\x03\xCD\x07\xCD\u141A\n\xCD\f\xCD\x0E\xCD\u141D\v" +
		"\xCD\x05\xCD\u141F\n\xCD\x03\xCD\x03\xCD\x07\xCD\u1423\n\xCD\f\xCD\x0E" +
		"\xCD\u1426\v\xCD\x05\xCD\u1428\n\xCD\x03\xCD\x03\xCD\x07\xCD\u142C\n\xCD" +
		"\f\xCD\x0E\xCD\u142F\v\xCD\x07\xCD\u1431\n\xCD\f\xCD\x0E\xCD\u1434\v\xCD" +
		"\x03\xCD\x03\xCD\x07\xCD\u1438\n\xCD\f\xCD\x0E\xCD\u143B\v\xCD\x05\xCD" +
		"\u143D\n\xCD\x03\xCD\x03\xCD\x07\xCD\u1441\n\xCD\f\xCD\x0E\xCD\u1444\v" +
		"\xCD\x05\xCD\u1446\n\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x06\xCE\u144C" +
		"\n\xCE\r\xCE\x0E\xCE\u144D\x05\xCE\u1450\n\xCE\x03\xCE\x03\xCE\x06\xCE" +
		"\u1454\n\xCE\r\xCE\x0E\xCE\u1455\x03\xCE\x03\xCE\x06\xCE\u145A\n\xCE\r" +
		"\xCE\x0E\xCE\u145B\x05\xCE\u145E\n\xCE\x03\xCE\x03\xCE\x03\xCF\x03\xCF" +
		"\x03\xD0\x03\xD0\x06\xD0\u1466\n\xD0\r\xD0\x0E\xD0\u1467\x05\xD0\u146A" +
		"\n\xD0\x03\xD0\x03\xD0\x06\xD0\u146E\n\xD0\r\xD0\x0E\xD0\u146F\x03\xD0" +
		"\x03\xD0\x06\xD0\u1474\n\xD0\r\xD0\x0E\xD0\u1475\x05\xD0\u1478\n\xD0\x03" +
		"\xD0\x03\xD0\x06\xD0\u147C\n\xD0\r\xD0\x0E\xD0\u147D\x05\xD0\u1480\n\xD0" +
		"\x03\xD0\x03\xD0\x06\xD0\u1484\n\xD0\r\xD0\x0E\xD0\u1485\x03\xD0\x03\xD0" +
		"\x06\xD0\u148A\n\xD0\r\xD0\x0E\xD0\u148B\x05\xD0\u148E\n\xD0\x03\xD0\x03" +
		"\xD0\x05\xD0\u1492\n\xD0\x03\xD0\x06\xD0\u1495\n\xD0\r\xD0\x0E\xD0\u1496" +
		"\x03\xD0\x03\xD0\x05\xD0\u149B\n\xD0\x03\xD1\x03\xD1\x03\xD1\x07\xD1\u14A0" +
		"\n\xD1\f\xD1\x0E\xD1\u14A3\v\xD1\x03\xD1\x03\xD1\x07\xD1\u14A7\n\xD1\f" +
		"\xD1\x0E\xD1\u14AA\v\xD1\x03\xD1\x03\xD1\x07\xD1\u14AE\n\xD1\f\xD1\x0E" +
		"\xD1\u14B1\v\xD1\x03\xD1\x07\xD1\u14B4\n\xD1\f\xD1\x0E\xD1\u14B7\v\xD1" +
		"\x05\xD1\u14B9\n\xD1\x03\xD2\x03\xD2\x06\xD2\u14BD\n\xD2\r\xD2\x0E\xD2" +
		"\u14BE\x03\xD2\x03\xD2\x06\xD2\u14C3\n\xD2\r\xD2\x0E\xD2\u14C4\x05\xD2" +
		"\u14C7\n\xD2\x03\xD2\x03\xD2\x06\xD2\u14CB\n\xD2\r\xD2\x0E\xD2\u14CC\x05" +
		"\xD2\u14CF\n\xD2\x05\xD2\u14D1\n\xD2\x03\xD2\x03\xD2\x06\xD2\u14D5\n\xD2" +
		"\r\xD2\x0E\xD2\u14D6\x03\xD2\x03\xD2\x06\xD2\u14DB\n\xD2\r\xD2\x0E\xD2" +
		"\u14DC\x03\xD2\x03\xD2\x06\xD2\u14E1\n\xD2\r\xD2\x0E\xD2\u14E2\x05\xD2" +
		"\u14E5\n\xD2\x03\xD2\x03\xD2\x06\xD2\u14E9\n\xD2\r\xD2\x0E\xD2\u14EA\x05" +
		"\xD2\u14ED\n\xD2\x03\xD2\x03\xD2\x05\xD2\u14F1\n\xD2\x03\xD3\x03\xD3\x06" +
		"\xD3\u14F5\n\xD3\r\xD3\x0E\xD3\u14F6\x03\xD3\x03\xD3\x06\xD3\u14FB\n\xD3" +
		"\r\xD3\x0E\xD3\u14FC\x03\xD3\x03\xD3\x05\xD3\u1501\n\xD3\x03\xD4\x03\xD4" +
		"\x03\xD5\x03\xD5\x06\xD5\u1507\n\xD5\r\xD5\x0E\xD5\u1508\x03\xD5\x03\xD5" +
		"\x06\xD5\u150D\n\xD5\r\xD5\x0E\xD5\u150E\x03\xD5\x03\xD5\x06\xD5\u1513" +
		"\n\xD5\r\xD5\x0E\xD5\u1514\x05\xD5\u1517\n\xD5\x03\xD5\x03\xD5\x03\xD6" +
		"\x03\xD6\x06\xD6\u151D\n\xD6\r\xD6\x0E\xD6\u151E\x03\xD6\x03\xD6\x06\xD6" +
		"\u1523\n\xD6\r\xD6\x0E\xD6\u1524\x05\xD6\u1527\n\xD6\x03\xD6\x03\xD6\x06" +
		"\xD6\u152B\n\xD6\r\xD6\x0E\xD6\u152C\x05\xD6\u152F\n\xD6\x03\xD6\x03\xD6" +
		"\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x06\xD8\u1537\n\xD8\r\xD8\x0E\xD8\u1538" +
		"\x03\xD8\x03\xD8\x06\xD8\u153D\n\xD8\r\xD8\x0E\xD8\u153E\x05\xD8\u1541" +
		"\n\xD8\x05\xD8\u1543\n\xD8\x03\xD8\x03\xD8\x03\xD8\x06\xD8\u1548\n\xD8" +
		"\r\xD8\x0E\xD8\u1549\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u1550\n\xD8" +
		"\x03\xD9\x03\xD9\x06\xD9\u1554\n\xD9\r\xD9\x0E\xD9\u1555\x03\xD9\x03\xD9" +
		"\x06\xD9\u155A\n\xD9\r\xD9\x0E\xD9\u155B\x05\xD9\u155E\n\xD9\x03\xD9\x03" +
		"\xD9\x06\xD9\u1562\n\xD9\r\xD9\x0E\xD9\u1563\x05\xD9\u1566\n\xD9\x03\xD9" +
		"\x03\xD9\x03\xDA\x03\xDA\x06\xDA\u156C\n\xDA\r\xDA\x0E\xDA\u156D\x03\xDA" +
		"\x03\xDA\x06\xDA\u1572\n\xDA\r\xDA\x0E\xDA\u1573\x05\xDA\u1576\n\xDA\x03" +
		"\xDA\x03\xDA\x06\xDA\u157A\n\xDA\r\xDA\x0E\xDA\u157B\x03\xDA\x03\xDA\x06" +
		"\xDA\u1580\n\xDA\r\xDA\x0E\xDA\u1581\x03\xDA\x03\xDA\x06\xDA\u1586\n\xDA" +
		"\r\xDA\x0E\xDA\u1587\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x06\xDA\u158E\n\xDA" +
		"\r\xDA\x0E\xDA\u158F\x03\xDA\x03\xDA\x06\xDA\u1594\n\xDA\r\xDA\x0E\xDA" +
		"\u1595\x05\xDA\u1598\n\xDA\x03\xDA\x03\xDA\x06\xDA\u159C\n\xDA\r\xDA\x0E" +
		"\xDA\u159D\x03\xDA\x03\xDA\x06\xDA\u15A2\n\xDA\r\xDA\x0E\xDA\u15A3\x03" +
		"\xDA\x03\xDA\x03\xDA\x05\xDA\u15A9\n\xDA\x05\xDA\u15AB\n\xDA\x03\xDA\x05" +
		"\xDA\u15AE\n\xDA\x03\xDB\x03\xDB\x06\xDB\u15B2\n\xDB\r\xDB\x0E\xDB\u15B3" +
		"\x03\xDB\x03\xDB\x06\xDB\u15B8\n\xDB\r\xDB\x0E\xDB\u15B9\x05\xDB\u15BC" +
		"\n\xDB\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x06\xDC\u15C2\n\xDC\r\xDC\x0E\xDC" +
		"\u15C3\x03\xDC\x03\xDC\x06\xDC\u15C8\n\xDC\r\xDC\x0E\xDC\u15C9\x05\xDC" +
		"\u15CC\n\xDC\x03\xDC\x03\xDC\x06\xDC\u15D0\n\xDC\r\xDC\x0E\xDC\u15D1\x03" +
		"\xDC\x03\xDC\x06\xDC\u15D6\n\xDC\r\xDC\x0E\xDC\u15D7\x05\xDC\u15DA\n\xDC" +
		"\x03\xDC\x03\xDC\x06\xDC\u15DE\n\xDC\r\xDC\x0E\xDC\u15DF\x03\xDC\x03\xDC" +
		"\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x03\xDF\x03\xDF\x06\xDF\u15EA\n\xDF\r" +
		"\xDF\x0E\xDF\u15EB\x03\xDF\x03\xDF\x06\xDF\u15F0\n\xDF\r\xDF\x0E\xDF\u15F1" +
		"\x05\xDF\u15F4\n\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0\x06\xE0\u15FA\n\xE0" +
		"\r\xE0\x0E\xE0\u15FB\x05\xE0\u15FE\n\xE0\x03\xE0\x03\xE0\x03\xE0\x06\xE0" +
		"\u1603\n\xE0\r\xE0\x0E\xE0\u1604\x05\xE0\u1607\n\xE0\x03\xE0\x03\xE0\x06" +
		"\xE0\u160B\n\xE0\r\xE0\x0E\xE0\u160C\x03\xE0\x03\xE0\x05\xE0\u1611\n\xE0" +
		"\x05\xE0\u1613\n\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x05\xE1\u1619\n\xE1" +
		"\x03\xE2\x03\xE2\x03\xE3\x03\xE3\x07\xE3\u161F\n\xE3\f\xE3\x0E\xE3\u1622" +
		"\v\xE3\x03\xE3\x03\xE3\x07\xE3\u1626\n\xE3\f\xE3\x0E\xE3\u1629\v\xE3\x03" +
		"\xE3\x03\xE3\x07\xE3\u162D\n\xE3\f\xE3\x0E\xE3\u1630\v\xE3\x07\xE3\u1632" +
		"\n\xE3\f\xE3\x0E\xE3\u1635\v\xE3\x03\xE3\x03\xE3\x07\xE3\u1639\n\xE3\f" +
		"\xE3\x0E\xE3\u163C\v\xE3\x07\xE3\u163E\n\xE3\f\xE3\x0E\xE3\u1641\v\xE3" +
		"\x03\xE3\x03\xE3\x07\xE3\u1645\n\xE3\f\xE3\x0E\xE3\u1648\v\xE3\x07\xE3" +
		"\u164A\n\xE3\f\xE3\x0E\xE3\u164D\v\xE3\x03\xE3\x03\xE3\x07\xE3\u1651\n" +
		"\xE3\f\xE3\x0E\xE3\u1654\v\xE3\x07\xE3\u1656\n\xE3\f\xE3\x0E\xE3\u1659" +
		"\v\xE3\x03\xE3\x03\xE3\x07\xE3\u165D\n\xE3\f\xE3\x0E\xE3\u1660\v\xE3\x05" +
		"\xE3\u1662\n\xE3\x03\xE4\x03\xE4\x06\xE4\u1666\n\xE4\r\xE4\x0E\xE4\u1667" +
		"\x03\xE4\x03\xE4\x06\xE4\u166C\n\xE4\r\xE4\x0E\xE4\u166D\x03\xE4\x03\xE4" +
		"\x06\xE4\u1672\n\xE4\r\xE4\x0E\xE4\u1673\x05\xE4\u1676\n\xE4\x03\xE4\x03" +
		"\xE4\x06\xE4\u167A\n\xE4\r\xE4\x0E\xE4\u167B\x05\xE4\u167E\n\xE4\x03\xE4" +
		"\x03\xE4\x07\xE4\u1682\n\xE4\f\xE4\x0E\xE4\u1685\v\xE4\x06\xE4\u1687\n" +
		"\xE4\r\xE4\x0E\xE4\u1688\x03\xE5\x03\xE5\x06\xE5\u168D\n\xE5\r\xE5\x0E" +
		"\xE5\u168E\x03\xE5\x03\xE5\x06\xE5\u1693\n\xE5\r\xE5\x0E\xE5\u1694\x03" +
		"\xE5\x03\xE5\x05\xE5\u1699\n\xE5\x03\xE6\x03\xE6\x03\xE7\x03\xE7\x03\xE8" +
		"\x03\xE8\x06\xE8\u16A1\n\xE8\r\xE8\x0E\xE8\u16A2\x03\xE8\x03\xE8\x06\xE8" +
		"\u16A7\n\xE8\r\xE8\x0E\xE8\u16A8\x03\xE8\x03\xE8\x06\xE8\u16AD\n\xE8\r" +
		"\xE8\x0E\xE8\u16AE\x05\xE8\u16B1\n\xE8\x03\xE8\x03\xE8\x06\xE8\u16B5\n" +
		"\xE8\r\xE8\x0E\xE8\u16B6\x05\xE8\u16B9\n\xE8\x03\xE8\x03\xE8\x03\xE9\x03" +
		"\xE9\x06\xE9\u16BF\n\xE9\r\xE9\x0E\xE9\u16C0\x03\xE9\x03\xE9\x06\xE9\u16C5" +
		"\n\xE9\r\xE9\x0E\xE9\u16C6\x05\xE9\u16C9\n\xE9\x03\xE9\x03\xE9\x03\xE9" +
		"\x03\xE9\x06\xE9\u16CF\n\xE9\r\xE9\x0E\xE9\u16D0\x03\xE9\x03\xE9\x03\xE9" +
		"\x05\xE9\u16D6\n\xE9\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEC\x03\xEC\x06" +
		"\xEC\u16DE\n\xEC\r\xEC\x0E\xEC\u16DF\x03\xEC\x03\xEC\x06\xEC\u16E4\n\xEC" +
		"\r\xEC\x0E\xEC\u16E5\x05\xEC\u16E8\n\xEC\x05\xEC\u16EA\n\xEC\x03\xEC\x03" +
		"\xEC\x03\xEC\x06\xEC\u16EF\n\xEC\r\xEC\x0E\xEC\u16F0\x03\xEC\x03\xEC\x05" +
		"\xEC\u16F5\n\xEC\x03\xED\x03\xED\x03\xEE\x03\xEE\x06\xEE\u16FB\n\xEE\r" +
		"\xEE\x0E\xEE\u16FC\x03\xEE\x03\xEE\x06\xEE\u1701\n\xEE\r\xEE\x0E\xEE\u1702" +
		"\x05\xEE\u1705\n\xEE\x03\xEE\x03\xEE\x06\xEE\u1709\n\xEE\r\xEE\x0E\xEE" +
		"\u170A\x05\xEE\u170D\n\xEE\x03\xEE\x03\xEE\x06\xEE\u1711\n\xEE\r\xEE\x0E" +
		"\xEE\u1712\x05\xEE\u1715\n\xEE\x03\xEE\x03\xEE\x06\xEE\u1719\n\xEE\r\xEE" +
		"\x0E\xEE\u171A\x03\xEE\x03\xEE\x06\xEE\u171F\n\xEE\r\xEE\x0E\xEE\u1720" +
		"\x03\xEF\x03\xEF\x03\xF0\x03\xF0\x06\xF0\u1727\n\xF0\r\xF0\x0E\xF0\u1728" +
		"\x03\xF0\x03\xF0\x06\xF0\u172D\n\xF0\r\xF0\x0E\xF0\u172E\x06\xF0\u1731" +
		"\n\xF0\r\xF0\x0E\xF0\u1732\x03\xF0\x03\xF0\x06\xF0\u1737\n\xF0\r\xF0\x0E" +
		"\xF0\u1738\x03\xF0\x03\xF0\x07\xF0\u173D\n\xF0\f\xF0\x0E\xF0\u1740\v\xF0" +
		"\x06\xF0\u1742\n\xF0\r\xF0\x0E\xF0\u1743\x03\xF1\x03\xF1\x03\xF1\x06\xF1" +
		"\u1749\n\xF1\r\xF1\x0E\xF1\u174A\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1" +
		"\x03\xF1\x03\xF1\x06\xF1\u1754\n\xF1\r\xF1\x0E\xF1\u1755\x05\xF1\u1758" +
		"\n\xF1\x03\xF1\x03\xF1\x06\xF1\u175C\n\xF1\r\xF1\x0E\xF1\u175D\x03\xF1" +
		"\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x06\xF1\u1765\n\xF1\r\xF1\x0E\xF1\u1766" +
		"\x03\xF1\x03\xF1\x05\xF1\u176B\n\xF1\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03" +
		"\xF4\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u1776\n\xF5\f\xF5\x0E\xF5" +
		"\u1779\v\xF5\x03\xF5\x03\xF5\x07\xF5\u177D\n\xF5\f\xF5\x0E\xF5\u1780\v" +
		"\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x07\xF5\u1786\n\xF5\f\xF5\x0E\xF5" +
		"\u1789\v\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03" +
		"\xF5\x05\xF5\u1793\n\xF5\x03\xF5\x03\xF5\x07\xF5\u1797\n\xF5\f\xF5\x0E" +
		"\xF5\u179A\v\xF5\x03\xF5\x03\xF5\x07\xF5\u179E\n\xF5\f\xF5\x0E\xF5\u17A1" +
		"\v\xF5\x03\xF5\x03\xF5\x07\xF5\u17A5\n\xF5\f\xF5\x0E\xF5\u17A8\v\xF5\x03" +
		"\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u17B0\n\xF6\x03\xF7" +
		"\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x07\xF8\u17B7\n\xF8\f\xF8\x0E\xF8\u17BA" +
		"\v\xF8\x03\xF8\x03\xF8\x07\xF8\u17BE\n\xF8\f\xF8\x0E\xF8\u17C1\v\xF8\x03" +
		"\xF8\x03\xF8\x03\xF8\x03\xF8\x07\xF8\u17C7\n\xF8\f\xF8\x0E\xF8\u17CA\v" +
		"\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u17D1\n\xF8\x03\xF8" +
		"\x03\xF8\x07\xF8\u17D5\n\xF8\f\xF8\x0E\xF8\u17D8\v\xF8\x03\xF8\x03\xF8" +
		"\x07\xF8\u17DC\n\xF8\f\xF8\x0E\xF8\u17DF\v\xF8\x03\xF8\x03\xF8\x07\xF8" +
		"\u17E3\n\xF8\f\xF8\x0E\xF8\u17E6\v\xF8\x03\xF9\x03\xF9\x06\xF9\u17EA\n" +
		"\xF9\r\xF9\x0E\xF9\u17EB\x03\xF9\x03\xF9\x05\xF9\u17F0\n\xF9\x03\xF9\x06" +
		"\xF9\u17F3\n\xF9\r\xF9\x0E\xF9\u17F4\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03" +
		"\xFA\x07\xFA\u17FC\n\xFA\f\xFA\x0E\xFA\u17FF\v\xFA\x03\xFA\x03\xFA\x07" +
		"\xFA\u1803\n\xFA\f\xFA\x0E\xFA\u1806\v\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x05\xFA\u180C\n\xFA\x03\xFA\x03\xFA\x06\xFA\u1810\n\xFA\r\xFA\x0E" +
		"\xFA\u1811\x03\xFA\x03\xFA\x07\xFA\u1816\n\xFA\f\xFA\x0E\xFA\u1819\v\xFA" +
		"\x03\xFA\x03\xFA\x07\xFA\u181D\n\xFA\f\xFA\x0E\xFA\u1820\v\xFA\x03\xFA" +
		"\x03\xFA\x07\xFA\u1824\n\xFA\f\xFA\x0E\xFA\u1827\v\xFA\x03\xFB\x03\xFB" +
		"\x03\xFC\x03\xFC\x06\xFC\u182D\n\xFC\r\xFC\x0E\xFC\u182E\x03\xFC\x03\xFC" +
		"\x05\xFC\u1833\n\xFC\x03\xFC\x06\xFC\u1836\n\xFC\r\xFC\x0E\xFC\u1837\x03" +
		"\xFC\x03\xFC\x05\xFC\u183C\n\xFC\x03\xFC\x06\xFC\u183F\n\xFC\r\xFC\x0E" +
		"\xFC\u1840\x03\xFC\x03\xFC\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x06\xFE\u1849" +
		"\n\xFE\r\xFE\x0E\xFE\u184A\x03\xFE\x03\xFE\x05\xFE\u184F\n\xFE\x03\xFE" +
		"\x06\xFE\u1852\n\xFE\r\xFE\x0E\xFE\u1853\x03\xFE\x03\xFE\x05\xFE\u1858" +
		"\n\xFE\x03\xFE\x06\xFE\u185B\n\xFE\r\xFE\x0E\xFE\u185C\x03\xFE\x03\xFE" +
		"\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x07\u0100\u1865\n\u0100\f\u0100\x0E" +
		"\u0100\u1868\v\u0100\x05\u0100\u186A\n\u0100\x03\u0100\x03\u0100\x07\u0100" +
		"\u186E\n\u0100\f\u0100\x0E\u0100\u1871\v\u0100\x05\u0100\u1873\n\u0100" +
		"\x03\u0100\x03\u0100\x06\u0100\u1877\n\u0100\r\u0100\x0E\u0100\u1878\x03" +
		"\u0100\x03\u0100\x05\u0100\u187D\n\u0100\x03\u0100\x03\u0100\x06\u0100" +
		"\u1881\n\u0100\r\u0100\x0E\u0100\u1882\x03\u0100\x03\u0100\x05\u0100\u1887" +
		"\n\u0100\x03\u0100\x03\u0100\x06\u0100\u188B\n\u0100\r\u0100\x0E\u0100" +
		"\u188C\x03\u0100\x03\u0100\x05\u0100\u1891\n\u0100\x03\u0100\x03\u0100" +
		"\x06\u0100\u1895\n\u0100\r\u0100\x0E\u0100\u1896\x03\u0100\x03\u0100\x05" +
		"\u0100\u189B\n\u0100\x03\u0100\x03\u0100\x06\u0100\u189F\n\u0100\r\u0100" +
		"\x0E\u0100\u18A0\x03\u0100\x03\u0100\x05\u0100\u18A5\n\u0100\x03\u0100" +
		"\x03\u0100\x06\u0100\u18A9\n\u0100\r\u0100\x0E\u0100\u18AA\x03\u0100\x03" +
		"\u0100\x05\u0100\u18AF\n\u0100\x05\u0100\u18B1\n\u0100\x03\u0100\x03\u0100" +
		"\x06\u0100\u18B5\n\u0100\r\u0100\x0E\u0100\u18B6\x03\u0100\x03\u0100\x05" +
		"\u0100\u18BB\n\u0100\x03\u0100\x06\u0100\u18BE\n\u0100\r\u0100\x0E\u0100" +
		"\u18BF\x03\u0100\x03\u0100\x06\u0100\u18C4\n\u0100\r\u0100\x0E\u0100\u18C5" +
		"\x03\u0100\x03\u0100\x06\u0100\u18CA\n\u0100\r\u0100\x0E\u0100\u18CB\x03" +
		"\u0100\x03\u0100\x05\u0100\u18D0\n\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x06\u0100\u18D5\n\u0100\r\u0100\x0E\u0100\u18D6\x03\u0100\x03\u0100\x05" +
		"\u0100\u18DB\n\u0100\x03\u0100\x06\u0100\u18DE\n\u0100\r\u0100\x0E\u0100" +
		"\u18DF\x03\u0100\x03\u0100\x06\u0100\u18E4\n\u0100\r\u0100\x0E\u0100\u18E5" +
		"\x03\u0100\x03\u0100\x06\u0100\u18EA\n\u0100\r\u0100\x0E\u0100\u18EB\x03" +
		"\u0100\x03\u0100\x05\u0100\u18F0\n\u0100\x03\u0100\x05\u0100\u18F3\n\u0100" +
		"\x03\u0101\x03\u0101\x07\u0101\u18F7\n\u0101\f\u0101\x0E\u0101\u18FA\v" +
		"\u0101\x03\u0101\x05\u0101\u18FD\n\u0101\x03\u0101\x07\u0101\u1900\n\u0101" +
		"\f\u0101\x0E\u0101\u1903\v\u0101\x03\u0101\x05\u0101\u1906\n\u0101\x03" +
		"\u0102\x03\u0102\x03\u0102\x07\u0102\u190B\n\u0102\f\u0102\x0E\u0102\u190E" +
		"\v\u0102\x03\u0102\x03\u0102\x07\u0102\u1912\n\u0102\f\u0102\x0E\u0102" +
		"\u1915\v\u0102\x03\u0102\x05\u0102\u1918\n\u0102\x03\u0102\x07\u0102\u191B" +
		"\n\u0102\f\u0102\x0E\u0102\u191E\v\u0102\x03\u0102\x05\u0102\u1921\n\u0102" +
		"\x05\u0102\u1923\n\u0102\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x07\u0104" +
		"\u1929\n\u0104\f\u0104\x0E\u0104\u192C\v\u0104\x03\u0104\x03\u0104\x05" +
		"\u0104\u1930\n\u0104\x03\u0104\x07\u0104\u1933\n\u0104\f\u0104\x0E\u0104" +
		"\u1936\v\u0104\x03\u0104\x03\u0104\x05\u0104\u193A\n\u0104\x07\u0104\u193C" +
		"\n\u0104\f\u0104\x0E\u0104\u193F\v\u0104\x03\u0104\x07\u0104\u1942\n\u0104" +
		"\f\u0104\x0E\u0104\u1945\v\u0104\x03\u0104\x03\u0104\x03\u0105\x03\u0105" +
		"\x07\u0105\u194B\n\u0105\f\u0105\x0E\u0105\u194E\v\u0105\x03\u0105\x03" +
		"\u0105\x07\u0105\u1952\n\u0105\f\u0105\x0E\u0105\u1955\v\u0105\x03\u0105" +
		"\x03\u0105\x07\u0105\u1959\n\u0105\f\u0105\x0E\u0105\u195C\v\u0105\x03" +
		"\u0105\x05\u0105\u195F\n\u0105\x03\u0105\x07\u0105\u1962\n\u0105\f\u0105" +
		"\x0E\u0105\u1965\v\u0105\x03\u0105\x03\u0105\x03\u0106\x03\u0106\x03\u0107" +
		"\x03\u0107\x03\u0108\x03\u0108\x03\u0108\x02\x02\x05\u01E8\u01EE\u01F2" +
		"\u0109\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02" +
		"\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02" +
		"(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02" +
		"D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02" +
		"`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02" +
		"|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E" +
		"\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02";
	private static readonly _serializedATNSegment3: string =
		"\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02" +
		"\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02" +
		"\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02" +
		"\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02" +
		"\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02" +
		"\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108" +
		"\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116" +
		"\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124" +
		"\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132" +
		"\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140" +
		"\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E" +
		"\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C" +
		"\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A" +
		"\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178" +
		"\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186" +
		"\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194" +
		"\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2" +
		"\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0" +
		"\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE" +
		"\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC" +
		"\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA" +
		"\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8" +
		"\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6" +
		"\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204" +
		"\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\x02(\x03\x02\u01A6" +
		"\u01A6\x04\x02\x97\x97\x9A\x9A\x04\x02\xDC\xDC\u0137\u0137\x03\x02\u015B" +
		"\u015C\x04\x02\xD7\xD7\u0134\u0134\x03\x02\xD1\xD2\x03\x02\u0164\u0165" +
		"\x03\x02\u01A0\u01A1\x04\x02\x18\x18nn\x04\x02\xD6\xD6\u016A\u016A\x04" +
		"\x02\xA7\xA7\u01A3\u01A3\x03\x02\xDC\xDD\x04\x02\u0144\u0144\u0171\u0171" +
		"\x03\x02\u010A\u010B\x07\x02\u018E\u018F\u0197\u0198\u019D\u019D\u01A1" +
		"\u01A1\u01A3\u01A3\x04\x02\xA4\xA4\xBD\xBD\x04\x02\xF9\xF9\u014D\u014D" +
		"\x03\x02\x93\x94\x04\x02??\xC6\xC6\x04\x02\xEE\xEE\u014D\u014D\x06\x02" +
		"\b\b\xBC\xBC\u017B\u017B\u01A3\u01A3\x05\x0266\xEA\xEA\u017F\u017F\x04" +
		"\x02\xC2\xC2\xF7\xF7\x04\x02\x12\x12\xCE\xCE\x07\x0222PP\xDE\xDE\u0105" +
		"\u0106\u015D\u015F\x04\x02\x15\x16\x91\x92\x05\x02vv\u011A\u011A\u0141" +
		"\u0141\x03\x02\x13\x14\x04\x0266\u011E\u011E\x04\x02vv\x9F\x9F\x04\x02" +
		"\u0120\u0120\u016F\u016F\x04\x02\u011D\u011D\u0146\u0147\x03\x02RS\x03" +
		"\x02\u018B\u018C\x04\x02\xA0\xA0\u0155\u0155\x04\x02\x10\x10\xFE\xFE\x05" +
		"\x02\xEF\xEF\u0110\u0110\u0184\u0184\x05\x02\n\f\xF4\xF4\u01A3\u01A3\x02" +
		"\u1D66\x02\u0214\x03\x02\x02\x02\x04\u0225\x03\x02\x02\x02\x06\u022D\x03" +
		"\x02\x02\x02\b\u0233\x03\x02\x02\x02\n\u0245\x03\x02\x02\x02\f\u0247\x03" +
		"\x02\x02\x02\x0E\u0251\x03\x02\x02\x02\x10\u0285\x03\x02\x02\x02\x12\u02AB" +
		"\x03\x02\x02\x02\x14\u02AD\x03\x02\x02\x02\x16\u02DA\x03\x02\x02\x02\x18" +
		"\u02E8\x03\x02\x02\x02\x1A\u02EA\x03\x02\x02\x02\x1C\u030B\x03\x02\x02" +
		"\x02\x1E\u031C\x03\x02\x02\x02 \u036D\x03\x02\x02\x02\"\u0380\x03\x02" +
		"\x02\x02$\u0382\x03\x02\x02\x02&\u039F\x03\x02\x02\x02(\u03A1\x03\x02" +
		"\x02\x02*\u03A3\x03\x02\x02\x02,\u03B6\x03\x02\x02\x02.\u03D1\x03\x02" +
		"\x02\x020\u03D3\x03\x02\x02\x022\u03DB\x03\x02\x02\x024\u03FD\x03\x02" +
		"\x02\x026\u041F\x03\x02\x02\x028\u0421\x03\x02\x02\x02:\u0446\x03\x02" +
		"\x02\x02<\u0448\x03\x02\x02\x02>\u047F\x03\x02\x02\x02@\u0493\x03\x02" +
		"\x02\x02B\u04B9\x03\x02\x02\x02D\u04F5\x03\x02\x02\x02F\u051D\x03\x02" +
		"\x02\x02H\u0535\x03\x02\x02\x02J\u0547\x03\x02\x02\x02L\u05B5\x03\x02" +
		"\x02\x02N\u0610\x03\x02\x02\x02P\u0612\x03\x02\x02\x02R\u0621\x03\x02" +
		"\x02\x02T\u065D\x03\x02\x02\x02V\u065F\x03\x02\x02\x02X\u0663\x03\x02" +
		"\x02\x02Z\u0682\x03\x02\x02\x02\\\u069A\x03\x02\x02\x02^\u069C\x03\x02" +
		"\x02\x02`\u069E\x03\x02\x02\x02b\u06A6\x03\x02\x02\x02d\u06B6\x03\x02" +
		"\x02\x02f\u06C0\x03\x02\x02\x02h\u0701\x03\x02\x02\x02j\u073D\x03\x02" +
		"\x02\x02l\u075D\x03\x02\x02\x02n\u077D\x03\x02\x02\x02p\u07A9\x03\x02" +
		"\x02\x02r\u07C9\x03\x02\x02\x02t\u07E4\x03\x02\x02\x02v\u07FF\x03\x02" +
		"\x02\x02x\u0837\x03\x02\x02\x02z\u0839\x03\x02\x02\x02|\u0846\x03\x02" +
		"\x02\x02~\u086F\x03\x02\x02\x02\x80\u08AD\x03\x02\x02\x02\x82\u08AF\x03" +
		"\x02\x02\x02\x84\u08C5\x03\x02\x02\x02\x86\u08C7\x03\x02\x02\x02\x88\u08DD" +
		"\x03\x02\x02\x02\x8A\u08F1\x03\x02\x02\x02\x8C\u090C\x03\x02\x02\x02\x8E" +
		"\u090E\x03\x02\x02\x02\x90\u0916\x03\x02\x02\x02\x92\u0918\x03\x02\x02" +
		"\x02\x94\u091A\x03\x02\x02\x02\x96\u091C\x03\x02\x02\x02\x98\u0938\x03" +
		"\x02\x02\x02\x9A\u0953\x03\x02\x02\x02\x9C\u0955\x03\x02\x02\x02\x9E\u0978" +
		"\x03\x02\x02\x02\xA0\u09AA\x03\x02\x02\x02\xA2\u09AC\x03\x02\x02\x02\xA4" +
		"\u09AE\x03\x02\x02\x02\xA6\u09B0\x03\x02\x02\x02\xA8\u09B2\x03\x02\x02" +
		"\x02\xAA\u09BF\x03\x02\x02\x02\xAC\u0A85\x03\x02\x02\x02\xAE\u0A96\x03" +
		"\x02\x02\x02\xB0\u0AD0\x03\x02\x02\x02\xB2\u0AEC\x03\x02\x02\x02\xB4\u0AEE" +
		"\x03\x02\x02\x02\xB6\u0AF0\x03\x02\x02\x02\xB8\u0AF2\x03\x02\x02\x02\xBA" +
		"\u0AF4\x03\x02\x02\x02\xBC\u0B40\x03\x02\x02\x02\xBE\u0B42\x03\x02\x02" +
		"\x02\xC0\u0B55\x03\x02\x02\x02\xC2\u0B77\x03\x02\x02\x02\xC4\u0B79\x03" +
		"\x02\x02\x02\xC6\u0C39\x03\x02\x02\x02\xC8\u0C3B\x03\x02\x02\x02\xCA\u0C3D" +
		"\x03\x02\x02\x02\xCC\u0C3F\x03\x02\x02\x02\xCE\u0C41\x03\x02\x02\x02\xD0" +
		"\u0C43\x03\x02\x02\x02\xD2\u0C45\x03\x02\x02\x02\xD4\u0C47\x03\x02\x02" +
		"\x02\xD6\u0C58\x03\x02\x02\x02\xD8\u0C9B\x03\x02\x02\x02\xDA\u0C9D\x03" +
		"\x02\x02\x02\xDC\u0CAE\x03\x02\x02\x02\xDE\u0CB2\x03\x02\x02\x02\xE0\u0CB4" +
		"\x03\x02\x02\x02\xE2\u0CB6\x03\x02\x02\x02\xE4\u0CBA\x03\x02\x02\x02\xE6" +
		"\u0CD0\x03\x02\x02\x02\xE8\u0CE4\x03\x02\x02\x02\xEA\u0CE6\x03\x02\x02" +
		"\x02\xEC\u0D5D\x03\x02\x02\x02\xEE\u0D61\x03\x02\x02\x02\xF0\u0D65\x03" +
		"\x02\x02\x02\xF2\u0D69\x03\x02\x02\x02\xF4\u0D6B\x03\x02\x02\x02\xF6\u0D94" +
		"\x03\x02\x02\x02\xF8\u0D96\x03\x02\x02\x02\xFA\u0DB4\x03\x02\x02\x02\xFC" +
		"\u0DB6\x03\x02\x02\x02\xFE\u0DD9\x03\x02\x02\x02\u0100\u0E5C\x03\x02\x02" +
		"\x02\u0102\u0E5E\x03\x02\x02\x02\u0104\u0E60\x03\x02\x02\x02\u0106\u0E62" +
		"\x03\x02\x02\x02\u0108\u0E64\x03\x02\x02\x02\u010A\u0E7E\x03\x02\x02\x02" +
		"\u010C\u0F4A\x03\x02\x02\x02\u010E\u0F4C\x03\x02\x02\x02\u0110\u0F54\x03" +
		"\x02\x02\x02\u0112\u0F5E\x03\x02\x02\x02\u0114\u0F66\x03\x02\x02\x02\u0116" +
		"\u0F6A\x03\x02\x02\x02\u0118\u0F6C\x03\x02\x02\x02\u011A\u0F6E\x03\x02" +
		"\x02\x02\u011C\u0F90\x03\x02\x02\x02\u011E\u0F92\x03\x02\x02\x02\u0120" +
		"\u0FBB\x03\x02\x02\x02\u0122\u0FC3\x03\x02\x02\x02\u0124\u0FD5\x03\x02" +
		"\x02\x02\u0126\u0FDF\x03\x02\x02\x02\u0128\u0FEA\x03\x02\x02\x02\u012A" +
		"\u0FEC\x03\x02\x02\x02\u012C\u1001\x03\x02\x02\x02\u012E\u1016\x03\x02" +
		"\x02\x02\u0130\u102B\x03\x02\x02\x02\u0132\u1040\x03\x02\x02\x02\u0134" +
		"\u1055\x03\x02\x02\x02\u0136\u106F\x03\x02\x02\x02\u0138\u1086\x03\x02" +
		"\x02\x02\u013A\u10A0\x03\x02\x02\x02\u013C\u10CF\x03\x02\x02\x02\u013E" +
		"\u10E9\x03\x02\x02\x02\u0140\u110B\x03\x02\x02\x02\u0142\u1113\x03\x02" +
		"\x02\x02\u0144\u111D\x03\x02\x02\x02\u0146\u1151\x03\x02\x02\x02\u0148" +
		"\u1168\x03\x02\x02\x02\u014A\u116A\x03\x02\x02\x02\u014C\u1172\x03\x02" +
		"\x02\x02\u014E\u118D\x03\x02\x02\x02\u0150\u118F\x03\x02\x02\x02\u0152" +
		"\u119B\x03\x02\x02\x02\u0154\u119D\x03\x02\x02\x02\u0156\u1225\x03\x02" +
		"\x02\x02\u0158\u1227\x03\x02\x02\x02\u015A\u123A\x03\x02\x02\x02\u015C" +
		"\u126A\x03\x02\x02\x02\u015E\u126C\x03\x02\x02\x02\u0160\u126E\x03\x02" +
		"\x02\x02\u0162\u1270\x03\x02\x02\x02\u0164\u128F\x03\x02\x02\x02\u0166" +
		"\u1291\x03\x02\x02\x02\u0168\u12A1\x03\x02\x02\x02\u016A\u12B5\x03\x02" +
		"\x02\x02\u016C\u12C2\x03\x02\x02\x02\u016E\u12D8\x03\x02\x02\x02\u0170" +
		"\u12E5\x03\x02\x02\x02\u0172\u12E7\x03\x02\x02\x02\u0174\u12E9\x03\x02" +
		"\x02\x02\u0176\u130F\x03\x02\x02\x02\u0178\u1333\x03\x02\x02\x02\u017A" +
		"\u1335\x03\x02\x02\x02\u017C\u1337\x03\x02\x02\x02\u017E\u1339\x03\x02" +
		"\x02\x02\u0180\u133B\x03\x02\x02\x02\u0182\u1374\x03\x02\x02\x02\u0184" +
		"\u138C\x03\x02\x02\x02\u0186\u13A4\x03\x02\x02\x02\u0188\u13A6\x03\x02" +
		"\x02\x02\u018A\u13A8\x03\x02\x02\x02\u018C\u13AA\x03\x02\x02\x02\u018E" +
		"\u13AC\x03\x02\x02\x02\u0190\u13AE\x03\x02\x02\x02\u0192\u13B0\x03\x02" +
		"\x02\x02\u0194\u13B2\x03\x02\x02\x02\u0196\u13B4\x03\x02\x02\x02\u0198" +
		"\u13CE\x03\x02\x02\x02\u019A\u144F\x03\x02\x02\x02\u019C\u1461\x03\x02" +
		"\x02\x02\u019E\u1469\x03\x02\x02\x02\u01A0\u14B8\x03\x02\x02\x02\u01A2" +
		"\u14D0\x03\x02\x02\x02\u01A4\u14F2\x03\x02\x02\x02\u01A6\u1502\x03\x02" +
		"\x02\x02\u01A8\u1504\x03\x02\x02\x02\u01AA\u151A\x03\x02\x02\x02\u01AC" +
		"\u1532\x03\x02\x02\x02\u01AE\u1542\x03\x02\x02\x02\u01B0\u1551\x03\x02" +
		"\x02\x02\u01B2\u15AD\x03\x02\x02\x02\u01B4\u15AF\x03\x02\x02\x02\u01B6" +
		"\u15BF\x03\x02\x02\x02\u01B8\u15E3\x03\x02\x02\x02\u01BA\u15E5\x03\x02" +
		"\x02\x02\u01BC\u15E7\x03\x02\x02\x02\u01BE\u1612\x03\x02\x02\x02\u01C0" +
		"\u1618\x03\x02\x02\x02\u01C2\u161A\x03\x02\x02\x02\u01C4\u161C\x03\x02" +
		"\x02\x02\u01C6\u1663\x03\x02\x02\x02\u01C8\u168A\x03\x02\x02\x02\u01CA" +
		"\u169A\x03\x02\x02\x02\u01CC\u169C\x03\x02\x02\x02\u01CE\u169E\x03\x02" +
		"\x02\x02\u01D0\u16D5\x03\x02\x02\x02\u01D2\u16D7\x03\x02\x02\x02\u01D4" +
		"\u16D9\x03\x02\x02\x02\u01D6\u16F4\x03\x02\x02\x02\u01D8\u16F6\x03\x02" +
		"\x02\x02\u01DA\u16F8\x03\x02\x02\x02\u01DC\u1722\x03\x02\x02\x02\u01DE" +
		"\u1724\x03\x02\x02\x02\u01E0\u176A\x03\x02\x02\x02\u01E2\u176C\x03\x02" +
		"\x02\x02\u01E4\u176E\x03\x02\x02\x02\u01E6\u1770\x03\x02\x02\x02\u01E8" +
		"\u1792\x03\x02\x02\x02\u01EA\u17AF\x03\x02\x02\x02\u01EC\u17B1\x03\x02" +
		"\x02\x02\u01EE\u17D0\x03\x02\x02\x02\u01F0\u17E7\x03\x02\x02\x02\u01F2" +
		"\u180B\x03\x02\x02\x02\u01F4\u1828\x03\x02\x02\x02\u01F6\u182A\x03\x02" +
		"\x02\x02\u01F8\u1844\x03\x02\x02\x02\u01FA\u1846\x03\x02\x02\x02\u01FC" +
		"\u1860\x03\x02\x02\x02\u01FE\u1869\x03\x02\x02\x02\u0200\u18F4\x03\x02" +
		"\x02\x02\u0202\u1922\x03\x02\x02\x02\u0204\u1924\x03\x02\x02\x02\u0206" +
		"\u1926\x03\x02\x02\x02\u0208\u1948\x03\x02\x02\x02\u020A\u1968\x03\x02" +
		"\x02\x02\u020C\u196A\x03\x02\x02\x02\u020E\u196C\x03\x02\x02\x02\u0210" +
		"\u0213\x05\f\x07\x02\u0211\u0213\x05\x06\x04\x02\u0212\u0210\x03\x02\x02" +
		"\x02\u0212\u0211\x03\x02\x02\x02\u0213\u0216\x03\x02\x02\x02\u0214\u0212" +
		"\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02\u0215\u0217\x03\x02\x02\x02" +
		"\u0216\u0214\x03\x02\x02\x02\u0217\u0218\x07\x02\x02\x03\u0218\x03\x03" +
		"\x02\x02\x02\u0219\u0226\x07\u0184\x02\x02\u021A\u0226\x07\u014A\x02\x02" +
		"\u021B\u0226\x07\u014B\x02\x02\u021C\u0226\x07\xBA\x02\x02\u021D\u0226" +
		"\x07\xBB\x02\x02\u021E\u0226\x07\xE3\x02\x02\u021F\u0226\x07\xE4\x02\x02" +
		"\u0220\u0226\x07\u0118\x02\x02\u0221\u0226\x07\u0119\x02\x02\u0222\u0223" +
		"\x07\x07\x02\x02\u0223\u0224\x07\u01A5\x02\x02\u0224\u0226\x07\u01A0\x02" +
		"\x02\u0225\u0219\x03\x02\x02\x02\u0225\u021A\x03\x02\x02\x02\u0225\u021B" +
		"\x03\x02\x02\x02\u0225\u021C\x03\x02\x02\x02\u0225\u021D\x03\x02\x02\x02" +
		"\u0225\u021E\x03\x02\x02\x02\u0225\u021F\x03\x02\x02\x02\u0225\u0220\x03" +
		"\x02\x02\x02\u0225\u0221\x03\x02\x02\x02\u0225\u0222\x03\x02\x02\x02\u0226" +
		"\x05\x03\x02\x02\x02\u0227\u022E\x07\u01A5\x02\x02\u0228\u022E\x07\u01A6" +
		"\x02\x02\u0229\u022E\x07\u01A4\x02\x02\u022A\u022E\x07\u018F\x02\x02\u022B" +
		"\u022E\x07\u0190\x02\x02\u022C\u022E\x05\n\x06\x02\u022D\u0227\x03\x02" +
		"\x02\x02\u022D\u0228\x03\x02\x02\x02\u022D\u0229\x03\x02\x02\x02\u022D" +
		"\u022A\x03\x02\x02\x02\u022D\u022B\x03\x02\x02\x02\u022D\u022C\x03\x02" +
		"\x02\x02\u022E\x07\x03\x02\x02\x02\u022F\u0234\x07\u01A5\x02\x02\u0230" +
		"\u0234\x07\u01A6\x02\x02\u0231\u0234\x07\u01A4\x02\x02\u0232\u0234\x05" +
		"\n\x06\x02\u0233\u022F\x03\x02\x02\x02\u0233\u0230\x03\x02\x02\x02\u0233" +
		"\u0231\x03\x02\x02\x02\u0233\u0232\x03\x02\x02\x02\u0234\t\x03\x02\x02" +
		"\x02\u0235\u0239\x07\u0187\x02\x02\u0236\u0238\n\x02\x02\x02\u0237\u0236" +
		"\x03\x02\x02\x02\u0238\u023B\x03\x02\x02\x02\u0239\u0237\x03\x02\x02\x02" +
		"\u0239\u023A\x03\x02\x02\x02\u023A\u023C\x03\x02\x02\x02\u023B\u0239\x03" +
		"\x02\x02\x02\u023C\u0246\x07\u01A6\x02\x02\u023D\u0241\x07\u0188\x02\x02" +
		"\u023E\u0240\n\x02\x02\x02\u023F\u023E\x03\x02\x02\x02\u0240\u0243\x03" +
		"\x02\x02\x02\u0241\u023F\x03\x02\x02\x02\u0241\u0242\x03\x02\x02\x02\u0242" +
		"\u0244\x03\x02\x02\x02\u0243\u0241\x03\x02\x02\x02\u0244\u0246\x07\u01A6" +
		"\x02\x02\u0245\u0235\x03\x02\x02\x02\u0245\u023D\x03\x02\x02\x02\u0246" +
		"\v\x03\x02\x02\x02\u0247\u0249\x05\u011A\x8E\x02\u0248\u024A\x05\u0138" +
		"\x9D\x02\u0249\u0248\x03\x02\x02\x02\u0249\u024A\x03\x02\x02\x02\u024A" +
		"\u024C\x03\x02\x02\x02\u024B\u024D\x05f4\x02\u024C\u024B\x03\x02\x02\x02" +
		"\u024C\u024D\x03\x02\x02\x02\u024D\u024F\x03\x02\x02\x02\u024E\u0250\x05" +
		"\x0E\b\x02\u024F\u024E\x03\x02\x02\x02\u024F\u0250\x03\x02\x02\x02\u0250" +
		"\r\x03\x02\x02\x02\u0251\u0253\x05\x10\t\x02\u0252\u0254\x05\x14\v\x02" +
		"\u0253\u0252\x03\x02\x02\x02\u0253\u0254\x03\x02\x02\x02\u0254\u026D\x03" +
		"\x02\x02\x02\u0255\u0259\x05\x12\n\x02\u0256\u0258\x05\x06\x04\x02\u0257" +
		"\u0256\x03\x02\x02\x02\u0258\u025B\x03\x02\x02\x02\u0259\u0257\x03\x02" +
		"\x02\x02\u0259\u025A\x03\x02\x02\x02\u025A\u025D\x03\x02\x02\x02\u025B" +
		"\u0259\x03\x02\x02\x02\u025C\u0255\x03\x02\x02\x02\u025D\u0260\x03\x02" +
		"\x02\x02\u025E\u025C\x03\x02\x02\x02\u025E\u025F\x03\x02\x02\x02\u025F" +
		"\u026E\x03\x02\x02\x02\u0260\u025E\x03\x02\x02\x02\u0261\u0265\x05\x1A" +
		"\x0E\x02\u0262\u0264\x05\x06\x04\x02\u0263\u0262\x03\x02\x02\x02\u0264" +
		"\u0267\x03\x02\x02\x02\u0265\u0263\x03\x02\x02\x02\u0265\u0266\x03\x02" +
		"\x02\x02\u0266\u0269\x03\x02\x02\x02\u0267\u0265\x03\x02\x02\x02\u0268" +
		"\u0261\x03\x02\x02\x02\u0269\u026C\x03\x02\x02\x02\u026A\u0268\x03\x02" +
		"\x02\x02\u026A\u026B\x03\x02\x02\x02\u026B\u026E\x03\x02\x02\x02\u026C" +
		"\u026A\x03\x02\x02\x02\u026D\u025E\x03\x02\x02\x02\u026D\u026A\x03\x02" +
		"\x02\x02\u026E\u027D\x03\x02\x02\x02\u026F\u0271\x07\x83\x02\x02\u0270" +
		"\u0272\x05\x06\x04\x02\u0271\u0270\x03\x02\x02\x02\u0272\u0273\x03\x02" +
		"\x02\x02\u0273\u0271\x03\x02\x02\x02\u0273\u0274\x03\x02\x02\x02\u0274" +
		"\u0275\x03\x02\x02\x02\u0275\u0277\x07\u0115\x02\x02\u0276\u0278\x05\x06" +
		"\x04\x02\u0277\u0276\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279" +
		"\u0277\x03\x02\x02\x02\u0279\u027A\x03\x02\x02\x02\u027A\u027B\x03\x02" +
		"\x02\x02\u027B\u027C\x05\u0120\x91\x02\u027C\u027E\x03\x02\x02\x02\u027D" +
		"\u026F\x03\x02\x02\x02\u027D\u027E\x03\x02\x02\x02\u027E\u0282\x03\x02" +
		"\x02\x02\u027F\u0281\x05.\x18\x02\u0280\u027F\x03\x02\x02\x02\u0281\u0284" +
		"\x03\x02\x02\x02\u0282\u0280\x03\x02\x02\x02\u0282\u0283\x03\x02\x02\x02" +
		"\u0283\x0F\x03\x02\x02\x02\u0284\u0282\x03\x02\x02\x02\u0285\u0287\x07" +
		"\u0114\x02\x02\u0286\u0288\x05\x06\x04\x02\u0287\u0286\x03\x02\x02\x02" +
		"\u0288\u0289\x03\x02\x02\x02\u0289\u0287\x03\x02\x02\x02\u0289\u028A\x03" +
		"\x02\x02\x02\u028A\u028B\x03\x02\x02\x02\u028B\u0293\x07s\x02\x02\u028C" +
		"\u028E\x05\x06\x04\x02\u028D\u028C\x03\x02\x02\x02\u028E\u028F\x03\x02" +
		"\x02\x02\u028F\u028D\x03\x02\x02\x02\u028F\u0290\x03\x02\x02\x02\u0290" +
		"\u0291\x03\x02\x02\x02\u0291\u0292\x05*\x16\x02\u0292\u0294\x03\x02\x02" +
		"\x02\u0293\u028D\x03\x02\x02\x02\u0293\u0294\x03\x02\x02\x02\u0294\u029C" +
		"\x03\x02\x02\x02\u0295\u0297\x05\x06\x04\x02\u0296\u0295\x03\x02\x02\x02" +
		"\u0297\u0298\x03\x02\x02\x02\u0298\u0296\x03\x02\x02\x02\u0298\u0299\x03" +
		"\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A\u029B\x05,\x17\x02\u029B" +
		"\u029D\x03\x02\x02\x02\u029C\u0296\x03\x02\x02\x02\u029C\u029D\x03\x02" +
		"\x02\x02\u029D\u02A1\x03\x02\x02\x02\u029E\u02A0\x05\x06\x04\x02\u029F" +
		"\u029E\x03\x02\x02\x02\u02A0\u02A3\x03\x02\x02\x02\u02A1\u029F\x03\x02" +
		"\x02\x02\u02A1\u02A2\x03\x02\x02\x02\u02A2\u02A4\x03\x02\x02\x02\u02A3" +
		"\u02A1\x03\x02\x02\x02\u02A4\u02A8\x07\u019D\x02\x02\u02A5\u02A7\x05\x06" +
		"\x04\x02\u02A6\u02A5\x03\x02\x02\x02\u02A7\u02AA\x03\x02\x02\x02\u02A8" +
		"\u02A6\x03\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\x11\x03\x02\x02" +
		"\x02\u02AA\u02A8\x03\x02\x02\x02\u02AB\u02AC\x05$\x13\x02\u02AC\x13\x03" +
		"\x02\x02\x02\u02AD\u02B1\x07h\x02\x02\u02AE\u02B0\x05\x06\x04\x02\u02AF" +
		"\u02AE\x03\x02\x02\x02\u02B0\u02B3\x03\x02\x02\x02\u02B1\u02AF\x03\x02" +
		"\x02\x02\u02B1\u02B2\x03\x02\x02\x02\u02B2\u02B4\x03\x02\x02\x02\u02B3" +
		"\u02B1\x03\x02\x02\x02\u02B4\u02B8\x07\u019D\x02\x02\u02B5\u02B7\x05\x06" +
		"\x04\x02\u02B6\u02B5\x03\x02\x02\x02\u02B7\u02BA\x03\x02\x02\x02\u02B8" +
		"\u02B6\x03\x02\x02\x02\u02B8\u02B9\x03\x02\x02\x02\u02B9\u02C2\x03\x02" +
		"\x02\x02\u02BA\u02B8\x03\x02\x02\x02\u02BB\u02BF\x05\x16\f\x02\u02BC\u02BE" +
		"\x05\x06\x04\x02\u02BD\u02BC\x03\x02\x02\x02\u02BE\u02C1\x03\x02\x02\x02" +
		"\u02BF\u02BD\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02\x02\u02C0\u02C3\x03" +
		"\x02\x02\x02\u02C1\u02BF\x03\x02\x02\x02\u02C2\u02BB\x03\x02\x02\x02\u02C3" +
		"\u02C4\x03\x02\x02\x02\u02C4\u02C2\x03\x02\x02\x02\u02C4\u02C5\x03\x02" +
		"\x02\x02\u02C5\u02C6\x03\x02\x02\x02\u02C6\u02C8\x07\x83\x02\x02\u02C7" +
		"\u02C9\x05\x06\x04\x02\u02C8\u02C7\x03\x02\x02\x02\u02C9\u02CA\x03\x02" +
		"\x02\x02\u02CA\u02C8\x03\x02\x02\x02\u02CA\u02CB\x03\x02\x02\x02\u02CB" +
		"\u02CC\x03\x02\x02\x02\u02CC\u02D0\x07g\x02\x02\u02CD\u02CF\x05\x06\x04" +
		"\x02\u02CE\u02CD\x03\x02\x02\x02\u02CF\u02D2\x03\x02\x02\x02\u02D0\u02CE" +
		"\x03\x02\x02\x02\u02D0\u02D1\x03\x02\x02\x02\u02D1\u02D3\x03\x02\x02\x02" +
		"\u02D2\u02D0\x03\x02\x02\x02\u02D3\u02D7\x07\u019D\x02\x02\u02D4\u02D6" +
		"\x05\x06\x04\x02\u02D5\u02D4\x03\x02\x02\x02\u02D6\u02D9\x03\x02\x02\x02" +
		"\u02D7\u02D5\x03\x02\x02\x02\u02D7\u02D8\x03\x02\x02\x02\u02D8\x15\x03" +
		"\x02\x02\x02\u02D9\u02D7\x03\x02\x02\x02\u02DA\u02DB\x05$\x13\x02\u02DB" +
		"\u02E5\x05\x1E\x10\x02\u02DC\u02DE\x05\x06\x04\x02\u02DD\u02DC\x03\x02" +
		"\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF\u02DD\x03\x02\x02\x02\u02DF" +
		"\u02E0\x03\x02\x02\x02\u02E0\u02E1\x03\x02\x02\x02\u02E1\u02E2\x05\x18" +
		"\r\x02\u02E2\u02E4\x03\x02\x02\x02\u02E3\u02DD\x03\x02\x02\x02\u02E4\u02E7" +
		"\x03\x02\x02\x02\u02E5\u02E3\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02" +
		"\u02E6\x17\x03\x02\x02\x02\u02E7\u02E5\x03\x02\x02\x02\u02E8\u02E9\x05" +
		"\x1A\x0E\x02\u02E9\x19\x03\x02\x02\x02\u02EA\u02EE\x05&\x14\x02\u02EB" +
		"\u02ED\x05\x06\x04\x02\u02EC\u02EB\x03\x02\x02\x02\u02ED\u02F0\x03\x02" +
		"\x02\x02\u02EE\u02EC\x03\x02\x02\x02\u02EE\u02EF\x03\x02\x02\x02\u02EF" +
		"\u02F1\x03\x02\x02\x02\u02F0\u02EE\x03\x02\x02\x02\u02F1\u02F5\x07\u019D" +
		"\x02\x02\u02F2\u02F4\x05\x06\x04\x02\u02F3\u02F2\x03\x02\x02\x02\u02F4" +
		"\u02F7\x03\x02\x02\x02\u02F5\u02F3\x03\x02\x02\x02\u02F5\u02F6\x03\x02" +
		"\x02\x02\u02F6\u0301\x03\x02\x02\x02\u02F7\u02F5\x03\x02\x02\x02\u02F8" +
		"\u02FC\x05\x1C\x0F\x02\u02F9\u02FB\x05\x06\x04\x02\u02FA\u02F9\x03\x02" +
		"\x02\x02\u02FB\u02FE\x03\x02\x02\x02\u02FC\u02FA\x03\x02\x02\x02\u02FC" +
		"\u02FD\x03\x02\x02\x02\u02FD\u0300\x03\x02\x02\x02\u02FE\u02FC\x03\x02" +
		"\x02\x02\u02FF\u02F8\x03\x02\x02\x02\u0300\u0303\x03\x02\x02\x02\u0301" +
		"\u02FF\x03\x02\x02\x02\u0301\u0302\x03\x02\x02\x02\u0302\x1B\x03\x02\x02" +
		"\x02\u0303\u0301\x03\x02\x02\x02\u0304\u0308\x050\x19\x02\u0305\u0307" +
		"\x05\x06\x04\x02\u0306\u0305\x03\x02\x02\x02\u0307\u030A\x03\x02\x02\x02" +
		"\u0308\u0306\x03\x02\x02\x02\u0308\u0309\x03\x02\x02\x02\u0309\u030C\x03" +
		"\x02\x02\x02\u030A\u0308\x03\x02\x02\x02\u030B\u0304\x03\x02\x02\x02\u030C" +
		"\u030D\x03\x02\x02\x02\u030D\u030B\x03\x02\x02\x02\u030D\u030E\x03\x02" +
		"\x02\x02\u030E\u0312\x03\x02\x02\x02\u030F\u0311\x05\x06\x04\x02\u0310" +
		"\u030F\x03\x02\x02\x02\u0311\u0314\x03\x02\x02\x02\u0312\u0310\x03\x02" +
		"\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u0315\x03\x02\x02\x02\u0314" +
		"\u0312\x03\x02\x02\x02\u0315\u0319\x07\u019D\x02\x02\u0316\u0318\x05\x06" +
		"\x04\x02\u0317\u0316\x03\x02\x02\x02\u0318\u031B\x03\x02\x02\x02\u0319" +
		"\u0317\x03\x02\x02\x02\u0319\u031A\x03\x02\x02\x02\u031A\x1D\x03\x02\x02" +
		"\x02\u031B\u0319\x03\x02\x02\x02\u031C\u0324\x07\u0176\x02\x02\u031D\u031F" +
		"\x05\x06\x04\x02\u031E\u031D\x03\x02\x02\x02\u031F\u0320\x03\x02\x02\x02" +
		"\u0320\u031E\x03\x02\x02\x02\u0320\u0321\x03\x02\x02\x02\u0321\u0322\x03" +
		"\x02\x02\x02\u0322\u0323\x07\xB4\x02\x02\u0323\u0325\x03\x02\x02\x02\u0324" +
		"\u031E\x03\x02\x02\x02\u0324\u0325\x03\x02\x02\x02\u0325\u0327\x03\x02" +
		"\x02\x02\u0326\u0328\x05\x06\x04\x02\u0327\u0326\x03\x02\x02\x02\u0328" +
		"\u0329\x03\x02\x02\x02\u0329\u0327\x03\x02\x02\x02\u0329\u032A\x03\x02" +
		"\x02\x02\u032A\u036B\x03\x02\x02\x02\u032B\u0333\x07\x06\x02\x02\u032C" +
		"\u032E\x05\x06\x04\x02\u032D\u032C\x03\x02\x02\x02\u032E\u032F\x03\x02" +
		"\x02\x02\u032F\u032D\x03\x02\x02\x02\u032F\u0330\x03\x02\x02\x02\u0330" +
		"\u0331\x03\x02\x02\x02\u0331\u0332\x07\u014D\x02\x02\u0332\u0334\x03\x02" +
		"\x02\x02\u0333\u032D\x03\x02\x02\x02\u0333\u0334\x03\x02\x02\x02\u0334" +
		"\u0336\x03\x02\x02\x02\u0335\u0337\x05\x06\x04\x02\u0336\u0335\x03\x02" +
		"\x02\x02\u0337\u0338\x03\x02\x02\x02\u0338\u0336\x03\x02\x02\x02\u0338" +
		"\u0339\x03\x02\x02\x02\u0339\u033A\x03\x02\x02\x02\u033A\u033C\t\x03\x02" +
		"\x02\u033B\u033D\x05\x06\x04\x02\u033C\u033B\x03\x02\x02\x02\u033D\u033E" +
		"\x03\x02\x02\x02\u033E\u033C\x03\x02\x02\x02\u033E\u033F\x03\x02\x02\x02" +
		"\u033F\u0340\x03\x02\x02\x02\u0340\u0348\x07\u0114\x02\x02\u0341\u0343" +
		"\x05\x06\x04\x02\u0342\u0341\x03\x02\x02\x02\u0343\u0344\x03\x02\x02\x02" +
		"\u0344\u0342\x03\x02\x02\x02\u0344\u0345\x03\x02\x02\x02\u0345\u0346\x03" +
		"\x02\x02\x02\u0346\u0347\x07\xFA\x02\x02\u0347\u0349\x03\x02\x02\x02\u0348" +
		"\u0342\x03\x02\x02\x02\u0348\u0349\x03\x02\x02\x02\u0349\u034B\x03\x02" +
		"\x02\x02\u034A\u034C\x05\x06\x04\x02\u034B\u034A\x03\x02\x02\x02\u034C" +
		"\u034D\x03\x02\x02\x02\u034D\u034B\x03\x02\x02\x02\u034D\u034E\x03\x02" +
		"\x02\x02\u034E\u034F\x03\x02\x02\x02\u034F\u0353\x05\"\x12\x02\u0350\u0352" +
		"\x05\x06\x04\x02\u0351\u0350\x03\x02\x02\x02\u0352\u0355\x03\x02\x02\x02" +
		"\u0353\u0351\x03\x02\x02\x02\u0353\u0354\x03\x02\x02\x02\u0354\u0356\x03" +
		"\x02\x02\x02\u0355\u0353\x03\x02\x02\x02\u0356\u035A\x07\u019D\x02\x02" +
		"\u0357\u0359\x05\x06\x04\x02\u0358\u0357\x03\x02\x02\x02\u0359\u035C\x03" +
		"\x02\x02\x02\u035A\u0358\x03\x02\x02\x02\u035A\u035B\x03\x02\x02\x02\u035B" +
		"\u036C\x03\x02\x02\x02\u035C\u035A\x03\x02\x02\x02\u035D\u035F\x07!\x02" +
		"\x02\u035E\u0360\x05\x06\x04\x02\u035F\u035E\x03\x02\x02\x02\u0360\u0361" +
		"\x03\x02\x02\x02\u0361\u035F\x03\x02\x02\x02\u0361\u0362\x03\x02\x02\x02" +
		"\u0362\u0363\x03\x02\x02\x02\u0363\u0365\x07\u0128\x02\x02\u0364\u0366" +
		"\x05\x06\x04\x02\u0365\u0364\x03\x02\x02\x02\u0366\u0367\x03\x02\x02\x02" +
		"\u0367\u0365\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02\u0368\u0369\x03" +
		"\x02\x02\x02\u0369\u036A\x05 \x11\x02\u036A\u036C\x03\x02\x02\x02\u036B" +
		"\u032B\x03\x02\x02\x02\u036B\u035D\x03\x02\x02\x02\u036C\x1F\x03\x02\x02" +
		"\x02\u036D\u036E\x05\u0158\xAD\x02\u036E!\x03\x02\x02\x02\u036F\u0379" +
		"\x05\u01C2\xE2\x02\u0370\u0372\x05\x06\x04\x02\u0371\u0370\x03\x02\x02" +
		"\x02\u0372\u0373\x03\x02\x02\x02\u0373\u0371\x03\x02\x02\x02\u0373\u0374" +
		"\x03\x02\x02\x02\u0374\u0375\x03\x02\x02\x02\u0375\u0376\x05\u01C2\xE2" +
		"\x02\u0376\u0378\x03\x02\x02\x02\u0377\u0371\x03\x02\x02\x02\u0378\u037B" +
		"\x03\x02\x02\x02\u0379\u0377\x03\x02\x02\x02\u0379\u037A\x03\x02\x02\x02" +
		"\u037A\u0381\x03\x02\x02\x02\u037B\u0379\x03\x02\x02\x02\u037C\u0381\x07" +
		"\xC9\x02\x02\u037D\u0381\x07\u0100\x02\x02\u037E\u0381\x07\xCF\x02\x02" +
		"\u037F\u0381\x07\x9D\x02\x02\u0380\u036F\x03\x02\x02\x02\u0380\u037C\x03" +
		"\x02\x02\x02\u0380\u037D\x03\x02\x02\x02\u0380\u037E\x03\x02\x02\x02\u0380" +
		"\u037F\x03\x02\x02\x02\u0381#\x03\x02\x02\x02\u0382\u0384\x05(\x15\x02" +
		"\u0383\u0385\x05\x06\x04\x02\u0384\u0383\x03\x02\x02\x02\u0385\u0386\x03" +
		"\x02\x02\x02\u0386\u0384\x03\x02\x02\x02\u0386\u0387\x03\x02\x02\x02\u0387" +
		"\u0388\x03\x02\x02\x02\u0388\u0390\x07\u013A\x02\x02\u0389\u038B\x05\x06" +
		"\x04\x02\u038A\u0389\x03\x02\x02\x02\u038B\u038C\x03\x02\x02\x02\u038C" +
		"\u038A\x03\x02\x02\x02\u038C\u038D\x03\x02\x02\x02\u038D\u038E\x03\x02" +
		"\x02\x02\u038E\u038F\x05\u0152\xAA\x02\u038F\u0391\x03\x02\x02\x02\u0390" +
		"\u038A\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391\u0395\x03\x02" +
		"\x02\x02\u0392\u0394\x05\x06\x04\x02";
	private static readonly _serializedATNSegment4: string =
		"\u0393\u0392\x03\x02\x02\x02\u0394\u0397\x03\x02\x02\x02\u0395\u0393\x03" +
		"\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396\u0398\x03\x02\x02\x02\u0397" +
		"\u0395\x03\x02\x02\x02\u0398\u039C\x07\u019D\x02\x02\u0399\u039B\x05\x06" +
		"\x04\x02\u039A\u0399\x03\x02\x02\x02\u039B\u039E\x03\x02\x02\x02\u039C" +
		"\u039A\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02\u039D%\x03\x02\x02" +
		"\x02\u039E\u039C\x03\x02\x02\x02\u039F\u03A0\x07\u01A3\x02\x02\u03A0\'" +
		"\x03\x02\x02\x02\u03A1\u03A2\x07\u01A3\x02\x02\u03A2)\x03\x02\x02\x02" +
		"\u03A3\u03A5\x07\u0177\x02\x02\u03A4\u03A6\x05\x06\x04\x02\u03A5\u03A4" +
		"\x03\x02\x02\x02\u03A6\u03A7\x03\x02\x02\x02\u03A7\u03A5\x03\x02\x02\x02" +
		"\u03A7\u03A8\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02\u03A9\u03B3\x05" +
		"\u0158\xAD\x02\u03AA\u03AC\x05\x06\x04\x02\u03AB\u03AA\x03\x02\x02\x02" +
		"\u03AC\u03AD\x03\x02\x02\x02\u03AD\u03AB\x03\x02\x02\x02\u03AD\u03AE\x03" +
		"\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03B0\x05\u0158\xAD\x02" +
		"\u03B0\u03B2\x03\x02\x02\x02\u03B1\u03AB\x03\x02\x02\x02\u03B2\u03B5\x03" +
		"\x02\x02\x02\u03B3\u03B1\x03\x02\x02\x02\u03B3\u03B4\x03\x02\x02\x02\u03B4" +
		"+\x03\x02\x02\x02\u03B5\u03B3\x03\x02\x02\x02\u03B6\u03B8\x07\xB3\x02" +
		"\x02\u03B7\u03B9\x05\x06\x04\x02\u03B8\u03B7\x03\x02\x02\x02\u03B9\u03BA" +
		"\x03\x02\x02\x02\u03BA\u03B8\x03\x02\x02\x02\u03BA\u03BB\x03\x02\x02\x02" +
		"\u03BB\u03BC\x03\x02\x02\x02\u03BC\u03BD\x05\u0158\xAD\x02\u03BD-\x03" +
		"\x02\x02\x02\u03BE\u03C2\x05\u01E8\xF5\x02\u03BF\u03C1\x05\x06\x04\x02" +
		"\u03C0\u03BF\x03\x02\x02\x02\u03C1\u03C4\x03\x02\x02\x02\u03C2\u03C0\x03" +
		"\x02\x02\x02\u03C2\u03C3\x03\x02\x02\x02\u03C3\u03C5\x03\x02\x02\x02\u03C4" +
		"\u03C2\x03\x02\x02\x02\u03C5\u03C6\x07\u019D\x02\x02\u03C6\u03D2\x03\x02" +
		"\x02\x02\u03C7\u03CB\x05\u01EE\xF8\x02\u03C8\u03CA\x05\x06\x04\x02\u03C9" +
		"\u03C8\x03\x02\x02\x02\u03CA\u03CD\x03\x02\x02\x02\u03CB\u03C9\x03\x02" +
		"\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC\u03CE\x03\x02\x02\x02\u03CD" +
		"\u03CB\x03\x02\x02\x02\u03CE\u03CF\x07\u019D\x02\x02\u03CF\u03D2\x03\x02" +
		"\x02\x02\u03D0\u03D2\x05\x06\x04\x02\u03D1\u03BE\x03\x02\x02\x02\u03D1" +
		"\u03C7\x03\x02\x02\x02\u03D1\u03D0\x03\x02\x02\x02\u03D2/\x03\x02\x02" +
		"\x02\u03D3\u03D4\x052\x1A\x02\u03D41\x03\x02\x02\x02\u03D5\u03DC\x05<" +
		"\x1F\x02\u03D6\u03DC\x05> \x02\u03D7\u03DC\x05@!\x02\u03D8\u03DC\x05B" +
		"\"\x02\u03D9\u03DC\x05D#\x02\u03DA\u03DC\x058\x1D\x02\u03DB\u03D5\x03" +
		"\x02\x02\x02\u03DB\u03D6\x03\x02\x02\x02\u03DB\u03D7\x03\x02\x02\x02\u03DB" +
		"\u03D8\x03\x02\x02\x02\u03DB\u03D9\x03\x02\x02\x02\u03DB\u03DA\x03\x02" +
		"\x02\x02\u03DC3\x03\x02\x02\x02\u03DD\u03EB\x05d3\x02\u03DE\u03E0\x05" +
		"\x06\x04\x02\u03DF\u03DE\x03\x02\x02\x02\u03E0\u03E1\x03\x02\x02\x02\u03E1" +
		"\u03DF\x03\x02\x02\x02\u03E1\u03E2\x03\x02\x02\x02\u03E2\u03E3\x03\x02" +
		"\x02\x02\u03E3\u03E5\x07\xF2\x02\x02\u03E4\u03E6\x05\x06\x04\x02\u03E5" +
		"\u03E4\x03\x02\x02\x02\u03E6\u03E7\x03\x02\x02\x02\u03E7\u03E5\x03\x02" +
		"\x02\x02\u03E7\u03E8\x03\x02\x02\x02\u03E8\u03E9\x03\x02\x02\x02\u03E9" +
		"\u03EA\x05d3\x02\u03EA\u03EC\x03\x02\x02\x02\u03EB\u03DF\x03\x02\x02\x02" +
		"\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03FE\x03\x02\x02\x02\u03ED\u03EF\x07" +
		"\xF2\x02\x02\u03EE\u03F0\x05\x06\x04\x02\u03EF\u03EE\x03\x02\x02\x02\u03F0" +
		"\u03F1\x03\x02\x02\x02\u03F1\u03EF\x03\x02\x02\x02\u03F1\u03F2\x03\x02" +
		"\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3\u03FB\x05d3\x02\u03F4\u03F6" +
		"\x05\x06\x04\x02\u03F5\u03F4\x03\x02\x02\x02\u03F6\u03F7\x03\x02\x02\x02" +
		"\u03F7\u03F5\x03\x02\x02\x02\u03F7\u03F8\x03\x02\x02\x02\u03F8\u03F9\x03" +
		"\x02\x02\x02\u03F9\u03FA\x05d3\x02\u03FA\u03FC\x03\x02\x02\x02\u03FB\u03F5" +
		"\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC\u03FE\x03\x02\x02\x02" +
		"\u03FD\u03DD\x03\x02\x02\x02\u03FD\u03ED\x03\x02\x02\x02\u03FE5\x03\x02" +
		"\x02\x02\u03FF\u040D\x05b2\x02\u0400\u0402\x05\x06\x04\x02\u0401\u0400" +
		"\x03\x02\x02\x02\u0402\u0403\x03\x02\x02\x02\u0403\u0401\x03\x02\x02\x02" +
		"\u0403\u0404\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0407\x07" +
		"\xF2\x02\x02\u0406\u0408\x05\x06\x04\x02\u0407\u0406\x03\x02\x02\x02\u0408" +
		"\u0409\x03\x02\x02\x02\u0409\u0407\x03\x02\x02\x02\u0409\u040A\x03\x02" +
		"\x02\x02\u040A\u040B\x03\x02\x02\x02\u040B\u040C\x05b2\x02\u040C\u040E" +
		"\x03\x02\x02\x02\u040D\u0401\x03\x02\x02\x02\u040D\u040E\x03\x02\x02\x02" +
		"\u040E\u0420\x03\x02\x02\x02\u040F\u0411\x07\xF2\x02\x02\u0410\u0412\x05" +
		"\x06\x04\x02\u0411\u0410\x03\x02\x02\x02\u0412\u0413\x03\x02\x02\x02\u0413" +
		"\u0411\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414\u0415\x03\x02" +
		"\x02\x02\u0415\u041D\x05b2\x02\u0416\u0418\x05\x06\x04\x02\u0417\u0416" +
		"\x03\x02\x02\x02\u0418\u0419\x03\x02\x02\x02\u0419\u0417\x03\x02\x02\x02" +
		"\u0419\u041A\x03\x02\x02\x02\u041A\u041B\x03\x02\x02\x02\u041B\u041C\x05" +
		"b2\x02\u041C\u041E\x03\x02\x02\x02\u041D\u0417\x03\x02\x02\x02\u041D\u041E" +
		"\x03\x02\x02\x02\u041E\u0420\x03\x02\x02\x02\u041F\u03FF\x03\x02\x02\x02" +
		"\u041F\u040F\x03\x02\x02\x02\u04207\x03\x02\x02\x02\u0421\u0423\x07\x03" +
		"\x02\x02\u0422\u0424\x05\x06\x04\x02\u0423\u0422\x03\x02\x02\x02\u0424" +
		"\u0425\x03\x02\x02\x02\u0425\u0423\x03\x02\x02\x02\u0425\u0426\x03\x02" +
		"\x02\x02\u0426\u0427\x03\x02\x02\x02\u0427\u0429\x05^0\x02\u0428\u042A" +
		"\x05\x06\x04\x02\u0429\u0428\x03\x02\x02\x02\u042A\u042B\x03\x02\x02\x02" +
		"\u042B\u0429\x03\x02\x02\x02\u042B\u042C\x03\x02\x02\x02\u042C\u042D\x03" +
		"\x02\x02\x02\u042D\u042F\x07\xAF\x02\x02\u042E\u0430\x05\x06\x04\x02\u042F" +
		"\u042E\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u042F\x03\x02" +
		"\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432\u0433\x03\x02\x02\x02\u0433" +
		"\u043B\x05:\x1E\x02\u0434\u0436\x05\x06\x04\x02\u0435\u0434\x03\x02\x02" +
		"\x02\u0436\u0437\x03\x02\x02\x02\u0437\u0435\x03\x02\x02\x02\u0437\u0438" +
		"\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439\u043A\x054\x1B\x02" +
		"\u043A\u043C\x03\x02\x02\x02\u043B\u0435\x03\x02\x02\x02\u043B\u043C\x03" +
		"\x02\x02\x02\u043C\u0444\x03\x02\x02\x02\u043D\u043F\x05\x06\x04\x02\u043E" +
		"\u043D\x03\x02\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440\u043E\x03\x02" +
		"\x02\x02\u0440\u0441\x03\x02\x02\x02\u0441\u0442\x03\x02\x02\x02\u0442" +
		"\u0443\x07{\x02\x02\u0443\u0445\x03\x02\x02\x02\u0444\u043E\x03\x02\x02" +
		"\x02\u0444\u0445\x03\x02\x02\x02\u04459\x03\x02\x02\x02\u0446\u0447\x07" +
		"\u01A3\x02\x02\u0447;\x03\x02\x02\x02\u0448\u044A\x07\x03\x02\x02\u0449" +
		"\u044B\x05\x06\x04\x02\u044A\u0449\x03\x02\x02\x02\u044B\u044C\x03\x02" +
		"\x02\x02\u044C\u044A\x03\x02\x02\x02\u044C\u044D\x03\x02\x02\x02\u044D" +
		"\u044E\x03\x02\x02\x02\u044E\u045C\x05^0\x02\u044F\u0451\x05\x06\x04\x02" +
		"\u0450\u044F\x03\x02\x02\x02\u0451\u0452\x03\x02\x02\x02\u0452\u0450\x03" +
		"\x02\x02\x02\u0452\u0453\x03\x02\x02\x02\u0453\u0454\x03\x02\x02\x02\u0454" +
		"\u0456\x07\xAF\x02\x02\u0455\u0457\x05\x06\x04\x02\u0456\u0455\x03\x02" +
		"\x02\x02\u0457\u0458\x03\x02\x02\x02\u0458\u0456\x03\x02\x02\x02\u0458" +
		"\u0459\x03\x02\x02\x02\u0459\u045A\x03\x02\x02\x02\u045A\u045B\x05`1\x02" +
		"\u045B\u045D\x03\x02\x02\x02\u045C\u0450\x03\x02\x02\x02\u045C\u045D\x03" +
		"\x02\x02\x02\u045D\u046B\x03\x02\x02\x02\u045E\u0460\x05\x06\x04\x02\u045F" +
		"\u045E\x03\x02\x02\x02\u0460\u0461\x03\x02\x02\x02\u0461\u045F\x03\x02" +
		"\x02\x02\u0461\u0462\x03\x02\x02\x02\u0462\u0463\x03\x02\x02\x02\u0463" +
		"\u0465\x07\u017E\x02\x02\u0464\u0466\x05\x06\x04\x02\u0465\u0464\x03\x02" +
		"\x02\x02\u0466\u0467\x03\x02\x02\x02\u0467\u0465\x03\x02\x02\x02\u0467" +
		"\u0468\x03\x02\x02\x02\u0468\u0469\x03\x02\x02\x02\u0469\u046A\x07W\x02" +
		"\x02\u046A\u046C\x03\x02\x02\x02\u046B\u045F\x03\x02\x02\x02\u046B\u046C" +
		"\x03\x02\x02\x02\u046C\u0474\x03\x02\x02\x02\u046D\u046F\x05\x06\x04\x02" +
		"\u046E\u046D\x03\x02\x02\x02\u046F\u0470\x03\x02\x02\x02\u0470\u046E\x03" +
		"\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u0472\x03\x02\x02\x02\u0472" +
		"\u0473\x056\x1C\x02\u0473\u0475\x03\x02\x02\x02\u0474\u046E\x03\x02\x02" +
		"\x02\u0474\u0475\x03\x02\x02\x02\u0475\u047D\x03\x02\x02\x02\u0476\u0478" +
		"\x05\x06\x04\x02\u0477\u0476\x03\x02\x02\x02\u0478\u0479\x03\x02\x02\x02" +
		"\u0479\u0477\x03\x02\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A\u047B\x03" +
		"\x02\x02\x02\u047B\u047C\x07{\x02\x02\u047C\u047E\x03\x02\x02\x02\u047D" +
		"\u0477\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02\u047E=\x03\x02\x02" +
		"\x02\u047F\u0481\x07\x03\x02\x02\u0480\u0482\x05\x06\x04\x02\u0481\u0480" +
		"\x03\x02\x02\x02\u0482\u0483\x03\x02\x02\x02\u0483\u0481\x03\x02\x02\x02" +
		"\u0483\u0484\x03\x02\x02\x02\u0484\u0485\x03\x02\x02\x02\u0485\u0487\x05" +
		"^0\x02\u0486\u0488\x05\x06\x04\x02\u0487\u0486\x03\x02\x02\x02\u0488\u0489" +
		"\x03\x02\x02\x02\u0489\u0487\x03\x02\x02\x02\u0489\u048A\x03\x02\x02\x02" +
		"\u048A\u048B\x03\x02\x02\x02\u048B\u048D\x07\xAF\x02\x02\u048C\u048E\x05" +
		"\x06\x04\x02\u048D\u048C\x03\x02\x02\x02\u048E\u048F\x03\x02\x02\x02\u048F" +
		"\u048D\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0491\x03\x02" +
		"\x02\x02\u0491\u0492\x05\\/\x02\u0492?\x03\x02\x02\x02\u0493\u0495\x07" +
		"\x03\x02\x02\u0494\u0496\x05\x06\x04\x02\u0495\u0494\x03\x02\x02\x02\u0496" +
		"\u0497\x03\x02\x02\x02\u0497\u0495\x03\x02\x02\x02\u0497\u0498\x03\x02" +
		"\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499\u04A1\x05^0\x02\u049A\u049C" +
		"\x05\x06\x04\x02\u049B\u049A\x03\x02\x02\x02\u049C\u049D\x03\x02\x02\x02" +
		"\u049D\u049B\x03\x02\x02\x02\u049D\u049E\x03\x02\x02\x02\u049E\u049F\x03" +
		"\x02\x02\x02\u049F\u04A0\x05N(\x02\u04A0\u04A2\x03\x02\x02\x02\u04A1\u049B" +
		"\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02\x02\u04A3\u04A1\x03\x02\x02\x02" +
		"\u04A3\u04A4\x03\x02\x02\x02\u04A4\u04AE\x03\x02\x02\x02\u04A5\u04A7\x05" +
		"\x06\x04\x02\u04A6\u04A5\x03\x02\x02\x02\u04A7\u04A8\x03\x02\x02\x02\u04A8" +
		"\u04A6\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02\u04A9\u04AC\x03\x02" +
		"\x02\x02\u04AA\u04AD\x054\x1B\x02\u04AB\u04AD\x056\x1C\x02\u04AC\u04AA" +
		"\x03\x02\x02\x02\u04AC\u04AB\x03\x02\x02\x02\u04AD\u04AF\x03\x02\x02\x02" +
		"\u04AE\u04A6\x03\x02\x02\x02\u04AE\u04AF\x03\x02\x02\x02\u04AF\u04B7\x03" +
		"\x02\x02\x02\u04B0\u04B2\x05\x06\x04\x02\u04B1\u04B0\x03\x02\x02\x02\u04B2" +
		"\u04B3\x03\x02\x02\x02\u04B3\u04B1\x03\x02\x02\x02\u04B3\u04B4\x03\x02" +
		"\x02\x02\u04B4\u04B5\x03\x02\x02\x02\u04B5\u04B6\x07{\x02\x02\u04B6\u04B8" +
		"\x03\x02\x02\x02\u04B7\u04B1\x03\x02\x02\x02\u04B7\u04B8\x03\x02\x02\x02" +
		"\u04B8A\x03\x02\x02\x02\u04B9\u04BB\x07\x03\x02\x02\u04BA\u04BC\x05\x06" +
		"\x04\x02\u04BB\u04BA\x03\x02\x02\x02\u04BC\u04BD\x03\x02\x02\x02\u04BD" +
		"\u04BB\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04C5\x03\x02" +
		"\x02\x02\u04BF\u04C1\x07U\x02\x02\u04C0\u04C2\x05\x06\x04\x02\u04C1\u04C0" +
		"\x03\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02" +
		"\u04C3\u04C4\x03\x02\x02\x02\u04C4\u04C6\x03\x02\x02\x02\u04C5\u04BF\x03" +
		"\x02\x02\x02\u04C5\u04C6\x03\x02\x02\x02\u04C6\u04C7\x03\x02\x02\x02\u04C7" +
		"\u04C9\x07\xD3\x02\x02\u04C8\u04CA\x05\x06\x04\x02\u04C9\u04C8\x03\x02" +
		"\x02\x02\u04CA\u04CB\x03\x02\x02\x02\u04CB\u04C9\x03\x02\x02\x02\u04CB" +
		"\u04CC\x03\x02\x02\x02\u04CC\u04D3\x03\x02\x02\x02\u04CD\u04CF\x07\xC2" +
		"\x02\x02\u04CE\u04D0\x05\x06\x04\x02\u04CF\u04CE\x03\x02\x02\x02\u04D0" +
		"\u04D1\x03\x02\x02\x02\u04D1\u04CF\x03\x02\x02\x02\u04D1\u04D2\x03\x02" +
		"\x02\x02\u04D2\u04D4\x03\x02\x02\x02\u04D3\u04CD\x03\x02\x02\x02\u04D3" +
		"\u04D4\x03\x02\x02\x02\u04D4\u04D5\x03\x02\x02\x02\u04D5\u04DD\x05P)\x02" +
		"\u04D6\u04D8\x05\x06\x04\x02\u04D7\u04D6\x03\x02\x02\x02\u04D8\u04D9\x03" +
		"\x02\x02\x02\u04D9\u04D7\x03\x02\x02\x02\u04D9\u04DA\x03\x02\x02\x02\u04DA" +
		"\u04DB\x03\x02\x02\x02\u04DB\u04DC\x05L\'\x02\u04DC\u04DE\x03\x02\x02" +
		"\x02\u04DD\u04D7\x03\x02\x02\x02\u04DE\u04DF\x03\x02\x02\x02\u04DF\u04DD" +
		"\x03\x02\x02\x02\u04DF\u04E0\x03\x02\x02\x02\u04E0\u04EA\x03\x02\x02\x02" +
		"\u04E1\u04E3\x05\x06\x04\x02\u04E2\u04E1\x03\x02\x02\x02\u04E3\u04E4\x03" +
		"\x02\x02\x02\u04E4\u04E2\x03\x02\x02\x02\u04E4\u04E5\x03\x02\x02\x02\u04E5" +
		"\u04E8\x03\x02\x02\x02\u04E6\u04E9\x054\x1B\x02\u04E7\u04E9\x056\x1C\x02" +
		"\u04E8\u04E6\x03\x02\x02\x02\u04E8\u04E7\x03\x02\x02\x02\u04E9\u04EB\x03" +
		"\x02\x02\x02\u04EA\u04E2\x03\x02\x02\x02\u04EA\u04EB\x03\x02\x02\x02\u04EB" +
		"\u04F3\x03\x02\x02\x02\u04EC\u04EE\x05\x06\x04\x02\u04ED\u04EC\x03\x02" +
		"\x02\x02\u04EE\u04EF\x03\x02\x02\x02\u04EF\u04ED\x03\x02\x02\x02\u04EF" +
		"\u04F0\x03\x02\x02\x02\u04F0\u04F1\x03\x02\x02\x02\u04F1\u04F2\x07{\x02" +
		"\x02\u04F2\u04F4\x03\x02\x02\x02\u04F3\u04ED\x03\x02\x02\x02\u04F3\u04F4" +
		"\x03\x02\x02\x02\u04F4C\x03\x02\x02\x02\u04F5\u04F7\x07\x03\x02\x02\u04F6" +
		"\u04F8\x05\x06\x04\x02\u04F7\u04F6\x03\x02\x02\x02\u04F8\u04F9\x03\x02" +
		"\x02\x02\u04F9\u04F7\x03\x02\x02\x02\u04F9\u04FA\x03\x02\x02\x02\u04FA" +
		"\u04FB\x03\x02\x02\x02\u04FB\u0503\x05\u010A\x86\x02\u04FC\u04FE\x05\x06" +
		"\x04\x02\u04FD\u04FC\x03\x02\x02\x02\u04FE\u04FF\x03\x02\x02\x02\u04FF" +
		"\u04FD\x03\x02\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500\u0501\x03\x02" +
		"\x02\x02\u0501\u0502\x05F$\x02\u0502\u0504\x03\x02\x02\x02\u0503\u04FD" +
		"\x03\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504\u050C\x03\x02\x02\x02" +
		"\u0505\u0507\x05\x06\x04\x02\u0506\u0505\x03\x02\x02\x02\u0507\u0508\x03" +
		"\x02\x02\x02\u0508\u0506\x03\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509" +
		"\u050A\x03\x02\x02\x02\u050A\u050B\x054\x1B\x02\u050B\u050D\x03\x02\x02" +
		"\x02\u050C\u0506\x03\x02\x02\x02\u050C\u050D\x03\x02\x02\x02\u050D\u0515" +
		"\x03\x02\x02\x02\u050E\u0510\x05\x06\x04\x02\u050F\u050E\x03\x02\x02\x02" +
		"\u0510\u0511\x03\x02\x02\x02\u0511\u050F\x03\x02\x02\x02\u0511\u0512\x03" +
		"\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0514\x07{\x02\x02\u0514" +
		"\u0516\x03\x02\x02\x02\u0515\u050F\x03\x02\x02\x02\u0515\u0516\x03\x02" +
		"\x02\x02\u0516E\x03\x02\x02\x02\u0517\u0519\x07\x1B\x02\x02\u0518\u051A" +
		"\x05\x06\x04\x02\u0519\u0518\x03\x02\x02\x02\u051A\u051B\x03\x02\x02\x02" +
		"\u051B\u0519\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02\u051C\u051E\x03" +
		"\x02\x02\x02\u051D\u0517\x03\x02\x02\x02\u051D\u051E\x03\x02\x02\x02\u051E" +
		"\u0533\x03\x02\x02\x02\u051F\u0527\x05H%\x02\u0520\u0522\x05\x06\x04\x02" +
		"\u0521\u0520\x03\x02\x02\x02\u0522\u0523\x03\x02\x02\x02\u0523\u0521\x03" +
		"\x02\x02\x02\u0523\u0524\x03\x02\x02\x02\u0524\u0525\x03\x02\x02\x02\u0525" +
		"\u0526\x05J&\x02\u0526\u0528\x03\x02\x02\x02\u0527\u0521\x03\x02\x02\x02" +
		"\u0527\u0528\x03\x02\x02\x02\u0528\u0534\x03\x02\x02\x02\u0529\u0531\x05" +
		"J&\x02\u052A\u052C\x05\x06\x04\x02\u052B\u052A\x03\x02\x02\x02\u052C\u052D" +
		"\x03\x02\x02\x02\u052D\u052B\x03\x02\x02\x02\u052D\u052E\x03\x02\x02\x02" +
		"\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x05H%\x02\u0530\u0532\x03\x02" +
		"\x02\x02\u0531\u052B\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532" +
		"\u0534\x03\x02\x02\x02\u0533\u051F\x03\x02\x02\x02\u0533\u0529\x03\x02" +
		"\x02\x02\u0534G\x03\x02\x02\x02\u0535\u0537\x07\xDC\x02\x02\u0536\u0538" +
		"\x05\x06\x04\x02\u0537\u0536\x03\x02\x02\x02\u0538\u0539\x03\x02\x02\x02" +
		"\u0539\u0537\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A\u0541\x03" +
		"\x02\x02\x02\u053B\u053D\x07\xF3\x02\x02\u053C\u053E\x05\x06\x04\x02\u053D" +
		"\u053C\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u053D\x03\x02" +
		"\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540\u0542\x03\x02\x02\x02\u0541" +
		"\u053B\x03\x02\x02\x02\u0541\u0542\x03\x02\x02\x02\u0542\u0545\x03\x02" +
		"\x02\x02\u0543\u0546\x07\u01A1\x02\x02\u0544\u0546\x05\u0158\xAD\x02\u0545" +
		"\u0543\x03\x02\x02\x02\u0545\u0544\x03\x02\x02\x02\u0546I\x03\x02\x02" +
		"\x02\u0547\u0549\x07=\x02\x02\u0548\u054A\x05\x06\x04\x02\u0549\u0548" +
		"\x03\x02\x02\x02\u054A\u054B\x03\x02\x02\x02\u054B\u0549\x03\x02\x02\x02" +
		"\u054B\u054C\x03\x02\x02\x02\u054C\u0553\x03\x02\x02\x02\u054D\u054F\x07" +
		"\xF3\x02\x02\u054E\u0550\x05\x06\x04\x02\u054F\u054E\x03\x02\x02\x02\u0550" +
		"\u0551\x03\x02\x02\x02\u0551\u054F\x03\x02\x02\x02\u0551\u0552\x03\x02" +
		"\x02\x02\u0552\u0554\x03\x02\x02\x02\u0553\u054D\x03\x02\x02\x02\u0553" +
		"\u0554\x03\x02\x02\x02\u0554\u0557\x03\x02\x02\x02\u0555\u0558\x07\u01A1" +
		"\x02\x02\u0556\u0558\x05\u0158\xAD\x02\u0557\u0555\x03\x02\x02\x02\u0557" +
		"\u0556\x03\x02\x02\x02\u0558K\x03\x02\x02\x02\u0559\u055B\x07\xAF\x02" +
		"\x02\u055A\u055C\x05\x06\x04\x02\u055B\u055A\x03\x02\x02\x02\u055C\u055D" +
		"\x03\x02\x02\x02\u055D\u055B\x03\x02\x02\x02\u055D\u055E\x03\x02\x02\x02" +
		"\u055E\u0560\x03\x02\x02\x02\u055F\u0559\x03\x02\x02\x02\u055F\u0560\x03" +
		"\x02\x02\x02\u0560\u0561\x03\x02\x02\x02\u0561\u0569\x07\xDC\x02\x02\u0562" +
		"\u0564\x05\x06\x04\x02\u0563\u0562\x03\x02\x02\x02\u0564\u0565\x03\x02" +
		"\x02\x02\u0565\u0563\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566" +
		"\u0567\x03\x02\x02\x02\u0567\u0568\x07\xF3\x02\x02\u0568\u056A\x03\x02" +
		"\x02\x02\u0569\u0563\x03\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A" +
		"\u056C\x03\x02\x02\x02\u056B\u056D\x05\x06\x04\x02\u056C\u056B\x03\x02" +
		"\x02\x02\u056D\u056E\x03\x02\x02\x02\u056E\u056C\x03\x02\x02\x02\u056E" +
		"\u056F\x03\x02\x02\x02\u056F\u0570\x03\x02\x02\x02\u0570\u0571\x05Z.\x02" +
		"\u0571\u05B6\x03\x02\x02\x02\u0572\u0574\x07\xAF\x02\x02\u0573\u0575\x05" +
		"\x06\x04\x02\u0574\u0573\x03\x02\x02\x02\u0575\u0576\x03\x02\x02\x02\u0576" +
		"\u0574\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u0579\x03\x02" +
		"\x02\x02\u0578\u0572\x03\x02\x02\x02\u0578\u0579\x03\x02\x02\x02\u0579" +
		"\u057A\x03\x02\x02\x02\u057A\u0582\x07=\x02\x02\u057B\u057D\x05\x06\x04" +
		"\x02\u057C\u057B\x03\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u057C" +
		"\x03\x02\x02\x02\u057E\u057F\x03\x02\x02\x02\u057F\u0580\x03\x02\x02\x02" +
		"\u0580\u0581\x07\xF3\x02\x02\u0581\u0583\x03\x02\x02\x02\u0582\u057C\x03" +
		"\x02\x02\x02\u0582\u0583\x03\x02\x02\x02\u0583\u0585\x03\x02\x02\x02\u0584" +
		"\u0586\x05\x06\x04\x02\u0585\u0584\x03\x02\x02\x02\u0586\u0587\x03\x02" +
		"\x02\x02\u0587\u0585\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588" +
		"\u0589\x03\x02\x02\x02\u0589\u058A\x05Z.\x02\u058A\u05B6\x03\x02\x02\x02" +
		"\u058B\u05A3\x07\x96\x02\x02\u058C\u058E\x05\x06\x04\x02\u058D\u058C\x03" +
		"\x02\x02\x02\u058E\u058F\x03\x02\x02\x02\u058F\u058D\x03\x02\x02\x02\u058F" +
		"\u0590\x03\x02\x02\x02\u0590\u0597\x03\x02\x02\x02\u0591\u0593\x07\u0168" +
		"\x02\x02\u0592\u0594\x05\x06\x04\x02\u0593\u0592\x03\x02\x02\x02\u0594" +
		"\u0595\x03\x02\x02\x02\u0595\u0593\x03\x02\x02\x02\u0595\u0596\x03\x02" +
		"\x02\x02\u0596\u0598\x03\x02\x02\x02\u0597\u0591\x03\x02\x02\x02\u0597" +
		"\u0598\x03\x02\x02\x02\u0598\u0599\x03\x02\x02\x02\u0599\u05A1\x07z\x02" +
		"\x02\u059A\u059C\x05\x06\x04\x02\u059B\u059A\x03\x02\x02\x02\u059C\u059D" +
		"\x03\x02\x02\x02\u059D\u059B\x03\x02\x02\x02\u059D\u059E\x03\x02\x02\x02" +
		"\u059E\u059F\x03\x02\x02\x02\u059F\u05A0\x07\xF7\x02\x02\u05A0\u05A2\x03" +
		"\x02\x02\x02\u05A1\u059B\x03\x02\x02\x02\u05A1\u05A2\x03\x02\x02\x02\u05A2" +
		"\u05A4\x03\x02\x02\x02\u05A3\u058D\x03\x02\x02\x02\u05A3\u05A4\x03\x02" +
		"\x02\x02\u05A4\u05A6\x03\x02\x02\x02\u05A5\u05A7\x05\x06\x04\x02\u05A6" +
		"\u05A5\x03\x02\x02\x02\u05A7\u05A8\x03\x02\x02\x02\u05A8\u05A6\x03\x02" +
		"\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05AA\x03\x02\x02\x02\u05AA" +
		"\u05AB\t\x04\x02\x02\u05AB\u05B6\x03\x02\x02\x02\u05AC\u05AE\x07\u017E" +
		"\x02\x02\u05AD\u05AF\x05\x06\x04\x02\u05AE\u05AD\x03\x02\x02\x02\u05AF" +
		"\u05B0\x03\x02\x02\x02\u05B0\u05AE\x03\x02\x02\x02\u05B0\u05B1\x03\x02" +
		"\x02\x02\u05B1\u05B3\x03\x02\x02\x02\u05B2\u05AC\x03\x02\x02\x02\u05B2" +
		"\u05B3\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02\u05B4\u05B6\x07\"\x02" +
		"\x02\u05B5\u055F\x03\x02\x02\x02\u05B5\u0578\x03\x02\x02\x02\u05B5\u058B" +
		"\x03\x02\x02\x02\u05B5\u05B2\x03\x02\x02\x02\u05B6M\x03\x02\x02\x02\u05B7" +
		"\u0611\x05L\'\x02\u05B8\u0611\x07\u016E\x02\x02\u05B9\u0611\x07,\x02\x02" +
		"\u05BA\u05BC\x07\u017E\x02\x02\u05BB\u05BD\x05\x06\x04\x02\u05BC\u05BB" +
		"\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05BC\x03\x02\x02\x02" +
		"\u05BE\u05BF\x03\x02\x02\x02\u05BF\u05C1\x03\x02\x02\x02\u05C0\u05BA\x03" +
		"\x02\x02\x02\u05C0\u05C1\x03\x02\x02\x02\u05C1\u05C2\x03\x02\x02\x02\u05C2" +
		"\u0611\x07*\x02\x02\u05C3\u05CB\x07\u0117\x02\x02\u05C4\u05C6\x05\x06" +
		"\x04\x02\u05C5\u05C4\x03\x02\x02\x02\u05C6\u05C7\x03\x02\x02\x02\u05C7" +
		"\u05C5\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05C9\x03\x02" +
		"\x02\x02\u05C9\u05CA\x05T+\x02\u05CA\u05CC\x03\x02\x02\x02\u05CB\u05C5" +
		"\x03\x02\x02\x02\u05CB\u05CC\x03\x02\x02\x02\u05CC\u0611\x03\x02\x02\x02" +
		"\u05CD\u05CF\x07\u017E\x02\x02\u05CE\u05D0\x05\x06\x04\x02\u05CF\u05CE" +
		"\x03\x02\x02\x02\u05D0\u05D1\x03\x02\x02\x02\u05D1\u05CF\x03\x02\x02\x02" +
		"\u05D1\u05D2\x03\x02\x02\x02\u05D2\u05D4\x03\x02\x02\x02\u05D3\u05CD\x03" +
		"\x02\x02\x02\u05D3\u05D4\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02\x02\u05D5" +
		"\u0611\x07W\x02\x02\u05D6\u0611\x07\u012F\x02\x02\u05D7\u05D9\x07\u017E" +
		"\x02\x02\u05D8\u05DA\x05\x06\x04\x02\u05D9\u05D8\x03\x02\x02\x02\u05DA" +
		"\u05DB\x03\x02\x02\x02\u05DB\u05D9\x03\x02\x02\x02\u05DB\u05DC\x03\x02" +
		"\x02\x02\u05DC\u05DE\x03\x02\x02\x02\u05DD\u05D7\x03\x02\x02\x02\u05DD" +
		"\u05DE\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\u05E1\x07\xF1" +
		"\x02\x02\u05E0\u05E2\x05\x06\x04\x02\u05E1\u05E0\x03\x02\x02\x02\u05E2" +
		"\u05E3\x03\x02\x02\x02\u05E3\u05E1\x03\x02\x02\x02\u05E3\u05E4\x03\x02" +
		"\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E6\x07x\x02\x02\u05E6\u0611" +
		"\x03\x02\x02\x02\u05E7\u05E9\x07i\x02\x02\u05E8\u05EA\x05\x06\x04\x02" +
		"\u05E9\u05E8\x03\x02\x02\x02\u05EA\u05EB\x03\x02\x02\x02\u05EB\u05E9\x03" +
		"\x02\x02\x02\u05EB\u05EC\x03\x02\x02\x02\u05EC\u05F3\x03\x02\x02\x02\u05ED" +
		"\u05EF\x07\xCE\x02\x02\u05EE\u05F0\x05\x06\x04\x02\u05EF\u05EE\x03\x02" +
		"\x02\x02\u05F0\u05F1\x03\x02\x02\x02\u05F1\u05EF\x03\x02\x02\x02\u05F1" +
		"\u05F2\x03\x02\x02\x02\u05F2\u05F4\x03\x02\x02\x02\u05F3\u05ED\x03\x02" +
		"\x02\x02\u05F3\u05F4\x03\x02\x02\x02\u05F4\u05F5\x03\x02\x02\x02\u05F5" +
		"\u05F6\x05R*\x02\u05F6\u0611\x03\x02\x02\x02\u05F7\u05F9\x07U\x02\x02" +
		"\u05F8\u05FA\x05\x06\x04\x02\u05F9\u05F8\x03\x02\x02\x02\u05FA\u05FB\x03" +
		"\x02\x02\x02\u05FB\u05F9\x03\x02\x02\x02\u05FB\u05FC\x03\x02\x02\x02\u05FC" +
		"\u05FE\x03\x02\x02\x02\u05FD\u05F7\x03\x02\x02\x02\u05FD\u05FE\x03\x02" +
		"\x02\x02\u05FE\u05FF\x03\x02\x02\x02\u05FF\u0607\x07\xD3\x02\x02\u0600" +
		"\u0602\x05\x06\x04\x02\u0601\u0600\x03\x02\x02\x02\u0602\u0603\x03\x02" +
		"\x02\x02\u0603\u0601\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604" +
		"\u0605\x03\x02\x02\x02\u0605\u0606\x07\xC2\x02\x02\u0606\u0608\x03\x02" +
		"\x02\x02\u0607\u0601\x03\x02\x02\x02\u0607\u0608\x03\x02\x02\x02\u0608" +
		"\u060A\x03\x02\x02\x02\u0609\u060B\x05\x06\x04\x02\u060A\u0609\x03\x02" +
		"\x02\x02\u060B\u060C\x03\x02\x02\x02\u060C\u060A\x03\x02\x02\x02\u060C" +
		"\u060D\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u060F\x05P)\x02" +
		"\u060F\u0611\x03\x02\x02\x02\u0610\u05B7\x03\x02\x02\x02\u0610\u05B8\x03" +
		"\x02\x02\x02\u0610\u05B9\x03\x02\x02\x02\u0610\u05C0\x03\x02\x02\x02\u0610" +
		"\u05C3\x03\x02\x02\x02\u0610\u05D3\x03\x02\x02\x02\u0610\u05D6\x03\x02" +
		"\x02\x02\u0610\u05DD\x03\x02\x02\x02\u0610\u05E7\x03\x02\x02\x02\u0610" +
		"\u05FD\x03\x02\x02\x02\u0611O\x03\x02\x02\x02\u0612\u0613\x05\u0158\xAD" +
		"\x02\u0613Q\x03\x02\x02\x02\u0614\u0622\x05\x04\x03\x02\u0615\u0622\x07" +
		"\u01A0\x02\x02\u0616\u0622\x05\u0158\xAD\x02\u0617\u061F\x07\\\x02\x02" +
		"\u0618\u061A\x05\x06\x04\x02\u0619\u0618\x03\x02\x02\x02\u061A\u061B\x03" +
		"\x02\x02\x02\u061B\u0619\x03\x02\x02\x02\u061B\u061C\x03\x02\x02\x02\u061C" +
		"\u061D\x03\x02\x02\x02\u061D\u061E\x07\u0178\x02\x02\u061E\u0620\x03\x02" +
		"\x02\x02\u061F\u0619\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02\u0620" +
		"\u0622\x03\x02\x02\x02\u0621\u0614\x03\x02\x02\x02\u0621\u0615\x03\x02" +
		"\x02\x02\u0621\u0616\x03\x02\x02\x02\u0621\u0617\x03\x02\x02\x02\u0622" +
		"S\x03\x02\x02\x02\u0623\u0625\x07\u0145\x02\x02\u0624\u0626\x05\x06\x04" +
		"\x02\u0625\u0624\x03\x02\x02\x02\u0626\u0627\x03\x02\x02\x02\u0627\u0625" +
		"\x03\x02\x02\x02\u0627\u0628\x03\x02\x02\x02\u0628\u0629\x03\x02\x02\x02" +
		"\u0629\u062A\x05X-\x02\u062A\u065E\x03\x02\x02\x02\u062B\u062D\x07\u017E" +
		"\x02\x02\u062C\u062E\x05\x06\x04\x02\u062D\u062C\x03\x02\x02\x02\u062E" +
		"\u062F\x03\x02\x02\x02\u062F\u062D\x03\x02\x02\x02\u062F\u0630\x03\x02" +
		"\x02\x02\u0630\u0632\x03\x02\x02\x02\u0631\u062B\x03\x02\x02\x02\u0631" +
		"\u0632\x03\x02\x02\x02\u0632\u0633\x03\x02\x02\x02\u0633\u065E\x07\x1F" +
		"\x02\x02\u0634\u0636\x07\u017E\x02\x02\u0635\u0637\x05\x06\x04\x02\u0636" +
		"\u0635\x03\x02\x02\x02\u0637\u0638\x03\x02\x02\x02\u0638\u0636\x03\x02" +
		"\x02\x02\u0638\u0639\x03\x02\x02\x02\u0639\u063B\x03\x02\x02\x02\u063A" +
		"\u0634\x03\x02\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B\u063C\x03\x02" +
		"\x02\x02\u063C\u063E\x07\xF1\x02\x02\u063D\u063F";
	private static readonly _serializedATNSegment5: string =
		"\x05\x06\x04\x02\u063E\u063D\x03\x02\x02\x02\u063F\u0640\x03\x02\x02\x02" +
		"\u0640\u063E\x03\x02\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0642\x03" +
		"\x02\x02\x02\u0642\u0643\x07(\x02\x02\u0643\u065E\x03\x02\x02\x02\u0644" +
		"\u0646\x07\u017E\x02\x02\u0645\u0647\x05\x06\x04\x02\u0646\u0645\x03\x02" +
		"\x02\x02\u0647\u0648\x03\x02\x02\x02\u0648\u0646\x03\x02\x02\x02\u0648" +
		"\u0649\x03\x02\x02\x02\u0649\u064B\x03\x02\x02\x02\u064A\u0644\x03\x02" +
		"\x02\x02\u064A\u064B\x03\x02\x02\x02\u064B\u064C\x03\x02\x02\x02\u064C" +
		"\u065E\x07y\x02\x02\u064D\u064F\x07\u017E\x02\x02\u064E\u0650\x05\x06" +
		"\x04\x02\u064F\u064E\x03\x02\x02\x02\u0650\u0651\x03\x02\x02\x02\u0651" +
		"\u064F\x03\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u0654\x03\x02" +
		"\x02\x02\u0653\u064D\x03\x02\x02\x02\u0653\u0654\x03\x02\x02\x02\u0654" +
		"\u0655\x03\x02\x02\x02\u0655\u0657\x07\xA5\x02\x02\u0656\u0658\x05\x06" +
		"\x04\x02\u0657\u0656\x03\x02\x02\x02\u0658\u0659\x03\x02\x02\x02\u0659" +
		"\u0657\x03\x02\x02\x02\u0659\u065A\x03\x02\x02\x02\u065A\u065B\x03\x02" +
		"\x02\x02\u065B\u065C\x05V,\x02\u065C\u065E\x03\x02\x02\x02\u065D\u0623" +
		"\x03\x02\x02\x02\u065D\u0631\x03\x02\x02\x02\u065D\u063A\x03\x02\x02\x02" +
		"\u065D\u064A\x03\x02\x02\x02\u065D\u0653\x03\x02\x02\x02\u065EU\x03\x02" +
		"\x02\x02\u065F\u0660\x07\u01A0\x02\x02\u0660W\x03\x02\x02\x02\u0661\u0664" +
		"\x07\u01A1\x02\x02\u0662\u0664\x05\u0158\xAD\x02\u0663\u0661\x03\x02\x02" +
		"\x02\u0663\u0662\x03\x02\x02\x02\u0664Y\x03\x02\x02\x02\u0665\u0683\x05" +
		"\xC4c\x02\u0666\u0676\x05\u0158\xAD\x02\u0667\u0669\x05\x06\x04\x02\u0668" +
		"\u0667\x03\x02\x02\x02\u0669\u066A\x03\x02\x02\x02\u066A\u0668\x03\x02" +
		"\x02\x02\u066A\u066B\x03\x02\x02\x02\u066B\u066C\x03\x02\x02\x02\u066C" +
		"\u0674\x07\u010C\x02\x02\u066D\u066F\x05\x06\x04\x02\u066E\u066D\x03\x02" +
		"\x02\x02\u066F\u0670\x03\x02\x02\x02\u0670\u066E\x03\x02\x02\x02\u0670" +
		"\u0671\x03\x02\x02\x02\u0671\u0672\x03\x02\x02\x02\u0672\u0673\x05\xC4" +
		"c\x02\u0673\u0675\x03\x02\x02\x02\u0674\u066E\x03\x02\x02\x02\u0674\u0675" +
		"\x03\x02\x02\x02\u0675\u0677\x03\x02\x02\x02\u0676\u0668\x03\x02\x02\x02" +
		"\u0676\u0677\x03\x02\x02\x02\u0677\u0683\x03\x02\x02\x02\u0678\u0680\x07" +
		"\u010C\x02\x02\u0679\u067B\x05\x06\x04\x02\u067A\u0679\x03\x02\x02\x02" +
		"\u067B\u067C\x03\x02\x02\x02\u067C\u067A\x03\x02\x02\x02\u067C\u067D\x03" +
		"\x02\x02\x02\u067D\u067E\x03\x02\x02\x02\u067E\u067F\x05\xC4c\x02\u067F" +
		"\u0681\x03\x02\x02\x02\u0680\u067A\x03\x02\x02\x02\u0680\u0681\x03\x02" +
		"\x02\x02\u0681\u0683\x03\x02\x02\x02\u0682\u0665\x03\x02\x02\x02\u0682" +
		"\u0666\x03\x02\x02\x02\u0682\u0678\x03\x02\x02\x02\u0683[\x03\x02\x02" +
		"\x02\u0684\u068C\x07_\x02\x02\u0685\u0687\x05\x06\x04\x02\u0686\u0685" +
		"\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u0686\x03\x02\x02\x02" +
		"\u0688\u0689\x03\x02\x02\x02\u0689\u068A\x03\x02\x02\x02\u068A\u068B\x07" +
		"\u0183\x02\x02\u068B\u068D\x03\x02\x02\x02\u068C\u0686\x03\x02\x02\x02" +
		"\u068C\u068D\x03\x02\x02\x02\u068D\u069B\x03\x02\x02\x02\u068E\u0696\x07" +
		"b\x02\x02\u068F\u0691\x05\x06\x04\x02\u0690\u068F\x03\x02\x02\x02\u0691" +
		"\u0692\x03\x02\x02\x02\u0692\u0690\x03\x02\x02\x02\u0692\u0693\x03\x02" +
		"\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0695\x07\u0182\x02\x02\u0695" +
		"\u0697\x03\x02\x02\x02\u0696\u0690\x03\x02\x02\x02\u0696\u0697\x03\x02" +
		"\x02\x02\u0697\u069B\x03\x02\x02\x02\u0698\u069B\x07c\x02\x02\u0699\u069B" +
		"\x07\u0166\x02\x02\u069A\u0684\x03\x02\x02\x02\u069A\u068E\x03\x02\x02" +
		"\x02\u069A\u0698\x03\x02\x02\x02\u069A\u0699\x03\x02\x02\x02\u069B]\x03" +
		"\x02\x02\x02\u069C\u069D\x05\u0200\u0101\x02\u069D_\x03\x02\x02\x02\u069E" +
		"\u069F\x07\u01A3\x02\x02\u069Fa\x03\x02\x02\x02\u06A0\u06A2\x07\x1B\x02" +
		"\x02\u06A1\u06A3\x05\x06\x04\x02\u06A2\u06A1\x03\x02\x02\x02\u06A3\u06A4" +
		"\x03\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02\x02\x02" +
		"\u06A5\u06A7\x03\x02\x02\x02\u06A6\u06A0\x03\x02\x02\x02\u06A6\u06A7\x03" +
		"\x02\x02\x02\u06A7\u06A8\x03\x02\x02\x02\u06A8\u06AA\x07z\x02\x02\u06A9" +
		"\u06AB\x05\x06\x04\x02\u06AA\u06A9\x03\x02\x02\x02\u06AB\u06AC\x03\x02" +
		"\x02\x02\u06AC\u06AA\x03\x02\x02\x02\u06AC\u06AD\x03\x02\x02\x02\u06AD" +
		"\u06AE\x03\x02\x02\x02\u06AE\u06AF\x050\x19\x02\u06AFc\x03\x02\x02\x02" +
		"\u06B0\u06B2\x07\xFA\x02\x02\u06B1\u06B3\x05\x06\x04\x02\u06B2\u06B1\x03" +
		"\x02\x02\x02\u06B3\u06B4\x03\x02\x02\x02\u06B4\u06B2\x03\x02\x02\x02\u06B4" +
		"\u06B5\x03\x02\x02\x02\u06B5\u06B7\x03\x02\x02\x02\u06B6\u06B0\x03\x02" +
		"\x02\x02\u06B6\u06B7\x03\x02\x02\x02\u06B7\u06B8\x03\x02\x02\x02\u06B8" +
		"\u06BA\x07\x9A\x02\x02\u06B9\u06BB\x05\x06\x04\x02\u06BA\u06B9\x03\x02" +
		"\x02\x02\u06BB\u06BC\x03\x02\x02\x02\u06BC\u06BA\x03\x02\x02\x02\u06BC" +
		"\u06BD\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06BF\x050\x19" +
		"\x02\u06BFe\x03\x02\x02\x02\u06C0\u06C2\x07^\x02\x02\u06C1\u06C3\x05\x06" +
		"\x04\x02\u06C2\u06C1\x03\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4" +
		"\u06C2\x03\x02\x02\x02\u06C4\u06C5\x03\x02\x02\x02\u06C5\u06C6\x03\x02" +
		"\x02\x02\u06C6\u06CA\x07s\x02\x02\u06C7\u06C9\x05\x06\x04\x02\u06C8\u06C7" +
		"\x03\x02\x02\x02\u06C9\u06CC\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02" +
		"\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06CD\x03\x02\x02\x02\u06CC\u06CA\x03" +
		"\x02\x02\x02\u06CD\u06D1\x07\u019D\x02\x02\u06CE\u06D0\x05\x06\x04\x02" +
		"\u06CF\u06CE\x03\x02\x02\x02\u06D0\u06D3\x03\x02\x02\x02\u06D1\u06CF\x03" +
		"\x02\x02\x02\u06D1\u06D2\x03\x02\x02\x02\u06D2\u06DB\x03\x02\x02\x02\u06D3" +
		"\u06D1\x03\x02\x02\x02\u06D4\u06D8\x05h5\x02\u06D5\u06D7\x05\x06\x04\x02" +
		"\u06D6\u06D5\x03\x02\x02\x02\u06D7\u06DA\x03\x02\x02\x02\u06D8\u06D6\x03" +
		"\x02\x02\x02\u06D8\u06D9\x03\x02\x02\x02\u06D9\u06DC\x03\x02\x02\x02\u06DA" +
		"\u06D8\x03\x02\x02\x02\u06DB\u06D4\x03\x02\x02\x02\u06DB\u06DC\x03\x02" +
		"\x02\x02\u06DC\u06E4\x03\x02\x02\x02\u06DD\u06E1\x05j6\x02\u06DE\u06E0" +
		"\x05\x06\x04\x02\u06DF\u06DE\x03\x02\x02\x02\u06E0\u06E3\x03\x02\x02\x02" +
		"\u06E1\u06DF\x03\x02\x02\x02\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06E5\x03" +
		"\x02\x02\x02\u06E3\u06E1\x03\x02\x02\x02\u06E4\u06DD\x03\x02\x02\x02\u06E4" +
		"\u06E5\x03\x02\x02\x02\u06E5\u06ED\x03\x02\x02\x02\u06E6\u06EA\x05l7\x02" +
		"\u06E7\u06E9\x05\x06\x04\x02\u06E8\u06E7\x03\x02\x02\x02\u06E9\u06EC\x03" +
		"\x02\x02\x02\u06EA\u06E8\x03\x02\x02\x02\u06EA\u06EB\x03\x02\x02\x02\u06EB" +
		"\u06EE\x03\x02\x02\x02\u06EC\u06EA\x03\x02\x02\x02\u06ED\u06E6\x03\x02" +
		"\x02\x02\u06ED\u06EE\x03\x02\x02\x02\u06EE\u06F6\x03\x02\x02\x02\u06EF" +
		"\u06F3\x05n8\x02\u06F0\u06F2\x05\x06\x04\x02\u06F1\u06F0\x03\x02\x02\x02" +
		"\u06F2\u06F5\x03\x02\x02\x02\u06F3\u06F1\x03\x02\x02\x02\u06F3\u06F4\x03" +
		"\x02\x02\x02\u06F4\u06F7\x03\x02\x02\x02\u06F5\u06F3\x03\x02\x02\x02\u06F6" +
		"\u06EF\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06FF\x03\x02" +
		"\x02\x02\u06F8\u06FC\x05p9\x02\u06F9\u06FB\x05\x06\x04\x02\u06FA\u06F9" +
		"\x03\x02\x02\x02\u06FB\u06FE\x03\x02\x02\x02\u06FC\u06FA\x03\x02\x02\x02" +
		"\u06FC\u06FD\x03\x02\x02\x02\u06FD\u0700\x03\x02\x02\x02\u06FE\u06FC\x03" +
		"\x02\x02\x02\u06FF\u06F8\x03\x02\x02\x02\u06FF\u0700\x03\x02\x02\x02\u0700" +
		"g\x03\x02\x02\x02\u0701\u0703\x07\xA2\x02\x02\u0702\u0704\x05\x06\x04" +
		"\x02\u0703\u0702\x03\x02\x02\x02\u0704\u0705\x03\x02\x02\x02\u0705\u0703" +
		"\x03\x02\x02\x02\u0705\u0706\x03\x02\x02\x02\u0706\u0707\x03\x02\x02\x02" +
		"\u0707\u070B\x07\u013A\x02\x02\u0708\u070A\x05\x06\x04\x02\u0709\u0708" +
		"\x03\x02\x02\x02\u070A\u070D\x03\x02\x02\x02\u070B\u0709\x03\x02\x02\x02" +
		"\u070B\u070C\x03\x02\x02\x02\u070C\u070E\x03\x02\x02\x02\u070D\u070B\x03" +
		"\x02\x02\x02\u070E\u0712\x07\u019D\x02\x02\u070F\u0711\x05\x06\x04\x02" +
		"\u0710\u070F\x03\x02\x02\x02\u0711\u0714\x03\x02\x02\x02\u0712\u0710\x03" +
		"\x02\x02\x02\u0712\u0713\x03\x02\x02\x02\u0713\u073A\x03\x02\x02\x02\u0714" +
		"\u0712\x03\x02\x02\x02\u0715\u071F\x05r:\x02\u0716\u0718\x05\x06\x04\x02" +
		"\u0717\u0716\x03\x02\x02\x02\u0718\u071B\x03\x02\x02\x02\u0719\u0717\x03" +
		"\x02\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A\u071C\x03\x02\x02\x02\u071B" +
		"\u0719\x03\x02\x02\x02\u071C\u071E\x05z>\x02\u071D\u0719\x03\x02\x02\x02" +
		"\u071E\u0721\x03\x02\x02\x02\u071F\u071D\x03\x02\x02\x02\u071F\u0720\x03" +
		"\x02\x02\x02\u0720\u0731\x03\x02\x02\x02\u0721\u071F\x03\x02\x02\x02\u0722" +
		"\u0731\x05v<\x02\u0723\u072D\x05t;\x02\u0724\u0726\x05\x06\x04\x02\u0725" +
		"\u0724\x03\x02\x02\x02\u0726\u0729\x03\x02\x02\x02\u0727\u0725\x03\x02" +
		"\x02\x02\u0727\u0728\x03\x02\x02\x02\u0728\u072A\x03\x02\x02\x02\u0729" +
		"\u0727\x03\x02\x02\x02\u072A\u072C\x05z>\x02\u072B\u0727\x03\x02\x02\x02" +
		"\u072C\u072F\x03\x02\x02\x02\u072D\u072B\x03\x02\x02\x02\u072D\u072E\x03" +
		"\x02\x02\x02\u072E\u0731\x03\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u0730" +
		"\u0715\x03\x02\x02\x02\u0730\u0722\x03\x02\x02\x02\u0730\u0723\x03\x02" +
		"\x02\x02\u0731\u0735\x03\x02\x02\x02\u0732\u0734\x05\x06\x04\x02\u0733" +
		"\u0732\x03\x02\x02\x02\u0734\u0737\x03\x02\x02\x02\u0735\u0733\x03\x02" +
		"\x02\x02\u0735\u0736\x03\x02\x02\x02\u0736\u0739\x03\x02\x02\x02\u0737" +
		"\u0735\x03\x02\x02\x02\u0738\u0730\x03\x02\x02\x02\u0739\u073C\x03\x02" +
		"\x02\x02\u073A\u0738\x03\x02\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B" +
		"i\x03\x02\x02\x02\u073C\u073A\x03\x02\x02\x02\u073D\u073F\x07\u0180\x02" +
		"\x02\u073E\u0740\x05\x06\x04\x02\u073F\u073E\x03\x02\x02\x02\u0740\u0741" +
		"\x03\x02\x02\x02\u0741\u073F\x03\x02\x02\x02\u0741\u0742\x03\x02\x02\x02" +
		"\u0742\u0743\x03\x02\x02\x02\u0743\u0747\x07\u013A\x02\x02\u0744\u0746" +
		"\x05\x06\x04\x02\u0745\u0744\x03\x02\x02\x02\u0746\u0749\x03\x02\x02\x02" +
		"\u0747\u0745\x03\x02\x02\x02\u0747\u0748\x03\x02\x02\x02\u0748\u074A\x03" +
		"\x02\x02\x02\u0749\u0747\x03\x02\x02\x02\u074A\u074E\x07\u019D\x02\x02" +
		"\u074B\u074D\x05\x06\x04\x02\u074C\u074B\x03\x02\x02\x02\u074D\u0750\x03" +
		"\x02\x02\x02\u074E\u074C\x03\x02\x02\x02\u074E\u074F\x03\x02\x02\x02\u074F" +
		"\u075A\x03\x02\x02\x02\u0750\u074E\x03\x02\x02\x02\u0751\u0755\x05z>\x02" +
		"\u0752\u0754\x05\x06\x04\x02\u0753\u0752\x03\x02\x02\x02\u0754\u0757\x03" +
		"\x02\x02\x02\u0755\u0753\x03\x02\x02\x02\u0755\u0756\x03\x02\x02\x02\u0756" +
		"\u0759\x03\x02\x02\x02\u0757\u0755\x03\x02\x02\x02\u0758\u0751\x03\x02" +
		"\x02\x02\u0759\u075C\x03\x02\x02\x02\u075A\u0758\x03\x02\x02\x02\u075A" +
		"\u075B\x03\x02\x02\x02\u075Bk\x03\x02\x02\x02\u075C\u075A\x03\x02\x02" +
		"\x02\u075D\u075F\x07\xDF\x02\x02\u075E\u0760\x05\x06\x04\x02\u075F\u075E" +
		"\x03\x02\x02\x02\u0760\u0761\x03\x02\x02\x02\u0761\u075F\x03\x02\x02\x02" +
		"\u0761\u0762\x03\x02\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763\u0767\x07" +
		"\u013A\x02\x02\u0764\u0766\x05\x06\x04\x02\u0765\u0764\x03\x02\x02\x02" +
		"\u0766\u0769\x03\x02\x02\x02\u0767\u0765\x03\x02\x02\x02\u0767\u0768\x03" +
		"\x02\x02\x02\u0768\u076A\x03\x02\x02\x02\u0769\u0767\x03\x02\x02\x02\u076A" +
		"\u076E\x07\u019D\x02\x02\u076B\u076D\x05\x06\x04\x02\u076C\u076B\x03\x02" +
		"\x02\x02\u076D\u0770\x03\x02\x02\x02\u076E\u076C\x03\x02\x02\x02\u076E" +
		"\u076F\x03\x02\x02\x02\u076F\u077A\x03\x02\x02\x02\u0770\u076E\x03\x02" +
		"\x02\x02\u0771\u0775\x05z>\x02\u0772\u0774\x05\x06\x04\x02\u0773\u0772" +
		"\x03\x02\x02\x02\u0774\u0777\x03\x02\x02\x02\u0775\u0773\x03\x02\x02\x02" +
		"\u0775\u0776\x03\x02\x02\x02\u0776\u0779\x03\x02\x02\x02\u0777\u0775\x03" +
		"\x02\x02\x02\u0778\u0771\x03\x02\x02\x02\u0779\u077C\x03\x02\x02\x02\u077A" +
		"\u0778\x03\x02\x02\x02\u077A\u077B\x03\x02\x02\x02\u077Bm\x03\x02\x02" +
		"\x02\u077C\u077A\x03\x02\x02\x02\u077D\u077F\x07\u0127\x02\x02\u077E\u0780" +
		"\x05\x06\x04\x02\u077F\u077E\x03\x02\x02\x02\u0780\u0781\x03\x02\x02\x02" +
		"\u0781\u077F\x03\x02\x02\x02\u0781\u0782\x03\x02\x02\x02\u0782\u0783\x03" +
		"\x02\x02\x02\u0783\u0787\x07\u013A\x02\x02\u0784\u0786\x05\x06\x04\x02" +
		"\u0785\u0784\x03\x02\x02\x02\u0786\u0789\x03\x02\x02\x02\u0787\u0785\x03" +
		"\x02\x02\x02\u0787\u0788\x03\x02\x02\x02\u0788\u078A\x03\x02\x02\x02\u0789" +
		"\u0787\x03\x02\x02\x02\u078A\u078E\x07\u019D\x02\x02\u078B\u078D\x05\x06" +
		"\x04\x02\u078C\u078B\x03\x02\x02\x02\u078D\u0790\x03\x02\x02\x02\u078E" +
		"\u078C\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u07A6\x03\x02" +
		"\x02\x02\u0790\u078E\x03\x02\x02\x02\u0791\u079B\x05v<\x02\u0792\u0794" +
		"\x05\x06\x04\x02\u0793\u0792\x03\x02\x02\x02\u0794\u0797\x03\x02\x02\x02" +
		"\u0795\u0793\x03\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796\u0798\x03" +
		"\x02\x02\x02\u0797\u0795\x03\x02\x02\x02\u0798\u079A\x05\xA8U\x02\u0799" +
		"\u0795\x03\x02\x02\x02\u079A\u079D\x03\x02\x02\x02\u079B\u0799\x03\x02" +
		"\x02\x02\u079B\u079C\x03\x02\x02\x02\u079C\u07A1\x03\x02\x02\x02\u079D" +
		"\u079B\x03\x02\x02\x02\u079E\u07A0\x05\x06\x04\x02\u079F\u079E\x03\x02" +
		"\x02\x02\u07A0\u07A3\x03\x02\x02\x02\u07A1\u079F\x03\x02\x02\x02\u07A1" +
		"\u07A2\x03\x02\x02\x02\u07A2\u07A5\x03\x02\x02\x02\u07A3\u07A1\x03\x02" +
		"\x02\x02\u07A4\u0791\x03\x02\x02\x02\u07A5\u07A8\x03\x02\x02\x02\u07A6" +
		"\u07A4\x03\x02\x02\x02\u07A6\u07A7\x03\x02\x02\x02\u07A7o\x03\x02\x02" +
		"\x02\u07A8\u07A6\x03\x02\x02\x02\u07A9\u07AB\x07\u0137\x02\x02\u07AA\u07AC" +
		"\x05\x06\x04\x02\u07AB\u07AA\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02" +
		"\u07AD\u07AB\x03\x02\x02\x02\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07AF\x03" +
		"\x02\x02\x02\u07AF\u07B3\x07\u013A\x02\x02\u07B0\u07B2\x05\x06\x04\x02" +
		"\u07B1\u07B0\x03\x02\x02\x02\u07B2\u07B5\x03\x02\x02\x02\u07B3\u07B1\x03" +
		"\x02\x02\x02\u07B3\u07B4\x03\x02\x02\x02\u07B4\u07B6\x03\x02\x02\x02\u07B5" +
		"\u07B3\x03\x02\x02\x02\u07B6\u07BA\x07\u019D\x02\x02\u07B7\u07B9\x05\x06" +
		"\x04\x02\u07B8\u07B7\x03\x02\x02\x02\u07B9\u07BC\x03\x02\x02\x02\u07BA" +
		"\u07B8\x03\x02\x02\x02\u07BA\u07BB\x03\x02\x02\x02\u07BB\u07C6\x03\x02" +
		"\x02\x02\u07BC\u07BA\x03\x02\x02\x02\u07BD\u07C1\x05\u0108\x85\x02\u07BE" +
		"\u07C0\x05\x06\x04\x02\u07BF\u07BE\x03\x02\x02\x02\u07C0\u07C3\x03\x02" +
		"\x02\x02\u07C1\u07BF\x03\x02\x02\x02\u07C1\u07C2\x03\x02\x02\x02\u07C2" +
		"\u07C5\x03\x02\x02\x02\u07C3\u07C1\x03\x02\x02\x02\u07C4\u07BD\x03\x02" +
		"\x02\x02\u07C5\u07C8\x03\x02\x02\x02\u07C6\u07C4\x03\x02\x02\x02\u07C6" +
		"\u07C7\x03\x02\x02\x02\u07C7q\x03\x02\x02\x02\u07C8\u07C6\x03\x02\x02" +
		"\x02\u07C9\u07CB\x07\xA1\x02\x02\u07CA\u07CC\x05\x06\x04\x02\u07CB\u07CA" +
		"\x03\x02\x02\x02\u07CC\u07CD\x03\x02\x02\x02\u07CD\u07CB\x03\x02\x02\x02" +
		"\u07CD\u07CE\x03\x02\x02\x02\u07CE\u07CF\x03\x02\x02\x02\u07CF\u07D3\x05" +
		"\u01C2\xE2\x02\u07D0\u07D2\x05\x06\x04\x02\u07D1\u07D0\x03\x02\x02\x02" +
		"\u07D2\u07D5\x03\x02\x02\x02\u07D3\u07D1\x03\x02\x02\x02\u07D3\u07D4\x03" +
		"\x02\x02\x02\u07D4\u07DF\x03\x02\x02\x02\u07D5\u07D3\x03\x02\x02\x02\u07D6" +
		"\u07DA\x05x=\x02\u07D7\u07D9\x05\x06\x04\x02\u07D8\u07D7\x03\x02\x02\x02" +
		"\u07D9\u07DC\x03\x02\x02\x02\u07DA\u07D8\x03\x02\x02\x02\u07DA\u07DB\x03" +
		"\x02\x02\x02\u07DB\u07DE\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DD" +
		"\u07D6\x03\x02\x02\x02\u07DE\u07E1\x03\x02\x02\x02\u07DF\u07DD\x03\x02" +
		"\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0\u07E2\x03\x02\x02\x02\u07E1" +
		"\u07DF\x03\x02\x02\x02\u07E2\u07E3\x07\u019D\x02\x02\u07E3s\x03\x02\x02" +
		"\x02\u07E4\u07E6\x07\u0138\x02\x02\u07E5\u07E7\x05\x06\x04\x02\u07E6\u07E5" +
		"\x03\x02\x02\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8\u07E6\x03\x02\x02\x02" +
		"\u07E8\u07E9\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07EE\x05" +
		"\u01C2\xE2\x02\u07EB\u07ED\x05\x06\x04\x02\u07EC\u07EB\x03\x02\x02\x02" +
		"\u07ED\u07F0\x03\x02\x02\x02\u07EE\u07EC\x03\x02\x02\x02\u07EE\u07EF\x03" +
		"\x02\x02\x02\u07EF\u07FA\x03\x02\x02\x02\u07F0\u07EE\x03\x02\x02\x02\u07F1" +
		"\u07F5\x05\xE4s\x02\u07F2\u07F4\x05\x06\x04\x02\u07F3\u07F2\x03\x02\x02" +
		"\x02\u07F4\u07F7\x03\x02\x02\x02\u07F5\u07F3\x03\x02\x02\x02\u07F5\u07F6" +
		"\x03\x02\x02\x02\u07F6\u07F9\x03\x02\x02\x02\u07F7\u07F5\x03\x02\x02\x02" +
		"\u07F8\u07F1\x03\x02\x02\x02\u07F9\u07FC\x03\x02\x02\x02\u07FA\u07F8\x03" +
		"\x02\x02\x02\u07FA\u07FB\x03\x02\x02\x02\u07FB\u07FD\x03\x02\x02\x02\u07FC" +
		"\u07FA\x03\x02\x02\x02\u07FD\u07FE\x07\u019D\x02\x02\u07FEu\x03\x02\x02" +
		"\x02\u07FF\u0801\x07\u011B\x02\x02\u0800\u0802\x05\x06\x04\x02\u0801\u0800" +
		"\x03\x02\x02\x02\u0802\u0803\x03\x02\x02\x02\u0803\u0801\x03\x02\x02\x02" +
		"\u0803\u0804\x03\x02\x02\x02\u0804\u0805\x03\x02\x02\x02\u0805\u0809\x05" +
		"\xE8u\x02\u0806\u0808\x05\x06\x04\x02\u0807\u0806\x03\x02\x02\x02\u0808" +
		"\u080B\x03\x02\x02\x02\u0809\u0807\x03\x02\x02\x02\u0809\u080A\x03\x02" +
		"\x02\x02\u080A\u0815\x03\x02\x02\x02\u080B\u0809\x03\x02\x02\x02\u080C" +
		"\u0810\x05\xC6d\x02\u080D\u080F\x05\x06\x04\x02\u080E\u080D\x03\x02\x02" +
		"\x02\u080F\u0812\x03\x02\x02\x02\u0810\u080E\x03\x02\x02\x02\u0810\u0811" +
		"\x03\x02\x02\x02\u0811\u0814\x03\x02\x02\x02\u0812\u0810\x03\x02\x02\x02" +
		"\u0813\u080C\x03\x02\x02\x02\u0814\u0817\x03\x02\x02\x02\u0815\u0813\x03" +
		"\x02\x02\x02\u0815\u0816\x03\x02\x02\x02\u0816\u0818\x03\x02\x02\x02\u0817" +
		"\u0815\x03\x02\x02\x02\u0818\u0819\x07\u019D\x02\x02\u0819w\x03\x02\x02" +
		"\x02\u081A\u081C\x07\xCE\x02\x02\u081B\u081D\x05\x06\x04\x02\u081C\u081B" +
		"\x03\x02\x02\x02\u081D\u081E\x03\x02\x02\x02\u081E\u081C\x03\x02\x02\x02" +
		"\u081E\u081F\x03\x02\x02\x02\u081F\u0821\x03\x02\x02\x02\u0820\u081A\x03" +
		"\x02\x02\x02\u0820\u0821\x03\x02\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822" +
		"\u0838\x07\x9F\x02\x02\u0823\u0825\x07\xCE\x02\x02\u0824\u0826\x05\x06" +
		"\x04\x02\u0825\u0824\x03\x02\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827" +
		"\u0825\x03\x02\x02\x02\u0827\u0828\x03\x02\x02\x02\u0828\u082A\x03\x02" +
		"\x02\x02\u0829\u0823\x03\x02\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A" +
		"\u082B\x03\x02\x02\x02\u082B\u0838\x07\xB4\x02\x02\u082C\u0838\x05\u01B6" +
		"\xDC\x02\u082D\u0838\x05\xFE\x80\x02\u082E\u0838\x05\xFC\x7F\x02\u082F" +
		"\u0838\x05\xF8}\x02\u0830\u0838\x05\xF4{\x02\u0831\u0838\x05\xEAv\x02" +
		"\u0832\u0838\x05\xE6t\x02\u0833\u0838\x05\u01B4\xDB\x02\u0834\u0838\x05" +
		"\u01A2\xD2\x02\u0835\u0838\x05\u019E\xD0\x02\u0836\u0838\x05\u019A\xCE" +
		"\x02\u0837\u0820\x03\x02\x02\x02\u0837\u0829\x03\x02\x02\x02\u0837\u082C" +
		"\x03\x02\x02\x02\u0837\u082D\x03\x02\x02\x02\u0837\u082E\x03\x02\x02\x02" +
		"\u0837\u082F\x03\x02\x02\x02\u0837\u0830\x03\x02\x02\x02\u0837\u0831\x03" +
		"\x02\x02\x02\u0837\u0832\x03\x02\x02\x02\u0837\u0833\x03\x02\x02\x02\u0837" +
		"\u0834\x03\x02\x02\x02\u0837\u0835\x03\x02\x02\x02\u0837\u0836\x03\x02" +
		"\x02\x02\u0838y\x03\x02\x02\x02\u0839\u0843\x05|?\x02\u083A\u083C\x05" +
		"\x06\x04\x02\u083B\u083A\x03\x02\x02\x02\u083C\u083F\x03\x02\x02\x02\u083D" +
		"\u083B\x03\x02\x02\x02\u083D\u083E\x03\x02\x02\x02\u083E\u0840\x03\x02" +
		"\x02\x02\u083F\u083D\x03\x02\x02\x02\u0840\u0842\x05|?\x02\u0841\u083D" +
		"\x03\x02\x02\x02\u0842\u0845\x03\x02\x02\x02\u0843\u0841\x03\x02\x02\x02" +
		"\u0843\u0844\x03\x02\x02\x02\u0844{\x03\x02\x02\x02\u0845\u0843\x03\x02" +
		"\x02\x02\u0846\u0850\x05~@\x02\u0847\u0849\x05\x06\x04\x02\u0848\u0847" +
		"\x03\x02\x02\x02\u0849\u084A\x03\x02\x02\x02\u084A\u0848\x03\x02\x02\x02" +
		"\u084A\u084B\x03\x02\x02\x02\u084B\u084E\x03\x02\x02\x02\u084C\u084F\x05" +
		"\xE2r\x02\u084D\u084F\x07\xA5\x02\x02\u084E\u084C\x03\x02\x02\x02\u084E" +
		"\u084D\x03\x02\x02\x02\u084F\u0851\x03\x02\x02\x02\u0850\u0848\x03\x02" +
		"\x02\x02\u0850\u0851\x03\x02\x02\x02\u0851\u085F\x03\x02\x02\x02\u0852" +
		"\u0854\x05\x06\x04\x02\u0853\u0852\x03\x02\x02\x02\u0854\u0855\x03\x02" +
		"\x02\x02\u0855\u0853\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856" +
		"\u0857\x03\x02\x02\x02\u0857\u0859\x07\u011F\x02\x02\u0858\u085A\x05\x06" +
		"\x04\x02\u0859\u0858\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B" +
		"\u0859\x03\x02\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u085D\x03\x02" +
		"\x02\x02\u085D\u085E\x05\xE0q\x02\u085E\u0860\x03\x02\x02\x02\u085F\u0853" +
		"\x03\x02\x02\x02\u085F\u0860\x03\x02\x02\x02\u0860\u086A\x03\x02\x02\x02" +
		"\u0861\u0863\x05\x06\x04\x02\u0862\u0861\x03\x02\x02\x02\u0863\u0864\x03" +
		"\x02\x02\x02\u0864\u0862\x03\x02\x02\x02\u0864\u0865\x03\x02\x02\x02\u0865" +
		"\u0866\x03\x02\x02\x02\u0866\u0867\x05\x80A\x02\u0867\u0869\x03\x02\x02" +
		"\x02\u0868\u0862\x03\x02\x02\x02\u0869\u086C\x03\x02\x02\x02\u086A\u0868" +
		"\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u086D\x03\x02\x02\x02" +
		"\u086C\u086A\x03\x02\x02\x02\u086D\u086E\x07\u019D\x02\x02\u086E}\x03" +
		"\x02\x02\x02\u086F\u0870\x07\u01A1\x02\x02\u0870\x7F\x03\x02\x02\x02\u0871" +
		"\u0873\x07\xCE\x02\x02\u0872\u0874\x05\x06\x04\x02\u0873\u0872\x03\x02" +
		"\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0873\x03\x02\x02\x02\u0875" +
		"\u0876\x03\x02\x02\x02\u0876\u0878\x03\x02\x02\x02\u0877\u0871\x03\x02" +
		"\x02\x02\u0877\u0878\x03\x02\x02\x02\u0878\u0879\x03\x02\x02\x02\u0879" +
		"\u08AE\x07\x9F\x02\x02\u087A\u087C\x07\xCE\x02\x02\u087B\u087D\x05\x06" +
		"\x04\x02\u087C\u087B\x03\x02\x02\x02\u087D\u087E\x03\x02\x02\x02\u087E" +
		"\u087C\x03\x02\x02\x02\u087E\u087F\x03\x02\x02\x02\u087F\u0881\x03\x02" +
		"\x02\x02\u0880\u087A\x03\x02\x02\x02\u0880\u0881\x03\x02\x02\x02\u0881" +
		"\u0882\x03\x02\x02\x02\u0882\u08AE\x07\xB4\x02\x02\u0883\u08AE\x05\xDA" +
		"n\x02\u0884\u08AE\x05\xD6l\x02\u0885\u08AE\x05\xAEX\x02\u0886\u08AE\x05" +
		"\x96L\x02\u0887\u088F\t\x05\x02\x02\u0888\u088A\x05\x06\x04\x02\u0889" +
		"\u0888\x03\x02\x02\x02\u088A\u088B\x03\x02\x02\x02\u088B\u0889\x03\x02" +
		"\x02\x02\u088B\u088C\x03\x02\x02\x02\u088C\u088D\x03\x02\x02\x02\u088D" +
		"\u088E\t\x06\x02\x02\u088E\u0890\x03\x02\x02\x02\u088F\u0889\x03\x02\x02" +
		"\x02\u088F\u0890\x03\x02\x02\x02\u0890\u08AE\x03\x02\x02\x02\u0891\u0899" +
		"\t\x07\x02\x02\u0892\u0894\x05\x06\x04\x02\u0893\u0892\x03\x02\x02\x02" +
		"\u0894\u0895\x03\x02\x02\x02\u0895\u0893\x03\x02\x02\x02\u0895\u0896\x03" +
		"\x02\x02\x02\u0896\u0897\x03\x02\x02\x02\u0897\u0898\x07\u0134\x02\x02" +
		"\u0898\u089A\x03\x02\x02\x02\u0899\u0893\x03\x02\x02\x02\u0899\u089A\x03" +
		"\x02\x02\x02\u089A\u08AE\x03\x02\x02\x02\u089B\u089D\x07(\x02\x02\u089C" +
		"\u089E\x05\x06\x04\x02\u089D\u089C\x03\x02\x02\x02\u089E\u089F\x03\x02" +
		"\x02\x02\u089F\u089D\x03\x02\x02\x02\u089F\u08A0\x03\x02\x02\x02\u08A0" +
		"\u08A7\x03\x02\x02\x02\u08A1\u08A3\x07\u017C\x02\x02\u08A2\u08A4\x05\x06" +
		"\x04\x02\u08A3\u08A2\x03\x02\x02\x02\u08A4\u08A5\x03\x02\x02\x02\u08A5" +
		"\u08A3\x03\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6\u08A8\x03\x02" +
		"\x02\x02\u08A7\u08A1\x03\x02\x02\x02\u08A7\u08A8\x03\x02\x02\x02\u08A8" +
		"\u08A9\x03\x02\x02\x02\u08A9\u08AA\x07\u0184\x02\x02\u08AA\u08AE\x03\x02" +
		"\x02\x02\u08AB\u08AE\x05\x88E\x02\u08AC\u08AE\x05\x82B\x02\u08AD\u0877" +
		"\x03\x02\x02\x02\u08AD\u0880\x03\x02\x02\x02\u08AD\u0883\x03\x02\x02\x02" +
		"\u08AD\u0884\x03\x02\x02\x02\u08AD\u0885\x03\x02\x02\x02\u08AD\u0886\x03" +
		"\x02\x02\x02\u08AD\u0887\x03\x02\x02\x02\u08AD\u0891\x03\x02\x02\x02\u08AD" +
		"\u089B\x03\x02\x02\x02\u08AD\u08AB\x03\x02\x02\x02\u08AD\u08AC\x03\x02" +
		"\x02\x02\u08AE\x81\x03\x02\x02\x02\u08AF\u08B1\x07\u0124\x02\x02\u08B0" +
		"\u08B2\x05\x06\x04\x02\u08B1\u08B0\x03\x02\x02\x02\u08B2\u08B3\x03\x02" +
		"\x02\x02\u08B3\u08B1\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02\x02\u08B4" +
		"\u08B5\x03\x02\x02\x02\u08B5\u08C3\x05\x84C\x02\u08B6\u08B8\x05\x06\x04" +
		"\x02\u08B7\u08B6\x03\x02\x02\x02\u08B8\u08B9\x03\x02\x02\x02\u08B9\u08B7" +
		"\x03\x02\x02\x02\u08B9\u08BA\x03\x02\x02\x02\u08BA\u08BB\x03\x02\x02\x02" +
		"\u08BB\u08BD\t\b\x02\x02\u08BC\u08BE\x05\x06\x04\x02\u08BD\u08BC\x03\x02" +
		"\x02\x02\u08BE\u08BF\x03\x02\x02\x02\u08BF\u08BD\x03\x02\x02\x02\u08BF" +
		"\u08C0\x03\x02\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08C2\x05\x86" +
		"D\x02\u08C2\u08C4\x03\x02\x02\x02\u08C3\u08B7\x03\x02\x02\x02\u08C3\u08C4" +
		"\x03\x02\x02\x02\u08C4\x83\x03\x02\x02\x02\u08C5\u08C6\x05\u0158\xAD\x02" +
		"\u08C6\x85\x03\x02\x02\x02\u08C7\u08C8\x05\u0158\xAD\x02\u08C8\x87\x03" +
		"\x02\x02\x02\u08C9\u08D1\x07\u0178\x02\x02\u08CA\u08CC\x05\x06\x04\x02" +
		"\u08CB\u08CA\x03\x02\x02\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD\u08CB\x03" +
		"\x02\x02\x02\u08CD\u08CE\x03\x02\x02\x02\u08CE\u08CF\x03\x02\x02\x02\u08CF" +
		"\u08D0\x07\xCE\x02\x02\u08D0\u08D2\x03\x02\x02\x02\u08D1\u08CB\x03\x02" +
		"\x02\x02\u08D1\u08D2\x03\x02\x02\x02\u08D2\u08DE\x03\x02\x02\x02\u08D3" +
		"\u08DB\x07\u0179\x02\x02\u08D4\u08D6\x05\x06\x04\x02\u08D5\u08D4\x03\x02" +
		"\x02\x02\u08D6\u08D7\x03\x02\x02\x02\u08D7\u08D5\x03\x02\x02\x02\u08D7" +
		"\u08D8\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9\u08DA\x07\x12" +
		"\x02\x02\u08DA\u08DC\x03\x02\x02\x02\u08DB\u08D5\x03\x02\x02\x02\u08DB" +
		"\u08DC\x03\x02\x02\x02\u08DC\u08DE\x03\x02\x02\x02\u08DD\u08C9\x03\x02" +
		"\x02\x02\u08DD\u08D3\x03\x02\x02\x02\u08DE\u08E0\x03\x02\x02\x02\u08DF" +
		"\u08E1\x05\x06\x04\x02\u08E0\u08DF\x03\x02\x02\x02\u08E1\u08E2\x03\x02" +
		"\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02\u08E3" +
		"\u08E4\x03\x02\x02\x02\u08E4\u08EE\x05\x8AF\x02\u08E5\u08E7\x05\x06\x04" +
		"\x02\u08E6\u08E5\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E6" +
		"\x03\x02\x02\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u08EA\x03\x02\x02\x02" +
		"\u08EA\u08EB\x05\x8A";
	private static readonly _serializedATNSegment6: string =
		"F\x02\u08EB\u08ED\x03\x02\x02\x02\u08EC\u08E6\x03\x02\x02\x02\u08ED\u08F0" +
		"\x03\x02\x02\x02\u08EE\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02" +
		"\u08EF\x89\x03\x02\x02\x02\u08F0\u08EE\x03\x02\x02\x02\u08F1\u08F9\x05" +
		"\x8CG\x02\u08F2\u08F4\x05\x06\x04\x02\u08F3\u08F2\x03\x02\x02\x02\u08F4" +
		"\u08F5\x03\x02\x02\x02\u08F5\u08F3\x03\x02\x02\x02\u08F5\u08F6\x03\x02" +
		"\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7\u08F8\x05\x8EH\x02\u08F8\u08FA" +
		"\x03\x02\x02\x02\u08F9\u08F3\x03\x02\x02\x02\u08F9\u08FA\x03\x02\x02\x02" +
		"\u08FA\x8B\x03\x02\x02\x02\u08FB\u090D\x05\x94K\x02\u08FC\u08FE\x07\u0121" +
		"\x02\x02\u08FD\u08FF\x05\x06\x04\x02\u08FE\u08FD\x03\x02\x02\x02\u08FF" +
		"\u0900\x03\x02\x02\x02\u0900\u08FE\x03\x02\x02\x02\u0900\u0901\x03\x02" +
		"\x02\x02\u0901\u0902\x03\x02\x02\x02\u0902\u0903\x05\x92J\x02\u0903\u090D" +
		"\x03\x02\x02\x02\u0904\u0906\x07\x9F\x02\x02\u0905\u0907\x05\x06\x04\x02" +
		"\u0906\u0905\x03\x02\x02\x02\u0907\u0908\x03\x02\x02\x02\u0908\u0906\x03" +
		"\x02\x02\x02\u0908\u0909\x03\x02\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A" +
		"\u090B\x05\x90I\x02\u090B\u090D\x03\x02\x02\x02\u090C\u08FB\x03\x02\x02" +
		"\x02\u090C\u08FC\x03\x02\x02\x02\u090C\u0904\x03\x02\x02\x02\u090D\x8D" +
		"\x03\x02\x02\x02\u090E\u0910\t\b\x02\x02\u090F\u0911\x05\x06\x04\x02\u0910" +
		"\u090F\x03\x02\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0910\x03\x02" +
		"\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914" +
		"\u0915\x05\x8CG\x02\u0915\x8F\x03\x02\x02\x02\u0916\u0917\x07\u01A3\x02" +
		"\x02\u0917\x91\x03\x02\x02\x02\u0918\u0919\x05\u0158\xAD\x02\u0919\x93" +
		"\x03\x02\x02\x02\u091A\u091B\t\t\x02\x02\u091B\x95\x03\x02\x02\x02\u091C" +
		"\u091E\x07\xF6\x02\x02\u091D\u091F\x05\x06\x04\x02\u091E\u091D\x03\x02" +
		"\x02\x02\u091F\u0920\x03\x02\x02\x02\u0920\u091E\x03\x02\x02\x02\u0920" +
		"\u0921\x03\x02\x02\x02\u0921\u0922\x03\x02\x02\x02\u0922\u092C\x05\xA0" +
		"Q\x02\u0923\u0925\x05\x06\x04\x02\u0924\u0923\x03\x02\x02\x02\u0925\u0926" +
		"\x03\x02\x02\x02\u0926\u0924\x03\x02\x02\x02\u0926\u0927\x03\x02\x02\x02" +
		"\u0927\u0928\x03\x02\x02\x02\u0928\u0929\x05\x9CO\x02\u0929\u092B\x03" +
		"\x02\x02\x02\u092A\u0924\x03\x02\x02\x02\u092B\u092E\x03\x02\x02\x02\u092C" +
		"\u092A\x03\x02\x02\x02\u092C\u092D\x03\x02\x02\x02\u092D\u0936\x03\x02" +
		"\x02\x02\u092E\u092C\x03\x02\x02\x02\u092F\u0931\x05\x06\x04\x02\u0930" +
		"\u092F\x03\x02\x02\x02\u0931\u0932\x03\x02\x02\x02\u0932\u0930\x03\x02" +
		"\x02\x02\u0932\u0933\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02\u0934" +
		"\u0935\x05\x98M\x02\u0935\u0937\x03\x02\x02\x02\u0936\u0930\x03\x02\x02" +
		"\x02\u0936\u0937\x03\x02\x02\x02\u0937\x97\x03\x02\x02\x02\u0938\u093A" +
		"\x07\xC4\x02\x02\u0939\u093B\x05\x06\x04\x02\u093A\u0939\x03\x02\x02\x02" +
		"\u093B\u093C\x03\x02\x02\x02\u093C\u093A\x03\x02\x02\x02\u093C\u093D\x03" +
		"\x02\x02\x02\u093D\u0944\x03\x02\x02\x02\u093E\u0940\x07.\x02\x02\u093F" +
		"\u0941\x05\x06\x04\x02\u0940\u093F\x03\x02\x02\x02\u0941\u0942\x03\x02" +
		"\x02\x02\u0942\u0940\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943" +
		"\u0945\x03\x02\x02\x02\u0944\u093E\x03\x02\x02\x02\u0944\u0945\x03\x02" +
		"\x02\x02\u0945\u0946\x03\x02\x02\x02\u0946\u0950\x05\x9AN\x02\u0947\u0949" +
		"\x05\x06\x04\x02\u0948\u0947\x03\x02\x02\x02\u0949\u094A\x03\x02\x02\x02" +
		"\u094A\u0948\x03\x02\x02\x02\u094A\u094B\x03\x02\x02\x02\u094B\u094C\x03" +
		"\x02\x02\x02\u094C\u094D\x05\x9AN\x02\u094D\u094F\x03\x02\x02\x02\u094E" +
		"\u0948\x03\x02\x02\x02\u094F\u0952\x03\x02\x02\x02\u0950\u094E\x03\x02" +
		"\x02\x02\u0950\u0951\x03\x02\x02\x02\u0951\x99\x03\x02\x02\x02\u0952\u0950" +
		"\x03\x02\x02\x02\u0953\u0954\x07\u01A3\x02\x02\u0954\x9B\x03\x02\x02\x02" +
		"\u0955\u0957\t\n\x02\x02\u0956\u0958\x05\x06\x04\x02\u0957\u0956\x03\x02" +
		"\x02\x02\u0958\u0959\x03\x02\x02\x02\u0959\u0957\x03\x02\x02\x02\u0959" +
		"\u095A\x03\x02\x02\x02\u095A\u0961\x03\x02\x02\x02\u095B\u095D\x07\xD3" +
		"\x02\x02\u095C\u095E\x05\x06\x04\x02\u095D\u095C\x03\x02\x02\x02\u095E" +
		"\u095F\x03\x02\x02\x02\u095F\u095D\x03\x02\x02\x02\u095F\u0960\x03\x02" +
		"\x02\x02\u0960\u0962\x03\x02\x02\x02\u0961\u095B\x03\x02\x02\x02\u0961" +
		"\u0962\x03\x02\x02\x02\u0962\u0969\x03\x02\x02\x02\u0963\u0965\x07\xCE" +
		"\x02\x02\u0964\u0966\x05\x06\x04\x02\u0965\u0964\x03\x02\x02\x02\u0966" +
		"\u0967\x03\x02\x02\x02\u0967\u0965\x03\x02\x02\x02\u0967\u0968\x03\x02" +
		"\x02\x02\u0968\u096A\x03\x02\x02\x02\u0969\u0963\x03\x02\x02\x02\u0969" +
		"\u096A\x03\x02\x02\x02\u096A\u096B\x03\x02\x02\x02\u096B\u0975\x05\x9E" +
		"P\x02\u096C\u096E\x05\x06\x04\x02\u096D\u096C\x03\x02\x02\x02\u096E\u096F" +
		"\x03\x02\x02\x02\u096F\u096D\x03\x02\x02\x02\u096F\u0970\x03\x02\x02\x02" +
		"\u0970\u0971\x03\x02\x02\x02\u0971\u0972\x05\x9EP\x02\u0972\u0974\x03" +
		"\x02\x02\x02\u0973\u096D\x03\x02\x02\x02\u0974\u0977\x03\x02\x02\x02\u0975" +
		"\u0973\x03\x02\x02\x02\u0975\u0976\x03\x02\x02\x02\u0976\x9D\x03\x02\x02" +
		"\x02\u0977\u0975\x03\x02\x02\x02\u0978\u0979\x05\u0158\xAD\x02\u0979\x9F" +
		"\x03\x02\x02\x02\u097A\u097C\x05\xA2R\x02\u097B\u097D\x05\x06\x04\x02" +
		"\u097C\u097B\x03\x02\x02\x02\u097D\u097E\x03\x02\x02\x02\u097E\u097C\x03" +
		"\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F\u0980\x03\x02\x02\x02\u0980" +
		"\u0981\x07\u0167\x02\x02\u0981\u09AB\x03\x02\x02\x02\u0982\u0984\x05\xA4" +
		"S\x02\u0983\u0985\x05\x06\x04\x02\u0984\u0983\x03\x02\x02\x02\u0985\u0986" +
		"\x03\x02\x02\x02\u0986\u0984\x03\x02\x02\x02\u0986\u0987\x03\x02\x02\x02" +
		"\u0987\u0988\x03\x02\x02\x02\u0988\u098A\x07\u0168\x02\x02\u0989\u098B" +
		"\x05\x06\x04\x02\u098A\u0989\x03\x02\x02\x02\u098B\u098C\x03\x02\x02\x02" +
		"\u098C\u098A\x03\x02\x02\x02\u098C\u098D\x03\x02\x02\x02\u098D\u098E\x03" +
		"\x02\x02\x02\u098E\u0990\x05\xA6T\x02\u098F\u0991\x05\x06\x04\x02\u0990" +
		"\u098F\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992\u0990\x03\x02" +
		"\x02\x02\u0992\u0993\x03\x02\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994" +
		"\u0996\x07\u0167\x02\x02\u0995\u0997\x05\x06\x04\x02\u0996\u0995\x03\x02" +
		"\x02\x02\u0997\u0998\x03\x02\x02\x02\u0998\u0996\x03\x02\x02\x02\u0998" +
		"\u0999\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02\u099A\u099C\x07m\x02" +
		"\x02\u099B\u099D\x05\x06\x04\x02\u099C\u099B\x03\x02\x02\x02\u099D\u099E" +
		"\x03\x02\x02\x02\u099E\u099C\x03\x02\x02\x02\u099E\u099F\x03\x02\x02\x02" +
		"\u099F\u09A6\x03\x02\x02\x02\u09A0\u09A2\x07\xFA\x02\x02\u09A1\u09A3\x05" +
		"\x06\x04\x02\u09A2\u09A1\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4" +
		"\u09A2\x03\x02\x02\x02\u09A4\u09A5\x03\x02\x02\x02\u09A5\u09A7\x03\x02" +
		"\x02\x02\u09A6\u09A0\x03\x02\x02\x02\u09A6\u09A7\x03\x02\x02\x02\u09A7" +
		"\u09A8\x03\x02\x02\x02\u09A8\u09A9\x05\u0102\x82\x02\u09A9\u09AB\x03\x02" +
		"\x02\x02\u09AA\u097A\x03\x02\x02\x02\u09AA\u0982\x03\x02\x02\x02\u09AB" +
		"\xA1\x03\x02\x02\x02\u09AC\u09AD\x07\u01A1\x02\x02\u09AD\xA3\x03\x02\x02" +
		"\x02\u09AE\u09AF\x07\u01A1\x02\x02\u09AF\xA5\x03\x02\x02\x02\u09B0\u09B1" +
		"\x07\u01A1\x02\x02\u09B1\xA7\x03\x02\x02\x02\u09B2\u09BC\x05\xAAV\x02" +
		"\u09B3\u09B5\x05\x06\x04\x02\u09B4\u09B3\x03\x02\x02\x02\u09B5\u09B8\x03" +
		"\x02\x02\x02\u09B6\u09B4\x03\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7" +
		"\u09B9\x03\x02\x02\x02\u09B8\u09B6\x03\x02\x02\x02\u09B9\u09BB\x05\xAA" +
		"V\x02\u09BA\u09B6\x03\x02\x02\x02\u09BB\u09BE\x03\x02\x02\x02\u09BC\u09BA" +
		"\x03\x02\x02\x02\u09BC\u09BD\x03\x02\x02\x02\u09BD\xA9\x03\x02\x02\x02" +
		"\u09BE\u09BC\x03\x02\x02\x02\u09BF\u09C7\x05~@\x02\u09C0\u09C2\x05\x06" +
		"\x04\x02\u09C1\u09C0\x03\x02\x02\x02\u09C2\u09C3\x03\x02\x02\x02\u09C3" +
		"\u09C1\x03\x02\x02\x02\u09C3\u09C4\x03\x02\x02\x02\u09C4\u09C5\x03\x02" +
		"\x02\x02\u09C5\u09C6\x05\xE2r\x02\u09C6\u09C8\x03\x02\x02\x02\u09C7\u09C1" +
		"\x03\x02\x02\x02\u09C7\u09C8\x03\x02\x02\x02\u09C8\u09D2\x03\x02\x02\x02" +
		"\u09C9\u09CB\x05\x06\x04\x02\u09CA\u09C9\x03\x02\x02\x02\u09CB\u09CC\x03" +
		"\x02\x02\x02\u09CC\u09CA\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD" +
		"\u09CE\x03\x02\x02\x02\u09CE\u09CF\x05\xACW\x02\u09CF\u09D1\x03\x02\x02" +
		"\x02\u09D0\u09CA\x03\x02\x02\x02\u09D1\u09D4\x03\x02\x02\x02\u09D2\u09D0" +
		"\x03\x02\x02\x02\u09D2\u09D3\x03\x02\x02\x02\u09D3\u09D5\x03\x02\x02\x02" +
		"\u09D4\u09D2\x03\x02\x02\x02\u09D5\u09D6\x07\u019D\x02\x02\u09D6\xAB\x03" +
		"\x02\x02\x02\u09D7\u09D9\x07\xDC\x02\x02\u09D8\u09DA\x05\x06\x04\x02\u09D9" +
		"\u09D8\x03\x02\x02\x02\u09DA\u09DB\x03\x02\x02\x02\u09DB\u09D9\x03\x02" +
		"\x02\x02\u09DB\u09DC\x03\x02\x02\x02\u09DC\u09E3\x03\x02\x02\x02\u09DD" +
		"\u09DF\x07\xF3\x02\x02\u09DE\u09E0\x05\x06\x04\x02\u09DF\u09DE\x03\x02" +
		"\x02\x02\u09E0\u09E1\x03\x02\x02\x02\u09E1\u09DF\x03\x02\x02\x02\u09E1" +
		"\u09E2\x03\x02\x02\x02\u09E2\u09E4\x03\x02\x02\x02\u09E3\u09DD\x03\x02" +
		"\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09EB\x03\x02\x02\x02\u09E5" +
		"\u09E7\x07\xCE\x02\x02\u09E6\u09E8\x05\x06\x04\x02\u09E7\u09E6\x03\x02" +
		"\x02\x02\u09E8\u09E9\x03\x02\x02\x02\u09E9\u09E7\x03\x02\x02\x02\u09E9" +
		"\u09EA\x03\x02\x02\x02\u09EA\u09EC\x03\x02\x02\x02\u09EB\u09E5\x03\x02" +
		"\x02\x02\u09EB\u09EC\x03\x02\x02\x02\u09EC\u09ED\x03\x02\x02\x02\u09ED" +
		"\u09EE\x05\xC2b\x02\u09EE\u0A86\x03\x02\x02\x02\u09EF\u09F1\x07\xF0\x02" +
		"\x02\u09F0\u09F2\x05\x06\x04\x02\u09F1\u09F0\x03\x02\x02\x02\u09F2\u09F3" +
		"\x03\x02\x02\x02\u09F3\u09F1\x03\x02\x02\x02\u09F3\u09F4\x03\x02\x02\x02" +
		"\u09F4\u09F5\x03\x02\x02\x02\u09F5\u09F7\x07\xB7\x02\x02\u09F6\u09F8\x05" +
		"\x06\x04\x02\u09F7\u09F6\x03\x02\x02\x02\u09F8\u09F9\x03\x02\x02\x02\u09F9" +
		"\u09F7\x03\x02\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u0A01\x03\x02" +
		"\x02\x02\u09FB\u09FD\x07\xCE\x02\x02\u09FC\u09FE\x05\x06\x04\x02\u09FD" +
		"\u09FC\x03\x02\x02\x02\u09FE\u09FF\x03\x02\x02\x02\u09FF\u09FD\x03\x02" +
		"\x02\x02\u09FF\u0A00\x03\x02\x02\x02\u0A00\u0A02\x03\x02\x02\x02\u0A01" +
		"\u09FB\x03\x02\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02\u0A03\x03\x02" +
		"\x02\x02\u0A03\u0A04\x05\xC0a\x02\u0A04\u0A86\x03\x02\x02\x02\u0A05\u0A07" +
		"\x07\u016C\x02\x02\u0A06\u0A08\x05\x06\x04\x02\u0A07\u0A06\x03\x02\x02" +
		"\x02\u0A08\u0A09\x03\x02\x02\x02\u0A09\u0A07\x03\x02\x02\x02\u0A09\u0A0A" +
		"\x03\x02\x02\x02\u0A0A\u0A11\x03\x02\x02\x02\u0A0B\u0A0D\x07\xCE\x02\x02" +
		"\u0A0C\u0A0E\x05\x06\x04\x02\u0A0D\u0A0C\x03\x02\x02\x02\u0A0E\u0A0F\x03" +
		"\x02\x02\x02\u0A0F\u0A0D\x03\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10" +
		"\u0A12\x03\x02\x02\x02\u0A11\u0A0B\x03\x02\x02\x02\u0A11\u0A12\x03\x02" +
		"\x02\x02\u0A12\u0A13\x03\x02\x02\x02\u0A13\u0A14\x05\xBC_\x02\u0A14\u0A86" +
		"\x03\x02\x02\x02\u0A15\u0A17\x07\u0175\x02\x02\u0A16\u0A18\x05\x06\x04" +
		"\x02\u0A17\u0A16\x03\x02\x02\x02\u0A18\u0A19\x03\x02\x02\x02\u0A19\u0A17" +
		"\x03\x02\x02\x02\u0A19\u0A1A\x03\x02\x02\x02\u0A1A\u0A21\x03\x02\x02\x02" +
		"\u0A1B\u0A1D\x07\xCE\x02\x02\u0A1C\u0A1E\x05\x06\x04\x02\u0A1D\u0A1C\x03" +
		"\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02\x02\u0A1F" +
		"\u0A20\x03\x02\x02\x02\u0A20\u0A22\x03\x02\x02\x02\u0A21\u0A1B\x03\x02" +
		"\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A24\x03\x02\x02\x02\u0A23" +
		"\u0A15\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24\u0A25\x03\x02" +
		"\x02\x02\u0A25\u0A86\x07q\x02\x02\u0A26\u0A28\x07(\x02\x02\u0A27\u0A29" +
		"\x05\x06\x04\x02\u0A28\u0A27\x03\x02\x02\x02\u0A29\u0A2A\x03\x02\x02\x02" +
		"\u0A2A\u0A28\x03\x02\x02\x02\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B\u0A32\x03" +
		"\x02\x02\x02\u0A2C\u0A2E\x07\u017C\x02\x02\u0A2D\u0A2F\x05\x06\x04\x02" +
		"\u0A2E\u0A2D\x03\x02\x02\x02\u0A2F\u0A30\x03\x02\x02\x02\u0A30\u0A2E\x03" +
		"\x02\x02\x02\u0A30\u0A31\x03\x02\x02\x02\u0A31\u0A33\x03\x02\x02\x02\u0A32" +
		"\u0A2C\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33\u0A34\x03\x02" +
		"\x02\x02\u0A34\u0A35\x07\u0184\x02\x02\u0A35\u0A86\x03\x02\x02\x02\u0A36" +
		"\u0A38\x07=\x02\x02\u0A37\u0A39\x05\x06\x04\x02\u0A38\u0A37\x03\x02\x02" +
		"\x02\u0A39\u0A3A\x03\x02\x02\x02\u0A3A\u0A38\x03\x02\x02\x02\u0A3A\u0A3B" +
		"\x03\x02\x02\x02\u0A3B\u0A42\x03\x02\x02\x02\u0A3C\u0A3E\x07\xF3\x02\x02" +
		"\u0A3D\u0A3F\x05\x06\x04\x02\u0A3E\u0A3D\x03\x02\x02\x02\u0A3F\u0A40\x03" +
		"\x02\x02\x02\u0A40\u0A3E\x03\x02\x02\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41" +
		"\u0A43\x03\x02\x02\x02\u0A42\u0A3C\x03\x02\x02\x02\u0A42\u0A43\x03\x02" +
		"\x02\x02\u0A43\u0A4A\x03\x02\x02\x02\u0A44\u0A46\x07\xCE\x02\x02\u0A45" +
		"\u0A47\x05\x06\x04\x02\u0A46\u0A45\x03\x02\x02\x02\u0A47\u0A48\x03\x02" +
		"\x02\x02\u0A48\u0A46\x03\x02\x02\x02\u0A48\u0A49\x03\x02\x02\x02\u0A49" +
		"\u0A4B\x03\x02\x02\x02\u0A4A\u0A44\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02" +
		"\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C\u0A4D\x05\xBA^\x02\u0A4D\u0A86" +
		"\x03\x02\x02\x02\u0A4E\u0A56\x07\xB7\x02\x02\u0A4F\u0A51\x05\x06\x04\x02" +
		"\u0A50\u0A4F\x03\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u0A50\x03" +
		"\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54" +
		"\u0A55\x07\xC5\x02\x02\u0A55\u0A57\x03\x02\x02\x02\u0A56\u0A50\x03\x02" +
		"\x02\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57\u0A86\x03\x02\x02\x02\u0A58" +
		"\u0A60\t\x07\x02\x02\u0A59\u0A5B\x05\x06\x04\x02\u0A5A\u0A59\x03\x02\x02" +
		"\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5A\x03\x02\x02\x02\u0A5C\u0A5D" +
		"\x03\x02\x02\x02\u0A5D\u0A5E\x03\x02\x02\x02\u0A5E\u0A5F\x07\u0134\x02" +
		"\x02\u0A5F\u0A61\x03\x02\x02\x02\u0A60\u0A5A\x03\x02\x02\x02\u0A60\u0A61" +
		"\x03\x02\x02\x02\u0A61\u0A86\x03\x02\x02\x02\u0A62\u0A86\x05\xDAn\x02" +
		"\u0A63\u0A86\x05\xAEX\x02\u0A64\u0A66\x07\u0148\x02\x02\u0A65\u0A67\x05" +
		"\x06\x04\x02\u0A66\u0A65\x03\x02\x02\x02\u0A67\u0A68\x03\x02\x02\x02\u0A68" +
		"\u0A66\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69\u0A70\x03\x02" +
		"\x02\x02\u0A6A\u0A6C\x07\xCE\x02\x02\u0A6B\u0A6D\x05\x06\x04\x02\u0A6C" +
		"\u0A6B\x03\x02\x02\x02\u0A6D\u0A6E\x03\x02\x02\x02\u0A6E\u0A6C\x03\x02" +
		"\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F\u0A71\x03\x02\x02\x02\u0A70" +
		"\u0A6A\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A72\x03\x02" +
		"\x02\x02\u0A72\u0A73\x05\xB8]\x02\u0A73\u0A86\x03\x02\x02\x02\u0A74\u0A76" +
		"\x07\u0178\x02\x02\u0A75\u0A77\x05\x06\x04\x02\u0A76\u0A75\x03\x02\x02" +
		"\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78\u0A76\x03\x02\x02\x02\u0A78\u0A79" +
		"\x03\x02\x02\x02\u0A79\u0A80\x03\x02\x02\x02\u0A7A\u0A7C\x07\xCE\x02\x02" +
		"\u0A7B\u0A7D\x05\x06\x04\x02\u0A7C\u0A7B\x03\x02\x02\x02\u0A7D\u0A7E\x03" +
		"\x02\x02\x02\u0A7E\u0A7C\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02\x02\x02\u0A7F" +
		"\u0A81\x03\x02\x02\x02\u0A80\u0A7A\x03\x02\x02\x02\u0A80\u0A81\x03\x02" +
		"\x02\x02\u0A81\u0A82\x03\x02\x02\x02\u0A82\u0A83\x05\x94K\x02\u0A83\u0A86" +
		"\x03\x02\x02\x02\u0A84\u0A86\x05\xB0Y\x02\u0A85\u09D7\x03\x02\x02\x02" +
		"\u0A85\u09EF\x03\x02\x02\x02\u0A85\u0A05\x03\x02\x02\x02\u0A85\u0A23\x03" +
		"\x02\x02\x02\u0A85\u0A26\x03\x02\x02\x02\u0A85\u0A36\x03\x02\x02\x02\u0A85" +
		"\u0A4E\x03\x02\x02\x02\u0A85\u0A58\x03\x02\x02\x02\u0A85\u0A62\x03\x02" +
		"\x02\x02\u0A85\u0A63\x03\x02\x02\x02\u0A85\u0A64\x03\x02\x02\x02\u0A85" +
		"\u0A74\x03\x02\x02\x02\u0A85\u0A84\x03\x02\x02\x02\u0A86\xAD\x03\x02\x02" +
		"\x02\u0A87\u0A8F\x07\u0143\x02\x02\u0A88\u0A8A\x05\x06\x04\x02\u0A89\u0A88" +
		"\x03\x02\x02\x02\u0A8A\u0A8B\x03\x02\x02\x02\u0A8B\u0A89\x03\x02\x02\x02" +
		"\u0A8B\u0A8C\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02\u0A8D\u0A8E\x07" +
		"\xCE\x02\x02\u0A8E\u0A90\x03\x02\x02\x02\u0A8F\u0A89\x03\x02\x02\x02\u0A8F" +
		"\u0A90\x03\x02\x02\x02\u0A90\u0A92\x03\x02\x02\x02\u0A91\u0A93\x05\x06" +
		"\x04\x02\u0A92\u0A91\x03\x02\x02\x02\u0A93\u0A94\x03\x02\x02\x02\u0A94" +
		"\u0A92\x03\x02\x02\x02\u0A94\u0A95\x03\x02\x02\x02\u0A95\u0A97\x03\x02" +
		"\x02\x02\u0A96\u0A87\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97" +
		"\u0A98\x03\x02\x02\x02\u0A98\u0AA6\t\v\x02\x02\u0A99\u0A9B\x05\x06\x04" +
		"\x02\u0A9A\u0A99\x03\x02\x02\x02\u0A9B\u0A9C\x03\x02\x02\x02\u0A9C\u0A9A" +
		"\x03\x02\x02\x02\u0A9C\u0A9D\x03\x02\x02\x02\u0A9D\u0A9E\x03\x02\x02\x02" +
		"\u0A9E\u0AA0\x07\u013F\x02\x02\u0A9F\u0AA1\x05\x06\x04\x02\u0AA0\u0A9F" +
		"\x03\x02\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0AA0\x03\x02\x02\x02" +
		"\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02\x02\x02\u0AA4\u0AA5\x07" +
		"5\x02\x02\u0AA5\u0AA7\x03\x02\x02\x02\u0AA6\u0A9A\x03\x02\x02\x02\u0AA6" +
		"\u0AA7\x03\x02\x02\x02\u0AA7\xAF\x03\x02\x02\x02\u0AA8\u0AAA\x07\u0156" +
		"\x02\x02\u0AA9\u0AAB\x05\x06\x04\x02\u0AAA\u0AA9\x03\x02\x02\x02\u0AAB" +
		"\u0AAC\x03\x02\x02\x02\u0AAC\u0AAA\x03\x02\x02\x02\u0AAC\u0AAD\x03\x02" +
		"\x02\x02\u0AAD\u0AAE\x03\x02\x02\x02\u0AAE\u0AB8\x05\xB6\\\x02\u0AAF\u0AB1" +
		"\x05\x06\x04\x02\u0AB0\u0AAF\x03\x02\x02\x02\u0AB1\u0AB2\x03\x02\x02\x02" +
		"\u0AB2\u0AB0\x03\x02\x02\x02\u0AB2\u0AB3\x03\x02\x02\x02\u0AB3\u0AB4\x03" +
		"\x02\x02\x02\u0AB4\u0AB5\x05\xB6\\\x02\u0AB5\u0AB7\x03\x02\x02\x02\u0AB6" +
		"\u0AB0\x03\x02\x02\x02\u0AB7\u0ABA\x03\x02\x02\x02\u0AB8\u0AB6\x03\x02" +
		"\x02\x02\u0AB8\u0AB9\x03\x02\x02\x02\u0AB9\u0AC2\x03\x02\x02\x02\u0ABA" +
		"\u0AB8\x03\x02\x02\x02\u0ABB\u0ABD\x05\x06\x04\x02\u0ABC\u0ABB\x03\x02" +
		"\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE\u0ABC\x03\x02\x02\x02\u0ABE" +
		"\u0ABF\x03\x02\x02\x02\u0ABF\u0AC0\x03\x02\x02\x02\u0AC0\u0AC1\x07\u0174" +
		"\x02\x02\u0AC1\u0AC3\x03\x02\x02\x02\u0AC2\u0ABC\x03\x02\x02\x02\u0AC2" +
		"\u0AC3\x03\x02\x02\x02\u0AC3\u0ACD\x03\x02\x02\x02\u0AC4\u0AC6\x05\x06" +
		"\x04\x02\u0AC5\u0AC4\x03\x02\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02\u0AC7" +
		"\u0AC5\x03\x02\x02\x02\u0AC7\u0AC8\x03\x02\x02\x02\u0AC8\u0AC9\x03\x02" +
		"\x02\x02\u0AC9\u0ACA\x05\xB4[\x02\u0ACA\u0ACC\x03\x02\x02\x02\u0ACB\u0AC5" +
		"\x03\x02\x02\x02\u0ACC\u0ACF\x03\x02\x02\x02\u0ACD\u0ACB\x03\x02\x02\x02" +
		"\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE\u0AD1\x03\x02\x02\x02\u0ACF\u0ACD\x03" +
		"\x02\x02\x02\u0AD0\u0AA8\x03\x02\x02\x02\u0AD1\u0AD2\x03\x02\x02\x02\u0AD2" +
		"\u0AD0\x03\x02\x02\x02\u0AD2\u0AD3\x03\x02\x02\x02\u0AD3\u0AEA\x03\x02" +
		"\x02\x02\u0AD4\u0AD6\x05\x06\x04\x02\u0AD5\u0AD4\x03\x02\x02\x02\u0AD6" +
		"\u0AD9\x03\x02\x02\x02\u0AD7\u0AD5\x03\x02\x02\x02\u0AD7\u0AD8\x03\x02" +
		"\x02\x02\u0AD8\u0ADA\x03\x02\x02\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0ADA" +
		"\u0ADC\x07\u012D\x02\x02\u0ADB\u0ADD\x05\x06\x04\x02\u0ADC\u0ADB\x03\x02" +
		"\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0ADC\x03\x02\x02\x02\u0ADE" +
		"\u0ADF\x03\x02\x02\x02\u0ADF\u0AE6\x03\x02\x02\x02\u0AE0\u0AE2\x07\xFA" +
		"\x02\x02\u0AE1\u0AE3\x05\x06\x04\x02\u0AE2\u0AE1\x03\x02\x02\x02\u0AE3" +
		"\u0AE4\x03\x02\x02\x02\u0AE4\u0AE2\x03\x02\x02\x02\u0AE4\u0AE5\x03\x02" +
		"\x02\x02\u0AE5\u0AE7\x03\x02\x02\x02\u0AE6\u0AE0\x03\x02\x02\x02\u0AE6" +
		"\u0AE7\x03\x02\x02\x02\u0AE7\u0AE8\x03\x02\x02\x02\u0AE8\u0AE9\x05\xB2" +
		"Z\x02\u0AE9\u0AEB\x03\x02\x02\x02\u0AEA\u0AD7\x03\x02\x02\x02\u0AEA\u0AEB" +
		"\x03\x02\x02\x02\u0AEB\xB1\x03\x02\x02\x02\u0AEC\u0AED\t\f\x02\x02\u0AED" +
		"\xB3\x03\x02\x02\x02\u0AEE\u0AEF\x07\u01A3\x02\x02\u0AEF\xB5\x03\x02\x02" +
		"\x02\u0AF0\u0AF1\x07\u01A3\x02\x02\u0AF1\xB7\x03\x02\x02\x02\u0AF2\u0AF3" +
		"\x05\u0158\xAD\x02\u0AF3\xB9\x03\x02\x02\x02\u0AF4\u0AF5\x07\u01A1\x02" +
		"\x02\u0AF5\xBB\x03\x02\x02\x02\u0AF6\u0AF8\x07\u0127\x02\x02\u0AF7\u0AF9" +
		"\x05\x06\x04\x02\u0AF8\u0AF7\x03\x02\x02\x02\u0AF9\u0AFA\x03\x02\x02\x02" +
		"\u0AFA\u0AF8\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\x03" +
		"\x02\x02\x02\u0AFC\u0AFD\x07\xB8\x02\x02\u0AFD\u0B41\x03\x02\x02\x02\u0AFE" +
		"\u0B41\x07\u0133\x02\x02\u0AFF\u0B01\x07\u0104\x02\x02\u0B00\u0B02\x05" +
		"\x06\x04\x02\u0B01\u0B00\x03\x02\x02\x02\u0B02\u0B03\x03\x02\x02\x02\u0B03" +
		"\u0B01\x03\x02\x02\x02\u0B03\u0B04\x03\x02\x02\x02\u0B04\u0B05\x03\x02" +
		"\x02\x02\u0B05\u0B06\x07\xB8\x02\x02\u0B06\u0B41\x03\x02\x02\x02\u0B07" +
		"\u0B41\x07\u0109\x02\x02\u0B08\u0B0A\x07U\x02\x02\u0B09\u0B0B\x05\x06" +
		"\x04\x02\u0B0A\u0B09\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C" +
		"\u0B0A\x03\x02\x02\x02\u0B0C\u0B0D\x03\x02\x02\x02\u0B0D\u0B0E\x03\x02" +
		"\x02\x02\u0B0E\u0B0F\x07\xB8\x02\x02\u0B0F\u0B12\x03\x02\x02\x02\u0B10" +
		"\u0B12\x074\x02\x02\u0B11\u0B08\x03\x02\x02\x02\u0B11\u0B10\x03\x02\x02" +
		"\x02\u0B12\u0B14\x03\x02\x02\x02\u0B13\u0B15\x05\x06\x04\x02\u0B14\u0B13" +
		"\x03\x02\x02\x02\u0B15\u0B16\x03\x02\x02\x02\u0B16\u0B14\x03\x02\x02\x02" +
		"\u0B16\u0B17\x03\x02\x02\x02\u0B17\u0B18\x03\x02\x02\x02\u0B18\u0B19\x05" +
		"\xBE`\x02\u0B19\u0B41\x03\x02\x02\x02\u0B1A\u0B41\x07o\x02\x02\u0B1B\u0B41" +
		"\x07d\x02\x02\u0B1C\u0B1E\x07U\x02\x02\u0B1D\u0B1F\x05\x06\x04\x02\u0B1E" +
		"\u0B1D\x03\x02\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B1E\x03\x02" +
		"\x02\x02\u0B20\u0B21\x03\x02\x02\x02\u0B21\u0B22\x03\x02\x02\x02\u0B22" +
		"\u0B23\x07\xAC\x02\x02\u0B23\u0B26\x03\x02\x02\x02\u0B24\u0B26\x073\x02" +
		"\x02\u0B25\u0B1C\x03\x02\x02\x02\u0B25\u0B24\x03\x02\x02\x02\u0B26\u0B28" +
		"\x03\x02\x02\x02\u0B27\u0B29\x05\x06\x04\x02\u0B28\u0B27\x03\x02\x02\x02" +
		"\u0B29\u0B2A\x03\x02\x02\x02\u0B2A\u0B28\x03\x02\x02\x02\u0B2A\u0B2B\x03" +
		"\x02\x02\x02\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B2D\x05\xBE`\x02\u0B2D" +
		"\u0B41\x03\x02\x02\x02\u0B2E\u0B30\x07\u0104\x02\x02\u0B2F\u0B31\x05\x06" +
		"\x04\x02\u0B30\u0B2F\x03\x02\x02\x02\u0B31\u0B32\x03\x02\x02\x02\u0B32" +
		"\u0B30\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B34\x03\x02" +
		"\x02\x02\u0B34\u0B35\x07\xAC\x02\x02\u0B35\u0B41\x03\x02\x02\x02\u0B36" +
		"\u0B41\x07\u0108\x02\x02\u0B37\u0B39\x07\u0127\x02\x02\u0B38\u0B3A\x05" +
		"\x06\x04\x02\u0B39\u0B38\x03\x02\x02\x02\u0B3A\u0B3B\x03\x02\x02\x02\u0B3B" +
		"\u0B39\x03\x02\x02\x02\u0B3B\u0B3C\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02" +
		"\x02\x02\u0B3D\u0B3E\x07\xAC\x02\x02\u0B3E\u0B41\x03\x02\x02\x02\u0B3F" +
		"\u0B41\x07\u0132\x02\x02\u0B40\u0AF6\x03\x02\x02\x02\u0B40\u0AFE\x03\x02" +
		"\x02\x02\u0B40\u0AFF\x03\x02\x02\x02\u0B40\u0B07\x03\x02\x02\x02\u0B40" +
		"\u0B11\x03\x02\x02\x02\u0B40\u0B1A\x03\x02\x02\x02\u0B40\u0B1B\x03\x02" +
		"\x02\x02\u0B40\u0B25\x03\x02\x02\x02\u0B40\u0B2E\x03\x02\x02\x02\u0B40" +
		"\u0B36\x03\x02\x02\x02\u0B40\u0B37\x03\x02\x02\x02\u0B40\u0B3F\x03\x02" +
		"\x02\x02\u0B41\xBD\x03\x02\x02\x02\u0B42\u0B43\t\f\x02\x02\u0B43\xBF\x03" +
		"\x02\x02\x02\u0B44\u0B56\x05\xC4c\x02\u0B45\u0B47\x07\u010C\x02\x02\u0B46" +
		"\u0B48\x05\x06\x04\x02\u0B47\u0B46\x03\x02\x02\x02\u0B48\u0B49\x03\x02" +
		"\x02\x02\u0B49\u0B47\x03\x02\x02\x02\u0B49\u0B4A\x03\x02\x02\x02\u0B4A" +
		"\u0B4B\x03\x02\x02\x02\u0B4B\u0B4C\x05\xC4c\x02\u0B4C\u0B56\x03\x02\x02" +
		"\x02\u0B4D\u0B4F\x07\xF0\x02\x02\u0B4E\u0B50\x05\x06\x04\x02\u0B4F\u0B4E" +
		"\x03\x02\x02\x02\u0B50\u0B51\x03\x02\x02\x02\u0B51\u0B4F\x03\x02\x02\x02" +
		"\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B53\x03\x02\x02\x02\u0B53\u0B54\x07" +
		"\u0104\x02\x02\u0B54\u0B56\x03\x02\x02\x02\u0B55\u0B44\x03\x02\x02\x02" +
		"\u0B55\u0B45\x03\x02\x02\x02\u0B55\u0B4D\x03\x02\x02\x02\u0B56\xC1\x03" +
		"\x02\x02\x02\u0B57\u0B6D\x05\xC4c\x02\u0B58\u0B5A\x05\x06\x04\x02\u0B59" +
		"\u0B58\x03\x02\x02\x02\u0B5A\u0B5B\x03\x02\x02\x02\u0B5B\u0B59\x03\x02" +
		"\x02\x02\u0B5B\u0B5C\x03\x02\x02\x02\u0B5C\u0B63\x03\x02\x02\x02\u0B5D" +
		"\u0B5F\x07\xFA\x02\x02\u0B5E\u0B60\x05\x06\x04\x02\u0B5F\u0B5E\x03\x02" +
		"\x02\x02\u0B60\u0B61\x03\x02\x02\x02\u0B61\u0B5F\x03\x02\x02\x02\u0B61" +
		"\u0B62\x03\x02\x02\x02\u0B62\u0B64\x03\x02\x02\x02\u0B63\u0B5D\x03\x02" +
		"\x02\x02\u0B63\u0B64\x03\x02\x02\x02\u0B64\u0B65\x03\x02\x02\x02\u0B65" +
		"\u0B67\x07\xF0\x02\x02\u0B66\u0B68\x05\x06\x04\x02\u0B67\u0B66\x03\x02" +
		"\x02\x02\u0B68\u0B69\x03\x02\x02\x02\u0B69\u0B67\x03\x02\x02\x02\u0B69" +
		"\u0B6A\x03\x02\x02\x02\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6C\x07\u0104" +
		"\x02\x02\u0B6C\u0B6E\x03\x02\x02\x02\u0B6D\u0B59\x03\x02\x02\x02\u0B6D" +
		"\u0B6E\x03\x02\x02\x02\u0B6E\u0B78\x03\x02\x02\x02\u0B6F\u0B71\x07\u010C" +
		"\x02\x02\u0B70\u0B72\x05\x06\x04\x02\u0B71\u0B70\x03\x02\x02\x02\u0B72" +
		"\u0B73\x03\x02\x02\x02\u0B73\u0B71\x03\x02\x02\x02\u0B73\u0B74\x03\x02" +
		"\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75\u0B76\x05\xC4c\x02\u0B76\u0B78" +
		"\x03\x02\x02\x02\u0B77\u0B57\x03\x02\x02\x02\u0B77\u0B6F\x03\x02\x02\x02" +
		"\u0B78\xC3\x03\x02\x02\x02\u0B79\u0B7A\x07\u01A1\x02\x02\u0B7A\xC5\x03" +
		"\x02\x02\x02\u0B7B\u0B7D\x07\xCE\x02\x02\u0B7C\u0B7E\x05\x06\x04\x02\u0B7D" +
		"\u0B7C\x03\x02\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\u0B7D\x03\x02" +
		"\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0B82\x03\x02\x02\x02\u0B81" +
		"\u0B7B\x03\x02\x02\x02\u0B81\u0B82\x03\x02\x02\x02\u0B82\u0B83\x03\x02" +
		"\x02\x02\u0B83\u0C3A\x07\xB4\x02\x02\u0B84\u0B86\x07:\x02\x02\u0B85\u0B87" +
		"\x05\x06\x04\x02\u0B86\u0B85\x03\x02\x02\x02\u0B87\u0B88\x03\x02\x02\x02" +
		"\u0B88\u0B86\x03\x02\x02\x02\u0B88\u0B89\x03\x02\x02\x02\u0B89\u0B8A\x03" +
		"\x02\x02\x02\u0B8A\u0B8B\x05\xD4k\x02\u0B8B\u0C3A\x03\x02\x02\x02\u0B8C" +
		"\u0B94\x07U\x02\x02\u0B8D\u0B8F\x05\x06\x04\x02\u0B8E\u0B8D\x03\x02\x02" +
		"\x02\u0B8F\u0B90\x03\x02\x02\x02\u0B90\u0B8E\x03\x02\x02\x02\u0B90\u0B91" +
		"\x03\x02\x02\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B93\x07\xCE\x02\x02" +
		"\u0B93\u0B95\x03\x02\x02\x02\u0B94\u0B8E\x03\x02\x02\x02\u0B94\u0B95\x03" +
		"\x02\x02\x02\u0B95\u0BA1\x03\x02\x02\x02\u0B96\u0B9E\x07V\x02\x02\u0B97" +
		"\u0B99\x05\x06\x04\x02\u0B98\u0B97\x03\x02\x02\x02\u0B99\u0B9A\x03\x02" +
		"\x02\x02\u0B9A\u0B98\x03\x02\x02\x02\u0B9A\u0B9B\x03\x02\x02\x02\u0B9B" +
		"\u0B9C\x03\x02\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0B9C\u0B9D\x07\x12\x02\x02\u0B9D\u0B9F\x03\x02\x02\x02\u0B9E\u0B98\x03" +
		"\x02\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA1\x03\x02\x02\x02\u0BA0" +
		"\u0B8C\x03\x02\x02\x02\u0BA0\u0B96\x03\x02\x02\x02\u0BA1\u0BA3\x03\x02" +
		"\x02\x02\u0BA2\u0BA4\x05\x06\x04\x02\u0BA3\u0BA2\x03\x02\x02\x02\u0BA4" +
		"\u0BA5\x03\x02\x02\x02\u0BA5\u0BA3\x03\x02\x02\x02\u0BA5\u0BA6\x03\x02" +
		"\x02\x02\u0BA6\u0BC1\x03\x02\x02\x02\u0BA7\u0BB1\x05\xD2j\x02\u0BA8\u0BAA" +
		"\x05\x06\x04\x02\u0BA9\u0BA8\x03\x02\x02\x02\u0BAA\u0BAD\x03\x02\x02\x02" +
		"\u0BAB\u0BA9\x03\x02\x02\x02\u0BAB\u0BAC\x03\x02\x02\x02\u0BAC\u0BAE\x03" +
		"\x02\x02\x02\u0BAD\u0BAB\x03\x02\x02\x02\u0BAE\u0BB0\x05\xD2j\x02\u0BAF" +
		"\u0BAB\x03\x02\x02\x02\u0BB0\u0BB3\x03\x02\x02\x02\u0BB1\u0BAF\x03\x02" +
		"\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BC2\x03\x02\x02\x02\u0BB3" +
		"\u0BB1\x03\x02\x02\x02\u0BB4\u0BBE\x07\xA7\x02\x02\u0BB5\u0BB7\x05\x06" +
		"\x04\x02\u0BB6\u0BB5\x03\x02\x02\x02\u0BB7\u0BBA\x03\x02\x02\x02\u0BB8" +
		"\u0BB6\x03\x02\x02\x02\u0BB8\u0BB9\x03\x02\x02\x02\u0BB9\u0BBB\x03\x02" +
		"\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02\u0BBB\u0BBD\x05\xD2j\x02\u0BBC\u0BB8" +
		"\x03\x02\x02\x02\u0BBD\u0BC0\x03\x02\x02\x02\u0BBE\u0BBC\x03\x02\x02\x02" +
		"\u0BBE\u0BBF\x03\x02\x02\x02\u0BBF\u0BC2\x03\x02\x02\x02\u0BC0\u0BBE\x03" +
		"\x02\x02\x02\u0BC1\u0BA7\x03\x02\x02\x02\u0BC1\u0BB4\x03\x02\x02\x02\u0BC2" +
		"\u0C3A\x03\x02\x02\x02\u0BC3\u0BC5\x07\u0104\x02\x02\u0BC4\u0BC6\x05\x06" +
		"\x04\x02\u0BC5\u0BC4\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7" +
		"\u0BC5\x03\x02\x02\x02\u0BC7\u0BC8\x03\x02\x02\x02\u0BC8\u0BE5\x03\x02" +
		"\x02\x02\u0BC9\u0BCB\x07\xD9\x02\x02\u0BCA\u0BCC\x05\x06\x04\x02\u0BCB" +
		"\u0BCA\x03\x02\x02\x02\u0BCC\u0BCD\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02" +
		"\x02\x02\u0BCD\u0BCE\x03\x02\x02\x02\u0BCE\u0BD5\x03\x02\x02\x02\u0BCF" +
		"\u0BD1\x07\xCE\x02\x02\u0BD0\u0BD2\x05\x06\x04\x02\u0BD1\u0BD0\x03\x02" +
		"\x02\x02\u0BD2\u0BD3\x03\x02\x02\x02\u0BD3\u0BD1\x03\x02\x02\x02\u0BD3" +
		"\u0BD4\x03\x02\x02\x02\u0BD4\u0BD6\x03\x02\x02\x02\u0BD5\u0BCF\x03\x02" +
		"\x02\x02\u0BD5\u0BD6\x03\x02\x02\x02\u0BD6\u0BE6\x03\x02\x02\x02\u0BD7" +
		"\u0BD9\x07\xDA\x02\x02\u0BD8\u0BDA\x05\x06\x04\x02\u0BD9\u0BD8\x03\x02" +
		"\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u0BD9\x03\x02\x02\x02\u0BDB" +
		"\u0BDC\x03\x02\x02\x02\u0BDC\u0BE3\x03\x02\x02\x02\u0BDD\u0BDF\x07\x12" +
		"\x02\x02\u0BDE\u0BE0\x05\x06\x04\x02\u0BDF\u0BDE\x03\x02\x02\x02\u0BE0" +
		"\u0BE1\x03\x02\x02\x02\u0BE1\u0BDF\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02" +
		"\x02\x02\u0BE2\u0BE4\x03\x02\x02\x02\u0BE3\u0BDD\x03\x02\x02\x02\u0BE3" +
		"\u0BE4\x03\x02\x02\x02\u0BE4\u0BE6\x03\x02\x02\x02\u0BE5\u0BC9\x03\x02" +
		"\x02\x02\u0BE5\u0BD7\x03\x02\x02\x02\u0BE5\u0BE6\x03\x02\x02\x02\u0BE6" +
		"\u0BE7\x03\x02\x02\x02\u0BE7\u0BEF\x05\xD0i\x02\u0BE8\u0BEA\x05\x06\x04" +
		"\x02\u0BE9\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BE9" +
		"\x03\x02\x02\x02\u0BEB\u0BEC\x03\x02\x02\x02\u0BEC\u0BED\x03\x02\x02\x02" +
		"\u0BED\u0BEE\t\r\x02\x02\u0BEE\u0BF0\x03\x02\x02\x02\u0BEF\u0BE9\x03\x02" +
		"\x02\x02\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0\u0BFE\x03\x02\x02\x02\u0BF1" +
		"\u0BF3\x05\x06\x04\x02\u0BF2\u0BF1\x03\x02\x02\x02\u0BF3\u0BF4\x03\x02" +
		"\x02\x02\u0BF4\u0BF2\x03\x02\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5" +
		"\u0BF6\x03\x02\x02\x02\u0BF6\u0BF8\x07\xB8\x02\x02\u0BF7\u0BF9\x05\x06" +
		"\x04\x02\u0BF8\u0BF7\x03\x02\x02\x02\u0BF9\u0BFA\x03\x02\x02\x02\u0BFA" +
		"\u0BF8\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02\x02\x02\u0BFB\u0BFC\x03\x02" +
		"\x02\x02\u0BFC\u0BFD\x05\xCEh\x02\u0BFD\u0BFF\x03\x02\x02\x02\u0BFE\u0BF2" +
		"\x03\x02\x02\x02\u0BFE\u0BFF\x03\x02\x02\x02\u0BFF\u0C13\x03\x02\x02\x02" +
		"\u0C00\u0C02\x05\x06\x04\x02\u0C01\u0C00\x03\x02\x02\x02\u0C02\u0C03\x03" +
		"\x02\x02\x02\u0C03\u0C01\x03\x02\x02\x02\u0C03\u0C04\x03\x02\x02\x02\u0C04" +
		"\u0C05\x03\x02\x02\x02\u0C05\u0C07\x07\xA8\x02\x02\u0C06\u0C08\x05\x06" +
		"\x04\x02\u0C07\u0C06\x03\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02\u0C09" +
		"\u0C07\x03\x02\x02\x02\u0C09\u0C0A\x03\x02\x02\x02\u0C0A\u0C0B\x03\x02" +
		"\x02\x02\u0C0B\u0C0D\x07o\x02\x02\u0C0C\u0C0E\x05\x06\x04\x02\u0C0D\u0C0C" +
		"\x03\x02\x02\x02\u0C0E\u0C0F\x03\x02\x02\x02\u0C0F\u0C0D\x03\x02\x02\x02" +
		"\u0C0F\u0C10\x03\x02\x02\x02\u0C10\u0C11\x03\x02\x02\x02\u0C11\u0C12\x05" +
		"\xCCg\x02\u0C12\u0C14\x03\x02\x02\x02\u0C13\u0C01\x03\x02\x02\x02\u0C13" +
		"\u0C14\x03\x02\x02\x02\u0C14\u0C28\x03\x02\x02\x02\u0C15\u0C17\x05\x06" +
		"\x04\x02\u0C16\u0C15\x03\x02\x02\x02\u0C17\u0C18\x03\x02\x02\x02\u0C18" +
		"\u0C16\x03\x02\x02\x02\u0C18\u0C19\x03\x02\x02\x02\u0C19\u0C1A\x03\x02" +
		"\x02\x02\u0C1A\u0C1C\x07\xD5\x02\x02\u0C1B\u0C1D\x05\x06\x04\x02\u0C1C" +
		"\u0C1B\x03\x02\x02\x02\u0C1D\u0C1E\x03\x02\x02\x02\u0C1E\u0C1C\x03\x02" +
		"\x02\x02\u0C1E\u0C1F\x03\x02\x02\x02\u0C1F\u0C20\x03\x02\x02\x02\u0C20" +
		"\u0C22\x07o\x02\x02\u0C21\u0C23\x05\x06\x04\x02\u0C22\u0C21\x03\x02\x02" +
		"\x02\u0C23\u0C24\x03\x02\x02\x02\u0C24\u0C22\x03\x02\x02\x02\u0C24\u0C25" +
		"\x03\x02\x02\x02\u0C25\u0C26\x03\x02\x02\x02\u0C26\u0C27\x05\xCAf\x02" +
		"\u0C27\u0C29\x03\x02\x02\x02\u0C28\u0C16\x03\x02\x02\x02\u0C28\u0C29\x03" +
		"\x02\x02\x02\u0C29\u0C37\x03\x02\x02\x02\u0C2A\u0C2C\x05\x06\x04\x02\u0C2B" +
		"\u0C2A\x03\x02\x02\x02\u0C2C\u0C2D\x03\x02\x02\x02\u0C2D\u0C2B\x03\x02" +
		"\x02\x02\u0C2D\u0C2E\x03\x02\x02\x02\u0C2E\u0C2F\x03\x02\x02\x02\u0C2F" +
		"\u0C31\x07\xAC\x02\x02\u0C30\u0C32\x05\x06\x04\x02\u0C31\u0C30\x03\x02" +
		"\x02\x02\u0C32\u0C33\x03\x02\x02\x02\u0C33\u0C31\x03\x02\x02\x02\u0C33" +
		"\u0C34\x03\x02\x02\x02\u0C34\u0C35\x03\x02\x02\x02\u0C35\u0C36\x05\xC8" +
		"e\x02\u0C36\u0C38\x03\x02\x02\x02\u0C37\u0C2B\x03\x02\x02\x02\u0C37\u0C38" +
		"\x03\x02\x02\x02\u0C38\u0C3A\x03\x02\x02\x02\u0C39\u0B81\x03\x02\x02\x02" +
		"\u0C39\u0B84\x03\x02\x02\x02\u0C39\u0BA0\x03\x02\x02\x02\u0C39\u0BC3\x03" +
		"\x02\x02\x02\u0C3A\xC7\x03\x02\x02\x02\u0C3B\u0C3C\x07\u01A1\x02\x02\u0C3C" +
		"\xC9\x03\x02\x02\x02\u0C3D\u0C3E\x07\u01A1\x02\x02\u0C3E\xCB\x03\x02\x02" +
		"\x02\u0C3F\u0C40\x07\u01A1\x02\x02\u0C40\xCD\x03\x02\x02\x02\u0C41\u0C42" +
		"\x07\u01A1\x02\x02\u0C42\xCF\x03\x02\x02\x02\u0C43\u0C44\x07\u01A1\x02" +
		"\x02\u0C44\xD1\x03\x02\x02\x02\u0C45\u0C46\x05\u0158\xAD\x02\u0C46\xD3" +
		"\x03\x02\x02\x02\u0C47\u0C48\x07\u01A0\x02\x02\u0C48\xD5\x03\x02\x02\x02" +
		"\u0C49\u0C51\x07\u0175\x02\x02\u0C4A\u0C4C\x05\x06\x04\x02\u0C4B\u0C4A" +
		"\x03\x02\x02\x02\u0C4C\u0C4D\x03\x02\x02\x02\u0C4D\u0C4B\x03\x02\x02\x02" +
		"\u0C4D\u0C4E\x03\x02\x02\x02\u0C4E\u0C4F\x03\x02\x02\x02\u0C4F\u0C50\x07" +
		"\xCE\x02\x02\u0C50\u0C52\x03\x02\x02\x02\u0C51\u0C4B\x03\x02\x02\x02\u0C51" +
		"\u0C52\x03\x02\x02\x02\u0C52\u0C54\x03\x02\x02\x02\u0C53\u0C55\x05\x06" +
		"\x04\x02\u0C54\u0C53\x03\x02\x02\x02\u0C55\u0C56\x03\x02\x02\x02\u0C56" +
		"\u0C54\x03\x02\x02\x02\u0C56\u0C57\x03\x02\x02\x02\u0C57\u0C59\x03\x02" +
		"\x02\x02\u0C58\u0C49\x03\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59" +
		"\u0C5A\x03\x02\x02\x02\u0C5A\u0C5B\x05\xD8m\x02\u0C5B\xD7\x03\x02\x02" +
		"\x02\u0C5C\u0C9C\x07#\x02\x02\u0C5D\u0C65\x07$\x02\x02\u0C5E\u0C60\x05" +
		"\x06\x04\x02\u0C5F\u0C5E\x03\x02\x02\x02\u0C60\u0C61\x03\x02\x02\x02\u0C61" +
		"\u0C5F\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02\u0C62\u0C63\x03\x02" +
		"\x02\x02\u0C63\u0C64\t\x0E\x02\x02\u0C64\u0C66\x03\x02\x02\x02\u0C65\u0C5F" +
		"\x03\x02\x02\x02\u0C65\u0C66\x03\x02\x02\x02\u0C66\u0C9C\x03\x02\x02\x02" +
		"\u0C67\u0C6F\x07\'\x02\x02\u0C68\u0C6A\x05\x06\x04\x02\u0C69\u0C68\x03" +
		"\x02\x02\x02\u0C6A\u0C6B\x03\x02\x02\x02\u0C6B\u0C69\x03\x02\x02\x02\u0C6B" +
		"\u0C6C\x03\x02\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02\u0C6D\u0C6E\t\x0E\x02" +
		"\x02\u0C6E\u0C70\x03\x02\x02\x02\u0C6F\u0C69\x03\x02\x02\x02\u0C6F\u0C70" +
		"\x03\x02\x02\x02\u0C70\u0C9C\x03\x02\x02\x02\u0C71\u0C79\x07&\x02\x02" +
		"\u0C72\u0C74\x05\x06\x04\x02\u0C73\u0C72\x03\x02\x02\x02\u0C74\u0C75\x03" +
		"\x02\x02\x02\u0C75\u0C73\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02\u0C76" +
		"\u0C77\x03\x02\x02\x02\u0C77\u0C78\t\x0E\x02\x02\u0C78\u0C7A\x03\x02\x02" +
		"\x02\u0C79\u0C73\x03\x02\x02\x02\u0C79\u0C7A\x03\x02\x02\x02\u0C7A\u0C9C" +
		"\x03\x02\x02\x02\u0C7B\u0C83\x07%\x02\x02\u0C7C\u0C7E\x05\x06\x04\x02" +
		"\u0C7D\u0C7C\x03\x02\x02\x02\u0C7E\u0C7F\x03\x02\x02\x02\u0C7F\u0C7D\x03" +
		"\x02\x02\x02\u0C7F\u0C80\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81" +
		"\u0C82\t\x0E\x02\x02\u0C82\u0C84\x03\x02\x02\x02\u0C83\u0C7D\x03\x02\x02" +
		"\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\u0C9C\x03\x02\x02\x02\u0C85\u0C9C" +
		"\x07A\x02\x02\u0C86\u0C9C\x07B\x02\x02\u0C87\u0C9C\x07C\x02\x02\u0C88" +
		"\u0C9C\x07D\x02\x02\u0C89\u0C9C\x07E\x02\x02\u0C8A\u0C9C\x07F\x02\x02" +
		"\u0C8B\u0C9C\x07G\x02\x02\u0C8C\u0C9C\x07@\x02\x02\u0C8D\u0C9C\x07I\x02" +
		"\x02\u0C8E\u0C9C\x07J\x02\x02\u0C8F\u0C9C\x07K\x02\x02\u0C90\u0C9C\x07" +
		"L\x02\x02\u0C91\u0C9C\x07M\x02\x02\u0C92\u0C9C\x07N\x02\x02\u0C93\u0C9C" +
		"\x07q\x02\x02\u0C94\u0C9C\x07\xAB\x02\x02\u0C95\u0C9C\x07\xAA\x02\x02" +
		"\u0C96\u0C9C\x07\xA9\x02\x02\u0C97\u0C9C\x07\xC3\x02\x02\u0C98\u0C9C\x07" +
		"\u0102\x02\x02\u0C99\u0C9C\x07\u010D\x02\x02\u0C9A\u0C9C\x07\u010E\x02" +
		"\x02\u0C9B\u0C5C\x03\x02\x02\x02\u0C9B\u0C5D\x03\x02\x02\x02\u0C9B\u0C67" +
		"\x03\x02\x02\x02\u0C9B\u0C71\x03\x02\x02\x02\u0C9B\u0C7B\x03\x02\x02\x02" +
		"\u0C9B\u0C85\x03\x02\x02\x02\u0C9B\u0C86\x03\x02\x02\x02\u0C9B\u0C87\x03" +
		"\x02\x02\x02\u0C9B\u0C88\x03\x02\x02\x02\u0C9B\u0C89\x03\x02\x02\x02\u0C9B" +
		"\u0C8A\x03\x02\x02\x02\u0C9B\u0C8B\x03\x02\x02\x02\u0C9B\u0C8C\x03\x02" +
		"\x02\x02\u0C9B\u0C8D\x03\x02\x02\x02\u0C9B\u0C8E\x03\x02\x02\x02\u0C9B" +
		"\u0C8F\x03\x02\x02\x02\u0C9B\u0C90\x03\x02\x02\x02\u0C9B\u0C91\x03\x02" +
		"\x02\x02\u0C9B\u0C92\x03\x02\x02\x02\u0C9B\u0C93\x03\x02\x02\x02\u0C9B" +
		"\u0C94\x03\x02\x02\x02\u0C9B\u0C95\x03\x02\x02\x02\u0C9B\u0C96\x03\x02" +
		"\x02\x02\u0C9B\u0C97\x03\x02\x02\x02\u0C9B\u0C98\x03\x02\x02\x02\u0C9B" +
		"\u0C99\x03\x02\x02\x02\u0C9B\u0C9A\x03\x02\x02\x02\u0C9C\xD9\x03\x02\x02" +
		"\x02\u0C9D\u0C9F\t\x0F\x02\x02\u0C9E\u0CA0\x05\x06\x04\x02\u0C9F\u0C9E" +
		"\x03\x02\x02\x02\u0CA0\u0CA1\x03\x02\x02\x02\u0CA1\u0C9F\x03\x02\x02\x02" +
		"\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u0CA9\x03\x02\x02\x02\u0CA3\u0CA5\x07" +
		"\xCE\x02\x02\u0CA4\u0CA6\x05\x06\x04\x02\u0CA5\u0CA4\x03\x02\x02\x02\u0CA6" +
		"\u0CA7\x03\x02\x02\x02\u0CA7\u0CA5\x03\x02\x02\x02\u0CA7\u0CA8\x03\x02" +
		"\x02\x02\u0CA8\u0CAA\x03\x02\x02\x02\u0CA9\u0CA3\x03\x02\x02\x02\u0CA9" +
		"\u0CAA\x03\x02\x02\x02\u0CAA\u0CAB\x03\x02\x02\x02\u0CAB\u0CAC\x05\xDC" +
		"o\x02\u0CAC\xDB\x03\x02\x02\x02\u0CAD\u0CAF\x05\xDEp\x02\u0CAE\u0CAD\x03" +
		"\x02\x02\x02\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0\u0CAE\x03\x02\x02\x02\u0CB0" +
		"\u0CB1\x03\x02\x02\x02\u0CB1\xDD\x03\x02\x02\x02\u0CB2\u0CB3\t\x10\x02" +
		"\x02\u0CB3\xDF\x03\x02\x02\x02\u0CB4\u0CB5\x07\u01A3\x02\x02\u0CB5\xE1" +
		"\x03\x02\x02\x02\u0CB6\u0CB7\x07\u01A3\x02\x02\u0CB7\xE3\x03\x02\x02\x02" +
		"\u0CB8\u0CBB\x05\xFE\x80\x02\u0CB9\u0CBB\x05\xF4{\x02\u0CBA\u0CB8\x03" +
		"\x02\x02\x02\u0CBA\u0CB9\x03\x02\x02\x02\u0CBB\xE5\x03\x02\x02\x02\u0CBC" +
		"\u0CC4\x07\u0127\x02\x02\u0CBD\u0CBF\x05\x06\x04\x02\u0CBE\u0CBD\x03\x02" +
		"\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CBE\x03\x02\x02\x02\u0CC0" +
		"\u0CC1\x03\x02\x02\x02\u0CC1\u0CC2\x03\x02\x02\x02\u0CC2\u0CC3\x07\xCE" +
		"\x02\x02\u0CC3\u0CC5\x03\x02\x02\x02\u0CC4\u0CBE\x03\x02\x02\x02\u0CC4" +
		"\u0CC5\x03\x02\x02\x02\u0CC5\u0CD1\x03\x02\x02\x02\u0CC6\u0CCE\x07\u0129" +
		"\x02\x02\u0CC7\u0CC9\x05\x06\x04\x02\u0CC8\u0CC7\x03\x02\x02\x02\u0CC9" +
		"\u0CCA\x03\x02\x02\x02\u0CCA\u0CC8\x03\x02\x02\x02\u0CCA\u0CCB\x03\x02" +
		"\x02\x02\u0CCB\u0CCC\x03\x02\x02\x02\u0CCC\u0CCD\x07\x12\x02\x02\u0CCD" +
		"\u0CCF\x03\x02\x02\x02\u0CCE\u0CC8\x03\x02\x02\x02\u0CCE\u0CCF\x03\x02" +
		"\x02\x02\u0CCF\u0CD1\x03\x02\x02\x02\u0CD0\u0CBC\x03\x02\x02\x02\u0CD0" +
		"\u0CC6\x03\x02\x02\x02\u0CD1\u0CD3\x03\x02\x02\x02\u0CD2\u0CD4\x05\x06" +
		"\x04\x02\u0CD3\u0CD2\x03\x02\x02\x02\u0CD4\u0CD5\x03\x02\x02\x02\u0CD5" +
		"\u0CD3\x03\x02\x02\x02\u0CD5\u0CD6\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02" +
		"\x02\x02\u0CD7\u0CE1\x05\xE8u\x02\u0CD8\u0CDA\x05\x06\x04\x02\u0CD9\u0CD8" +
		"\x03\x02\x02\x02\u0CDA\u0CDD\x03\x02\x02\x02\u0CDB\u0CD9\x03\x02\x02\x02" +
		"\u0CDB\u0CDC\x03\x02\x02\x02\u0CDC\u0CDE\x03\x02\x02\x02\u0CDD\u0CDB\x03" +
		"\x02\x02\x02\u0CDE\u0CE0\x05\xE8u\x02\u0CDF\u0CDB\x03\x02\x02\x02\u0CE0" +
		"\u0CE3\x03\x02\x02\x02\u0CE1\u0CDF\x03\x02\x02\x02\u0CE1\u0CE2\x03\x02" +
		"\x02\x02\u0CE2\xE7\x03\x02\x02\x02\u0CE3\u0CE1\x03\x02\x02\x02\u0CE4\u0CE5" +
		"\x07\u01A3\x02\x02\u0CE5\xE9\x03\x02\x02\x02\u0CE6\u0CE8\x07\xDB\x02\x02" +
		"\u0CE7\u0CE9\x05\x06\x04\x02\u0CE8\u0CE7\x03\x02\x02\x02\u0CE9\u0CEA\x03" +
		"\x02\x02\x02\u0CEA\u0CE8\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02\x02\u0CEB" +
		"\u0CF2\x03\x02\x02\x02\u0CEC\u0CEE\x07\xCE\x02\x02\u0CED\u0CEF\x05\x06" +
		"\x04\x02\u0CEE\u0CED\x03\x02\x02\x02\u0CEF\u0CF0\x03\x02\x02\x02\u0CF0" +
		"\u0CEE\x03\x02\x02\x02\u0CF0\u0CF1\x03\x02\x02\x02\u0CF1\u0CF3\x03\x02" +
		"\x02\x02\u0CF2\u0CEC\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3" +
		"\u0CF4\x03\x02\x02\x02\u0CF4\u0CFC\x05\xF2z\x02\u0CF5\u0CF7\x05\x06\x04" +
		"\x02\u0CF6\u0CF5\x03\x02\x02\x02\u0CF7\u0CF8\x03\x02\x02\x02\u0CF8\u0CF6" +
		"\x03\x02\x02\x02\u0CF8\u0CF9\x03\x02\x02\x02\u0CF9\u0CFA\x03\x02\x02\x02" +
		"\u0CFA\u0CFB\x07\xDD\x02\x02\u0CFB\u0CFD\x03\x02\x02\x02\u0CFC\u0CF6\x03" +
		"\x02\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0D1B\x03\x02\x02\x02\u0CFE" +
		"\u0D00\x05\x06\x04\x02\u0CFF\u0CFE\x03\x02\x02\x02\u0D00\u0D01\x03\x02" +
		"\x02\x02\u0D01\u0CFF\x03\x02\x02\x02\u0D01\u0D02\x03\x02\x02\x02\u0D02" +
		"\u0D09\x03\x02\x02\x02\u0D03\u0D05\x07\u017E\x02\x02\u0D04\u0D06\x05\x06" +
		"\x04\x02\u0D05\u0D04\x03\x02\x02\x02\u0D06\u0D07\x03\x02\x02\x02\u0D07" +
		"\u0D05\x03\x02\x02\x02\u0D07\u0D08\x03\x02\x02\x02\u0D08\u0D0A\x03\x02" +
		"\x02\x02\u0D09\u0D03\x03\x02\x02\x02\u0D09\u0D0A\x03\x02\x02\x02\u0D0A" +
		"\u0D0B\x03\x02\x02\x02\u0D0B\u0D0D\x07\xAC\x02\x02\u0D0C\u0D0E\x05\x06" +
		"\x04\x02\u0D0D\u0D0C\x03\x02\x02\x02\u0D0E\u0D0F\x03\x02\x02\x02\u0D0F" +
		"\u0D0D\x03\x02\x02\x02\u0D0F\u0D10\x03\x02\x02\x02\u0D10\u0D17\x03\x02" +
		"\x02\x02\u0D11\u0D13\x07\x1B\x02\x02\u0D12\u0D14\x05\x06\x04\x02\u0D13" +
		"\u0D12\x03\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0D13\x03\x02" +
		"\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D18\x03\x02\x02\x02\u0D17" +
		"\u0D11\x03\x02\x02\x02\u0D17\u0D18\x03\x02\x02\x02\u0D18\u0D19\x03\x02" +
		"\x02\x02\u0D19\u0D1A\x05\xF0y\x02\u0D1A\u0D1C\x03\x02\x02\x02\u0D1B\u0CFF" +
		"\x03\x02\x02\x02\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D3A\x03\x02\x02\x02" +
		"\u0D1D\u0D1F\x05\x06\x04\x02\u0D1E\u0D1D\x03\x02\x02\x02\u0D1F\u0D20\x03" +
		"\x02\x02\x02\u0D20\u0D1E\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21" +
		"\u0D28\x03\x02\x02\x02\u0D22\u0D24\x07\xDD\x02\x02\u0D23\u0D25\x05\x06" +
		"\x04\x02\u0D24\u0D23\x03\x02\x02\x02\u0D25\u0D26\x03\x02\x02\x02\u0D26" +
		"\u0D24\x03\x02\x02\x02\u0D26\u0D27\x03\x02\x02\x02\u0D27\u0D29\x03\x02" +
		"\x02\x02\u0D28\u0D22\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29" +
		"\u0D30\x03\x02\x02\x02\u0D2A\u0D2C\x07\x1B\x02\x02\u0D2B\u0D2D\x05\x06" +
		"\x04\x02\u0D2C\u0D2B\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02\x02\x02\u0D2E" +
		"\u0D2C\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D31\x03\x02" +
		"\x02\x02\u0D30\u0D2A\x03\x02\x02\x02\u0D30\u0D31\x03\x02\x02\x02\u0D31" +
		"\u0D32\x03\x02\x02\x02\u0D32\u0D34\x07\u0169\x02\x02\u0D33\u0D35\x05\x06" +
		"\x04\x02\u0D34\u0D33\x03\x02\x02\x02\u0D35\u0D36\x03\x02\x02\x02\u0D36" +
		"\u0D34\x03\x02\x02\x02\u0D36\u0D37\x03\x02\x02\x02\u0D37\u0D38\x03\x02" +
		"\x02\x02\u0D38\u0D39\x05\xEEx\x02\u0D39\u0D3B\x03\x02\x02\x02\u0D3A\u0D1E" +
		"\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02\u0D3B\u0D59\x03\x02\x02\x02" +
		"\u0D3C\u0D3E\x05\x06\x04\x02\u0D3D\u0D3C\x03\x02\x02\x02\u0D3E\u0D3F\x03" +
		"\x02\x02\x02\u0D3F\u0D3D\x03\x02\x02\x02\u0D3F\u0D40\x03\x02\x02\x02\u0D40" +
		"\u0D47\x03\x02\x02\x02\u0D41\u0D43\x07\xDD\x02\x02\u0D42\u0D44\x05\x06" +
		"\x04\x02\u0D43\u0D42\x03\x02\x02\x02\u0D44\u0D45\x03\x02\x02\x02\u0D45" +
		"\u0D43\x03\x02\x02\x02\u0D45\u0D46\x03\x02\x02\x02\u0D46\u0D48\x03\x02" +
		"\x02\x02\u0D47\u0D41\x03\x02\x02\x02\u0D47\u0D48\x03\x02\x02\x02\u0D48" +
		"\u0D4F\x03\x02\x02\x02\u0D49\u0D4B\x07\x1B\x02\x02\u0D4A\u0D4C\x05\x06" +
		"\x04\x02\u0D4B\u0D4A\x03\x02\x02\x02\u0D4C\u0D4D\x03\x02\x02\x02\u0D4D" +
		"\u0D4B\x03\x02\x02\x02\u0D4D\u0D4E\x03\x02\x02\x02\u0D4E\u0D50\x03\x02" +
		"\x02\x02\u0D4F\u0D49\x03\x02\x02\x02\u0D4F\u0D50\x03\x02\x02\x02\u0D50" +
		"\u0D51\x03\x02\x02\x02\u0D51\u0D53\x07-\x02\x02\u0D52\u0D54\x05\x06\x04" +
		"\x02\u0D53\u0D52\x03\x02\x02\x02\u0D54\u0D55\x03\x02\x02\x02\u0D55\u0D53" +
		"\x03\x02\x02\x02\u0D55\u0D56\x03\x02\x02\x02\u0D56\u0D57\x03\x02\x02\x02" +
		"\u0D57\u0D58\x05\xECw\x02\u0D58\u0D5A\x03\x02\x02\x02\u0D59\u0D3D\x03" +
		"\x02\x02\x02\u0D59\u0D5A\x03\x02\x02\x02\u0D5A\xEB\x03\x02\x02\x02\u0D5B" +
		"\u0D5E\x07\u01A1\x02\x02\u0D5C\u0D5E\x05\u0158\xAD\x02\u0D5D\u0D5B\x03" +
		"\x02\x02\x02\u0D5D\u0D5C\x03\x02\x02\x02\u0D5E\xED\x03\x02\x02\x02\u0D5F" +
		"\u0D62\x07\u01A1\x02\x02\u0D60\u0D62\x05\u0158\xAD\x02\u0D61\u0D5F\x03" +
		"\x02\x02\x02\u0D61\u0D60\x03\x02\x02\x02\u0D62\xEF\x03\x02\x02\x02\u0D63" +
		"\u0D66\x07\u01A1\x02\x02\u0D64\u0D66\x05\u0158\xAD\x02\u0D65\u0D63\x03" +
		"\x02\x02\x02\u0D65\u0D64\x03\x02\x02\x02\u0D66\xF1\x03\x02\x02\x02\u0D67" +
		"\u0D6A\x07\u01A1\x02\x02\u0D68\u0D6A\x05\u0158\xAD\x02\u0D69\u0D67\x03" +
		"\x02\x02\x02\u0D69\u0D68\x03\x02\x02\x02\u0D6A\xF3\x03\x02\x02\x02\u0D6B" +
		"\u0D6D\x07^\x02\x02\u0D6C\u0D6E\x05\x06\x04\x02\u0D6D\u0D6C\x03\x02\x02" +
		"\x02\u0D6E\u0D6F\x03\x02\x02\x02\u0D6F\u0D6D\x03\x02\x02\x02\u0D6F\u0D70" +
		"\x03\x02\x02\x02\u0D70\u0D85\x03\x02\x02\x02\u0D71\u0D79\x07\u011E\x02" +
		"\x02\u0D72\u0D74\x05\x06\x04\x02\u0D73\u0D72\x03\x02\x02\x02\u0D74\u0D75" +
		"\x03\x02\x02\x02\u0D75\u0D73\x03\x02\x02\x02\u0D75\u0D76\x03\x02\x02\x02" +
		"\u0D76\u0D77\x03\x02\x02\x02\u0D77\u0D78\x07\x12\x02\x02\u0D78\u0D7A\x03" +
		"\x02\x02\x02\u0D79\u0D73\x03\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A" +
		"\u0D86\x03\x02\x02\x02\u0D7B\u0D83\x07\u011D\x02\x02\u0D7C\u0D7E\x05\x06" +
		"\x04\x02\u0D7D\u0D7C\x03\x02\x02\x02\u0D7E\u0D7F\x03\x02\x02\x02\u0D7F" +
		"\u0D7D\x03\x02\x02\x02\u0D7F\u0D80\x03\x02\x02\x02\u0D80\u0D81\x03\x02" +
		"\x02\x02\u0D81\u0D82\x07\xCE\x02\x02\u0D82\u0D84\x03\x02\x02\x02\u0D83" +
		"\u0D7D\x03\x02\x02\x02\u0D83\u0D84\x03\x02\x02\x02\u0D84\u0D86\x03\x02" +
		"\x02\x02\u0D85\u0D71\x03\x02\x02\x02\u0D85\u0D7B\x03\x02\x02\x02\u0D86" +
		"\u0D87\x03\x02\x02\x02\u0D87\u0D91\x05\xF6|\x02\u0D88\u0D8A\x05\x06\x04" +
		"\x02\u0D89\u0D88\x03\x02\x02\x02\u0D8A\u0D8B\x03\x02\x02\x02\u0D8B\u0D89" +
		"\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02\u0D8C\u0D8D\x03\x02\x02\x02" +
		"\u0D8D\u0D8E\x05\xF6|\x02\u0D8E\u0D90\x03\x02\x02\x02\u0D8F\u0D89\x03" +
		"\x02\x02\x02\u0D90\u0D93\x03\x02\x02\x02\u0D91\u0D8F\x03\x02\x02\x02\u0D91" +
		"\u0D92\x03\x02\x02\x02\u0D92\xF5\x03\x02\x02\x02\u0D93\u0D91\x03\x02\x02" +
		"\x02\u0D94\u0D95\x07\u01A3\x02\x02\u0D95\xF7\x03\x02\x02\x02\u0D96\u0D98" +
		"\x07\u0178\x02\x02\u0D97\u0D99\x05\x06\x04\x02\u0D98\u0D97\x03\x02\x02" +
		"\x02\u0D99\u0D9A\x03\x02\x02\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9A\u0D9B" +
		"\x03\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0D9E\x07\xF7\x02\x02" +
		"\u0D9D\u0D9F\x05\x06\x04\x02\u0D9E\u0D9D\x03\x02\x02\x02\u0D9F\u0DA0\x03" +
		"\x02\x02\x02\u0DA0\u0D9E\x03\x02\x02\x02\u0DA0\u0DA1\x03\x02\x02\x02\u0DA1" +
		"\u0DA2\x03\x02\x02\x02\u0DA2\u0DA4\t\x11\x02\x02\u0DA3\u0DA5\x05\x06\x04" +
		"\x02\u0DA4\u0DA3\x03\x02\x02\x02\u0DA5\u0DA6\x03\x02\x02\x02\u0DA6\u0DA4" +
		"\x03\x02\x02\x02\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\u0DAE\x03\x02\x02\x02" +
		"\u0DA8\u0DAA\x07\xCE\x02\x02\u0DA9\u0DAB\x05\x06\x04\x02\u0DAA\u0DA9\x03" +
		"\x02\x02\x02\u0DAB\u0DAC\x03\x02\x02\x02\u0DAC\u0DAA\x03\x02\x02\x02\u0DAC" +
		"\u0DAD\x03\x02\x02\x02\u0DAD\u0DAF\x03\x02\x02\x02\u0DAE\u0DA8\x03\x02" +
		"\x02\x02\u0DAE\u0DAF\x03\x02\x02\x02\u0DAF\u0DB0\x03\x02\x02\x02\u0DB0" +
		"\u0DB1\x05\xFA~\x02\u0DB1\xF9\x03\x02\x02\x02\u0DB2\u0DB5\x07\u01A0\x02" +
		"\x02\u0DB3\u0DB5\x05\u0158\xAD\x02\u0DB4\u0DB2\x03\x02\x02\x02\u0DB4\u0DB3" +
		"\x03\x02\x02\x02\u0DB5\xFB\x03\x02\x02\x02\u0DB6\u0DB8\x07\xD4\x02\x02" +
		"\u0DB7\u0DB9\x05\x06\x04\x02\u0DB8\u0DB7\x03\x02\x02\x02\u0DB9\u0DBA\x03" +
		"\x02\x02\x02\u0DBA\u0DB8\x03\x02\x02\x02\u0DBA\u0DBB\x03\x02\x02\x02\u0DBB" +
		"\u0DD0\x03\x02\x02\x02\u0DBC\u0DC4\x07\u011E\x02\x02\u0DBD\u0DBF\x05\x06" +
		"\x04\x02\u0DBE\u0DBD\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0" +
		"\u0DBE\x03\x02\x02\x02\u0DC0\u0DC1\x03\x02\x02\x02\u0DC1\u0DC2\x03\x02" +
		"\x02\x02\u0DC2\u0DC3\x07\x12\x02\x02\u0DC3\u0DC5\x03\x02\x02\x02\u0DC4" +
		"\u0DBE\x03\x02\x02\x02\u0DC4\u0DC5\x03\x02\x02\x02\u0DC5\u0DD1\x03\x02" +
		"\x02\x02\u0DC6\u0DCE\x07\u011D\x02\x02\u0DC7\u0DC9\x05\x06\x04\x02\u0DC8" +
		"\u0DC7\x03\x02\x02\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA\u0DC8\x03\x02" +
		"\x02\x02\u0DCA\u0DCB\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC" +
		"\u0DCD\x07\xCE\x02\x02\u0DCD\u0DCF\x03\x02\x02\x02\u0DCE\u0DC8\x03\x02" +
		"\x02\x02\u0DCE\u0DCF\x03\x02\x02\x02\u0DCF\u0DD1\x03\x02\x02\x02\u0DD0" +
		"\u0DBC\x03\x02\x02\x02\u0DD0\u0DC6\x03\x02\x02\x02\u0DD1\u0DD3\x03\x02" +
		"\x02\x02\u0DD2\u0DD4\x05\x06\x04\x02\u0DD3\u0DD2\x03\x02\x02\x02\u0DD4" +
		"\u0DD5\x03\x02\x02\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD5\u0DD6\x03\x02" +
		"\x02\x02\u0DD6\u0DD7\x03\x02\x02\x02\u0DD7\u0DD8\t\x12\x02\x02\u0DD8\xFD" +
		"\x03\x02\x02\x02\u0DD9\u0DDB\x07\u011D\x02\x02\u0DDA\u0DDC\x05\x06\x04" +
		"\x02\u0DDB\u0DDA\x03\x02\x02\x02\u0DDC\u0DDD\x03\x02\x02\x02\u0DDD\u0DDB" +
		"\x03\x02\x02\x02\u0DDD\u0DDE\x03\x02\x02\x02\u0DDE\u0DDF\x03\x02\x02\x02" +
		"\u0DDF\u0DE0\x05\u0100\x81\x02\u0DE0\xFF\x03\x02\x02\x02\u0DE1\u0DE3\x07" +
		"Q\x02\x02\u0DE2\u0DE4\x05\x06\x04\x02\u0DE3\u0DE2\x03\x02\x02\x02\u0DE4" +
		"\u0DE5\x03\x02\x02\x02\u0DE5\u0DE3\x03\x02\x02\x02\u0DE5\u0DE6\x03\x02" +
		"\x02\x02\u0DE6\u0DE8\x03\x02\x02\x02\u0DE7\u0DE1\x03\x02\x02\x02\u0DE7" +
		"\u0DE8\x03\x02\x02\x02\u0DE8\u0DF5\x03\x02\x02\x02\u0DE9\u0DEB\x05\u0104" +
		"\x83\x02\u0DEA\u0DEC\x05\x06\x04\x02\u0DEB\u0DEA\x03\x02\x02\x02\u0DEC" +
		"\u0DED\x03\x02\x02\x02\u0DED\u0DEB\x03\x02\x02\x02\u0DED\u0DEE\x03\x02" +
		"\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF\u0DF1\x07\u0168\x02\x02\u0DF0" +
		"\u0DF2\x05\x06\x04\x02\u0DF1\u0DF0\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02" +
		"\x02\x02\u0DF3\u0DF1\x03\x02\x02\x02\u0DF3\u0DF4\x03\x02\x02\x02\u0DF4" +
		"\u0DF6\x03\x02\x02\x02\u0DF5\u0DE9\x03\x02\x02\x02\u0DF5\u0DF6\x03\x02" +
		"\x02\x02\u0DF6\u0DF7\x03\x02\x02\x02\u0DF7\u0DFB\x05\u0106\x84\x02\u0DF8" +
		"\u0DFA\x05\x06\x04\x02\u0DF9\u0DF8\x03\x02\x02\x02\u0DFA\u0DFD\x03\x02" +
		"\x02\x02\u0DFB\u0DF9\x03\x02\x02\x02\u0DFB\u0DFC\x03\x02\x02\x02\u0DFC" +
		"\u0E05\x03\x02\x02\x02\u0DFD\u0DFB\x03\x02\x02\x02\u0DFE\u0E02\x076\x02" +
		"\x02\u0DFF\u0E01\x05\x06\x04\x02\u0E00\u0DFF\x03\x02\x02\x02\u0E01\u0E04" +
		"\x03\x02\x02\x02\u0E02\u0E00\x03\x02\x02\x02\u0E02\u0E03\x03\x02\x02\x02" +
		"\u0E03\u0E06\x03\x02\x02\x02\u0E04\u0E02\x03\x02\x02\x02\u0E05\u0DFE\x03" +
		"\x02\x02\x02\u0E05\u0E06\x03\x02\x02\x02\u0E06\u0E5D\x03\x02\x02\x02\u0E07" +
		"\u0E09\x07\xCE\x02\x02\u0E08\u0E0A\x05\x06\x04\x02\u0E09\u0E08\x03\x02" +
		"\x02\x02\u0E0A\u0E0B\x03\x02\x02\x02\u0E0B\u0E09\x03\x02\x02\x02\u0E0B" +
		"\u0E0C\x03\x02\x02\x02\u0E0C\u0E0E\x03\x02\x02\x02\u0E0D\u0E07\x03\x02" +
		"\x02\x02\u0E0D\u0E0E\x03\x02\x02\x02\u0E0E\u0E0F\x03\x02\x02\x02\u0E0F" +
		"\u0E11\x07\u017A\x02\x02\u0E10\u0E12\x05\x06\x04\x02\u0E11\u0E10\x03\x02" +
		"\x02\x02\u0E12\u0E13\x03\x02\x02\x02\u0E13\u0E11\x03\x02\x02\x02\u0E13" +
		"\u0E14\x03\x02\x02\x02\u0E14\u0E1B\x03\x02\x02\x02\u0E15\u0E17\x07\xC2" +
		"\x02\x02\u0E16\u0E18\x05\x06\x04\x02\u0E17\u0E16\x03\x02\x02\x02\u0E18" +
		"\u0E19\x03\x02\x02\x02\u0E19\u0E17\x03\x02\x02\x02\u0E19\u0E1A\x03\x02" +
		"\x02\x02\u0E1A\u0E1C\x03\x02\x02\x02\u0E1B\u0E15\x03\x02\x02\x02\u0E1B" +
		"\u0E1C\x03\x02\x02\x02\u0E1C\u0E24\x03\x02\x02\x02\u0E1D\u0E21\x07\u0145" +
		"\x02\x02\u0E1E\u0E20\x05\x06\x04\x02\u0E1F\u0E1E\x03\x02\x02\x02\u0E20" +
		"\u0E23\x03\x02\x02\x02\u0E21\u0E1F\x03\x02\x02\x02\u0E21\u0E22\x03\x02" +
		"\x02\x02\u0E22\u0E25\x03\x02\x02\x02\u0E23\u0E21\x03\x02\x02\x02\u0E24" +
		"\u0E1D\x03\x02\x02\x02\u0E24\u0E25\x03\x02\x02\x02\u0E25\u0E2F\x03\x02" +
		"\x02\x02\u0E26\u0E28\x07\xAF\x02\x02\u0E27\u0E29\x05\x06\x04\x02\u0E28" +
		"\u0E27\x03\x02\x02\x02\u0E29\u0E2A\x03\x02\x02\x02\u0E2A\u0E28\x03\x02" +
		"\x02\x02\u0E2A\u0E2B\x03\x02\x02\x02\u0E2B\u0E2D\x03\x02\x02\x02\u0E2C" +
		"\u0E26\x03\x02\x02\x02\u0E2C\u0E2D\x03\x02\x02\x02\u0E2D\u0E2E\x03\x02" +
		"\x02\x02\u0E2E\u0E30\x05\u0104\x83\x02\u0E2F\u0E2C\x03\x02\x02\x02\u0E2F" +
		"\u0E30\x03\x02\x02\x02\u0E30\u0E39\x03\x02\x02\x02\u0E31\u0E33\x07\u0168" +
		"\x02\x02\u0E32\u0E34\x05\x06\x04\x02\u0E33\u0E32\x03\x02\x02\x02\u0E34" +
		"\u0E35\x03\x02\x02\x02\u0E35\u0E33\x03\x02\x02\x02\u0E35\u0E36\x03\x02" +
		"\x02\x02\u0E36\u0E37\x03\x02\x02\x02\u0E37\u0E38\x05\u0106\x84\x02\u0E38" +
		"\u0E3A\x03\x02\x02\x02\u0E39\u0E31\x03\x02\x02\x02\u0E39\u0E3A\x03\x02" +
		"\x02\x02\u0E3A\u0E48\x03\x02\x02\x02\u0E3B\u0E3D\x05\x06\x04\x02\u0E3C" +
		"\u0E3B\x03\x02\x02\x02\u0E3D\u0E40\x03\x02\x02\x02\u0E3E\u0E3C";
	private static readonly _serializedATNSegment8: string =
		"\x03\x02\x02\x02\u0E3E\u0E3F\x03\x02\x02\x02\u0E3F\u0E41\x03\x02\x02\x02" +
		"\u0E40\u0E3E\x03\x02\x02\x02\u0E41\u0E45\x076\x02\x02\u0E42\u0E44\x05" +
		"\x06\x04\x02\u0E43\u0E42\x03\x02\x02\x02\u0E44\u0E47\x03\x02\x02\x02\u0E45" +
		"\u0E43\x03\x02\x02\x02\u0E45\u0E46\x03\x02\x02\x02\u0E46\u0E49\x03\x02" +
		"\x02\x02\u0E47\u0E45\x03\x02\x02\x02\u0E48\u0E3E\x03\x02\x02\x02\u0E48" +
		"\u0E49\x03\x02\x02\x02\u0E49\u0E5A\x03\x02\x02\x02\u0E4A\u0E4C\x07m\x02" +
		"\x02\u0E4B\u0E4D\x05\x06\x04\x02\u0E4C\u0E4B\x03\x02\x02\x02\u0E4D\u0E4E" +
		"\x03\x02\x02\x02\u0E4E\u0E4C\x03\x02\x02\x02\u0E4E\u0E4F\x03\x02\x02\x02" +
		"\u0E4F\u0E56\x03\x02\x02\x02\u0E50\u0E52\x07\xFA\x02\x02\u0E51\u0E53\x05" +
		"\x06\x04\x02\u0E52\u0E51\x03\x02\x02\x02\u0E53\u0E54\x03\x02\x02\x02\u0E54" +
		"\u0E52\x03\x02\x02\x02\u0E54\u0E55\x03\x02\x02\x02\u0E55\u0E57\x03\x02" +
		"\x02\x02\u0E56\u0E50\x03\x02\x02\x02\u0E56\u0E57\x03\x02\x02\x02\u0E57" +
		"\u0E58\x03\x02\x02\x02\u0E58\u0E59\x05\u0102\x82\x02\u0E59\u0E5B\x03\x02" +
		"\x02\x02\u0E5A\u0E4A\x03\x02\x02\x02\u0E5A\u0E5B\x03\x02\x02\x02\u0E5B" +
		"\u0E5D\x03\x02\x02\x02\u0E5C\u0DE7\x03\x02\x02\x02\u0E5C\u0E0D\x03\x02" +
		"\x02\x02\u0E5D\u0101\x03\x02\x02\x02\u0E5E\u0E5F\x05\u0158\xAD\x02\u0E5F" +
		"\u0103\x03\x02\x02\x02\u0E60\u0E61\x07\u01A1\x02\x02\u0E61\u0105\x03\x02" +
		"\x02\x02\u0E62\u0E63\x07\u01A1\x02\x02\u0E63\u0107\x03\x02\x02\x02\u0E64" +
		"\u0E6E\x05~@\x02\u0E65\u0E67\x05\x06\x04\x02\u0E66\u0E65\x03\x02\x02\x02" +
		"\u0E67\u0E68\x03\x02\x02\x02\u0E68\u0E66\x03\x02\x02\x02\u0E68\u0E69\x03" +
		"\x02\x02\x02\u0E69\u0E6C\x03\x02\x02\x02\u0E6A\u0E6D\x05\u010A\x86\x02" +
		"\u0E6B\u0E6D\x07\xA5\x02\x02\u0E6C\u0E6A\x03\x02\x02\x02\u0E6C\u0E6B\x03" +
		"\x02\x02\x02\u0E6D\u0E6F\x03\x02\x02\x02\u0E6E\u0E66\x03\x02\x02\x02\u0E6E" +
		"\u0E6F\x03\x02\x02\x02\u0E6F\u0E79\x03\x02\x02\x02\u0E70\u0E72\x05\x06" +
		"\x04\x02\u0E71\u0E70\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73" +
		"\u0E71\x03\x02\x02\x02\u0E73\u0E74\x03\x02\x02\x02\u0E74\u0E75\x03\x02" +
		"\x02\x02\u0E75\u0E76\x05\u010C\x87\x02\u0E76\u0E78\x03\x02\x02\x02\u0E77" +
		"\u0E71\x03\x02\x02\x02\u0E78\u0E7B\x03\x02\x02\x02\u0E79\u0E77\x03\x02" +
		"\x02\x02\u0E79\u0E7A\x03\x02\x02\x02\u0E7A\u0E7C\x03\x02\x02\x02\u0E7B" +
		"\u0E79\x03\x02\x02\x02\u0E7C\u0E7D\x07\u019D\x02\x02\u0E7D\u0109\x03\x02" +
		"\x02\x02\u0E7E\u0E7F\x07\u01A3\x02\x02\u0E7F\u010B\x03\x02\x02\x02\u0E80" +
		"\u0E82\x07(\x02\x02\u0E81\u0E83\x05\x06\x04\x02\u0E82\u0E81\x03\x02\x02" +
		"\x02\u0E83\u0E84\x03\x02\x02\x02\u0E84\u0E82\x03\x02\x02\x02\u0E84\u0E85" +
		"\x03\x02\x02\x02\u0E85\u0E86\x03\x02\x02\x02\u0E86\u0E87\t\x04\x02\x02" +
		"\u0E87\u0F4B\x03\x02\x02\x02\u0E88\u0E8A\x07\xAE\x02\x02\u0E89\u0E8B\x05" +
		"\x06\x04\x02\u0E8A\u0E89\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02\u0E8C" +
		"\u0E8A\x03\x02\x02\x02\u0E8C\u0E8D\x03\x02\x02\x02\u0E8D\u0E94\x03\x02" +
		"\x02\x02\u0E8E\u0E90\x07\xCE\x02\x02\u0E8F\u0E91\x05\x06\x04\x02\u0E90" +
		"\u0E8F\x03\x02\x02\x02\u0E91\u0E92\x03\x02\x02\x02\u0E92\u0E90\x03\x02" +
		"\x02\x02\u0E92\u0E93\x03\x02\x02\x02\u0E93\u0E95\x03\x02\x02\x02\u0E94" +
		"\u0E8E\x03\x02\x02\x02\u0E94\u0E95\x03\x02\x02\x02\u0E95\u0E96\x03\x02" +
		"\x02\x02\u0E96\u0E97\x05\u0118\x8D\x02\u0E97\u0F4B\x03\x02\x02\x02\u0E98" +
		"\u0E9A\x07 \x02\x02\u0E99\u0E9B\x05\x06\x04\x02\u0E9A\u0E99\x03\x02\x02" +
		"\x02\u0E9B\u0E9C\x03\x02\x02\x02\u0E9C\u0E9A\x03\x02\x02\x02\u0E9C\u0E9D" +
		"\x03\x02\x02\x02\u0E9D\u0EA4\x03\x02\x02\x02\u0E9E\u0EA0\x07\xCE\x02\x02" +
		"\u0E9F\u0EA1\x05\x06\x04\x02\u0EA0\u0E9F\x03\x02\x02\x02\u0EA1\u0EA2\x03" +
		"\x02\x02\x02\u0EA2\u0EA0\x03\x02\x02\x02\u0EA2\u0EA3\x03\x02\x02\x02\u0EA3" +
		"\u0EA5\x03\x02\x02\x02\u0EA4\u0E9E\x03\x02\x02\x02\u0EA4\u0EA5\x03\x02" +
		"\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02\u0EA6\u0EA7\x05\u0118\x8D\x02\u0EA7" +
		"\u0F4B\x03\x02\x02\x02\u0EA8\u0F4B\x07\x1D\x02\x02\u0EA9\u0F4B\x07\u013B" +
		"\x02\x02\u0EAA\u0F4B\x07\u012A\x02\x02\u0EAB\u0EAD\x07\u0175\x02\x02\u0EAC" +
		"\u0EAE\x05\x06\x04\x02\u0EAD\u0EAC\x03\x02\x02\x02\u0EAE\u0EAF\x03\x02" +
		"\x02\x02\u0EAF\u0EAD\x03\x02\x02\x02\u0EAF\u0EB0\x03\x02\x02\x02\u0EB0" +
		"\u0EB7\x03\x02\x02\x02\u0EB1\u0EB3\x07\xCE\x02\x02\u0EB2\u0EB4\x05\x06" +
		"\x04\x02\u0EB3\u0EB2\x03\x02\x02\x02\u0EB4\u0EB5\x03\x02\x02\x02\u0EB5" +
		"\u0EB3\x03\x02\x02\x02\u0EB5\u0EB6\x03\x02\x02\x02\u0EB6\u0EB8\x03\x02" +
		"\x02\x02\u0EB7\u0EB1\x03\x02\x02\x02\u0EB7\u0EB8\x03\x02\x02\x02\u0EB8" +
		"\u0EBA\x03\x02\x02\x02\u0EB9\u0EAB\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02" +
		"\x02\x02\u0EBA\u0EBB\x03\x02\x02\x02\u0EBB\u0F4B\x07q\x02\x02\u0EBC\u0F4B" +
		"\x05\xAEX\x02\u0EBD\u0F4B\x07\xB0\x02\x02\u0EBE\u0F4B\x07\"\x02\x02\u0EBF" +
		"\u0F4B\x07)\x02\x02\u0EC0\u0EC2\x07\x96\x02\x02\u0EC1\u0EC3\x05\x06\x04" +
		"\x02\u0EC2\u0EC1\x03\x02\x02\x02\u0EC3\u0EC4\x03\x02\x02\x02\u0EC4\u0EC2" +
		"\x03\x02\x02\x02\u0EC4\u0EC5\x03\x02\x02\x02\u0EC5\u0EC6\x03\x02\x02\x02" +
		"\u0EC6\u0EC7\t\x13\x02\x02\u0EC7\u0F4B\x03\x02\x02\x02\u0EC8\u0F4B\x07" +
		"\xB9\x02\x02\u0EC9\u0F4B\x07\xE2\x02\x02\u0ECA\u0F4B\x07\u0130\x02\x02" +
		"\u0ECB\u0F4B\x07\u016D\x02\x02\u0ECC\u0ECE\x07\xDC\x02\x02\u0ECD\u0ECF" +
		"\x05\x06\x04\x02\u0ECE\u0ECD\x03\x02\x02\x02\u0ECF\u0ED0\x03\x02\x02\x02" +
		"\u0ED0\u0ECE\x03\x02\x02\x02\u0ED0\u0ED1\x03\x02\x02\x02\u0ED1\u0ED8\x03" +
		"\x02\x02\x02\u0ED2\u0ED4\x07\xF3\x02\x02\u0ED3\u0ED5\x05\x06\x04\x02\u0ED4" +
		"\u0ED3\x03\x02\x02\x02\u0ED5\u0ED6\x03\x02\x02\x02\u0ED6\u0ED4\x03\x02" +
		"\x02\x02\u0ED6\u0ED7\x03\x02\x02\x02\u0ED7\u0ED9\x03\x02\x02\x02\u0ED8" +
		"\u0ED2\x03\x02\x02\x02\u0ED8\u0ED9\x03\x02\x02\x02\u0ED9\u0EE0\x03\x02" +
		"\x02\x02\u0EDA\u0EDC\x07\xCE\x02\x02\u0EDB\u0EDD\x05\x06\x04\x02\u0EDC" +
		"\u0EDB\x03\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02" +
		"\x02\x02\u0EDE\u0EDF\x03\x02\x02\x02\u0EDF\u0EE1\x03\x02\x02\x02\u0EE0" +
		"\u0EDA\x03\x02\x02\x02\u0EE0\u0EE1\x03\x02\x02\x02\u0EE1\u0EE8\x03\x02" +
		"\x02\x02\u0EE2\u0EE4\x07\u010C\x02\x02\u0EE3\u0EE5\x05\x06\x04\x02\u0EE4" +
		"\u0EE3\x03\x02\x02\x02\u0EE5\u0EE6\x03\x02\x02\x02\u0EE6\u0EE4\x03\x02" +
		"\x02\x02\u0EE6\u0EE7\x03\x02\x02\x02\u0EE7\u0EE9\x03\x02\x02\x02\u0EE8" +
		"\u0EE2\x03\x02\x02\x02\u0EE8\u0EE9\x03\x02\x02\x02\u0EE9\u0EEA\x03\x02" +
		"\x02\x02\u0EEA\u0EEB\x05\u0116\x8C\x02\u0EEB\u0F4B\x03\x02\x02\x02\u0EEC" +
		"\u0EEE\x07=\x02\x02\u0EED\u0EEF\x05\x06\x04\x02\u0EEE\u0EED\x03\x02\x02" +
		"\x02\u0EEF\u0EF0\x03\x02\x02\x02\u0EF0\u0EEE\x03\x02\x02\x02\u0EF0\u0EF1" +
		"\x03\x02\x02\x02\u0EF1\u0EF8\x03\x02\x02\x02\u0EF2\u0EF4\x07\xF3\x02\x02" +
		"\u0EF3\u0EF5\x05\x06\x04\x02\u0EF4\u0EF3\x03\x02\x02\x02\u0EF5\u0EF6\x03" +
		"\x02\x02\x02\u0EF6\u0EF4\x03\x02\x02\x02\u0EF6\u0EF7\x03\x02\x02\x02\u0EF7" +
		"\u0EF9\x03\x02\x02\x02\u0EF8\u0EF2\x03\x02\x02\x02\u0EF8\u0EF9\x03\x02" +
		"\x02\x02\u0EF9\u0F00\x03\x02\x02\x02\u0EFA\u0EFC\x07\xCE\x02\x02\u0EFB" +
		"\u0EFD\x05\x06\x04\x02\u0EFC\u0EFB\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02" +
		"\x02\x02\u0EFE\u0EFC\x03\x02\x02\x02\u0EFE\u0EFF\x03\x02\x02\x02\u0EFF" +
		"\u0F01\x03\x02\x02\x02\u0F00\u0EFA\x03\x02\x02\x02\u0F00\u0F01\x03\x02" +
		"\x02\x02\u0F01\u0F08\x03\x02\x02\x02\u0F02\u0F04\x07\u010C\x02\x02\u0F03" +
		"\u0F05\x05\x06\x04\x02\u0F04\u0F03\x03\x02\x02\x02\u0F05\u0F06\x03\x02" +
		"\x02\x02\u0F06\u0F04\x03\x02\x02\x02\u0F06\u0F07\x03\x02\x02\x02\u0F07" +
		"\u0F09\x03\x02\x02\x02\u0F08\u0F02\x03\x02\x02\x02\u0F08\u0F09\x03\x02" +
		"\x02\x02\u0F09\u0F0A\x03\x02\x02\x02\u0F0A\u0F0B\x05\u0116\x8C\x02\u0F0B" +
		"\u0F4B\x03\x02\x02\x02\u0F0C\u0F0E\x07\u0178\x02\x02\u0F0D\u0F0F\x05\x06" +
		"\x04\x02\u0F0E\u0F0D\x03\x02\x02\x02\u0F0F\u0F10\x03\x02\x02\x02\u0F10" +
		"\u0F0E\x03\x02\x02\x02\u0F10\u0F11\x03\x02\x02\x02\u0F11\u0F18\x03\x02" +
		"\x02\x02\u0F12\u0F14\x07\xCE\x02\x02\u0F13\u0F15\x05\x06\x04\x02\u0F14" +
		"\u0F13\x03\x02\x02\x02\u0F15\u0F16\x03\x02\x02\x02\u0F16\u0F14\x03\x02" +
		"\x02\x02\u0F16\u0F17\x03\x02\x02\x02\u0F17\u0F19\x03\x02\x02\x02\u0F18" +
		"\u0F12\x03\x02\x02\x02\u0F18\u0F19\x03\x02\x02\x02\u0F19\u0F1A\x03\x02" +
		"\x02\x02\u0F1A\u0F1B\x05\u0114\x8B\x02\u0F1B\u0F4B\x03\x02\x02\x02\u0F1C" +
		"\u0F1E\x07(\x02\x02\u0F1D\u0F1F\x05\x06\x04\x02\u0F1E\u0F1D\x03\x02\x02" +
		"\x02\u0F1F\u0F20\x03\x02\x02\x02\u0F20\u0F1E\x03\x02\x02\x02\u0F20\u0F21" +
		"\x03\x02\x02\x02\u0F21\u0F28\x03\x02\x02\x02\u0F22\u0F24\x07\u017C\x02" +
		"\x02\u0F23\u0F25\x05\x06\x04\x02\u0F24\u0F23\x03\x02\x02\x02\u0F25\u0F26" +
		"\x03\x02\x02\x02\u0F26\u0F24\x03\x02\x02\x02\u0F26\u0F27\x03\x02\x02\x02" +
		"\u0F27\u0F29\x03\x02\x02\x02\u0F28\u0F22\x03\x02\x02\x02\u0F28\u0F29\x03" +
		"\x02\x02\x02\u0F29\u0F2A\x03\x02\x02\x02\u0F2A\u0F2B\x07\u0184\x02\x02" +
		"\u0F2B\u0F4B\x03\x02\x02\x02\u0F2C\u0F34\t\x07\x02\x02\u0F2D\u0F2F\x05" +
		"\x06\x04\x02\u0F2E\u0F2D\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30" +
		"\u0F2E\x03\x02\x02\x02\u0F30\u0F31\x03\x02\x02\x02\u0F31\u0F32\x03\x02" +
		"\x02\x02\u0F32\u0F33\x07\u0134\x02\x02\u0F33\u0F35\x03\x02\x02\x02\u0F34" +
		"\u0F2E\x03\x02\x02\x02\u0F34\u0F35\x03\x02\x02\x02\u0F35\u0F4B\x03\x02" +
		"\x02\x02\u0F36\u0F38\x05\xDAn\x02\u0F37\u0F39\x05\x06\x04\x02\u0F38\u0F37" +
		"\x03\x02\x02\x02\u0F39\u0F3A\x03\x02\x02\x02\u0F3A\u0F38\x03\x02\x02\x02" +
		"\u0F3A\u0F3B\x03\x02\x02\x02\u0F3B\u0F48\x03\x02\x02\x02\u0F3C\u0F49\x05" +
		"\u010E\x88\x02\u0F3D\u0F45\x05\u0110\x89\x02\u0F3E\u0F40\x05\x06\x04\x02" +
		"\u0F3F\u0F3E\x03\x02\x02\x02\u0F40\u0F41\x03\x02\x02\x02\u0F41\u0F3F\x03" +
		"\x02\x02\x02\u0F41\u0F42\x03\x02\x02\x02\u0F42\u0F43\x03\x02\x02\x02\u0F43" +
		"\u0F44\x05\u0112\x8A\x02\u0F44\u0F46\x03\x02\x02\x02\u0F45\u0F3F\x03\x02" +
		"\x02\x02\u0F45\u0F46\x03\x02\x02\x02\u0F46\u0F49\x03\x02\x02\x02\u0F47" +
		"\u0F49\x05\u0112\x8A\x02\u0F48\u0F3C\x03\x02\x02\x02\u0F48\u0F3D\x03\x02" +
		"\x02\x02\u0F48\u0F47\x03\x02\x02\x02\u0F49\u0F4B\x03\x02\x02\x02\u0F4A" +
		"\u0E80\x03\x02\x02\x02\u0F4A\u0E88\x03\x02\x02\x02\u0F4A\u0E98\x03\x02" +
		"\x02\x02\u0F4A\u0EA8\x03\x02\x02\x02\u0F4A\u0EA9\x03\x02\x02\x02\u0F4A" +
		"\u0EAA\x03\x02\x02\x02\u0F4A\u0EB9\x03\x02\x02\x02\u0F4A\u0EBC\x03\x02" +
		"\x02\x02\u0F4A\u0EBD\x03\x02\x02\x02\u0F4A\u0EBE\x03\x02\x02\x02\u0F4A" +
		"\u0EBF\x03\x02\x02\x02\u0F4A\u0EC0\x03\x02\x02\x02\u0F4A\u0EC8\x03\x02" +
		"\x02\x02\u0F4A\u0EC9\x03\x02\x02\x02\u0F4A\u0ECA\x03\x02\x02\x02\u0F4A" +
		"\u0ECB\x03\x02\x02\x02\u0F4A\u0ECC\x03\x02\x02\x02\u0F4A\u0EEC\x03\x02" +
		"\x02\x02\u0F4A\u0F0C\x03\x02\x02\x02\u0F4A\u0F1C\x03\x02\x02\x02\u0F4A" +
		"\u0F2C\x03\x02\x02\x02\u0F4A\u0F36\x03\x02\x02\x02\u0F4B\u010D\x03\x02" +
		"\x02\x02\u0F4C\u0F4E\x07\u0177\x02\x02\u0F4D\u0F4F\x05\x06\x04\x02\u0F4E" +
		"\u0F4D\x03\x02\x02\x02\u0F4F\u0F50\x03\x02\x02\x02\u0F50\u0F4E\x03\x02" +
		"\x02\x02\u0F50\u0F51\x03\x02\x02\x02\u0F51\u0F52\x03\x02\x02\x02\u0F52" +
		"\u0F53\x05\u0158\xAD\x02\u0F53\u010F\x03\x02\x02\x02\u0F54\u0F56\x07\xAF" +
		"\x02\x02\u0F55\u0F57\x05\x06\x04\x02\u0F56\u0F55\x03\x02\x02\x02\u0F57" +
		"\u0F58\x03\x02\x02\x02\u0F58\u0F56\x03\x02\x02\x02\u0F58\u0F59\x03\x02" +
		"\x02\x02\u0F59\u0F5C\x03\x02\x02\x02\u0F5A\u0F5D\x05\u0158\xAD\x02\u0F5B" +
		"\u0F5D\x05\u0114\x8B\x02\u0F5C\u0F5A\x03\x02\x02\x02\u0F5C\u0F5B\x03\x02" +
		"\x02\x02\u0F5D\u0111\x03\x02\x02\x02\u0F5E\u0F60\x07\u0168\x02\x02\u0F5F" +
		"\u0F61\x05\x06\x04\x02\u0F60\u0F5F\x03\x02\x02\x02\u0F61\u0F62\x03\x02" +
		"\x02\x02\u0F62\u0F60\x03\x02\x02\x02\u0F62\u0F63\x03\x02\x02\x02\u0F63" +
		"\u0F64\x03\x02\x02\x02\u0F64\u0F65\x05\u0158\xAD\x02\u0F65\u0113\x03\x02" +
		"\x02\x02\u0F66\u0F67\x07\u01A0\x02\x02\u0F67\u0115\x03\x02\x02\x02\u0F68" +
		"\u0F6B\x05\u0158\xAD\x02\u0F69\u0F6B\x07\u01A1\x02\x02\u0F6A\u0F68\x03" +
		"\x02\x02\x02\u0F6A\u0F69\x03\x02\x02\x02\u0F6B\u0117\x03\x02\x02\x02\u0F6C" +
		"\u0F6D\x07\u01A1\x02\x02\u0F6D\u0119\x03\x02\x02\x02\u0F6E\u0F70\x07\xC0" +
		"\x02\x02\u0F6F\u0F71\x05\x06\x04\x02\u0F70\u0F6F\x03\x02\x02\x02\u0F71" +
		"\u0F72\x03\x02\x02\x02\u0F72\u0F70\x03\x02\x02\x02\u0F72\u0F73\x03\x02" +
		"\x02\x02\u0F73\u0F74\x03\x02\x02\x02\u0F74\u0F78\x07s\x02\x02\u0F75\u0F77" +
		"\x05\x06\x04\x02\u0F76\u0F75\x03\x02\x02\x02\u0F77\u0F7A\x03\x02\x02\x02" +
		"\u0F78\u0F76\x03\x02\x02\x02\u0F78\u0F79\x03\x02\x02\x02\u0F79\u0F7B\x03" +
		"\x02\x02\x02\u0F7A\u0F78\x03\x02\x02\x02\u0F7B\u0F7F\x07\u019D\x02\x02" +
		"\u0F7C\u0F7E\x05\x06\x04\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7E\u0F81\x03" +
		"\x02\x02\x02\u0F7F\u0F7D\x03\x02\x02\x02\u0F7F\u0F80\x03\x02\x02\x02\u0F80" +
		"\u0F85\x03\x02\x02\x02\u0F81\u0F7F\x03\x02\x02\x02\u0F82\u0F84\x05\u011C" +
		"\x8F\x02\u0F83\u0F82\x03\x02\x02\x02\u0F84\u0F87\x03\x02\x02\x02\u0F85" +
		"\u0F83\x03\x02\x02\x02\u0F85\u0F86\x03\x02\x02\x02\u0F86\u011B\x03\x02" +
		"\x02\x02\u0F87\u0F85\x03\x02\x02\x02\u0F88\u0F91\x05\u011E\x90\x02\u0F89" +
		"\u0F91\x05\u012A\x96\x02\u0F8A\u0F91\x05\u012C\x97\x02\u0F8B\u0F91\x05" +
		"\u012E\x98\x02\u0F8C\u0F91\x05\u0130\x99\x02\u0F8D\u0F91\x05\u0132\x9A" +
		"\x02\u0F8E\u0F91\x05\u0134\x9B\x02\u0F8F\u0F91\x05\x06\x04\x02\u0F90\u0F88" +
		"\x03\x02\x02\x02\u0F90\u0F89\x03\x02\x02\x02\u0F90\u0F8A\x03\x02\x02\x02" +
		"\u0F90\u0F8B\x03\x02\x02\x02\u0F90\u0F8C\x03\x02\x02\x02\u0F90\u0F8D\x03" +
		"\x02\x02\x02\u0F90\u0F8E\x03\x02\x02\x02\u0F90\u0F8F\x03\x02\x02\x02\u0F91" +
		"\u011D\x03\x02\x02\x02\u0F92\u0F96\x07\u0116\x02\x02\u0F93\u0F95\x05\x06" +
		"\x04\x02\u0F94\u0F93\x03\x02\x02\x02\u0F95\u0F98\x03\x02\x02\x02\u0F96" +
		"\u0F94\x03\x02\x02\x02\u0F96\u0F97\x03\x02\x02\x02\u0F97\u0F99\x03\x02" +
		"\x02\x02\u0F98\u0F96\x03\x02\x02\x02\u0F99\u0F9D\x07\u019D\x02\x02\u0F9A" +
		"\u0F9C\x05\x06\x04\x02\u0F9B\u0F9A\x03\x02\x02\x02\u0F9C\u0F9F\x03\x02" +
		"\x02\x02\u0F9D\u0F9B\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E" +
		"\u0FA0\x03\x02\x02\x02\u0F9F\u0F9D\x03\x02\x02\x02\u0FA0\u0FA4\x05\u0120" +
		"\x91\x02\u0FA1\u0FA3\x05\x06\x04\x02\u0FA2\u0FA1\x03\x02\x02\x02\u0FA3" +
		"\u0FA6\x03\x02\x02\x02\u0FA4\u0FA2\x03\x02\x02\x02\u0FA4\u0FA5\x03\x02" +
		"\x02\x02\u0FA5\u0FA8\x03\x02\x02\x02\u0FA6\u0FA4\x03\x02\x02\x02\u0FA7" +
		"\u0FA9\x05\u0122\x92\x02\u0FA8\u0FA7\x03\x02\x02\x02\u0FA8\u0FA9\x03\x02" +
		"\x02\x02\u0FA9\u0FAD\x03\x02\x02\x02\u0FAA\u0FAC\x05\x06\x04\x02\u0FAB" +
		"\u0FAA\x03\x02\x02\x02\u0FAC\u0FAF\x03\x02\x02\x02\u0FAD\u0FAB\x03\x02" +
		"\x02\x02\u0FAD\u0FAE\x03\x02\x02\x02\u0FAE\u0FB1\x03\x02\x02\x02\u0FAF" +
		"\u0FAD\x03\x02\x02\x02\u0FB0\u0FB2\x05\u0124\x93\x02\u0FB1\u0FB0\x03\x02" +
		"\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u0FB6\x03\x02\x02\x02\u0FB3" +
		"\u0FB5\x05\x06\x04\x02\u0FB4\u0FB3\x03\x02\x02\x02\u0FB5\u0FB8\x03\x02" +
		"\x02\x02\u0FB6\u0FB4\x03\x02\x02\x02\u0FB6\u0FB7\x03\x02\x02\x02\u0FB7" +
		"\u0FB9\x03\x02\x02\x02\u0FB8\u0FB6\x03\x02\x02\x02\u0FB9\u0FBA\x07\u019D" +
		"\x02\x02\u0FBA\u011F\x03\x02\x02\x02\u0FBB\u0FBC\x07\u01A3\x02\x02\u0FBC" +
		"\u0121\x03\x02\x02\x02\u0FBD\u0FBF\x07\xCE\x02\x02\u0FBE\u0FC0\x05\x06" +
		"\x04\x02\u0FBF\u0FBE\x03\x02\x02\x02\u0FC0\u0FC1\x03\x02\x02\x02\u0FC1" +
		"\u0FBF\x03\x02\x02\x02\u0FC1\u0FC2\x03\x02\x02\x02\u0FC2\u0FC4\x03\x02" +
		"\x02\x02\u0FC3\u0FBD\x03\x02\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4" +
		"\u0FC5\x03\x02\x02\x02\u0FC5\u0FCD\t\x14\x02\x02\u0FC6\u0FC8\x05\x06\x04" +
		"\x02\u0FC7\u0FC6\x03\x02\x02\x02\u0FC8\u0FC9\x03\x02\x02\x02\u0FC9\u0FC7" +
		"\x03\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02\u0FCA\u0FCB\x03\x02\x02\x02" +
		"\u0FCB\u0FCC\x07\u0115\x02\x02\u0FCC\u0FCE\x03\x02\x02\x02\u0FCD\u0FC7" +
		"\x03\x02\x02\x02\u0FCD\u0FCE\x03\x02\x02\x02\u0FCE\u0123\x03\x02\x02\x02" +
		"\u0FCF\u0FD1\x07\u017E\x02\x02\u0FD0\u0FD2\x05\x06\x04\x02\u0FD1\u0FD0" +
		"\x03\x02\x02\x02\u0FD2\u0FD3\x03\x02\x02\x02\u0FD3\u0FD1\x03\x02\x02\x02" +
		"\u0FD3\u0FD4\x03\x02\x02\x02\u0FD4\u0FD6\x03\x02\x02\x02\u0FD5\u0FCF\x03" +
		"\x02\x02\x02\u0FD5\u0FD6\x03\x02\x02\x02\u0FD6\u0FD7\x03\x02\x02\x02\u0FD7" +
		"\u0FD9\x07\xBE\x02\x02\u0FD8\u0FDA\x05\x06\x04\x02\u0FD9\u0FD8\x03\x02" +
		"\x02\x02\u0FDA\u0FDB\x03\x02\x02\x02\u0FDB\u0FD9\x03\x02\x02\x02\u0FDB" +
		"\u0FDC\x03\x02\x02\x02\u0FDC\u0FDD\x03\x02\x02\x02\u0FDD\u0FDE\x05\u0126" +
		"\x94\x02\u0FDE\u0125\x03\x02\x02\x02\u0FDF\u0FE0\x07\u01A0\x02\x02\u0FE0" +
		"\u0127\x03\x02\x02\x02\u0FE1\u0FE5\x07\u01A4\x02\x02\u0FE2\u0FE4\n\x02" +
		"\x02\x02\u0FE3\u0FE2\x03\x02\x02\x02\u0FE4\u0FE7\x03\x02\x02\x02\u0FE5" +
		"\u0FE3\x03\x02\x02\x02\u0FE5\u0FE6\x03\x02\x02\x02\u0FE6\u0FE8\x03\x02" +
		"\x02\x02\u0FE7\u0FE5\x03\x02\x02\x02\u0FE8\u0FEB\x07\u01A6\x02\x02\u0FE9" +
		"\u0FEB\x05\n\x06\x02\u0FEA\u0FE1\x03\x02\x02\x02\u0FEA\u0FE9\x03\x02\x02" +
		"\x02\u0FEB\u0129\x03\x02\x02\x02\u0FEC\u0FF0\x07\x1C\x02\x02\u0FED\u0FEF" +
		"\x05\x06\x04\x02\u0FEE\u0FED\x03\x02\x02\x02\u0FEF\u0FF2\x03\x02\x02\x02" +
		"\u0FF0\u0FEE\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02\x02\x02\u0FF1\u0FF3\x03" +
		"\x02\x02\x02\u0FF2\u0FF0\x03\x02\x02\x02\u0FF3\u0FF7\x07\u019D\x02\x02" +
		"\u0FF4\u0FF6\n\x02\x02\x02\u0FF5\u0FF4\x03\x02\x02\x02\u0FF6\u0FF9\x03" +
		"\x02\x02\x02\u0FF7\u0FF5\x03\x02\x02\x02\u0FF7\u0FF8\x03\x02\x02\x02\u0FF8" +
		"\u0FFA\x03\x02\x02\x02\u0FF9\u0FF7\x03\x02\x02\x02\u0FFA\u0FFE\x07\u01A6" +
		"\x02\x02\u0FFB\u0FFD\x05\u0128\x95\x02\u0FFC\u0FFB\x03\x02\x02\x02\u0FFD" +
		"\u1000\x03\x02\x02\x02\u0FFE\u0FFC\x03\x02\x02\x02\u0FFE\u0FFF\x03\x02" +
		"\x02\x02\u0FFF\u012B\x03\x02\x02\x02\u1000\u0FFE\x03\x02\x02\x02\u1001" +
		"\u1005\x07\xCC\x02\x02\u1002\u1004\x05\x06\x04\x02\u1003\u1002\x03\x02" +
		"\x02\x02\u1004\u1007\x03\x02\x02\x02\u1005\u1003\x03\x02\x02\x02\u1005" +
		"\u1006\x03\x02\x02\x02\u1006\u1008\x03\x02\x02\x02\u1007\u1005\x03\x02" +
		"\x02\x02\u1008\u100C\x07\u019D\x02\x02\u1009\u100B\n\x02\x02\x02\u100A" +
		"\u1009\x03\x02\x02\x02\u100B\u100E\x03\x02\x02\x02\u100C\u100A\x03\x02" +
		"\x02\x02\u100C\u100D\x03\x02\x02\x02\u100D\u100F\x03\x02\x02\x02\u100E" +
		"\u100C\x03\x02\x02\x02\u100F\u1013\x07\u01A6\x02\x02\u1010\u1012\x05\u0128" +
		"\x95\x02\u1011\u1010\x03\x02\x02\x02\u1012\u1015\x03\x02\x02\x02\u1013" +
		"\u1011\x03\x02\x02\x02\u1013\u1014\x03\x02\x02\x02\u1014\u012D\x03\x02" +
		"\x02\x02\u1015\u1013\x03\x02\x02\x02\u1016\u101A\x07a\x02\x02\u1017\u1019" +
		"\x05\x06\x04\x02\u1018\u1017\x03\x02\x02\x02\u1019\u101C\x03\x02\x02\x02" +
		"\u101A\u1018\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B\u101D\x03" +
		"\x02\x02\x02\u101C\u101A\x03\x02\x02\x02\u101D\u1021\x07\u019D\x02\x02" +
		"\u101E\u1020\n\x02\x02\x02\u101F\u101E\x03\x02\x02\x02\u1020\u1023\x03" +
		"\x02\x02\x02\u1021\u101F\x03\x02\x02\x02\u1021\u1022\x03\x02\x02\x02\u1022" +
		"\u1024\x03\x02\x02\x02\u1023\u1021\x03\x02\x02\x02\u1024\u1028\x07\u01A6" +
		"\x02\x02\u1025\u1027\x05\u0128\x95\x02\u1026\u1025\x03\x02\x02\x02\u1027" +
		"\u102A\x03\x02\x02\x02\u1028\u1026\x03\x02\x02\x02\u1028\u1029\x03\x02" +
		"\x02\x02\u1029\u012F\x03\x02\x02\x02\u102A\u1028\x03\x02\x02\x02\u102B" +
		"\u102F\x07`\x02\x02\u102C\u102E\x05\x06\x04\x02\u102D\u102C\x03\x02\x02" +
		"\x02\u102E\u1031\x03\x02\x02\x02\u102F\u102D\x03\x02\x02\x02\u102F\u1030" +
		"\x03\x02\x02\x02\u1030\u1032\x03\x02\x02\x02\u1031\u102F\x03\x02\x02\x02" +
		"\u1032\u1036\x07\u019D\x02\x02\u1033\u1035\n\x02\x02\x02\u1034\u1033\x03" +
		"\x02\x02\x02\u1035\u1038\x03\x02\x02\x02\u1036\u1034\x03\x02\x02\x02\u1036" +
		"\u1037\x03\x02\x02\x02\u1037\u1039\x03\x02\x02\x02\u1038\u1036\x03\x02" +
		"\x02\x02\u1039\u103D\x07\u01A6\x02\x02\u103A\u103C\x05\u0128\x95\x02\u103B" +
		"\u103A\x03\x02\x02\x02\u103C\u103F\x03\x02\x02\x02\u103D\u103B\x03\x02" +
		"\x02\x02\u103D\u103E\x03\x02\x02\x02\u103E\u0131\x03\x02\x02\x02\u103F" +
		"\u103D\x03\x02\x02\x02\u1040\u1044\x07\u013C\x02\x02\u1041\u1043\x05\x06" +
		"\x04\x02\u1042\u1041\x03\x02\x02\x02\u1043\u1046\x03\x02\x02\x02\u1044" +
		"\u1042\x03\x02\x02\x02\u1044\u1045\x03\x02\x02\x02\u1045\u1047\x03\x02" +
		"\x02\x02\u1046\u1044\x03\x02\x02\x02\u1047\u104B\x07\u019D\x02\x02\u1048" +
		"\u104A\n\x02\x02\x02\u1049\u1048\x03\x02\x02\x02\u104A\u104D\x03\x02\x02" +
		"\x02\u104B\u1049\x03\x02\x02\x02\u104B\u104C\x03\x02\x02\x02\u104C\u104E" +
		"\x03\x02\x02\x02\u104D\u104B\x03\x02\x02\x02\u104E\u1052\x07\u01A6\x02" +
		"\x02\u104F\u1051\x05\u0128\x95\x02\u1050\u104F\x03\x02\x02\x02\u1051\u1054" +
		"\x03\x02\x02\x02\u1052\u1050\x03\x02\x02\x02\u1052\u1053\x03\x02\x02\x02" +
		"\u1053\u0133\x03\x02\x02\x02\u1054\u1052\x03\x02\x02\x02\u1055\u1059\x07" +
		"\xFD\x02\x02\u1056\u1058\x05\x06\x04\x02\u1057\u1056\x03\x02\x02\x02\u1058" +
		"\u105B\x03\x02\x02\x02\u1059\u1057\x03\x02\x02\x02\u1059\u105A\x03\x02" +
		"\x02\x02\u105A\u105C\x03\x02\x02\x02\u105B\u1059\x03\x02\x02\x02\u105C" +
		"\u1060\x07\u019D\x02\x02\u105D\u105F\x05\x06\x04\x02\u105E\u105D\x03\x02" +
		"\x02\x02\u105F\u1062\x03\x02\x02\x02\u1060\u105E\x03\x02\x02\x02\u1060" +
		"\u1061\x03\x02\x02\x02\u1061\u1064\x03\x02\x02\x02\u1062\u1060\x03\x02" +
		"\x02\x02\u1063\u1065\x05\u0136\x9C\x02\u1064\u1063\x03\x02\x02\x02\u1064" +
		"\u1065\x03\x02\x02\x02\u1065\u1069\x03\x02\x02\x02\u1066\u1068\x05\x06" +
		"\x04\x02\u1067\u1066\x03\x02\x02\x02\u1068\u106B\x03\x02\x02\x02\u1069" +
		"\u1067\x03\x02\x02\x02\u1069\u106A\x03\x02\x02\x02\u106A\u106D\x03\x02" +
		"\x02\x02\u106B\u1069\x03\x02\x02\x02\u106C\u106E\x07\u019D\x02\x02\u106D" +
		"\u106C\x03\x02\x02\x02\u106D\u106E\x03\x02\x02\x02\u106E\u0135\x03\x02" +
		"\x02\x02\u106F\u1071\x07\x17\x02\x02\u1070\u1072\x05\x06\x04\x02\u1071" +
		"\u1070\x03\x02\x02\x02\u1072\u1073\x03\x02\x02\x02\u1073\u1071\x03\x02" +
		"\x02\x02\u1073\u1074\x03\x02\x02\x02\u1074\u107B\x03\x02\x02\x02\u1075" +
		"\u1077\x07\xCE\x02\x02\u1076\u1078\x05\x06\x04\x02\u1077\u1076\x03\x02" +
		"\x02\x02\u1078\u1079\x03\x02\x02\x02\u1079\u1077\x03\x02\x02\x02\u1079" +
		"\u107A\x03\x02\x02\x02\u107A\u107C\x03\x02\x02\x02\u107B\u1075\x03\x02" +
		"\x02\x02\u107B\u107C\x03\x02\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D" +
		"\u1081\t\x15\x02\x02\u107E\u1080\x05\x06\x04\x02\u107F\u107E\x03\x02\x02" +
		"\x02\u1080\u1083\x03\x02\x02\x02\u1081\u107F\x03\x02\x02\x02\u1081\u1082" +
		"\x03\x02\x02\x02\u1082\u1084\x03\x02\x02\x02\u1083\u1081\x03\x02\x02\x02" +
		"\u1084\u1085\x07\u019D\x02\x02\u1085\u0137\x03\x02\x02\x02\u1086\u1088" +
		"\x07\x90\x02\x02\u1087\u1089\x05\x06\x04\x02\u1088\u1087\x03\x02\x02\x02" +
		"\u1089\u108A\x03\x02\x02\x02\u108A\u1088\x03\x02\x02\x02\u108A\u108B\x03" +
		"\x02\x02\x02\u108B\u108C\x03\x02\x02\x02\u108C\u1090\x07s\x02\x02\u108D" +
		"\u108F\x05\x06\x04\x02\u108E\u108D\x03\x02\x02\x02\u108F\u1092\x03\x02" +
		"\x02\x02\u1090\u108E\x03\x02\x02\x02\u1090\u1091\x03\x02\x02\x02\u1091" +
		"\u1093\x03\x02\x02\x02\u1092\u1090\x03\x02\x02\x02\u1093\u1097\x07\u019D" +
		"\x02\x02\u1094\u1096\x05\x06\x04\x02\u1095\u1094\x03\x02\x02\x02\u1096" +
		"\u1099\x03\x02\x02\x02\u1097\u1095\x03\x02\x02\x02\u1097\u1098\x03\x02" +
		"\x02\x02\u1098\u109B\x03\x02\x02\x02\u1099\u1097\x03\x02\x02\x02\u109A" +
		"\u109C\x05\u013A\x9E\x02\u109B\u109A\x03\x02\x02\x02\u109B\u109C\x03\x02" +
		"\x02\x02\u109C\u109E\x03\x02\x02\x02\u109D\u109F\x05\u013C\x9F\x02\u109E" +
		"\u109D\x03\x02\x02\x02\u109E\u109F\x03\x02\x02\x02\u109F\u0139\x03\x02" +
		"\x02\x02\u10A0\u10A2\x07O\x02\x02\u10A1\u10A3\x05\x06\x04\x02\u10A2\u10A1" +
		"\x03\x02\x02\x02\u10A3\u10A4\x03\x02\x02\x02\u10A4\u10A2\x03\x02\x02\x02" +
		"\u10A4\u10A5\x03\x02\x02\x02\u10A5\u10A6\x03\x02\x02\x02\u10A6\u10AA\x07" +
		"\u013A\x02\x02\u10A7\u10A9\x05\x06\x04\x02\u10A8\u10A7\x03\x02\x02\x02" +
		"\u10A9\u10AC\x03\x02\x02\x02\u10AA\u10A8\x03\x02\x02\x02\u10AA\u10AB\x03" +
		"\x02\x02\x02\u10AB\u10AD\x03\x02\x02\x02\u10AC\u10AA\x03\x02\x02\x02\u10AD" +
		"\u10B1\x07\u019D\x02\x02\u10AE\u10B0\x05\x06\x04\x02\u10AF\u10AE\x03\x02" +
		"\x02\x02\u10B0\u10B3\x03\x02\x02\x02\u10B1\u10AF\x03\x02\x02\x02\u10B1" +
		"\u10B2\x03\x02\x02\x02\u10B2\u10B5\x03\x02\x02\x02\u10B3\u10B1\x03\x02" +
		"\x02\x02\u10B4\u10B6\x05\u013E\xA0\x02\u10B5\u10B4\x03\x02\x02\x02\u10B5" +
		"\u10B6\x03\x02\x02\x02\u10B6\u10BA\x03\x02\x02\x02\u10B7\u10B9\x05\x06" +
		"\x04\x02\u10B8\u10B7\x03\x02\x02\x02\u10B9\u10BC\x03\x02\x02\x02\u10BA" +
		"\u10B8\x03\x02\x02\x02\u10BA\u10BB\x03\x02\x02\x02\u10BB\u10BE\x03\x02" +
		"\x02\x02\u10BC\u10BA\x03\x02\x02\x02\u10BD\u10BF\x05\u0144\xA3\x02\u10BE" +
		"\u10BD\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF\u10C3\x03\x02" +
		"\x02\x02\u10C0\u10C2\x05\x06\x04\x02\u10C1\u10C0\x03\x02\x02\x02\u10C2" +
		"\u10C5\x03\x02\x02\x02\u10C3\u10C1\x03\x02\x02\x02\u10C3\u10C4\x03\x02" +
		"\x02\x02\u10C4\u10C7\x03\x02\x02\x02\u10C5\u10C3\x03\x02\x02\x02\u10C6" +
		"\u10C8\x05\u0154\xAB\x02\u10C7\u10C6\x03\x02\x02\x02\u10C7\u10C8\x03\x02" +
		"\x02\x02\u10C8\u10CC\x03\x02\x02\x02\u10C9\u10CB\x05\x06\x04\x02\u10CA" +
		"\u10C9\x03\x02\x02\x02\u10CB\u10CE\x03\x02\x02\x02\u10CC\u10CA\x03\x02" +
		"\x02\x02\u10CC\u10CD\x03\x02\x02\x02\u10CD\u013B\x03\x02\x02\x02\u10CE" +
		"\u10CC\x03\x02\x02\x02\u10CF\u10D1\x07\xCA\x02\x02\u10D0\u10D2\x05\x06" +
		"\x04\x02\u10D1\u10D0\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3" +
		"\u10D1\x03\x02\x02\x02\u10D3\u10D4\x03\x02\x02\x02\u10D4\u10D5\x03\x02" +
		"\x02\x02\u10D5\u10D9\x07\u013A\x02\x02\u10D6\u10D8\x05\x06\x04\x02\u10D7" +
		"\u10D6\x03\x02\x02\x02\u10D8\u10DB\x03\x02\x02\x02\u10D9\u10D7\x03\x02" +
		"\x02\x02\u10D9\u10DA\x03\x02\x02\x02\u10DA\u10DC\x03\x02\x02\x02\u10DB" +
		"\u10D9\x03\x02\x02\x02\u10DC\u10E0\x07\u019D\x02\x02\u10DD\u10DF\x05\x06" +
		"\x04\x02\u10DE\u10DD\x03\x02\x02\x02\u10DF\u10E2\x03\x02\x02\x02\u10E0" +
		"\u10DE\x03\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02\u10E1\u10E4\x03\x02" +
		"\x02\x02\u10E2\u10E0\x03\x02\x02\x02\u10E3\u10E5\x05\u0196\xCC\x02\u10E4" +
		"\u10E3\x03\x02\x02\x02\u10E4\u10E5\x03\x02\x02\x02\u10E5\u10E7\x03\x02" +
		"\x02\x02\u10E6\u10E8\x05\u01C4\xE3\x02\u10E7\u10E6\x03\x02\x02\x02\u10E7" +
		"\u10E8\x03\x02\x02\x02\u10E8\u013D\x03\x02\x02\x02\u10E9\u10ED\x07\u0149" +
		"\x02\x02\u10EA\u10EC\x05\x06\x04\x02\u10EB\u10EA\x03\x02";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u10EC\u10EF\x03\x02\x02\x02\u10ED\u10EB\x03\x02\x02\x02\u10ED" +
		"\u10EE\x03\x02\x02\x02\u10EE\u10F0\x03\x02\x02\x02\u10EF\u10ED\x03\x02" +
		"\x02\x02\u10F0\u10F4\x07\u019D\x02\x02\u10F1\u10F3\x05\x06\x04\x02\u10F2" +
		"\u10F1\x03\x02\x02\x02\u10F3\u10F6\x03\x02\x02\x02\u10F4\u10F2\x03\x02" +
		"\x02\x02\u10F4\u10F5\x03\x02\x02\x02\u10F5\u1109\x03\x02\x02\x02\u10F6" +
		"\u10F4\x03\x02\x02\x02\u10F7\u10FF\x05\u0140\xA1\x02\u10F8\u10FA\x05\x06" +
		"\x04\x02\u10F9\u10F8\x03\x02\x02\x02\u10FA\u10FB\x03\x02\x02\x02\u10FB" +
		"\u10F9\x03\x02\x02\x02\u10FB\u10FC\x03\x02\x02\x02\u10FC\u10FD\x03\x02" +
		"\x02\x02\u10FD\u10FE\x05\u0142\xA2\x02\u10FE\u1100\x03\x02\x02\x02\u10FF" +
		"\u10F9\x03\x02\x02\x02\u10FF\u1100\x03\x02\x02\x02\u1100\u1104\x03\x02" +
		"\x02\x02\u1101\u1103\x05\x06\x04\x02\u1102\u1101\x03\x02\x02\x02\u1103" +
		"\u1106\x03\x02\x02\x02\u1104\u1102\x03\x02\x02\x02\u1104\u1105\x03\x02" +
		"\x02\x02\u1105\u1107\x03\x02\x02\x02\u1106\u1104\x03\x02\x02\x02\u1107" +
		"\u1108\x07\u019D\x02\x02\u1108\u110A\x03\x02\x02\x02\u1109\u10F7\x03\x02" +
		"\x02\x02\u1109\u110A\x03\x02\x02\x02\u110A\u013F\x03\x02\x02\x02\u110B" +
		"\u110C\t\x16\x02\x02\u110C\u0141\x03\x02\x02\x02\u110D\u110F\x07\u017E" +
		"\x02\x02\u110E\u1110\x05\x06\x04\x02\u110F\u110E\x03\x02\x02\x02\u1110" +
		"\u1111\x03\x02\x02\x02\u1111\u110F\x03\x02\x02\x02\u1111\u1112\x03\x02" +
		"\x02\x02\u1112\u1114\x03\x02\x02\x02\u1113\u110D\x03\x02\x02\x02\u1113" +
		"\u1114\x03\x02\x02\x02\u1114\u1115\x03\x02\x02\x02\u1115\u1117\x07e\x02" +
		"\x02\u1116\u1118\x05\x06\x04\x02\u1117\u1116\x03\x02\x02\x02\u1118\u1119" +
		"\x03\x02\x02\x02\u1119\u1117\x03\x02\x02\x02\u1119\u111A\x03\x02\x02\x02" +
		"\u111A\u111B\x03\x02\x02\x02\u111B\u111C\x07\xE9\x02\x02\u111C\u0143\x03" +
		"\x02\x02\x02\u111D\u1121\x07\xF5\x02\x02\u111E\u1120\x05\x06\x04\x02\u111F" +
		"\u111E\x03\x02\x02\x02\u1120\u1123\x03\x02\x02\x02\u1121\u111F\x03\x02" +
		"\x02\x02\u1121\u1122\x03\x02\x02\x02\u1122\u1124\x03\x02\x02\x02\u1123" +
		"\u1121\x03\x02\x02\x02\u1124\u1128\x07\u019D\x02\x02\u1125\u1127\x05\x06" +
		"\x04\x02\u1126\u1125\x03\x02\x02\x02\u1127\u112A\x03\x02\x02\x02\u1128" +
		"\u1126\x03\x02\x02\x02\u1128\u1129\x03\x02\x02\x02\u1129\u114F\x03\x02" +
		"\x02\x02\u112A\u1128\x03\x02\x02\x02\u112B\u1133\x05\u0140\xA1\x02\u112C" +
		"\u112E\x05\x06\x04\x02\u112D\u112C\x03\x02\x02\x02\u112E\u112F\x03\x02" +
		"\x02\x02\u112F\u112D\x03\x02\x02\x02\u112F\u1130\x03\x02\x02\x02\u1130" +
		"\u1131\x03\x02\x02\x02\u1131\u1132\x05\u0146\xA4\x02\u1132\u1134\x03\x02" +
		"\x02\x02\u1133\u112D\x03\x02\x02\x02\u1133\u1134\x03\x02\x02\x02\u1134" +
		"\u113C\x03\x02\x02\x02\u1135\u1137\x05\x06\x04\x02\u1136\u1135\x03\x02" +
		"\x02\x02\u1137\u1138\x03\x02\x02\x02\u1138\u1136\x03\x02\x02\x02\u1138" +
		"\u1139\x03\x02\x02\x02\u1139\u113A\x03\x02\x02\x02\u113A\u113B\x05\u014C" +
		"\xA7\x02\u113B\u113D\x03\x02\x02\x02\u113C\u1136\x03\x02\x02\x02\u113C" +
		"\u113D\x03\x02\x02\x02\u113D\u1145\x03\x02\x02\x02\u113E\u1140\x05\x06" +
		"\x04\x02\u113F\u113E\x03\x02\x02\x02\u1140\u1141\x03\x02\x02\x02\u1141" +
		"\u113F\x03\x02\x02\x02\u1141\u1142\x03\x02\x02\x02\u1142\u1143\x03\x02" +
		"\x02\x02\u1143\u1144\x05\u0150\xA9\x02\u1144\u1146\x03\x02\x02\x02\u1145" +
		"\u113F\x03\x02\x02\x02\u1145\u1146\x03\x02\x02\x02\u1146\u114A\x03\x02" +
		"\x02\x02\u1147\u1149\x05\x06\x04\x02\u1148\u1147\x03\x02\x02\x02\u1149" +
		"\u114C\x03\x02\x02\x02\u114A\u1148\x03\x02\x02\x02\u114A\u114B\x03\x02" +
		"\x02\x02\u114B\u114D\x03\x02\x02\x02\u114C\u114A\x03\x02\x02\x02\u114D" +
		"\u114E\x07\u019D\x02\x02\u114E\u1150\x03\x02\x02\x02\u114F\u112B\x03\x02" +
		"\x02\x02\u114F\u1150\x03\x02\x02\x02\u1150\u0145\x03\x02\x02\x02\u1151" +
		"\u1159\x07\xE7\x02\x02\u1152\u1154\x05\x06\x04\x02\u1153\u1152\x03\x02" +
		"\x02\x02\u1154\u1155\x03\x02\x02\x02\u1155\u1153\x03\x02\x02\x02\u1155" +
		"\u1156\x03\x02\x02\x02\u1156\u1157\x03\x02\x02\x02\u1157\u1158\x07\u0145" +
		"\x02\x02\u1158\u115A\x03\x02\x02\x02\u1159\u1153\x03\x02\x02\x02\u1159" +
		"\u115A\x03\x02\x02\x02\u115A\u115C\x03\x02\x02\x02\u115B\u115D\x05\x06" +
		"\x04\x02\u115C\u115B\x03\x02\x02\x02\u115D\u115E\x03\x02\x02\x02\u115E" +
		"\u115C\x03\x02\x02\x02\u115E\u115F\x03\x02\x02\x02\u115F\u1160\x03\x02" +
		"\x02\x02\u1160\u1162\x05\u0148\xA5\x02\u1161\u1163\x05\x06\x04\x02\u1162" +
		"\u1161\x03\x02\x02\x02\u1163\u1164\x03\x02\x02\x02\u1164\u1162\x03\x02" +
		"\x02\x02\u1164\u1165\x03\x02\x02\x02\u1165\u1166\x03\x02\x02\x02\u1166" +
		"\u1167\x05\u014A\xA6\x02\u1167\u0147\x03\x02\x02\x02\u1168\u1169\x07\u01A1" +
		"\x02\x02\u1169\u0149\x03\x02\x02\x02\u116A\u116B\t\x17\x02\x02\u116B\u014B" +
		"\x03\x02\x02\x02\u116C\u116E\x07\u0115\x02\x02\u116D\u116F\x05\x06\x04" +
		"\x02\u116E\u116D\x03\x02\x02\x02\u116F\u1170\x03\x02\x02\x02\u1170\u116E" +
		"\x03\x02\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171\u1173\x03\x02\x02\x02" +
		"\u1172\u116C\x03\x02\x02\x02\u1172\u1173\x03\x02\x02\x02\u1173\u117A\x03" +
		"\x02\x02\x02\u1174\u1176\x07<\x02\x02\u1175\u1177\x05\x06\x04\x02\u1176" +
		"\u1175\x03\x02\x02\x02\u1177\u1178\x03\x02\x02\x02\u1178\u1176\x03\x02" +
		"\x02\x02\u1178\u1179\x03\x02\x02\x02\u1179\u117B\x03\x02\x02\x02\u117A" +
		"\u1174\x03\x02\x02\x02\u117A\u117B\x03\x02\x02\x02\u117B\u117C\x03\x02" +
		"\x02\x02\u117C\u1184\x07\u0140\x02\x02\u117D\u117F\x05\x06\x04\x02\u117E" +
		"\u117D\x03\x02\x02\x02\u117F\u1180\x03\x02\x02\x02\u1180\u117E\x03\x02" +
		"\x02\x02\u1180\u1181\x03\x02\x02\x02\u1181\u1182\x03\x02\x02\x02\u1182" +
		"\u1183\x07\xCE\x02\x02\u1183\u1185\x03\x02\x02\x02\u1184\u117E\x03\x02" +
		"\x02\x02\u1184\u1185\x03\x02\x02\x02\u1185\u1187\x03\x02\x02\x02\u1186" +
		"\u1188\x05\x06\x04\x02\u1187\u1186\x03\x02\x02\x02\u1188\u1189\x03\x02" +
		"\x02\x02\u1189\u1187\x03\x02\x02\x02\u1189\u118A\x03\x02\x02\x02\u118A" +
		"\u118B\x03\x02\x02\x02\u118B\u118C\x05\u014E\xA8\x02\u118C\u014D\x03\x02" +
		"\x02\x02\u118D\u118E\x07\u01A3\x02\x02\u118E\u014F\x03\x02\x02\x02\u118F" +
		"\u1197\x07\u013D\x02\x02\u1190\u1192\x05\x06\x04\x02\u1191\u1190\x03\x02" +
		"\x02\x02\u1192\u1193\x03\x02\x02\x02\u1193\u1191\x03\x02\x02\x02\u1193" +
		"\u1194\x03\x02\x02\x02\u1194\u1195\x03\x02\x02\x02\u1195\u1196\x07\xCE" +
		"\x02\x02\u1196\u1198\x03\x02\x02\x02\u1197\u1191\x03\x02\x02\x02\u1197" +
		"\u1198\x03\x02\x02\x02\u1198\u1199\x03\x02\x02\x02\u1199\u119A\x05\u0152" +
		"\xAA\x02\u119A\u0151\x03\x02\x02\x02\u119B\u119C\x07\u01A1\x02\x02\u119C" +
		"\u0153\x03\x02\x02\x02\u119D\u11A1\x07\u014C\x02\x02\u119E\u11A0\x05\x06" +
		"\x04\x02\u119F\u119E\x03\x02\x02\x02\u11A0\u11A3\x03\x02\x02\x02\u11A1" +
		"\u119F\x03\x02\x02\x02\u11A1\u11A2\x03\x02\x02\x02\u11A2\u11A4\x03\x02" +
		"\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A4\u11A8\x07\u019D\x02\x02\u11A5" +
		"\u11A7\x05\x06\x04\x02\u11A6\u11A5\x03\x02\x02\x02\u11A7\u11AA\x03\x02" +
		"\x02\x02\u11A8\u11A6\x03\x02\x02\x02\u11A8\u11A9\x03\x02\x02\x02\u11A9" +
		"\u11B8\x03\x02\x02\x02\u11AA\u11A8\x03\x02\x02\x02\u11AB\u11AF\x05\u0156" +
		"\xAC\x02\u11AC\u11AE\x05\x06\x04\x02\u11AD\u11AC\x03\x02\x02\x02\u11AE" +
		"\u11B1\x03\x02\x02\x02\u11AF\u11AD\x03\x02\x02\x02\u11AF\u11B0\x03\x02" +
		"\x02\x02\u11B0\u11B3\x03\x02\x02\x02\u11B1\u11AF\x03\x02\x02\x02\u11B2" +
		"\u11AB\x03\x02\x02\x02\u11B3\u11B4\x03\x02\x02\x02\u11B4\u11B2\x03\x02" +
		"\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5\u11B6\x03\x02\x02\x02\u11B6" +
		"\u11B7\x07\u019D\x02\x02\u11B7\u11B9\x03\x02\x02\x02\u11B8\u11B2\x03\x02" +
		"\x02\x02\u11B8\u11B9\x03\x02\x02\x02\u11B9\u0155\x03\x02\x02\x02\u11BA" +
		"\u11BC\x05\u018E\xC8\x02\u11BB\u11BD\x05\x06\x04\x02\u11BC\u11BB\x03\x02" +
		"\x02\x02\u11BD\u11BE\x03\x02\x02\x02\u11BE\u11BC\x03\x02\x02\x02\u11BE" +
		"\u11BF\x03\x02\x02\x02\u11BF\u11C6\x03\x02\x02\x02\u11C0\u11C2\x07\xCE" +
		"\x02\x02\u11C1\u11C3\x05\x06\x04\x02\u11C2\u11C1\x03\x02\x02\x02\u11C3" +
		"\u11C4\x03\x02\x02\x02\u11C4\u11C2\x03\x02\x02\x02\u11C4\u11C5\x03\x02" +
		"\x02\x02\u11C5\u11C7\x03\x02\x02\x02\u11C6\u11C0\x03\x02\x02\x02\u11C6" +
		"\u11C7\x03\x02\x02\x02\u11C7\u11C8\x03\x02\x02\x02\u11C8\u11C9\x05\u0190" +
		"\xC9\x02\u11C9\u1226\x03\x02\x02\x02\u11CA\u11CC\x05\u0192\xCA\x02\u11CB" +
		"\u11CD\x05\x06\x04\x02\u11CC\u11CB\x03\x02\x02\x02\u11CD\u11CE\x03\x02" +
		"\x02\x02\u11CE\u11CC\x03\x02\x02\x02\u11CE\u11CF\x03\x02\x02\x02\u11CF" +
		"\u11D6\x03\x02\x02\x02\u11D0\u11D2\x07\xCE\x02\x02\u11D1\u11D3\x05\x06" +
		"\x04\x02\u11D2\u11D1\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4" +
		"\u11D2\x03\x02\x02\x02\u11D4\u11D5\x03\x02\x02\x02\u11D5\u11D7\x03\x02" +
		"\x02\x02\u11D6\u11D0\x03\x02\x02\x02\u11D6\u11D7\x03\x02\x02\x02\u11D7" +
		"\u11D8\x03\x02\x02\x02\u11D8\u11D9\x05\u0194\xCB\x02\u11D9\u1226\x03\x02" +
		"\x02\x02\u11DA\u11DC\x07/\x02\x02\u11DB\u11DD\x05\x06\x04\x02\u11DC\u11DB" +
		"\x03\x02\x02\x02\u11DD\u11DE\x03\x02\x02\x02\u11DE\u11DC\x03\x02\x02\x02" +
		"\u11DE\u11DF\x03\x02\x02\x02\u11DF\u11E6\x03\x02\x02\x02\u11E0\u11E2\x07" +
		"\xCE\x02\x02\u11E1\u11E3\x05\x06\x04\x02\u11E2\u11E1\x03\x02\x02\x02\u11E3" +
		"\u11E4\x03\x02\x02\x02\u11E4\u11E2\x03\x02\x02\x02\u11E4\u11E5\x03\x02" +
		"\x02\x02\u11E5\u11E7\x03\x02\x02\x02\u11E6\u11E0\x03\x02\x02\x02\u11E6" +
		"\u11E7\x03\x02\x02\x02\u11E7\u11E8\x03\x02\x02\x02\u11E8\u11E9\x05\u018C" +
		"\xC7\x02\u11E9\u1226\x03\x02\x02\x02\u11EA\u1226\x05\u0180\xC1\x02\u11EB" +
		"\u1226\x05\u0174\xBB\x02\u11EC\u1226\x05\u0168\xB5\x02\u11ED\u1226\x05" +
		"\u0162\xB2\x02\u11EE\u1226\x05\u015A\xAE\x02\u11EF\u11F1\x07f\x02\x02" +
		"\u11F0\u11F2\x05\x06\x04\x02\u11F1\u11F0\x03\x02\x02\x02\u11F2\u11F3\x03" +
		"\x02\x02\x02\u11F3\u11F1\x03\x02\x02\x02\u11F3\u11F4\x03\x02\x02\x02\u11F4" +
		"\u11FB\x03\x02\x02\x02\u11F5\u11F7\x07\xCE\x02\x02\u11F6\u11F8\x05\x06" +
		"\x04\x02\u11F7\u11F6\x03\x02\x02\x02\u11F8\u11F9\x03\x02\x02\x02\u11F9" +
		"\u11F7\x03\x02\x02\x02\u11F9\u11FA\x03\x02\x02\x02\u11FA\u11FC\x03\x02" +
		"\x02\x02\u11FB\u11F5\x03\x02\x02\x02\u11FB\u11FC\x03\x02\x02\x02\u11FC" +
		"\u11FD\x03\x02\x02\x02\u11FD\u11FE\x07>\x02\x02\u11FE\u1226\x03\x02\x02" +
		"\x02\u11FF\u1201\x07]\x02\x02\u1200\u1202\x05\x06\x04\x02\u1201\u1200" +
		"\x03\x02\x02\x02\u1202\u1203\x03\x02\x02\x02\u1203\u1201\x03\x02\x02\x02" +
		"\u1203\u1204\x03\x02\x02\x02\u1204\u120B\x03\x02\x02\x02\u1205\u1207\x07" +
		"\xCE\x02\x02\u1206\u1208\x05\x06\x04\x02\u1207\u1206\x03\x02\x02\x02\u1208" +
		"\u1209\x03\x02\x02\x02\u1209\u1207\x03\x02\x02\x02\u1209\u120A\x03\x02" +
		"\x02\x02\u120A\u120C\x03\x02\x02\x02\u120B\u1205\x03\x02\x02\x02\u120B" +
		"\u120C\x03\x02\x02\x02\u120C\u120D\x03\x02\x02\x02\u120D\u120E\x05\u0158" +
		"\xAD\x02\u120E\u1226\x03\x02\x02\x02\u120F\u1211\x07Z\x02\x02\u1210\u1212" +
		"\x05\x06\x04\x02\u1211\u1210\x03\x02\x02\x02\u1212\u1213\x03\x02\x02\x02" +
		"\u1213\u1211\x03\x02\x02\x02\u1213\u1214\x03\x02\x02\x02\u1214\u1215\x03" +
		"\x02\x02\x02\u1215\u1217\x07\u0151\x02\x02\u1216\u1218\x05\x06\x04\x02" +
		"\u1217\u1216\x03\x02\x02\x02\u1218\u1219\x03\x02\x02\x02\u1219\u1217\x03" +
		"\x02\x02\x02\u1219\u121A\x03\x02\x02\x02\u121A\u1221\x03\x02\x02\x02\u121B" +
		"\u121D\x07\xCE\x02\x02\u121C\u121E\x05\x06\x04\x02\u121D\u121C\x03\x02" +
		"\x02\x02\u121E\u121F\x03\x02\x02\x02\u121F\u121D\x03\x02\x02\x02\u121F" +
		"\u1220\x03\x02\x02\x02\u1220\u1222\x03\x02\x02\x02\u1221\u121B\x03\x02" +
		"\x02\x02\u1221\u1222\x03\x02\x02\x02\u1222\u1223\x03\x02\x02\x02\u1223" +
		"\u1224\x05\u0158\xAD\x02\u1224\u1226\x03\x02\x02\x02\u1225\u11BA\x03\x02" +
		"\x02\x02\u1225\u11CA\x03\x02\x02\x02\u1225\u11DA\x03\x02\x02\x02\u1225" +
		"\u11EA\x03\x02\x02\x02\u1225\u11EB\x03\x02\x02\x02\u1225\u11EC\x03\x02" +
		"\x02\x02\u1225\u11ED\x03\x02\x02\x02\u1225\u11EE\x03\x02\x02\x02\u1225" +
		"\u11EF\x03\x02\x02\x02\u1225\u11FF\x03\x02\x02\x02\u1225\u120F\x03\x02" +
		"\x02\x02\u1226\u0157\x03\x02\x02\x02\u1227\u1237\x07\u01A3\x02\x02\u1228" +
		"\u122A\x05\x06\x04\x02\u1229\u1228\x03\x02\x02\x02\u122A\u122B\x03\x02" +
		"\x02\x02\u122B\u1229\x03\x02\x02\x02\u122B\u122C\x03\x02\x02\x02\u122C" +
		"\u122D\x03\x02\x02\x02\u122D\u122F\t\x18\x02\x02\u122E\u1230\x05\x06\x04" +
		"\x02\u122F\u122E\x03\x02\x02\x02\u1230\u1231\x03\x02\x02\x02\u1231\u122F" +
		"\x03\x02\x02\x02\u1231\u1232\x03\x02\x02\x02\u1232\u1233\x03\x02\x02\x02" +
		"\u1233\u1234\x07\u01A3\x02\x02\u1234\u1236\x03\x02\x02\x02\u1235\u1229" +
		"\x03\x02\x02\x02\u1236\u1239\x03\x02\x02\x02\u1237\u1235\x03\x02\x02\x02" +
		"\u1237\u1238\x03\x02\x02\x02\u1238\u0159\x03\x02\x02\x02\u1239\u1237\x03" +
		"\x02\x02\x02\u123A\u123C\x07[\x02\x02\u123B\u123D\x05\x06\x04\x02\u123C" +
		"\u123B\x03\x02\x02\x02\u123D\u123E\x03\x02\x02\x02\u123E\u123C\x03\x02" +
		"\x02\x02\u123E\u123F\x03\x02\x02\x02\u123F\u1246\x03\x02\x02\x02\u1240" +
		"\u1242\x07\u0143\x02\x02\u1241\u1243\x05\x06\x04\x02\u1242\u1241\x03\x02" +
		"\x02\x02\u1243\u1244\x03\x02\x02\x02\u1244\u1242\x03\x02\x02\x02\u1244" +
		"\u1245\x03\x02\x02\x02\u1245\u1247\x03\x02\x02\x02\u1246\u1240\x03\x02" +
		"\x02\x02\u1246\u1247\x03\x02\x02\x02\u1247\u124E\x03\x02\x02\x02\u1248" +
		"\u124A\x07\xCE\x02\x02\u1249\u124B\x05\x06\x04\x02\u124A\u1249\x03\x02" +
		"\x02\x02\u124B\u124C\x03\x02\x02\x02\u124C\u124A\x03\x02\x02\x02\u124C" +
		"\u124D\x03\x02\x02\x02\u124D\u124F\x03\x02\x02\x02\u124E\u1248\x03\x02" +
		"\x02\x02\u124E\u124F\x03\x02\x02\x02\u124F\u1250\x03\x02\x02\x02\u1250" +
		"\u1251\x05\u015C\xAF\x02\u1251\u015B\x03\x02\x02\x02\u1252\u1259\x05\u015E" +
		"\xB0\x02\u1253\u1255\x07\u017E\x02\x02\u1254\u1256\x05\x06\x04\x02\u1255" +
		"\u1254\x03\x02\x02\x02\u1256\u1257\x03\x02\x02\x02\u1257\u1255\x03\x02" +
		"\x02\x02\u1257\u1258\x03\x02\x02\x02\u1258\u125A\x03\x02\x02\x02\u1259" +
		"\u1253\x03\x02\x02\x02\u1259\u125A\x03\x02\x02\x02\u125A\u125B\x03\x02" +
		"\x02\x02\u125B\u125D\x07\u010B\x02\x02\u125C\u125E\x05\x06\x04\x02\u125D" +
		"\u125C\x03\x02\x02\x02\u125E\u125F\x03\x02\x02\x02\u125F\u125D\x03\x02" +
		"\x02\x02\u125F\u1260\x03\x02\x02\x02\u1260\u1261\x03\x02\x02\x02\u1261" +
		"\u1263\x07\u0159\x02\x02\u1262\u1264\x05\x06\x04\x02\u1263\u1262\x03\x02" +
		"\x02\x02\u1264\u1265\x03\x02\x02\x02\u1265\u1263\x03\x02\x02\x02\u1265" +
		"\u1266\x03\x02\x02\x02\u1266\u1267\x03\x02\x02\x02\u1267\u1268\x05\u0160" +
		"\xB1\x02\u1268\u126B\x03\x02\x02\x02\u1269\u126B\x07\u01A0\x02\x02\u126A" +
		"\u1252\x03\x02\x02\x02\u126A\u1269\x03\x02\x02\x02\u126B\u015D\x03\x02" +
		"\x02\x02\u126C\u126D\x07\u01A0\x02\x02\u126D\u015F\x03\x02\x02\x02\u126E" +
		"\u126F\x07\u01A0\x02\x02\u126F\u0161\x03\x02\x02\x02\u1270\u1272\x077" +
		"\x02\x02\u1271\u1273\x05\x06\x04\x02\u1272\u1271\x03\x02\x02\x02\u1273" +
		"\u1274\x03\x02\x02\x02\u1274\u1272\x03\x02\x02\x02\u1274\u1275\x03\x02" +
		"\x02\x02\u1275\u1276\x03\x02\x02\x02\u1276\u1278\x05\u0164\xB3\x02\u1277" +
		"\u1279\x05\x06\x04\x02\u1278\u1277\x03\x02\x02\x02\u1279\u127A\x03\x02" +
		"\x02\x02\u127A\u1278\x03\x02\x02\x02\u127A\u127B\x03\x02\x02\x02\u127B" +
		"\u1282\x03\x02\x02\x02\u127C\u127E\x07\xCE\x02\x02\u127D\u127F\x05\x06" +
		"\x04\x02\u127E\u127D\x03\x02\x02\x02\u127F\u1280\x03\x02\x02\x02\u1280" +
		"\u127E\x03\x02\x02\x02\u1280\u1281\x03\x02\x02\x02\u1281\u1283\x03\x02" +
		"\x02\x02\u1282\u127C\x03\x02\x02\x02\u1282\u1283\x03\x02\x02\x02\u1283" +
		"\u128B\x03\x02\x02\x02\u1284\u1288\x05\u0166\xB4\x02\u1285\u1287\x05\x06" +
		"\x04\x02\u1286\u1285\x03\x02\x02\x02\u1287\u128A\x03\x02\x02\x02\u1288" +
		"\u1286\x03\x02\x02\x02\u1288\u1289\x03\x02\x02\x02\u1289\u128C\x03\x02" +
		"\x02\x02\u128A\u1288\x03\x02\x02\x02\u128B\u1284\x03\x02\x02\x02\u128C" +
		"\u128D\x03\x02\x02\x02\u128D\u128B\x03\x02\x02\x02\u128D\u128E\x03\x02" +
		"\x02\x02\u128E\u0163\x03\x02\x02\x02\u128F\u1290\x07\u01A3\x02\x02\u1290" +
		"\u0165\x03\x02\x02\x02\u1291\u129F\x05\u017A\xBE\x02\u1292\u1294\x05\x06" +
		"\x04\x02\u1293\u1292\x03\x02\x02\x02\u1294\u1295\x03\x02\x02\x02\u1295" +
		"\u1293\x03\x02\x02\x02\u1295\u1296\x03\x02\x02\x02\u1296\u1297\x03\x02" +
		"\x02\x02\u1297\u1299\t\b\x02\x02\u1298\u129A\x05\x06\x04\x02\u1299\u1298" +
		"\x03\x02\x02\x02\u129A\u129B\x03\x02\x02\x02\u129B\u1299\x03\x02\x02\x02" +
		"\u129B\u129C\x03\x02\x02\x02\u129C\u129D\x03\x02\x02\x02\u129D\u129E\x05" +
		"\u017C\xBF\x02\u129E\u12A0\x03\x02\x02\x02\u129F\u1293\x03\x02\x02\x02" +
		"\u129F\u12A0\x03\x02\x02\x02\u12A0\u0167\x03\x02\x02\x02\u12A1\u12A3\x07" +
		"\u015A\x02\x02\u12A2\u12A4\x05\x06\x04\x02\u12A3\u12A2\x03\x02\x02\x02" +
		"\u12A4\u12A5\x03\x02\x02\x02\u12A5\u12A3\x03\x02\x02\x02\u12A5\u12A6\x03" +
		"\x02\x02\x02\u12A6\u12AD\x03\x02\x02\x02\u12A7\u12A9\x076\x02\x02\u12A8" +
		"\u12AA\x05\x06\x04\x02\u12A9\u12A8\x03\x02\x02\x02\u12AA\u12AB\x03\x02" +
		"\x02\x02\u12AB\u12A9\x03\x02\x02\x02\u12AB\u12AC\x03\x02\x02\x02\u12AC" +
		"\u12AE\x03\x02\x02\x02\u12AD\u12A7\x03\x02\x02\x02\u12AD\u12AE\x03\x02" +
		"\x02\x02\u12AE\u12B0\x03\x02\x02\x02\u12AF\u12B1\x05\u016A\xB6\x02\u12B0" +
		"\u12AF\x03\x02\x02\x02\u12B1\u12B2\x03\x02\x02\x02\u12B2\u12B0\x03\x02" +
		"\x02\x02\u12B2\u12B3\x03\x02\x02\x02\u12B3\u0169\x03\x02\x02\x02\u12B4" +
		"\u12B6\x05\u016C\xB7\x02\u12B5\u12B4\x03\x02\x02\x02\u12B6\u12B7\x03\x02" +
		"\x02\x02\u12B7\u12B5\x03\x02\x02\x02\u12B7\u12B8\x03\x02\x02\x02\u12B8" +
		"\u12BA\x03\x02\x02\x02\u12B9\u12BB\x05\u016E\xB8\x02\u12BA\u12B9\x03\x02" +
		"\x02\x02\u12BA\u12BB\x03\x02\x02\x02\u12BB\u016B\x03\x02\x02\x02\u12BC" +
		"\u12BE\x05\u0170\xB9\x02\u12BD\u12BF\x05\x06\x04\x02\u12BE\u12BD\x03\x02" +
		"\x02\x02\u12BF\u12C0\x03\x02\x02\x02\u12C0\u12BE\x03\x02\x02\x02\u12C0" +
		"\u12C1\x03\x02\x02\x02\u12C1\u12C3\x03\x02\x02\x02\u12C2\u12BC\x03\x02" +
		"\x02\x02\u12C3\u12C4\x03\x02\x02\x02\u12C4\u12C2\x03\x02\x02\x02\u12C4" +
		"\u12C5\x03\x02\x02\x02\u12C5\u12CC\x03\x02\x02\x02\u12C6\u12C8\t\x19\x02" +
		"\x02\u12C7\u12C9\x05\x06\x04\x02\u12C8\u12C7\x03\x02\x02\x02\u12C9\u12CA" +
		"\x03\x02\x02\x02\u12CA\u12C8\x03\x02\x02\x02\u12CA\u12CB\x03\x02\x02\x02" +
		"\u12CB\u12CD\x03\x02\x02\x02\u12CC\u12C6\x03\x02\x02\x02\u12CC\u12CD\x03" +
		"\x02\x02\x02\u12CD\u12D4\x03\x02\x02\x02\u12CE\u12D0\x05\u0172\xBA\x02" +
		"\u12CF\u12D1\x05\x06\x04\x02\u12D0\u12CF\x03\x02\x02\x02\u12D1\u12D2\x03" +
		"\x02\x02\x02\u12D2\u12D0\x03\x02\x02\x02\u12D2\u12D3\x03\x02\x02\x02\u12D3" +
		"\u12D5\x03\x02\x02\x02\u12D4\u12CE\x03\x02\x02\x02\u12D5\u12D6\x03\x02" +
		"\x02\x02\u12D6\u12D4\x03\x02\x02\x02\u12D6\u12D7\x03\x02\x02\x02\u12D7" +
		"\u016D\x03\x02\x02\x02\u12D8\u12DA\x07\xC2\x02\x02\u12D9\u12DB\x05\x06" +
		"\x04\x02\u12DA\u12D9\x03\x02\x02\x02\u12DB\u12DC\x03\x02\x02\x02\u12DC" +
		"\u12DA\x03\x02\x02\x02\u12DC\u12DD\x03\x02\x02\x02\u12DD\u12DE\x03\x02" +
		"\x02\x02\u12DE\u12E2\x05\u014E\xA8\x02\u12DF\u12E1\x05\x06\x04\x02\u12E0" +
		"\u12DF\x03\x02\x02\x02\u12E1\u12E4\x03\x02\x02\x02\u12E2\u12E0\x03\x02" +
		"\x02\x02\u12E2\u12E3\x03\x02\x02\x02\u12E3\u016F\x03\x02\x02\x02\u12E4" +
		"\u12E2\x03\x02\x02\x02\u12E5\u12E6\x07\u01A3\x02\x02\u12E6\u0171\x03\x02" +
		"\x02\x02\u12E7\u12E8\x07\u01A1\x02\x02\u12E8\u0173\x03\x02\x02\x02\u12E9" +
		"\u12EB\x07\t\x02\x02\u12EA\u12EC\x05\x06\x04\x02\u12EB\u12EA\x03\x02\x02" +
		"\x02\u12EC\u12ED\x03\x02\x02\x02\u12ED\u12EB\x03\x02\x02\x02\u12ED\u12EE" +
		"\x03\x02\x02\x02\u12EE\u12EF\x03\x02\x02\x02\u12EF\u12F1\x05\u014E\xA8" +
		"\x02\u12F0\u12F2\x05\x06\x04\x02\u12F1\u12F0\x03\x02\x02\x02\u12F2\u12F3" +
		"\x03\x02\x02\x02\u12F3\u12F1\x03\x02\x02\x02\u12F3\u12F4\x03\x02\x02\x02" +
		"\u12F4\u12FB\x03\x02\x02\x02\u12F5\u12F7\x07\xCE\x02\x02\u12F6\u12F8\x05" +
		"\x06\x04\x02\u12F7\u12F6\x03\x02\x02\x02\u12F8\u12F9\x03\x02\x02\x02\u12F9" +
		"\u12F7\x03\x02\x02\x02\u12F9\u12FA\x03\x02\x02\x02\u12FA\u12FC\x03\x02" +
		"\x02\x02\u12FB\u12F5\x03\x02\x02\x02\u12FB\u12FC\x03\x02\x02\x02\u12FC" +
		"\u12FD\x03\x02\x02\x02\u12FD\u12FE\x05\u0176\xBC\x02\u12FE\u0175\x03\x02" +
		"\x02\x02\u12FF\u1310\x07\x19\x02\x02\u1300\u1310\x07\u014E\x02\x02\u1301" +
		"\u1310\x07\u014F\x02\x02\u1302\u1310\x07\xEE\x02\x02\u1303\u1310\x07w" +
		"\x02\x02\u1304\u1308\x05\u0178\xBD\x02\u1305\u1307\x05\x06\x04\x02\u1306" +
		"\u1305\x03\x02\x02\x02\u1307\u130A\x03\x02\x02\x02\u1308\u1306\x03\x02" +
		"\x02\x02\u1308\u1309\x03\x02\x02\x02\u1309\u130C\x03\x02\x02\x02\u130A" +
		"\u1308\x03\x02\x02\x02\u130B\u1304\x03\x02\x02\x02\u130C\u130D\x03\x02" +
		"\x02\x02\u130D\u130B\x03\x02\x02\x02\u130D\u130E\x03\x02\x02\x02\u130E" +
		"\u1310\x03\x02\x02\x02\u130F\u12FF\x03\x02\x02\x02\u130F\u1300\x03\x02" +
		"\x02\x02\u130F\u1301\x03\x02\x02\x02\u130F\u1302\x03\x02\x02\x02\u130F" +
		"\u1303\x03\x02\x02\x02\u130F\u130B\x03\x02\x02\x02\u1310\u0177\x03\x02" +
		"\x02\x02\u1311\u131F\x05\u017A\xBE\x02\u1312\u1314\x05\x06\x04\x02\u1313" +
		"\u1312\x03\x02\x02\x02\u1314\u1315\x03\x02\x02\x02\u1315\u1313\x03\x02" +
		"\x02\x02\u1315\u1316\x03\x02\x02\x02\u1316\u1317\x03\x02\x02\x02\u1317" +
		"\u1319\t\b\x02\x02\u1318\u131A\x05\x06\x04\x02\u1319\u1318\x03\x02\x02" +
		"\x02\u131A\u131B\x03\x02\x02\x02\u131B\u1319\x03\x02\x02\x02\u131B\u131C" +
		"\x03\x02\x02\x02\u131C\u131D\x03\x02\x02\x02\u131D\u131E\x05\u017C\xBF" +
		"\x02\u131E\u1320\x03\x02\x02\x02\u131F\u1313\x03\x02\x02\x02\u131F\u1320" +
		"\x03\x02\x02\x02\u1320\u1334\x03\x02\x02\x02\u1321\u132F\x05\u017A\xBE" +
		"\x02\u1322\u1324\x05\x06\x04\x02\u1323\u1322\x03\x02\x02\x02\u1324\u1325" +
		"\x03\x02\x02\x02\u1325\u1323\x03\x02\x02\x02\u1325\u1326\x03\x02\x02\x02" +
		"\u1326\u1327\x03\x02\x02\x02\u1327\u1329\x07\r\x02\x02\u1328\u132A\x05" +
		"\x06\x04\x02\u1329\u1328\x03\x02\x02\x02\u132A\u132B\x03\x02\x02\x02\u132B" +
		"\u1329\x03\x02\x02\x02\u132B\u132C\x03\x02\x02\x02\u132C\u132D\x03\x02" +
		"\x02\x02\u132D\u132E\x05\u017E\xC0\x02\u132E\u1330\x03\x02\x02\x02\u132F" +
		"\u1323\x03\x02\x02\x02\u1330\u1331\x03\x02\x02\x02\u1331\u132F\x03\x02" +
		"\x02\x02\u1331\u1332\x03\x02\x02\x02\u1332\u1334\x03\x02\x02\x02\u1333" +
		"\u1311\x03\x02\x02\x02\u1333\u1321\x03\x02\x02\x02\u1334\u0179\x03\x02" +
		"\x02\x02\u1335\u1336\t\t\x02\x02\u1336\u017B\x03\x02\x02\x02\u1337\u1338" +
		"\t\t\x02\x02\u1338\u017D\x03\x02\x02\x02\u1339\u133A\t\t\x02\x02\u133A" +
		"\u017F\x03\x02\x02\x02\u133B\u133D\x07\u0158\x02\x02\u133C\u133E\x05\x06" +
		"\x04\x02\u133D\u133C\x03\x02\x02\x02\u133E\u133F\x03\x02\x02\x02\u133F" +
		"\u133D\x03\x02\x02\x02\u133F\u1340\x03\x02\x02\x02\u1340\u1341\x03\x02" +
		"\x02\x02\u1341\u1345\x05\u018A\xC6\x02\u1342\u1344\x05\x06\x04\x02\u1343" +
		"\u1342\x03\x02\x02\x02\u1344\u1347\x03\x02\x02\x02\u1345\u1343\x03\x02" +
		"\x02\x02\u1345\u1346\x03\x02\x02\x02\u1346\u1356\x03\x02\x02\x02\u1347" +
		"\u1345\x03\x02\x02\x02\u1348\u134A\x07\xCE\x02\x02\u1349\u134B\x05\x06" +
		"\x04\x02\u134A\u1349\x03\x02\x02\x02\u134B\u134C\x03\x02\x02\x02\u134C" +
		"\u134A\x03\x02\x02\x02\u134C\u134D\x03\x02\x02\x02\u134D\u134F\x03\x02" +
		"\x02\x02\u134E\u1348\x03\x02\x02\x02\u134E\u134F\x03\x02\x02\x02\u134F" +
		"\u1350\x03\x02\x02\x02\u1350\u1352\x05\u0188\xC5\x02\u1351\u1353\x05\x06" +
		"\x04\x02\u1352\u1351\x03\x02\x02\x02\u1353\u1354\x03\x02\x02\x02\u1354" +
		"\u1352\x03\x02\x02\x02\u1354\u1355\x03\x02\x02\x02\u1355\u1357\x03\x02" +
		"\x02\x02\u1356\u134E\x03\x02\x02\x02\u1356\u1357\x03\x02\x02\x02\u1357" +
		"\u136C\x03\x02\x02\x02\u1358\u1360\x05\u0182\xC2\x02\u1359\u135B\x05\x06" +
		"\x04\x02\u135A\u1359\x03\x02\x02\x02\u135B\u135C\x03\x02\x02\x02\u135C" +
		"\u135A\x03\x02\x02\x02\u135C\u135D\x03\x02\x02\x02\u135D\u135E\x03\x02" +
		"\x02\x02\u135E\u135F\x05\u0184\xC3\x02\u135F\u1361\x03\x02\x02\x02\u1360" +
		"\u135A\x03\x02\x02\x02\u1360\u1361\x03\x02\x02\x02\u1361\u136D\x03\x02" +
		"\x02\x02\u1362\u136A\x05\u0184\xC3\x02\u1363\u1365\x05\x06\x04\x02\u1364" +
		"\u1363\x03\x02\x02\x02\u1365\u1366\x03\x02\x02\x02\u1366\u1364\x03\x02" +
		"\x02\x02\u1366\u1367\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02\u1368" +
		"\u1369\x05\u0182\xC2\x02\u1369\u136B\x03\x02\x02\x02\u136A\u1364\x03\x02" +
		"\x02\x02\u136A\u136B\x03\x02\x02\x02\u136B\u136D\x03\x02\x02\x02\u136C" +
		"\u1358\x03\x02\x02\x02\u136C\u1362\x03\x02\x02\x02\u136C\u136D\x03\x02" +
		"\x02\x02\u136D\u1371\x03\x02\x02\x02\u136E\u1370\x05\x06\x04\x02\u136F" +
		"\u136E\x03\x02\x02\x02\u1370\u1373\x03\x02\x02\x02\u1371\u136F\x03\x02" +
		"\x02\x02\u1371\u1372\x03\x02\x02\x02\u1372\u0181\x03\x02\x02\x02\u1373" +
		"\u1371\x03\x02\x02\x02\u1374\u1376\x07\xFA\x02\x02\u1375\u1377\x05\x06" +
		"\x04\x02\u1376\u1375\x03\x02\x02\x02\u1377\u1378\x03\x02\x02\x02\u1378" +
		"\u1376\x03\x02\x02\x02\u1378\u1379\x03\x02\x02\x02\u1379\u1380\x03\x02" +
		"\x02\x02\u137A\u137C\x07\u0151\x02\x02\u137B\u137D\x05\x06\x04\x02\u137C" +
		"\u137B\x03\x02\x02\x02\u137D\u137E\x03\x02\x02\x02\u137E\u137C\x03\x02" +
		"\x02\x02\u137E\u137F\x03\x02\x02\x02\u137F\u1381\x03\x02\x02\x02\u1380" +
		"\u137A\x03\x02\x02\x02\u1380\u1381\x03\x02\x02\x02\u1381\u1388\x03\x02" +
		"\x02\x02\u1382\u1384\x07\xCE\x02\x02\u1383\u1385\x05\x06\x04\x02\u1384" +
		"\u1383\x03\x02\x02\x02\u1385\u1386\x03\x02\x02\x02\u1386\u1384\x03\x02" +
		"\x02\x02\u1386\u1387\x03\x02\x02\x02\u1387\u1389\x03\x02\x02\x02\u1388" +
		"\u1382\x03\x02\x02\x02\u1388\u1389\x03\x02\x02\x02\u1389\u138A\x03\x02" +
		"\x02\x02\u138A\u138B\x05\u0186\xC4\x02\u138B\u0183\x03\x02\x02\x02\u138C" +
		"\u138E\x07\xF8\x02\x02\u138D\u138F\x05\x06\x04\x02\u138E\u138D\x03\x02" +
		"\x02\x02\u138F\u1390\x03\x02\x02\x02\u1390\u138E\x03\x02\x02\x02\u1390" +
		"\u1391\x03\x02\x02\x02\u1391\u1398\x03\x02\x02\x02\u1392\u1394\x07\u0151" +
		"\x02\x02\u1393\u1395\x05\x06\x04\x02\u1394\u1393\x03\x02\x02\x02\u1395" +
		"\u1396\x03\x02\x02\x02\u1396\u1394\x03\x02\x02\x02\u1396\u1397\x03\x02" +
		"\x02\x02\u1397\u1399\x03\x02\x02\x02\u1398\u1392\x03\x02\x02\x02\u1398" +
		"\u1399\x03\x02\x02\x02\u1399\u13A0\x03\x02\x02\x02\u139A\u139C\x07\xCE" +
		"\x02\x02\u139B\u139D\x05\x06\x04\x02\u139C\u139B\x03\x02\x02\x02\u139D" +
		"\u139E\x03\x02\x02\x02\u139E\u139C\x03\x02\x02\x02\u139E\u139F\x03\x02" +
		"\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u139F\u13A1\x03\x02\x02\x02\u13A0\u139A\x03\x02\x02\x02\u13A0\u13A1\x03" +
		"\x02\x02\x02\u13A1\u13A2\x03\x02\x02\x02\u13A2\u13A3\x05\u0186\xC4\x02" +
		"\u13A3\u0185\x03\x02\x02\x02\u13A4\u13A5\x07\u01A3\x02\x02\u13A5\u0187" +
		"\x03\x02\x02\x02\u13A6\u13A7\x07\u01A3\x02\x02\u13A7\u0189\x03\x02\x02" +
		"\x02\u13A8\u13A9\x07\u01A1\x02\x02\u13A9\u018B\x03\x02\x02\x02\u13AA\u13AB" +
		"\x07\u01A3\x02\x02\u13AB\u018D\x03\x02\x02\x02\u13AC\u13AD\t\x1A\x02\x02" +
		"\u13AD\u018F\x03\x02\x02\x02\u13AE\u13AF\x07\u01A3\x02\x02\u13AF\u0191" +
		"\x03\x02\x02\x02\u13B0\u13B1\t\x1B\x02\x02\u13B1\u0193\x03\x02\x02\x02" +
		"\u13B2\u13B3\x07\u01A3\x02\x02\u13B3\u0195\x03\x02\x02\x02\u13B4\u13B8" +
		"\x07\xA3\x02\x02\u13B5\u13B7\x05\x06\x04\x02\u13B6\u13B5\x03\x02\x02\x02" +
		"\u13B7\u13BA\x03\x02\x02\x02\u13B8\u13B6\x03\x02\x02\x02\u13B8\u13B9\x03" +
		"\x02\x02\x02\u13B9\u13BB\x03\x02\x02\x02\u13BA\u13B8\x03\x02\x02\x02\u13BB" +
		"\u13BF\x07\u019D\x02\x02\u13BC\u13BE\x05\x06\x04\x02\u13BD\u13BC\x03\x02" +
		"\x02\x02\u13BE\u13C1\x03\x02\x02\x02\u13BF\u13BD\x03\x02\x02\x02\u13BF" +
		"\u13C0\x03\x02\x02\x02\u13C0\u13CB\x03\x02\x02\x02\u13C1\u13BF\x03\x02" +
		"\x02\x02\u13C2\u13C6\x05\u0198\xCD\x02\u13C3\u13C5\x05\x06\x04\x02\u13C4" +
		"\u13C3\x03\x02\x02\x02\u13C5\u13C8\x03\x02\x02\x02\u13C6\u13C4\x03\x02" +
		"\x02\x02\u13C6\u13C7\x03\x02\x02\x02\u13C7\u13CA\x03\x02\x02\x02\u13C8" +
		"\u13C6\x03\x02\x02\x02\u13C9\u13C2\x03\x02\x02\x02\u13CA\u13CD\x03\x02" +
		"\x02\x02\u13CB\u13C9\x03\x02\x02\x02\u13CB\u13CC\x03\x02\x02\x02\u13CC" +
		"\u0197\x03\x02\x02\x02\u13CD\u13CB\x03\x02\x02\x02\u13CE\u13D0\x07\u013E" +
		"\x02\x02\u13CF\u13D1\x05\x06\x04\x02\u13D0\u13CF\x03\x02\x02\x02\u13D1" +
		"\u13D2\x03\x02\x02\x02\u13D2\u13D0\x03\x02\x02\x02\u13D2\u13D3\x03\x02" +
		"\x02\x02\u13D3\u13DA\x03\x02\x02\x02\u13D4\u13D6\x07\xFC\x02\x02\u13D5" +
		"\u13D7\x05\x06\x04\x02\u13D6\u13D5\x03\x02\x02\x02\u13D7\u13D8\x03\x02" +
		"\x02\x02\u13D8\u13D6\x03\x02\x02\x02\u13D8\u13D9\x03\x02\x02\x02\u13D9" +
		"\u13DB\x03\x02\x02\x02\u13DA\u13D4\x03\x02\x02\x02\u13DA\u13DB\x03\x02" +
		"\x02\x02\u13DB\u13DC\x03\x02\x02\x02\u13DC\u13E0\x05\u01C2\xE2\x02\u13DD" +
		"\u13DF\x05\x06\x04\x02\u13DE\u13DD\x03\x02\x02\x02\u13DF\u13E2\x03\x02" +
		"\x02\x02\u13E0\u13DE\x03\x02\x02\x02\u13E0\u13E1\x03\x02\x02\x02\u13E1" +
		"\u13E3\x03\x02\x02\x02\u13E2\u13E0\x03\x02\x02\x02\u13E3\u13E7\x05\u01BC" +
		"\xDF\x02\u13E4\u13E6\x05\x06\x04\x02\u13E5\u13E4\x03\x02\x02\x02\u13E6" +
		"\u13E9\x03\x02\x02\x02\u13E7\u13E5\x03\x02\x02\x02\u13E7\u13E8\x03\x02" +
		"\x02\x02\u13E8\u13F1\x03\x02\x02\x02\u13E9\u13E7\x03\x02\x02\x02\u13EA" +
		"\u13EE\x05\u01A4\xD3\x02\u13EB\u13ED\x05\x06\x04\x02\u13EC\u13EB\x03\x02" +
		"\x02\x02\u13ED\u13F0\x03\x02\x02\x02\u13EE\u13EC\x03\x02\x02\x02\u13EE" +
		"\u13EF\x03\x02\x02\x02\u13EF\u13F2\x03\x02\x02\x02\u13F0\u13EE\x03\x02" +
		"\x02\x02\u13F1\u13EA\x03\x02\x02\x02\u13F1\u13F2\x03\x02\x02\x02\u13F2" +
		"\u13FA\x03\x02\x02\x02\u13F3\u13F7\x05\u01AE\xD8\x02\u13F4\u13F6\x05\x06" +
		"\x04\x02\u13F5\u13F4\x03\x02\x02\x02\u13F6\u13F9\x03\x02\x02\x02\u13F7" +
		"\u13F5\x03\x02\x02\x02\u13F7\u13F8\x03\x02\x02\x02\u13F8\u13FB\x03\x02" +
		"\x02\x02\u13F9\u13F7\x03\x02\x02\x02\u13FA\u13F3\x03\x02\x02\x02\u13FA" +
		"\u13FB\x03\x02\x02\x02\u13FB\u1403\x03\x02\x02\x02\u13FC\u1400\x05\u01B6" +
		"\xDC\x02\u13FD\u13FF\x05\x06\x04\x02\u13FE\u13FD\x03\x02\x02\x02\u13FF" +
		"\u1402\x03\x02\x02\x02\u1400\u13FE\x03\x02\x02\x02\u1400\u1401\x03\x02" +
		"\x02\x02\u1401\u1404\x03\x02\x02\x02\u1402\u1400\x03\x02\x02\x02\u1403" +
		"\u13FC\x03\x02\x02\x02\u1403\u1404\x03\x02\x02\x02\u1404\u140C\x03\x02" +
		"\x02\x02\u1405\u1409\x05\u01B4\xDB\x02\u1406\u1408\x05\x06\x04\x02\u1407" +
		"\u1406\x03\x02\x02\x02\u1408\u140B\x03\x02\x02\x02\u1409\u1407\x03\x02" +
		"\x02\x02\u1409\u140A\x03\x02\x02\x02\u140A\u140D\x03\x02\x02\x02\u140B" +
		"\u1409\x03\x02\x02\x02\u140C\u1405\x03\x02\x02\x02\u140C\u140D\x03\x02" +
		"\x02\x02\u140D\u1415\x03\x02\x02\x02\u140E\u1412\x05\u01AA\xD6\x02\u140F" +
		"\u1411\x05\x06\x04\x02\u1410\u140F\x03\x02\x02\x02\u1411\u1414\x03\x02" +
		"\x02\x02\u1412\u1410\x03\x02\x02\x02\u1412\u1413\x03\x02\x02\x02\u1413" +
		"\u1416\x03\x02\x02\x02\u1414\u1412\x03\x02\x02\x02\u1415\u140E\x03\x02" +
		"\x02\x02\u1415\u1416\x03\x02\x02\x02\u1416\u141E\x03\x02\x02\x02\u1417" +
		"\u141B\x05\u01A8\xD5\x02\u1418\u141A\x05\x06\x04\x02\u1419\u1418\x03\x02" +
		"\x02\x02\u141A\u141D\x03\x02\x02\x02\u141B\u1419\x03\x02\x02\x02\u141B" +
		"\u141C\x03\x02\x02\x02\u141C\u141F\x03\x02\x02\x02\u141D\u141B\x03\x02" +
		"\x02\x02\u141E\u1417\x03\x02\x02\x02\u141E\u141F\x03\x02\x02\x02\u141F" +
		"\u1427\x03\x02\x02\x02\u1420\u1424\x05\u01A2\xD2\x02\u1421\u1423\x05\x06" +
		"\x04\x02\u1422\u1421\x03\x02\x02\x02\u1423\u1426\x03\x02\x02\x02\u1424" +
		"\u1422\x03\x02\x02\x02\u1424\u1425\x03\x02\x02\x02\u1425\u1428\x03\x02" +
		"\x02\x02\u1426\u1424\x03\x02\x02\x02\u1427\u1420\x03\x02\x02\x02\u1427" +
		"\u1428\x03\x02\x02\x02\u1428\u1432\x03\x02\x02\x02\u1429\u142D\x05\u019E" +
		"\xD0\x02\u142A\u142C\x05\x06\x04\x02\u142B\u142A\x03\x02\x02\x02\u142C" +
		"\u142F\x03\x02\x02\x02\u142D\u142B\x03\x02\x02\x02\u142D\u142E\x03\x02" +
		"\x02\x02\u142E\u1431\x03\x02\x02\x02\u142F\u142D\x03\x02\x02\x02\u1430" +
		"\u1429\x03\x02\x02\x02\u1431\u1434\x03\x02\x02\x02\u1432\u1430\x03\x02" +
		"\x02\x02\u1432\u1433\x03\x02\x02\x02\u1433\u143C\x03\x02\x02\x02\u1434" +
		"\u1432\x03\x02\x02\x02\u1435\u1439\x05\u01B0\xD9\x02\u1436\u1438\x05\x06" +
		"\x04\x02\u1437\u1436\x03\x02\x02\x02\u1438\u143B\x03\x02\x02\x02\u1439" +
		"\u1437\x03\x02\x02\x02\u1439\u143A\x03\x02\x02\x02\u143A\u143D\x03\x02" +
		"\x02\x02\u143B\u1439\x03\x02\x02\x02\u143C\u1435\x03\x02\x02\x02\u143C" +
		"\u143D\x03\x02\x02\x02\u143D\u1445\x03\x02\x02\x02\u143E\u1442\x05\u019A" +
		"\xCE\x02\u143F\u1441\x05\x06\x04\x02\u1440\u143F\x03\x02\x02\x02\u1441" +
		"\u1444\x03\x02\x02\x02\u1442\u1440\x03\x02\x02\x02\u1442\u1443\x03\x02" +
		"\x02\x02\u1443\u1446\x03\x02\x02\x02\u1444\u1442\x03\x02\x02\x02\u1445" +
		"\u143E\x03\x02\x02\x02\u1445\u1446\x03\x02\x02\x02\u1446\u1447\x03\x02" +
		"\x02\x02\u1447\u1448\x07\u019D\x02\x02\u1448\u0199\x03\x02\x02\x02\u1449" +
		"\u144B\x07\xA2\x02\x02\u144A\u144C\x05\x06\x04\x02\u144B\u144A\x03\x02" +
		"\x02\x02\u144C\u144D\x03\x02\x02\x02\u144D\u144B\x03\x02\x02\x02\u144D" +
		"\u144E\x03\x02\x02\x02\u144E\u1450\x03\x02\x02\x02\u144F\u1449\x03\x02" +
		"\x02\x02\u144F\u1450\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02\u1451" +
		"\u1453\x07\u0151\x02\x02\u1452\u1454\x05\x06\x04\x02\u1453\u1452\x03\x02" +
		"\x02\x02\u1454\u1455\x03\x02\x02\x02\u1455\u1453\x03\x02\x02\x02\u1455" +
		"\u1456\x03\x02\x02\x02\u1456\u145D\x03\x02\x02\x02\u1457\u1459\x07\xCE" +
		"\x02\x02\u1458\u145A\x05\x06\x04\x02\u1459\u1458\x03\x02\x02\x02\u145A" +
		"\u145B\x03\x02\x02\x02\u145B\u1459\x03\x02\x02\x02\u145B\u145C\x03\x02" +
		"\x02\x02\u145C\u145E\x03\x02\x02\x02\u145D\u1457\x03\x02\x02\x02\u145D" +
		"\u145E\x03\x02\x02\x02\u145E\u145F\x03\x02\x02\x02\u145F\u1460\x05\u019C" +
		"\xCF\x02\u1460\u019B\x03\x02\x02\x02\u1461\u1462\x05\u0158\xAD\x02\u1462" +
		"\u019D\x03\x02\x02\x02\u1463\u1465\x07\x0F\x02\x02\u1464\u1466\x05\x06" +
		"\x04\x02\u1465\u1464\x03\x02\x02\x02\u1466\u1467\x03\x02\x02\x02\u1467" +
		"\u1465\x03\x02\x02\x02\u1467\u1468\x03\x02\x02\x02\u1468\u146A\x03\x02" +
		"\x02\x02\u1469\u1463\x03\x02\x02\x02\u1469\u146A\x03\x02\x02\x02\u146A" +
		"\u146B\x03\x02\x02\x02\u146B\u146D\x07\u011D\x02\x02\u146C\u146E\x05\x06" +
		"\x04\x02\u146D\u146C\x03\x02\x02\x02\u146E\u146F\x03\x02\x02\x02\u146F" +
		"\u146D\x03\x02\x02\x02\u146F\u1470\x03\x02\x02\x02\u1470\u1477\x03\x02" +
		"\x02\x02\u1471\u1473\x07\xD3\x02\x02\u1472\u1474\x05\x06\x04\x02\u1473" +
		"\u1472\x03\x02\x02\x02\u1474\u1475\x03\x02\x02\x02\u1475\u1473\x03\x02" +
		"\x02\x02\u1475\u1476\x03\x02\x02\x02\u1476\u1478\x03\x02\x02\x02\u1477" +
		"\u1471\x03\x02\x02\x02\u1477\u1478\x03\x02\x02\x02\u1478\u147F\x03\x02" +
		"\x02\x02\u1479\u147B\x07\xCE\x02\x02\u147A\u147C\x05\x06\x04\x02\u147B" +
		"\u147A\x03\x02\x02\x02\u147C\u147D\x03\x02\x02\x02\u147D\u147B\x03\x02" +
		"\x02\x02\u147D\u147E\x03\x02\x02\x02\u147E\u1480\x03\x02\x02\x02\u147F" +
		"\u1479\x03\x02\x02\x02\u147F\u1480\x03\x02\x02\x02\u1480\u1481\x03\x02" +
		"\x02\x02\u1481\u1491\x05\u01A0\xD1\x02\u1482\u1484\x05\x06\x04\x02\u1483" +
		"\u1482\x03\x02\x02\x02\u1484\u1485\x03\x02\x02\x02\u1485\u1483\x03\x02" +
		"\x02\x02\u1485\u1486\x03\x02\x02\x02\u1486\u148D\x03\x02\x02\x02\u1487" +
		"\u1489\x07\u017E\x02\x02\u1488\u148A\x05\x06\x04\x02\u1489\u1488\x03\x02" +
		"\x02\x02\u148A\u148B\x03\x02\x02\x02\u148B\u1489\x03\x02\x02\x02\u148B" +
		"\u148C\x03\x02\x02\x02\u148C\u148E\x03\x02\x02\x02\u148D\u1487\x03\x02" +
		"\x02\x02\u148D\u148E\x03\x02\x02\x02\u148E\u148F\x03\x02\x02\x02\u148F" +
		"\u1490\x07u\x02\x02\u1490\u1492\x03\x02\x02\x02\u1491\u1483\x03\x02\x02" +
		"\x02\u1491\u1492\x03\x02\x02\x02\u1492\u149A\x03\x02\x02\x02\u1493\u1495" +
		"\x05\x06\x04\x02\u1494\u1493\x03\x02\x02\x02\u1495\u1496\x03\x02\x02\x02" +
		"\u1496\u1494\x03\x02\x02\x02\u1496\u1497\x03\x02\x02\x02\u1497\u1498\x03" +
		"\x02\x02\x02\u1498\u1499\t\n\x02\x02\u1499\u149B\x03\x02\x02\x02\u149A" +
		"\u1494\x03\x02\x02\x02\u149A\u149B\x03\x02\x02\x02\u149B\u019F\x03\x02" +
		"\x02\x02\u149C\u14B9\x05\u0158\xAD\x02\u149D\u14A1\x07\u01A3\x02\x02\u149E" +
		"\u14A0\x05\x06\x04\x02\u149F\u149E\x03\x02\x02\x02\u14A0\u14A3\x03\x02" +
		"\x02\x02\u14A1\u149F\x03\x02\x02\x02\u14A1\u14A2\x03\x02\x02\x02\u14A2" +
		"\u14A4\x03\x02\x02\x02\u14A3\u14A1\x03\x02\x02\x02\u14A4\u14A8\x07\u0192" +
		"\x02\x02\u14A5\u14A7\x05\x06\x04\x02\u14A6\u14A5\x03\x02\x02\x02\u14A7" +
		"\u14AA\x03\x02\x02\x02\u14A8\u14A6\x03\x02\x02\x02\u14A8\u14A9\x03\x02" +
		"\x02\x02\u14A9\u14AB\x03\x02\x02\x02\u14AA\u14A8\x03\x02\x02\x02\u14AB" +
		"\u14B5\x05\u0158\xAD\x02\u14AC\u14AE\x05\x06\x04\x02\u14AD\u14AC\x03\x02" +
		"\x02\x02\u14AE\u14B1\x03\x02\x02\x02\u14AF\u14AD\x03\x02\x02\x02\u14AF" +
		"\u14B0\x03\x02\x02\x02\u14B0\u14B2\x03\x02\x02\x02\u14B1\u14AF\x03\x02" +
		"\x02\x02\u14B2\u14B4\x05\u0158\xAD\x02\u14B3\u14AF\x03\x02\x02\x02\u14B4" +
		"\u14B7\x03\x02\x02\x02\u14B5\u14B3\x03\x02\x02\x02\u14B5\u14B6\x03\x02" +
		"\x02\x02\u14B6\u14B9\x03\x02\x02\x02\u14B7\u14B5\x03\x02\x02\x02\u14B8" +
		"\u149C\x03\x02\x02\x02\u14B8\u149D\x03\x02\x02\x02\u14B9\u01A1\x03\x02" +
		"\x02\x02\u14BA\u14BC\x07\x04\x02\x02\u14BB\u14BD\x05\x06\x04\x02\u14BC" +
		"\u14BB\x03\x02\x02\x02\u14BD\u14BE\x03\x02\x02\x02\u14BE\u14BC\x03\x02" +
		"\x02\x02\u14BE\u14BF\x03\x02\x02\x02\u14BF\u14C6\x03\x02\x02\x02\u14C0" +
		"\u14C2\x07\xE9\x02\x02\u14C1\u14C3\x05\x06\x04\x02\u14C2\u14C1\x03\x02" +
		"\x02\x02\u14C3\u14C4\x03\x02\x02\x02\u14C4\u14C2\x03\x02\x02\x02\u14C4" +
		"\u14C5\x03\x02\x02\x02\u14C5\u14C7\x03\x02\x02\x02\u14C6\u14C0\x03\x02" +
		"\x02\x02\u14C6\u14C7\x03\x02\x02\x02\u14C7\u14CE\x03\x02\x02\x02\u14C8" +
		"\u14CA\x07\xCE\x02\x02\u14C9\u14CB\x05\x06\x04\x02\u14CA\u14C9\x03\x02" +
		"\x02\x02\u14CB\u14CC\x03\x02\x02\x02\u14CC\u14CA\x03\x02\x02\x02\u14CC" +
		"\u14CD\x03\x02\x02\x02\u14CD\u14CF\x03\x02\x02\x02\u14CE\u14C8\x03\x02" +
		"\x02\x02\u14CE\u14CF\x03\x02\x02\x02\u14CF\u14D1\x03\x02\x02\x02\u14D0" +
		"\u14BA\x03\x02\x02\x02\u14D0\u14D1\x03\x02\x02\x02\u14D1\u14D2\x03\x02" +
		"\x02\x02\u14D2\u14F0\t\x1C\x02\x02\u14D3\u14D5\x05\x06\x04\x02\u14D4\u14D3" +
		"\x03\x02\x02\x02\u14D5\u14D6\x03\x02\x02\x02\u14D6\u14D4\x03\x02\x02\x02" +
		"\u14D6\u14D7\x03\x02\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u14DA\x07" +
		"\u0122\x02\x02\u14D9\u14DB\x05\x06\x04\x02\u14DA\u14D9\x03\x02\x02\x02" +
		"\u14DB\u14DC\x03\x02\x02\x02\u14DC\u14DA\x03\x02\x02\x02\u14DC\u14DD\x03" +
		"\x02\x02\x02\u14DD\u14E4\x03\x02\x02\x02\u14DE\u14E0\x07\xD3\x02\x02\u14DF" +
		"\u14E1\x05\x06\x04\x02\u14E0\u14DF\x03\x02\x02\x02\u14E1\u14E2\x03\x02" +
		"\x02\x02\u14E2\u14E0\x03\x02\x02\x02\u14E2\u14E3\x03\x02\x02\x02\u14E3" +
		"\u14E5\x03\x02\x02\x02\u14E4\u14DE\x03\x02\x02\x02\u14E4\u14E5\x03\x02" +
		"\x02\x02\u14E5\u14EC\x03\x02\x02\x02\u14E6\u14E8\x07\xCE\x02\x02\u14E7" +
		"\u14E9\x05\x06\x04\x02\u14E8\u14E7\x03\x02\x02\x02\u14E9\u14EA\x03\x02" +
		"\x02\x02\u14EA\u14E8\x03\x02\x02\x02\u14EA\u14EB\x03\x02\x02\x02\u14EB" +
		"\u14ED\x03\x02\x02\x02\u14EC\u14E6\x03\x02\x02\x02\u14EC\u14ED\x03\x02" +
		"\x02\x02\u14ED\u14EE\x03\x02\x02\x02\u14EE\u14EF\x05\u0158\xAD\x02\u14EF" +
		"\u14F1\x03\x02\x02\x02\u14F0\u14D4\x03\x02\x02\x02\u14F0\u14F1\x03\x02" +
		"\x02\x02\u14F1\u01A3\x03\x02\x02\x02\u14F2\u14F4\x07\u012C\x02\x02\u14F3" +
		"\u14F5\x05\x06\x04\x02\u14F4\u14F3\x03\x02\x02\x02\u14F5\u14F6\x03\x02" +
		"\x02\x02\u14F6\u14F4\x03\x02\x02\x02\u14F6\u14F7\x03\x02\x02\x02\u14F7" +
		"\u14F8\x03\x02\x02\x02\u14F8\u1500\x05\u01A6\xD4\x02\u14F9\u14FB\x05\x06" +
		"\x04\x02\u14FA\u14F9\x03\x02\x02\x02\u14FB\u14FC\x03\x02\x02\x02\u14FC" +
		"\u14FA\x03\x02\x02\x02\u14FC\u14FD\x03\x02\x02\x02\u14FD\u14FE\x03\x02" +
		"\x02\x02\u14FE\u14FF\t\x1D\x02\x02\u14FF\u1501\x03\x02\x02\x02\u1500\u14FA" +
		"\x03\x02\x02\x02\u1500\u1501\x03\x02\x02\x02\u1501\u01A5\x03\x02\x02\x02" +
		"\u1502\u1503\x07\u01A1\x02\x02\u1503\u01A7\x03\x02\x02\x02\u1504\u1506" +
		"\x07\u011D\x02\x02\u1505\u1507\x05\x06\x04\x02\u1506\u1505\x03\x02\x02" +
		"\x02\u1507\u1508\x03\x02\x02\x02\u1508\u1506\x03\x02\x02\x02\u1508\u1509" +
		"\x03\x02\x02\x02\u1509\u150A\x03\x02\x02\x02\u150A\u150C\x07l\x02\x02" +
		"\u150B\u150D\x05\x06\x04\x02\u150C\u150B\x03\x02\x02\x02\u150D\u150E\x03" +
		"\x02\x02\x02\u150E\u150C\x03\x02\x02\x02\u150E\u150F\x03\x02\x02\x02\u150F" +
		"\u1516\x03\x02\x02\x02\u1510\u1512\x07\xCE\x02\x02\u1511\u1513\x05\x06" +
		"\x04\x02\u1512\u1511\x03\x02\x02\x02\u1513\u1514\x03\x02\x02\x02\u1514" +
		"\u1512\x03\x02\x02\x02\u1514\u1515\x03\x02\x02\x02\u1515\u1517\x03\x02" +
		"\x02\x02\u1516\u1510\x03\x02\x02\x02\u1516\u1517\x03\x02\x02\x02\u1517" +
		"\u1518\x03\x02\x02\x02\u1518\u1519\x07\u014E\x02\x02\u1519\u01A9\x03\x02" +
		"\x02\x02\u151A\u151C\x07\u0103\x02\x02\u151B\u151D\x05\x06\x04\x02\u151C" +
		"\u151B\x03\x02\x02\x02\u151D\u151E\x03\x02\x02\x02\u151E\u151C\x03\x02" +
		"\x02\x02\u151E\u151F\x03\x02\x02\x02\u151F\u1526\x03\x02\x02\x02\u1520" +
		"\u1522\x075\x02\x02\u1521\u1523\x05\x06\x04\x02\u1522\u1521\x03\x02\x02" +
		"\x02\u1523\u1524\x03\x02\x02\x02\u1524\u1522\x03\x02\x02\x02\u1524\u1525" +
		"\x03\x02\x02\x02\u1525\u1527\x03\x02\x02\x02\u1526\u1520\x03\x02\x02\x02" +
		"\u1526\u1527\x03\x02\x02\x02\u1527\u152E\x03\x02\x02\x02\u1528\u152A\x07" +
		"\xCE\x02\x02\u1529\u152B\x05\x06\x04\x02\u152A\u1529\x03\x02\x02\x02\u152B" +
		"\u152C\x03\x02\x02\x02\u152C\u152A\x03\x02\x02\x02\u152C\u152D\x03\x02" +
		"\x02\x02\u152D\u152F\x03\x02\x02\x02\u152E\u1528\x03\x02\x02\x02\u152E" +
		"\u152F\x03\x02\x02\x02\u152F\u1530\x03\x02\x02\x02\u1530\u1531\x05\u01AC" +
		"\xD7\x02\u1531\u01AB\x03\x02\x02\x02\u1532\u1533\x07\u01A0\x02\x02\u1533" +
		"\u01AD\x03\x02\x02\x02\u1534\u1536\x07\xFF\x02\x02\u1535\u1537\x05\x06" +
		"\x04\x02\u1536\u1535\x03\x02\x02\x02\u1537\u1538\x03\x02\x02\x02\u1538" +
		"\u1536\x03\x02\x02\x02\u1538\u1539\x03\x02\x02\x02\u1539\u1540\x03\x02" +
		"\x02\x02\u153A\u153C\x07\xCE\x02\x02\u153B\u153D\x05\x06\x04\x02\u153C" +
		"\u153B\x03\x02\x02\x02\u153D\u153E\x03\x02\x02\x02\u153E\u153C\x03\x02" +
		"\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u1541\x03\x02\x02\x02\u1540" +
		"\u153A\x03\x02\x02\x02\u1540\u1541\x03\x02\x02\x02\u1541\u1543\x03\x02" +
		"\x02\x02\u1542\u1534\x03\x02\x02\x02\u1542\u1543\x03\x02\x02\x02\u1543" +
		"\u154F\x03\x02\x02\x02\u1544\u1550\x07\u0141\x02\x02\u1545\u1547\x07\xDC" +
		"\x02\x02\u1546\u1548\x05\x06\x04\x02\u1547\u1546\x03\x02\x02\x02\u1548" +
		"\u1549\x03\x02\x02\x02\u1549\u1547\x03\x02\x02\x02\u1549\u154A\x03\x02" +
		"\x02\x02\u154A\u154B\x03\x02\x02\x02\u154B\u154C\x07\u0141\x02\x02\u154C" +
		"\u1550\x03\x02\x02\x02\u154D\u1550\x07\u0122\x02\x02\u154E\u1550\x07\xC4" +
		"\x02\x02\u154F\u1544\x03\x02\x02\x02\u154F\u1545\x03\x02\x02\x02\u154F" +
		"\u154D\x03\x02\x02\x02\u154F\u154E\x03\x02\x02\x02\u1550\u01AF\x03\x02" +
		"\x02\x02\u1551\u1553\x07\xE0\x02\x02\u1552\u1554\x05\x06\x04\x02\u1553" +
		"\u1552\x03\x02\x02\x02\u1554\u1555\x03\x02\x02\x02\u1555\u1553\x03\x02" +
		"\x02\x02\u1555\u1556\x03\x02\x02\x02\u1556\u155D\x03\x02\x02\x02\u1557" +
		"\u1559\x07\xE9\x02\x02\u1558\u155A\x05\x06\x04\x02\u1559\u1558\x03\x02" +
		"\x02\x02\u155A\u155B\x03\x02\x02\x02\u155B\u1559\x03\x02\x02\x02\u155B" +
		"\u155C\x03\x02\x02\x02\u155C\u155E\x03\x02\x02\x02\u155D\u1557\x03\x02" +
		"\x02\x02\u155D\u155E\x03\x02\x02\x02\u155E\u1565\x03\x02\x02\x02\u155F" +
		"\u1561\x07\xCE\x02\x02\u1560\u1562\x05\x06\x04\x02\u1561\u1560\x03\x02" +
		"\x02\x02\u1562\u1563\x03\x02\x02\x02\u1563\u1561\x03\x02\x02\x02\u1563" +
		"\u1564\x03\x02\x02\x02\u1564\u1566\x03\x02\x02\x02\u1565\u155F\x03\x02" +
		"\x02\x02\u1565\u1566\x03\x02\x02\x02\u1566\u1567\x03\x02\x02\x02\u1567" +
		"\u1568\x05\u01B2\xDA\x02\u1568\u01B1\x03\x02\x02\x02\u1569\u156B\x07\xE5" +
		"\x02\x02\u156A\u156C\x05\x06\x04\x02\u156B\u156A\x03\x02\x02\x02\u156C" +
		"\u156D\x03\x02\x02\x02\u156D\u156B\x03\x02\x02\x02\u156D\u156E\x03\x02" +
		"\x02\x02\u156E\u1575\x03\x02\x02\x02\u156F\u1571\x07\u017E\x02\x02\u1570" +
		"\u1572\x05\x06\x04\x02\u1571\u1570\x03\x02\x02\x02\u1572\u1573\x03\x02" +
		"\x02\x02\u1573\u1571\x03\x02\x02\x02\u1573\u1574\x03\x02\x02\x02\u1574" +
		"\u1576\x03\x02\x02\x02\u1575\u156F\x03\x02\x02\x02\u1575\u1576\x03\x02" +
		"\x02\x02\u1576\u1577\x03\x02\x02\x02\u1577\u1579\x07\xE0\x02\x02\u1578" +
		"\u157A\x05\x06\x04\x02\u1579\u1578\x03\x02\x02\x02\u157A\u157B\x03\x02" +
		"\x02\x02\u157B\u1579\x03\x02\x02\x02\u157B\u157C\x03\x02\x02\x02\u157C" +
		"\u157D\x03\x02\x02\x02\u157D\u157F\x07\xFA\x02\x02\u157E\u1580\x05\x06" +
		"\x04\x02\u157F\u157E\x03\x02\x02\x02\u1580\u1581\x03\x02\x02\x02\u1581" +
		"\u157F\x03\x02\x02\x02\u1581\u1582\x03\x02\x02\x02\u1582\u1583\x03\x02" +
		"\x02\x02\u1583\u1585\x07\xEC\x02\x02\u1584\u1586\x05\x06\x04\x02\u1585" +
		"\u1584\x03\x02\x02\x02\u1586\u1587\x03\x02\x02\x02\u1587\u1585\x03\x02" +
		"\x02\x02\u1587\u1588\x03\x02\x02\x02\u1588\u1589\x03\x02\x02\x02\u1589" +
		"\u158A\x07\u011E\x02\x02\u158A\u15AE\x03\x02\x02\x02\u158B\u15AA\x07\x1E" +
		"\x02\x02\u158C\u158E\x05\x06\x04\x02\u158D\u158C\x03\x02\x02\x02\u158E" +
		"\u158F\x03\x02\x02\x02\u158F\u158D\x03\x02\x02\x02\u158F\u1590\x03\x02" +
		"\x02\x02\u1590\u1597\x03\x02\x02\x02\u1591\u1593\x07\u017E\x02\x02\u1592" +
		"\u1594\x05\x06\x04\x02\u1593\u1592\x03\x02\x02\x02\u1594\u1595\x03\x02" +
		"\x02\x02\u1595\u1593\x03\x02\x02\x02\u1595\u1596\x03\x02\x02\x02\u1596" +
		"\u1598\x03\x02\x02\x02\u1597\u1591\x03\x02\x02\x02\u1597\u1598\x03\x02" +
		"\x02\x02\u1598\u15A8\x03\x02\x02\x02\u1599\u159B\x07\xE0\x02\x02\u159A" +
		"\u159C\x05\x06\x04\x02\u159B\u159A\x03\x02\x02\x02\u159C\u159D\x03\x02" +
		"\x02\x02\u159D\u159B\x03\x02\x02\x02\u159D\u159E\x03\x02\x02\x02\u159E" +
		"\u159F\x03\x02\x02\x02\u159F\u15A1\x07\xFA\x02\x02\u15A0\u15A2\x05\x06" +
		"\x04\x02\u15A1\u15A0\x03\x02\x02\x02\u15A2\u15A3\x03\x02\x02\x02\u15A3" +
		"\u15A1\x03\x02\x02\x02\u15A3\u15A4\x03\x02\x02\x02\u15A4\u15A5\x03\x02" +
		"\x02\x02\u15A5\u15A6\x07\u011D\x02\x02\u15A6\u15A9\x03\x02\x02\x02\u15A7" +
		"\u15A9\x07\u0135\x02\x02\u15A8\u1599\x03\x02\x02\x02\u15A8\u15A7\x03\x02" +
		"\x02\x02\u15A9\u15AB\x03\x02\x02\x02\u15AA\u158D\x03\x02\x02\x02\u15AA" +
		"\u15AB\x03\x02\x02\x02\u15AB\u15AE\x03\x02\x02\x02\u15AC\u15AE\x07\x9B" +
		"\x02\x02\u15AD\u1569\x03\x02\x02\x02\u15AD\u158B\x03\x02\x02\x02\u15AD" +
		"\u15AC\x03\x02\x02\x02\u15AE\u01B3\x03\x02\x02\x02\u15AF\u15B1\x07;\x02" +
		"\x02\u15B0\u15B2\x05\x06\x04\x02\u15B1\u15B0\x03\x02\x02\x02\u15B2\u15B3" +
		"\x03\x02\x02\x02\u15B3\u15B1\x03\x02\x02\x02\u15B3\u15B4\x03\x02\x02\x02" +
		"\u15B4\u15BB\x03\x02\x02\x02\u15B5\u15B7\x07\xCE\x02\x02\u15B6\u15B8\x05" +
		"\x06\x04\x02\u15B7\u15B6\x03\x02\x02\x02\u15B8\u15B9\x03\x02\x02\x02\u15B9" +
		"\u15B7\x03\x02\x02\x02\u15B9\u15BA\x03\x02\x02\x02\u15BA\u15BC\x03\x02" +
		"\x02\x02\u15BB\u15B5\x03\x02\x02\x02\u15BB\u15BC\x03\x02\x02\x02\u15BC" +
		"\u15BD\x03\x02\x02\x02\u15BD\u15BE\x05\u014E\xA8\x02\u15BE\u01B5\x03\x02" +
		"\x02\x02\u15BF\u15C1\x07+\x02\x02\u15C0\u15C2\x05\x06\x04\x02\u15C1\u15C0" +
		"\x03\x02\x02\x02\u15C2\u15C3\x03\x02\x02\x02\u15C3\u15C1\x03\x02\x02\x02" +
		"\u15C3\u15C4\x03\x02\x02\x02\u15C4\u15CB\x03\x02\x02\x02\u15C5\u15C7\x07" +
		"Q\x02\x02\u15C6\u15C8\x05\x06\x04\x02\u15C7\u15C6\x03\x02\x02\x02\u15C8" +
		"\u15C9\x03\x02\x02\x02\u15C9\u15C7\x03\x02\x02\x02\u15C9\u15CA\x03\x02" +
		"\x02\x02\u15CA\u15CC\x03\x02\x02\x02\u15CB\u15C5\x03\x02\x02\x02\u15CB" +
		"\u15CC\x03\x02\x02\x02\u15CC\u15D9\x03\x02\x02\x02\u15CD\u15CF\x05\u01B8" +
		"\xDD\x02\u15CE\u15D0\x05\x06\x04\x02\u15CF\u15CE\x03\x02\x02\x02\u15D0" +
		"\u15D1\x03\x02\x02\x02\u15D1\u15CF\x03\x02\x02\x02\u15D1\u15D2\x03\x02" +
		"\x02\x02\u15D2\u15D3\x03\x02\x02\x02\u15D3\u15D5\x07\u0168\x02\x02\u15D4" +
		"\u15D6\x05\x06\x04\x02\u15D5\u15D4\x03\x02\x02\x02\u15D6\u15D7\x03\x02" +
		"\x02\x02\u15D7\u15D5\x03\x02\x02\x02\u15D7\u15D8\x03\x02\x02\x02\u15D8" +
		"\u15DA\x03\x02\x02\x02\u15D9\u15CD\x03\x02\x02\x02\u15D9\u15DA\x03\x02" +
		"\x02\x02\u15DA\u15DB\x03\x02\x02\x02\u15DB\u15DD\x05\u01BA\xDE\x02\u15DC" +
		"\u15DE\x05\x06\x04\x02\u15DD\u15DC\x03\x02\x02\x02\u15DE\u15DF\x03\x02" +
		"\x02\x02\u15DF\u15DD\x03\x02\x02\x02\u15DF\u15E0\x03\x02\x02\x02\u15E0" +
		"\u15E1\x03\x02\x02\x02\u15E1\u15E2\t\x1E\x02\x02\u15E2\u01B7\x03\x02\x02" +
		"\x02\u15E3\u15E4\x07\u01A1\x02\x02\u15E4\u01B9\x03\x02\x02\x02\u15E5\u15E6" +
		"\x07\u01A1\x02\x02\u15E6\u01BB\x03\x02\x02\x02\u15E7\u15E9\x07\x1A\x02" +
		"\x02\u15E8\u15EA\x05\x06\x04\x02\u15E9\u15E8\x03\x02\x02\x02\u15EA\u15EB" +
		"\x03\x02\x02\x02\u15EB\u15E9\x03\x02\x02\x02\u15EB\u15EC\x03\x02\x02\x02" +
		"\u15EC\u15F3\x03\x02\x02\x02\u15ED\u15EF\x07\u0168\x02\x02\u15EE\u15F0" +
		"\x05\x06\x04\x02\u15EF\u15EE\x03\x02\x02\x02\u15F0\u15F1\x03\x02\x02\x02" +
		"\u15F1\u15EF\x03\x02\x02\x02\u15F1\u15F2\x03\x02\x02\x02\u15F2\u15F4\x03" +
		"\x02\x02\x02\u15F3\u15ED\x03\x02\x02\x02\u15F3\u15F4\x03\x02\x02\x02\u15F4" +
		"\u15F5\x03\x02\x02\x02\u15F5\u15F6\x05\u01BE\xE0\x02\u15F6\u01BD\x03\x02" +
		"\x02\x02\u15F7\u15F9\t\x1F\x02\x02\u15F8\u15FA\x05\x06\x04\x02\u15F9\u15F8" +
		"\x03\x02\x02\x02\u15FA\u15FB\x03\x02\x02\x02\u15FB\u15F9\x03\x02\x02\x02" +
		"\u15FB\u15FC\x03\x02\x02\x02\u15FC\u15FE\x03\x02\x02\x02\u15FD\u15F7\x03" +
		"\x02\x02\x02\u15FD\u15FE\x03\x02\x02\x02\u15FE\u15FF\x03\x02\x02\x02\u15FF" +
		"\u1613\x05\u01C0\xE1\x02\u1600\u1602\x07\xEC\x02\x02\u1601\u1603\x05\x06" +
		"\x04\x02\u1602\u1601\x03\x02\x02\x02\u1603\u1604\x03\x02\x02\x02\u1604" +
		"\u1602\x03\x02\x02\x02\u1604\u1605\x03\x02\x02\x02\u1605\u1607\x03\x02" +
		"\x02\x02\u1606\u1600\x03\x02\x02\x02\u1606\u1607\x03\x02\x02\x02\u1607" +
		"\u1608\x03\x02\x02\x02\u1608\u1610\t \x02\x02\u1609\u160B\x05\x06\x04" +
		"\x02\u160A\u1609\x03\x02\x02\x02\u160B\u160C\x03\x02\x02\x02\u160C\u160A" +
		"\x03\x02\x02\x02\u160C\u160D\x03\x02\x02\x02\u160D\u160E\x03\x02\x02\x02" +
		"\u160E\u160F\x07\xA2\x02\x02\u160F\u1611\x03\x02\x02\x02\u1610\u160A\x03" +
		"\x02\x02\x02\u1610\u1611\x03\x02\x02\x02\u1611\u1613\x03\x02\x02\x02\u1612" +
		"\u15FD\x03\x02\x02\x02\u1612\u1606\x03\x02\x02\x02\u1613\u01BF\x03\x02" +
		"\x02\x02\u1614\u1619\x07\u01A0\x02\x02\u1615\u1619\x05\u0158\xAD\x02\u1616" +
		"\u1619\x07p\x02\x02\u1617\u1619\x07\u0112\x02\x02\u1618\u1614\x03\x02" +
		"\x02\x02\u1618\u1615\x03\x02\x02\x02\u1618\u1616\x03\x02\x02\x02\u1618" +
		"\u1617\x03\x02\x02\x02\u1619\u01C1\x03\x02\x02\x02\u161A\u161B\x07\u01A3" +
		"\x02\x02\u161B\u01C3\x03\x02\x02\x02\u161C\u1620\x07\xD0\x02\x02\u161D" +
		"\u161F\x05\x06\x04\x02\u161E\u161D\x03\x02\x02\x02\u161F\u1622\x03\x02" +
		"\x02\x02\u1620\u161E\x03\x02\x02\x02\u1620\u1621\x03\x02\x02\x02\u1621" +
		"\u1623\x03\x02\x02\x02\u1622\u1620\x03\x02\x02\x02\u1623\u1627\x07\u019D" +
		"\x02\x02\u1624\u1626\x05\x06\x04\x02\u1625\u1624\x03\x02\x02\x02\u1626" +
		"\u1629\x03\x02\x02\x02\u1627\u1625\x03\x02\x02\x02\u1627\u1628\x03\x02" +
		"\x02\x02\u1628\u1661\x03\x02\x02\x02\u1629\u1627\x03\x02\x02\x02\u162A" +
		"\u162E\x05\u01DE\xF0\x02\u162B\u162D\x05\x06\x04\x02\u162C\u162B\x03\x02" +
		"\x02\x02\u162D\u1630\x03\x02\x02\x02\u162E\u162C\x03\x02\x02\x02\u162E" +
		"\u162F\x03\x02\x02\x02\u162F\u1632\x03\x02\x02\x02\u1630\u162E\x03\x02" +
		"\x02\x02\u1631\u162A\x03\x02\x02\x02\u1632\u1635\x03\x02\x02\x02\u1633" +
		"\u1631\x03\x02\x02\x02\u1633\u1634\x03\x02\x02\x02\u1634\u163F\x03\x02" +
		"\x02\x02\u1635\u1633\x03\x02\x02\x02\u1636\u163A\x05\u01DA\xEE\x02\u1637" +
		"\u1639\x05\x06\x04\x02\u1638\u1637\x03\x02\x02\x02\u1639\u163C\x03\x02" +
		"\x02\x02\u163A\u1638\x03\x02\x02\x02\u163A\u163B\x03\x02\x02\x02\u163B" +
		"\u163E\x03\x02\x02\x02\u163C\u163A\x03\x02\x02\x02\u163D\u1636\x03\x02" +
		"\x02\x02\u163E\u1641\x03\x02\x02\x02\u163F\u163D\x03\x02\x02\x02\u163F" +
		"\u1640\x03\x02\x02\x02\u1640\u164B\x03\x02\x02\x02\u1641\u163F\x03\x02" +
		"\x02\x02\u1642\u1646\x05\u01CE\xE8\x02\u1643\u1645\x05\x06\x04\x02\u1644" +
		"\u1643\x03\x02\x02\x02\u1645\u1648\x03\x02\x02\x02\u1646\u1644\x03\x02" +
		"\x02\x02\u1646\u1647\x03\x02\x02\x02\u1647\u164A\x03\x02\x02\x02\u1648" +
		"\u1646\x03\x02\x02\x02\u1649\u1642\x03\x02\x02\x02\u164A\u164D\x03\x02" +
		"\x02\x02\u164B\u1649\x03\x02\x02\x02\u164B\u164C\x03\x02\x02\x02\u164C" +
		"\u1657\x03\x02\x02\x02\u164D\u164B\x03\x02\x02\x02\u164E\u1652\x05\u01C6" +
		"\xE4\x02\u164F\u1651\x05\x06\x04\x02\u1650\u164F\x03\x02\x02\x02\u1651" +
		"\u1654\x03\x02\x02\x02\u1652\u1650\x03\x02\x02\x02\u1652\u1653\x03\x02" +
		"\x02\x02\u1653\u1656\x03\x02\x02\x02\u1654\u1652\x03\x02\x02\x02\u1655" +
		"\u164E\x03\x02\x02\x02\u1656\u1659";
	private static readonly _serializedATNSegment11: string =
		"\x03\x02\x02\x02\u1657\u1655\x03\x02\x02\x02\u1657\u1658\x03\x02\x02\x02" +
		"\u1658\u165A\x03\x02\x02\x02\u1659\u1657\x03\x02\x02\x02\u165A\u165E\x07" +
		"\u019D\x02\x02\u165B\u165D\x05\x06\x04\x02\u165C\u165B\x03\x02\x02\x02" +
		"\u165D\u1660\x03\x02\x02\x02\u165E\u165C\x03\x02\x02\x02\u165E\u165F\x03" +
		"\x02\x02\x02\u165F\u1662\x03\x02\x02\x02\u1660\u165E\x03\x02\x02\x02\u1661" +
		"\u1633\x03\x02\x02\x02\u1661\u1662\x03\x02\x02\x02\u1662\u01C5\x03\x02" +
		"\x02\x02\u1663\u1665\x07\xEC\x02\x02\u1664\u1666\x05\x06\x04\x02\u1665" +
		"\u1664\x03\x02\x02\x02\u1666\u1667\x03\x02\x02\x02\u1667\u1665\x03\x02" +
		"\x02\x02\u1667\u1668\x03\x02\x02\x02\u1668\u1669\x03\x02\x02\x02\u1669" +
		"\u166B\x07\xA2\x02\x02\u166A\u166C\x05\x06\x04\x02\u166B\u166A\x03\x02" +
		"\x02\x02\u166C\u166D\x03\x02\x02\x02\u166D\u166B\x03\x02\x02\x02\u166D" +
		"\u166E\x03\x02\x02\x02\u166E\u1675\x03\x02\x02\x02\u166F\u1671\x07\u0161" +
		"\x02\x02\u1670\u1672\x05\x06\x04\x02\u1671\u1670\x03\x02\x02\x02\u1672" +
		"\u1673\x03\x02\x02\x02\u1673\u1671\x03\x02\x02\x02\u1673\u1674\x03\x02" +
		"\x02\x02\u1674\u1676\x03\x02\x02\x02\u1675\u166F\x03\x02\x02\x02\u1675" +
		"\u1676\x03\x02\x02\x02\u1676\u167D\x03\x02\x02\x02\u1677\u1679\x07Q\x02" +
		"\x02\u1678\u167A\x05\x06\x04\x02\u1679\u1678\x03\x02\x02\x02\u167A\u167B" +
		"\x03\x02\x02\x02\u167B\u1679\x03\x02\x02\x02\u167B\u167C\x03\x02\x02\x02" +
		"\u167C\u167E\x03\x02\x02\x02\u167D\u1677\x03\x02\x02\x02\u167D\u167E\x03" +
		"\x02\x02\x02\u167E\u1686\x03\x02\x02\x02\u167F\u1683\x05\u01C8\xE5\x02" +
		"\u1680\u1682\x05\x06\x04\x02\u1681\u1680\x03\x02\x02\x02\u1682\u1685\x03" +
		"\x02\x02\x02\u1683\u1681\x03\x02\x02\x02\u1683\u1684\x03\x02\x02\x02\u1684" +
		"\u1687\x03\x02\x02\x02\u1685\u1683\x03\x02\x02\x02\u1686\u167F\x03\x02" +
		"\x02\x02\u1687\u1688\x03\x02\x02\x02\u1688\u1686\x03\x02\x02\x02\u1688" +
		"\u1689\x03\x02\x02\x02\u1689\u01C7\x03\x02\x02\x02\u168A\u1698\x05\u01CA" +
		"\xE6\x02\u168B\u168D\x05\x06\x04\x02\u168C\u168B\x03\x02\x02\x02\u168D" +
		"\u168E\x03\x02\x02\x02\u168E\u168C\x03\x02\x02\x02\u168E\u168F\x03\x02" +
		"\x02\x02\u168F\u1690\x03\x02\x02\x02\u1690\u1692\x07\u010F\x02\x02\u1691" +
		"\u1693\x05\x06\x04\x02\u1692\u1691\x03\x02\x02\x02\u1693\u1694\x03\x02" +
		"\x02\x02\u1694\u1692\x03\x02\x02\x02\u1694\u1695\x03\x02\x02\x02\u1695" +
		"\u1696\x03\x02\x02\x02\u1696\u1697\x05\u01CC\xE7\x02\u1697\u1699\x03\x02" +
		"\x02\x02\u1698\u168C\x03\x02\x02\x02\u1698\u1699\x03\x02\x02\x02\u1699" +
		"\u01C9\x03\x02\x02\x02\u169A\u169B\x07\u01A3\x02\x02\u169B\u01CB\x03\x02" +
		"\x02\x02\u169C\u169D\x07\u01A1\x02\x02\u169D\u01CD\x03\x02\x02\x02\u169E" +
		"\u16A0\x07\u012B\x02\x02\u169F\u16A1\x05\x06\x04\x02\u16A0\u169F\x03\x02" +
		"\x02\x02\u16A1\u16A2\x03\x02\x02\x02\u16A2\u16A0\x03\x02\x02\x02\u16A2" +
		"\u16A3\x03\x02\x02\x02\u16A3\u16B0\x03\x02\x02\x02\u16A4\u16A6\x07\xFA" +
		"\x02\x02\u16A5\u16A7\x05\x06\x04\x02\u16A6\u16A5\x03\x02\x02\x02\u16A7" +
		"\u16A8\x03\x02\x02\x02\u16A8\u16A6\x03\x02\x02\x02\u16A8\u16A9\x03\x02" +
		"\x02\x02\u16A9\u16AA\x03\x02\x02\x02\u16AA\u16AC\x05\u01C2\xE2\x02\u16AB" +
		"\u16AD\x05\x06\x04\x02\u16AC\u16AB\x03\x02\x02\x02\u16AD\u16AE\x03\x02" +
		"\x02\x02\u16AE\u16AC\x03\x02\x02\x02\u16AE\u16AF\x03\x02\x02\x02\u16AF" +
		"\u16B1\x03\x02\x02\x02\u16B0\u16A4\x03\x02\x02\x02\u16B0\u16B1\x03\x02" +
		"\x02\x02\u16B1\u16B8\x03\x02\x02\x02\u16B2\u16B4\x07\x99\x02\x02\u16B3" +
		"\u16B5\x05\x06\x04\x02\u16B4\u16B3\x03\x02\x02\x02\u16B5\u16B6\x03\x02" +
		"\x02\x02\u16B6\u16B4\x03\x02\x02\x02\u16B6\u16B7\x03\x02\x02\x02\u16B7" +
		"\u16B9\x03\x02\x02\x02\u16B8\u16B2\x03\x02\x02\x02\u16B8\u16B9\x03\x02" +
		"\x02\x02\u16B9\u16BA\x03\x02\x02\x02\u16BA\u16BB\x05\u01D0\xE9\x02\u16BB" +
		"\u01CF\x03\x02\x02\x02\u16BC\u16BE\x05\u01D6\xEC\x02\u16BD\u16BF\x05\x06" +
		"\x04\x02\u16BE\u16BD\x03\x02\x02\x02\u16BF\u16C0\x03\x02\x02\x02\u16C0" +
		"\u16BE\x03\x02\x02\x02\u16C0\u16C1\x03\x02\x02\x02\u16C1\u16C8\x03\x02" +
		"\x02\x02\u16C2\u16C4\x07\xF7\x02\x02\u16C3\u16C5\x05\x06\x04\x02\u16C4" +
		"\u16C3\x03\x02\x02\x02\u16C5\u16C6\x03\x02\x02\x02\u16C6\u16C4\x03\x02" +
		"\x02\x02\u16C6\u16C7\x03\x02\x02\x02\u16C7\u16C9\x03\x02\x02\x02\u16C8" +
		"\u16C2\x03\x02\x02\x02\u16C8\u16C9\x03\x02\x02\x02\u16C9\u16CA\x03\x02" +
		"\x02\x02\u16CA\u16CB\x05\u01C2\xE2\x02\u16CB\u16D6\x03\x02\x02\x02\u16CC" +
		"\u16CE\x05\u01D2\xEA\x02\u16CD\u16CF\x05\x06\x04\x02\u16CE\u16CD\x03\x02" +
		"\x02\x02\u16CF\u16D0\x03\x02\x02\x02\u16D0\u16CE\x03\x02\x02\x02\u16D0" +
		"\u16D1\x03\x02\x02\x02\u16D1\u16D2\x03\x02\x02\x02\u16D2\u16D3\x078\x02" +
		"\x02\u16D3\u16D6\x03\x02\x02\x02\u16D4\u16D6\x05\u01D4\xEB\x02\u16D5\u16BC" +
		"\x03\x02\x02\x02\u16D5\u16CC\x03\x02\x02\x02\u16D5\u16D4\x03\x02\x02\x02" +
		"\u16D6\u01D1\x03\x02\x02\x02\u16D7\u16D8\x07\u01A1\x02\x02\u16D8\u01D3" +
		"\x03\x02\x02\x02\u16D9\u16DA\x07\u01A3\x02\x02\u16DA\u01D5\x03\x02\x02" +
		"\x02\u16DB\u16DD\x07z\x02\x02\u16DC\u16DE\x05\x06\x04\x02\u16DD\u16DC" +
		"\x03\x02\x02\x02\u16DE\u16DF\x03\x02\x02\x02\u16DF\u16DD\x03\x02\x02\x02" +
		"\u16DF\u16E0\x03\x02\x02\x02\u16E0\u16E7\x03\x02\x02\x02\u16E1\u16E3\x07" +
		"\xF7\x02\x02\u16E2\u16E4\x05\x06\x04\x02\u16E3\u16E2\x03\x02\x02\x02\u16E4" +
		"\u16E5\x03\x02\x02\x02\u16E5\u16E3\x03\x02\x02\x02\u16E5\u16E6\x03\x02" +
		"\x02\x02\u16E6\u16E8\x03\x02\x02\x02\u16E7\u16E1\x03\x02\x02\x02\u16E7" +
		"\u16E8\x03\x02\x02\x02\u16E8\u16EA\x03\x02\x02\x02\u16E9\u16DB\x03\x02" +
		"\x02\x02\u16E9\u16EA\x03\x02\x02\x02\u16EA\u16EB\x03\x02\x02\x02\u16EB" +
		"\u16F5\t \x02\x02\u16EC\u16EE\x05\u01D8\xED\x02\u16ED\u16EF\x05\x06\x04" +
		"\x02\u16EE\u16ED\x03\x02\x02\x02\u16EF\u16F0\x03\x02\x02\x02\u16F0\u16EE" +
		"\x03\x02\x02\x02\u16F0\u16F1\x03\x02\x02\x02\u16F1\u16F2\x03\x02\x02\x02" +
		"\u16F2\u16F3\x07\u011E\x02\x02\u16F3\u16F5\x03\x02\x02\x02\u16F4\u16E9" +
		"\x03\x02\x02\x02\u16F4\u16EC\x03\x02\x02\x02\u16F5\u01D7\x03\x02\x02\x02" +
		"\u16F6\u16F7\x07\u01A1\x02\x02\u16F7\u01D9\x03\x02\x02\x02\u16F8\u16FA" +
		"\x07\u0136\x02\x02\u16F9\u16FB\x05\x06\x04\x02\u16FA\u16F9\x03\x02\x02" +
		"\x02\u16FB\u16FC\x03\x02\x02\x02\u16FC\u16FA\x03\x02\x02\x02\u16FC\u16FD" +
		"\x03\x02\x02\x02\u16FD\u1704\x03\x02\x02\x02\u16FE\u1700\t!\x02\x02\u16FF" +
		"\u1701\x05\x06\x04\x02\u1700\u16FF\x03\x02\x02\x02\u1701\u1702\x03\x02" +
		"\x02\x02\u1702\u1700\x03\x02\x02\x02\u1702\u1703\x03\x02\x02\x02\u1703" +
		"\u1705\x03\x02\x02\x02\u1704\u16FE\x03\x02\x02\x02\u1704\u1705\x03\x02" +
		"\x02\x02\u1705\u170C\x03\x02\x02\x02\u1706\u1708\x07\x13\x02\x02\u1707" +
		"\u1709\x05\x06\x04\x02\u1708\u1707\x03\x02\x02\x02\u1709\u170A\x03\x02" +
		"\x02\x02\u170A\u1708\x03\x02\x02\x02\u170A\u170B\x03\x02\x02\x02\u170B" +
		"\u170D\x03\x02\x02\x02\u170C\u1706\x03\x02\x02\x02\u170C\u170D\x03\x02" +
		"\x02\x02\u170D\u1714\x03\x02\x02\x02\u170E\u1710\x07\xAD\x02\x02\u170F" +
		"\u1711\x05\x06\x04\x02\u1710\u170F\x03\x02\x02\x02\u1711\u1712\x03\x02" +
		"\x02\x02\u1712\u1710\x03\x02\x02\x02\u1712\u1713\x03\x02\x02\x02\u1713" +
		"\u1715\x03\x02\x02\x02\u1714\u170E\x03\x02\x02\x02\u1714\u1715\x03\x02" +
		"\x02\x02\u1715\u1716\x03\x02\x02\x02\u1716\u171E\x05\u01DC\xEF\x02\u1717" +
		"\u1719\x05\x06\x04\x02\u1718\u1717\x03\x02\x02\x02\u1719\u171A\x03\x02" +
		"\x02\x02\u171A\u1718\x03\x02\x02\x02\u171A\u171B\x03\x02\x02\x02\u171B" +
		"\u171C\x03\x02\x02\x02\u171C\u171D\x05\u01DC\xEF\x02\u171D\u171F\x03\x02" +
		"\x02\x02\u171E\u1718\x03\x02\x02\x02\u171F\u1720\x03\x02\x02\x02\u1720" +
		"\u171E\x03\x02\x02\x02\u1720\u1721\x03\x02\x02\x02\u1721\u01DB\x03\x02" +
		"\x02\x02\u1722\u1723\x07\u01A3\x02\x02\u1723\u01DD\x03\x02\x02\x02\u1724" +
		"\u1726\x07\x11\x02\x02\u1725\u1727\x05\x06\x04\x02\u1726\u1725\x03\x02" +
		"\x02\x02\u1727\u1728\x03\x02\x02\x02\u1728\u1726\x03\x02\x02\x02\u1728" +
		"\u1729\x03\x02\x02\x02\u1729\u1730\x03\x02\x02\x02\u172A\u172C\x05\u01E0" +
		"\xF1\x02\u172B\u172D\x05\x06\x04\x02\u172C\u172B\x03\x02\x02\x02\u172D" +
		"\u172E\x03\x02\x02\x02\u172E\u172C\x03\x02\x02\x02\u172E\u172F\x03\x02" +
		"\x02\x02\u172F\u1731\x03\x02\x02\x02\u1730\u172A\x03\x02\x02\x02\u1731" +
		"\u1732\x03\x02\x02\x02\u1732\u1730\x03\x02\x02\x02\u1732\u1733\x03\x02" +
		"\x02\x02\u1733\u1734\x03\x02\x02\x02\u1734\u1736\x07\xFA\x02\x02\u1735" +
		"\u1737\x05\x06\x04\x02\u1736\u1735\x03\x02\x02\x02\u1737\u1738\x03\x02" +
		"\x02\x02\u1738\u1736\x03\x02\x02\x02\u1738\u1739\x03\x02\x02\x02\u1739" +
		"\u1741\x03\x02\x02\x02\u173A\u173E\x05\u01C2\xE2\x02\u173B\u173D\x05\x06" +
		"\x04\x02\u173C\u173B\x03\x02\x02\x02\u173D\u1740\x03\x02\x02\x02\u173E" +
		"\u173C\x03\x02\x02\x02\u173E\u173F\x03\x02\x02\x02\u173F\u1742\x03\x02" +
		"\x02\x02\u1740\u173E\x03\x02\x02\x02\u1741\u173A\x03\x02\x02\x02\u1742" +
		"\u1743\x03\x02\x02\x02\u1743\u1741\x03\x02\x02\x02\u1743\u1744\x03\x02" +
		"\x02\x02\u1744\u01DF\x03\x02\x02\x02\u1745\u176B\x07j\x02\x02\u1746\u1748" +
		"\x07\x9E\x02\x02\u1747\u1749\x05\x06\x04\x02\u1748\u1747\x03\x02\x02\x02" +
		"\u1749\u174A\x03\x02\x02\x02\u174A\u1748\x03\x02\x02\x02\u174A\u174B\x03" +
		"\x02\x02\x02\u174B\u174C\x03\x02\x02\x02\u174C\u174D\x05\u01E6\xF4\x02" +
		"\u174D\u176B\x03\x02\x02\x02\u174E\u176B\x07\xA6\x02\x02\u174F\u176B\x07" +
		"\xE1\x02\x02\u1750\u176B\x07\xE6\x02\x02\u1751\u1753\t\"\x02\x02\u1752" +
		"\u1754\x05\x06\x04\x02\u1753\u1752\x03\x02\x02\x02\u1754\u1755\x03\x02" +
		"\x02\x02\u1755\u1753\x03\x02\x02\x02\u1755\u1756\x03\x02\x02\x02\u1756" +
		"\u1758\x03\x02\x02\x02\u1757\u1751\x03\x02\x02\x02\u1757\u1758\x03\x02" +
		"\x02\x02\u1758\u1759\x03\x02\x02\x02\u1759\u175B\x07\u0111\x02\x02\u175A" +
		"\u175C\x05\x06\x04\x02\u175B\u175A\x03\x02\x02\x02\u175C\u175D\x03\x02" +
		"\x02\x02\u175D\u175B\x03\x02\x02\x02\u175D\u175E\x03\x02\x02\x02\u175E" +
		"\u175F\x03\x02\x02\x02\u175F\u1760\x05\u01E4\xF3\x02\u1760\u176B\x03\x02" +
		"\x02\x02\u1761\u176B\x07\u0113\x02\x02\u1762\u1764\x07\u017D\x02\x02\u1763" +
		"\u1765\x05\x06\x04\x02\u1764\u1763\x03\x02\x02\x02\u1765\u1766\x03\x02" +
		"\x02\x02\u1766\u1764\x03\x02\x02\x02\u1766\u1767\x03\x02\x02\x02\u1767" +
		"\u1768\x03\x02\x02\x02\u1768\u1769\x05\u01E2\xF2\x02\u1769\u176B\x03\x02" +
		"\x02\x02\u176A\u1745\x03\x02\x02\x02\u176A\u1746\x03\x02\x02\x02\u176A" +
		"\u174E\x03\x02\x02\x02\u176A\u174F\x03\x02\x02\x02\u176A\u1750\x03\x02" +
		"\x02\x02\u176A\u1757\x03\x02\x02\x02\u176A\u1761\x03\x02\x02\x02\u176A" +
		"\u1762\x03\x02\x02\x02\u176B\u01E1\x03\x02\x02\x02\u176C\u176D\x07\u01A1" +
		"\x02\x02\u176D\u01E3\x03\x02\x02\x02\u176E\u176F\x07\u01A1\x02\x02\u176F" +
		"\u01E5\x03\x02\x02\x02\u1770\u1771\x07\u01A1\x02\x02\u1771\u01E7\x03\x02" +
		"\x02\x02\u1772\u1773\b\xF5\x01\x02\u1773\u1777\x07\u0197\x02\x02\u1774" +
		"\u1776\x05\b\x05\x02\u1775\u1774\x03\x02\x02\x02\u1776\u1779\x03\x02\x02" +
		"\x02\u1777\u1775\x03\x02\x02\x02\u1777\u1778\x03\x02\x02\x02\u1778\u177A" +
		"\x03\x02\x02\x02\u1779\u1777\x03\x02\x02\x02\u177A\u177E\x05\u01E8\xF5" +
		"\x02\u177B\u177D\x05\b\x05\x02\u177C\u177B\x03\x02\x02\x02\u177D\u1780" +
		"\x03\x02\x02\x02\u177E\u177C\x03\x02\x02\x02\u177E\u177F\x03\x02\x02\x02" +
		"\u177F\u1781\x03\x02\x02\x02\u1780\u177E\x03\x02\x02\x02\u1781\u1782\x07" +
		"\u0198\x02\x02\u1782\u1793\x03\x02\x02\x02\u1783\u1787\x05\u01EC\xF7\x02" +
		"\u1784\u1786\x05\b\x05\x02\u1785\u1784\x03\x02\x02\x02\u1786\u1789\x03" +
		"\x02\x02\x02\u1787\u1785\x03\x02\x02\x02\u1787\u1788\x03\x02\x02\x02\u1788" +
		"\u178A\x03\x02\x02\x02\u1789\u1787\x03\x02\x02\x02\u178A\u178B\x05\u01E8" +
		"\xF5\t\u178B\u1793\x03\x02\x02\x02\u178C\u1793\x05\u0202\u0102\x02\u178D" +
		"\u1793\x07\u01A1\x02\x02\u178E\u1793\x07\u01A0\x02\x02\u178F\u1793\x07" +
		"\u0184\x02\x02\u1790\u1793\x07\u0186\x02\x02\u1791\u1793\x07\u0185\x02" +
		"\x02\u1792\u1772\x03\x02\x02\x02\u1792\u1783\x03\x02\x02\x02\u1792\u178C" +
		"\x03\x02\x02\x02\u1792\u178D\x03\x02\x02\x02\u1792\u178E\x03\x02\x02\x02" +
		"\u1792\u178F\x03\x02\x02\x02\u1792\u1790\x03\x02\x02\x02\u1792\u1791\x03" +
		"\x02\x02\x02\u1793\u17A6\x03\x02\x02\x02\u1794\u1798\f\n\x02\x02\u1795" +
		"\u1797\x05\b\x05\x02\u1796\u1795\x03\x02\x02\x02\u1797\u179A\x03\x02\x02" +
		"\x02\u1798\u1796\x03\x02\x02\x02\u1798\u1799\x03\x02\x02\x02\u1799\u179B" +
		"\x03\x02\x02\x02\u179A\u1798\x03\x02\x02\x02\u179B\u179F\x05\u01EA\xF6" +
		"\x02\u179C\u179E\x05\b\x05\x02\u179D\u179C\x03\x02\x02\x02\u179E\u17A1" +
		"\x03\x02\x02\x02\u179F\u179D\x03\x02\x02\x02\u179F\u17A0\x03\x02\x02\x02" +
		"\u17A0\u17A2\x03\x02\x02\x02\u17A1\u179F\x03\x02\x02\x02\u17A2\u17A3\x05" +
		"\u01E8\xF5\v\u17A3\u17A5\x03\x02\x02\x02\u17A4\u1794\x03\x02\x02\x02\u17A5" +
		"\u17A8\x03\x02\x02\x02\u17A6\u17A4\x03\x02\x02\x02\u17A6\u17A7\x03\x02" +
		"\x02\x02\u17A7\u01E9\x03\x02\x02\x02\u17A8\u17A6\x03\x02\x02\x02\u17A9" +
		"\u17B0\x07\u018B\x02\x02\u17AA\u17B0\x07\u018C\x02\x02\u17AB\u17B0\x07" +
		"\u018D\x02\x02\u17AC\u17B0\x07\u018E\x02\x02\u17AD\u17AE\x07\u018D\x02" +
		"\x02\u17AE\u17B0\x07\u018D\x02\x02\u17AF\u17A9\x03\x02\x02\x02\u17AF\u17AA" +
		"\x03\x02\x02\x02\u17AF\u17AB\x03\x02\x02\x02\u17AF\u17AC\x03\x02\x02\x02" +
		"\u17AF\u17AD\x03\x02\x02\x02\u17B0\u01EB\x03\x02\x02\x02\u17B1\u17B2\t" +
		"#\x02\x02\u17B2\u01ED\x03\x02\x02\x02\u17B3\u17B4\b\xF8\x01\x02\u17B4" +
		"\u17B8\x07\u0197\x02\x02\u17B5\u17B7\x05\b\x05\x02\u17B6\u17B5\x03\x02" +
		"\x02\x02\u17B7\u17BA\x03\x02\x02\x02\u17B8\u17B6\x03\x02\x02\x02\u17B8" +
		"\u17B9\x03\x02\x02\x02\u17B9\u17BB\x03\x02\x02\x02\u17BA\u17B8\x03\x02" +
		"\x02\x02\u17BB\u17BF\x05\u01EE\xF8\x02\u17BC\u17BE\x05\b\x05\x02\u17BD" +
		"\u17BC\x03\x02\x02\x02\u17BE\u17C1\x03\x02\x02\x02\u17BF\u17BD\x03\x02" +
		"\x02\x02\u17BF\u17C0\x03\x02\x02\x02\u17C0\u17C2\x03\x02\x02\x02\u17C1" +
		"\u17BF\x03\x02\x02\x02\u17C2\u17C3\x07\u0198\x02\x02\u17C3\u17D1\x03\x02" +
		"\x02\x02\u17C4\u17C8\x07\xF2\x02\x02\u17C5\u17C7\x05\b\x05\x02\u17C6\u17C5" +
		"\x03\x02\x02\x02\u17C7\u17CA\x03\x02\x02\x02\u17C8\u17C6\x03\x02\x02\x02" +
		"\u17C8\u17C9\x03\x02\x02\x02\u17C9\u17CB\x03\x02\x02\x02\u17CA\u17C8\x03" +
		"\x02\x02\x02\u17CB\u17D1\x05\u01EE\xF8\x07\u17CC\u17D1\x05\u01FA\xFE\x02" +
		"\u17CD\u17D1\x05\u01F2\xFA\x02\u17CE\u17D1\x05\u01F6\xFC\x02\u17CF\u17D1" +
		"\x05\u01F0\xF9\x02\u17D0\u17B3\x03\x02\x02\x02\u17D0\u17C4\x03\x02\x02" +
		"\x02\u17D0\u17CC\x03\x02\x02\x02\u17D0\u17CD\x03\x02\x02\x02\u17D0\u17CE" +
		"\x03\x02\x02\x02\u17D0\u17CF\x03\x02\x02\x02\u17D1\u17E4\x03\x02\x02\x02" +
		"\u17D2\u17D6\f\b\x02\x02\u17D3\u17D5\x05\b\x05\x02\u17D4\u17D3\x03\x02" +
		"\x02\x02\u17D5\u17D8\x03\x02\x02\x02\u17D6\u17D4\x03\x02\x02\x02\u17D6" +
		"\u17D7\x03\x02\x02\x02\u17D7\u17D9\x03\x02\x02\x02\u17D8\u17D6\x03\x02" +
		"\x02\x02\u17D9\u17DD\x05\u01F4\xFB\x02\u17DA\u17DC\x05\b\x05\x02\u17DB" +
		"\u17DA\x03\x02\x02\x02\u17DC\u17DF\x03\x02\x02\x02\u17DD\u17DB\x03\x02" +
		"\x02\x02\u17DD\u17DE\x03\x02\x02\x02\u17DE\u17E0\x03\x02\x02\x02\u17DF" +
		"\u17DD\x03\x02\x02\x02\u17E0\u17E1\x05\u01EE\xF8\t\u17E1\u17E3\x03\x02" +
		"\x02\x02\u17E2\u17D2\x03\x02\x02\x02\u17E3\u17E6\x03\x02\x02\x02\u17E4" +
		"\u17E2\x03\x02\x02\x02\u17E4\u17E5\x03\x02\x02\x02\u17E5\u01EF\x03\x02" +
		"\x02\x02\u17E6\u17E4\x03\x02\x02\x02\u17E7\u17EF\x05\u0158\xAD\x02\u17E8" +
		"\u17EA\x05\b\x05\x02\u17E9\u17E8\x03\x02\x02\x02\u17EA\u17EB\x03\x02\x02" +
		"\x02\u17EB\u17E9\x03\x02\x02\x02\u17EB\u17EC\x03\x02\x02\x02\u17EC\u17ED" +
		"\x03\x02\x02\x02\u17ED\u17EE\x07\xCE\x02\x02\u17EE\u17F0\x03\x02\x02\x02" +
		"\u17EF\u17E9\x03\x02\x02\x02\u17EF\u17F0\x03\x02\x02\x02\u17F0\u17F2\x03" +
		"\x02\x02\x02\u17F1\u17F3\x05\b\x05\x02\u17F2\u17F1\x03\x02\x02\x02\u17F3" +
		"\u17F4\x03\x02\x02\x02\u17F4\u17F2\x03\x02\x02\x02\u17F4\u17F5\x03\x02" +
		"\x02\x02\u17F5\u17F6\x03\x02\x02\x02\u17F6\u17F7\t$\x02\x02\u17F7\u01F1" +
		"\x03\x02\x02\x02\u17F8\u17F9\b\xFA\x01\x02\u17F9\u17FD\x05\u01E8\xF5\x02" +
		"\u17FA\u17FC\x05\b\x05\x02\u17FB\u17FA\x03\x02\x02\x02\u17FC\u17FF\x03" +
		"\x02\x02\x02\u17FD\u17FB\x03\x02\x02\x02\u17FD\u17FE\x03\x02\x02\x02\u17FE" +
		"\u1800\x03\x02\x02\x02\u17FF\u17FD\x03\x02\x02\x02\u1800\u1804\x05\u01FE" +
		"\u0100\x02\u1801\u1803\x05\b\x05\x02\u1802\u1801\x03\x02\x02\x02\u1803" +
		"\u1806\x03\x02\x02\x02\u1804\u1802\x03\x02\x02\x02\u1804\u1805\x03\x02" +
		"\x02\x02\u1805\u1807\x03\x02\x02\x02\u1806\u1804\x03\x02\x02\x02\u1807" +
		"\u1808\x05\u01E8\xF5\x02\u1808\u180C\x03\x02\x02\x02\u1809\u180C\x05\u01FA" +
		"\xFE\x02\u180A\u180C\x05\u0158\xAD\x02\u180B\u17F8\x03\x02\x02\x02\u180B" +
		"\u1809\x03\x02\x02\x02\u180B\u180A\x03\x02\x02\x02\u180C\u1825\x03\x02" +
		"\x02\x02\u180D\u180F\f\x03\x02\x02\u180E\u1810\x05\b\x05\x02\u180F\u180E" +
		"\x03\x02\x02\x02\u1810\u1811\x03\x02\x02\x02\u1811\u180F\x03\x02\x02\x02" +
		"\u1811\u1812\x03\x02\x02\x02\u1812\u1813\x03\x02\x02\x02\u1813\u1817\x05" +
		"\u01F4\xFB\x02\u1814\u1816\x05\b\x05\x02\u1815\u1814\x03\x02\x02\x02\u1816" +
		"\u1819\x03\x02\x02\x02\u1817\u1815\x03\x02\x02\x02\u1817\u1818\x03\x02" +
		"\x02\x02\u1818\u181A\x03\x02\x02\x02\u1819\u1817\x03\x02\x02\x02\u181A" +
		"\u181E\x05\u01FE\u0100\x02\u181B\u181D\x05\b\x05\x02\u181C\u181B\x03\x02" +
		"\x02\x02\u181D\u1820\x03\x02\x02\x02\u181E\u181C\x03\x02\x02\x02\u181E" +
		"\u181F\x03\x02\x02\x02\u181F\u1821\x03\x02\x02\x02\u1820\u181E\x03\x02" +
		"\x02\x02\u1821\u1822\x05\u01E8\xF5\x02\u1822\u1824\x03\x02\x02\x02\u1823" +
		"\u180D\x03\x02\x02\x02\u1824\u1827\x03\x02\x02\x02\u1825\u1823\x03\x02" +
		"\x02\x02\u1825\u1826\x03\x02\x02\x02\u1826\u01F3\x03\x02\x02\x02\u1827" +
		"\u1825\x03\x02\x02\x02\u1828\u1829\t%\x02\x02\u1829\u01F5\x03\x02\x02" +
		"\x02\u182A\u1832\x05\u01E8\xF5\x02\u182B\u182D\x05\b\x05\x02\u182C\u182B" +
		"\x03\x02\x02\x02\u182D\u182E\x03\x02\x02\x02\u182E\u182C\x03\x02\x02\x02" +
		"\u182E\u182F\x03\x02\x02\x02\u182F\u1830\x03\x02\x02\x02\u1830\u1831\x07" +
		"\xCE\x02\x02\u1831\u1833\x03\x02\x02\x02\u1832\u182C\x03\x02\x02\x02\u1832" +
		"\u1833\x03\x02\x02\x02\u1833\u183B\x03\x02\x02\x02\u1834\u1836\x05\b\x05" +
		"\x02\u1835\u1834\x03\x02\x02\x02\u1836\u1837\x03\x02\x02\x02\u1837\u1835" +
		"\x03\x02\x02\x02\u1837\u1838\x03\x02\x02\x02\u1838\u1839\x03\x02\x02\x02" +
		"\u1839\u183A\x07\xF2\x02\x02\u183A\u183C\x03\x02\x02\x02\u183B\u1835\x03" +
		"\x02\x02\x02\u183B\u183C\x03\x02\x02\x02\u183C\u183E\x03\x02\x02\x02\u183D" +
		"\u183F\x05\b\x05\x02\u183E\u183D\x03\x02\x02\x02\u183F\u1840\x03\x02\x02" +
		"\x02\u1840\u183E\x03\x02\x02\x02\u1840\u1841\x03\x02\x02\x02\u1841\u1842" +
		"\x03\x02\x02\x02\u1842\u1843\x05\u01F8\xFD\x02\u1843\u01F7\x03\x02\x02" +
		"\x02\u1844\u1845\t&\x02\x02\u1845\u01F9\x03\x02\x02\x02\u1846\u184E\x05" +
		"\u0202\u0102\x02\u1847\u1849\x05\b\x05\x02\u1848\u1847\x03\x02\x02\x02" +
		"\u1849\u184A\x03\x02\x02\x02\u184A\u1848\x03\x02\x02\x02\u184A\u184B\x03" +
		"\x02\x02\x02\u184B\u184C\x03\x02\x02\x02\u184C\u184D\x07\xCE\x02\x02\u184D" +
		"\u184F\x03\x02\x02\x02\u184E\u1848\x03\x02\x02\x02\u184E\u184F\x03\x02" +
		"\x02\x02\u184F\u1857\x03\x02\x02\x02\u1850\u1852\x05\b\x05\x02\u1851\u1850" +
		"\x03\x02\x02\x02\u1852\u1853\x03\x02\x02\x02\u1853\u1851\x03\x02\x02\x02" +
		"\u1853\u1854\x03\x02\x02\x02\u1854\u1855\x03\x02\x02\x02\u1855\u1856\x07" +
		"\xF2\x02\x02\u1856\u1858\x03\x02\x02\x02\u1857\u1851\x03\x02\x02\x02\u1857" +
		"\u1858\x03\x02\x02\x02\u1858\u185A\x03\x02\x02\x02\u1859\u185B\x05\b\x05" +
		"\x02\u185A\u1859\x03\x02\x02\x02\u185B\u185C\x03\x02\x02\x02\u185C\u185A" +
		"\x03\x02\x02\x02\u185C\u185D\x03\x02\x02\x02\u185D\u185E\x03\x02\x02\x02" +
		"\u185E\u185F\x05\u01FC\xFF\x02\u185F\u01FB\x03\x02\x02\x02\u1860\u1861" +
		"\t\'\x02\x02\u1861\u01FD\x03\x02\x02\x02\u1862\u1866\x07\xCE\x02\x02\u1863" +
		"\u1865\x05\b\x05\x02\u1864\u1863\x03\x02\x02\x02\u1865\u1868\x03\x02\x02" +
		"\x02\u1866\u1864\x03\x02\x02\x02\u1866\u1867\x03\x02\x02\x02\u1867\u186A" +
		"\x03\x02\x02\x02\u1868\u1866\x03\x02\x02\x02\u1869\u1862\x03\x02\x02\x02" +
		"\u1869\u186A\x03\x02\x02\x02\u186A\u18F2\x03\x02\x02\x02\u186B\u186F\x07" +
		"\xF2\x02\x02\u186C\u186E\x05\b\x05\x02\u186D\u186C\x03\x02\x02\x02\u186E" +
		"\u1871\x03\x02\x02\x02\u186F\u186D\x03\x02\x02\x02\u186F\u1870\x03\x02" +
		"\x02\x02\u1870\u1873\x03\x02\x02\x02\u1871\u186F\x03\x02\x02\x02\u1872" +
		"\u186B\x03\x02\x02\x02\u1872\u1873\x03\x02\x02\x02\u1873\u18B0\x03\x02" +
		"\x02\x02\u1874\u187C\x07\xB6\x02\x02\u1875\u1877\x05\b\x05\x02\u1876\u1875" +
		"\x03\x02\x02\x02\u1877\u1878\x03\x02\x02\x02\u1878\u1876\x03\x02\x02\x02" +
		"\u1878\u1879\x03\x02\x02\x02\u1879\u187A\x03\x02\x02\x02\u187A\u187B\x07" +
		"\u0163\x02\x02\u187B\u187D\x03\x02\x02\x02\u187C\u1876\x03\x02\x02\x02" +
		"\u187C\u187D\x03\x02\x02\x02\u187D\u18B1\x03\x02\x02\x02\u187E\u1886\x07" +
		"\u0196\x02\x02\u187F\u1881\x05\b\x05\x02\u1880\u187F\x03\x02\x02\x02\u1881" +
		"\u1882\x03\x02\x02\x02\u1882\u1880\x03\x02\x02\x02\u1882\u1883\x03\x02" +
		"\x02\x02\u1883\u1884\x03\x02\x02\x02\u1884\u1885\x07\u0163\x02\x02\u1885" +
		"\u1887\x03\x02\x02\x02\u1886\u1880\x03\x02\x02\x02\u1886\u1887\x03\x02" +
		"\x02\x02\u1887\u18B1\x03\x02\x02\x02\u1888\u1890\x07\xD8\x02\x02\u1889" +
		"\u188B\x05\b\x05\x02\u188A\u1889\x03\x02\x02\x02\u188B\u188C\x03\x02\x02" +
		"\x02\u188C\u188A\x03\x02\x02\x02\u188C\u188D\x03\x02\x02\x02\u188D\u188E" +
		"\x03\x02\x02\x02\u188E\u188F\x07\u0163\x02\x02\u188F\u1891\x03\x02\x02" +
		"\x02\u1890\u188A\x03\x02\x02\x02\u1890\u1891\x03\x02\x02\x02\u1891\u18B1" +
		"\x03\x02\x02\x02\u1892\u189A\x07\u0193\x02\x02\u1893\u1895\x05\b\x05\x02" +
		"\u1894\u1893\x03\x02\x02\x02\u1895\u1896\x03\x02\x02\x02\u1896\u1894\x03" +
		"\x02\x02\x02\u1896\u1897\x03\x02\x02\x02\u1897\u1898\x03\x02\x02\x02\u1898" +
		"\u1899\x07\u0163\x02\x02\u1899\u189B\x03\x02\x02\x02\u189A\u1894\x03\x02" +
		"\x02\x02\u189A\u189B\x03\x02\x02\x02\u189B\u18B1\x03\x02\x02\x02\u189C" +
		"\u18A4\x07\x95\x02\x02\u189D\u189F\x05\b\x05\x02\u189E\u189D\x03\x02\x02" +
		"\x02\u189F\u18A0\x03\x02\x02\x02\u18A0\u189E\x03\x02\x02\x02\u18A0\u18A1" +
		"\x03\x02\x02\x02\u18A1\u18A2\x03\x02\x02\x02\u18A2\u18A3\x07\u0168\x02" +
		"\x02\u18A3\u18A5\x03\x02\x02\x02\u18A4\u189E\x03\x02\x02\x02\u18A4\u18A5" +
		"\x03\x02\x02\x02\u18A5\u18B1\x03\x02\x02\x02\u18A6\u18AE\x07\u0192\x02" +
		"\x02\u18A7\u18A9\x05\b\x05\x02\u18A8\u18A7\x03\x02\x02\x02\u18A9\u18AA" +
		"\x03\x02\x02\x02\u18AA\u18A8\x03\x02\x02\x02\u18AA\u18AB\x03\x02\x02\x02" +
		"\u18AB\u18AC\x03\x02\x02\x02\u18AC\u18AD\x07\u0168\x02\x02\u18AD\u18AF" +
		"\x03\x02\x02\x02\u18AE\u18A8\x03\x02\x02\x02\u18AE\u18AF\x03\x02\x02\x02" +
		"\u18AF\u18B1\x03\x02\x02\x02\u18B0\u1874\x03\x02\x02\x02\u18B0\u187E\x03" +
		"\x02\x02\x02\u18B0\u1888\x03\x02\x02\x02\u18B0\u1892\x03\x02\x02\x02\u18B0" +
		"\u189C\x03\x02\x02\x02\u18B0\u18A6\x03\x02\x02\x02\u18B1\u18F3\x03\x02" +
		"\x02\x02\u18B2\u18BA\x07\xB6\x02\x02\u18B3\u18B5\x05\b\x05\x02\u18B4\u18B3" +
		"\x03\x02\x02\x02\u18B5\u18B6\x03\x02\x02\x02\u18B6\u18B4\x03\x02\x02\x02" +
		"\u18B6\u18B7\x03\x02\x02\x02\u18B7\u18B8\x03\x02\x02\x02\u18B8\u18B9\x07" +
		"\u0163\x02\x02\u18B9\u18BB\x03\x02\x02\x02\u18BA\u18B4\x03\x02\x02\x02" +
		"\u18BA\u18BB\x03\x02\x02\x02\u18BB\u18BD\x03\x02\x02\x02\u18BC\u18BE\x05" +
		"\b\x05\x02\u18BD\u18BC\x03\x02\x02\x02\u18BE\u18BF\x03\x02\x02\x02\u18BF" +
		"\u18BD\x03\x02\x02\x02\u18BF\u18C0\x03\x02\x02\x02\u18C0\u18C1\x03\x02" +
		"\x02\x02\u18C1\u18C3\x07\xFE\x02\x02\u18C2\u18C4\x05\b\x05\x02\u18C3\u18C2" +
		"\x03\x02\x02\x02\u18C4\u18C5\x03\x02\x02\x02\u18C5\u18C3\x03\x02\x02\x02" +
		"\u18C5\u18C6\x03\x02\x02\x02\u18C6\u18C7\x03\x02\x02\x02\u18C7\u18CF\x07" +
		"\x95\x02\x02\u18C8\u18CA\x05\b\x05\x02\u18C9\u18C8\x03\x02\x02\x02\u18CA" +
		"\u18CB\x03\x02\x02\x02\u18CB\u18C9\x03\x02\x02\x02\u18CB\u18CC\x03\x02" +
		"\x02\x02\u18CC\u18CD\x03\x02\x02\x02\u18CD\u18CE\x07\u0168\x02\x02\u18CE" +
		"\u18D0\x03\x02\x02\x02\u18CF\u18C9\x03\x02\x02\x02\u18CF\u18D0\x03\x02" +
		"\x02\x02\u18D0\u18F3\x03\x02\x02\x02\u18D1\u18F3\x07\u0195\x02\x02\u18D2" +
		"\u18DA\x07\xD8\x02\x02\u18D3\u18D5\x05\b\x05\x02\u18D4\u18D3\x03\x02\x02" +
		"\x02\u18D5\u18D6\x03\x02\x02\x02\u18D6\u18D4\x03\x02\x02\x02\u18D6\u18D7" +
		"\x03\x02\x02\x02\u18D7\u18D8\x03\x02\x02\x02\u18D8\u18D9\x07\u0163\x02" +
		"\x02\u18D9\u18DB\x03\x02\x02\x02\u18DA\u18D4\x03\x02\x02\x02\u18DA\u18DB" +
		"\x03\x02\x02\x02\u18DB\u18DD\x03\x02\x02\x02\u18DC\u18DE\x05\b\x05\x02" +
		"\u18DD\u18DC\x03\x02\x02\x02\u18DE\u18DF\x03\x02\x02\x02\u18DF\u18DD\x03" +
		"\x02\x02\x02\u18DF\u18E0\x03\x02\x02\x02\u18E0\u18E1\x03\x02\x02\x02\u18E1" +
		"\u18E3\x07\xFE\x02\x02\u18E2\u18E4\x05\b\x05\x02\u18E3\u18E2\x03\x02\x02" +
		"\x02\u18E4\u18E5\x03\x02\x02\x02\u18E5\u18E3\x03\x02\x02\x02\u18E5\u18E6" +
		"\x03\x02\x02\x02\u18E6\u18E7\x03\x02\x02\x02\u18E7\u18EF\x07\x95\x02\x02" +
		"\u18E8\u18EA\x05\b\x05\x02\u18E9\u18E8\x03\x02\x02\x02\u18EA\u18EB\x03" +
		"\x02\x02\x02\u18EB\u18E9\x03\x02\x02\x02\u18EB\u18EC\x03\x02\x02\x02\u18EC" +
		"\u18ED\x03\x02\x02\x02\u18ED\u18EE\x07\u0168\x02\x02\u18EE\u18F0\x03\x02" +
		"\x02\x02\u18EF\u18E9\x03\x02\x02\x02\u18EF\u18F0\x03\x02\x02\x02\u18F0" +
		"\u18F3\x03\x02\x02\x02\u18F1\u18F3\x07\u0194\x02\x02\u18F2\u1872\x03\x02" +
		"\x02\x02\u18F2\u18B2\x03\x02\x02\x02\u18F2\u18D1\x03\x02\x02\x02\u18F2" +
		"\u18D2\x03\x02\x02\x02\u18F2\u18F1\x03\x02\x02\x02\u18F3\u01FF\x03\x02" +
		"\x02\x02\u18F4\u18FC\x05\u0158\xAD\x02\u18F5\u18F7\x05\b\x05\x02\u18F6" +
		"\u18F5\x03\x02\x02\x02\u18F7\u18FA\x03\x02\x02\x02\u18F8\u18F6\x03\x02" +
		"\x02\x02\u18F8\u18F9\x03\x02\x02\x02\u18F9\u18FB\x03\x02\x02\x02\u18FA" +
		"\u18F8\x03\x02\x02\x02\u18FB\u18FD\x05\u0206\u0104\x02\u18FC\u18F8\x03" +
		"\x02\x02\x02\u18FC\u18FD\x03\x02\x02\x02\u18FD\u1905\x03\x02\x02\x02\u18FE" +
		"\u1900\x05\b\x05\x02\u18FF\u18FE\x03\x02\x02\x02\u1900\u1903\x03\x02\x02" +
		"\x02\u1901\u18FF\x03\x02\x02\x02\u1901\u1902\x03\x02\x02\x02\u1902\u1904" +
		"\x03\x02\x02\x02\u1903\u1901\x03\x02";
	private static readonly _serializedATNSegment12: string =
		"\x02\x02\u1904\u1906\x05\u0208\u0105\x02\u1905\u1901\x03\x02\x02\x02\u1905" +
		"\u1906\x03\x02\x02\x02\u1906\u0201\x03\x02\x02\x02\u1907\u1923\x05\u0200" +
		"\u0101\x02\u1908\u190C\x07\xB1\x02\x02\u1909\u190B\x05\b\x05\x02\u190A" +
		"\u1909\x03\x02\x02\x02\u190B\u190E\x03\x02\x02\x02\u190C\u190A\x03\x02" +
		"\x02\x02\u190C\u190D\x03\x02\x02\x02\u190D\u190F\x03\x02\x02\x02\u190E" +
		"\u190C\x03\x02\x02\x02\u190F\u1917\x05\u020E\u0108\x02\u1910\u1912\x05" +
		"\b\x05\x02\u1911\u1910\x03\x02\x02\x02\u1912\u1915\x03\x02\x02\x02\u1913" +
		"\u1911\x03\x02\x02\x02\u1913\u1914\x03\x02\x02\x02\u1914\u1916\x03\x02" +
		"\x02\x02\u1915\u1913\x03\x02\x02\x02\u1916\u1918\x05\u0204\u0103\x02\u1917" +
		"\u1913\x03\x02\x02\x02\u1917\u1918\x03\x02\x02\x02\u1918\u1920\x03\x02" +
		"\x02\x02\u1919\u191B\x05\b\x05\x02\u191A\u1919\x03\x02\x02\x02\u191B\u191E" +
		"\x03\x02\x02\x02\u191C\u191A\x03\x02\x02\x02\u191C\u191D\x03\x02\x02\x02" +
		"\u191D\u191F\x03\x02\x02\x02\u191E\u191C\x03\x02\x02\x02\u191F\u1921\x05" +
		"\u0208\u0105\x02\u1920\u191C\x03\x02\x02\x02\u1920\u1921\x03\x02\x02\x02" +
		"\u1921\u1923\x03\x02\x02\x02\u1922\u1907\x03\x02\x02\x02\u1922\u1908\x03" +
		"\x02\x02\x02\u1923\u0203\x03\x02\x02\x02\u1924\u1925\x05\u0206\u0104\x02" +
		"\u1925\u0205\x03\x02\x02\x02\u1926\u192A\x07\u0197\x02\x02\u1927\u1929" +
		"\x05\b\x05\x02\u1928\u1927\x03\x02\x02\x02\u1929\u192C\x03\x02\x02\x02" +
		"\u192A\u1928\x03\x02\x02\x02\u192A\u192B\x03\x02\x02\x02\u192B\u192F\x03" +
		"\x02\x02\x02\u192C\u192A\x03\x02\x02\x02\u192D\u1930\x05\u01E8\xF5\x02" +
		"\u192E\u1930\x07\x07\x02\x02\u192F\u192D\x03\x02\x02\x02\u192F\u192E\x03" +
		"\x02\x02\x02\u1930\u193D\x03\x02\x02\x02\u1931\u1933\x05\x06\x04\x02\u1932" +
		"\u1931\x03\x02\x02\x02\u1933\u1936\x03\x02\x02\x02\u1934\u1932\x03\x02" +
		"\x02\x02\u1934\u1935\x03\x02\x02\x02\u1935\u1939\x03\x02\x02\x02\u1936" +
		"\u1934\x03\x02\x02\x02\u1937\u193A\x05\u01E8\xF5\x02\u1938\u193A\x07\x07" +
		"\x02\x02\u1939\u1937\x03\x02\x02\x02\u1939\u1938\x03\x02\x02\x02\u193A" +
		"\u193C\x03\x02\x02\x02\u193B\u1934\x03\x02\x02\x02\u193C\u193F\x03\x02" +
		"\x02\x02\u193D\u193B\x03\x02\x02\x02\u193D\u193E\x03\x02\x02\x02\u193E" +
		"\u1943\x03\x02\x02\x02\u193F\u193D\x03\x02\x02\x02\u1940\u1942\x05\b\x05" +
		"\x02\u1941\u1940\x03\x02\x02\x02\u1942\u1945\x03\x02\x02\x02\u1943\u1941" +
		"\x03\x02\x02\x02\u1943\u1944\x03\x02\x02\x02\u1944\u1946\x03\x02\x02\x02" +
		"\u1945\u1943\x03\x02\x02\x02\u1946\u1947\x07\u0198\x02\x02\u1947\u0207" +
		"\x03\x02\x02\x02\u1948\u194C\x07\u0197\x02\x02\u1949\u194B\x05\b\x05\x02" +
		"\u194A\u1949\x03\x02\x02\x02\u194B\u194E\x03\x02\x02\x02\u194C\u194A\x03" +
		"\x02\x02\x02\u194C\u194D\x03\x02\x02\x02\u194D\u194F\x03\x02\x02\x02\u194E" +
		"\u194C\x03\x02\x02\x02\u194F\u1953\x05\u020A\u0106\x02\u1950\u1952\x05" +
		"\b\x05\x02\u1951\u1950\x03\x02\x02\x02\u1952\u1955\x03\x02\x02\x02\u1953" +
		"\u1951\x03\x02\x02\x02\u1953\u1954\x03\x02\x02\x02\u1954\u1956\x03\x02" +
		"\x02\x02\u1955\u1953\x03\x02\x02\x02\u1956\u195E\x07\u0191\x02\x02\u1957" +
		"\u1959\x05\b\x05\x02\u1958\u1957\x03\x02\x02\x02\u1959\u195C\x03\x02\x02" +
		"\x02\u195A\u1958\x03\x02\x02\x02\u195A\u195B\x03\x02\x02\x02\u195B\u195D" +
		"\x03\x02\x02\x02\u195C\u195A\x03\x02\x02\x02\u195D\u195F\x05\u020C\u0107" +
		"\x02\u195E\u195A\x03\x02\x02\x02\u195E\u195F\x03\x02\x02\x02\u195F\u1963" +
		"\x03\x02\x02\x02\u1960\u1962\x05\b\x05\x02\u1961\u1960\x03\x02\x02\x02" +
		"\u1962\u1965\x03\x02\x02\x02\u1963\u1961\x03\x02\x02\x02\u1963\u1964\x03" +
		"\x02\x02\x02\u1964\u1966\x03\x02\x02\x02\u1965\u1963\x03\x02\x02\x02\u1966" +
		"\u1967\x07\u0198\x02\x02\u1967\u0209\x03\x02\x02\x02\u1968\u1969\x05\u01E8" +
		"\xF5\x02\u1969\u020B\x03\x02\x02\x02\u196A\u196B\x05\u01E8\xF5\x02\u196B" +
		"\u020D\x03\x02\x02\x02\u196C\u196D\x07\u01A3\x02\x02\u196D\u020F\x03\x02" +
		"\x02\x02\u0447\u0212\u0214\u0225\u022D\u0233\u0239\u0241\u0245\u0249\u024C" +
		"\u024F\u0253\u0259\u025E\u0265\u026A\u026D\u0273\u0279\u027D\u0282\u0289" +
		"\u028F\u0293\u0298\u029C\u02A1\u02A8\u02B1\u02B8\u02BF\u02C4\u02CA\u02D0" +
		"\u02D7\u02DF\u02E5\u02EE\u02F5\u02FC\u0301\u0308\u030D\u0312\u0319\u0320" +
		"\u0324\u0329\u032F\u0333\u0338\u033E\u0344\u0348\u034D\u0353\u035A\u0361" +
		"\u0367\u036B\u0373\u0379\u0380\u0386\u038C\u0390\u0395\u039C\u03A7\u03AD" +
		"\u03B3\u03BA\u03C2\u03CB\u03D1\u03DB\u03E1\u03E7\u03EB\u03F1\u03F7\u03FB" +
		"\u03FD\u0403\u0409\u040D\u0413\u0419\u041D\u041F\u0425\u042B\u0431\u0437" +
		"\u043B\u0440\u0444\u044C\u0452\u0458\u045C\u0461\u0467\u046B\u0470\u0474" +
		"\u0479\u047D\u0483\u0489\u048F\u0497\u049D\u04A3\u04A8\u04AC\u04AE\u04B3" +
		"\u04B7\u04BD\u04C3\u04C5\u04CB\u04D1\u04D3\u04D9\u04DF\u04E4\u04E8\u04EA" +
		"\u04EF\u04F3\u04F9\u04FF\u0503\u0508\u050C\u0511\u0515\u051B\u051D\u0523" +
		"\u0527\u052D\u0531\u0533\u0539\u053F\u0541\u0545\u054B\u0551\u0553\u0557" +
		"\u055D\u055F\u0565\u0569\u056E\u0576\u0578\u057E\u0582\u0587\u058F\u0595" +
		"\u0597\u059D\u05A1\u05A3\u05A8\u05B0\u05B2\u05B5\u05BE\u05C0\u05C7\u05CB" +
		"\u05D1\u05D3\u05DB\u05DD\u05E3\u05EB\u05F1\u05F3\u05FB\u05FD\u0603\u0607" +
		"\u060C\u0610\u061B\u061F\u0621\u0627\u062F\u0631\u0638\u063A\u0640\u0648" +
		"\u064A\u0651\u0653\u0659\u065D\u0663\u066A\u0670\u0674\u0676\u067C\u0680" +
		"\u0682\u0688\u068C\u0692\u0696\u069A\u06A4\u06A6\u06AC\u06B4\u06B6\u06BC" +
		"\u06C4\u06CA\u06D1\u06D8\u06DB\u06E1\u06E4\u06EA\u06ED\u06F3\u06F6\u06FC" +
		"\u06FF\u0705\u070B\u0712\u0719\u071F\u0727\u072D\u0730\u0735\u073A\u0741" +
		"\u0747\u074E\u0755\u075A\u0761\u0767\u076E\u0775\u077A\u0781\u0787\u078E" +
		"\u0795\u079B\u07A1\u07A6\u07AD\u07B3\u07BA\u07C1\u07C6\u07CD\u07D3\u07DA" +
		"\u07DF\u07E8\u07EE\u07F5\u07FA\u0803\u0809\u0810\u0815\u081E\u0820\u0827" +
		"\u0829\u0837\u083D\u0843\u084A\u084E\u0850\u0855\u085B\u085F\u0864\u086A" +
		"\u0875\u0877\u087E\u0880\u088B\u088F\u0895\u0899\u089F\u08A5\u08A7\u08AD" +
		"\u08B3\u08B9\u08BF\u08C3\u08CD\u08D1\u08D7\u08DB\u08DD\u08E2\u08E8\u08EE" +
		"\u08F5\u08F9\u0900\u0908\u090C\u0912\u0920\u0926\u092C\u0932\u0936\u093C" +
		"\u0942\u0944\u094A\u0950\u0959\u095F\u0961\u0967\u0969\u096F\u0975\u097E" +
		"\u0986\u098C\u0992\u0998\u099E\u09A4\u09A6\u09AA\u09B6\u09BC\u09C3\u09C7" +
		"\u09CC\u09D2\u09DB\u09E1\u09E3\u09E9\u09EB\u09F3\u09F9\u09FF\u0A01\u0A09" +
		"\u0A0F\u0A11\u0A19\u0A1F\u0A21\u0A23\u0A2A\u0A30\u0A32\u0A3A\u0A40\u0A42" +
		"\u0A48\u0A4A\u0A52\u0A56\u0A5C\u0A60\u0A68\u0A6E\u0A70\u0A78\u0A7E\u0A80" +
		"\u0A85\u0A8B\u0A8F\u0A94\u0A96\u0A9C\u0AA2\u0AA6\u0AAC\u0AB2\u0AB8\u0ABE" +
		"\u0AC2\u0AC7\u0ACD\u0AD2\u0AD7\u0ADE\u0AE4\u0AE6\u0AEA\u0AFA\u0B03\u0B0C" +
		"\u0B11\u0B16\u0B20\u0B25\u0B2A\u0B32\u0B3B\u0B40\u0B49\u0B51\u0B55\u0B5B" +
		"\u0B61\u0B63\u0B69\u0B6D\u0B73\u0B77\u0B7F\u0B81\u0B88\u0B90\u0B94\u0B9A" +
		"\u0B9E\u0BA0\u0BA5\u0BAB\u0BB1\u0BB8\u0BBE\u0BC1\u0BC7\u0BCD\u0BD3\u0BD5" +
		"\u0BDB\u0BE1\u0BE3\u0BE5\u0BEB\u0BEF\u0BF4\u0BFA\u0BFE\u0C03\u0C09\u0C0F" +
		"\u0C13\u0C18\u0C1E\u0C24\u0C28\u0C2D\u0C33\u0C37\u0C39\u0C4D\u0C51\u0C56" +
		"\u0C58\u0C61\u0C65\u0C6B\u0C6F\u0C75\u0C79\u0C7F\u0C83\u0C9B\u0CA1\u0CA7" +
		"\u0CA9\u0CB0\u0CBA\u0CC0\u0CC4\u0CCA\u0CCE\u0CD0\u0CD5\u0CDB\u0CE1\u0CEA" +
		"\u0CF0\u0CF2\u0CF8\u0CFC\u0D01\u0D07\u0D09\u0D0F\u0D15\u0D17\u0D1B\u0D20" +
		"\u0D26\u0D28\u0D2E\u0D30\u0D36\u0D3A\u0D3F\u0D45\u0D47\u0D4D\u0D4F\u0D55" +
		"\u0D59\u0D5D\u0D61\u0D65\u0D69\u0D6F\u0D75\u0D79\u0D7F\u0D83\u0D85\u0D8B" +
		"\u0D91\u0D9A\u0DA0\u0DA6\u0DAC\u0DAE\u0DB4\u0DBA\u0DC0\u0DC4\u0DCA\u0DCE" +
		"\u0DD0\u0DD5\u0DDD\u0DE5\u0DE7\u0DED\u0DF3\u0DF5\u0DFB\u0E02\u0E05\u0E0B" +
		"\u0E0D\u0E13\u0E19\u0E1B\u0E21\u0E24\u0E2A\u0E2C\u0E2F\u0E35\u0E39\u0E3E" +
		"\u0E45\u0E48\u0E4E\u0E54\u0E56\u0E5A\u0E5C\u0E68\u0E6C\u0E6E\u0E73\u0E79" +
		"\u0E84\u0E8C\u0E92\u0E94\u0E9C\u0EA2\u0EA4\u0EAF\u0EB5\u0EB7\u0EB9\u0EC4" +
		"\u0ED0\u0ED6\u0ED8\u0EDE\u0EE0\u0EE6\u0EE8\u0EF0\u0EF6\u0EF8\u0EFE\u0F00" +
		"\u0F06\u0F08\u0F10\u0F16\u0F18\u0F20\u0F26\u0F28\u0F30\u0F34\u0F3A\u0F41" +
		"\u0F45\u0F48\u0F4A\u0F50\u0F58\u0F5C\u0F62\u0F6A\u0F72\u0F78\u0F7F\u0F85" +
		"\u0F90\u0F96\u0F9D\u0FA4\u0FA8\u0FAD\u0FB1\u0FB6\u0FC1\u0FC3\u0FC9\u0FCD" +
		"\u0FD3\u0FD5\u0FDB\u0FE5\u0FEA\u0FF0\u0FF7\u0FFE\u1005\u100C\u1013\u101A" +
		"\u1021\u1028\u102F\u1036\u103D\u1044\u104B\u1052\u1059\u1060\u1064\u1069" +
		"\u106D\u1073\u1079\u107B\u1081\u108A\u1090\u1097\u109B\u109E\u10A4\u10AA" +
		"\u10B1\u10B5\u10BA\u10BE\u10C3\u10C7\u10CC\u10D3\u10D9\u10E0\u10E4\u10E7" +
		"\u10ED\u10F4\u10FB\u10FF\u1104\u1109\u1111\u1113\u1119\u1121\u1128\u112F" +
		"\u1133\u1138\u113C\u1141\u1145\u114A\u114F\u1155\u1159\u115E\u1164\u1170" +
		"\u1172\u1178\u117A\u1180\u1184\u1189\u1193\u1197\u11A1\u11A8\u11AF\u11B4" +
		"\u11B8\u11BE\u11C4\u11C6\u11CE\u11D4\u11D6\u11DE\u11E4\u11E6\u11F3\u11F9" +
		"\u11FB\u1203\u1209\u120B\u1213\u1219\u121F\u1221\u1225\u122B\u1231\u1237" +
		"\u123E\u1244\u1246\u124C\u124E\u1257\u1259\u125F\u1265\u126A\u1274\u127A" +
		"\u1280\u1282\u1288\u128D\u1295\u129B\u129F\u12A5\u12AB\u12AD\u12B2\u12B7" +
		"\u12BA\u12C0\u12C4\u12CA\u12CC\u12D2\u12D6\u12DC\u12E2\u12ED\u12F3\u12F9" +
		"\u12FB\u1308\u130D\u130F\u1315\u131B\u131F\u1325\u132B\u1331\u1333\u133F" +
		"\u1345\u134C\u134E\u1354\u1356\u135C\u1360\u1366\u136A\u136C\u1371\u1378" +
		"\u137E\u1380\u1386\u1388\u1390\u1396\u1398\u139E\u13A0\u13B8\u13BF\u13C6" +
		"\u13CB\u13D2\u13D8\u13DA\u13E0\u13E7\u13EE\u13F1\u13F7\u13FA\u1400\u1403" +
		"\u1409\u140C\u1412\u1415\u141B\u141E\u1424\u1427\u142D\u1432\u1439\u143C" +
		"\u1442\u1445\u144D\u144F\u1455\u145B\u145D\u1467\u1469\u146F\u1475\u1477" +
		"\u147D\u147F\u1485\u148B\u148D\u1491\u1496\u149A\u14A1\u14A8\u14AF\u14B5" +
		"\u14B8\u14BE\u14C4\u14C6\u14CC\u14CE\u14D0\u14D6\u14DC\u14E2\u14E4\u14EA" +
		"\u14EC\u14F0\u14F6\u14FC\u1500\u1508\u150E\u1514\u1516\u151E\u1524\u1526" +
		"\u152C\u152E\u1538\u153E\u1540\u1542\u1549\u154F\u1555\u155B\u155D\u1563" +
		"\u1565\u156D\u1573\u1575\u157B\u1581\u1587\u158F\u1595\u1597\u159D\u15A3" +
		"\u15A8\u15AA\u15AD\u15B3\u15B9\u15BB\u15C3\u15C9\u15CB\u15D1\u15D7\u15D9" +
		"\u15DF\u15EB\u15F1\u15F3\u15FB\u15FD\u1604\u1606\u160C\u1610\u1612\u1618" +
		"\u1620\u1627\u162E\u1633\u163A\u163F\u1646\u164B\u1652\u1657\u165E\u1661" +
		"\u1667\u166D\u1673\u1675\u167B\u167D\u1683\u1688\u168E\u1694\u1698\u16A2" +
		"\u16A8\u16AE\u16B0\u16B6\u16B8\u16C0\u16C6\u16C8\u16D0\u16D5\u16DF\u16E5" +
		"\u16E7\u16E9\u16F0\u16F4\u16FC\u1702\u1704\u170A\u170C\u1712\u1714\u171A" +
		"\u1720\u1728\u172E\u1732\u1738\u173E\u1743\u174A\u1755\u1757\u175D\u1766" +
		"\u176A\u1777\u177E\u1787\u1792\u1798\u179F\u17A6\u17AF\u17B8\u17BF\u17C8" +
		"\u17D0\u17D6\u17DD\u17E4\u17EB\u17EF\u17F4\u17FD\u1804\u180B\u1811\u1817" +
		"\u181E\u1825\u182E\u1832\u1837\u183B\u1840\u184A\u184E\u1853\u1857\u185C" +
		"\u1866\u1869\u186F\u1872\u1878\u187C\u1882\u1886\u188C\u1890\u1896\u189A" +
		"\u18A0\u18A4\u18AA\u18AE\u18B0\u18B6\u18BA\u18BF\u18C5\u18CB\u18CF\u18D6" +
		"\u18DA\u18DF\u18E5\u18EB\u18EF\u18F2\u18F8\u18FC\u1901\u1905\u190C\u1913" +
		"\u1917\u191C\u1920\u1922\u192A\u192F\u1934\u1939\u193D\u1943\u194C\u1953" +
		"\u195A\u195E\u1963";
	public static readonly _serializedATN: string = Utils.join(
		[
			cobolParser._serializedATNSegment0,
			cobolParser._serializedATNSegment1,
			cobolParser._serializedATNSegment2,
			cobolParser._serializedATNSegment3,
			cobolParser._serializedATNSegment4,
			cobolParser._serializedATNSegment5,
			cobolParser._serializedATNSegment6,
			cobolParser._serializedATNSegment7,
			cobolParser._serializedATNSegment8,
			cobolParser._serializedATNSegment9,
			cobolParser._serializedATNSegment10,
			cobolParser._serializedATNSegment11,
			cobolParser._serializedATNSegment12,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!cobolParser.__ATN) {
			cobolParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(cobolParser._serializedATN));
		}

		return cobolParser.__ATN;
	}

}

export class Cobol_sourceContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(cobolParser.EOF, 0); }
	public program(): ProgramContext[];
	public program(i: number): ProgramContext;
	public program(i?: number): ProgramContext | ProgramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProgramContext);
		} else {
			return this.getRuleContext(i, ProgramContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cobol_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCobol_source) {
			listener.enterCobol_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCobol_source) {
			listener.exitCobol_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCobol_source) {
			return visitor.visitCobol_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Figurative_constantContext extends ParserRuleContext {
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACE, 0); }
	public SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SPACES, 0); }
	public HIGH_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUE, 0); }
	public HIGH_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGH_VALUES, 0); }
	public LOW_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUE, 0); }
	public LOW_VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOW_VALUES, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.QUOTES, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALL, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_figurative_constant; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFigurative_constant) {
			listener.enterFigurative_constant(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFigurative_constant) {
			listener.exitFigurative_constant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFigurative_constant) {
			return visitor.visitFigurative_constant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeparatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SEMI_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEMI_, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSeparator) {
			listener.enterSeparator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSeparator) {
			listener.exitSeparator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSeparator) {
			return visitor.visitSeparator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_separatorContext extends ParserRuleContext {
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHITESPACE, 0); }
	public NEWLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEWLINE, 0); }
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_separator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_separator) {
			listener.enterArithmetic_separator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_separator) {
			listener.exitArithmetic_separator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_separator) {
			return visitor.visitArithmetic_separator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_commentContext extends ParserRuleContext {
	public START_SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_SLASH_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public START_STAR_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_STAR_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_comment; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_comment) {
			listener.enterLine_comment(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_comment) {
			listener.exitLine_comment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_comment) {
			return visitor.visitLine_comment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProgramContext extends ParserRuleContext {
	public identification_division(): Identification_divisionContext {
		return this.getRuleContext(0, Identification_divisionContext);
	}
	public environment_division(): Environment_divisionContext | undefined {
		return this.tryGetRuleContext(0, Environment_divisionContext);
	}
	public data_division(): Data_divisionContext | undefined {
		return this.tryGetRuleContext(0, Data_divisionContext);
	}
	public procedure_division(): Procedure_divisionContext | undefined {
		return this.tryGetRuleContext(0, Procedure_divisionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_divisionContext extends ParserRuleContext {
	public procedure_division_header(): Procedure_division_headerContext {
		return this.getRuleContext(0, Procedure_division_headerContext);
	}
	public declaratives(): DeclarativesContext | undefined {
		return this.tryGetRuleContext(0, DeclarativesContext);
	}
	public END_IN_A_AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_IN_A_AREA, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public program_name(): Program_nameContext | undefined {
		return this.tryGetRuleContext(0, Program_nameContext);
	}
	public procedure_test_line(): Procedure_test_lineContext[];
	public procedure_test_line(i: number): Procedure_test_lineContext;
	public procedure_test_line(i?: number): Procedure_test_lineContext | Procedure_test_lineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Procedure_test_lineContext);
		} else {
			return this.getRuleContext(i, Procedure_test_lineContext);
		}
	}
	public section(): SectionContext[];
	public section(i: number): SectionContext;
	public section(i?: number): SectionContext | SectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SectionContext);
		} else {
			return this.getRuleContext(i, SectionContext);
		}
	}
	public paragraph(): ParagraphContext[];
	public paragraph(i: number): ParagraphContext;
	public paragraph(i?: number): ParagraphContext | ParagraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParagraphContext);
		} else {
			return this.getRuleContext(i, ParagraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division) {
			listener.enterProcedure_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division) {
			listener.exitProcedure_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division) {
			return visitor.visitProcedure_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_division_headerContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode { return this.getToken(cobolParser.PROCEDURE, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public using(): UsingContext | undefined {
		return this.tryGetRuleContext(0, UsingContext);
	}
	public giving(): GivingContext | undefined {
		return this.tryGetRuleContext(0, GivingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_division_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_division_header) {
			listener.enterProcedure_division_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_division_header) {
			listener.exitProcedure_division_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_division_header) {
			return visitor.visitProcedure_division_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection) {
			listener.enterSection(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection) {
			listener.exitSection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection) {
			return visitor.visitSection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarativesContext extends ParserRuleContext {
	public DECLARATIVES_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES_IN_A_AREA, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public END_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.END_IN_A_AREA, 0); }
	public DECLARATIVES(): TerminalNode { return this.getToken(cobolParser.DECLARATIVES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public declaratives_section(): Declaratives_sectionContext[];
	public declaratives_section(i: number): Declaratives_sectionContext;
	public declaratives_section(i?: number): Declaratives_sectionContext | Declaratives_sectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declaratives_sectionContext);
		} else {
			return this.getRuleContext(i, Declaratives_sectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives) {
			listener.enterDeclaratives(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives) {
			listener.exitDeclaratives(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives) {
			return visitor.visitDeclaratives(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declaratives_sectionContext extends ParserRuleContext {
	public section_header(): Section_headerContext {
		return this.getRuleContext(0, Section_headerContext);
	}
	public use_statement(): Use_statementContext {
		return this.getRuleContext(0, Use_statementContext);
	}
	public declarative_paragraph(): Declarative_paragraphContext[];
	public declarative_paragraph(i: number): Declarative_paragraphContext;
	public declarative_paragraph(i?: number): Declarative_paragraphContext | Declarative_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declarative_paragraphContext);
		} else {
			return this.getRuleContext(i, Declarative_paragraphContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declaratives_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclaratives_section) {
			listener.enterDeclaratives_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclaratives_section) {
			listener.exitDeclaratives_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclaratives_section) {
			return visitor.visitDeclaratives_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declarative_paragraphContext extends ParserRuleContext {
	public paragraph(): ParagraphContext {
		return this.getRuleContext(0, ParagraphContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_declarative_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDeclarative_paragraph) {
			listener.enterDeclarative_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDeclarative_paragraph) {
			listener.exitDeclarative_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDeclarative_paragraph) {
			return visitor.visitDeclarative_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParagraphContext extends ParserRuleContext {
	public paragraph_name(): Paragraph_nameContext {
		return this.getRuleContext(0, Paragraph_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sentense(): SentenseContext[];
	public sentense(i: number): SentenseContext;
	public sentense(i?: number): SentenseContext | SentenseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SentenseContext);
		} else {
			return this.getRuleContext(i, SentenseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph) {
			listener.enterParagraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph) {
			listener.exitParagraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph) {
			return visitor.visitParagraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SentenseContext extends ParserRuleContext {
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sentense; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSentense) {
			listener.enterSentense(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSentense) {
			listener.exitSentense(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSentense) {
			return visitor.visitSentense(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_statementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(cobolParser.USE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AFTER, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROCEDURE, 0); }
	public use_on(): Use_onContext | undefined {
		return this.tryGetRuleContext(0, Use_onContext);
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BEFORE, 0); }
	public REPORTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTING, 0); }
	public group_data_name(): Group_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Group_data_nameContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCEPTION, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERROR, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_statement) {
			listener.enterUse_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_statement) {
			listener.exitUse_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_statement) {
			return visitor.visitUse_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_group_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGroup_data_name) {
			listener.enterGroup_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGroup_data_name) {
			listener.exitGroup_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGroup_data_name) {
			return visitor.visitGroup_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_onContext extends ParserRuleContext {
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OUTPUT, 0); }
	public I_O(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I_O, 0); }
	public EXTEND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTEND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_use_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUse_on) {
			listener.enterUse_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUse_on) {
			listener.exitUse_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUse_on) {
			return visitor.visitUse_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_headerContext extends ParserRuleContext {
	public section_name(): Section_nameContext {
		return this.getRuleContext(0, Section_nameContext);
	}
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public segment_number(): Segment_numberContext | undefined {
		return this.tryGetRuleContext(0, Segment_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_header; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_header) {
			listener.enterSection_header(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_header) {
			listener.exitSection_header(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_header) {
			return visitor.visitSection_header(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Paragraph_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_paragraph_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterParagraph_name) {
			listener.enterParagraph_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitParagraph_name) {
			listener.exitParagraph_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitParagraph_name) {
			return visitor.visitParagraph_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Section_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_section_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSection_name) {
			listener.enterSection_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSection_name) {
			listener.exitSection_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSection_name) {
			return visitor.visitSection_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsing) {
			listener.enterUsing(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsing) {
			listener.exitUsing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsing) {
			return visitor.visitUsing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GivingContext extends ParserRuleContext {
	public GIVING(): TerminalNode { return this.getToken(cobolParser.GIVING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_giving; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterGiving) {
			listener.enterGiving(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitGiving) {
			listener.exitGiving(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitGiving) {
			return visitor.visitGiving(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Procedure_test_lineContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Arithmetic_expressionContext);
	}
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public logic_expression(): Logic_expressionContext | undefined {
		return this.tryGetRuleContext(0, Logic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_procedure_test_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProcedure_test_line) {
			listener.enterProcedure_test_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProcedure_test_line) {
			listener.exitProcedure_test_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProcedure_test_line) {
			return visitor.visitProcedure_test_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public accept_statement(): Accept_statementContext {
		return this.getRuleContext(0, Accept_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_statementContext extends ParserRuleContext {
	public accept_form1(): Accept_form1Context | undefined {
		return this.tryGetRuleContext(0, Accept_form1Context);
	}
	public accept_form2(): Accept_form2Context | undefined {
		return this.tryGetRuleContext(0, Accept_form2Context);
	}
	public accept_form3(): Accept_form3Context | undefined {
		return this.tryGetRuleContext(0, Accept_form3Context);
	}
	public accept_form4(): Accept_form4Context | undefined {
		return this.tryGetRuleContext(0, Accept_form4Context);
	}
	public accept_form5(): Accept_form5Context | undefined {
		return this.tryGetRuleContext(0, Accept_form5Context);
	}
	public accept_form6(): Accept_form6Context | undefined {
		return this.tryGetRuleContext(0, Accept_form6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_statement; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_statement) {
			listener.enterAccept_statement(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_statement) {
			listener.exitAccept_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_statement) {
			return visitor.visitAccept_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exception_variantsContext extends ParserRuleContext {
	public on_exception(): On_exceptionContext[];
	public on_exception(i: number): On_exceptionContext;
	public on_exception(i?: number): On_exceptionContext | On_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(On_exceptionContext);
		} else {
			return this.getRuleContext(i, On_exceptionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception_variants) {
			listener.enterOn_exception_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception_variants) {
			listener.exitOn_exception_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception_variants) {
			return visitor.visitOn_exception_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_end_variantsContext extends ParserRuleContext {
	public at_end(): At_endContext[];
	public at_end(i: number): At_endContext;
	public at_end(i?: number): At_endContext | At_endContext[] {
		if (i === undefined) {
			return this.getRuleContexts(At_endContext);
		} else {
			return this.getRuleContext(i, At_endContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end_variants; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end_variants) {
			listener.enterAt_end_variants(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end_variants) {
			listener.exitAt_end_variants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end_variants) {
			return visitor.visitAt_end_variants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form6Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public accept6_item(): Accept6_itemContext {
		return this.getRuleContext(0, Accept6_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form6; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form6) {
			listener.enterAccept_form6(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form6) {
			listener.exitAccept_form6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form6) {
			return visitor.visitAccept_form6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept6_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept6_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept6_item) {
			listener.enterAccept6_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept6_item) {
			listener.exitAccept6_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept6_item) {
			return visitor.visitAccept6_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form1Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public input_source(): Input_sourceContext | undefined {
		return this.tryGetRuleContext(0, Input_sourceContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form1; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form1) {
			listener.enterAccept_form1(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form1) {
			listener.exitAccept_form1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form1) {
			return visitor.visitAccept_form1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form2Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public date_time(): Date_timeContext {
		return this.getRuleContext(0, Date_timeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form2; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form2) {
			listener.enterAccept_form2(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form2) {
			listener.exitAccept_form2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form2) {
			return visitor.visitAccept_form2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public dest_item(): Dest_itemContext {
		return this.getRuleContext(0, Dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_form3_clause(): Accept_form3_clauseContext[];
	public accept_form3_clause(i: number): Accept_form3_clauseContext;
	public accept_form3_clause(i?: number): Accept_form3_clauseContext | Accept_form3_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form3_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form3_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3) {
			listener.enterAccept_form3(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3) {
			listener.exitAccept_form3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3) {
			return visitor.visitAccept_form3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public KEY(): TerminalNode { return this.getToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext {
		return this.getRuleContext(0, Key_dest_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public accept_form4_clause(): Accept_form4_clauseContext[];
	public accept_form4_clause(i: number): Accept_form4_clauseContext;
	public accept_form4_clause(i?: number): Accept_form4_clauseContext | Accept_form4_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Accept_form4_clauseContext);
		} else {
			return this.getRuleContext(i, Accept_form4_clauseContext);
		}
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public at_end_variants(): At_end_variantsContext | undefined {
		return this.tryGetRuleContext(0, At_end_variantsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4) {
			listener.enterAccept_form4(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4) {
			listener.exitAccept_form4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4) {
			return visitor.visitAccept_form4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form5Context extends ParserRuleContext {
	public ACCEPT(): TerminalNode { return this.getToken(cobolParser.ACCEPT, 0); }
	public screen_name(): Screen_nameContext {
		return this.getRuleContext(0, Screen_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public accept_at(): Accept_atContext | undefined {
		return this.tryGetRuleContext(0, Accept_atContext);
	}
	public on_exception_variants(): On_exception_variantsContext | undefined {
		return this.tryGetRuleContext(0, On_exception_variantsContext);
	}
	public END_ACCEPT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END_ACCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form5; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form5) {
			listener.enterAccept_form5(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form5) {
			listener.exitAccept_form5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form5) {
			return visitor.visitAccept_form5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_atContext extends ParserRuleContext {
	public accept_at_line(): Accept_at_lineContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_lineContext);
	}
	public accept_at_column(): Accept_at_columnContext | undefined {
		return this.tryGetRuleContext(0, Accept_at_columnContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at) {
			listener.enterAccept_at(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at) {
			listener.exitAccept_at(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at) {
			return visitor.visitAccept_at(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_lineContext extends ParserRuleContext {
	public LINE(): TerminalNode { return this.getToken(cobolParser.LINE, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_line) {
			listener.enterAccept_at_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_line) {
			listener.exitAccept_at_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_line) {
			return visitor.visitAccept_at_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_at_columnContext extends ParserRuleContext {
	public COLUMN(): TerminalNode { return this.getToken(cobolParser.COLUMN, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_at_column; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_at_column) {
			listener.enterAccept_at_column(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_at_column) {
			listener.exitAccept_at_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_at_column) {
			return visitor.visitAccept_at_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form4_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public number_value(): Number_valueContext | undefined {
		return this.tryGetRuleContext(0, Number_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form4_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form4_clause) {
			listener.enterAccept_form4_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form4_clause) {
			listener.exitAccept_form4_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form4_clause) {
			return visitor.visitAccept_form4_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Accept_form3_clauseContext extends ParserRuleContext {
	public accept_form4_clause(): Accept_form4_clauseContext | undefined {
		return this.tryGetRuleContext(0, Accept_form4_clauseContext);
	}
	public UNDERLINED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINED, 0); }
	public BOLD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOLD, 0); }
	public BLINKING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINKING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROTECTED, 0); }
	public protected_value(): Protected_valueContext | undefined {
		return this.tryGetRuleContext(0, Protected_valueContext);
	}
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONVERSION, 0); }
	public REVERSED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSED, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public ECHO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ECHO, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFAULT, 0); }
	public def_value(): Def_valueContext | undefined {
		return this.tryGetRuleContext(0, Def_valueContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public key_dest_item(): Key_dest_itemContext | undefined {
		return this.tryGetRuleContext(0, Key_dest_itemContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_accept_form3_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccept_form3_clause) {
			listener.enterAccept_form3_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccept_form3_clause) {
			listener.exitAccept_form3_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccept_form3_clause) {
			return visitor.visitAccept_form3_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_dest_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_dest_item) {
			listener.enterKey_dest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_dest_item) {
			listener.exitKey_dest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_dest_item) {
			return visitor.visitKey_dest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_valueContext extends ParserRuleContext {
	public figurative_constant(): Figurative_constantContext | undefined {
		return this.tryGetRuleContext(0, Figurative_constantContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURRENT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_def_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDef_value) {
			listener.enterDef_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDef_value) {
			listener.exitDef_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDef_value) {
			return visitor.visitDef_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Protected_valueContext extends ParserRuleContext {
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public prot_size_value(): Prot_size_valueContext | undefined {
		return this.tryGetRuleContext(0, Prot_size_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AUTOTERMINATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOTERMINATE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NO, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public EDITING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EDITING, 0); }
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public prot_fill_lit(): Prot_fill_litContext | undefined {
		return this.tryGetRuleContext(0, Prot_fill_litContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_protected_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProtected_value) {
			listener.enterProtected_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProtected_value) {
			listener.exitProtected_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProtected_value) {
			return visitor.visitProtected_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_fill_litContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_fill_lit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_fill_lit) {
			listener.enterProt_fill_lit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_fill_lit) {
			listener.exitProt_fill_lit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_fill_lit) {
			return visitor.visitProt_fill_lit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prot_size_valueContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_prot_size_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProt_size_value) {
			listener.enterProt_size_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProt_size_value) {
			listener.exitProt_size_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProt_size_value) {
			return visitor.visitProt_size_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Number_valueContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_number_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNumber_value) {
			listener.enterNumber_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNumber_value) {
			listener.exitNumber_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNumber_value) {
			return visitor.visitNumber_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_timeContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DATE, 0); }
	public YYYYMMDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYMMDD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY, 0); }
	public YYYYDDD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.YYYYDDD, 0); }
	public DAY_OF_WEEK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DAY_OF_WEEK, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TIME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_time; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_time) {
			listener.enterDate_time(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_time) {
			listener.exitDate_time(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_time) {
			return visitor.visitDate_time(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dest_itemContext extends ParserRuleContext {
	public identifier_lvalue(): Identifier_lvalueContext {
		return this.getRuleContext(0, Identifier_lvalueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_dest_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDest_item) {
			listener.enterDest_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDest_item) {
			listener.exitDest_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDest_item) {
			return visitor.visitDest_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_sourceContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_source; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_source) {
			listener.enterInput_source(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_source) {
			listener.exitInput_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_source) {
			return visitor.visitInput_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class At_endContext extends ParserRuleContext {
	public END(): TerminalNode { return this.getToken(cobolParser.END, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AT, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_at_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAt_end) {
			listener.enterAt_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAt_end) {
			listener.exitAt_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAt_end) {
			return visitor.visitAt_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class On_exceptionContext extends ParserRuleContext {
	public EXCEPTION(): TerminalNode { return this.getToken(cobolParser.EXCEPTION, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_on_exception; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOn_exception) {
			listener.enterOn_exception(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOn_exception) {
			listener.exitOn_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOn_exception) {
			return visitor.visitOn_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_divisionContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_section(): File_sectionContext | undefined {
		return this.tryGetRuleContext(0, File_sectionContext);
	}
	public working_storage_section(): Working_storage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Working_storage_sectionContext);
	}
	public linkage_section(): Linkage_sectionContext | undefined {
		return this.tryGetRuleContext(0, Linkage_sectionContext);
	}
	public report_section(): Report_sectionContext | undefined {
		return this.tryGetRuleContext(0, Report_sectionContext);
	}
	public screen_section(): Screen_sectionContext | undefined {
		return this.tryGetRuleContext(0, Screen_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_division) {
			listener.enterData_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_division) {
			listener.exitData_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_division) {
			return visitor.visitData_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_sectionContext extends ParserRuleContext {
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_description_entry(): File_description_entryContext[];
	public file_description_entry(i: number): File_description_entryContext;
	public file_description_entry(i?: number): File_description_entryContext | File_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_description_entryContext);
		} else {
			return this.getRuleContext(i, File_description_entryContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public sort_merge_file_description_entry(): Sort_merge_file_description_entryContext[];
	public sort_merge_file_description_entry(i: number): Sort_merge_file_description_entryContext;
	public sort_merge_file_description_entry(i?: number): Sort_merge_file_description_entryContext | Sort_merge_file_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sort_merge_file_description_entryContext);
		} else {
			return this.getRuleContext(i, Sort_merge_file_description_entryContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_section) {
			listener.enterFile_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_section) {
			listener.exitFile_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_section) {
			return visitor.visitFile_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Working_storage_sectionContext extends ParserRuleContext {
	public WORKING_STORAGE(): TerminalNode { return this.getToken(cobolParser.WORKING_STORAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_working_storage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWorking_storage_section) {
			listener.enterWorking_storage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWorking_storage_section) {
			listener.exitWorking_storage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWorking_storage_section) {
			return visitor.visitWorking_storage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Linkage_sectionContext extends ParserRuleContext {
	public LINKAGE(): TerminalNode { return this.getToken(cobolParser.LINKAGE, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public record_description_entry(): Record_description_entryContext[];
	public record_description_entry(i: number): Record_description_entryContext;
	public record_description_entry(i?: number): Record_description_entryContext | Record_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_description_entryContext);
		} else {
			return this.getRuleContext(i, Record_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linkage_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinkage_section) {
			listener.enterLinkage_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinkage_section) {
			listener.exitLinkage_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinkage_section) {
			return visitor.visitLinkage_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_sectionContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(cobolParser.REPORT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public report_description_entry(): Report_description_entryContext[];
	public report_description_entry(i: number): Report_description_entryContext;
	public report_description_entry(i?: number): Report_description_entryContext | Report_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_description_entryContext);
		}
	}
	public report_group_description_entry(): Report_group_description_entryContext[];
	public report_group_description_entry(i: number): Report_group_description_entryContext;
	public report_group_description_entry(i?: number): Report_group_description_entryContext | Report_group_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_description_entryContext);
		} else {
			return this.getRuleContext(i, Report_group_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_section) {
			listener.enterReport_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_section) {
			listener.exitReport_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_section) {
			return visitor.visitReport_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_sectionContext extends ParserRuleContext {
	public SCREEN(): TerminalNode { return this.getToken(cobolParser.SCREEN, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public screen_description_entry(): Screen_description_entryContext[];
	public screen_description_entry(i: number): Screen_description_entryContext;
	public screen_description_entry(i?: number): Screen_description_entryContext | Screen_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_entryContext);
		} else {
			return this.getRuleContext(i, Screen_description_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_section) {
			listener.enterScreen_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_section) {
			listener.exitScreen_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_section) {
			return visitor.visitScreen_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_description_entryContext extends ParserRuleContext {
	public FD(): TerminalNode { return this.getToken(cobolParser.FD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public fd_clause(): Fd_clauseContext[];
	public fd_clause(i: number): Fd_clauseContext;
	public fd_clause(i?: number): Fd_clauseContext | Fd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fd_clauseContext);
		} else {
			return this.getRuleContext(i, Fd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_description_entry) {
			listener.enterFile_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_description_entry) {
			listener.exitFile_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_description_entry) {
			return visitor.visitFile_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_merge_file_description_entryContext extends ParserRuleContext {
	public SD(): TerminalNode { return this.getToken(cobolParser.SD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public sd_clause(): Sd_clauseContext[];
	public sd_clause(i: number): Sd_clauseContext;
	public sd_clause(i?: number): Sd_clauseContext | Sd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sd_clauseContext);
		} else {
			return this.getRuleContext(i, Sd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sort_merge_file_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSort_merge_file_description_entry) {
			listener.enterSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSort_merge_file_description_entry) {
			listener.exitSort_merge_file_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSort_merge_file_description_entry) {
			return visitor.visitSort_merge_file_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_description_entryContext extends ParserRuleContext {
	public RD(): TerminalNode { return this.getToken(cobolParser.RD, 0); }
	public report_name(): Report_nameContext {
		return this.getRuleContext(0, Report_nameContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rd_clause(): Rd_clauseContext[];
	public rd_clause(i: number): Rd_clauseContext;
	public rd_clause(i?: number): Rd_clauseContext | Rd_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rd_clauseContext);
		} else {
			return this.getRuleContext(i, Rd_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_description_entry) {
			listener.enterReport_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_description_entry) {
			listener.exitReport_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_description_entry) {
			return visitor.visitReport_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fd_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public value_of_id(): Value_of_idContext | undefined {
		return this.tryGetRuleContext(0, Value_of_idContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	public linage(): LinageContext | undefined {
		return this.tryGetRuleContext(0, LinageContext);
	}
	public report_is(): Report_isContext | undefined {
		return this.tryGetRuleContext(0, Report_isContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext | undefined {
		return this.tryGetRuleContext(0, Record_keyContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_fd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFd_clause) {
			listener.enterFd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFd_clause) {
			listener.exitFd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFd_clause) {
			return visitor.visitFd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_description_entryContext extends ParserRuleContext {
	public data_description_entry(): Data_description_entryContext[];
	public data_description_entry(i: number): Data_description_entryContext;
	public data_description_entry(i?: number): Data_description_entryContext | Data_description_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_entryContext);
		} else {
			return this.getRuleContext(i, Data_description_entryContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_description_entry) {
			listener.enterRecord_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_description_entry) {
			listener.exitRecord_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_description_entry) {
			return visitor.visitRecord_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public REDEFINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REDEFINES, 0); }
	public other_data_item(): Other_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Other_data_itemContext);
	}
	public data_description_clause(): Data_description_clauseContext[];
	public data_description_clause(i: number): Data_description_clauseContext;
	public data_description_clause(i?: number): Data_description_clauseContext | Data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Data_description_clauseContext);
		}
	}
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_entry) {
			listener.enterData_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_entry) {
			listener.exitData_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_entry) {
			return visitor.visitData_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Level_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_level_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLevel_number) {
			listener.enterLevel_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLevel_number) {
			listener.exitLevel_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLevel_number) {
			return visitor.visitLevel_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_description_clauseContext extends ParserRuleContext {
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public usage(): UsageContext | undefined {
		return this.tryGetRuleContext(0, UsageContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public occurs(): OccursContext | undefined {
		return this.tryGetRuleContext(0, OccursContext);
	}
	public SYNCHRONIZED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNCHRONIZED, 0); }
	public SYNC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYNC, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public value_is(): Value_isContext | undefined {
		return this.tryGetRuleContext(0, Value_isContext);
	}
	public renames(): RenamesContext | undefined {
		return this.tryGetRuleContext(0, RenamesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_description_clause) {
			listener.enterData_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_description_clause) {
			listener.exitData_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_description_clause) {
			return visitor.visitData_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamesContext extends ParserRuleContext {
	public RENAMES(): TerminalNode { return this.getToken(cobolParser.RENAMES, 0); }
	public rename_start(): Rename_startContext {
		return this.getRuleContext(0, Rename_startContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public rename_end(): Rename_endContext | undefined {
		return this.tryGetRuleContext(0, Rename_endContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_renames; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRenames) {
			listener.enterRenames(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRenames) {
			listener.exitRenames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRenames) {
			return visitor.visitRenames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_startContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_start; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_start) {
			listener.enterRename_start(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_start) {
			listener.exitRename_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_start) {
			return visitor.visitRename_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rename_endContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rename_end; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRename_end) {
			listener.enterRename_end(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRename_end) {
			listener.exitRename_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRename_end) {
			return visitor.visitRename_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_isContext extends ParserRuleContext {
	public value_is_definition(): Value_is_definitionContext[];
	public value_is_definition(i: number): Value_is_definitionContext;
	public value_is_definition(i?: number): Value_is_definitionContext | Value_is_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Value_is_definitionContext);
		} else {
			return this.getRuleContext(i, Value_is_definitionContext);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is) {
			listener.enterValue_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is) {
			listener.exitValue_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is) {
			return visitor.visitValue_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definitionContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public value_is_definition_thru(): Value_is_definition_thruContext | undefined {
		return this.tryGetRuleContext(0, Value_is_definition_thruContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition) {
			listener.enterValue_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition) {
			listener.exitValue_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition) {
			return visitor.visitValue_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_partContext extends ParserRuleContext {
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public REFERENCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REFERENCE, 0); }
	public ref_data_name(): Ref_data_nameContext | undefined {
		return this.tryGetRuleContext(0, Ref_data_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public external_name(): External_nameContext | undefined {
		return this.tryGetRuleContext(0, External_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_part) {
			listener.enterValue_is_definition_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_part) {
			listener.exitValue_is_definition_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_part) {
			return visitor.visitValue_is_definition_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_definition_thruContext extends ParserRuleContext {
	public value_is_definition_part(): Value_is_definition_partContext {
		return this.getRuleContext(0, Value_is_definition_partContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_definition_thru; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_definition_thru) {
			listener.enterValue_is_definition_thru(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_definition_thru) {
			listener.exitValue_is_definition_thru(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_definition_thru) {
			return visitor.visitValue_is_definition_thru(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class External_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_external_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExternal_name) {
			listener.enterExternal_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExternal_name) {
			listener.exitExternal_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExternal_name) {
			return visitor.visitExternal_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ref_data_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ref_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRef_data_name) {
			listener.enterRef_data_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRef_data_name) {
			listener.exitRef_data_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRef_data_name) {
			return visitor.visitRef_data_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_is_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_is_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_is_literal) {
			listener.enterValue_is_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_is_literal) {
			listener.exitValue_is_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_is_literal) {
			return visitor.visitValue_is_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OccursContext extends ParserRuleContext {
	public OCCURS(): TerminalNode { return this.getToken(cobolParser.OCCURS, 0); }
	public times_definition(): Times_definitionContext {
		return this.getRuleContext(0, Times_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public key_is(): Key_isContext[];
	public key_is(i: number): Key_isContext;
	public key_is(i?: number): Key_isContext | Key_isContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_isContext);
		} else {
			return this.getRuleContext(i, Key_isContext);
		}
	}
	public indexed_by(): Indexed_byContext | undefined {
		return this.tryGetRuleContext(0, Indexed_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_occurs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOccurs) {
			listener.enterOccurs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOccurs) {
			listener.exitOccurs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOccurs) {
			return visitor.visitOccurs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indexed_byContext extends ParserRuleContext {
	public INDEXED(): TerminalNode { return this.getToken(cobolParser.INDEXED, 0); }
	public ind_name(): Ind_nameContext[];
	public ind_name(i: number): Ind_nameContext;
	public ind_name(i?: number): Ind_nameContext | Ind_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ind_nameContext);
		} else {
			return this.getRuleContext(i, Ind_nameContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_indexed_by; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIndexed_by) {
			listener.enterIndexed_by(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIndexed_by) {
			listener.exitIndexed_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIndexed_by) {
			return visitor.visitIndexed_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ind_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ind_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInd_name) {
			listener.enterInd_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInd_name) {
			listener.exitInd_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInd_name) {
			return visitor.visitInd_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_isContext extends ParserRuleContext {
	public key_name(): Key_nameContext[];
	public key_name(i: number): Key_nameContext;
	public key_name(i?: number): Key_nameContext | Key_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Key_nameContext);
		} else {
			return this.getRuleContext(i, Key_nameContext);
		}
	}
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_is) {
			listener.enterKey_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_is) {
			listener.exitKey_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_is) {
			return visitor.visitKey_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_key_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterKey_name) {
			listener.enterKey_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitKey_name) {
			listener.exitKey_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitKey_name) {
			return visitor.visitKey_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Times_definitionContext extends ParserRuleContext {
	public table_size(): Table_sizeContext | undefined {
		return this.tryGetRuleContext(0, Table_sizeContext);
	}
	public TIMES(): TerminalNode { return this.getToken(cobolParser.TIMES, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public min_times(): Min_timesContext | undefined {
		return this.tryGetRuleContext(0, Min_timesContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public max_times(): Max_timesContext | undefined {
		return this.tryGetRuleContext(0, Max_timesContext);
	}
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_times_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTimes_definition) {
			listener.enterTimes_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTimes_definition) {
			listener.exitTimes_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTimes_definition) {
			return visitor.visitTimes_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_table_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTable_size) {
			listener.enterTable_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTable_size) {
			listener.exitTable_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTable_size) {
			return visitor.visitTable_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Min_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_min_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMin_times) {
			listener.enterMin_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMin_times) {
			listener.exitMin_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMin_times) {
			return visitor.visitMin_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Max_timesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_max_times; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMax_times) {
			listener.enterMax_times(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMax_times) {
			listener.exitMax_times(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMax_times) {
			return visitor.visitMax_times(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_description_entryContext extends ParserRuleContext {
	public report_group_data_description(): Report_group_data_descriptionContext[];
	public report_group_data_description(i: number): Report_group_data_descriptionContext;
	public report_group_data_description(i?: number): Report_group_data_descriptionContext | Report_group_data_descriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_descriptionContext);
		} else {
			return this.getRuleContext(i, Report_group_data_descriptionContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_description_entry) {
			listener.enterReport_group_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_description_entry) {
			listener.exitReport_group_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_description_entry) {
			return visitor.visitReport_group_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_descriptionContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public data_name(): Data_nameContext | undefined {
		return this.tryGetRuleContext(0, Data_nameContext);
	}
	public report_group_data_description_clause(): Report_group_data_description_clauseContext[];
	public report_group_data_description_clause(i: number): Report_group_data_description_clauseContext;
	public report_group_data_description_clause(i?: number): Report_group_data_description_clauseContext | Report_group_data_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_group_data_description_clauseContext);
		} else {
			return this.getRuleContext(i, Report_group_data_description_clauseContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description) {
			listener.enterReport_group_data_description(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description) {
			listener.exitReport_group_data_description(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description) {
			return visitor.visitReport_group_data_description(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_group_data_description_clauseContext extends ParserRuleContext {
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public line_num_definition(): Line_num_definitionContext | undefined {
		return this.tryGetRuleContext(0, Line_num_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GROUP, 0); }
	public next_group_definition(): Next_group_definitionContext | undefined {
		return this.tryGetRuleContext(0, Next_group_definitionContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TYPE, 0); }
	public type_is_definition(): Type_is_definitionContext | undefined {
		return this.tryGetRuleContext(0, Type_is_definitionContext);
	}
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public column_number(): Column_numberContext | undefined {
		return this.tryGetRuleContext(0, Column_numberContext);
	}
	public INDICATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDICATE, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SOURCE, 0); }
	public source_name(): Source_nameContext | undefined {
		return this.tryGetRuleContext(0, Source_nameContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public value_is_literal(): Value_is_literalContext | undefined {
		return this.tryGetRuleContext(0, Value_is_literalContext);
	}
	public sum(): SumContext | undefined {
		return this.tryGetRuleContext(0, SumContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_group_data_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_group_data_description_clause) {
			listener.enterReport_group_data_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_group_data_description_clause) {
			listener.exitReport_group_data_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_group_data_description_clause) {
			return visitor.visitReport_group_data_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_isContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TRAILING, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public SEPARATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEPARATE, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_is) {
			listener.enterSign_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_is) {
			listener.exitSign_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_is) {
			return visitor.visitSign_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SumContext extends ParserRuleContext {
	public SUM(): TerminalNode[];
	public SUM(i: number): TerminalNode;
	public SUM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.SUM);
		} else {
			return this.getToken(cobolParser.SUM, i);
		}
	}
	public sum_name(): Sum_nameContext[];
	public sum_name(i: number): Sum_nameContext;
	public sum_name(i?: number): Sum_nameContext | Sum_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Sum_nameContext);
		} else {
			return this.getRuleContext(i, Sum_nameContext);
		}
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RESET, 0); }
	public control_foot_name(): Control_foot_nameContext | undefined {
		return this.tryGetRuleContext(0, Control_foot_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public UPON(): TerminalNode[];
	public UPON(i: number): TerminalNode;
	public UPON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.UPON);
		} else {
			return this.getToken(cobolParser.UPON, i);
		}
	}
	public detail_report_group_name(): Detail_report_group_nameContext[];
	public detail_report_group_name(i: number): Detail_report_group_nameContext;
	public detail_report_group_name(i?: number): Detail_report_group_nameContext | Detail_report_group_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Detail_report_group_nameContext);
		} else {
			return this.getRuleContext(i, Detail_report_group_nameContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum) {
			listener.enterSum(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum) {
			listener.exitSum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum) {
			return visitor.visitSum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_foot_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_foot_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_foot_name) {
			listener.enterControl_foot_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_foot_name) {
			listener.exitControl_foot_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_foot_name) {
			return visitor.visitControl_foot_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Detail_report_group_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_detail_report_group_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDetail_report_group_name) {
			listener.enterDetail_report_group_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDetail_report_group_name) {
			listener.exitDetail_report_group_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDetail_report_group_name) {
			return visitor.visitDetail_report_group_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sum_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sum_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSum_name) {
			listener.enterSum_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSum_name) {
			listener.exitSum_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSum_name) {
			return visitor.visitSum_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_name) {
			listener.enterSource_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_name) {
			listener.exitSource_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_name) {
			return visitor.visitSource_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_column_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColumn_number) {
			listener.enterColumn_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColumn_number) {
			listener.exitColumn_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColumn_number) {
			return visitor.visitColumn_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_is_definitionContext extends ParserRuleContext {
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public RH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RH, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public PH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PH, 0); }
	public type_control_name(): Type_control_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_control_nameContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CH, 0); }
	public DETAIL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DETAIL, 0); }
	public DE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DE, 0); }
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public CF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CF, 0); }
	public PF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PF, 0); }
	public RF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_is_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_is_definition) {
			listener.enterType_is_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_is_definition) {
			listener.exitType_is_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_is_definition) {
			return visitor.visitType_is_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_control_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_type_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterType_control_name) {
			listener.enterType_control_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitType_control_name) {
			listener.exitType_control_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitType_control_name) {
			return visitor.visitType_control_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Next_group_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext | undefined {
		return this.tryGetRuleContext(0, Line_numContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_next_group_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNext_group_definition) {
			listener.enterNext_group_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNext_group_definition) {
			listener.exitNext_group_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNext_group_definition) {
			return visitor.visitNext_group_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_num_definitionContext extends ParserRuleContext {
	public line_num(): Line_numContext {
		return this.getRuleContext(0, Line_numContext);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEXT, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num_definition) {
			listener.enterLine_num_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num_definition) {
			listener.exitLine_num_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num_definition) {
			return visitor.visitLine_num_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Line_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_line_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLine_num) {
			listener.enterLine_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLine_num) {
			listener.exitLine_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLine_num) {
			return visitor.visitLine_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rd_clauseContext extends ParserRuleContext {
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GLOBAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CODE, 0); }
	public report_code(): Report_codeContext | undefined {
		return this.tryGetRuleContext(0, Report_codeContext);
	}
	public CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROL, 0); }
	public CONTROLS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTROLS, 0); }
	public control_name(): Control_nameContext[];
	public control_name(i: number): Control_nameContext;
	public control_name(i?: number): Control_nameContext | Control_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Control_nameContext);
		} else {
			return this.getRuleContext(i, Control_nameContext);
		}
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FINAL, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAGE, 0); }
	public page_size_rd(): Page_size_rdContext | undefined {
		return this.tryGetRuleContext(0, Page_size_rdContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMIT, 0); }
	public LIMITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LIMITS, 0); }
	public HEADING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HEADING, 0); }
	public heading_line(): Heading_lineContext | undefined {
		return this.tryGetRuleContext(0, Heading_lineContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FIRST, 0); }
	public DETAIL(): TerminalNode[];
	public DETAIL(i: number): TerminalNode;
	public DETAIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DETAIL);
		} else {
			return this.getToken(cobolParser.DETAIL, i);
		}
	}
	public first_detail_line(): First_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, First_detail_lineContext);
	}
	public LAST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LAST, 0); }
	public last_detail_line(): Last_detail_lineContext | undefined {
		return this.tryGetRuleContext(0, Last_detail_lineContext);
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line_rd(): Footing_line_rdContext | undefined {
		return this.tryGetRuleContext(0, Footing_line_rdContext);
	}
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRd_clause) {
			listener.enterRd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRd_clause) {
			listener.exitRd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRd_clause) {
			return visitor.visitRd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_line_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line_rd) {
			listener.enterFooting_line_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line_rd) {
			listener.exitFooting_line_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line_rd) {
			return visitor.visitFooting_line_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_detail_line) {
			listener.enterLast_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_detail_line) {
			listener.exitLast_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_detail_line) {
			return visitor.visitLast_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_detail_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_detail_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_detail_line) {
			listener.enterFirst_detail_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_detail_line) {
			listener.exitFirst_detail_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_detail_line) {
			return visitor.visitFirst_detail_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Heading_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_heading_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterHeading_line) {
			listener.enterHeading_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitHeading_line) {
			listener.exitHeading_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitHeading_line) {
			return visitor.visitHeading_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_size_rdContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size_rd; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size_rd) {
			listener.enterPage_size_rd(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size_rd) {
			listener.exitPage_size_rd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size_rd) {
			return visitor.visitPage_size_rd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Control_nameContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_control_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterControl_name) {
			listener.enterControl_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitControl_name) {
			listener.exitControl_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitControl_name) {
			return visitor.visitControl_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_codeContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_code; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_code) {
			listener.enterReport_code(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_code) {
			listener.exitReport_code(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_code) {
			return visitor.visitReport_code(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UsageContext extends ParserRuleContext {
	public usage_definition(): Usage_definitionContext {
		return this.getRuleContext(0, Usage_definitionContext);
	}
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage) {
			listener.enterUsage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage) {
			listener.exitUsage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage) {
			return visitor.visitUsage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Usage_definitionContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY, 0); }
	public BINARY_CHAR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_CHAR, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNSIGNED, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public BINARY_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_SHORT, 0); }
	public BINARY_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_LONG, 0); }
	public BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BINARY_DOUBLE, 0); }
	public COMPUTATIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL, 0); }
	public COMPUTATIONAL_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_1, 0); }
	public COMPUTATIONAL_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_2, 0); }
	public COMPUTATIONAL_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_3, 0); }
	public COMPUTATIONAL_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_4, 0); }
	public COMPUTATIONAL_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_5, 0); }
	public COMPUTATIONAL_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMPUTATIONAL_X, 0); }
	public COMP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP, 0); }
	public COMP_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_1, 0); }
	public COMP_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_2, 0); }
	public COMP_3(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_3, 0); }
	public COMP_4(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_4, 0); }
	public COMP_5(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_5, 0); }
	public COMP_X(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMP_X, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public FLOAT_SHORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_SHORT, 0); }
	public FLOAT_LONG(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_LONG, 0); }
	public FLOAT_EXTENDED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FLOAT_EXTENDED, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEX, 0); }
	public PACKED_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PACKED_DECIMAL, 0); }
	public POINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER, 0); }
	public POINTER_64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POINTER_64, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_usage_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUsage_definition) {
			listener.enterUsage_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUsage_definition) {
			listener.exitUsage_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUsage_definition) {
			return visitor.visitUsage_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PictureContext extends ParserRuleContext {
	public character_string(): Character_stringContext {
		return this.getRuleContext(0, Character_stringContext);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public PIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_picture; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPicture) {
			listener.enterPicture(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPicture) {
			listener.exitPicture(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPicture) {
			return visitor.visitPicture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_stringContext extends ParserRuleContext {
	public char_str_part(): Char_str_partContext[];
	public char_str_part(i: number): Char_str_partContext;
	public char_str_part(i?: number): Char_str_partContext | Char_str_partContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_str_partContext);
		} else {
			return this.getRuleContext(i, Char_str_partContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_character_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCharacter_string) {
			listener.enterCharacter_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCharacter_string) {
			listener.exitCharacter_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCharacter_string) {
			return visitor.visitCharacter_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_str_partContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public DOT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DOT_, 0); }
	public COMMA_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA_, 0); }
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_str_part; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_str_part) {
			listener.enterChar_str_part(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_str_part) {
			listener.exitChar_str_part(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_str_part) {
			return visitor.visitChar_str_part(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Other_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_other_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOther_data_item) {
			listener.enterOther_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOther_data_item) {
			listener.exitOther_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOther_data_item) {
			return visitor.visitOther_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_name) {
			listener.enterData_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_name) {
			listener.exitData_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_name) {
			return visitor.visitData_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sd_clauseContext extends ParserRuleContext {
	public record(): RecordContext | undefined {
		return this.tryGetRuleContext(0, RecordContext);
	}
	public data_rec(): Data_recContext | undefined {
		return this.tryGetRuleContext(0, Data_recContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sd_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSd_clause) {
			listener.enterSd_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSd_clause) {
			listener.exitSd_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSd_clause) {
			return visitor.visitSd_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_isContext extends ParserRuleContext {
	public report_name(): Report_nameContext[];
	public report_name(i: number): Report_nameContext;
	public report_name(i?: number): Report_nameContext | Report_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Report_nameContext);
		} else {
			return this.getRuleContext(i, Report_nameContext);
		}
	}
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORT, 0); }
	public REPORTS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REPORTS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_is; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_is) {
			listener.enterReport_is(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_is) {
			listener.exitReport_is(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_is) {
			return visitor.visitReport_is(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Report_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_report_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReport_name) {
			listener.enterReport_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReport_name) {
			listener.exitReport_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReport_name) {
			return visitor.visitReport_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LinageContext extends ParserRuleContext {
	public LINAGE(): TerminalNode { return this.getToken(cobolParser.LINAGE, 0); }
	public page_size(): Page_sizeContext {
		return this.getRuleContext(0, Page_sizeContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.LINES);
		} else {
			return this.getToken(cobolParser.LINES, i);
		}
	}
	public FOOTING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOOTING, 0); }
	public footing_line(): Footing_lineContext | undefined {
		return this.tryGetRuleContext(0, Footing_lineContext);
	}
	public TOP(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TOP, 0); }
	public top_lines(): Top_linesContext | undefined {
		return this.tryGetRuleContext(0, Top_linesContext);
	}
	public BOTTOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BOTTOM, 0); }
	public bottom_lines(): Bottom_linesContext | undefined {
		return this.tryGetRuleContext(0, Bottom_linesContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.AT);
		} else {
			return this.getToken(cobolParser.AT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_linage; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLinage) {
			listener.enterLinage(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLinage) {
			listener.exitLinage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLinage) {
			return visitor.visitLinage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bottom_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_bottom_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBottom_lines) {
			listener.enterBottom_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBottom_lines) {
			listener.exitBottom_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBottom_lines) {
			return visitor.visitBottom_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_linesContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_lines; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_lines) {
			listener.enterTop_lines(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_lines) {
			listener.exitTop_lines(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_lines) {
			return visitor.visitTop_lines(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Footing_lineContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_footing_line; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFooting_line) {
			listener.enterFooting_line(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFooting_line) {
			listener.exitFooting_line(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFooting_line) {
			return visitor.visitFooting_line(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Page_sizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_page_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPage_size) {
			listener.enterPage_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPage_size) {
			listener.exitPage_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPage_size) {
			return visitor.visitPage_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_recContext extends ParserRuleContext {
	public DATA(): TerminalNode { return this.getToken(cobolParser.DATA, 0); }
	public rec_name(): Rec_nameContext[];
	public rec_name(i: number): Rec_nameContext;
	public rec_name(i?: number): Rec_nameContext | Rec_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rec_nameContext);
		} else {
			return this.getRuleContext(i, Rec_nameContext);
		}
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_data_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterData_rec) {
			listener.enterData_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitData_rec) {
			listener.exitData_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitData_rec) {
			return visitor.visitData_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_name) {
			listener.enterRec_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_name) {
			listener.exitRec_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_name) {
			return visitor.visitRec_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_idContext extends ParserRuleContext {
	public VALUE(): TerminalNode { return this.getToken(cobolParser.VALUE, 0); }
	public OF(): TerminalNode { return this.getToken(cobolParser.OF, 0); }
	public value_of_id_definition(): Value_of_id_definitionContext {
		return this.getRuleContext(0, Value_of_id_definitionContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ID, 0); }
	public FILE_ID(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE_ID, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id) {
			listener.enterValue_of_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id) {
			listener.exitValue_of_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id) {
			return visitor.visitValue_of_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Value_of_id_definitionContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_value_of_id_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterValue_of_id_definition) {
			listener.enterValue_of_id_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitValue_of_id_definition) {
			listener.exitValue_of_id_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitValue_of_id_definition) {
			return visitor.visitValue_of_id_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public LABEL(): TerminalNode { return this.getToken(cobolParser.LABEL, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public OMITTED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OMITTED, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_label; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_definition(): Record_definitionContext {
		return this.getRuleContext(0, Record_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord) {
			listener.enterRecord(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord) {
			listener.exitRecord(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord) {
			return visitor.visitRecord(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_definitionContext extends ParserRuleContext {
	public longest_rec(): Longest_recContext | undefined {
		return this.tryGetRuleContext(0, Longest_recContext);
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public shortest_rec(): Shortest_recContext | undefined {
		return this.tryGetRuleContext(0, Shortest_recContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VARYING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IN, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public DEPENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEPENDING, 0); }
	public depending_item(): Depending_itemContext | undefined {
		return this.tryGetRuleContext(0, Depending_itemContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FROM, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_definition) {
			listener.enterRecord_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_definition) {
			listener.exitRecord_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_definition) {
			return visitor.visitRecord_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Depending_itemContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_depending_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDepending_item) {
			listener.enterDepending_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDepending_item) {
			listener.exitDepending_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDepending_item) {
			return visitor.visitDepending_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Shortest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_shortest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterShortest_rec) {
			listener.enterShortest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitShortest_rec) {
			listener.exitShortest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitShortest_rec) {
			return visitor.visitShortest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Longest_recContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_longest_rec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLongest_rec) {
			listener.enterLongest_rec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLongest_rec) {
			listener.exitLongest_rec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLongest_rec) {
			return visitor.visitLongest_rec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_entryContext extends ParserRuleContext {
	public level_number(): Level_numberContext {
		return this.getRuleContext(0, Level_numberContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public screen_description_clause(): Screen_description_clauseContext[];
	public screen_description_clause(i: number): Screen_description_clauseContext;
	public screen_description_clause(i?: number): Screen_description_clauseContext | Screen_description_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Screen_description_clauseContext);
		} else {
			return this.getRuleContext(i, Screen_description_clauseContext);
		}
	}
	public screen_name(): Screen_nameContext | undefined {
		return this.tryGetRuleContext(0, Screen_nameContext);
	}
	public FILLER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILLER, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_entry) {
			listener.enterScreen_description_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_entry) {
			listener.exitScreen_description_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_entry) {
			return visitor.visitScreen_description_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_name) {
			listener.enterScreen_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_name) {
			listener.exitScreen_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_name) {
			return visitor.visitScreen_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Screen_description_clauseContext extends ParserRuleContext {
	public BLANK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLANK, 0); }
	public SCREEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SCREEN, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FOREGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOREGROUND_COLOR, 0); }
	public color_num(): Color_numContext | undefined {
		return this.tryGetRuleContext(0, Color_numContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public BACKGROUND_COLOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BACKGROUND_COLOR, 0); }
	public AUTO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTO, 0); }
	public SECURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SECURE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REQUIRED, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISPLAY, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USAGE, 0); }
	public sign_is(): Sign_isContext | undefined {
		return this.tryGetRuleContext(0, Sign_isContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FULL, 0); }
	public BELL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BELL, 0); }
	public BLINK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.BLINK, 0); }
	public ERASE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ERASE, 0); }
	public EOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOL, 0); }
	public EOS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EOS, 0); }
	public HIGHLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.HIGHLIGHT, 0); }
	public LOWLIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOWLIGHT, 0); }
	public REVERSE_VIDEO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REVERSE_VIDEO, 0); }
	public UNDERLINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNDERLINE, 0); }
	public src_number(): Src_numberContext | undefined {
		return this.tryGetRuleContext(0, Src_numberContext);
	}
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMBER, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLUMN, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VALUE, 0); }
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WHEN, 0); }
	public JUSTIFIED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUSTIFIED, 0); }
	public JUST(): TerminalNode | undefined { return this.tryGetToken(cobolParser.JUST, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RIGHT, 0); }
	public picture(): PictureContext | undefined {
		return this.tryGetRuleContext(0, PictureContext);
	}
	public scr_pic_using(): Scr_pic_usingContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_usingContext);
	}
	public scr_pic_from(): Scr_pic_fromContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_fromContext);
	}
	public scr_pic_to(): Scr_pic_toContext | undefined {
		return this.tryGetRuleContext(0, Scr_pic_toContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_screen_description_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScreen_description_clause) {
			listener.enterScreen_description_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScreen_description_clause) {
			listener.exitScreen_description_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScreen_description_clause) {
			return visitor.visitScreen_description_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_usingContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(cobolParser.USING, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_using; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_using) {
			listener.enterScr_pic_using(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_using) {
			listener.exitScr_pic_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_using) {
			return visitor.visitScr_pic_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_fromContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(cobolParser.FROM, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public nonnumeric_literal(): Nonnumeric_literalContext | undefined {
		return this.tryGetRuleContext(0, Nonnumeric_literalContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_from; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_from) {
			listener.enterScr_pic_from(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_from) {
			listener.exitScr_pic_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_from) {
			return visitor.visitScr_pic_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Scr_pic_toContext extends ParserRuleContext {
	public TO(): TerminalNode { return this.getToken(cobolParser.TO, 0); }
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_scr_pic_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterScr_pic_to) {
			listener.enterScr_pic_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitScr_pic_to) {
			listener.exitScr_pic_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitScr_pic_to) {
			return visitor.visitScr_pic_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonnumeric_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_nonnumeric_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterNonnumeric_literal) {
			listener.enterNonnumeric_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitNonnumeric_literal) {
			listener.exitNonnumeric_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitNonnumeric_literal) {
			return visitor.visitNonnumeric_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Src_numberContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_src_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSrc_number) {
			listener.enterSrc_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSrc_number) {
			listener.exitSrc_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSrc_number) {
			return visitor.visitSrc_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Color_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_color_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterColor_num) {
			listener.enterColor_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitColor_num) {
			listener.exitColor_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitColor_num) {
			return visitor.visitColor_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_divisionContext extends ParserRuleContext {
	public IDENTIFICATION_IN_A_AREA(): TerminalNode { return this.getToken(cobolParser.IDENTIFICATION_IN_A_AREA, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public identification_division_paragraph(): Identification_division_paragraphContext[];
	public identification_division_paragraph(i: number): Identification_division_paragraphContext;
	public identification_division_paragraph(i?: number): Identification_division_paragraphContext | Identification_division_paragraphContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identification_division_paragraphContext);
		} else {
			return this.getRuleContext(i, Identification_division_paragraphContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division) {
			listener.enterIdentification_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division) {
			listener.exitIdentification_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division) {
			return visitor.visitIdentification_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identification_division_paragraphContext extends ParserRuleContext {
	public program_id(): Program_idContext | undefined {
		return this.tryGetRuleContext(0, Program_idContext);
	}
	public author(): AuthorContext | undefined {
		return this.tryGetRuleContext(0, AuthorContext);
	}
	public installation(): InstallationContext | undefined {
		return this.tryGetRuleContext(0, InstallationContext);
	}
	public date_written(): Date_writtenContext | undefined {
		return this.tryGetRuleContext(0, Date_writtenContext);
	}
	public date_compiled(): Date_compiledContext | undefined {
		return this.tryGetRuleContext(0, Date_compiledContext);
	}
	public security(): SecurityContext | undefined {
		return this.tryGetRuleContext(0, SecurityContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public separator(): SeparatorContext | undefined {
		return this.tryGetRuleContext(0, SeparatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identification_division_paragraph; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentification_division_paragraph) {
			listener.enterIdentification_division_paragraph(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentification_division_paragraph) {
			listener.exitIdentification_division_paragraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentification_division_paragraph) {
			return visitor.visitIdentification_division_paragraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_idContext extends ParserRuleContext {
	public PROGRAM_ID(): TerminalNode { return this.getToken(cobolParser.PROGRAM_ID, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public program_name(): Program_nameContext {
		return this.getRuleContext(0, Program_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public is_program(): Is_programContext | undefined {
		return this.tryGetRuleContext(0, Is_programContext);
	}
	public with_ident(): With_identContext | undefined {
		return this.tryGetRuleContext(0, With_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_id; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_id) {
			listener.enterProgram_id(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_id) {
			listener.exitProgram_id(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_id) {
			return visitor.visitProgram_id(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_name) {
			listener.enterProgram_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_name) {
			listener.exitProgram_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_name) {
			return visitor.visitProgram_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Is_programContext extends ParserRuleContext {
	public COMMON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMON, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INITIAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_is_program; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIs_program) {
			listener.enterIs_program(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIs_program) {
			listener.exitIs_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIs_program) {
			return visitor.visitIs_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_identContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(cobolParser.IDENT, 0); }
	public ident_string(): Ident_stringContext {
		return this.getRuleContext(0, Ident_stringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_ident; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_ident) {
			listener.enterWith_ident(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_ident) {
			listener.exitWith_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_ident) {
			return visitor.visitWith_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Ident_stringContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_ident_string; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdent_string) {
			listener.enterIdent_string(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdent_string) {
			listener.exitIdent_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdent_string) {
			return visitor.visitIdent_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_entryContext extends ParserRuleContext {
	public START_FOUR_SPACES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.START_FOUR_SPACES, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public line_comment(): Line_commentContext | undefined {
		return this.tryGetRuleContext(0, Line_commentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_comment_entry; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComment_entry) {
			listener.enterComment_entry(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComment_entry) {
			listener.exitComment_entry(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComment_entry) {
			return visitor.visitComment_entry(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorContext extends ParserRuleContext {
	public AUTHOR(): TerminalNode { return this.getToken(cobolParser.AUTHOR, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_author; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAuthor) {
			listener.enterAuthor(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAuthor) {
			listener.exitAuthor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAuthor) {
			return visitor.visitAuthor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallationContext extends ParserRuleContext {
	public INSTALLATION(): TerminalNode { return this.getToken(cobolParser.INSTALLATION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_installation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInstallation) {
			listener.enterInstallation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInstallation) {
			listener.exitInstallation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInstallation) {
			return visitor.visitInstallation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_writtenContext extends ParserRuleContext {
	public DATE_WRITTEN(): TerminalNode { return this.getToken(cobolParser.DATE_WRITTEN, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_written; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_written) {
			listener.enterDate_written(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_written) {
			listener.exitDate_written(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_written) {
			return visitor.visitDate_written(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_compiledContext extends ParserRuleContext {
	public DATE_COMPILED(): TerminalNode { return this.getToken(cobolParser.DATE_COMPILED, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_date_compiled; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDate_compiled) {
			listener.enterDate_compiled(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDate_compiled) {
			listener.exitDate_compiled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDate_compiled) {
			return visitor.visitDate_compiled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SecurityContext extends ParserRuleContext {
	public SECURITY(): TerminalNode { return this.getToken(cobolParser.SECURITY, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NEWLINE(): TerminalNode[];
	public NEWLINE(i: number): TerminalNode;
	public NEWLINE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.NEWLINE);
		} else {
			return this.getToken(cobolParser.NEWLINE, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public comment_entry(): Comment_entryContext[];
	public comment_entry(i: number): Comment_entryContext;
	public comment_entry(i?: number): Comment_entryContext | Comment_entryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comment_entryContext);
		} else {
			return this.getRuleContext(i, Comment_entryContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_security; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSecurity) {
			listener.enterSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSecurity) {
			listener.exitSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSecurity) {
			return visitor.visitSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(cobolParser.OPTIONS, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public arithmetic(): ArithmeticContext | undefined {
		return this.tryGetRuleContext(0, ArithmeticContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_options_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArithmeticContext extends ParserRuleContext {
	public ARITHMETIC(): TerminalNode { return this.getToken(cobolParser.ARITHMETIC, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public STANDARD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic) {
			listener.enterArithmetic(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic) {
			listener.exitArithmetic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic) {
			return visitor.visitArithmetic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Environment_divisionContext extends ParserRuleContext {
	public ENVIRONMENT(): TerminalNode { return this.getToken(cobolParser.ENVIRONMENT, 0); }
	public DIVISION(): TerminalNode { return this.getToken(cobolParser.DIVISION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public configuration_section(): Configuration_sectionContext | undefined {
		return this.tryGetRuleContext(0, Configuration_sectionContext);
	}
	public input_output_section(): Input_output_sectionContext | undefined {
		return this.tryGetRuleContext(0, Input_output_sectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_environment_division; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterEnvironment_division) {
			listener.enterEnvironment_division(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitEnvironment_division) {
			listener.exitEnvironment_division(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitEnvironment_division) {
			return visitor.visitEnvironment_division(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Configuration_sectionContext extends ParserRuleContext {
	public CONFIGURATION(): TerminalNode { return this.getToken(cobolParser.CONFIGURATION, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public source_computer(): Source_computerContext | undefined {
		return this.tryGetRuleContext(0, Source_computerContext);
	}
	public object_computer(): Object_computerContext | undefined {
		return this.tryGetRuleContext(0, Object_computerContext);
	}
	public special_names(): Special_namesContext | undefined {
		return this.tryGetRuleContext(0, Special_namesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_configuration_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterConfiguration_section) {
			listener.enterConfiguration_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitConfiguration_section) {
			listener.exitConfiguration_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitConfiguration_section) {
			return visitor.visitConfiguration_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Input_output_sectionContext extends ParserRuleContext {
	public INPUT_OUTPUT(): TerminalNode { return this.getToken(cobolParser.INPUT_OUTPUT, 0); }
	public SECTION(): TerminalNode { return this.getToken(cobolParser.SECTION, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public file_control(): File_controlContext | undefined {
		return this.tryGetRuleContext(0, File_controlContext);
	}
	public i_o_control(): I_o_controlContext | undefined {
		return this.tryGetRuleContext(0, I_o_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_input_output_section; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterInput_output_section) {
			listener.enterInput_output_section(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitInput_output_section) {
			listener.exitInput_output_section(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitInput_output_section) {
			return visitor.visitInput_output_section(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Source_computerContext extends ParserRuleContext {
	public SOURCE_COMPUTER(): TerminalNode { return this.getToken(cobolParser.SOURCE_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public with_debugging(): With_debuggingContext | undefined {
		return this.tryGetRuleContext(0, With_debuggingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_source_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSource_computer) {
			listener.enterSource_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSource_computer) {
			listener.exitSource_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSource_computer) {
			return visitor.visitSource_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Computer_typeContext extends ParserRuleContext {
	public ALPHA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHA, 0); }
	public I64(): TerminalNode | undefined { return this.tryGetToken(cobolParser.I64, 0); }
	public VAX(): TerminalNode | undefined { return this.tryGetToken(cobolParser.VAX, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_computer_type; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterComputer_type) {
			listener.enterComputer_type(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitComputer_type) {
			listener.exitComputer_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitComputer_type) {
			return visitor.visitComputer_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_debuggingContext extends ParserRuleContext {
	public DEBUGGING(): TerminalNode { return this.getToken(cobolParser.DEBUGGING, 0); }
	public MODE(): TerminalNode { return this.getToken(cobolParser.MODE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_with_debugging; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWith_debugging) {
			listener.enterWith_debugging(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWith_debugging) {
			listener.exitWith_debugging(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWith_debugging) {
			return visitor.visitWith_debugging(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_computerContext extends ParserRuleContext {
	public OBJECT_COMPUTER(): TerminalNode { return this.getToken(cobolParser.OBJECT_COMPUTER, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public computer_type(): Computer_typeContext | undefined {
		return this.tryGetRuleContext(0, Computer_typeContext);
	}
	public memory_size(): Memory_sizeContext | undefined {
		return this.tryGetRuleContext(0, Memory_sizeContext);
	}
	public program_collating(): Program_collatingContext | undefined {
		return this.tryGetRuleContext(0, Program_collatingContext);
	}
	public segment_limit(): Segment_limitContext | undefined {
		return this.tryGetRuleContext(0, Segment_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_object_computer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterObject_computer) {
			listener.enterObject_computer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitObject_computer) {
			listener.exitObject_computer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitObject_computer) {
			return visitor.visitObject_computer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_sizeContext extends ParserRuleContext {
	public MEMORY(): TerminalNode { return this.getToken(cobolParser.MEMORY, 0); }
	public memory_size_amount(): Memory_size_amountContext {
		return this.getRuleContext(0, Memory_size_amountContext);
	}
	public memory_size_unit(): Memory_size_unitContext {
		return this.getRuleContext(0, Memory_size_unitContext);
	}
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIZE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size) {
			listener.enterMemory_size(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size) {
			listener.exitMemory_size(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size) {
			return visitor.visitMemory_size(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_amountContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_amount; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_amount) {
			listener.enterMemory_size_amount(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_amount) {
			listener.exitMemory_size_amount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_amount) {
			return visitor.visitMemory_size_amount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Memory_size_unitContext extends ParserRuleContext {
	public WORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public MODULES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODULES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_memory_size_unit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMemory_size_unit) {
			listener.enterMemory_size_unit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMemory_size_unit) {
			listener.exitMemory_size_unit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMemory_size_unit) {
			return visitor.visitMemory_size_unit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Program_collatingContext extends ParserRuleContext {
	public SEQUENCE(): TerminalNode { return this.getToken(cobolParser.SEQUENCE, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public PROGRAM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PROGRAM, 0); }
	public COLLATING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COLLATING, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_program_collating; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterProgram_collating) {
			listener.enterProgram_collating(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitProgram_collating) {
			listener.exitProgram_collating(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitProgram_collating) {
			return visitor.visitProgram_collating(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_name) {
			listener.enterAlpha_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_name) {
			listener.exitAlpha_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_name) {
			return visitor.visitAlpha_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_limitContext extends ParserRuleContext {
	public SEGMENT_LIMIT(): TerminalNode { return this.getToken(cobolParser.SEGMENT_LIMIT, 0); }
	public segment_number(): Segment_numberContext {
		return this.getRuleContext(0, Segment_numberContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_limit; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_limit) {
			listener.enterSegment_limit(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_limit) {
			listener.exitSegment_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_limit) {
			return visitor.visitSegment_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Segment_numberContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_segment_number; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSegment_number) {
			listener.enterSegment_number(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSegment_number) {
			listener.exitSegment_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSegment_number) {
			return visitor.visitSegment_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_namesContext extends ParserRuleContext {
	public SPECIAL_NAMES(): TerminalNode { return this.getToken(cobolParser.SPECIAL_NAMES, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public special_names_content(): Special_names_contentContext[];
	public special_names_content(i: number): Special_names_contentContext;
	public special_names_content(i?: number): Special_names_contentContext | Special_names_contentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Special_names_contentContext);
		} else {
			return this.getRuleContext(i, Special_names_contentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names) {
			listener.enterSpecial_names(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names) {
			listener.exitSpecial_names(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names) {
			return visitor.visitSpecial_names(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Special_names_contentContext extends ParserRuleContext {
	public predefined_device(): Predefined_deviceContext | undefined {
		return this.tryGetRuleContext(0, Predefined_deviceContext);
	}
	public device_name(): Device_nameContext | undefined {
		return this.tryGetRuleContext(0, Device_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arg_env(): Arg_envContext | undefined {
		return this.tryGetRuleContext(0, Arg_envContext);
	}
	public arg_env_name(): Arg_env_nameContext | undefined {
		return this.tryGetRuleContext(0, Arg_env_nameContext);
	}
	public C01(): TerminalNode | undefined { return this.tryGetToken(cobolParser.C01, 0); }
	public top_of_page_name(): Top_of_page_nameContext | undefined {
		return this.tryGetRuleContext(0, Top_of_page_nameContext);
	}
	public switch_(): Switch_Context | undefined {
		return this.tryGetRuleContext(0, Switch_Context);
	}
	public alphabet(): AlphabetContext | undefined {
		return this.tryGetRuleContext(0, AlphabetContext);
	}
	public symbolic_chars(): Symbolic_charsContext | undefined {
		return this.tryGetRuleContext(0, Symbolic_charsContext);
	}
	public class_(): Class_Context | undefined {
		return this.tryGetRuleContext(0, Class_Context);
	}
	public currency(): CurrencyContext | undefined {
		return this.tryGetRuleContext(0, CurrencyContext);
	}
	public DECIMAL_POINT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DECIMAL_POINT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.COMMA, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CURSOR, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public CRT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CRT, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_special_names_content; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSpecial_names_content) {
			listener.enterSpecial_names_content(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSpecial_names_content) {
			listener.exitSpecial_names_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSpecial_names_content) {
			return visitor.visitSpecial_names_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_data_itemContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode[];
	public USER_DEFINED_WORD(i: number): TerminalNode;
	public USER_DEFINED_WORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.USER_DEFINED_WORD);
		} else {
			return this.getToken(cobolParser.USER_DEFINED_WORD, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IN);
		} else {
			return this.getToken(cobolParser.IN, i);
		}
	}
	public OF(): TerminalNode[];
	public OF(i: number): TerminalNode;
	public OF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.OF);
		} else {
			return this.getToken(cobolParser.OF, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_qualified_data_item; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterQualified_data_item) {
			listener.enterQualified_data_item(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitQualified_data_item) {
			listener.exitQualified_data_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitQualified_data_item) {
			return visitor.visitQualified_data_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrencyContext extends ParserRuleContext {
	public CURRENCY(): TerminalNode { return this.getToken(cobolParser.CURRENCY, 0); }
	public currency_definition(): Currency_definitionContext {
		return this.getRuleContext(0, Currency_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SIGN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency) {
			listener.enterCurrency(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency) {
			listener.exitCurrency(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency) {
			return visitor.visitCurrency(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Currency_definitionContext extends ParserRuleContext {
	public literal_7(): Literal_7Context | undefined {
		return this.tryGetRuleContext(0, Literal_7Context);
	}
	public PICTURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PICTURE, 0); }
	public SYMBOL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYMBOL, 0); }
	public literal_8(): Literal_8Context | undefined {
		return this.tryGetRuleContext(0, Literal_8Context);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_currency_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCurrency_definition) {
			listener.enterCurrency_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCurrency_definition) {
			listener.exitCurrency_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCurrency_definition) {
			return visitor.visitCurrency_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_7Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_7; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_7) {
			listener.enterLiteral_7(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_7) {
			listener.exitLiteral_7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_7) {
			return visitor.visitLiteral_7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Literal_8Context extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_literal_8; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLiteral_8) {
			listener.enterLiteral_8(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLiteral_8) {
			listener.exitLiteral_8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLiteral_8) {
			return visitor.visitLiteral_8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_Context extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(cobolParser.CLASS, 0); }
	public class_name(): Class_nameContext {
		return this.getRuleContext(0, Class_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public user_class(): User_classContext[];
	public user_class(i: number): User_classContext;
	public user_class(i?: number): User_classContext | User_classContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_classContext);
		} else {
			return this.getRuleContext(i, User_classContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_) {
			listener.enterClass_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_) {
			listener.exitClass_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_) {
			return visitor.visitClass_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_name) {
			listener.enterClass_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_name) {
			listener.exitClass_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_name) {
			return visitor.visitClass_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_classContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_class; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_class) {
			listener.enterUser_class(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_class) {
			listener.exitUser_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_class) {
			return visitor.visitUser_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbolic_charsContext extends ParserRuleContext {
	public SYMBOLIC(): TerminalNode { return this.getToken(cobolParser.SYMBOLIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public symb_ch_definition(): Symb_ch_definitionContext[];
	public symb_ch_definition(i: number): Symb_ch_definitionContext;
	public symb_ch_definition(i?: number): Symb_ch_definitionContext | Symb_ch_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_definitionContext);
		} else {
			return this.getRuleContext(i, Symb_ch_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbolic_chars; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbolic_chars) {
			listener.enterSymbolic_chars(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbolic_chars) {
			listener.exitSymbolic_chars(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbolic_chars) {
			return visitor.visitSymbolic_chars(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_definitionContext extends ParserRuleContext {
	public symb_ch_def_clause(): Symb_ch_def_clauseContext[];
	public symb_ch_def_clause(i: number): Symb_ch_def_clauseContext;
	public symb_ch_def_clause(i?: number): Symb_ch_def_clauseContext | Symb_ch_def_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symb_ch_def_clauseContext);
		} else {
			return this.getRuleContext(i, Symb_ch_def_clauseContext);
		}
	}
	public symb_ch_def_in_alphabet(): Symb_ch_def_in_alphabetContext | undefined {
		return this.tryGetRuleContext(0, Symb_ch_def_in_alphabetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_definition) {
			listener.enterSymb_ch_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_definition) {
			listener.exitSymb_ch_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_definition) {
			return visitor.visitSymb_ch_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_clauseContext extends ParserRuleContext {
	public symbol_char(): Symbol_charContext[];
	public symbol_char(i: number): Symbol_charContext;
	public symbol_char(i?: number): Symbol_charContext | Symbol_charContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Symbol_charContext);
		} else {
			return this.getRuleContext(i, Symbol_charContext);
		}
	}
	public char_val(): Char_valContext[];
	public char_val(i: number): Char_valContext;
	public char_val(i?: number): Char_valContext | Char_valContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Char_valContext);
		} else {
			return this.getRuleContext(i, Char_valContext);
		}
	}
	public ARE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_clause; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_clause) {
			listener.enterSymb_ch_def_clause(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_clause) {
			listener.exitSymb_ch_def_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_clause) {
			return visitor.visitSymb_ch_def_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(cobolParser.IN, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symb_ch_def_in_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymb_ch_def_in_alphabet) {
			listener.enterSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymb_ch_def_in_alphabet) {
			listener.exitSymb_ch_def_in_alphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymb_ch_def_in_alphabet) {
			return visitor.visitSymb_ch_def_in_alphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Symbol_charContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_symbol_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSymbol_char) {
			listener.enterSymbol_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSymbol_char) {
			listener.exitSymbol_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSymbol_char) {
			return visitor.visitSymbol_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Char_valContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_char_val; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterChar_val) {
			listener.enterChar_val(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitChar_val) {
			listener.exitChar_val(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitChar_val) {
			return visitor.visitChar_val(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlphabetContext extends ParserRuleContext {
	public ALPHABET(): TerminalNode { return this.getToken(cobolParser.ALPHABET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public alpha_value(): Alpha_valueContext {
		return this.getRuleContext(0, Alpha_valueContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alphabet; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlphabet) {
			listener.enterAlphabet(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlphabet) {
			listener.exitAlphabet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlphabet) {
			return visitor.visitAlphabet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alpha_valueContext extends ParserRuleContext {
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCII, 0); }
	public STANDARD_1(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_1, 0); }
	public STANDARD_2(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STANDARD_2, 0); }
	public NATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NATIVE, 0); }
	public EBCDIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EBCDIC, 0); }
	public user_alpha(): User_alphaContext[];
	public user_alpha(i: number): User_alphaContext;
	public user_alpha(i?: number): User_alphaContext | User_alphaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(User_alphaContext);
		} else {
			return this.getRuleContext(i, User_alphaContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_alpha_value; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAlpha_value) {
			listener.enterAlpha_value(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAlpha_value) {
			listener.exitAlpha_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAlpha_value) {
			return visitor.visitAlpha_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class User_alphaContext extends ParserRuleContext {
	public first_literal(): First_literalContext {
		return this.getRuleContext(0, First_literalContext);
	}
	public last_literal(): Last_literalContext | undefined {
		return this.tryGetRuleContext(0, Last_literalContext);
	}
	public THRU(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THRU, 0); }
	public THROUGH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THROUGH, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ALSO(): TerminalNode[];
	public ALSO(i: number): TerminalNode;
	public ALSO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALSO);
		} else {
			return this.getToken(cobolParser.ALSO, i);
		}
	}
	public same_literal(): Same_literalContext[];
	public same_literal(i: number): Same_literalContext;
	public same_literal(i?: number): Same_literalContext | Same_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_literalContext);
		} else {
			return this.getRuleContext(i, Same_literalContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_user_alpha; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUser_alpha) {
			listener.enterUser_alpha(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUser_alpha) {
			listener.exitUser_alpha(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUser_alpha) {
			return visitor.visitUser_alpha(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_first_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFirst_literal) {
			listener.enterFirst_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFirst_literal) {
			listener.exitFirst_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFirst_literal) {
			return visitor.visitFirst_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Last_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_last_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLast_literal) {
			listener.enterLast_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLast_literal) {
			listener.exitLast_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLast_literal) {
			return visitor.visitLast_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_literalContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_literal; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_literal) {
			listener.enterSame_literal(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_literal) {
			listener.exitSame_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_literal) {
			return visitor.visitSame_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_Context extends ParserRuleContext {
	public SWITCH(): TerminalNode { return this.getToken(cobolParser.SWITCH, 0); }
	public switch_num(): Switch_numContext {
		return this.getRuleContext(0, Switch_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public switch_name(): Switch_nameContext | undefined {
		return this.tryGetRuleContext(0, Switch_nameContext);
	}
	public switch_clause_on(): Switch_clause_onContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_onContext);
	}
	public switch_clause_off(): Switch_clause_offContext | undefined {
		return this.tryGetRuleContext(0, Switch_clause_offContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_) {
			listener.enterSwitch_(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_) {
			listener.exitSwitch_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_) {
			return visitor.visitSwitch_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_onContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_on; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_on) {
			listener.enterSwitch_clause_on(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_on) {
			listener.exitSwitch_clause_on(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_on) {
			return visitor.visitSwitch_clause_on(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_clause_offContext extends ParserRuleContext {
	public OFF(): TerminalNode { return this.getToken(cobolParser.OFF, 0); }
	public cond_name(): Cond_nameContext {
		return this.getRuleContext(0, Cond_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STATUS, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_clause_off; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_clause_off) {
			listener.enterSwitch_clause_off(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_clause_off) {
			listener.exitSwitch_clause_off(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_clause_off) {
			return visitor.visitSwitch_clause_off(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cond_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_cond_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCond_name) {
			listener.enterCond_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCond_name) {
			listener.exitCond_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCond_name) {
			return visitor.visitCond_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_name) {
			listener.enterSwitch_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_name) {
			listener.exitSwitch_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_name) {
			return visitor.visitSwitch_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Switch_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_switch_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSwitch_num) {
			listener.enterSwitch_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSwitch_num) {
			listener.exitSwitch_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSwitch_num) {
			return visitor.visitSwitch_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Top_of_page_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_top_of_page_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterTop_of_page_name) {
			listener.enterTop_of_page_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitTop_of_page_name) {
			listener.exitTop_of_page_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitTop_of_page_name) {
			return visitor.visitTop_of_page_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Predefined_deviceContext extends ParserRuleContext {
	public CARD_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CARD_READER, 0); }
	public PAPER_TAPE_READER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_READER, 0); }
	public CONSOLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONSOLE, 0); }
	public LINE_PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE_PRINTER, 0); }
	public PAPER_TAPE_PUNCH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
	public SYSIN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSIN, 0); }
	public SYSOUT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSOUT, 0); }
	public SYSERR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SYSERR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_predefined_device; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPredefined_device) {
			listener.enterPredefined_device(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPredefined_device) {
			listener.exitPredefined_device(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPredefined_device) {
			return visitor.visitPredefined_device(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Device_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_device_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterDevice_name) {
			listener.enterDevice_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitDevice_name) {
			listener.exitDevice_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitDevice_name) {
			return visitor.visitDevice_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_envContext extends ParserRuleContext {
	public ARGUMENT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_NUMBER, 0); }
	public ARGUMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ARGUMENT_VALUE, 0); }
	public ENVIRONMENT_NAME(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_NAME, 0); }
	public ENVIRONMENT_VALUE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ENVIRONMENT_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env) {
			listener.enterArg_env(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env) {
			listener.exitArg_env(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env) {
			return visitor.visitArg_env(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_env_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arg_env_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArg_env_name) {
			listener.enterArg_env_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArg_env_name) {
			listener.exitArg_env_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArg_env_name) {
			return visitor.visitArg_env_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_controlContext extends ParserRuleContext {
	public FILE_CONTROL(): TerminalNode { return this.getToken(cobolParser.FILE_CONTROL, 0); }
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public select(): SelectContext[];
	public select(i: number): SelectContext;
	public select(i?: number): SelectContext | SelectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectContext);
		} else {
			return this.getRuleContext(i, SelectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_control) {
			listener.enterFile_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_control) {
			listener.exitFile_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_control) {
			return visitor.visitFile_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(cobolParser.SELECT, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	public assign_to(): Assign_toContext {
		return this.getRuleContext(0, Assign_toContext);
	}
	public DOT_(): TerminalNode { return this.getToken(cobolParser.DOT_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OPTIONAL, 0); }
	public reserve(): ReserveContext | undefined {
		return this.tryGetRuleContext(0, ReserveContext);
	}
	public organization(): OrganizationContext | undefined {
		return this.tryGetRuleContext(0, OrganizationContext);
	}
	public block_contains(): Block_containsContext | undefined {
		return this.tryGetRuleContext(0, Block_containsContext);
	}
	public code_set(): Code_setContext | undefined {
		return this.tryGetRuleContext(0, Code_setContext);
	}
	public padding(): PaddingContext | undefined {
		return this.tryGetRuleContext(0, PaddingContext);
	}
	public record_delimiter(): Record_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Record_delimiterContext);
	}
	public access_mode(): Access_modeContext | undefined {
		return this.tryGetRuleContext(0, Access_modeContext);
	}
	public record_key(): Record_keyContext[];
	public record_key(i: number): Record_keyContext;
	public record_key(i?: number): Record_keyContext | Record_keyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Record_keyContext);
		} else {
			return this.getRuleContext(i, Record_keyContext);
		}
	}
	public lock_mode(): Lock_modeContext | undefined {
		return this.tryGetRuleContext(0, Lock_modeContext);
	}
	public file_status(): File_statusContext | undefined {
		return this.tryGetRuleContext(0, File_statusContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_select; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSelect) {
			return visitor.visitSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(cobolParser.STATUS, 0); }
	public file_stat(): File_statContext {
		return this.getRuleContext(0, File_statContext);
	}
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_status; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_status) {
			listener.enterFile_status(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_status) {
			listener.exitFile_status(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_status) {
			return visitor.visitFile_status(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_statContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_stat; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_stat) {
			listener.enterFile_stat(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_stat) {
			listener.exitFile_stat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_stat) {
			return visitor.visitFile_stat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_keyContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public record_key_definition(): Record_key_definitionContext {
		return this.getRuleContext(0, Record_key_definitionContext);
	}
	public ALTERNATE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALTERNATE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public DUPLICATES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DUPLICATES, 0); }
	public ASCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ASCENDING, 0); }
	public DESCENDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DESCENDING, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key) {
			listener.enterRecord_key(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key) {
			listener.exitRecord_key(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key) {
			return visitor.visitRecord_key(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_key_definitionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext[];
	public qualified_data_item(i: number): Qualified_data_itemContext;
	public qualified_data_item(i?: number): Qualified_data_itemContext | Qualified_data_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_data_itemContext);
		} else {
			return this.getRuleContext(i, Qualified_data_itemContext);
		}
	}
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_key_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_key_definition) {
			listener.enterRecord_key_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_key_definition) {
			listener.exitRecord_key_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_key_definition) {
			return visitor.visitRecord_key_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_modeContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RANDOM, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ACCESS, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode[];
	public IS(i: number): TerminalNode;
	public IS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.IS);
		} else {
			return this.getToken(cobolParser.IS, i);
		}
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_access_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAccess_mode) {
			listener.enterAccess_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAccess_mode) {
			listener.exitAccess_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAccess_mode) {
			return visitor.visitAccess_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReserveContext extends ParserRuleContext {
	public RESERVE(): TerminalNode { return this.getToken(cobolParser.RESERVE, 0); }
	public reserve_num(): Reserve_numContext {
		return this.getRuleContext(0, Reserve_numContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public AREAS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve) {
			listener.enterReserve(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve) {
			listener.exitReserve(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve) {
			return visitor.visitReserve(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserve_numContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reserve_num; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReserve_num) {
			listener.enterReserve_num(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReserve_num) {
			listener.exitReserve_num(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReserve_num) {
			return visitor.visitReserve_num(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Record_delimiterContext extends ParserRuleContext {
	public RECORD(): TerminalNode { return this.getToken(cobolParser.RECORD, 0); }
	public DELIMITER(): TerminalNode { return this.getToken(cobolParser.DELIMITER, 0); }
	public STANDARD_1(): TerminalNode { return this.getToken(cobolParser.STANDARD_1, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_record_delimiter; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRecord_delimiter) {
			listener.enterRecord_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRecord_delimiter) {
			listener.exitRecord_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRecord_delimiter) {
			return visitor.visitRecord_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PaddingContext extends ParserRuleContext {
	public PADDING(): TerminalNode { return this.getToken(cobolParser.PADDING, 0); }
	public pad_char(): Pad_charContext {
		return this.getRuleContext(0, Pad_charContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTER, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_padding; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPadding) {
			listener.enterPadding(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPadding) {
			listener.exitPadding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPadding) {
			return visitor.visitPadding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pad_charContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode { return this.getToken(cobolParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pad_char; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPad_char) {
			listener.enterPad_char(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPad_char) {
			listener.exitPad_char(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPad_char) {
			return visitor.visitPad_char(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrganizationContext extends ParserRuleContext {
	public SEQUENTIAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SEQUENTIAL, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LINE, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RELATIVE, 0); }
	public INDEXED(): TerminalNode | undefined { return this.tryGetToken(cobolParser.INDEXED, 0); }
	public ORGANIZATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ORGANIZATION, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_organization; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterOrganization) {
			listener.enterOrganization(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitOrganization) {
			listener.exitOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitOrganization) {
			return visitor.visitOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_modeContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(cobolParser.LOCK, 0); }
	public lock_mode_definition(): Lock_mode_definitionContext {
		return this.getRuleContext(0, Lock_mode_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public MODE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MODE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode) {
			listener.enterLock_mode(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode) {
			listener.exitLock_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode) {
			return visitor.visitLock_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_mode_definitionContext extends ParserRuleContext {
	public MANUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MANUAL, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WITH, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AUTOMATIC, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ROLLBACK, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXCLUSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_lock_mode_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLock_mode_definition) {
			listener.enterLock_mode_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLock_mode_definition) {
			listener.exitLock_mode_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLock_mode_definition) {
			return visitor.visitLock_mode_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Code_setContext extends ParserRuleContext {
	public CODE_SET(): TerminalNode { return this.getToken(cobolParser.CODE_SET, 0); }
	public alpha_name(): Alpha_nameContext {
		return this.getRuleContext(0, Alpha_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_code_set; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCode_set) {
			listener.enterCode_set(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCode_set) {
			listener.exitCode_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCode_set) {
			return visitor.visitCode_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_containsContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(cobolParser.BLOCK, 0); }
	public blocksize(): BlocksizeContext {
		return this.getRuleContext(0, BlocksizeContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CHARACTERS, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public smallest_block(): Smallest_blockContext | undefined {
		return this.tryGetRuleContext(0, Smallest_blockContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_block_contains; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlock_contains) {
			listener.enterBlock_contains(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlock_contains) {
			listener.exitBlock_contains(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlock_contains) {
			return visitor.visitBlock_contains(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Smallest_blockContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_smallest_block; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSmallest_block) {
			listener.enterSmallest_block(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSmallest_block) {
			listener.exitSmallest_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSmallest_block) {
			return visitor.visitSmallest_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlocksizeContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_blocksize; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBlocksize) {
			listener.enterBlocksize(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBlocksize) {
			listener.exitBlocksize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBlocksize) {
			return visitor.visitBlocksize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_toContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(cobolParser.ASSIGN, 0); }
	public assign_to_definition(): Assign_to_definitionContext {
		return this.getRuleContext(0, Assign_to_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to) {
			listener.enterAssign_to(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to) {
			listener.exitAssign_to(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to) {
			return visitor.visitAssign_to(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_to_definitionContext extends ParserRuleContext {
	public file_spec(): File_specContext | undefined {
		return this.tryGetRuleContext(0, File_specContext);
	}
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTERNAL, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DYNAMIC, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public MULTIPLE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_assign_to_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterAssign_to_definition) {
			listener.enterAssign_to_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitAssign_to_definition) {
			listener.exitAssign_to_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitAssign_to_definition) {
			return visitor.visitAssign_to_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_specContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public DISK(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DISK, 0); }
	public PRINTER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_spec; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_spec) {
			listener.enterFile_spec(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_spec) {
			listener.exitFile_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_spec) {
			return visitor.visitFile_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_o_controlContext extends ParserRuleContext {
	public I_O_CONTROL(): TerminalNode { return this.getToken(cobolParser.I_O_CONTROL, 0); }
	public DOT_(): TerminalNode[];
	public DOT_(i: number): TerminalNode;
	public DOT_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.DOT_);
		} else {
			return this.getToken(cobolParser.DOT_, i);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply(): ApplyContext[];
	public apply(i: number): ApplyContext;
	public apply(i?: number): ApplyContext | ApplyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ApplyContext);
		} else {
			return this.getRuleContext(i, ApplyContext);
		}
	}
	public same(): SameContext[];
	public same(i: number): SameContext;
	public same(i?: number): SameContext | SameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SameContext);
		} else {
			return this.getRuleContext(i, SameContext);
		}
	}
	public rerun(): RerunContext[];
	public rerun(i: number): RerunContext;
	public rerun(i?: number): RerunContext | RerunContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RerunContext);
		} else {
			return this.getRuleContext(i, RerunContext);
		}
	}
	public multiple_file(): Multiple_fileContext[];
	public multiple_file(i: number): Multiple_fileContext;
	public multiple_file(i?: number): Multiple_fileContext | Multiple_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_fileContext);
		} else {
			return this.getRuleContext(i, Multiple_fileContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_i_o_control; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterI_o_control) {
			listener.enterI_o_control(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitI_o_control) {
			listener.exitI_o_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitI_o_control) {
			return visitor.visitI_o_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_fileContext extends ParserRuleContext {
	public MULTIPLE(): TerminalNode { return this.getToken(cobolParser.MULTIPLE, 0); }
	public FILE(): TerminalNode { return this.getToken(cobolParser.FILE, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public TAPE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TAPE, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTAINS, 0); }
	public multiple_file_definition(): Multiple_file_definitionContext[];
	public multiple_file_definition(i: number): Multiple_file_definitionContext;
	public multiple_file_definition(i?: number): Multiple_file_definitionContext | Multiple_file_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Multiple_file_definitionContext);
		} else {
			return this.getRuleContext(i, Multiple_file_definitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file) {
			listener.enterMultiple_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file) {
			listener.exitMultiple_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file) {
			return visitor.visitMultiple_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_definitionContext extends ParserRuleContext {
	public multiple_file_name(): Multiple_file_nameContext {
		return this.getRuleContext(0, Multiple_file_nameContext);
	}
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITION, 0); }
	public pos_integer(): Pos_integerContext | undefined {
		return this.tryGetRuleContext(0, Pos_integerContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_definition) {
			listener.enterMultiple_file_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_definition) {
			listener.exitMultiple_file_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_definition) {
			return visitor.visitMultiple_file_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Multiple_file_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_multiple_file_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterMultiple_file_name) {
			listener.enterMultiple_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitMultiple_file_name) {
			listener.exitMultiple_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitMultiple_file_name) {
			return visitor.visitMultiple_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos_integerContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_pos_integer; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPos_integer) {
			listener.enterPos_integer(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPos_integer) {
			listener.exitPos_integer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPos_integer) {
			return visitor.visitPos_integer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RerunContext extends ParserRuleContext {
	public RERUN(): TerminalNode { return this.getToken(cobolParser.RERUN, 0); }
	public rerun_definition(): Rerun_definitionContext {
		return this.getRuleContext(0, Rerun_definitionContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ON, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EVERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun) {
			listener.enterRerun(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun) {
			listener.exitRerun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun) {
			return visitor.visitRerun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_definitionContext extends ParserRuleContext {
	public rerun_def_file(): Rerun_def_fileContext | undefined {
		return this.tryGetRuleContext(0, Rerun_def_fileContext);
	}
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public clock_count(): Clock_countContext | undefined {
		return this.tryGetRuleContext(0, Clock_countContext);
	}
	public CLOCK_UNITS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CLOCK_UNITS, 0); }
	public condition_name(): Condition_nameContext | undefined {
		return this.tryGetRuleContext(0, Condition_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_definition) {
			listener.enterRerun_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_definition) {
			listener.exitRerun_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_definition) {
			return visitor.visitRerun_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Clock_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_clock_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClock_count) {
			listener.enterClock_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClock_count) {
			listener.exitClock_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClock_count) {
			return visitor.visitClock_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_name) {
			listener.enterCondition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_name) {
			listener.exitCondition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_name) {
			return visitor.visitCondition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rerun_def_fileContext extends ParserRuleContext {
	public REEL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.REEL, 0); }
	public UNIT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.UNIT, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(cobolParser.END, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OF, 0); }
	public rec_count(): Rec_countContext | undefined {
		return this.tryGetRuleContext(0, Rec_countContext);
	}
	public RECORDS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rerun_def_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRerun_def_file) {
			listener.enterRerun_def_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRerun_def_file) {
			listener.exitRerun_def_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRerun_def_file) {
			return visitor.visitRerun_def_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rec_countContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_rec_count; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterRec_count) {
			listener.enterRec_count(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitRec_count) {
			listener.exitRec_count(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitRec_count) {
			return visitor.visitRec_count(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SameContext extends ParserRuleContext {
	public SAME(): TerminalNode { return this.getToken(cobolParser.SAME, 0); }
	public same_area_file(): Same_area_fileContext[];
	public same_area_file(i: number): Same_area_fileContext;
	public same_area_file(i?: number): Same_area_fileContext | Same_area_fileContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Same_area_fileContext);
		} else {
			return this.getRuleContext(i, Same_area_fileContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public AREA(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AREA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FOR, 0); }
	public RECORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RECORD, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT, 0); }
	public SORT_MERGE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SORT_MERGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame) {
			listener.enterSame(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame) {
			listener.exitSame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame) {
			return visitor.visitSame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Same_area_fileContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_same_area_file; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSame_area_file) {
			listener.enterSame_area_file(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSame_area_file) {
			listener.exitSame_area_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSame_area_file) {
			return visitor.visitSame_area_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ApplyContext extends ParserRuleContext {
	public APPLY(): TerminalNode { return this.getToken(cobolParser.APPLY, 0); }
	public ON(): TerminalNode { return this.getToken(cobolParser.ON, 0); }
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public apply_definition(): Apply_definitionContext[];
	public apply_definition(i: number): Apply_definitionContext;
	public apply_definition(i?: number): Apply_definitionContext | Apply_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Apply_definitionContext);
		} else {
			return this.getRuleContext(i, Apply_definitionContext);
		}
	}
	public file_name(): File_nameContext[];
	public file_name(i: number): File_nameContext;
	public file_name(i?: number): File_nameContext | File_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(File_nameContext);
		} else {
			return this.getRuleContext(i, File_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply) {
			listener.enterApply(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply) {
			listener.exitApply(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply) {
			return visitor.visitApply(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Apply_definitionContext extends ParserRuleContext {
	public DEFERRED_WRITE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.DEFERRED_WRITE, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EXTENSION, 0); }
	public extend_amt(): Extend_amtContext | undefined {
		return this.tryGetRuleContext(0, Extend_amtContext);
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	public FILL_SIZE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FILL_SIZE, 0); }
	public LOCK_HOLDING(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LOCK_HOLDING, 0); }
	public MASS_INSERT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MASS_INSERT, 0); }
	public PREALLOCATION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PREALLOCATION, 0); }
	public preall_amt(): Preall_amtContext | undefined {
		return this.tryGetRuleContext(0, Preall_amtContext);
	}
	public CONTIGUOUS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS, 0); }
	public CONTIGUOUS_BEST_TRY(): TerminalNode | undefined { return this.tryGetToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
	public PRINT_CONTROL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PRINT_CONTROL, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(cobolParser.WINDOW, 0); }
	public window_ptrs(): Window_ptrsContext | undefined {
		return this.tryGetRuleContext(0, Window_ptrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_apply_definition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterApply_definition) {
			listener.enterApply_definition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitApply_definition) {
			listener.exitApply_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitApply_definition) {
			return visitor.visitApply_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_ptrsContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_window_ptrs; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterWindow_ptrs) {
			listener.enterWindow_ptrs(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitWindow_ptrs) {
			listener.exitWindow_ptrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitWindow_ptrs) {
			return visitor.visitWindow_ptrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Preall_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_preall_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterPreall_amt) {
			listener.enterPreall_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitPreall_amt) {
			listener.exitPreall_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitPreall_amt) {
			return visitor.visitPreall_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extend_amtContext extends ParserRuleContext {
	public NUMERIC_LITERAL(): TerminalNode { return this.getToken(cobolParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_extend_amt; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterExtend_amt) {
			listener.enterExtend_amt(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitExtend_amt) {
			listener.exitExtend_amt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitExtend_amt) {
			return visitor.visitExtend_amt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arithmetic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public binary_arithmetic_operator(): Binary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_arithmetic_operatorContext);
	}
	public unary_arithmetic_operator(): Unary_arithmetic_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_arithmetic_operatorContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.STRING_LITERAL, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	public ZEROS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROS, 0); }
	public ZEROES(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZEROES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arithmetic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArithmetic_expression) {
			listener.enterArithmetic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArithmetic_expression) {
			listener.exitArithmetic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArithmetic_expression) {
			return visitor.visitArithmetic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Binary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	public STAR_(): TerminalNode[];
	public STAR_(i: number): TerminalNode;
	public STAR_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.STAR_);
		} else {
			return this.getToken(cobolParser.STAR_, i);
		}
	}
	public SLASH_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SLASH_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_binary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterBinary_arithmetic_operator) {
			listener.enterBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitBinary_arithmetic_operator) {
			listener.exitBinary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitBinary_arithmetic_operator) {
			return visitor.visitBinary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unary_arithmetic_operatorContext extends ParserRuleContext {
	public PLUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.PLUS_, 0); }
	public MINUS_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.MINUS_, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_unary_arithmetic_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterUnary_arithmetic_operator) {
			listener.enterUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitUnary_arithmetic_operator) {
			listener.exitUnary_arithmetic_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitUnary_arithmetic_operator) {
			return visitor.visitUnary_arithmetic_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_expressionContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LPAREN_, 0); }
	public logic_expression(): Logic_expressionContext[];
	public logic_expression(i: number): Logic_expressionContext;
	public logic_expression(i?: number): Logic_expressionContext | Logic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Logic_expressionContext);
		} else {
			return this.getRuleContext(i, Logic_expressionContext);
		}
	}
	public RPAREN_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public sign_condition(): Sign_conditionContext | undefined {
		return this.tryGetRuleContext(0, Sign_conditionContext);
	}
	public success_failure_condition(): Success_failure_conditionContext | undefined {
		return this.tryGetRuleContext(0, Success_failure_conditionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_expression; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_expression) {
			listener.enterLogic_expression(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_expression) {
			listener.exitLogic_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_expression) {
			return visitor.visitLogic_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Success_failure_conditionContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.SUCCESS, 0); }
	public FAILURE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FAILURE, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_success_failure_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSuccess_failure_condition) {
			listener.enterSuccess_failure_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSuccess_failure_condition) {
			listener.exitSuccess_failure_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSuccess_failure_condition) {
			return visitor.visitSuccess_failure_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public condition_operator(): Condition_operatorContext | undefined {
		return this.tryGetRuleContext(0, Condition_operatorContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public class_condition(): Class_conditionContext | undefined {
		return this.tryGetRuleContext(0, Class_conditionContext);
	}
	public qualified_data_item(): Qualified_data_itemContext | undefined {
		return this.tryGetRuleContext(0, Qualified_data_itemContext);
	}
	public logic_condition(): Logic_conditionContext | undefined {
		return this.tryGetRuleContext(0, Logic_conditionContext);
	}
	public logic_operation(): Logic_operationContext | undefined {
		return this.tryGetRuleContext(0, Logic_operationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_condition) {
			listener.enterLogic_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_condition) {
			listener.exitLogic_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_condition) {
			return visitor.visitLogic_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Logic_operationContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(cobolParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_logic_operation; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLogic_operation) {
			listener.enterLogic_operation(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLogic_operation) {
			listener.exitLogic_operation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLogic_operation) {
			return visitor.visitLogic_operation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_conditionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	public sign_condition_name(): Sign_condition_nameContext {
		return this.getRuleContext(0, Sign_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition) {
			listener.enterSign_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition) {
			listener.exitSign_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition) {
			return visitor.visitSign_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sign_condition_nameContext extends ParserRuleContext {
	public POSITIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.POSITIVE, 0); }
	public NEGATIVE(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NEGATIVE, 0); }
	public ZERO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ZERO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_sign_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSign_condition_name) {
			listener.enterSign_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSign_condition_name) {
			listener.exitSign_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSign_condition_name) {
			return visitor.visitSign_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_conditionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public class_condition_name(): Class_condition_nameContext {
		return this.getRuleContext(0, Class_condition_nameContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition) {
			listener.enterClass_condition(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition) {
			listener.exitClass_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition) {
			return visitor.visitClass_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Class_condition_nameContext extends ParserRuleContext {
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NUMERIC, 0); }
	public ALPHABETIC(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC, 0); }
	public ALPHABETIC_LOWER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_LOWER, 0); }
	public ALPHABETIC_UPPER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.ALPHABETIC_UPPER, 0); }
	public USER_DEFINED_WORD(): TerminalNode | undefined { return this.tryGetToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_class_condition_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterClass_condition_name) {
			listener.enterClass_condition_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitClass_condition_name) {
			listener.exitClass_condition_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitClass_condition_name) {
			return visitor.visitClass_condition_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Condition_operatorContext extends ParserRuleContext {
	public GREATER(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GREATER, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(cobolParser.OR, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL, 0); }
	public GE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GE_, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LESS, 0); }
	public LE_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LE_, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(cobolParser.IS, 0); }
	public GT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.GT_, 0); }
	public LT_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.LT_, 0); }
	public EQUAL_(): TerminalNode | undefined { return this.tryGetToken(cobolParser.EQUAL_, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(cobolParser.NOT, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(cobolParser.THAN, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(cobolParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_condition_operator; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterCondition_operator) {
			listener.enterCondition_operator(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitCondition_operator) {
			listener.exitCondition_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitCondition_operator) {
			return visitor.visitCondition_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_lvalueContext extends ParserRuleContext {
	public qualified_data_item(): Qualified_data_itemContext {
		return this.getRuleContext(0, Qualified_data_itemContext);
	}
	public subscripting(): SubscriptingContext | undefined {
		return this.tryGetRuleContext(0, SubscriptingContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier_lvalue; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier_lvalue) {
			listener.enterIdentifier_lvalue(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier_lvalue) {
			listener.exitIdentifier_lvalue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier_lvalue) {
			return visitor.visitIdentifier_lvalue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public identifier_lvalue(): Identifier_lvalueContext | undefined {
		return this.tryGetRuleContext(0, Identifier_lvalueContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(cobolParser.FUNCTION, 0); }
	public function_name(): Function_nameContext | undefined {
		return this.tryGetRuleContext(0, Function_nameContext);
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public arguments(): ArgumentsContext | undefined {
		return this.tryGetRuleContext(0, ArgumentsContext);
	}
	public reference_modification(): Reference_modificationContext | undefined {
		return this.tryGetRuleContext(0, Reference_modificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_identifier; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArgumentsContext extends ParserRuleContext {
	public subscripting(): SubscriptingContext {
		return this.getRuleContext(0, SubscriptingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_arguments; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterArguments) {
			listener.enterArguments(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitArguments) {
			listener.exitArguments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitArguments) {
			return visitor.visitArguments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubscriptingContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_expression(): Arithmetic_expressionContext[];
	public arithmetic_expression(i: number): Arithmetic_expressionContext;
	public arithmetic_expression(i?: number): Arithmetic_expressionContext | Arithmetic_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_expressionContext);
		} else {
			return this.getRuleContext(i, Arithmetic_expressionContext);
		}
	}
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(cobolParser.ALL);
		} else {
			return this.getToken(cobolParser.ALL, i);
		}
	}
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public separator(): SeparatorContext[];
	public separator(i: number): SeparatorContext;
	public separator(i?: number): SeparatorContext | SeparatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeparatorContext);
		} else {
			return this.getRuleContext(i, SeparatorContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_subscripting; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterSubscripting) {
			listener.enterSubscripting(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitSubscripting) {
			listener.exitSubscripting(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitSubscripting) {
			return visitor.visitSubscripting(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reference_modificationContext extends ParserRuleContext {
	public LPAREN_(): TerminalNode { return this.getToken(cobolParser.LPAREN_, 0); }
	public leftmost_character_position(): Leftmost_character_positionContext {
		return this.getRuleContext(0, Leftmost_character_positionContext);
	}
	public COLON_(): TerminalNode { return this.getToken(cobolParser.COLON_, 0); }
	public RPAREN_(): TerminalNode { return this.getToken(cobolParser.RPAREN_, 0); }
	public arithmetic_separator(): Arithmetic_separatorContext[];
	public arithmetic_separator(i: number): Arithmetic_separatorContext;
	public arithmetic_separator(i?: number): Arithmetic_separatorContext | Arithmetic_separatorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arithmetic_separatorContext);
		} else {
			return this.getRuleContext(i, Arithmetic_separatorContext);
		}
	}
	public length(): LengthContext | undefined {
		return this.tryGetRuleContext(0, LengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_reference_modification; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterReference_modification) {
			listener.enterReference_modification(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitReference_modification) {
			listener.exitReference_modification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitReference_modification) {
			return visitor.visitReference_modification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leftmost_character_positionContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_leftmost_character_position; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLeftmost_character_position) {
			listener.enterLeftmost_character_position(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLeftmost_character_position) {
			listener.exitLeftmost_character_position(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLeftmost_character_position) {
			return visitor.visitLeftmost_character_position(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthContext extends ParserRuleContext {
	public arithmetic_expression(): Arithmetic_expressionContext {
		return this.getRuleContext(0, Arithmetic_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_length; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterLength) {
			listener.enterLength(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitLength) {
			listener.exitLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitLength) {
			return visitor.visitLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_nameContext extends ParserRuleContext {
	public USER_DEFINED_WORD(): TerminalNode { return this.getToken(cobolParser.USER_DEFINED_WORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return cobolParser.RULE_function_name; }
	// @Override
	public enterRule(listener: cobolListener): void {
		if (listener.enterFunction_name) {
			listener.enterFunction_name(this);
		}
	}
	// @Override
	public exitRule(listener: cobolListener): void {
		if (listener.exitFunction_name) {
			listener.exitFunction_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: cobolVisitor<Result>): Result {
		if (visitor.visitFunction_name) {
			return visitor.visitFunction_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


