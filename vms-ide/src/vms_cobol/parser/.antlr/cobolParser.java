// Generated from d:\vmssoftware.work\vms-ide\src\vms_cobol\parser\cobol.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class cobolParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		STRING_LITERAL=1, ACCEPT=2, ACCESS=3, ADD=4, ADVANCING=5, AFTER=6, ALL=7, 
		ALLOWING=8, ALPHA=9, ALPHABET=10, ALPHABETIC=11, ALPHABETIC_LOWER=12, 
		ALPHABETIC_UPPER=13, ALPHANUMERIC=14, ALPHANUMERIC_EDITED=15, ALSO=16, 
		ALTER=17, ALTERNATE=18, AND=19, ANY=20, APPLY=21, ARE=22, AREA=23, AREAS=24, 
		ARGUMENT_NUMBER=25, ARGUMENT_VALUE=26, ARITHMETIC=27, ASCENDING=28, ASCII=29, 
		ASSIGN=30, AT=31, AUTHOR=32, AUTO=33, AUTOMATIC=34, AUTOTERMINATE=35, 
		BACKGROUND_COLOR=36, BEFORE=37, BELL=38, BINARY=39, BINARY_CHAR=40, BINARY_DOUBLE=41, 
		BINARY_LONG=42, BINARY_SHORT=43, BLANK=44, BLINK=45, BLINKING=46, BLOCK=47, 
		BOLD=48, BOTTOM=49, BY=50, C01=51, CALL=52, CANCEL=53, CARD_READER=54, 
		CF=55, CH=56, CHARACTER=57, CHARACTERS=58, CLASS=59, CLOCK_UNITS=60, CLOSE=61, 
		CODE=62, CODE_SET=63, COLLATING=64, COLUMN=65, COMMA=66, COMMON=67, COMP=68, 
		COMPUTATIONAL=69, COMPUTATIONAL_1=70, COMPUTATIONAL_2=71, COMPUTATIONAL_3=72, 
		COMPUTATIONAL_4=73, COMPUTATIONAL_5=74, COMPUTATIONAL_X=75, COMPUTE=76, 
		COMP_1=77, COMP_2=78, COMP_3=79, COMP_4=80, COMP_5=81, COMP_X=82, CONFIGURATION=83, 
		CONSOLE=84, CONTAINS=85, CONTENT=86, CONTIGUOUS=87, CONTIGUOUS_BEST_TRY=88, 
		CONTINUE=89, CONTROL=90, CONTROLS=91, CONVERSION=92, CONVERTING=93, COPY=94, 
		CORR=95, CORRESPONDING=96, COUNT=97, CRT=98, CURRENCY=99, CURRENT=100, 
		CURSOR=101, DATA=102, DATE=103, DATE_COMPILED=104, DATE_WRITTEN=105, DAY=106, 
		DAY_OF_WEEK=107, DE=108, DEBUGGING=109, DECIMAL_POINT=110, DECLARATIVES=111, 
		DEFAULT=112, DEFERRED_WRITE=113, DELETE=114, DELIMITED=115, DELIMITER=116, 
		DEPENDENCY=117, DEPENDING=118, DESCENDING=119, DESCRIPTOR=120, DETAIL=121, 
		DICTIONARY=122, DISK=123, DISPLAY=124, DIVIDE=125, DIVISION=126, DOWN=127, 
		DUPLICATES=128, DYNAMIC=129, EBCDIC=130, ECHO=131, EDITING=132, ELSE=133, 
		END=134, END_ACCEPT=135, END_ADD=136, END_CALL=137, END_COMPUTE=138, END_DELETE=139, 
		END_DISPLAY=140, END_DIVIDE=141, END_EVALUATE=142, END_IF=143, END_MULTIPLY=144, 
		END_OF_PAGE=145, END_PERFORM=146, END_READ=147, END_RETURN=148, END_REWRITE=149, 
		END_SEARCH=150, END_START=151, END_STRING=152, END_SUBTRACT=153, END_UNSTRING=154, 
		END_WRITE=155, ENVIRONMENT=156, ENVIRONMENT_NAME=157, ENVIRONMENT_VALUE=158, 
		EOL=159, EOP=160, EOS=161, EQUAL=162, ERASE=163, ERROR=164, EVALUATE=165, 
		EVERY=166, EXCEPTION=167, EXCLUSIVE=168, EXIT=169, EXTEND=170, EXTENSION=171, 
		EXTERNAL=172, FAILURE=173, FALSE=174, FD=175, FILE=176, FILE_CONTROL=177, 
		FILE_ID=178, FILLER=179, FILL_SIZE=180, FINAL=181, FIRST=182, FLOAT_EXTENDED=183, 
		FLOAT_LONG=184, FLOAT_SHORT=185, FOOTING=186, FOR=187, FOREGROUND_COLOR=188, 
		FROM=189, FULL=190, FUNCTION=191, GENERATE=192, GIVING=193, GLOBAL=194, 
		GO=195, GREATER=196, GROUP=197, HEADING=198, HIGHLIGHT=199, HIGH_VALUE=200, 
		HIGH_VALUES=201, I64=202, ID=203, IDENT=204, IDENTIFICATION=205, IF=206, 
		IN=207, INDEX=208, INDEXED=209, INDICATE=210, INITIAL=211, INITIALIZE=212, 
		INITIATE=213, INPUT=214, INPUT_OUTPUT=215, INSPECT=216, INSTALLATION=217, 
		INTO=218, INVALID=219, IS=220, I_O=221, I_O_CONTROL=222, JUST=223, JUSTIFIED=224, 
		KEY=225, LABEL=226, LAST=227, LEADING=228, LEFT=229, LESS=230, LIMIT=231, 
		LIMITS=232, LINAGE=233, LINE=234, LINES=235, LINE_PRINTER=236, LINKAGE=237, 
		LOCK=238, LOCK_HOLDING=239, LOWLIGHT=240, LOW_VALUE=241, LOW_VALUES=242, 
		MANUAL=243, MASS_INSERT=244, MEMORY=245, MERGE=246, MODE=247, MODULES=248, 
		MOVE=249, MULTIPLE=250, MULTIPLY=251, NATIVE=252, NEGATIVE=253, NEXT=254, 
		NO=255, NOT=256, NUMBER=257, NUMERIC=258, NUMERIC_EDITED=259, OBJECT_COMPUTER=260, 
		OCCURS=261, OF=262, OFF=263, OMITTED=264, ON=265, OPEN=266, OPTIONAL=267, 
		OPTIONS=268, OR=269, ORDER=270, ORGANIZATION=271, OTHER=272, OTHERS=273, 
		OUTPUT=274, OVERFLOW=275, PACKED_DECIMAL=276, PADDING=277, PAGE=278, PAPER_TAPE_PUNCH=279, 
		PAPER_TAPE_READER=280, PERFORM=281, PF=282, PH=283, PIC=284, PICTURE=285, 
		PLUS=286, POINTER=287, POINTER_64=288, POSITION=289, POSITIVE=290, PREALLOCATION=291, 
		PREVIOUS=292, PRINTER=293, PRINTING=294, PRINT_CONTROL=295, PRIOR=296, 
		PROCEDURE=297, PROCEED=298, PROGRAM=299, PROGRAM_ID=300, PROTECTED=301, 
		QUOTE=302, QUOTES=303, RANDOM=304, RD=305, READ=306, READERS=307, RECORD=308, 
		RECORDS=309, REDEFINES=310, REEL=311, REFERENCE=312, REGARDLESS=313, RELATIVE=314, 
		RELEASE=315, REMAINDER=316, REMOVAL=317, RENAMES=318, REPLACE=319, REPLACING=320, 
		REPORT=321, REPORTING=322, REPORTS=323, REQUIRED=324, RERUN=325, RESERVE=326, 
		RESET=327, RETURN=328, REVERSED=329, REVERSE_VIDEO=330, REWIND=331, REWRITE=332, 
		RF=333, RH=334, RIGHT=335, ROLLBACK=336, ROUNDED=337, RUN=338, SAME=339, 
		SCREEN=340, SD=341, SEARCH=342, SECTION=343, SECURE=344, SECURITY=345, 
		SEGMENT_LIMIT=346, SELECT=347, SENTENCE=348, SEPARATE=349, SEQUENCE=350, 
		SEQUENTIAL=351, SET=352, SIGN=353, SIGNED=354, SIZE=355, SORT=356, SORT_MERGE=357, 
		SOURCE=358, SOURCE_COMPUTER=359, SPACE=360, SPACES=361, SPECIAL_NAMES=362, 
		STANDARD=363, STANDARD_1=364, STANDARD_2=365, START=366, STATUS=367, STOP=368, 
		STRING=369, SUBTRACT=370, SUCCESS=371, SUM=372, SUPPRESS=373, SWITCH=374, 
		SYMBOL=375, SYMBOLIC=376, SYNC=377, SYNCHRONIZED=378, SYSERR=379, SYSIN=380, 
		SYSOUT=381, TALLYING=382, TAPE=383, TERMINATE=384, TEST=385, THAN=386, 
		THEN=387, THROUGH=388, THRU=389, TIME=390, TIMES=391, TO=392, TOP=393, 
		TRAILING=394, TRUE=395, TYPE=396, UNDERLINE=397, UNDERLINED=398, UNIT=399, 
		UNLOCK=400, UNSIGNED=401, UNSTRING=402, UNTIL=403, UP=404, UPDATERS=405, 
		UPON=406, USAGE=407, USE=408, USING=409, VALUE=410, VALUES=411, VARYING=412, 
		VAX=413, WHEN=414, WINDOW=415, WITH=416, WORDS=417, WORKING_STORAGE=418, 
		WRITE=419, WRITERS=420, YYYYDDD=421, YYYYMMDD=422, ZERO=423, ZEROES=424, 
		ZEROS=425, PSEUDO_TEXT=426, EXCLAM_=427, UNDER_=428, PLUS_=429, MINUS_=430, 
		STAR_=431, SLASH_=432, COLON_=433, EQUAL_=434, LT_=435, LE_=436, GE_=437, 
		GT_=438, LPAREN_=439, RPAREN_=440, LBRACK_=441, RBRACK_=442, POINTER_=443, 
		ATP_=444, DOT_=445, LCURLY_=446, RCURLY_=447, NUMERIC_LITERAL=448, HEX_LITERAL=449, 
		USER_DEFINED_WORD=450, LINE_COMMENT=451, COMMA_=452, SEMI_=453, WHITESPACE=454, 
		NEWLINE=455;
	public static final int
		RULE_cobol_source = 0, RULE_program = 1, RULE_identification_division = 2, 
		RULE_environment_division = 3, RULE_data_division = 4, RULE_procedure_division = 5, 
		RULE_word_in_area_A = 6, RULE_word_in_area_B = 7, RULE_author = 8, RULE_figurative_constant_witout_all_zero = 9, 
		RULE_figurative_constant_witout_all = 10, RULE_figurative_constant_witout_zero = 11, 
		RULE_figurative_constant = 12, RULE_end_program = 13, RULE_procedure_division_header = 14, 
		RULE_section = 15, RULE_declaratives = 16, RULE_declaratives_section = 17, 
		RULE_paragraph = 18, RULE_sentense = 19, RULE_use_statement = 20, RULE_group_data_name = 21, 
		RULE_use_on = 22, RULE_section_header = 23, RULE_using = 24, RULE_giving = 25, 
		RULE_statement = 26, RULE_copy_statement = 27, RULE_copy_replacing = 28, 
		RULE_record_name = 29, RULE_library_name = 30, RULE_text_name = 31, RULE_replace_statement = 32, 
		RULE_write_statement = 33, RULE_advance_value = 34, RULE_advance_num = 35, 
		RULE_unstring_statement = 36, RULE_unstring_tally_ctr = 37, RULE_unstring_dest_clause = 38, 
		RULE_countr = 39, RULE_dest_string = 40, RULE_delim_dest = 41, RULE_unstring_delim_clause = 42, 
		RULE_unstring_delim = 43, RULE_unstring_src = 44, RULE_unlock_statement = 45, 
		RULE_terminate_statement = 46, RULE_suppress_statement = 47, RULE_subtract_statement = 48, 
		RULE_sub_grp = 49, RULE_sub_num = 50, RULE_string_statement = 51, RULE_string_pointer = 52, 
		RULE_string_dest = 53, RULE_string_delim = 54, RULE_string_src = 55, RULE_stop_statement = 56, 
		RULE_stop_disp = 57, RULE_start_statement = 58, RULE_sort_key_data = 59, 
		RULE_sort_statement = 60, RULE_sort_statement_form1 = 61, RULE_sort_statement_form2 = 62, 
		RULE_table_name = 63, RULE_procedure_is = 64, RULE_on_sort_key = 65, RULE_sort_key = 66, 
		RULE_set_statement = 67, RULE_set_statement_form1 = 68, RULE_set_statement_form2 = 69, 
		RULE_set_statement_form3 = 70, RULE_set_statement_form4 = 71, RULE_set_statement_form5 = 72, 
		RULE_set_statement_form6 = 73, RULE_set_increm = 74, RULE_set_val = 75, 
		RULE_search_statement = 76, RULE_search_condition = 77, RULE_search_arg = 78, 
		RULE_search_elemnt = 79, RULE_search_pointer = 80, RULE_src_table = 81, 
		RULE_rewrite_statement = 82, RULE_rewrite_rec_name = 83, RULE_return_statement = 84, 
		RULE_smrg_file = 85, RULE_release_statement = 86, RULE_release_src_area = 87, 
		RULE_release_rec = 88, RULE_record_statement = 89, RULE_relation_type = 90, 
		RULE_path_name = 91, RULE_read_statement = 92, RULE_regard_allow = 93, 
		RULE_read_options = 94, RULE_perform_statement = 95, RULE_proc_thru_proc = 96, 
		RULE_perform_times = 97, RULE_with_test = 98, RULE_perform_until = 99, 
		RULE_perform_varying = 100, RULE_perform_range = 101, RULE_perform_increm = 102, 
		RULE_perform_init = 103, RULE_perform_var = 104, RULE_open_statement = 105, 
		RULE_open_definition = 106, RULE_open_file_attributes = 107, RULE_multiply_statement = 108, 
		RULE_mult_num = 109, RULE_merge_statement = 110, RULE_output_proc = 111, 
		RULE_first_proc = 112, RULE_end_proc = 113, RULE_giving_file = 114, RULE_infile = 115, 
		RULE_merge_on = 116, RULE_mergefile = 117, RULE_mergekey = 118, RULE_inspect_statement = 119, 
		RULE_inspect_converting = 120, RULE_convert_chars = 121, RULE_compare_chars = 122, 
		RULE_inspect_replacing = 123, RULE_replacing_all = 124, RULE_replace_val = 125, 
		RULE_replacing_characters = 126, RULE_replace_char = 127, RULE_inspect_tallying = 128, 
		RULE_tallying_for = 129, RULE_tallying_for_characters = 130, RULE_delim_definition = 131, 
		RULE_tallying_for_all = 132, RULE_compare_val = 133, RULE_delim_val = 134, 
		RULE_tally_ctr = 135, RULE_src_string = 136, RULE_initiate_statement = 137, 
		RULE_initialize_statement = 138, RULE_replacing = 139, RULE_init_value = 140, 
		RULE_fld_name = 141, RULE_move_statement = 142, RULE_if_statement = 143, 
		RULE_generate_statement = 144, RULE_report_item = 145, RULE_exit_statement = 146, 
		RULE_exit_program_statement = 147, RULE_go_to_statement = 148, RULE_proc_name = 149, 
		RULE_evaluate_statement = 150, RULE_when_condition = 151, RULE_subj_item = 152, 
		RULE_divide_statement = 153, RULE_divide_statement_form1 = 154, RULE_divide_statement_form2 = 155, 
		RULE_remaind = 156, RULE_divide_num = 157, RULE_display_statement = 158, 
		RULE_display_statement_form1 = 159, RULE_display_statement_form2 = 160, 
		RULE_display_statement_form3 = 161, RULE_display_statement_form4 = 162, 
		RULE_src_item = 163, RULE_display_upon = 164, RULE_disp_f3_line = 165, 
		RULE_disp_f3_column = 166, RULE_display_form1_clause = 167, RULE_display_form2_clause = 168, 
		RULE_at_line_number = 169, RULE_at_column_number = 170, RULE_out_dest = 171, 
		RULE_delete_statement = 172, RULE_continue_statement = 173, RULE_compute_statement = 174, 
		RULE_close_statement = 175, RULE_close_params = 176, RULE_cancel_statement = 177, 
		RULE_call_statement = 178, RULE_call_giving = 179, RULE_call_using = 180, 
		RULE_using_arg = 181, RULE_using_prefix = 182, RULE_argument = 183, RULE_prog_name = 184, 
		RULE_alter_statement = 185, RULE_alter_new_proc = 186, RULE_alter_proc = 187, 
		RULE_add_statement = 188, RULE_add_grp = 189, RULE_add_num = 190, RULE_accept_statement = 191, 
		RULE_on_exception_variants = 192, RULE_at_end_variants = 193, RULE_on_size_variants = 194, 
		RULE_on_overflow_variants = 195, RULE_at_eop_variants = 196, RULE_invalid_key_variants = 197, 
		RULE_accept_form6 = 198, RULE_accept6_item = 199, RULE_accept_form1 = 200, 
		RULE_accept_form2 = 201, RULE_accept_form3 = 202, RULE_accept_form4 = 203, 
		RULE_accept_form5 = 204, RULE_accept_at = 205, RULE_accept_at_line = 206, 
		RULE_accept_at_column = 207, RULE_accept_form4_clause = 208, RULE_accept_form3_clause = 209, 
		RULE_key_dest_item = 210, RULE_def_value = 211, RULE_protected_value = 212, 
		RULE_prot_fill_lit = 213, RULE_prot_size_value = 214, RULE_number_value = 215, 
		RULE_date_time = 216, RULE_dest_item = 217, RULE_input_source = 218, RULE_at_end = 219, 
		RULE_on_exception = 220, RULE_on_size = 221, RULE_on_overflow = 222, RULE_at_eop = 223, 
		RULE_invalid_key = 224, RULE_file_section = 225, RULE_working_storage_section = 226, 
		RULE_linkage_section = 227, RULE_report_section = 228, RULE_screen_section = 229, 
		RULE_file_description_entry = 230, RULE_sort_merge_file_description_entry = 231, 
		RULE_report_description_entry = 232, RULE_fd_clause = 233, RULE_record_description_entry = 234, 
		RULE_data_description_entry = 235, RULE_level_number = 236, RULE_data_description_clause = 237, 
		RULE_renames = 238, RULE_rename_start = 239, RULE_rename_end = 240, RULE_value_is = 241, 
		RULE_value_is_definition = 242, RULE_value_is_definition_part = 243, RULE_value_is_definition_thru = 244, 
		RULE_external_name = 245, RULE_ref_data_name = 246, RULE_value_is_literal = 247, 
		RULE_occurs = 248, RULE_indexed_by = 249, RULE_ind_name = 250, RULE_key_is = 251, 
		RULE_key_name = 252, RULE_times_definition = 253, RULE_table_size = 254, 
		RULE_min_times = 255, RULE_max_times = 256, RULE_report_group_description_entry = 257, 
		RULE_report_group_data_description = 258, RULE_report_group_data_description_clause = 259, 
		RULE_sign_is = 260, RULE_sum = 261, RULE_control_foot_name = 262, RULE_detail_report_group_name = 263, 
		RULE_sum_name = 264, RULE_source_name = 265, RULE_column_number = 266, 
		RULE_type_is_definition = 267, RULE_type_control_name = 268, RULE_next_group_definition = 269, 
		RULE_line_num_definition = 270, RULE_line_num = 271, RULE_rd_clause = 272, 
		RULE_footing_line_rd = 273, RULE_last_detail_line = 274, RULE_first_detail_line = 275, 
		RULE_heading_line = 276, RULE_page_size_rd = 277, RULE_control_name = 278, 
		RULE_report_code = 279, RULE_usage = 280, RULE_usage_definition = 281, 
		RULE_picture = 282, RULE_character_string = 283, RULE_char_str_part = 284, 
		RULE_other_data_item = 285, RULE_data_name = 286, RULE_sd_clause = 287, 
		RULE_report_is = 288, RULE_report_name = 289, RULE_linage = 290, RULE_bottom_lines = 291, 
		RULE_top_lines = 292, RULE_footing_line = 293, RULE_page_size = 294, RULE_data_rec = 295, 
		RULE_rec_name = 296, RULE_value_of_id = 297, RULE_value_of_id_definition = 298, 
		RULE_label = 299, RULE_record = 300, RULE_record_definition = 301, RULE_depending_item = 302, 
		RULE_shortest_rec = 303, RULE_longest_rec = 304, RULE_screen_description_entry = 305, 
		RULE_screen_name = 306, RULE_screen_description_clause = 307, RULE_scr_pic_using = 308, 
		RULE_scr_pic_from = 309, RULE_scr_pic_to = 310, RULE_nonnumeric_literal = 311, 
		RULE_src_number = 312, RULE_color_num = 313, RULE_identification_division_paragraph = 314, 
		RULE_program_id = 315, RULE_program_name = 316, RULE_is_program = 317, 
		RULE_with_ident = 318, RULE_ident_string = 319, RULE_installation = 320, 
		RULE_date_written = 321, RULE_date_compiled = 322, RULE_security = 323, 
		RULE_options_ = 324, RULE_arithmetic = 325, RULE_configuration_section = 326, 
		RULE_input_output_section = 327, RULE_source_computer = 328, RULE_computer_type = 329, 
		RULE_with_debugging = 330, RULE_object_computer = 331, RULE_memory_size = 332, 
		RULE_memory_size_amount = 333, RULE_memory_size_unit = 334, RULE_program_collating = 335, 
		RULE_alpha_name = 336, RULE_segment_limit = 337, RULE_segment_number = 338, 
		RULE_special_names = 339, RULE_special_names_content = 340, RULE_qualified_data_item = 341, 
		RULE_currency = 342, RULE_currency_definition = 343, RULE_literal_7 = 344, 
		RULE_literal_8 = 345, RULE_class_ = 346, RULE_class_name = 347, RULE_user_class = 348, 
		RULE_symbolic_chars = 349, RULE_symb_ch_definition = 350, RULE_symb_ch_def_clause = 351, 
		RULE_symb_ch_def_in_alphabet = 352, RULE_symbol_char = 353, RULE_char_val = 354, 
		RULE_alphabet = 355, RULE_alpha_value = 356, RULE_user_alpha = 357, RULE_first_literal = 358, 
		RULE_last_literal = 359, RULE_same_literal = 360, RULE_switch_ = 361, 
		RULE_switch_clause_on = 362, RULE_switch_clause_off = 363, RULE_cond_name = 364, 
		RULE_switch_name = 365, RULE_switch_num = 366, RULE_top_of_page_name = 367, 
		RULE_predefined_device = 368, RULE_device_name = 369, RULE_arg_env = 370, 
		RULE_arg_env_name = 371, RULE_file_control = 372, RULE_select = 373, RULE_file_status = 374, 
		RULE_file_stat = 375, RULE_record_key = 376, RULE_record_key_definition = 377, 
		RULE_access_mode = 378, RULE_reserve = 379, RULE_reserve_num = 380, RULE_record_delimiter = 381, 
		RULE_padding = 382, RULE_pad_char = 383, RULE_organization = 384, RULE_lock_mode = 385, 
		RULE_lock_mode_definition = 386, RULE_code_set = 387, RULE_block_contains = 388, 
		RULE_smallest_block = 389, RULE_blocksize = 390, RULE_assign_to = 391, 
		RULE_assign_to_definition = 392, RULE_file_spec = 393, RULE_file_name = 394, 
		RULE_i_o_control = 395, RULE_multiple_file = 396, RULE_multiple_file_definition = 397, 
		RULE_multiple_file_name = 398, RULE_pos_integer = 399, RULE_rerun = 400, 
		RULE_rerun_definition = 401, RULE_clock_count = 402, RULE_condition_name = 403, 
		RULE_rerun_def_file = 404, RULE_rec_count = 405, RULE_same = 406, RULE_same_area_file = 407, 
		RULE_apply = 408, RULE_apply_definition = 409, RULE_window_ptrs = 410, 
		RULE_preall_amt = 411, RULE_extend_amt = 412, RULE_arithmetic_expression = 413, 
		RULE_constant = 414, RULE_binary_arithmetic_operator = 415, RULE_unary_arithmetic_operator = 416, 
		RULE_logic_expression = 417, RULE_logic_condition = 418, RULE_logic_condition_right_part = 419, 
		RULE_logic_operation = 420, RULE_sign_condition_name = 421, RULE_class_condition_name = 422, 
		RULE_condition_operator = 423, RULE_identifier_result = 424, RULE_identifier = 425, 
		RULE_arguments = 426, RULE_subscripting = 427, RULE_reference_modification = 428, 
		RULE_leftmost_character_position = 429, RULE_length = 430, RULE_function_name = 431;
	public static final String[] ruleNames = {
		"cobol_source", "program", "identification_division", "environment_division", 
		"data_division", "procedure_division", "word_in_area_A", "word_in_area_B", 
		"author", "figurative_constant_witout_all_zero", "figurative_constant_witout_all", 
		"figurative_constant_witout_zero", "figurative_constant", "end_program", 
		"procedure_division_header", "section", "declaratives", "declaratives_section", 
		"paragraph", "sentense", "use_statement", "group_data_name", "use_on", 
		"section_header", "using", "giving", "statement", "copy_statement", "copy_replacing", 
		"record_name", "library_name", "text_name", "replace_statement", "write_statement", 
		"advance_value", "advance_num", "unstring_statement", "unstring_tally_ctr", 
		"unstring_dest_clause", "countr", "dest_string", "delim_dest", "unstring_delim_clause", 
		"unstring_delim", "unstring_src", "unlock_statement", "terminate_statement", 
		"suppress_statement", "subtract_statement", "sub_grp", "sub_num", "string_statement", 
		"string_pointer", "string_dest", "string_delim", "string_src", "stop_statement", 
		"stop_disp", "start_statement", "sort_key_data", "sort_statement", "sort_statement_form1", 
		"sort_statement_form2", "table_name", "procedure_is", "on_sort_key", "sort_key", 
		"set_statement", "set_statement_form1", "set_statement_form2", "set_statement_form3", 
		"set_statement_form4", "set_statement_form5", "set_statement_form6", "set_increm", 
		"set_val", "search_statement", "search_condition", "search_arg", "search_elemnt", 
		"search_pointer", "src_table", "rewrite_statement", "rewrite_rec_name", 
		"return_statement", "smrg_file", "release_statement", "release_src_area", 
		"release_rec", "record_statement", "relation_type", "path_name", "read_statement", 
		"regard_allow", "read_options", "perform_statement", "proc_thru_proc", 
		"perform_times", "with_test", "perform_until", "perform_varying", "perform_range", 
		"perform_increm", "perform_init", "perform_var", "open_statement", "open_definition", 
		"open_file_attributes", "multiply_statement", "mult_num", "merge_statement", 
		"output_proc", "first_proc", "end_proc", "giving_file", "infile", "merge_on", 
		"mergefile", "mergekey", "inspect_statement", "inspect_converting", "convert_chars", 
		"compare_chars", "inspect_replacing", "replacing_all", "replace_val", 
		"replacing_characters", "replace_char", "inspect_tallying", "tallying_for", 
		"tallying_for_characters", "delim_definition", "tallying_for_all", "compare_val", 
		"delim_val", "tally_ctr", "src_string", "initiate_statement", "initialize_statement", 
		"replacing", "init_value", "fld_name", "move_statement", "if_statement", 
		"generate_statement", "report_item", "exit_statement", "exit_program_statement", 
		"go_to_statement", "proc_name", "evaluate_statement", "when_condition", 
		"subj_item", "divide_statement", "divide_statement_form1", "divide_statement_form2", 
		"remaind", "divide_num", "display_statement", "display_statement_form1", 
		"display_statement_form2", "display_statement_form3", "display_statement_form4", 
		"src_item", "display_upon", "disp_f3_line", "disp_f3_column", "display_form1_clause", 
		"display_form2_clause", "at_line_number", "at_column_number", "out_dest", 
		"delete_statement", "continue_statement", "compute_statement", "close_statement", 
		"close_params", "cancel_statement", "call_statement", "call_giving", "call_using", 
		"using_arg", "using_prefix", "argument", "prog_name", "alter_statement", 
		"alter_new_proc", "alter_proc", "add_statement", "add_grp", "add_num", 
		"accept_statement", "on_exception_variants", "at_end_variants", "on_size_variants", 
		"on_overflow_variants", "at_eop_variants", "invalid_key_variants", "accept_form6", 
		"accept6_item", "accept_form1", "accept_form2", "accept_form3", "accept_form4", 
		"accept_form5", "accept_at", "accept_at_line", "accept_at_column", "accept_form4_clause", 
		"accept_form3_clause", "key_dest_item", "def_value", "protected_value", 
		"prot_fill_lit", "prot_size_value", "number_value", "date_time", "dest_item", 
		"input_source", "at_end", "on_exception", "on_size", "on_overflow", "at_eop", 
		"invalid_key", "file_section", "working_storage_section", "linkage_section", 
		"report_section", "screen_section", "file_description_entry", "sort_merge_file_description_entry", 
		"report_description_entry", "fd_clause", "record_description_entry", "data_description_entry", 
		"level_number", "data_description_clause", "renames", "rename_start", 
		"rename_end", "value_is", "value_is_definition", "value_is_definition_part", 
		"value_is_definition_thru", "external_name", "ref_data_name", "value_is_literal", 
		"occurs", "indexed_by", "ind_name", "key_is", "key_name", "times_definition", 
		"table_size", "min_times", "max_times", "report_group_description_entry", 
		"report_group_data_description", "report_group_data_description_clause", 
		"sign_is", "sum", "control_foot_name", "detail_report_group_name", "sum_name", 
		"source_name", "column_number", "type_is_definition", "type_control_name", 
		"next_group_definition", "line_num_definition", "line_num", "rd_clause", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "report_code", "usage", "usage_definition", 
		"picture", "character_string", "char_str_part", "other_data_item", "data_name", 
		"sd_clause", "report_is", "report_name", "linage", "bottom_lines", "top_lines", 
		"footing_line", "page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_name", "screen_description_clause", 
		"scr_pic_using", "scr_pic_from", "scr_pic_to", "nonnumeric_literal", "src_number", 
		"color_num", "identification_division_paragraph", "program_id", "program_name", 
		"is_program", "with_ident", "ident_string", "installation", "date_written", 
		"date_compiled", "security", "options_", "arithmetic", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "qualified_data_item", "currency", 
		"currency_definition", "literal_7", "literal_8", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "switch_", 
		"switch_clause_on", "switch_clause_off", "cond_name", "switch_name", "switch_num", 
		"top_of_page_name", "predefined_device", "device_name", "arg_env", "arg_env_name", 
		"file_control", "select", "file_status", "file_stat", "record_key", "record_key_definition", 
		"access_mode", "reserve", "reserve_num", "record_delimiter", "padding", 
		"pad_char", "organization", "lock_mode", "lock_mode_definition", "code_set", 
		"block_contains", "smallest_block", "blocksize", "assign_to", "assign_to_definition", 
		"file_spec", "file_name", "i_o_control", "multiple_file", "multiple_file_definition", 
		"multiple_file_name", "pos_integer", "rerun", "rerun_definition", "clock_count", 
		"condition_name", "rerun_def_file", "rec_count", "same", "same_area_file", 
		"apply", "apply_definition", "window_ptrs", "preall_amt", "extend_amt", 
		"arithmetic_expression", "constant", "binary_arithmetic_operator", "unary_arithmetic_operator", 
		"logic_expression", "logic_condition", "logic_condition_right_part", "logic_operation", 
		"sign_condition_name", "class_condition_name", "condition_operator", "identifier_result", 
		"identifier", "arguments", "subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'!'", "'_'", "'+'", "'-'", 
		"'*'", "'/'", "':'", "'='", "'<'", "'<='", "'>='", "'>'", "'('", "')'", 
		"'['", "']'", "'^'", "'@'", "'.'", "'{'", "'}'", null, null, null, null, 
		"','", "';'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "STRING_LITERAL", "ACCEPT", "ACCESS", "ADD", "ADVANCING", "AFTER", 
		"ALL", "ALLOWING", "ALPHA", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", 
		"ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "ANY", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CORR", "CORRESPONDING", "COUNT", "CRT", "CURRENCY", "CURRENT", "CURSOR", 
		"DATA", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
		"DE", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", 
		"DELETE", "DELIMITED", "DELIMITER", "DEPENDENCY", "DEPENDING", "DESCENDING", 
		"DESCRIPTOR", "DETAIL", "DICTIONARY", "DISK", "DISPLAY", "DIVIDE", "DIVISION", 
		"DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "ECHO", "EDITING", "ELSE", 
		"END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", 
		"END_DISPLAY", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOP", "EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", 
		"EXCLUSIVE", "EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FALSE", 
		"FD", "FILE", "FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", 
		"FIRST", "FLOAT_EXTENDED", "FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", 
		"FOREGROUND_COLOR", "FROM", "FULL", "FUNCTION", "GENERATE", "GIVING", 
		"GLOBAL", "GO", "GREATER", "GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", 
		"HIGH_VALUES", "I64", "ID", "IDENT", "IDENTIFICATION", "IF", "IN", "INDEX", 
		"INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
		"INSPECT", "INSTALLATION", "INTO", "INVALID", "IS", "I_O", "I_O_CONTROL", 
		"JUST", "JUSTIFIED", "KEY", "LABEL", "LAST", "LEADING", "LEFT", "LESS", 
		"LIMIT", "LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", "LINKAGE", 
		"LOCK", "LOCK_HOLDING", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MANUAL", 
		"MASS_INSERT", "MEMORY", "MERGE", "MODE", "MODULES", "MOVE", "MULTIPLE", 
		"MULTIPLY", "NATIVE", "NEGATIVE", "NEXT", "NO", "NOT", "NUMBER", "NUMERIC", 
		"NUMERIC_EDITED", "OBJECT_COMPUTER", "OCCURS", "OF", "OFF", "OMITTED", 
		"ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORDER", "ORGANIZATION", "OTHER", 
		"OTHERS", "OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PIC", "PICTURE", "PLUS", 
		"POINTER", "POINTER_64", "POSITION", "POSITIVE", "PREALLOCATION", "PREVIOUS", 
		"PRINTER", "PRINTING", "PRINT_CONTROL", "PRIOR", "PROCEDURE", "PROCEED", 
		"PROGRAM", "PROGRAM_ID", "PROTECTED", "QUOTE", "QUOTES", "RANDOM", "RD", 
		"READ", "READERS", "RECORD", "RECORDS", "REDEFINES", "REEL", "REFERENCE", 
		"REGARDLESS", "RELATIVE", "RELEASE", "REMAINDER", "REMOVAL", "RENAMES", 
		"REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", "REQUIRED", 
		"RERUN", "RESERVE", "RESET", "RETURN", "REVERSED", "REVERSE_VIDEO", "REWIND", 
		"REWRITE", "RF", "RH", "RIGHT", "ROLLBACK", "ROUNDED", "RUN", "SAME", 
		"SCREEN", "SD", "SEARCH", "SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", 
		"SELECT", "SENTENCE", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", 
		"SIGNED", "SIZE", "SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPACE", 
		"SPACES", "SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", "START", 
		"STATUS", "STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", 
		"SWITCH", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", 
		"SYSOUT", "TALLYING", "TAPE", "TERMINATE", "TEST", "THAN", "THEN", "THROUGH", 
		"THRU", "TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", 
		"UNDERLINED", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UNTIL", "UP", 
		"UPDATERS", "UPON", "USAGE", "USE", "USING", "VALUE", "VALUES", "VARYING", 
		"VAX", "WHEN", "WINDOW", "WITH", "WORDS", "WORKING_STORAGE", "WRITE", 
		"WRITERS", "YYYYDDD", "YYYYMMDD", "ZERO", "ZEROES", "ZEROS", "PSEUDO_TEXT", 
		"EXCLAM_", "UNDER_", "PLUS_", "MINUS_", "STAR_", "SLASH_", "COLON_", "EQUAL_", 
		"LT_", "LE_", "GE_", "GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", 
		"POINTER_", "ATP_", "DOT_", "LCURLY_", "RCURLY_", "NUMERIC_LITERAL", "HEX_LITERAL", 
		"USER_DEFINED_WORD", "LINE_COMMENT", "COMMA_", "SEMI_", "WHITESPACE", 
		"NEWLINE"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "cobol.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public cobolParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Cobol_sourceContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(cobolParser.EOF, 0); }
		public List<ProgramContext> program() {
			return getRuleContexts(ProgramContext.class);
		}
		public ProgramContext program(int i) {
			return getRuleContext(ProgramContext.class,i);
		}
		public Cobol_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cobol_source; }
	}

	public final Cobol_sourceContext cobol_source() throws RecognitionException {
		Cobol_sourceContext _localctx = new Cobol_sourceContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_cobol_source);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IDENTIFICATION) {
				{
				{
				setState(864);
				program();
				}
				}
				setState(869);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(870);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramContext extends ParserRuleContext {
		public Identification_divisionContext identification_division() {
			return getRuleContext(Identification_divisionContext.class,0);
		}
		public Environment_divisionContext environment_division() {
			return getRuleContext(Environment_divisionContext.class,0);
		}
		public Data_divisionContext data_division() {
			return getRuleContext(Data_divisionContext.class,0);
		}
		public Procedure_divisionContext procedure_division() {
			return getRuleContext(Procedure_divisionContext.class,0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(872);
			identification_division();
			setState(874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENVIRONMENT) {
				{
				setState(873);
				environment_division();
				}
			}

			setState(877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA) {
				{
				setState(876);
				data_division();
				}
			}

			setState(880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURE) {
				{
				setState(879);
				procedure_division();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identification_divisionContext extends ParserRuleContext {
		public Token IDENTIFICATION;
		public TerminalNode IDENTIFICATION() { return getToken(cobolParser.IDENTIFICATION, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Identification_division_paragraphContext> identification_division_paragraph() {
			return getRuleContexts(Identification_division_paragraphContext.class);
		}
		public Identification_division_paragraphContext identification_division_paragraph(int i) {
			return getRuleContext(Identification_division_paragraphContext.class,i);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identification_division; }
	}

	public final Identification_divisionContext identification_division() throws RecognitionException {
		Identification_divisionContext _localctx = new Identification_divisionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_identification_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(882);
			((Identification_divisionContext)_localctx).IDENTIFICATION = match(IDENTIFICATION);
			setState(883);
			if (!((((Identification_divisionContext)_localctx).IDENTIFICATION!=null?((Identification_divisionContext)_localctx).IDENTIFICATION.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$IDENTIFICATION.pos <= 4");
			setState(884);
			match(DIVISION);
			setState(885);
			match(DOT_);
			setState(889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHOR || _la==DATE_COMPILED || _la==DATE_WRITTEN || _la==INSTALLATION || _la==OPTIONS || _la==PROGRAM_ID || _la==SECURITY) {
				{
				{
				setState(886);
				identification_division_paragraph();
				}
				}
				setState(891);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Environment_divisionContext extends ParserRuleContext {
		public TerminalNode ENVIRONMENT() { return getToken(cobolParser.ENVIRONMENT, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Configuration_sectionContext configuration_section() {
			return getRuleContext(Configuration_sectionContext.class,0);
		}
		public Input_output_sectionContext input_output_section() {
			return getRuleContext(Input_output_sectionContext.class,0);
		}
		public Environment_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_environment_division; }
	}

	public final Environment_divisionContext environment_division() throws RecognitionException {
		Environment_divisionContext _localctx = new Environment_divisionContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_environment_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(892);
			match(ENVIRONMENT);
			setState(893);
			match(DIVISION);
			setState(894);
			match(DOT_);
			setState(896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONFIGURATION) {
				{
				setState(895);
				configuration_section();
				}
			}

			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INPUT_OUTPUT) {
				{
				setState(898);
				input_output_section();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_divisionContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(cobolParser.DATA, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public File_sectionContext file_section() {
			return getRuleContext(File_sectionContext.class,0);
		}
		public Working_storage_sectionContext working_storage_section() {
			return getRuleContext(Working_storage_sectionContext.class,0);
		}
		public Linkage_sectionContext linkage_section() {
			return getRuleContext(Linkage_sectionContext.class,0);
		}
		public Report_sectionContext report_section() {
			return getRuleContext(Report_sectionContext.class,0);
		}
		public Screen_sectionContext screen_section() {
			return getRuleContext(Screen_sectionContext.class,0);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_division; }
	}

	public final Data_divisionContext data_division() throws RecognitionException {
		Data_divisionContext _localctx = new Data_divisionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_data_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(901);
			match(DATA);
			setState(902);
			match(DIVISION);
			setState(903);
			match(DOT_);
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE) {
				{
				setState(904);
				file_section();
				}
			}

			setState(908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORKING_STORAGE) {
				{
				setState(907);
				working_storage_section();
				}
			}

			setState(911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINKAGE) {
				{
				setState(910);
				linkage_section();
				}
			}

			setState(914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPORT) {
				{
				setState(913);
				report_section();
				}
			}

			setState(917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCREEN) {
				{
				setState(916);
				screen_section();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_divisionContext extends ParserRuleContext {
		public Procedure_division_headerContext procedure_division_header() {
			return getRuleContext(Procedure_division_headerContext.class,0);
		}
		public DeclarativesContext declaratives() {
			return getRuleContext(DeclarativesContext.class,0);
		}
		public End_programContext end_program() {
			return getRuleContext(End_programContext.class,0);
		}
		public List<SectionContext> section() {
			return getRuleContexts(SectionContext.class);
		}
		public SectionContext section(int i) {
			return getRuleContext(SectionContext.class,i);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division; }
	}

	public final Procedure_divisionContext procedure_division() throws RecognitionException {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_procedure_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(919);
			procedure_division_header();
			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARATIVES) {
				{
				setState(920);
				declaratives();
				}
			}

			setState(935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USER_DEFINED_WORD) {
					{
					{
					setState(923);
					section();
					}
					}
					setState(928);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USER_DEFINED_WORD) {
					{
					{
					setState(929);
					paragraph();
					}
					}
					setState(934);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==END) {
				{
				setState(937);
				end_program();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Word_in_area_AContext extends ParserRuleContext {
		public Word_in_area_AContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_word_in_area_A; }
	}

	public final Word_in_area_AContext word_in_area_A() throws RecognitionException {
		Word_in_area_AContext _localctx = new Word_in_area_AContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_word_in_area_A);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(940);
			if (!(this.inputStream.LT(1).charPositionInLine < 4)) throw new FailedPredicateException(this, "this.inputStream.LT(1).charPositionInLine < 4");
			setState(941);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Word_in_area_BContext extends ParserRuleContext {
		public Word_in_area_BContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_word_in_area_B; }
	}

	public final Word_in_area_BContext word_in_area_B() throws RecognitionException {
		Word_in_area_BContext _localctx = new Word_in_area_BContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_word_in_area_B);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(943);
			if (!(this.inputStream.LT(1).charPositionInLine >= 4)) throw new FailedPredicateException(this, "this.inputStream.LT(1).charPositionInLine >= 4");
			setState(944);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorContext extends ParserRuleContext {
		public TerminalNode AUTHOR() { return getToken(cobolParser.AUTHOR, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public AuthorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_author; }
	}

	public final AuthorContext author() throws RecognitionException {
		AuthorContext _localctx = new AuthorContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_author);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(946);
			match(AUTHOR);
			setState(947);
			match(DOT_);
			setState(951);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(948);
					word_in_area_B();
					}
					} 
				}
				setState(953);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_all_zeroContext extends ParserRuleContext {
		public TerminalNode SPACE() { return getToken(cobolParser.SPACE, 0); }
		public TerminalNode SPACES() { return getToken(cobolParser.SPACES, 0); }
		public TerminalNode HIGH_VALUE() { return getToken(cobolParser.HIGH_VALUE, 0); }
		public TerminalNode HIGH_VALUES() { return getToken(cobolParser.HIGH_VALUES, 0); }
		public TerminalNode LOW_VALUE() { return getToken(cobolParser.LOW_VALUE, 0); }
		public TerminalNode LOW_VALUES() { return getToken(cobolParser.LOW_VALUES, 0); }
		public TerminalNode QUOTE() { return getToken(cobolParser.QUOTE, 0); }
		public TerminalNode QUOTES() { return getToken(cobolParser.QUOTES, 0); }
		public Figurative_constant_witout_all_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_all_zero; }
	}

	public final Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() throws RecognitionException {
		Figurative_constant_witout_all_zeroContext _localctx = new Figurative_constant_witout_all_zeroContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_figurative_constant_witout_all_zero);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(954);
			_la = _input.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (QUOTE - 302)) | (1L << (QUOTES - 302)) | (1L << (SPACE - 302)) | (1L << (SPACES - 302)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_allContext extends ParserRuleContext {
		public Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() {
			return getRuleContext(Figurative_constant_witout_all_zeroContext.class,0);
		}
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public Figurative_constant_witout_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_all; }
	}

	public final Figurative_constant_witout_allContext figurative_constant_witout_all() throws RecognitionException {
		Figurative_constant_witout_allContext _localctx = new Figurative_constant_witout_allContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_figurative_constant_witout_all);
		try {
			setState(958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(956);
				figurative_constant_witout_all_zero();
				}
				break;
			case ZERO:
				enterOuterAlt(_localctx, 2);
				{
				setState(957);
				match(ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_zeroContext extends ParserRuleContext {
		public Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() {
			return getRuleContext(Figurative_constant_witout_all_zeroContext.class,0);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Figurative_constant_witout_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_zero; }
	}

	public final Figurative_constant_witout_zeroContext figurative_constant_witout_zero() throws RecognitionException {
		Figurative_constant_witout_zeroContext _localctx = new Figurative_constant_witout_zeroContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_figurative_constant_witout_zero);
		try {
			setState(963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(960);
				figurative_constant_witout_all_zero();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(961);
				match(ALL);
				setState(962);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constantContext extends ParserRuleContext {
		public Figurative_constant_witout_zeroContext figurative_constant_witout_zero() {
			return getRuleContext(Figurative_constant_witout_zeroContext.class,0);
		}
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public Figurative_constantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant; }
	}

	public final Figurative_constantContext figurative_constant() throws RecognitionException {
		Figurative_constantContext _localctx = new Figurative_constantContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_figurative_constant);
		try {
			setState(967);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(965);
				figurative_constant_witout_zero();
				}
				break;
			case ZERO:
				enterOuterAlt(_localctx, 2);
				{
				setState(966);
				match(ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_programContext extends ParserRuleContext {
		public Token END;
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Program_nameContext program_name() {
			return getRuleContext(Program_nameContext.class,0);
		}
		public End_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_program; }
	}

	public final End_programContext end_program() throws RecognitionException {
		End_programContext _localctx = new End_programContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_end_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969);
			((End_programContext)_localctx).END = match(END);
			setState(970);
			if (!((((End_programContext)_localctx).END!=null?((End_programContext)_localctx).END.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$END.pos <= 4");
			setState(971);
			match(PROGRAM);
			setState(973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_DEFINED_WORD) {
				{
				setState(972);
				program_name();
				}
			}

			setState(975);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_division_headerContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public UsingContext using() {
			return getRuleContext(UsingContext.class,0);
		}
		public GivingContext giving() {
			return getRuleContext(GivingContext.class,0);
		}
		public Procedure_division_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division_header; }
	}

	public final Procedure_division_headerContext procedure_division_header() throws RecognitionException {
		Procedure_division_headerContext _localctx = new Procedure_division_headerContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_procedure_division_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(977);
			match(PROCEDURE);
			setState(978);
			match(DIVISION);
			setState(980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(979);
				using();
				}
			}

			setState(983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GIVING) {
				{
				setState(982);
				giving();
				}
			}

			setState(985);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SectionContext extends ParserRuleContext {
		public Section_headerContext section_header() {
			return getRuleContext(Section_headerContext.class,0);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section; }
	}

	public final SectionContext section() throws RecognitionException {
		SectionContext _localctx = new SectionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_section);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(987);
			section_header();
			setState(991);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(988);
					paragraph();
					}
					} 
				}
				setState(993);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarativesContext extends ParserRuleContext {
		public Token DECLARATIVES;
		public Token END;
		public List<TerminalNode> DECLARATIVES() { return getTokens(cobolParser.DECLARATIVES); }
		public TerminalNode DECLARATIVES(int i) {
			return getToken(cobolParser.DECLARATIVES, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public List<Declaratives_sectionContext> declaratives_section() {
			return getRuleContexts(Declaratives_sectionContext.class);
		}
		public Declaratives_sectionContext declaratives_section(int i) {
			return getRuleContext(Declaratives_sectionContext.class,i);
		}
		public DeclarativesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaratives; }
	}

	public final DeclarativesContext declaratives() throws RecognitionException {
		DeclarativesContext _localctx = new DeclarativesContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_declaratives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(994);
			((DeclarativesContext)_localctx).DECLARATIVES = match(DECLARATIVES);
			setState(995);
			if (!((((DeclarativesContext)_localctx).DECLARATIVES!=null?((DeclarativesContext)_localctx).DECLARATIVES.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$DECLARATIVES.pos <= 4");
			setState(996);
			match(DOT_);
			setState(998); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(997);
				declaratives_section();
				}
				}
				setState(1000); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(1002);
			((DeclarativesContext)_localctx).END = match(END);
			setState(1003);
			if (!((((DeclarativesContext)_localctx).END!=null?((DeclarativesContext)_localctx).END.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$END.pos <= 4");
			setState(1004);
			((DeclarativesContext)_localctx).DECLARATIVES = match(DECLARATIVES);
			setState(1005);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declaratives_sectionContext extends ParserRuleContext {
		public Section_headerContext section_header() {
			return getRuleContext(Section_headerContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public Declaratives_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaratives_section; }
	}

	public final Declaratives_sectionContext declaratives_section() throws RecognitionException {
		Declaratives_sectionContext _localctx = new Declaratives_sectionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_declaratives_section);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1007);
			section_header();
			setState(1008);
			use_statement();
			setState(1012);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1009);
					paragraph();
					}
					} 
				}
				setState(1014);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParagraphContext extends ParserRuleContext {
		public Token paragraph_name;
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public List<SentenseContext> sentense() {
			return getRuleContexts(SentenseContext.class);
		}
		public SentenseContext sentense(int i) {
			return getRuleContext(SentenseContext.class,i);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paragraph; }
	}

	public final ParagraphContext paragraph() throws RecognitionException {
		ParagraphContext _localctx = new ParagraphContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_paragraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1015);
			((ParagraphContext)_localctx).paragraph_name = match(USER_DEFINED_WORD);
			setState(1016);
			if (!((((ParagraphContext)_localctx).paragraph_name!=null?((ParagraphContext)_localctx).paragraph_name.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$paragraph_name.pos <= 4");
			setState(1017);
			match(DOT_);
			setState(1021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (COPY - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (RELEASE - 315)) | (1L << (REPLACE - 315)) | (1L << (RETURN - 315)) | (1L << (REWRITE - 315)) | (1L << (SEARCH - 315)) | (1L << (SET - 315)) | (1L << (SORT - 315)) | (1L << (START - 315)) | (1L << (STOP - 315)) | (1L << (STRING - 315)) | (1L << (SUBTRACT - 315)) | (1L << (SUPPRESS - 315)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TERMINATE - 384)) | (1L << (UNLOCK - 384)) | (1L << (UNSTRING - 384)) | (1L << (WRITE - 384)))) != 0)) {
				{
				{
				setState(1018);
				sentense();
				}
				}
				setState(1023);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SentenseContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public SentenseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sentense; }
	}

	public final SentenseContext sentense() throws RecognitionException {
		SentenseContext _localctx = new SentenseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_sentense);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1025); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1024);
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1027); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1029);
				match(DOT_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(cobolParser.USE, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Use_onContext use_on() {
			return getRuleContext(Use_onContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode REPORTING() { return getToken(cobolParser.REPORTING, 0); }
		public Group_data_nameContext group_data_name() {
			return getRuleContext(Group_data_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public TerminalNode EXCEPTION() { return getToken(cobolParser.EXCEPTION, 0); }
		public TerminalNode ERROR() { return getToken(cobolParser.ERROR, 0); }
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_use_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1032);
			match(USE);
			setState(1034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(1033);
				match(GLOBAL);
				}
			}

			setState(1049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER:
				{
				setState(1036);
				match(AFTER);
				setState(1038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STANDARD) {
					{
					setState(1037);
					match(STANDARD);
					}
				}

				setState(1040);
				_la = _input.LA(1);
				if ( !(_la==ERROR || _la==EXCEPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1041);
				match(PROCEDURE);
				setState(1043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1042);
					match(ON);
					}
				}

				setState(1045);
				use_on();
				}
				break;
			case BEFORE:
				{
				setState(1046);
				match(BEFORE);
				setState(1047);
				match(REPORTING);
				setState(1048);
				group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1051);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_data_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Group_data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_data_name; }
	}

	public final Group_data_nameContext group_data_name() throws RecognitionException {
		Group_data_nameContext _localctx = new Group_data_nameContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_group_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1053);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_onContext extends ParserRuleContext {
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode I_O() { return getToken(cobolParser.I_O, 0); }
		public TerminalNode EXTEND() { return getToken(cobolParser.EXTEND, 0); }
		public Use_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_on; }
	}

	public final Use_onContext use_on() throws RecognitionException {
		Use_onContext _localctx = new Use_onContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_use_on);
		int _la;
		try {
			setState(1064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1056); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1055);
					file_name();
					}
					}
					setState(1058); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD );
				}
				break;
			case INPUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1060);
				match(INPUT);
				}
				break;
			case OUTPUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1061);
				match(OUTPUT);
				}
				break;
			case I_O:
				enterOuterAlt(_localctx, 4);
				{
				setState(1062);
				match(I_O);
				}
				break;
			case EXTEND:
				enterOuterAlt(_localctx, 5);
				{
				setState(1063);
				match(EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Section_headerContext extends ParserRuleContext {
		public Token section_name;
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Segment_numberContext segment_number() {
			return getRuleContext(Segment_numberContext.class,0);
		}
		public Section_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section_header; }
	}

	public final Section_headerContext section_header() throws RecognitionException {
		Section_headerContext _localctx = new Section_headerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_section_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1066);
			((Section_headerContext)_localctx).section_name = match(USER_DEFINED_WORD);
			setState(1067);
			if (!((((Section_headerContext)_localctx).section_name!=null?((Section_headerContext)_localctx).section_name.getCharPositionInLine():0) <= 4)) throw new FailedPredicateException(this, "$section_name.pos <= 4");
			setState(1068);
			match(SECTION);
			setState(1070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMERIC_LITERAL) {
				{
				setState(1069);
				segment_number();
				}
			}

			setState(1072);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public List<Qualified_data_itemContext> qualified_data_item() {
			return getRuleContexts(Qualified_data_itemContext.class);
		}
		public Qualified_data_itemContext qualified_data_item(int i) {
			return getRuleContext(Qualified_data_itemContext.class,i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using; }
	}

	public final UsingContext using() throws RecognitionException {
		UsingContext _localctx = new UsingContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_using);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1074);
			match(USING);
			setState(1076); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1075);
				qualified_data_item();
				}
				}
				setState(1078); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GivingContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_giving; }
	}

	public final GivingContext giving() throws RecognitionException {
		GivingContext _localctx = new GivingContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_giving);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1080);
			match(GIVING);
			setState(1081);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Accept_statementContext accept_statement() {
			return getRuleContext(Accept_statementContext.class,0);
		}
		public Add_statementContext add_statement() {
			return getRuleContext(Add_statementContext.class,0);
		}
		public Alter_statementContext alter_statement() {
			return getRuleContext(Alter_statementContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public Cancel_statementContext cancel_statement() {
			return getRuleContext(Cancel_statementContext.class,0);
		}
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Compute_statementContext compute_statement() {
			return getRuleContext(Compute_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Display_statementContext display_statement() {
			return getRuleContext(Display_statementContext.class,0);
		}
		public Divide_statementContext divide_statement() {
			return getRuleContext(Divide_statementContext.class,0);
		}
		public Evaluate_statementContext evaluate_statement() {
			return getRuleContext(Evaluate_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Exit_program_statementContext exit_program_statement() {
			return getRuleContext(Exit_program_statementContext.class,0);
		}
		public Generate_statementContext generate_statement() {
			return getRuleContext(Generate_statementContext.class,0);
		}
		public Go_to_statementContext go_to_statement() {
			return getRuleContext(Go_to_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Initialize_statementContext initialize_statement() {
			return getRuleContext(Initialize_statementContext.class,0);
		}
		public Initiate_statementContext initiate_statement() {
			return getRuleContext(Initiate_statementContext.class,0);
		}
		public Inspect_statementContext inspect_statement() {
			return getRuleContext(Inspect_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Move_statementContext move_statement() {
			return getRuleContext(Move_statementContext.class,0);
		}
		public Multiply_statementContext multiply_statement() {
			return getRuleContext(Multiply_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Perform_statementContext perform_statement() {
			return getRuleContext(Perform_statementContext.class,0);
		}
		public Read_statementContext read_statement() {
			return getRuleContext(Read_statementContext.class,0);
		}
		public Release_statementContext release_statement() {
			return getRuleContext(Release_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Rewrite_statementContext rewrite_statement() {
			return getRuleContext(Rewrite_statementContext.class,0);
		}
		public Search_statementContext search_statement() {
			return getRuleContext(Search_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Sort_statementContext sort_statement() {
			return getRuleContext(Sort_statementContext.class,0);
		}
		public Start_statementContext start_statement() {
			return getRuleContext(Start_statementContext.class,0);
		}
		public Stop_statementContext stop_statement() {
			return getRuleContext(Stop_statementContext.class,0);
		}
		public String_statementContext string_statement() {
			return getRuleContext(String_statementContext.class,0);
		}
		public Subtract_statementContext subtract_statement() {
			return getRuleContext(Subtract_statementContext.class,0);
		}
		public Suppress_statementContext suppress_statement() {
			return getRuleContext(Suppress_statementContext.class,0);
		}
		public Terminate_statementContext terminate_statement() {
			return getRuleContext(Terminate_statementContext.class,0);
		}
		public Unlock_statementContext unlock_statement() {
			return getRuleContext(Unlock_statementContext.class,0);
		}
		public Unstring_statementContext unstring_statement() {
			return getRuleContext(Unstring_statementContext.class,0);
		}
		public Write_statementContext write_statement() {
			return getRuleContext(Write_statementContext.class,0);
		}
		public Replace_statementContext replace_statement() {
			return getRuleContext(Replace_statementContext.class,0);
		}
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Record_statementContext record_statement() {
			return getRuleContext(Record_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_statement);
		try {
			setState(1127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1083);
				accept_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1084);
				add_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1085);
				alter_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1086);
				call_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1087);
				cancel_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1088);
				close_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1089);
				compute_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1090);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1091);
				delete_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1092);
				display_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1093);
				divide_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1094);
				evaluate_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1095);
				exit_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1096);
				exit_program_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1097);
				generate_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1098);
				go_to_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1099);
				if_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1100);
				initialize_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1101);
				initiate_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1102);
				inspect_statement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1103);
				merge_statement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1104);
				move_statement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1105);
				multiply_statement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1106);
				open_statement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1107);
				perform_statement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1108);
				read_statement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1109);
				release_statement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1110);
				return_statement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1111);
				rewrite_statement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1112);
				search_statement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1113);
				set_statement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1114);
				sort_statement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1115);
				start_statement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1116);
				stop_statement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1117);
				string_statement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1118);
				subtract_statement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1119);
				suppress_statement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1120);
				terminate_statement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1121);
				unlock_statement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1122);
				unstring_statement();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1123);
				write_statement();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1124);
				replace_statement();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1125);
				copy_statement();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1126);
				record_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statementContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(cobolParser.COPY, 0); }
		public Text_nameContext text_name() {
			return getRuleContext(Text_nameContext.class,0);
		}
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode DICTIONARY() { return getToken(cobolParser.DICTIONARY, 0); }
		public TerminalNode REPLACING() { return getToken(cobolParser.REPLACING, 0); }
		public Library_nameContext library_name() {
			return getRuleContext(Library_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public List<Copy_replacingContext> copy_replacing() {
			return getRuleContexts(Copy_replacingContext.class);
		}
		public Copy_replacingContext copy_replacing(int i) {
			return getRuleContext(Copy_replacingContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_copy_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1129);
			match(COPY);
			setState(1139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(1130);
				text_name();
				setState(1133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==OF) {
					{
					setState(1131);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==OF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1132);
					library_name();
					}
				}

				}
				break;
			case 2:
				{
				setState(1135);
				record_name();
				setState(1136);
				match(FROM);
				setState(1137);
				match(DICTIONARY);
				}
				break;
			}
			setState(1150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACING) {
				{
				setState(1141);
				match(REPLACING);
				setState(1146); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1142);
						copy_replacing();
						setState(1143);
						match(BY);
						setState(1144);
						copy_replacing();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1148); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_replacingContext extends ParserRuleContext {
		public TerminalNode PSEUDO_TEXT() { return getToken(cobolParser.PSEUDO_TEXT, 0); }
		public List<TerminalNode> USER_DEFINED_WORD() { return getTokens(cobolParser.USER_DEFINED_WORD); }
		public TerminalNode USER_DEFINED_WORD(int i) {
			return getToken(cobolParser.USER_DEFINED_WORD, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Copy_replacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_replacing; }
	}

	public final Copy_replacingContext copy_replacing() throws RecognitionException {
		Copy_replacingContext _localctx = new Copy_replacingContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_copy_replacing);
		try {
			int _alt;
			setState(1160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PSEUDO_TEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1152);
				match(PSEUDO_TEXT);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1154); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1153);
						match(USER_DEFINED_WORD);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1156); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,43,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1158);
				match(STRING_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1159);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_record_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Library_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Library_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library_name; }
	}

	public final Library_nameContext library_name() throws RecognitionException {
		Library_nameContext _localctx = new Library_nameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_library_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1164);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Text_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Text_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_text_name; }
	}

	public final Text_nameContext text_name() throws RecognitionException {
		Text_nameContext _localctx = new Text_nameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_text_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1166);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_statementContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(cobolParser.REPLACE, 0); }
		public TerminalNode OFF() { return getToken(cobolParser.OFF, 0); }
		public List<TerminalNode> PSEUDO_TEXT() { return getTokens(cobolParser.PSEUDO_TEXT); }
		public TerminalNode PSEUDO_TEXT(int i) {
			return getToken(cobolParser.PSEUDO_TEXT, i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public Replace_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_statement; }
	}

	public final Replace_statementContext replace_statement() throws RecognitionException {
		Replace_statementContext _localctx = new Replace_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_replace_statement);
		int _la;
		try {
			setState(1178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1168);
				match(REPLACE);
				setState(1169);
				match(OFF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1170);
				match(REPLACE);
				setState(1174); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1171);
					match(PSEUDO_TEXT);
					setState(1172);
					match(BY);
					setState(1173);
					match(PSEUDO_TEXT);
					}
					}
					setState(1176); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PSEUDO_TEXT );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_statementContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(cobolParser.WRITE, 0); }
		public Rec_nameContext rec_name() {
			return getRuleContext(Rec_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public At_eop_variantsContext at_eop_variants() {
			return getRuleContext(At_eop_variantsContext.class,0);
		}
		public Advance_valueContext advance_value() {
			return getRuleContext(Advance_valueContext.class,0);
		}
		public TerminalNode END_WRITE() { return getToken(cobolParser.END_WRITE, 0); }
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public TerminalNode ADVANCING() { return getToken(cobolParser.ADVANCING, 0); }
		public Write_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_statement; }
	}

	public final Write_statementContext write_statement() throws RecognitionException {
		Write_statementContext _localctx = new Write_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_write_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1180);
			match(WRITE);
			setState(1181);
			rec_name();
			setState(1184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1182);
				match(FROM);
				setState(1183);
				src_item();
				}
			}

			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING) {
				{
				setState(1186);
				match(ALLOWING);
				setState(1187);
				match(NO);
				setState(1189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OTHERS) {
					{
					setState(1188);
					match(OTHERS);
					}
				}

				}
			}

			setState(1210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1193);
				invalid_key_variants();
				}
				break;
			case 2:
				{
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(1194);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1196);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ADVANCING) {
						{
						setState(1195);
						match(ADVANCING);
						}
					}

					setState(1198);
					advance_value();
					}
				}

				setState(1201);
				at_eop_variants();
				}
				break;
			case 3:
				{
				setState(1202);
				_la = _input.LA(1);
				if ( !(_la==AFTER || _la==BEFORE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADVANCING) {
					{
					setState(1203);
					match(ADVANCING);
					}
				}

				setState(1206);
				advance_value();
				setState(1208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1207);
					at_eop_variants();
					}
					break;
				}
				}
				break;
			}
			setState(1213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1212);
				match(END_WRITE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advance_valueContext extends ParserRuleContext {
		public Advance_numContext advance_num() {
			return getRuleContext(Advance_numContext.class,0);
		}
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode LINES() { return getToken(cobolParser.LINES, 0); }
		public Top_of_page_nameContext top_of_page_name() {
			return getRuleContext(Top_of_page_nameContext.class,0);
		}
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Advance_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advance_value; }
	}

	public final Advance_valueContext advance_value() throws RecognitionException {
		Advance_valueContext _localctx = new Advance_valueContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_advance_value);
		int _la;
		try {
			setState(1221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1215);
				advance_num();
				setState(1217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINE || _la==LINES) {
					{
					setState(1216);
					_la = _input.LA(1);
					if ( !(_la==LINE || _la==LINES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1219);
				top_of_page_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1220);
				match(PAGE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advance_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Advance_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advance_num; }
	}

	public final Advance_numContext advance_num() throws RecognitionException {
		Advance_numContext _localctx = new Advance_numContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_advance_num);
		try {
			setState(1225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1223);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1224);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_statementContext extends ParserRuleContext {
		public TerminalNode UNSTRING() { return getToken(cobolParser.UNSTRING, 0); }
		public Unstring_srcContext unstring_src() {
			return getRuleContext(Unstring_srcContext.class,0);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode DELIMITED() { return getToken(cobolParser.DELIMITED, 0); }
		public List<Unstring_delim_clauseContext> unstring_delim_clause() {
			return getRuleContexts(Unstring_delim_clauseContext.class);
		}
		public Unstring_delim_clauseContext unstring_delim_clause(int i) {
			return getRuleContext(Unstring_delim_clauseContext.class,i);
		}
		public List<Unstring_dest_clauseContext> unstring_dest_clause() {
			return getRuleContexts(Unstring_dest_clauseContext.class);
		}
		public Unstring_dest_clauseContext unstring_dest_clause(int i) {
			return getRuleContext(Unstring_dest_clauseContext.class,i);
		}
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public String_pointerContext string_pointer() {
			return getRuleContext(String_pointerContext.class,0);
		}
		public TerminalNode TALLYING() { return getToken(cobolParser.TALLYING, 0); }
		public Unstring_tally_ctrContext unstring_tally_ctr() {
			return getRuleContext(Unstring_tally_ctrContext.class,0);
		}
		public On_overflow_variantsContext on_overflow_variants() {
			return getRuleContext(On_overflow_variantsContext.class,0);
		}
		public TerminalNode END_UNSTRING() { return getToken(cobolParser.END_UNSTRING, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public List<TerminalNode> OR() { return getTokens(cobolParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(cobolParser.OR, i);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Unstring_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_statement; }
	}

	public final Unstring_statementContext unstring_statement() throws RecognitionException {
		Unstring_statementContext _localctx = new Unstring_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_unstring_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1227);
			match(UNSTRING);
			setState(1228);
			unstring_src();
			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELIMITED) {
				{
				setState(1229);
				match(DELIMITED);
				setState(1231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1230);
					match(BY);
					}
				}

				setState(1233);
				unstring_delim_clause();
				setState(1238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OR) {
					{
					{
					setState(1234);
					match(OR);
					setState(1235);
					unstring_delim_clause();
					}
					}
					setState(1240);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1243);
			match(INTO);
			setState(1245); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1244);
					unstring_dest_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1247); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POINTER || _la==WITH) {
				{
				setState(1250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1249);
					match(WITH);
					}
				}

				setState(1252);
				match(POINTER);
				setState(1253);
				string_pointer();
				}
			}

			setState(1261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TALLYING) {
				{
				setState(1256);
				match(TALLYING);
				setState(1258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1257);
					match(IN);
					}
				}

				setState(1260);
				unstring_tally_ctr();
				}
			}

			setState(1264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				setState(1263);
				on_overflow_variants();
				}
				break;
			}
			setState(1267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1266);
				match(END_UNSTRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_tally_ctrContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Unstring_tally_ctrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_tally_ctr; }
	}

	public final Unstring_tally_ctrContext unstring_tally_ctr() throws RecognitionException {
		Unstring_tally_ctrContext _localctx = new Unstring_tally_ctrContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_unstring_tally_ctr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1269);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_dest_clauseContext extends ParserRuleContext {
		public Dest_stringContext dest_string() {
			return getRuleContext(Dest_stringContext.class,0);
		}
		public TerminalNode DELIMITER() { return getToken(cobolParser.DELIMITER, 0); }
		public Delim_destContext delim_dest() {
			return getRuleContext(Delim_destContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(cobolParser.COUNT, 0); }
		public CountrContext countr() {
			return getRuleContext(CountrContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(cobolParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(cobolParser.IN, i);
		}
		public Unstring_dest_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_dest_clause; }
	}

	public final Unstring_dest_clauseContext unstring_dest_clause() throws RecognitionException {
		Unstring_dest_clauseContext _localctx = new Unstring_dest_clauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_unstring_dest_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			dest_string();
			setState(1277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELIMITER) {
				{
				setState(1272);
				match(DELIMITER);
				setState(1274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1273);
					match(IN);
					}
				}

				setState(1276);
				delim_dest();
				}
			}

			setState(1284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNT) {
				{
				setState(1279);
				match(COUNT);
				setState(1281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1280);
					match(IN);
					}
				}

				setState(1283);
				countr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CountrContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public CountrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countr; }
	}

	public final CountrContext countr() throws RecognitionException {
		CountrContext _localctx = new CountrContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_countr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1286);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dest_stringContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Dest_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dest_string; }
	}

	public final Dest_stringContext dest_string() throws RecognitionException {
		Dest_stringContext _localctx = new Dest_stringContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dest_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_destContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Delim_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_dest; }
	}

	public final Delim_destContext delim_dest() throws RecognitionException {
		Delim_destContext _localctx = new Delim_destContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_delim_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1290);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_delim_clauseContext extends ParserRuleContext {
		public Unstring_delimContext unstring_delim() {
			return getRuleContext(Unstring_delimContext.class,0);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public Unstring_delim_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_delim_clause; }
	}

	public final Unstring_delim_clauseContext unstring_delim_clause() throws RecognitionException {
		Unstring_delim_clauseContext _localctx = new Unstring_delim_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_unstring_delim_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1292);
				match(ALL);
				}
			}

			setState(1295);
			unstring_delim();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_delimContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Unstring_delimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_delim; }
	}

	public final Unstring_delimContext unstring_delim() throws RecognitionException {
		Unstring_delimContext _localctx = new Unstring_delimContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_unstring_delim);
		try {
			setState(1300);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1297);
				identifier();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				match(STRING_LITERAL);
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 3);
				{
				setState(1299);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_srcContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unstring_srcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_src; }
	}

	public final Unstring_srcContext unstring_src() throws RecognitionException {
		Unstring_srcContext _localctx = new Unstring_srcContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_unstring_src);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unlock_statementContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(cobolParser.UNLOCK, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public Unlock_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlock_statement; }
	}

	public final Unlock_statementContext unlock_statement() throws RecognitionException {
		Unlock_statementContext _localctx = new Unlock_statementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_unlock_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1304);
			match(UNLOCK);
			setState(1305);
			file_name();
			setState(1312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1306);
				match(RECORD);
				}
				break;
			case 2:
				{
				setState(1307);
				match(RECORDS);
				}
				break;
			case 3:
				{
				setState(1308);
				match(ALL);
				setState(1310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECORDS) {
					{
					setState(1309);
					match(RECORDS);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Terminate_statementContext extends ParserRuleContext {
		public TerminalNode TERMINATE() { return getToken(cobolParser.TERMINATE, 0); }
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public Terminate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terminate_statement; }
	}

	public final Terminate_statementContext terminate_statement() throws RecognitionException {
		Terminate_statementContext _localctx = new Terminate_statementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_terminate_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(TERMINATE);
			setState(1316); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1315);
					report_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1318); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Suppress_statementContext extends ParserRuleContext {
		public TerminalNode SUPPRESS() { return getToken(cobolParser.SUPPRESS, 0); }
		public TerminalNode PRINTING() { return getToken(cobolParser.PRINTING, 0); }
		public Suppress_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_suppress_statement; }
	}

	public final Suppress_statementContext suppress_statement() throws RecognitionException {
		Suppress_statementContext _localctx = new Suppress_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_suppress_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1320);
			match(SUPPRESS);
			setState(1322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRINTING) {
				{
				setState(1321);
				match(PRINTING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtract_statementContext extends ParserRuleContext {
		public TerminalNode SUBTRACT() { return getToken(cobolParser.SUBTRACT, 0); }
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public List<Sub_grpContext> sub_grp() {
			return getRuleContexts(Sub_grpContext.class);
		}
		public Sub_grpContext sub_grp(int i) {
			return getRuleContext(Sub_grpContext.class,i);
		}
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_SUBTRACT() { return getToken(cobolParser.END_SUBTRACT, 0); }
		public List<Sub_numContext> sub_num() {
			return getRuleContexts(Sub_numContext.class);
		}
		public Sub_numContext sub_num(int i) {
			return getRuleContext(Sub_numContext.class,i);
		}
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Subtract_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtract_statement; }
	}

	public final Subtract_statementContext subtract_statement() throws RecognitionException {
		Subtract_statementContext _localctx = new Subtract_statementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_subtract_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(SUBTRACT);
			setState(1351);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case NUMERIC_LITERAL:
			case USER_DEFINED_WORD:
				{
				setState(1326); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1325);
					sub_num();
					}
					}
					setState(1328); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || _la==NUMERIC_LITERAL || _la==USER_DEFINED_WORD );
				setState(1330);
				match(FROM);
				setState(1334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					setState(1331);
					sub_num();
					setState(1332);
					match(GIVING);
					}
					break;
				}
				setState(1340); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1336);
						identifier_result();
						setState(1338);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ROUNDED) {
							{
							setState(1337);
							match(ROUNDED);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1342); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case CORR:
			case CORRESPONDING:
				{
				setState(1344);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1345);
				sub_grp();
				setState(1346);
				match(FROM);
				setState(1347);
				sub_grp();
				setState(1349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(1348);
					match(ROUNDED);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1353);
				on_size_variants();
				}
				break;
			}
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1356);
				match(END_SUBTRACT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_grpContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sub_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_grp; }
	}

	public final Sub_grpContext sub_grp() throws RecognitionException {
		Sub_grpContext _localctx = new Sub_grpContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_sub_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1359);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Sub_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_num; }
	}

	public final Sub_numContext sub_num() throws RecognitionException {
		Sub_numContext _localctx = new Sub_numContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_sub_num);
		try {
			setState(1363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1361);
				match(NUMERIC_LITERAL);
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1362);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_statementContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(cobolParser.STRING, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public String_destContext string_dest() {
			return getRuleContext(String_destContext.class,0);
		}
		public List<TerminalNode> DELIMITED() { return getTokens(cobolParser.DELIMITED); }
		public TerminalNode DELIMITED(int i) {
			return getToken(cobolParser.DELIMITED, i);
		}
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public String_pointerContext string_pointer() {
			return getRuleContext(String_pointerContext.class,0);
		}
		public On_overflow_variantsContext on_overflow_variants() {
			return getRuleContext(On_overflow_variantsContext.class,0);
		}
		public TerminalNode END_STRING() { return getToken(cobolParser.END_STRING, 0); }
		public List<TerminalNode> SIZE() { return getTokens(cobolParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(cobolParser.SIZE, i);
		}
		public List<String_delimContext> string_delim() {
			return getRuleContexts(String_delimContext.class);
		}
		public String_delimContext string_delim(int i) {
			return getRuleContext(String_delimContext.class,i);
		}
		public List<String_srcContext> string_src() {
			return getRuleContexts(String_srcContext.class);
		}
		public String_srcContext string_src(int i) {
			return getRuleContext(String_srcContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public String_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_statement; }
	}

	public final String_statementContext string_statement() throws RecognitionException {
		String_statementContext _localctx = new String_statementContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_string_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1365);
			match(STRING);
			setState(1379); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1367); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1366);
					string_src();
					}
					}
					setState(1369); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL || _la==ALL || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (QUOTE - 302)) | (1L << (QUOTES - 302)) | (1L << (SPACE - 302)) | (1L << (SPACES - 302)))) != 0) || _la==ZERO || _la==USER_DEFINED_WORD );
				setState(1371);
				match(DELIMITED);
				setState(1373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1372);
					match(BY);
					}
				}

				setState(1377);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SIZE:
					{
					setState(1375);
					match(SIZE);
					}
					break;
				case STRING_LITERAL:
				case ALL:
				case HIGH_VALUE:
				case HIGH_VALUES:
				case LOW_VALUE:
				case LOW_VALUES:
				case QUOTE:
				case QUOTES:
				case SPACE:
				case SPACES:
				case ZERO:
				case USER_DEFINED_WORD:
					{
					setState(1376);
					string_delim();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(1381); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL || _la==ALL || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (QUOTE - 302)) | (1L << (QUOTES - 302)) | (1L << (SPACE - 302)) | (1L << (SPACES - 302)))) != 0) || _la==ZERO || _la==USER_DEFINED_WORD );
			setState(1383);
			match(INTO);
			setState(1384);
			string_dest();
			setState(1390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POINTER || _la==WITH) {
				{
				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1385);
					match(WITH);
					}
				}

				setState(1388);
				match(POINTER);
				setState(1389);
				string_pointer();
				}
			}

			setState(1393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1392);
				on_overflow_variants();
				}
				break;
			}
			setState(1396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(1395);
				match(END_STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_pointerContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public String_pointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_pointer; }
	}

	public final String_pointerContext string_pointer() throws RecognitionException {
		String_pointerContext _localctx = new String_pointerContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_string_pointer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1398);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_destContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public String_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_dest; }
	}

	public final String_destContext string_dest() throws RecognitionException {
		String_destContext _localctx = new String_destContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_string_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_delimContext extends ParserRuleContext {
		public String_srcContext string_src() {
			return getRuleContext(String_srcContext.class,0);
		}
		public String_delimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_delim; }
	}

	public final String_delimContext string_delim() throws RecognitionException {
		String_delimContext _localctx = new String_delimContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_string_delim);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			string_src();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_srcContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public String_srcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_src; }
	}

	public final String_srcContext string_src() throws RecognitionException {
		String_srcContext _localctx = new String_srcContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_string_src);
		try {
			setState(1407);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1404);
				qualified_data_item();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1405);
				match(STRING_LITERAL);
				}
				break;
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 3);
				{
				setState(1406);
				figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_statementContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(cobolParser.STOP, 0); }
		public TerminalNode RUN() { return getToken(cobolParser.RUN, 0); }
		public Stop_dispContext stop_disp() {
			return getRuleContext(Stop_dispContext.class,0);
		}
		public Stop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_statement; }
	}

	public final Stop_statementContext stop_statement() throws RecognitionException {
		Stop_statementContext _localctx = new Stop_statementContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_stop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1409);
			match(STOP);
			setState(1412);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RUN:
				{
				setState(1410);
				match(RUN);
				}
				break;
			case STRING_LITERAL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case NUMERIC_LITERAL:
				{
				setState(1411);
				stop_disp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_dispContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Stop_dispContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_disp; }
	}

	public final Stop_dispContext stop_disp() throws RecognitionException {
		Stop_dispContext _localctx = new Stop_dispContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_stop_disp);
		try {
			setState(1417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1414);
				match(STRING_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1415);
				match(NUMERIC_LITERAL);
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 3);
				{
				setState(1416);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_statementContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(cobolParser.START, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Condition_operatorContext condition_operator() {
			return getRuleContext(Condition_operatorContext.class,0);
		}
		public Sort_key_dataContext sort_key_data() {
			return getRuleContext(Sort_key_dataContext.class,0);
		}
		public Regard_allowContext regard_allow() {
			return getRuleContext(Regard_allowContext.class,0);
		}
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_START() { return getToken(cobolParser.END_START, 0); }
		public Start_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_statement; }
	}

	public final Start_statementContext start_statement() throws RecognitionException {
		Start_statementContext _localctx = new Start_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_start_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			match(START);
			setState(1420);
			file_name();
			setState(1425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(1421);
				match(KEY);
				setState(1422);
				condition_operator();
				setState(1423);
				sort_key_data();
				}
			}

			setState(1428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING || _la==REGARDLESS) {
				{
				setState(1427);
				regard_allow();
				}
			}

			setState(1431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1430);
				invalid_key_variants();
				}
				break;
			}
			setState(1434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1433);
				match(END_START);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_key_dataContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sort_key_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key_data; }
	}

	public final Sort_key_dataContext sort_key_data() throws RecognitionException {
		Sort_key_dataContext _localctx = new Sort_key_dataContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_sort_key_data);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1436);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_statementContext extends ParserRuleContext {
		public Sort_statement_form1Context sort_statement_form1() {
			return getRuleContext(Sort_statement_form1Context.class,0);
		}
		public Sort_statement_form2Context sort_statement_form2() {
			return getRuleContext(Sort_statement_form2Context.class,0);
		}
		public Sort_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_statement; }
	}

	public final Sort_statementContext sort_statement() throws RecognitionException {
		Sort_statementContext _localctx = new Sort_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_sort_statement);
		try {
			setState(1440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1438);
				sort_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1439);
				sort_statement_form2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_statement_form1Context extends ParserRuleContext {
		public TerminalNode SORT() { return getToken(cobolParser.SORT, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<On_sort_keyContext> on_sort_key() {
			return getRuleContexts(On_sort_keyContext.class);
		}
		public On_sort_keyContext on_sort_key(int i) {
			return getRuleContext(On_sort_keyContext.class,i);
		}
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public List<Procedure_isContext> procedure_is() {
			return getRuleContexts(Procedure_isContext.class);
		}
		public Procedure_isContext procedure_is(int i) {
			return getRuleContext(Procedure_isContext.class,i);
		}
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode ORDER() { return getToken(cobolParser.ORDER, 0); }
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Sort_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_statement_form1; }
	}

	public final Sort_statement_form1Context sort_statement_form1() throws RecognitionException {
		Sort_statement_form1Context _localctx = new Sort_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 122, RULE_sort_statement_form1);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1442);
			match(SORT);
			setState(1443);
			file_name();
			setState(1445); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1444);
					on_sort_key();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1447); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(1450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1449);
					match(WITH);
					}
				}

				setState(1452);
				match(DUPLICATES);
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1453);
					match(IN);
					}
				}

				setState(1457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1456);
					match(ORDER);
					}
				}

				}
			}

			setState(1469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING || _la==SEQUENCE) {
				{
				setState(1462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING) {
					{
					setState(1461);
					match(COLLATING);
					}
				}

				setState(1464);
				match(SEQUENCE);
				setState(1466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1465);
					match(IS);
					}
				}

				setState(1468);
				alpha_name();
				}
			}

			setState(1481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INPUT || _la==USING) {
				{
				setState(1479);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INPUT:
					{
					setState(1471);
					match(INPUT);
					setState(1472);
					procedure_is();
					}
					break;
				case USING:
					{
					setState(1473);
					match(USING);
					setState(1475); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1474);
							file_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1477); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,112,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GIVING || _la==OUTPUT) {
				{
				setState(1491);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OUTPUT:
					{
					setState(1483);
					match(OUTPUT);
					setState(1484);
					procedure_is();
					}
					break;
				case GIVING:
					{
					setState(1485);
					match(GIVING);
					setState(1487); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1486);
							file_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1489); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,115,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_statement_form2Context extends ParserRuleContext {
		public TerminalNode SORT() { return getToken(cobolParser.SORT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<On_sort_keyContext> on_sort_key() {
			return getRuleContexts(On_sort_keyContext.class);
		}
		public On_sort_keyContext on_sort_key(int i) {
			return getRuleContext(On_sort_keyContext.class,i);
		}
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode ORDER() { return getToken(cobolParser.ORDER, 0); }
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Sort_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_statement_form2; }
	}

	public final Sort_statement_form2Context sort_statement_form2() throws RecognitionException {
		Sort_statement_form2Context _localctx = new Sort_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 124, RULE_sort_statement_form2);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			match(SORT);
			setState(1496);
			table_name();
			setState(1500);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1497);
					on_sort_key();
					}
					} 
				}
				setState(1502);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			}
			setState(1513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(1504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1503);
					match(WITH);
					}
				}

				setState(1506);
				match(DUPLICATES);
				setState(1508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1507);
					match(IN);
					}
				}

				setState(1511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1510);
					match(ORDER);
					}
				}

				}
			}

			setState(1523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING || _la==SEQUENCE) {
				{
				setState(1516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING) {
					{
					setState(1515);
					match(COLLATING);
					}
				}

				setState(1518);
				match(SEQUENCE);
				setState(1520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1519);
					match(IS);
					}
				}

				setState(1522);
				alpha_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_isContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Procedure_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_is; }
	}

	public final Procedure_isContext procedure_is() throws RecognitionException {
		Procedure_isContext _localctx = new Procedure_isContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_procedure_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			match(PROCEDURE);
			setState(1529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(1528);
				match(IS);
				}
			}

			setState(1531);
			proc_thru_proc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_sort_keyContext extends ParserRuleContext {
		public List<Sort_keyContext> sort_key() {
			return getRuleContexts(Sort_keyContext.class);
		}
		public Sort_keyContext sort_key(int i) {
			return getRuleContext(Sort_keyContext.class,i);
		}
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public On_sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_sort_key; }
	}

	public final On_sort_keyContext on_sort_key() throws RecognitionException {
		On_sort_keyContext _localctx = new On_sort_keyContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_on_sort_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1533);
				match(ON);
				}
			}

			setState(1536);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(1537);
				match(KEY);
				}
			}

			setState(1540);
			sort_key();
			setState(1544);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1541);
					sort_key();
					}
					} 
				}
				setState(1546);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_sort_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1547);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public Set_statement_form1Context set_statement_form1() {
			return getRuleContext(Set_statement_form1Context.class,0);
		}
		public Set_statement_form2Context set_statement_form2() {
			return getRuleContext(Set_statement_form2Context.class,0);
		}
		public Set_statement_form3Context set_statement_form3() {
			return getRuleContext(Set_statement_form3Context.class,0);
		}
		public Set_statement_form4Context set_statement_form4() {
			return getRuleContext(Set_statement_form4Context.class,0);
		}
		public Set_statement_form5Context set_statement_form5() {
			return getRuleContext(Set_statement_form5Context.class,0);
		}
		public Set_statement_form6Context set_statement_form6() {
			return getRuleContext(Set_statement_form6Context.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_set_statement);
		try {
			setState(1555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1549);
				set_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1550);
				set_statement_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1551);
				set_statement_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1552);
				set_statement_form4();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1553);
				set_statement_form5();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1554);
				set_statement_form6();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form1Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Set_valContext set_val() {
			return getRuleContext(Set_valContext.class,0);
		}
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form1; }
	}

	public final Set_statement_form1Context set_statement_form1() throws RecognitionException {
		Set_statement_form1Context _localctx = new Set_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 136, RULE_set_statement_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1557);
			match(SET);
			setState(1559); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1558);
				identifier_result();
				}
				}
				setState(1561); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(1563);
			match(TO);
			setState(1564);
			set_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form2Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Set_incremContext set_increm() {
			return getRuleContext(Set_incremContext.class,0);
		}
		public TerminalNode UP() { return getToken(cobolParser.UP, 0); }
		public TerminalNode DOWN() { return getToken(cobolParser.DOWN, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form2; }
	}

	public final Set_statement_form2Context set_statement_form2() throws RecognitionException {
		Set_statement_form2Context _localctx = new Set_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 138, RULE_set_statement_form2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1566);
			match(SET);
			setState(1568); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1567);
				identifier_result();
				}
				}
				setState(1570); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(1572);
			_la = _input.LA(1);
			if ( !(_la==DOWN || _la==UP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1573);
			match(BY);
			setState(1574);
			set_increm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form3Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form3; }
	}

	public final Set_statement_form3Context set_statement_form3() throws RecognitionException {
		Set_statement_form3Context _localctx = new Set_statement_form3Context(_ctx, getState());
		enterRule(_localctx, 140, RULE_set_statement_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1576);
			match(SET);
			setState(1578); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1577);
				identifier_result();
				}
				}
				setState(1580); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(1582);
			match(TO);
			setState(1583);
			match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form4Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(cobolParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(cobolParser.TO, i);
		}
		public List<TerminalNode> ON() { return getTokens(cobolParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(cobolParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(cobolParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(cobolParser.OFF, i);
		}
		public Set_statement_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form4; }
	}

	public final Set_statement_form4Context set_statement_form4() throws RecognitionException {
		Set_statement_form4Context _localctx = new Set_statement_form4Context(_ctx, getState());
		enterRule(_localctx, 142, RULE_set_statement_form4);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1585);
			match(SET);
			setState(1590); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1586);
					identifier_result();
					setState(1587);
					match(TO);
					setState(1588);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1592); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,134,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form5Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Set_statement_form5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form5; }
	}

	public final Set_statement_form5Context set_statement_form5() throws RecognitionException {
		Set_statement_form5Context _localctx = new Set_statement_form5Context(_ctx, getState());
		enterRule(_localctx, 144, RULE_set_statement_form5);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1594);
			match(SET);
			setState(1596); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1595);
				identifier_result();
				}
				}
				setState(1598); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(1600);
			match(TO);
			setState(1601);
			match(REFERENCE);
			setState(1603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1602);
				match(OF);
				}
			}

			setState(1605);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form6Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode SUCCESS() { return getToken(cobolParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(cobolParser.FAILURE, 0); }
		public Set_statement_form6Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form6; }
	}

	public final Set_statement_form6Context set_statement_form6() throws RecognitionException {
		Set_statement_form6Context _localctx = new Set_statement_form6Context(_ctx, getState());
		enterRule(_localctx, 146, RULE_set_statement_form6);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			match(SET);
			setState(1608);
			identifier_result();
			setState(1609);
			match(TO);
			setState(1610);
			_la = _input.LA(1);
			if ( !(_la==FAILURE || _la==SUCCESS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_incremContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Set_incremContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_increm; }
	}

	public final Set_incremContext set_increm() throws RecognitionException {
		Set_incremContext _localctx = new Set_incremContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_set_increm);
		try {
			setState(1614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1612);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1613);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_valContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Set_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_val; }
	}

	public final Set_valContext set_val() throws RecognitionException {
		Set_valContext _localctx = new Set_valContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_set_val);
		try {
			setState(1618);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1616);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1617);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_statementContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(cobolParser.SEARCH, 0); }
		public Src_tableContext src_table() {
			return getRuleContext(Src_tableContext.class,0);
		}
		public List<TerminalNode> END_SEARCH() { return getTokens(cobolParser.END_SEARCH); }
		public TerminalNode END_SEARCH(int i) {
			return getToken(cobolParser.END_SEARCH, i);
		}
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public Search_pointerContext search_pointer() {
			return getRuleContext(Search_pointerContext.class,0);
		}
		public At_endContext at_end() {
			return getRuleContext(At_endContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(cobolParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(cobolParser.WHEN, i);
		}
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public List<TerminalNode> NEXT() { return getTokens(cobolParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(cobolParser.NEXT, i);
		}
		public List<TerminalNode> SENTENCE() { return getTokens(cobolParser.SENTENCE); }
		public TerminalNode SENTENCE(int i) {
			return getToken(cobolParser.SENTENCE, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(cobolParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(cobolParser.AND, i);
		}
		public Search_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_statement; }
	}

	public final Search_statementContext search_statement() throws RecognitionException {
		Search_statementContext _localctx = new Search_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_search_statement);
		int _la;
		try {
			int _alt;
			setState(1689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1620);
				match(SEARCH);
				setState(1621);
				src_table();
				setState(1624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(1622);
					match(VARYING);
					setState(1623);
					search_pointer();
					}
				}

				setState(1627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT || _la==END) {
					{
					setState(1626);
					at_end();
					}
				}

				setState(1660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(1636); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1629);
						match(WHEN);
						setState(1630);
						logic_expression(0);
						setState(1632); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(1631);
							statement();
							}
							}
							setState(1634); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (COPY - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (RELEASE - 315)) | (1L << (REPLACE - 315)) | (1L << (RETURN - 315)) | (1L << (REWRITE - 315)) | (1L << (SEARCH - 315)) | (1L << (SET - 315)) | (1L << (SORT - 315)) | (1L << (START - 315)) | (1L << (STOP - 315)) | (1L << (STRING - 315)) | (1L << (SUBTRACT - 315)) | (1L << (SUPPRESS - 315)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TERMINATE - 384)) | (1L << (UNLOCK - 384)) | (1L << (UNSTRING - 384)) | (1L << (WRITE - 384)))) != 0) );
						}
						}
						setState(1638); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHEN );
					setState(1640);
					match(END_SEARCH);
					}
					break;
				case 2:
					{
					setState(1656); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1642);
							match(WHEN);
							setState(1643);
							logic_expression(0);
							setState(1654);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case COPY:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case REPLACE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
								{
								setState(1645); 
								_errHandler.sync(this);
								_alt = 1;
								do {
									switch (_alt) {
									case 1:
										{
										{
										setState(1644);
										statement();
										}
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									setState(1647); 
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
								} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
								setState(1650);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
								case 1:
									{
									setState(1649);
									match(END_SEARCH);
									}
									break;
								}
								}
								break;
							case NEXT:
								{
								setState(1652);
								match(NEXT);
								setState(1653);
								match(SENTENCE);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1658); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1662);
				match(SEARCH);
				setState(1663);
				match(ALL);
				setState(1664);
				src_table();
				setState(1666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT || _la==END) {
					{
					setState(1665);
					at_end();
					}
				}

				setState(1668);
				match(WHEN);
				setState(1669);
				search_condition();
				setState(1674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AND) {
					{
					{
					setState(1670);
					match(AND);
					setState(1671);
					search_condition();
					}
					}
					setState(1676);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1687);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCEPT:
				case ADD:
				case ALTER:
				case CALL:
				case CANCEL:
				case CLOSE:
				case COMPUTE:
				case CONTINUE:
				case COPY:
				case DELETE:
				case DISPLAY:
				case DIVIDE:
				case EVALUATE:
				case EXIT:
				case GENERATE:
				case GO:
				case IF:
				case INITIALIZE:
				case INITIATE:
				case INSPECT:
				case MERGE:
				case MOVE:
				case MULTIPLY:
				case OPEN:
				case PERFORM:
				case READ:
				case RECORD:
				case RELEASE:
				case REPLACE:
				case RETURN:
				case REWRITE:
				case SEARCH:
				case SET:
				case SORT:
				case START:
				case STOP:
				case STRING:
				case SUBTRACT:
				case SUPPRESS:
				case TERMINATE:
				case UNLOCK:
				case UNSTRING:
				case WRITE:
					{
					setState(1678); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1677);
							statement();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1680); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,150,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(1683);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
					case 1:
						{
						setState(1682);
						match(END_SEARCH);
						}
						break;
					}
					}
					break;
				case NEXT:
					{
					setState(1685);
					match(NEXT);
					setState(1686);
					match(SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Search_elemntContext search_elemnt() {
			return getRuleContext(Search_elemntContext.class,0);
		}
		public Search_argContext search_arg() {
			return getRuleContext(Search_argContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Condition_nameContext condition_name() {
			return getRuleContext(Condition_nameContext.class,0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_search_condition);
		int _la;
		try {
			setState(1708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1691);
				search_elemnt();
				setState(1703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1692);
						match(IS);
						}
					}

					setState(1695);
					match(EQUAL);
					setState(1697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(1696);
						match(TO);
						}
					}

					}
					break;
				case 2:
					{
					setState(1700);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1699);
						match(IS);
						}
					}

					setState(1702);
					match(EQUAL_);
					}
					break;
				}
				setState(1705);
				search_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1707);
				condition_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_argContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Search_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_arg; }
	}

	public final Search_argContext search_arg() throws RecognitionException {
		Search_argContext _localctx = new Search_argContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_search_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_elemntContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Search_elemntContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_elemnt; }
	}

	public final Search_elemntContext search_elemnt() throws RecognitionException {
		Search_elemntContext _localctx = new Search_elemntContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_search_elemnt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_pointerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Search_pointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_pointer; }
	}

	public final Search_pointerContext search_pointer() throws RecognitionException {
		Search_pointerContext _localctx = new Search_pointerContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_search_pointer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_tableContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Src_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_table; }
	}

	public final Src_tableContext src_table() throws RecognitionException {
		Src_tableContext _localctx = new Src_tableContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_src_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewrite_statementContext extends ParserRuleContext {
		public TerminalNode REWRITE() { return getToken(cobolParser.REWRITE, 0); }
		public Rewrite_rec_nameContext rewrite_rec_name() {
			return getRuleContext(Rewrite_rec_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_REWRITE() { return getToken(cobolParser.END_REWRITE, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Rewrite_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewrite_statement; }
	}

	public final Rewrite_statementContext rewrite_statement() throws RecognitionException {
		Rewrite_statementContext _localctx = new Rewrite_statementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_rewrite_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1718);
			match(REWRITE);
			setState(1719);
			rewrite_rec_name();
			setState(1722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1720);
				match(FROM);
				setState(1721);
				src_item();
				}
			}

			setState(1729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING) {
				{
				setState(1724);
				match(ALLOWING);
				setState(1725);
				match(NO);
				setState(1727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OTHERS) {
					{
					setState(1726);
					match(OTHERS);
					}
				}

				}
			}

			setState(1732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(1731);
				invalid_key_variants();
				}
				break;
			}
			setState(1735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1734);
				match(END_REWRITE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewrite_rec_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rewrite_rec_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewrite_rec_name; }
	}

	public final Rewrite_rec_nameContext rewrite_rec_name() throws RecognitionException {
		Rewrite_rec_nameContext _localctx = new Rewrite_rec_nameContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_rewrite_rec_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1737);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(cobolParser.RETURN, 0); }
		public Smrg_fileContext smrg_file() {
			return getRuleContext(Smrg_fileContext.class,0);
		}
		public List<At_endContext> at_end() {
			return getRuleContexts(At_endContext.class);
		}
		public At_endContext at_end(int i) {
			return getRuleContext(At_endContext.class,i);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode END_RETURN() { return getToken(cobolParser.END_RETURN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1739);
			match(RETURN);
			setState(1740);
			smrg_file();
			setState(1742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORD) {
				{
				setState(1741);
				match(RECORD);
				}
			}

			setState(1746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1744);
				match(INTO);
				setState(1745);
				dest_item();
				}
			}

			setState(1748);
			at_end();
			setState(1751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(1749);
				match(NOT);
				setState(1750);
				at_end();
				}
				break;
			}
			setState(1754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1753);
				match(END_RETURN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Smrg_fileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Smrg_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_smrg_file; }
	}

	public final Smrg_fileContext smrg_file() throws RecognitionException {
		Smrg_fileContext _localctx = new Smrg_fileContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_smrg_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_statementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(cobolParser.RELEASE, 0); }
		public Release_recContext release_rec() {
			return getRuleContext(Release_recContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Release_src_areaContext release_src_area() {
			return getRuleContext(Release_src_areaContext.class,0);
		}
		public Release_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_statement; }
	}

	public final Release_statementContext release_statement() throws RecognitionException {
		Release_statementContext _localctx = new Release_statementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_release_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1758);
			match(RELEASE);
			setState(1759);
			release_rec();
			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1760);
				match(FROM);
				setState(1761);
				release_src_area();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_src_areaContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Release_src_areaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_src_area; }
	}

	public final Release_src_areaContext release_src_area() throws RecognitionException {
		Release_src_areaContext _localctx = new Release_src_areaContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_release_src_area);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_recContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Release_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_rec; }
	}

	public final Release_recContext release_rec() throws RecognitionException {
		Release_recContext _localctx = new Release_recContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_release_rec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1766);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_statementContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode DEPENDENCY() { return getToken(cobolParser.DEPENDENCY, 0); }
		public Path_nameContext path_name() {
			return getRuleContext(Path_nameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(cobolParser.TYPE, 0); }
		public Relation_typeContext relation_type() {
			return getRuleContext(Relation_typeContext.class,0);
		}
		public TerminalNode DICTIONARY() { return getToken(cobolParser.DICTIONARY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Record_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_statement; }
	}

	public final Record_statementContext record_statement() throws RecognitionException {
		Record_statementContext _localctx = new Record_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_record_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768);
			match(RECORD);
			setState(1769);
			match(DEPENDENCY);
			setState(1770);
			path_name();
			setState(1776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(1771);
				match(TYPE);
				setState(1773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1772);
					match(IS);
					}
				}

				setState(1775);
				relation_type();
				}
			}

			setState(1782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DICTIONARY || _la==IN) {
				{
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1778);
					match(IN);
					}
				}

				setState(1781);
				match(DICTIONARY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_typeContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Relation_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_type; }
	}

	public final Relation_typeContext relation_type() throws RecognitionException {
		Relation_typeContext _localctx = new Relation_typeContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_relation_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Path_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_name; }
	}

	public final Path_nameContext path_name() throws RecognitionException {
		Path_nameContext _localctx = new Path_nameContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_path_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Read_statementContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(cobolParser.READ, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public Read_optionsContext read_options() {
			return getRuleContext(Read_optionsContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_nameContext key_name() {
			return getRuleContext(Key_nameContext.class,0);
		}
		public TerminalNode END_READ() { return getToken(cobolParser.END_READ, 0); }
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(cobolParser.PREVIOUS, 0); }
		public TerminalNode PRIOR() { return getToken(cobolParser.PRIOR, 0); }
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Read_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_read_statement; }
	}

	public final Read_statementContext read_statement() throws RecognitionException {
		Read_statementContext _localctx = new Read_statementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_read_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			match(READ);
			setState(1789);
			file_name();
			setState(1791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (NEXT - 254)) | (1L << (PREVIOUS - 254)) | (1L << (PRIOR - 254)))) != 0)) {
				{
				setState(1790);
				_la = _input.LA(1);
				if ( !(((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (NEXT - 254)) | (1L << (PREVIOUS - 254)) | (1L << (PRIOR - 254)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(1793);
				match(RECORD);
				}
				break;
			}
			setState(1798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1796);
				match(INTO);
				setState(1797);
				dest_item();
				}
			}

			setState(1816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOWING:
			case LOCK:
			case NO:
			case REGARDLESS:
			case WITH:
				{
				setState(1800);
				read_options();
				setState(1806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(1801);
					match(KEY);
					setState(1803);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1802);
						match(IS);
						}
					}

					setState(1805);
					key_name();
					}
				}

				}
				break;
			case KEY:
				{
				setState(1808);
				match(KEY);
				setState(1810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1809);
					match(IS);
					}
				}

				setState(1812);
				key_name();
				setState(1814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWING || _la==LOCK || _la==NO || _la==REGARDLESS || _la==WITH) {
					{
					setState(1813);
					read_options();
					}
				}

				}
				break;
			case EOF:
			case ACCEPT:
			case ADD:
			case ALTER:
			case AT:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case COPY:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case ELSE:
			case END:
			case END_ACCEPT:
			case END_ADD:
			case END_CALL:
			case END_COMPUTE:
			case END_DELETE:
			case END_DISPLAY:
			case END_DIVIDE:
			case END_EVALUATE:
			case END_IF:
			case END_MULTIPLY:
			case END_OF_PAGE:
			case END_PERFORM:
			case END_READ:
			case END_RETURN:
			case END_REWRITE:
			case END_SEARCH:
			case END_START:
			case END_STRING:
			case END_SUBTRACT:
			case END_UNSTRING:
			case END_WRITE:
			case EOP:
			case EVALUATE:
			case EXCEPTION:
			case EXIT:
			case GENERATE:
			case GO:
			case IDENTIFICATION:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case INVALID:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case NOT:
			case ON:
			case OPEN:
			case OVERFLOW:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case REPLACE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SIZE:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WHEN:
			case WRITE:
			case DOT_:
			case USER_DEFINED_WORD:
				break;
			default:
				break;
			}
			setState(1822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(1820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					setState(1818);
					at_end_variants();
					}
					break;
				case 2:
					{
					setState(1819);
					invalid_key_variants();
					}
					break;
				}
				}
				break;
			}
			setState(1825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(1824);
				match(END_READ);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regard_allowContext extends ParserRuleContext {
		public TerminalNode REGARDLESS() { return getToken(cobolParser.REGARDLESS, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode UPDATERS() { return getToken(cobolParser.UPDATERS, 0); }
		public TerminalNode READERS() { return getToken(cobolParser.READERS, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Regard_allowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regard_allow; }
	}

	public final Regard_allowContext regard_allow() throws RecognitionException {
		Regard_allowContext _localctx = new Regard_allowContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_regard_allow);
		int _la;
		try {
			setState(1843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGARDLESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1827);
				match(REGARDLESS);
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(1828);
					match(OF);
					}
				}

				setState(1832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK) {
					{
					setState(1831);
					match(LOCK);
					}
				}

				}
				break;
			case ALLOWING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1834);
				match(ALLOWING);
				setState(1841);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATERS:
					{
					setState(1835);
					match(UPDATERS);
					}
					break;
				case READERS:
					{
					setState(1836);
					match(READERS);
					}
					break;
				case NO:
					{
					setState(1837);
					match(NO);
					setState(1839);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OTHERS) {
						{
						setState(1838);
						match(OTHERS);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Read_optionsContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Regard_allowContext regard_allow() {
			return getRuleContext(Regard_allowContext.class,0);
		}
		public Read_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_read_options; }
	}

	public final Read_optionsContext read_options() throws RecognitionException {
		Read_optionsContext _localctx = new Read_optionsContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_read_options);
		int _la;
		try {
			setState(1853);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCK:
			case NO:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1845);
					match(WITH);
					}
				}

				setState(1849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1848);
					match(NO);
					}
				}

				setState(1851);
				match(LOCK);
				}
				break;
			case ALLOWING:
			case REGARDLESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1852);
				regard_allow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_statementContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(cobolParser.PERFORM, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode END_PERFORM() { return getToken(cobolParser.END_PERFORM, 0); }
		public Perform_timesContext perform_times() {
			return getRuleContext(Perform_timesContext.class,0);
		}
		public Perform_untilContext perform_until() {
			return getRuleContext(Perform_untilContext.class,0);
		}
		public Perform_varyingContext perform_varying() {
			return getRuleContext(Perform_varyingContext.class,0);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Perform_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_statement; }
	}

	public final Perform_statementContext perform_statement() throws RecognitionException {
		Perform_statementContext _localctx = new Perform_statementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_perform_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855);
			match(PERFORM);
			setState(1857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(1856);
				proc_thru_proc();
				}
				break;
			}
			setState(1864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(1862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(1859);
					perform_times();
					}
					break;
				case 2:
					{
					setState(1860);
					perform_until();
					}
					break;
				case 3:
					{
					setState(1861);
					perform_varying();
					}
					break;
				}
				}
				break;
			}
			setState(1873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(1867); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1866);
					statement();
					}
					}
					setState(1869); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (COPY - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (RELEASE - 315)) | (1L << (REPLACE - 315)) | (1L << (RETURN - 315)) | (1L << (REWRITE - 315)) | (1L << (SEARCH - 315)) | (1L << (SET - 315)) | (1L << (SORT - 315)) | (1L << (START - 315)) | (1L << (STOP - 315)) | (1L << (STRING - 315)) | (1L << (SUBTRACT - 315)) | (1L << (SUPPRESS - 315)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TERMINATE - 384)) | (1L << (UNLOCK - 384)) | (1L << (UNSTRING - 384)) | (1L << (WRITE - 384)))) != 0) );
				setState(1871);
				match(END_PERFORM);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_thru_procContext extends ParserRuleContext {
		public First_procContext first_proc() {
			return getRuleContext(First_procContext.class,0);
		}
		public End_procContext end_proc() {
			return getRuleContext(End_procContext.class,0);
		}
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public Proc_thru_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_thru_proc; }
	}

	public final Proc_thru_procContext proc_thru_proc() throws RecognitionException {
		Proc_thru_procContext _localctx = new Proc_thru_procContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_proc_thru_proc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1875);
			first_proc();
			setState(1878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(1876);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1877);
				end_proc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_timesContext extends ParserRuleContext {
		public TerminalNode TIMES() { return getToken(cobolParser.TIMES, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Perform_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_times; }
	}

	public final Perform_timesContext perform_times() throws RecognitionException {
		Perform_timesContext _localctx = new Perform_timesContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_perform_times);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				{
				setState(1880);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				{
				setState(1881);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1884);
			match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_testContext extends ParserRuleContext {
		public TerminalNode TEST() { return getToken(cobolParser.TEST, 0); }
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_testContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_test; }
	}

	public final With_testContext with_test() throws RecognitionException {
		With_testContext _localctx = new With_testContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_with_test);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1886);
				match(WITH);
				}
			}

			setState(1889);
			match(TEST);
			setState(1890);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_untilContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(cobolParser.UNTIL, 0); }
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public With_testContext with_test() {
			return getRuleContext(With_testContext.class,0);
		}
		public Perform_untilContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_until; }
	}

	public final Perform_untilContext perform_until() throws RecognitionException {
		Perform_untilContext _localctx = new Perform_untilContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_perform_until);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEST || _la==WITH) {
				{
				setState(1892);
				with_test();
				}
			}

			setState(1895);
			match(UNTIL);
			setState(1896);
			logic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public List<Perform_rangeContext> perform_range() {
			return getRuleContexts(Perform_rangeContext.class);
		}
		public Perform_rangeContext perform_range(int i) {
			return getRuleContext(Perform_rangeContext.class,i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(cobolParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(cobolParser.UNTIL, i);
		}
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public With_testContext with_test() {
			return getRuleContext(With_testContext.class,0);
		}
		public List<TerminalNode> AFTER() { return getTokens(cobolParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(cobolParser.AFTER, i);
		}
		public Perform_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_varying; }
	}

	public final Perform_varyingContext perform_varying() throws RecognitionException {
		Perform_varyingContext _localctx = new Perform_varyingContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_perform_varying);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEST || _la==WITH) {
				{
				setState(1898);
				with_test();
				}
			}

			setState(1901);
			match(VARYING);
			setState(1902);
			perform_range();
			setState(1903);
			match(UNTIL);
			setState(1904);
			logic_expression(0);
			setState(1912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER) {
				{
				{
				setState(1905);
				match(AFTER);
				setState(1906);
				perform_range();
				setState(1907);
				match(UNTIL);
				setState(1908);
				logic_expression(0);
				}
				}
				setState(1914);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_rangeContext extends ParserRuleContext {
		public Perform_varContext perform_var() {
			return getRuleContext(Perform_varContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Perform_initContext perform_init() {
			return getRuleContext(Perform_initContext.class,0);
		}
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Perform_incremContext perform_increm() {
			return getRuleContext(Perform_incremContext.class,0);
		}
		public Perform_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_range; }
	}

	public final Perform_rangeContext perform_range() throws RecognitionException {
		Perform_rangeContext _localctx = new Perform_rangeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_perform_range);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1915);
			perform_var();
			setState(1916);
			match(FROM);
			setState(1917);
			perform_init();
			setState(1918);
			match(BY);
			setState(1919);
			perform_increm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_incremContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Perform_incremContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_increm; }
	}

	public final Perform_incremContext perform_increm() throws RecognitionException {
		Perform_incremContext _localctx = new Perform_incremContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_perform_increm);
		try {
			setState(1923);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1921);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1922);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_initContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Perform_initContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_init; }
	}

	public final Perform_initContext perform_init() throws RecognitionException {
		Perform_initContext _localctx = new Perform_initContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_perform_init);
		try {
			setState(1927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1925);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1926);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_varContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Perform_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_var; }
	}

	public final Perform_varContext perform_var() throws RecognitionException {
		Perform_varContext _localctx = new Perform_varContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_perform_var);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1929);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(cobolParser.OPEN, 0); }
		public List<Open_definitionContext> open_definition() {
			return getRuleContexts(Open_definitionContext.class);
		}
		public Open_definitionContext open_definition(int i) {
			return getRuleContext(Open_definitionContext.class,i);
		}
		public List<TerminalNode> OUTPUT() { return getTokens(cobolParser.OUTPUT); }
		public TerminalNode OUTPUT(int i) {
			return getToken(cobolParser.OUTPUT, i);
		}
		public List<TerminalNode> EXTEND() { return getTokens(cobolParser.EXTEND); }
		public TerminalNode EXTEND(int i) {
			return getToken(cobolParser.EXTEND, i);
		}
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(cobolParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(cobolParser.NO, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(cobolParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(cobolParser.REWIND, i);
		}
		public List<TerminalNode> WITH() { return getTokens(cobolParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(cobolParser.WITH, i);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_open_statement);
		int _la;
		try {
			int _alt;
			setState(1955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1931);
				match(OPEN);
				setState(1933); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1932);
					open_definition();
					}
					}
					setState(1935); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EXTEND - 170)) | (1L << (INPUT - 170)) | (1L << (I_O - 170)))) != 0) || _la==OUTPUT );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1937);
				match(OPEN);
				setState(1951); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1938);
					_la = _input.LA(1);
					if ( !(_la==EXTEND || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1947); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1939);
							file_name();
							setState(1945);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==NO || _la==WITH) {
								{
								setState(1941);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==WITH) {
									{
									setState(1940);
									match(WITH);
									}
								}

								setState(1943);
								match(NO);
								setState(1944);
								match(REWIND);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1949); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,208,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(1953); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==EXTEND || _la==OUTPUT );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_definitionContext extends ParserRuleContext {
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode EXTEND() { return getToken(cobolParser.EXTEND, 0); }
		public TerminalNode I_O() { return getToken(cobolParser.I_O, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(cobolParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(cobolParser.NO, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(cobolParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(cobolParser.REWIND, i);
		}
		public List<Open_file_attributesContext> open_file_attributes() {
			return getRuleContexts(Open_file_attributesContext.class);
		}
		public Open_file_attributesContext open_file_attributes(int i) {
			return getRuleContext(Open_file_attributesContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(cobolParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(cobolParser.WITH, i);
		}
		public Open_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_definition; }
	}

	public final Open_definitionContext open_definition() throws RecognitionException {
		Open_definitionContext _localctx = new Open_definitionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_open_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			_la = _input.LA(1);
			if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EXTEND - 170)) | (1L << (INPUT - 170)) | (1L << (I_O - 170)))) != 0) || _la==OUTPUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1969); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1958);
					file_name();
					setState(1964);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
					case 1:
						{
						setState(1960);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WITH) {
							{
							setState(1959);
							match(WITH);
							}
						}

						setState(1962);
						match(NO);
						setState(1963);
						match(REWIND);
						}
						break;
					}
					setState(1967);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALLOWING || _la==LOCK || _la==WITH) {
						{
						setState(1966);
						open_file_attributes();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1971); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_file_attributesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode READERS() { return getToken(cobolParser.READERS, 0); }
		public TerminalNode UPDATERS() { return getToken(cobolParser.UPDATERS, 0); }
		public TerminalNode WRITERS() { return getToken(cobolParser.WRITERS, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Open_file_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_file_attributes; }
	}

	public final Open_file_attributesContext open_file_attributes() throws RecognitionException {
		Open_file_attributesContext _localctx = new Open_file_attributesContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_open_file_attributes);
		int _la;
		try {
			setState(2017);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCK:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1973);
					match(WITH);
					}
				}

				setState(1976);
				match(LOCK);
				}
				break;
			case ALLOWING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1977);
				match(ALLOWING);
				setState(2015);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(1978);
					match(NO);
					setState(1980);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OTHERS) {
						{
						setState(1979);
						match(OTHERS);
						}
					}

					}
					break;
				case ALL:
					{
					setState(1982);
					match(ALL);
					}
					break;
				case READERS:
				case UPDATERS:
				case WRITERS:
					{
					setState(2013);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
					case 1:
						{
						setState(1983);
						match(READERS);
						setState(1985);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WRITERS) {
							{
							setState(1984);
							match(WRITERS);
							}
						}

						setState(1988);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==UPDATERS) {
							{
							setState(1987);
							match(UPDATERS);
							}
						}

						}
						break;
					case 2:
						{
						setState(1990);
						match(READERS);
						setState(1991);
						match(UPDATERS);
						setState(1992);
						match(WRITERS);
						}
						break;
					case 3:
						{
						setState(1993);
						match(WRITERS);
						setState(1995);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==READERS) {
							{
							setState(1994);
							match(READERS);
							}
						}

						setState(1998);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==UPDATERS) {
							{
							setState(1997);
							match(UPDATERS);
							}
						}

						}
						break;
					case 4:
						{
						setState(2000);
						match(WRITERS);
						setState(2001);
						match(UPDATERS);
						setState(2002);
						match(READERS);
						}
						break;
					case 5:
						{
						setState(2003);
						match(UPDATERS);
						setState(2005);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==READERS) {
							{
							setState(2004);
							match(READERS);
							}
						}

						setState(2008);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WRITERS) {
							{
							setState(2007);
							match(WRITERS);
							}
						}

						}
						break;
					case 6:
						{
						setState(2010);
						match(UPDATERS);
						setState(2011);
						match(WRITERS);
						setState(2012);
						match(READERS);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_statementContext extends ParserRuleContext {
		public TerminalNode MULTIPLY() { return getToken(cobolParser.MULTIPLY, 0); }
		public List<Mult_numContext> mult_num() {
			return getRuleContexts(Mult_numContext.class);
		}
		public Mult_numContext mult_num(int i) {
			return getRuleContext(Mult_numContext.class,i);
		}
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_MULTIPLY() { return getToken(cobolParser.END_MULTIPLY, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Multiply_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_statement; }
	}

	public final Multiply_statementContext multiply_statement() throws RecognitionException {
		Multiply_statementContext _localctx = new Multiply_statementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_multiply_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2019);
			match(MULTIPLY);
			setState(2020);
			mult_num();
			setState(2021);
			match(BY);
			setState(2025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2022);
				mult_num();
				setState(2023);
				match(GIVING);
				}
				break;
			}
			setState(2031); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2027);
					identifier_result();
					setState(2029);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROUNDED) {
						{
						setState(2028);
						match(ROUNDED);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2033); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2035);
				on_size_variants();
				}
				break;
			}
			setState(2039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2038);
				match(END_MULTIPLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mult_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Mult_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mult_num; }
	}

	public final Mult_numContext mult_num() throws RecognitionException {
		Mult_numContext _localctx = new Mult_numContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_mult_num);
		try {
			setState(2043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2041);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2042);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(cobolParser.MERGE, 0); }
		public MergefileContext mergefile() {
			return getRuleContext(MergefileContext.class,0);
		}
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public Output_procContext output_proc() {
			return getRuleContext(Output_procContext.class,0);
		}
		public Giving_fileContext giving_file() {
			return getRuleContext(Giving_fileContext.class,0);
		}
		public List<Merge_onContext> merge_on() {
			return getRuleContexts(Merge_onContext.class);
		}
		public Merge_onContext merge_on(int i) {
			return getRuleContext(Merge_onContext.class,i);
		}
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public List<InfileContext> infile() {
			return getRuleContexts(InfileContext.class);
		}
		public InfileContext infile(int i) {
			return getRuleContext(InfileContext.class,i);
		}
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2045);
			match(MERGE);
			setState(2046);
			mergefile();
			setState(2048); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2047);
				merge_on();
				}
				}
				setState(2050); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASCENDING || _la==DESCENDING || _la==ON );
			setState(2060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING || _la==SEQUENCE) {
				{
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING) {
					{
					setState(2052);
					match(COLLATING);
					}
				}

				setState(2055);
				match(SEQUENCE);
				setState(2057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(2056);
					match(IS);
					}
				}

				setState(2059);
				alpha_name();
				}
			}

			setState(2062);
			match(USING);
			setState(2064); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2063);
				infile();
				}
				}
				setState(2066); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(2070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OUTPUT:
				{
				setState(2068);
				output_proc();
				}
				break;
			case GIVING:
				{
				setState(2069);
				giving_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_procContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Output_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_proc; }
	}

	public final Output_procContext output_proc() throws RecognitionException {
		Output_procContext _localctx = new Output_procContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_output_proc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2072);
			match(OUTPUT);
			setState(2073);
			match(PROCEDURE);
			setState(2075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2074);
				match(IS);
				}
			}

			setState(2077);
			proc_thru_proc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_procContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public First_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_proc; }
	}

	public final First_procContext first_proc() throws RecognitionException {
		First_procContext _localctx = new First_procContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_first_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2079);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_procContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public End_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_proc; }
	}

	public final End_procContext end_proc() throws RecognitionException {
		End_procContext _localctx = new End_procContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_end_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Giving_fileContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public Giving_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_giving_file; }
	}

	public final Giving_fileContext giving_file() throws RecognitionException {
		Giving_fileContext _localctx = new Giving_fileContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_giving_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2083);
			match(GIVING);
			setState(2084);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InfileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public InfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_infile; }
	}

	public final InfileContext infile() throws RecognitionException {
		InfileContext _localctx = new InfileContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_infile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_onContext extends ParserRuleContext {
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public List<MergekeyContext> mergekey() {
			return getRuleContexts(MergekeyContext.class);
		}
		public MergekeyContext mergekey(int i) {
			return getRuleContext(MergekeyContext.class,i);
		}
		public Merge_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_on; }
	}

	public final Merge_onContext merge_on() throws RecognitionException {
		Merge_onContext _localctx = new Merge_onContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_merge_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2088);
				match(ON);
				}
			}

			setState(2091);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(2092);
				match(KEY);
				}
			}

			setState(2096); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2095);
				mergekey();
				}
				}
				setState(2098); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergefileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public MergefileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergefile; }
	}

	public final MergefileContext mergefile() throws RecognitionException {
		MergefileContext _localctx = new MergefileContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_mergefile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2100);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergekeyContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public MergekeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergekey; }
	}

	public final MergekeyContext mergekey() throws RecognitionException {
		MergekeyContext _localctx = new MergekeyContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_mergekey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_statementContext extends ParserRuleContext {
		public TerminalNode INSPECT() { return getToken(cobolParser.INSPECT, 0); }
		public Src_stringContext src_string() {
			return getRuleContext(Src_stringContext.class,0);
		}
		public Inspect_tallyingContext inspect_tallying() {
			return getRuleContext(Inspect_tallyingContext.class,0);
		}
		public Inspect_replacingContext inspect_replacing() {
			return getRuleContext(Inspect_replacingContext.class,0);
		}
		public Inspect_convertingContext inspect_converting() {
			return getRuleContext(Inspect_convertingContext.class,0);
		}
		public Inspect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_statement; }
	}

	public final Inspect_statementContext inspect_statement() throws RecognitionException {
		Inspect_statementContext _localctx = new Inspect_statementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_inspect_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2104);
			match(INSPECT);
			setState(2105);
			src_string();
			setState(2112);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TALLYING:
				{
				setState(2106);
				inspect_tallying();
				setState(2108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACING) {
					{
					setState(2107);
					inspect_replacing();
					}
				}

				}
				break;
			case REPLACING:
				{
				setState(2110);
				inspect_replacing();
				}
				break;
			case CONVERTING:
				{
				setState(2111);
				inspect_converting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_convertingContext extends ParserRuleContext {
		public TerminalNode CONVERTING() { return getToken(cobolParser.CONVERTING, 0); }
		public Compare_charsContext compare_chars() {
			return getRuleContext(Compare_charsContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Convert_charsContext convert_chars() {
			return getRuleContext(Convert_charsContext.class,0);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Inspect_convertingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_converting; }
	}

	public final Inspect_convertingContext inspect_converting() throws RecognitionException {
		Inspect_convertingContext _localctx = new Inspect_convertingContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_inspect_converting);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2114);
			match(CONVERTING);
			setState(2115);
			compare_chars();
			setState(2116);
			match(TO);
			setState(2117);
			convert_chars();
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2118);
				delim_definition();
				}
				}
				setState(2123);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Convert_charsContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Convert_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convert_chars; }
	}

	public final Convert_charsContext convert_chars() throws RecognitionException {
		Convert_charsContext _localctx = new Convert_charsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_convert_chars);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_charsContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Compare_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_chars; }
	}

	public final Compare_charsContext compare_chars() throws RecognitionException {
		Compare_charsContext _localctx = new Compare_charsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_compare_chars);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2126);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_replacingContext extends ParserRuleContext {
		public TerminalNode REPLACING() { return getToken(cobolParser.REPLACING, 0); }
		public List<Replacing_charactersContext> replacing_characters() {
			return getRuleContexts(Replacing_charactersContext.class);
		}
		public Replacing_charactersContext replacing_characters(int i) {
			return getRuleContext(Replacing_charactersContext.class,i);
		}
		public List<Replacing_allContext> replacing_all() {
			return getRuleContexts(Replacing_allContext.class);
		}
		public Replacing_allContext replacing_all(int i) {
			return getRuleContext(Replacing_allContext.class,i);
		}
		public Inspect_replacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_replacing; }
	}

	public final Inspect_replacingContext inspect_replacing() throws RecognitionException {
		Inspect_replacingContext _localctx = new Inspect_replacingContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_inspect_replacing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128);
			match(REPLACING);
			setState(2133); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2131);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTERS:
					{
					setState(2129);
					replacing_characters();
					}
					break;
				case ALL:
				case FIRST:
				case LEADING:
					{
					setState(2130);
					replacing_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2135); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==CHARACTERS || _la==FIRST || _la==LEADING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replacing_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public TerminalNode FIRST() { return getToken(cobolParser.FIRST, 0); }
		public List<Compare_valContext> compare_val() {
			return getRuleContexts(Compare_valContext.class);
		}
		public Compare_valContext compare_val(int i) {
			return getRuleContext(Compare_valContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public List<Replace_valContext> replace_val() {
			return getRuleContexts(Replace_valContext.class);
		}
		public Replace_valContext replace_val(int i) {
			return getRuleContext(Replace_valContext.class,i);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Replacing_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing_all; }
	}

	public final Replacing_allContext replacing_all() throws RecognitionException {
		Replacing_allContext _localctx = new Replacing_allContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_replacing_all);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2137);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==FIRST || _la==LEADING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2147); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2138);
					compare_val();
					setState(2139);
					match(BY);
					setState(2140);
					replace_val();
					setState(2144);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AFTER || _la==BEFORE) {
						{
						{
						setState(2141);
						delim_definition();
						}
						}
						setState(2146);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2149); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_valContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Replace_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_val; }
	}

	public final Replace_valContext replace_val() throws RecognitionException {
		Replace_valContext _localctx = new Replace_valContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_replace_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2151);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replacing_charactersContext extends ParserRuleContext {
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Replace_charContext replace_char() {
			return getRuleContext(Replace_charContext.class,0);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Replacing_charactersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing_characters; }
	}

	public final Replacing_charactersContext replacing_characters() throws RecognitionException {
		Replacing_charactersContext _localctx = new Replacing_charactersContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_replacing_characters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			match(CHARACTERS);
			setState(2154);
			match(BY);
			setState(2155);
			replace_char();
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2156);
				delim_definition();
				}
				}
				setState(2161);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_charContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Replace_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_char; }
	}

	public final Replace_charContext replace_char() throws RecognitionException {
		Replace_charContext _localctx = new Replace_charContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_replace_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2162);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_tallyingContext extends ParserRuleContext {
		public TerminalNode TALLYING() { return getToken(cobolParser.TALLYING, 0); }
		public List<Tallying_forContext> tallying_for() {
			return getRuleContexts(Tallying_forContext.class);
		}
		public Tallying_forContext tallying_for(int i) {
			return getRuleContext(Tallying_forContext.class,i);
		}
		public Inspect_tallyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_tallying; }
	}

	public final Inspect_tallyingContext inspect_tallying() throws RecognitionException {
		Inspect_tallyingContext _localctx = new Inspect_tallyingContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_inspect_tallying);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2164);
			match(TALLYING);
			setState(2166); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2165);
					tallying_for();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2168); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,250,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_forContext extends ParserRuleContext {
		public Tally_ctrContext tally_ctr() {
			return getRuleContext(Tally_ctrContext.class,0);
		}
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public List<Tallying_for_charactersContext> tallying_for_characters() {
			return getRuleContexts(Tallying_for_charactersContext.class);
		}
		public Tallying_for_charactersContext tallying_for_characters(int i) {
			return getRuleContext(Tallying_for_charactersContext.class,i);
		}
		public List<Tallying_for_allContext> tallying_for_all() {
			return getRuleContexts(Tallying_for_allContext.class);
		}
		public Tallying_for_allContext tallying_for_all(int i) {
			return getRuleContext(Tallying_for_allContext.class,i);
		}
		public Tallying_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for; }
	}

	public final Tallying_forContext tallying_for() throws RecognitionException {
		Tallying_forContext _localctx = new Tallying_forContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_tallying_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170);
			tally_ctr();
			setState(2171);
			match(FOR);
			setState(2176); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2174);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTERS:
					{
					setState(2172);
					tallying_for_characters();
					}
					break;
				case ALL:
				case LEADING:
					{
					setState(2173);
					tallying_for_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2178); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==CHARACTERS || _la==LEADING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_for_charactersContext extends ParserRuleContext {
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Tallying_for_charactersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for_characters; }
	}

	public final Tallying_for_charactersContext tallying_for_characters() throws RecognitionException {
		Tallying_for_charactersContext _localctx = new Tallying_for_charactersContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_tallying_for_characters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2180);
			match(CHARACTERS);
			setState(2184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2181);
				delim_definition();
				}
				}
				setState(2186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_definitionContext extends ParserRuleContext {
		public Delim_valContext delim_val() {
			return getRuleContext(Delim_valContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode INITIAL() { return getToken(cobolParser.INITIAL, 0); }
		public Delim_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_definition; }
	}

	public final Delim_definitionContext delim_definition() throws RecognitionException {
		Delim_definitionContext _localctx = new Delim_definitionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_delim_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL) {
				{
				setState(2188);
				match(INITIAL);
				}
			}

			setState(2191);
			delim_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_for_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public List<Compare_valContext> compare_val() {
			return getRuleContexts(Compare_valContext.class);
		}
		public Compare_valContext compare_val(int i) {
			return getRuleContext(Compare_valContext.class,i);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Tallying_for_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for_all; }
	}

	public final Tallying_for_allContext tallying_for_all() throws RecognitionException {
		Tallying_for_allContext _localctx = new Tallying_for_allContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_tallying_for_all);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2193);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==LEADING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2201); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2194);
					compare_val();
					setState(2198);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AFTER || _la==BEFORE) {
						{
						{
						setState(2195);
						delim_definition();
						}
						}
						setState(2200);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2203); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_valContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Compare_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_val; }
	}

	public final Compare_valContext compare_val() throws RecognitionException {
		Compare_valContext _localctx = new Compare_valContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_compare_val);
		try {
			setState(2208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2205);
				qualified_data_item();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2206);
				match(STRING_LITERAL);
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 3);
				{
				setState(2207);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_valContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Delim_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_val; }
	}

	public final Delim_valContext delim_val() throws RecognitionException {
		Delim_valContext _localctx = new Delim_valContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_delim_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2210);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tally_ctrContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Tally_ctrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tally_ctr; }
	}

	public final Tally_ctrContext tally_ctr() throws RecognitionException {
		Tally_ctrContext _localctx = new Tally_ctrContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_tally_ctr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2212);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_stringContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Src_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_string; }
	}

	public final Src_stringContext src_string() throws RecognitionException {
		Src_stringContext _localctx = new Src_stringContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_src_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2214);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Initiate_statementContext extends ParserRuleContext {
		public TerminalNode INITIATE() { return getToken(cobolParser.INITIATE, 0); }
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public Initiate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initiate_statement; }
	}

	public final Initiate_statementContext initiate_statement() throws RecognitionException {
		Initiate_statementContext _localctx = new Initiate_statementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_initiate_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			match(INITIATE);
			setState(2218); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2217);
					report_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2220); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Initialize_statementContext extends ParserRuleContext {
		public TerminalNode INITIALIZE() { return getToken(cobolParser.INITIALIZE, 0); }
		public List<Fld_nameContext> fld_name() {
			return getRuleContexts(Fld_nameContext.class);
		}
		public Fld_nameContext fld_name(int i) {
			return getRuleContext(Fld_nameContext.class,i);
		}
		public List<ReplacingContext> replacing() {
			return getRuleContexts(ReplacingContext.class);
		}
		public ReplacingContext replacing(int i) {
			return getRuleContext(ReplacingContext.class,i);
		}
		public Initialize_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initialize_statement; }
	}

	public final Initialize_statementContext initialize_statement() throws RecognitionException {
		Initialize_statementContext _localctx = new Initialize_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_initialize_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			match(INITIALIZE);
			setState(2224); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2223);
					fld_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2226); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACING) {
				{
				{
				setState(2228);
				replacing();
				}
				}
				setState(2233);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplacingContext extends ParserRuleContext {
		public TerminalNode REPLACING() { return getToken(cobolParser.REPLACING, 0); }
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public List<Init_valueContext> init_value() {
			return getRuleContexts(Init_valueContext.class);
		}
		public Init_valueContext init_value(int i) {
			return getRuleContext(Init_valueContext.class,i);
		}
		public List<TerminalNode> ALPHABETIC() { return getTokens(cobolParser.ALPHABETIC); }
		public TerminalNode ALPHABETIC(int i) {
			return getToken(cobolParser.ALPHABETIC, i);
		}
		public List<TerminalNode> ALPHANUMERIC() { return getTokens(cobolParser.ALPHANUMERIC); }
		public TerminalNode ALPHANUMERIC(int i) {
			return getToken(cobolParser.ALPHANUMERIC, i);
		}
		public List<TerminalNode> NUMERIC() { return getTokens(cobolParser.NUMERIC); }
		public TerminalNode NUMERIC(int i) {
			return getToken(cobolParser.NUMERIC, i);
		}
		public List<TerminalNode> ALPHANUMERIC_EDITED() { return getTokens(cobolParser.ALPHANUMERIC_EDITED); }
		public TerminalNode ALPHANUMERIC_EDITED(int i) {
			return getToken(cobolParser.ALPHANUMERIC_EDITED, i);
		}
		public List<TerminalNode> NUMERIC_EDITED() { return getTokens(cobolParser.NUMERIC_EDITED); }
		public TerminalNode NUMERIC_EDITED(int i) {
			return getToken(cobolParser.NUMERIC_EDITED, i);
		}
		public List<TerminalNode> DATA() { return getTokens(cobolParser.DATA); }
		public TerminalNode DATA(int i) {
			return getToken(cobolParser.DATA, i);
		}
		public ReplacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing; }
	}

	public final ReplacingContext replacing() throws RecognitionException {
		ReplacingContext _localctx = new ReplacingContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_replacing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234);
			match(REPLACING);
			setState(2241); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2235);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHANUMERIC) | (1L << ALPHANUMERIC_EDITED))) != 0) || _la==NUMERIC || _la==NUMERIC_EDITED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA) {
					{
					setState(2236);
					match(DATA);
					}
				}

				setState(2239);
				match(BY);
				setState(2240);
				init_value();
				}
				}
				setState(2243); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHANUMERIC) | (1L << ALPHANUMERIC_EDITED))) != 0) || _la==NUMERIC || _la==NUMERIC_EDITED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Init_valueContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Init_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_init_value; }
	}

	public final Init_valueContext init_value() throws RecognitionException {
		Init_valueContext _localctx = new Init_valueContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_init_value);
		try {
			setState(2247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2245);
				qualified_data_item();
				}
				break;
			case STRING_LITERAL:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2246);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fld_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Fld_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fld_name; }
	}

	public final Fld_nameContext fld_name() throws RecognitionException {
		Fld_nameContext _localctx = new Fld_nameContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_fld_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Move_statementContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(cobolParser.MOVE, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public Move_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_statement; }
	}

	public final Move_statementContext move_statement() throws RecognitionException {
		Move_statementContext _localctx = new Move_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_move_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2251);
			match(MOVE);
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CORR || _la==CORRESPONDING) {
				{
				setState(2252);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2255);
			src_item();
			setState(2256);
			match(TO);
			setState(2257);
			dest_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(cobolParser.IF, 0); }
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public List<SentenseContext> sentense() {
			return getRuleContexts(SentenseContext.class);
		}
		public SentenseContext sentense(int i) {
			return getRuleContext(SentenseContext.class,i);
		}
		public List<TerminalNode> NEXT() { return getTokens(cobolParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(cobolParser.NEXT, i);
		}
		public List<TerminalNode> SENTENCE() { return getTokens(cobolParser.SENTENCE); }
		public TerminalNode SENTENCE(int i) {
			return getToken(cobolParser.SENTENCE, i);
		}
		public TerminalNode THEN() { return getToken(cobolParser.THEN, 0); }
		public TerminalNode ELSE() { return getToken(cobolParser.ELSE, 0); }
		public TerminalNode END_IF() { return getToken(cobolParser.END_IF, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(IF);
			setState(2260);
			logic_expression(0);
			setState(2262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(2261);
				match(THEN);
				}
			}

			setState(2267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCEPT:
			case ADD:
			case ALTER:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case COPY:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case EVALUATE:
			case EXIT:
			case GENERATE:
			case GO:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case OPEN:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case REPLACE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WRITE:
				{
				setState(2264);
				sentense();
				}
				break;
			case NEXT:
				{
				setState(2265);
				match(NEXT);
				setState(2266);
				match(SENTENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2269);
				match(ELSE);
				setState(2273);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCEPT:
				case ADD:
				case ALTER:
				case CALL:
				case CANCEL:
				case CLOSE:
				case COMPUTE:
				case CONTINUE:
				case COPY:
				case DELETE:
				case DISPLAY:
				case DIVIDE:
				case EVALUATE:
				case EXIT:
				case GENERATE:
				case GO:
				case IF:
				case INITIALIZE:
				case INITIATE:
				case INSPECT:
				case MERGE:
				case MOVE:
				case MULTIPLY:
				case OPEN:
				case PERFORM:
				case READ:
				case RECORD:
				case RELEASE:
				case REPLACE:
				case RETURN:
				case REWRITE:
				case SEARCH:
				case SET:
				case SORT:
				case START:
				case STOP:
				case STRING:
				case SUBTRACT:
				case SUPPRESS:
				case TERMINATE:
				case UNLOCK:
				case UNSTRING:
				case WRITE:
					{
					setState(2270);
					sentense();
					}
					break;
				case NEXT:
					{
					setState(2271);
					match(NEXT);
					setState(2272);
					match(SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2277);
				match(END_IF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_statementContext extends ParserRuleContext {
		public TerminalNode GENERATE() { return getToken(cobolParser.GENERATE, 0); }
		public Report_itemContext report_item() {
			return getRuleContext(Report_itemContext.class,0);
		}
		public Generate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_statement; }
	}

	public final Generate_statementContext generate_statement() throws RecognitionException {
		Generate_statementContext _localctx = new Generate_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_generate_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280);
			match(GENERATE);
			setState(2281);
			report_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_itemContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Report_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_item; }
	}

	public final Report_itemContext report_item() throws RecognitionException {
		Report_itemContext _localctx = new Report_itemContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_report_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2283);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(cobolParser.EXIT, 0); }
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_exit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_program_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(cobolParser.EXIT, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public Exit_program_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_program_statement; }
	}

	public final Exit_program_statementContext exit_program_statement() throws RecognitionException {
		Exit_program_statementContext _localctx = new Exit_program_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_exit_program_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2287);
			match(EXIT);
			setState(2288);
			match(PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_to_statementContext extends ParserRuleContext {
		public TerminalNode GO() { return getToken(cobolParser.GO, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public List<Proc_nameContext> proc_name() {
			return getRuleContexts(Proc_nameContext.class);
		}
		public Proc_nameContext proc_name(int i) {
			return getRuleContext(Proc_nameContext.class,i);
		}
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Go_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_to_statement; }
	}

	public final Go_to_statementContext go_to_statement() throws RecognitionException {
		Go_to_statementContext _localctx = new Go_to_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_go_to_statement);
		int _la;
		try {
			setState(2312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2290);
				match(GO);
				setState(2292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2291);
					match(TO);
					}
				}

				setState(2295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					setState(2294);
					proc_name();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2297);
				match(GO);
				setState(2299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2298);
					match(TO);
					}
				}

				setState(2302); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2301);
					proc_name();
					}
					}
					setState(2304); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD );
				setState(2306);
				match(DEPENDING);
				setState(2308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2307);
					match(ON);
					}
				}

				setState(2310);
				qualified_data_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_name; }
	}

	public final Proc_nameContext proc_name() throws RecognitionException {
		Proc_nameContext _localctx = new Proc_nameContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_proc_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Evaluate_statementContext extends ParserRuleContext {
		public TerminalNode EVALUATE() { return getToken(cobolParser.EVALUATE, 0); }
		public List<Subj_itemContext> subj_item() {
			return getRuleContexts(Subj_itemContext.class);
		}
		public Subj_itemContext subj_item(int i) {
			return getRuleContext(Subj_itemContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(cobolParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(cobolParser.WHEN, i);
		}
		public List<When_conditionContext> when_condition() {
			return getRuleContexts(When_conditionContext.class);
		}
		public When_conditionContext when_condition(int i) {
			return getRuleContext(When_conditionContext.class,i);
		}
		public TerminalNode OTHER() { return getToken(cobolParser.OTHER, 0); }
		public TerminalNode END_EVALUATE() { return getToken(cobolParser.END_EVALUATE, 0); }
		public List<TerminalNode> ALSO() { return getTokens(cobolParser.ALSO); }
		public TerminalNode ALSO(int i) {
			return getToken(cobolParser.ALSO, i);
		}
		public List<SentenseContext> sentense() {
			return getRuleContexts(SentenseContext.class);
		}
		public SentenseContext sentense(int i) {
			return getRuleContext(SentenseContext.class,i);
		}
		public Evaluate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_evaluate_statement; }
	}

	public final Evaluate_statementContext evaluate_statement() throws RecognitionException {
		Evaluate_statementContext _localctx = new Evaluate_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_evaluate_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2316);
			match(EVALUATE);
			setState(2317);
			subj_item();
			setState(2324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LITERAL) | (1L << ALL) | (1L << ALSO))) != 0) || ((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (FALSE - 174)) | (1L << (FUNCTION - 174)) | (1L << (HIGH_VALUE - 174)) | (1L << (HIGH_VALUES - 174)))) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & ((1L << (LOW_VALUE - 241)) | (1L << (LOW_VALUES - 241)) | (1L << (NOT - 241)) | (1L << (QUOTE - 241)) | (1L << (QUOTES - 241)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (SPACE - 360)) | (1L << (SPACES - 360)) | (1L << (TRUE - 360)) | (1L << (ZERO - 360)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (PLUS_ - 429)) | (1L << (MINUS_ - 429)) | (1L << (LPAREN_ - 429)) | (1L << (NUMERIC_LITERAL - 429)) | (1L << (USER_DEFINED_WORD - 429)))) != 0)) {
				{
				{
				setState(2319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALSO) {
					{
					setState(2318);
					match(ALSO);
					}
				}

				setState(2321);
				subj_item();
				}
				}
				setState(2326);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2341); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2327);
					match(WHEN);
					setState(2328);
					when_condition();
					setState(2335);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2330);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==ALSO) {
								{
								setState(2329);
								match(ALSO);
								}
							}

							setState(2332);
							when_condition();
							}
							} 
						}
						setState(2337);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
					}
					setState(2339);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						setState(2338);
						sentense();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2343); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(2345);
				match(WHEN);
				setState(2346);
				match(OTHER);
				setState(2348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(2347);
					sentense();
					}
					break;
				}
				}
				break;
			}
			setState(2353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(2352);
				match(END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_conditionContext extends ParserRuleContext {
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode ANY() { return getToken(cobolParser.ANY, 0); }
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(cobolParser.FALSE, 0); }
		public When_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_condition; }
	}

	public final When_conditionContext when_condition() throws RecognitionException {
		When_conditionContext _localctx = new When_conditionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_when_condition);
		int _la;
		try {
			setState(2367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2355);
				logic_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2356);
					match(NOT);
					}
				}

				setState(2359);
				arithmetic_expression(0);
				setState(2362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THROUGH || _la==THRU) {
					{
					setState(2360);
					_la = _input.LA(1);
					if ( !(_la==THROUGH || _la==THRU) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2361);
					arithmetic_expression(0);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2364);
				match(ANY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2365);
				match(TRUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2366);
				match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subj_itemContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(cobolParser.FALSE, 0); }
		public Subj_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subj_item; }
	}

	public final Subj_itemContext subj_item() throws RecognitionException {
		Subj_itemContext _localctx = new Subj_itemContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_subj_item);
		try {
			setState(2373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2369);
				arithmetic_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2370);
				logic_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2371);
				match(TRUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2372);
				match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statementContext extends ParserRuleContext {
		public Divide_statement_form1Context divide_statement_form1() {
			return getRuleContext(Divide_statement_form1Context.class,0);
		}
		public Divide_statement_form2Context divide_statement_form2() {
			return getRuleContext(Divide_statement_form2Context.class,0);
		}
		public Divide_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement; }
	}

	public final Divide_statementContext divide_statement() throws RecognitionException {
		Divide_statementContext _localctx = new Divide_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_divide_statement);
		try {
			setState(2377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2375);
				divide_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2376);
				divide_statement_form2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statement_form1Context extends ParserRuleContext {
		public TerminalNode DIVIDE() { return getToken(cobolParser.DIVIDE, 0); }
		public List<Divide_numContext> divide_num() {
			return getRuleContexts(Divide_numContext.class);
		}
		public Divide_numContext divide_num(int i) {
			return getRuleContext(Divide_numContext.class,i);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_DIVIDE() { return getToken(cobolParser.END_DIVIDE, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Divide_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement_form1; }
	}

	public final Divide_statement_form1Context divide_statement_form1() throws RecognitionException {
		Divide_statement_form1Context _localctx = new Divide_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 308, RULE_divide_statement_form1);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			match(DIVIDE);
			setState(2380);
			divide_num();
			setState(2381);
			_la = _input.LA(1);
			if ( !(_la==BY || _la==INTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(2382);
				divide_num();
				setState(2383);
				match(GIVING);
				}
				break;
			}
			setState(2391); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2387);
					identifier_result();
					setState(2389);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROUNDED) {
						{
						setState(2388);
						match(ROUNDED);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2393); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2395);
				on_size_variants();
				}
				break;
			}
			setState(2399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(2398);
				match(END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statement_form2Context extends ParserRuleContext {
		public TerminalNode DIVIDE() { return getToken(cobolParser.DIVIDE, 0); }
		public List<Divide_numContext> divide_num() {
			return getRuleContexts(Divide_numContext.class);
		}
		public Divide_numContext divide_num(int i) {
			return getRuleContext(Divide_numContext.class,i);
		}
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode REMAINDER() { return getToken(cobolParser.REMAINDER, 0); }
		public RemaindContext remaind() {
			return getRuleContext(RemaindContext.class,0);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public TerminalNode ROUNDED() { return getToken(cobolParser.ROUNDED, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_DIVIDE() { return getToken(cobolParser.END_DIVIDE, 0); }
		public Divide_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement_form2; }
	}

	public final Divide_statement_form2Context divide_statement_form2() throws RecognitionException {
		Divide_statement_form2Context _localctx = new Divide_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 310, RULE_divide_statement_form2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			match(DIVIDE);
			setState(2402);
			divide_num();
			setState(2403);
			_la = _input.LA(1);
			if ( !(_la==BY || _la==INTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				setState(2404);
				divide_num();
				setState(2405);
				match(GIVING);
				}
				break;
			}
			setState(2409);
			identifier_result();
			setState(2411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROUNDED) {
				{
				setState(2410);
				match(ROUNDED);
				}
			}

			setState(2413);
			match(REMAINDER);
			setState(2414);
			remaind();
			setState(2416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2415);
				on_size_variants();
				}
				break;
			}
			setState(2419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2418);
				match(END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemaindContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public RemaindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remaind; }
	}

	public final RemaindContext remaind() throws RecognitionException {
		RemaindContext _localctx = new RemaindContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_remaind);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2421);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Divide_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_num; }
	}

	public final Divide_numContext divide_num() throws RecognitionException {
		Divide_numContext _localctx = new Divide_numContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_divide_num);
		try {
			setState(2425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2423);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2424);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statementContext extends ParserRuleContext {
		public Display_statement_form1Context display_statement_form1() {
			return getRuleContext(Display_statement_form1Context.class,0);
		}
		public Display_statement_form2Context display_statement_form2() {
			return getRuleContext(Display_statement_form2Context.class,0);
		}
		public Display_statement_form3Context display_statement_form3() {
			return getRuleContext(Display_statement_form3Context.class,0);
		}
		public Display_statement_form4Context display_statement_form4() {
			return getRuleContext(Display_statement_form4Context.class,0);
		}
		public Display_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement; }
	}

	public final Display_statementContext display_statement() throws RecognitionException {
		Display_statementContext _localctx = new Display_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_display_statement);
		try {
			setState(2431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2427);
				display_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2428);
				display_statement_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2429);
				display_statement_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2430);
				display_statement_form4();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form1Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public List<Src_itemContext> src_item() {
			return getRuleContexts(Src_itemContext.class);
		}
		public Src_itemContext src_item(int i) {
			return getRuleContext(Src_itemContext.class,i);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public List<Display_form1_clauseContext> display_form1_clause() {
			return getRuleContexts(Display_form1_clauseContext.class);
		}
		public Display_form1_clauseContext display_form1_clause(int i) {
			return getRuleContext(Display_form1_clauseContext.class,i);
		}
		public Display_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form1; }
	}

	public final Display_statement_form1Context display_statement_form1() throws RecognitionException {
		Display_statement_form1Context _localctx = new Display_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 318, RULE_display_statement_form1);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2433);
			match(DISPLAY);
			setState(2441); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2434);
					src_item();
					setState(2438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==CONVERSION || _la==NO || _la==UPON || _la==WITH) {
						{
						{
						setState(2435);
						display_form1_clause();
						}
						}
						setState(2440);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2443); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2445);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form2Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public List<Src_itemContext> src_item() {
			return getRuleContexts(Src_itemContext.class);
		}
		public Src_itemContext src_item(int i) {
			return getRuleContext(Src_itemContext.class,i);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public List<Display_form2_clauseContext> display_form2_clause() {
			return getRuleContexts(Display_form2_clauseContext.class);
		}
		public Display_form2_clauseContext display_form2_clause(int i) {
			return getRuleContext(Display_form2_clauseContext.class,i);
		}
		public Display_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form2; }
	}

	public final Display_statement_form2Context display_statement_form2() throws RecognitionException {
		Display_statement_form2Context _localctx = new Display_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 320, RULE_display_statement_form2);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			match(DISPLAY);
			setState(2456); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2449);
					src_item();
					setState(2453);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,304,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2450);
							display_form2_clause();
							}
							} 
						}
						setState(2455);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,304,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2458); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2460);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form3Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public Disp_f3_lineContext disp_f3_line() {
			return getRuleContext(Disp_f3_lineContext.class,0);
		}
		public Disp_f3_columnContext disp_f3_column() {
			return getRuleContext(Disp_f3_columnContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public Display_statement_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form3; }
	}

	public final Display_statement_form3Context display_statement_form3() throws RecognitionException {
		Display_statement_form3Context _localctx = new Display_statement_form3Context(_ctx, getState());
		enterRule(_localctx, 322, RULE_display_statement_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			match(DISPLAY);
			setState(2464);
			qualified_data_item();
			setState(2478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(2465);
					match(AT);
					}
				}

				setState(2476);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LINE:
					{
					setState(2468);
					disp_f3_line();
					setState(2470);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLUMN) {
						{
						setState(2469);
						disp_f3_column();
						}
					}

					}
					break;
				case COLUMN:
					{
					setState(2472);
					disp_f3_column();
					setState(2474);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LINE) {
						{
						setState(2473);
						disp_f3_line();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2480);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form4Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode UPON() { return getToken(cobolParser.UPON, 0); }
		public Display_uponContext display_upon() {
			return getRuleContext(Display_uponContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public Display_statement_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form4; }
	}

	public final Display_statement_form4Context display_statement_form4() throws RecognitionException {
		Display_statement_form4Context _localctx = new Display_statement_form4Context(_ctx, getState());
		enterRule(_localctx, 324, RULE_display_statement_form4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			match(DISPLAY);
			setState(2484);
			src_item();
			setState(2485);
			match(UPON);
			setState(2486);
			display_upon();
			setState(2488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2487);
				on_exception_variants();
				}
				break;
			}
			setState(2491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2490);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_itemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Src_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_item; }
	}

	public final Src_itemContext src_item() throws RecognitionException {
		Src_itemContext _localctx = new Src_itemContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_src_item);
		try {
			setState(2495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2493);
				identifier();
				}
				break;
			case STRING_LITERAL:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2494);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_uponContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Display_uponContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_upon; }
	}

	public final Display_uponContext display_upon() throws RecognitionException {
		Display_uponContext _localctx = new Display_uponContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_display_upon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disp_f3_lineContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public Disp_f3_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disp_f3_line; }
	}

	public final Disp_f3_lineContext disp_f3_line() throws RecognitionException {
		Disp_f3_lineContext _localctx = new Disp_f3_lineContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_disp_f3_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2499);
			match(LINE);
			setState(2501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2500);
				match(NUMBER);
				}
			}

			setState(2505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				{
				setState(2503);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				{
				setState(2504);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disp_f3_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public Disp_f3_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disp_f3_column; }
	}

	public final Disp_f3_columnContext disp_f3_column() throws RecognitionException {
		Disp_f3_columnContext _localctx = new Disp_f3_columnContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_disp_f3_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2507);
			match(COLUMN);
			setState(2509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2508);
				match(NUMBER);
				}
			}

			setState(2513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD:
				{
				setState(2511);
				identifier();
				}
				break;
			case NUMERIC_LITERAL:
				{
				setState(2512);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_form1_clauseContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode UPON() { return getToken(cobolParser.UPON, 0); }
		public Out_destContext out_dest() {
			return getRuleContext(Out_destContext.class,0);
		}
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ADVANCING() { return getToken(cobolParser.ADVANCING, 0); }
		public Display_form1_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_form1_clause; }
	}

	public final Display_form1_clauseContext display_form1_clause() throws RecognitionException {
		Display_form1_clauseContext _localctx = new Display_form1_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_display_form1_clause);
		int _la;
		try {
			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2515);
					match(WITH);
					}
				}

				setState(2518);
				match(CONVERSION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2519);
				match(UPON);
				setState(2520);
				out_dest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2521);
					match(WITH);
					}
				}

				setState(2524);
				match(NO);
				setState(2526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADVANCING) {
					{
					setState(2525);
					match(ADVANCING);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_form2_clauseContext extends ParserRuleContext {
		public Display_form1_clauseContext display_form1_clause() {
			return getRuleContext(Display_form1_clauseContext.class,0);
		}
		public At_line_numberContext at_line_number() {
			return getRuleContext(At_line_numberContext.class,0);
		}
		public At_column_numberContext at_column_number() {
			return getRuleContext(At_column_numberContext.class,0);
		}
		public TerminalNode ERASE() { return getToken(cobolParser.ERASE, 0); }
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public TerminalNode BELL() { return getToken(cobolParser.BELL, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode UNDERLINED() { return getToken(cobolParser.UNDERLINED, 0); }
		public TerminalNode BOLD() { return getToken(cobolParser.BOLD, 0); }
		public TerminalNode BLINKING() { return getToken(cobolParser.BLINKING, 0); }
		public TerminalNode REVERSED() { return getToken(cobolParser.REVERSED, 0); }
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ADVANCING() { return getToken(cobolParser.ADVANCING, 0); }
		public Display_form2_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_form2_clause; }
	}

	public final Display_form2_clauseContext display_form2_clause() throws RecognitionException {
		Display_form2_clauseContext _localctx = new Display_form2_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_display_form2_clause);
		int _la;
		try {
			setState(2566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2530);
				display_form1_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2531);
				at_line_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2532);
				at_column_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2533);
				match(ERASE);
				setState(2541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END || _la==TO) {
					{
					setState(2535);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(2534);
						match(TO);
						}
					}

					setState(2537);
					match(END);
					setState(2539);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(2538);
						match(OF);
						}
					}

					}
				}

				setState(2543);
				_la = _input.LA(1);
				if ( !(_la==LINE || _la==SCREEN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2544);
					match(WITH);
					}
				}

				setState(2547);
				match(BELL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2548);
				match(UNDERLINED);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2549);
				match(BOLD);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2550);
					match(WITH);
					}
				}

				setState(2553);
				match(BLINKING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2554);
				match(REVERSED);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2555);
					match(WITH);
					}
				}

				setState(2558);
				match(CONVERSION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2559);
					match(WITH);
					}
				}

				setState(2562);
				match(NO);
				setState(2564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADVANCING) {
					{
					setState(2563);
					match(ADVANCING);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_line_numberContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public At_line_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_line_number; }
	}

	public final At_line_numberContext at_line_number() throws RecognitionException {
		At_line_numberContext _localctx = new At_line_numberContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_at_line_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2568);
				match(AT);
				}
			}

			setState(2571);
			match(LINE);
			setState(2573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2572);
				match(NUMBER);
				}
			}

			setState(2575);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_column_numberContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public At_column_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_column_number; }
	}

	public final At_column_numberContext at_column_number() throws RecognitionException {
		At_column_numberContext _localctx = new At_column_numberContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_at_column_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2577);
				match(AT);
				}
			}

			setState(2580);
			match(COLUMN);
			setState(2582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2581);
				match(NUMBER);
				}
			}

			setState(2584);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_destContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Out_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_dest; }
	}

	public final Out_destContext out_dest() throws RecognitionException {
		Out_destContext _localctx = new Out_destContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_out_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(cobolParser.DELETE, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_DELETE() { return getToken(cobolParser.END_DELETE, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_delete_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2588);
			match(DELETE);
			setState(2589);
			file_name();
			setState(2591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(2590);
				match(RECORD);
				}
				break;
			}
			setState(2594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(2593);
				invalid_key_variants();
				}
				break;
			}
			setState(2597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				setState(2596);
				match(END_DELETE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(cobolParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2599);
			match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compute_statementContext extends ParserRuleContext {
		public TerminalNode COMPUTE() { return getToken(cobolParser.COMPUTE, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_COMPUTE() { return getToken(cobolParser.END_COMPUTE, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Compute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compute_statement; }
	}

	public final Compute_statementContext compute_statement() throws RecognitionException {
		Compute_statementContext _localctx = new Compute_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_compute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2601);
			match(COMPUTE);
			setState(2606); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2602);
				identifier_result();
				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2603);
					match(ROUNDED);
					}
				}

				}
				}
				setState(2608); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(2610);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==EQUAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2611);
			arithmetic_expression(0);
			setState(2613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2612);
				on_size_variants();
				}
				break;
			}
			setState(2616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(2615);
				match(END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(cobolParser.CLOSE, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<Close_paramsContext> close_params() {
			return getRuleContexts(Close_paramsContext.class);
		}
		public Close_paramsContext close_params(int i) {
			return getRuleContext(Close_paramsContext.class,i);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_close_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2618);
			match(CLOSE);
			setState(2623); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2619);
					file_name();
					setState(2621);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCK || _la==NO || _la==REEL || _la==UNIT || _la==WITH) {
						{
						setState(2620);
						close_params();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2625); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_paramsContext extends ParserRuleContext {
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode REMOVAL() { return getToken(cobolParser.REMOVAL, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode REWIND() { return getToken(cobolParser.REWIND, 0); }
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public Close_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_params; }
	}

	public final Close_paramsContext close_params() throws RecognitionException {
		Close_paramsContext _localctx = new Close_paramsContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_close_params);
		int _la;
		try {
			setState(2649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2627);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==NO || _la==REMOVAL || _la==WITH) {
					{
					setState(2637);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FOR:
					case REMOVAL:
						{
						setState(2629);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==FOR) {
							{
							setState(2628);
							match(FOR);
							}
						}

						setState(2631);
						match(REMOVAL);
						}
						break;
					case NO:
					case WITH:
						{
						setState(2633);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WITH) {
							{
							setState(2632);
							match(WITH);
							}
						}

						setState(2635);
						match(NO);
						setState(2636);
						match(REWIND);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case LOCK:
			case NO:
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2641);
					match(WITH);
					}
				}

				setState(2647);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(2644);
					match(NO);
					setState(2645);
					match(REWIND);
					}
					break;
				case LOCK:
					{
					setState(2646);
					match(LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cancel_statementContext extends ParserRuleContext {
		public TerminalNode CANCEL() { return getToken(cobolParser.CANCEL, 0); }
		public List<Prog_nameContext> prog_name() {
			return getRuleContexts(Prog_nameContext.class);
		}
		public Prog_nameContext prog_name(int i) {
			return getRuleContext(Prog_nameContext.class,i);
		}
		public Cancel_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cancel_statement; }
	}

	public final Cancel_statementContext cancel_statement() throws RecognitionException {
		Cancel_statementContext _localctx = new Cancel_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_cancel_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(CANCEL);
			setState(2653); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2652);
					prog_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2655); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_statementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(cobolParser.CALL, 0); }
		public Prog_nameContext prog_name() {
			return getRuleContext(Prog_nameContext.class,0);
		}
		public Call_usingContext call_using() {
			return getRuleContext(Call_usingContext.class,0);
		}
		public Call_givingContext call_giving() {
			return getRuleContext(Call_givingContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_CALL() { return getToken(cobolParser.END_CALL, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_call_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(CALL);
			setState(2658);
			prog_name();
			setState(2660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2659);
				call_using();
				}
			}

			setState(2663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GIVING) {
				{
				setState(2662);
				call_giving();
				}
			}

			setState(2666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(2665);
				on_exception_variants();
				}
				break;
			}
			setState(2669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(2668);
				match(END_CALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_givingContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Call_givingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_giving; }
	}

	public final Call_givingContext call_giving() throws RecognitionException {
		Call_givingContext _localctx = new Call_givingContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_call_giving);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			match(GIVING);
			setState(2672);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public List<Using_argContext> using_arg() {
			return getRuleContexts(Using_argContext.class);
		}
		public Using_argContext using_arg(int i) {
			return getRuleContext(Using_argContext.class,i);
		}
		public Call_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_using; }
	}

	public final Call_usingContext call_using() throws RecognitionException {
		Call_usingContext _localctx = new Call_usingContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_call_using);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2674);
			match(USING);
			setState(2676); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2675);
					using_arg();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2678); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,358,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_argContext extends ParserRuleContext {
		public TerminalNode OMITTED() { return getToken(cobolParser.OMITTED, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Using_prefixContext using_prefix() {
			return getRuleContext(Using_prefixContext.class,0);
		}
		public Using_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_arg; }
	}

	public final Using_argContext using_arg() throws RecognitionException {
		Using_argContext _localctx = new Using_argContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_using_arg);
		int _la;
		try {
			int _alt;
			setState(2691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OMITTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2680);
				match(OMITTED);
				}
				break;
			case STRING_LITERAL:
			case BY:
			case CONTENT:
			case DESCRIPTOR:
			case REFERENCE:
			case VALUE:
			case NUMERIC_LITERAL:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY || _la==CONTENT || _la==DESCRIPTOR || _la==REFERENCE || _la==VALUE) {
					{
					setState(2681);
					using_prefix();
					}
				}

				setState(2684);
				argument();
				setState(2688);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2685);
						argument();
						}
						} 
					}
					setState(2690);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_prefixContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode CONTENT() { return getToken(cobolParser.CONTENT, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(cobolParser.DESCRIPTOR, 0); }
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Using_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_prefix; }
	}

	public final Using_prefixContext using_prefix() throws RecognitionException {
		Using_prefixContext _localctx = new Using_prefixContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_using_prefix);
		int _la;
		try {
			setState(2709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2693);
					match(BY);
					}
				}

				setState(2696);
				match(REFERENCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2697);
					match(BY);
					}
				}

				setState(2700);
				match(CONTENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2701);
					match(BY);
					}
				}

				setState(2704);
				match(DESCRIPTOR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2705);
					match(BY);
					}
				}

				setState(2708);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_argument);
		try {
			setState(2714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2711);
				qualified_data_item();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2712);
				match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2713);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prog_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Prog_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prog_name; }
	}

	public final Prog_nameContext prog_name() throws RecognitionException {
		Prog_nameContext _localctx = new Prog_nameContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_prog_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2716);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_statementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(cobolParser.ALTER, 0); }
		public List<Alter_procContext> alter_proc() {
			return getRuleContexts(Alter_procContext.class);
		}
		public Alter_procContext alter_proc(int i) {
			return getRuleContext(Alter_procContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(cobolParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(cobolParser.TO, i);
		}
		public List<Alter_new_procContext> alter_new_proc() {
			return getRuleContexts(Alter_new_procContext.class);
		}
		public Alter_new_procContext alter_new_proc(int i) {
			return getRuleContext(Alter_new_procContext.class,i);
		}
		public List<TerminalNode> PROCEED() { return getTokens(cobolParser.PROCEED); }
		public TerminalNode PROCEED(int i) {
			return getToken(cobolParser.PROCEED, i);
		}
		public Alter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statement; }
	}

	public final Alter_statementContext alter_statement() throws RecognitionException {
		Alter_statementContext _localctx = new Alter_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2718);
			match(ALTER);
			setState(2727); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2719);
					alter_proc();
					setState(2720);
					match(TO);
					setState(2723);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROCEED) {
						{
						setState(2721);
						match(PROCEED);
						setState(2722);
						match(TO);
						}
					}

					setState(2725);
					alter_new_proc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2729); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,369,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_new_procContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Alter_new_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_new_proc; }
	}

	public final Alter_new_procContext alter_new_proc() throws RecognitionException {
		Alter_new_procContext _localctx = new Alter_new_procContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_alter_new_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2731);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Alter_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_proc; }
	}

	public final Alter_procContext alter_proc() throws RecognitionException {
		Alter_procContext _localctx = new Alter_procContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alter_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2733);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_statementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(cobolParser.ADD, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Add_grpContext> add_grp() {
			return getRuleContexts(Add_grpContext.class);
		}
		public Add_grpContext add_grp(int i) {
			return getRuleContext(Add_grpContext.class,i);
		}
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_ADD() { return getToken(cobolParser.END_ADD, 0); }
		public List<Add_numContext> add_num() {
			return getRuleContexts(Add_numContext.class);
		}
		public Add_numContext add_num(int i) {
			return getRuleContext(Add_numContext.class,i);
		}
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Add_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_statement; }
	}

	public final Add_statementContext add_statement() throws RecognitionException {
		Add_statementContext _localctx = new Add_statementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_add_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(2735);
				match(ADD);
				setState(2737); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2736);
					add_num();
					}
					}
					setState(2739); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || _la==NUMERIC_LITERAL || _la==USER_DEFINED_WORD );
				setState(2741);
				match(TO);
				setState(2746); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2742);
						identifier_result();
						setState(2744);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ROUNDED) {
							{
							setState(2743);
							match(ROUNDED);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2748); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(2750);
				match(ADD);
				setState(2754);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2751);
						add_num();
						}
						} 
					}
					setState(2756);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,373,_ctx);
				}
				setState(2758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2757);
					match(TO);
					}
				}

				setState(2761); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2760);
					add_num();
					}
					}
					setState(2763); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || _la==NUMERIC_LITERAL || _la==USER_DEFINED_WORD );
				setState(2765);
				match(GIVING);
				setState(2770); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2766);
						identifier_result();
						setState(2768);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ROUNDED) {
							{
							setState(2767);
							match(ROUNDED);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2772); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				{
				setState(2774);
				match(ADD);
				setState(2775);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2776);
				add_grp();
				setState(2777);
				match(TO);
				setState(2778);
				add_grp();
				setState(2780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2779);
					match(ROUNDED);
					}
				}

				}
				break;
			}
			setState(2785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(2784);
				on_size_variants();
				}
				break;
			}
			setState(2788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(2787);
				match(END_ADD);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_grpContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Add_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_grp; }
	}

	public final Add_grpContext add_grp() throws RecognitionException {
		Add_grpContext _localctx = new Add_grpContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_add_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2790);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Add_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_num; }
	}

	public final Add_numContext add_num() throws RecognitionException {
		Add_numContext _localctx = new Add_numContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_add_num);
		try {
			setState(2794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2792);
				match(NUMERIC_LITERAL);
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2793);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_statementContext extends ParserRuleContext {
		public Accept_form1Context accept_form1() {
			return getRuleContext(Accept_form1Context.class,0);
		}
		public Accept_form2Context accept_form2() {
			return getRuleContext(Accept_form2Context.class,0);
		}
		public Accept_form3Context accept_form3() {
			return getRuleContext(Accept_form3Context.class,0);
		}
		public Accept_form4Context accept_form4() {
			return getRuleContext(Accept_form4Context.class,0);
		}
		public Accept_form5Context accept_form5() {
			return getRuleContext(Accept_form5Context.class,0);
		}
		public Accept_form6Context accept_form6() {
			return getRuleContext(Accept_form6Context.class,0);
		}
		public Accept_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_statement; }
	}

	public final Accept_statementContext accept_statement() throws RecognitionException {
		Accept_statementContext _localctx = new Accept_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_accept_statement);
		try {
			setState(2802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2796);
				accept_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2797);
				accept_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2798);
				accept_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2799);
				accept_form4();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2800);
				accept_form5();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2801);
				accept_form6();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_exception_variantsContext extends ParserRuleContext {
		public List<On_exceptionContext> on_exception() {
			return getRuleContexts(On_exceptionContext.class);
		}
		public On_exceptionContext on_exception(int i) {
			return getRuleContext(On_exceptionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_exception_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_exception_variants; }
	}

	public final On_exception_variantsContext on_exception_variants() throws RecognitionException {
		On_exception_variantsContext _localctx = new On_exception_variantsContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_on_exception_variants);
		try {
			setState(2814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPTION:
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2804);
				on_exception();
				setState(2807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(2805);
					match(NOT);
					setState(2806);
					on_exception();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2809);
				match(NOT);
				setState(2810);
				on_exception();
				setState(2812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(2811);
					on_exception();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_end_variantsContext extends ParserRuleContext {
		public List<At_endContext> at_end() {
			return getRuleContexts(At_endContext.class);
		}
		public At_endContext at_end(int i) {
			return getRuleContext(At_endContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public At_end_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_end_variants; }
	}

	public final At_end_variantsContext at_end_variants() throws RecognitionException {
		At_end_variantsContext _localctx = new At_end_variantsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_at_end_variants);
		try {
			setState(2826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
			case END:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2816);
				at_end();
				setState(2819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(2817);
					match(NOT);
					setState(2818);
					at_end();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2821);
				match(NOT);
				setState(2822);
				at_end();
				setState(2824);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					setState(2823);
					at_end();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_size_variantsContext extends ParserRuleContext {
		public List<On_sizeContext> on_size() {
			return getRuleContexts(On_sizeContext.class);
		}
		public On_sizeContext on_size(int i) {
			return getRuleContext(On_sizeContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_size_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_size_variants; }
	}

	public final On_size_variantsContext on_size_variants() throws RecognitionException {
		On_size_variantsContext _localctx = new On_size_variantsContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_on_size_variants);
		try {
			setState(2838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
			case SIZE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2828);
				on_size();
				setState(2831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(2829);
					match(NOT);
					setState(2830);
					on_size();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2833);
				match(NOT);
				setState(2834);
				on_size();
				setState(2836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(2835);
					on_size();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_overflow_variantsContext extends ParserRuleContext {
		public List<On_overflowContext> on_overflow() {
			return getRuleContexts(On_overflowContext.class);
		}
		public On_overflowContext on_overflow(int i) {
			return getRuleContext(On_overflowContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_overflow_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_overflow_variants; }
	}

	public final On_overflow_variantsContext on_overflow_variants() throws RecognitionException {
		On_overflow_variantsContext _localctx = new On_overflow_variantsContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_on_overflow_variants);
		try {
			setState(2850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
			case OVERFLOW:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2840);
				on_overflow();
				setState(2843);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(2841);
					match(NOT);
					setState(2842);
					on_overflow();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2845);
				match(NOT);
				setState(2846);
				on_overflow();
				setState(2848);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(2847);
					on_overflow();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_eop_variantsContext extends ParserRuleContext {
		public List<At_eopContext> at_eop() {
			return getRuleContexts(At_eopContext.class);
		}
		public At_eopContext at_eop(int i) {
			return getRuleContext(At_eopContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public At_eop_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_eop_variants; }
	}

	public final At_eop_variantsContext at_eop_variants() throws RecognitionException {
		At_eop_variantsContext _localctx = new At_eop_variantsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_at_eop_variants);
		try {
			setState(2862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
			case END_OF_PAGE:
			case EOP:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2852);
				at_eop();
				setState(2855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(2853);
					match(NOT);
					setState(2854);
					at_eop();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2857);
				match(NOT);
				setState(2858);
				at_eop();
				setState(2860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(2859);
					at_eop();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invalid_key_variantsContext extends ParserRuleContext {
		public List<Invalid_keyContext> invalid_key() {
			return getRuleContexts(Invalid_keyContext.class);
		}
		public Invalid_keyContext invalid_key(int i) {
			return getRuleContext(Invalid_keyContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public Invalid_key_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invalid_key_variants; }
	}

	public final Invalid_key_variantsContext invalid_key_variants() throws RecognitionException {
		Invalid_key_variantsContext _localctx = new Invalid_key_variantsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_invalid_key_variants);
		try {
			setState(2874);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALID:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2864);
				invalid_key();
				setState(2867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(2865);
					match(NOT);
					setState(2866);
					invalid_key();
					}
					break;
				}
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2869);
				match(NOT);
				setState(2870);
				invalid_key();
				setState(2872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(2871);
					invalid_key();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form6Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public Accept6_itemContext accept6_item() {
			return getRuleContext(Accept6_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form6Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form6; }
	}

	public final Accept_form6Context accept_form6() throws RecognitionException {
		Accept_form6Context _localctx = new Accept_form6Context(_ctx, getState());
		enterRule(_localctx, 396, RULE_accept_form6);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2876);
			match(ACCEPT);
			setState(2877);
			dest_item();
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2878);
				match(FROM);
				}
			}

			setState(2881);
			accept6_item();
			setState(2883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(2882);
				on_exception_variants();
				}
				break;
			}
			setState(2886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(2885);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept6_itemContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Accept6_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept6_item; }
	}

	public final Accept6_itemContext accept6_item() throws RecognitionException {
		Accept6_itemContext _localctx = new Accept6_itemContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_accept6_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2888);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form1Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Input_sourceContext input_source() {
			return getRuleContext(Input_sourceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form1; }
	}

	public final Accept_form1Context accept_form1() throws RecognitionException {
		Accept_form1Context _localctx = new Accept_form1Context(_ctx, getState());
		enterRule(_localctx, 400, RULE_accept_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2890);
			match(ACCEPT);
			setState(2891);
			dest_item();
			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2892);
				match(FROM);
				setState(2893);
				input_source();
				}
			}

			setState(2898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2896);
				match(WITH);
				setState(2897);
				match(CONVERSION);
				}
			}

			setState(2901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(2900);
				at_end_variants();
				}
				break;
			}
			setState(2904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(2903);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form2Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Date_timeContext date_time() {
			return getRuleContext(Date_timeContext.class,0);
		}
		public Accept_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form2; }
	}

	public final Accept_form2Context accept_form2() throws RecognitionException {
		Accept_form2Context _localctx = new Accept_form2Context(_ctx, getState());
		enterRule(_localctx, 402, RULE_accept_form2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			match(ACCEPT);
			setState(2907);
			dest_item();
			setState(2908);
			match(FROM);
			setState(2909);
			date_time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form3Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public List<Accept_form3_clauseContext> accept_form3_clause() {
			return getRuleContexts(Accept_form3_clauseContext.class);
		}
		public Accept_form3_clauseContext accept_form3_clause(int i) {
			return getRuleContext(Accept_form3_clauseContext.class,i);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public Accept_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form3; }
	}

	public final Accept_form3Context accept_form3() throws RecognitionException {
		Accept_form3Context _localctx = new Accept_form3Context(_ctx, getState());
		enterRule(_localctx, 404, RULE_accept_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2911);
			match(ACCEPT);
			setState(2912);
			dest_item();
			setState(2914); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2913);
				accept_form3_clause();
				}
				}
				setState(2916); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BELL) | (1L << BLINKING) | (1L << BOLD))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (COLUMN - 65)) | (1L << (CONTROL - 65)) | (1L << (CONVERSION - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ERASE - 163)) | (1L << (FROM - 163)) | (1L << (KEY - 163)))) != 0) || _la==LINE || _la==NO || _la==PROTECTED || _la==REVERSED || _la==UNDERLINED || _la==WITH );
			setState(2922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(2920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(2918);
					on_exception_variants();
					}
					break;
				case 2:
					{
					setState(2919);
					at_end_variants();
					}
					break;
				}
				}
				break;
			}
			setState(2925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(2924);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form4Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_dest_itemContext key_dest_item() {
			return getRuleContext(Key_dest_itemContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public List<Accept_form4_clauseContext> accept_form4_clause() {
			return getRuleContexts(Accept_form4_clauseContext.class);
		}
		public Accept_form4_clauseContext accept_form4_clause(int i) {
			return getRuleContext(Accept_form4_clauseContext.class,i);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public Accept_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form4; }
	}

	public final Accept_form4Context accept_form4() throws RecognitionException {
		Accept_form4Context _localctx = new Accept_form4Context(_ctx, getState());
		enterRule(_localctx, 406, RULE_accept_form4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2927);
			match(ACCEPT);
			setState(2929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTROL) {
				{
				setState(2928);
				match(CONTROL);
				}
			}

			setState(2931);
			match(KEY);
			setState(2933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2932);
				match(IN);
				}
			}

			setState(2935);
			key_dest_item();
			setState(2937); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2936);
				accept_form4_clause();
				}
				}
				setState(2939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BELL || _la==COLUMN || _la==ERASE || _la==FROM || _la==LINE || _la==WITH );
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(2943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(2941);
					on_exception_variants();
					}
					break;
				case 2:
					{
					setState(2942);
					at_end_variants();
					}
					break;
				}
				}
				break;
			}
			setState(2948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(2947);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form5Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Screen_nameContext screen_name() {
			return getRuleContext(Screen_nameContext.class,0);
		}
		public Accept_atContext accept_at() {
			return getRuleContext(Accept_atContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form5; }
	}

	public final Accept_form5Context accept_form5() throws RecognitionException {
		Accept_form5Context _localctx = new Accept_form5Context(_ctx, getState());
		enterRule(_localctx, 408, RULE_accept_form5);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2950);
			match(ACCEPT);
			setState(2951);
			screen_name();
			setState(2953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(2952);
				accept_at();
				}
				break;
			}
			setState(2956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(2955);
				on_exception_variants();
				}
				break;
			}
			setState(2959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(2958);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_atContext extends ParserRuleContext {
		public Accept_at_lineContext accept_at_line() {
			return getRuleContext(Accept_at_lineContext.class,0);
		}
		public Accept_at_columnContext accept_at_column() {
			return getRuleContext(Accept_at_columnContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public Accept_atContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at; }
	}

	public final Accept_atContext accept_at() throws RecognitionException {
		Accept_atContext _localctx = new Accept_atContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_accept_at);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2961);
				match(AT);
				}
			}

			setState(2972);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LINE:
				{
				setState(2964);
				accept_at_line();
				setState(2966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2965);
					accept_at_column();
					}
				}

				}
				break;
			case COLUMN:
				{
				setState(2968);
				accept_at_column();
				setState(2970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINE) {
					{
					setState(2969);
					accept_at_line();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_at_lineContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public Accept_at_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at_line; }
	}

	public final Accept_at_lineContext accept_at_line() throws RecognitionException {
		Accept_at_lineContext _localctx = new Accept_at_lineContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_accept_at_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2974);
			match(LINE);
			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2975);
				match(NUMBER);
				}
			}

			setState(2980);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				{
				setState(2978);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				{
				setState(2979);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_at_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public Accept_at_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at_column; }
	}

	public final Accept_at_columnContext accept_at_column() throws RecognitionException {
		Accept_at_columnContext _localctx = new Accept_at_columnContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_accept_at_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(COLUMN);
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2983);
				match(NUMBER);
				}
			}

			setState(2988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				{
				setState(2986);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				{
				setState(2987);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form4_clauseContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public TerminalNode ERASE() { return getToken(cobolParser.ERASE, 0); }
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public TerminalNode BELL() { return getToken(cobolParser.BELL, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public Accept_form4_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form4_clause; }
	}

	public final Accept_form4_clauseContext accept_form4_clause() throws RecognitionException {
		Accept_form4_clauseContext _localctx = new Accept_form4_clauseContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_accept_form4_clause);
		int _la;
		try {
			setState(3021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(2990);
					match(FROM);
					}
				}

				setState(2993);
				match(LINE);
				setState(2995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(2994);
					match(NUMBER);
					}
				}

				setState(2997);
				number_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(2998);
					match(FROM);
					}
				}

				setState(3001);
				match(COLUMN);
				setState(3003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(3002);
					match(NUMBER);
					}
				}

				setState(3005);
				number_value();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3006);
				match(ERASE);
				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END || _la==TO) {
					{
					setState(3008);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(3007);
						match(TO);
						}
					}

					setState(3010);
					match(END);
					setState(3012);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(3011);
						match(OF);
						}
					}

					}
				}

				setState(3016);
				_la = _input.LA(1);
				if ( !(_la==LINE || _la==SCREEN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3017);
					match(WITH);
					}
				}

				setState(3020);
				match(BELL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form3_clauseContext extends ParserRuleContext {
		public Accept_form4_clauseContext accept_form4_clause() {
			return getRuleContext(Accept_form4_clauseContext.class,0);
		}
		public TerminalNode UNDERLINED() { return getToken(cobolParser.UNDERLINED, 0); }
		public TerminalNode BOLD() { return getToken(cobolParser.BOLD, 0); }
		public TerminalNode BLINKING() { return getToken(cobolParser.BLINKING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode PROTECTED() { return getToken(cobolParser.PROTECTED, 0); }
		public List<Protected_valueContext> protected_value() {
			return getRuleContexts(Protected_valueContext.class);
		}
		public Protected_valueContext protected_value(int i) {
			return getRuleContext(Protected_valueContext.class,i);
		}
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public TerminalNode REVERSED() { return getToken(cobolParser.REVERSED, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ECHO() { return getToken(cobolParser.ECHO, 0); }
		public TerminalNode DEFAULT() { return getToken(cobolParser.DEFAULT, 0); }
		public Def_valueContext def_value() {
			return getRuleContext(Def_valueContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_dest_itemContext key_dest_item() {
			return getRuleContext(Key_dest_itemContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Accept_form3_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form3_clause; }
	}

	public final Accept_form3_clauseContext accept_form3_clause() throws RecognitionException {
		Accept_form3_clauseContext _localctx = new Accept_form3_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_accept_form3_clause);
		int _la;
		try {
			int _alt;
			setState(3060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3023);
				accept_form4_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3024);
				match(UNDERLINED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3025);
				match(BOLD);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3026);
					match(WITH);
					}
				}

				setState(3029);
				match(BLINKING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3030);
				match(PROTECTED);
				setState(3034);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3031);
						protected_value();
						}
						} 
					}
					setState(3036);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3037);
					match(WITH);
					}
				}

				setState(3040);
				match(CONVERSION);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3041);
				match(REVERSED);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3042);
					match(WITH);
					}
				}

				setState(3045);
				match(NO);
				setState(3046);
				match(ECHO);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3047);
				match(DEFAULT);
				setState(3049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3048);
					match(IS);
					}
				}

				setState(3051);
				def_value();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTROL) {
					{
					setState(3052);
					match(CONTROL);
					}
				}

				setState(3055);
				match(KEY);
				setState(3057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(3056);
					match(IN);
					}
				}

				setState(3059);
				key_dest_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_dest_itemContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Key_dest_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_dest_item; }
	}

	public final Key_dest_itemContext key_dest_item() throws RecognitionException {
		Key_dest_itemContext _localctx = new Key_dest_itemContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_key_dest_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_valueContext extends ParserRuleContext {
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(cobolParser.CURRENT, 0); }
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Def_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_value; }
	}

	public final Def_valueContext def_value() throws RecognitionException {
		Def_valueContext _localctx = new Def_valueContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_def_value);
		int _la;
		try {
			setState(3071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3064);
				figurative_constant();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3065);
				match(STRING_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 3);
				{
				setState(3066);
				qualified_data_item();
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3067);
				match(CURRENT);
				setState(3069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(3068);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protected_valueContext extends ParserRuleContext {
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public Prot_size_valueContext prot_size_value() {
			return getRuleContext(Prot_size_valueContext.class,0);
		}
		public TerminalNode AUTOTERMINATE() { return getToken(cobolParser.AUTOTERMINATE, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode EDITING() { return getToken(cobolParser.EDITING, 0); }
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public Prot_fill_litContext prot_fill_lit() {
			return getRuleContext(Prot_fill_litContext.class,0);
		}
		public Protected_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protected_value; }
	}

	public final Protected_valueContext protected_value() throws RecognitionException {
		Protected_valueContext _localctx = new Protected_valueContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_protected_value);
		int _la;
		try {
			setState(3093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3073);
				match(SIZE);
				setState(3074);
				prot_size_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3075);
					match(WITH);
					}
				}

				setState(3078);
				match(AUTOTERMINATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3079);
					match(WITH);
					}
				}

				setState(3082);
				match(NO);
				setState(3083);
				match(BLANK);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3084);
					match(WITH);
					}
				}

				setState(3087);
				match(EDITING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3088);
					match(WITH);
					}
				}

				setState(3091);
				match(FILLER);
				setState(3092);
				prot_fill_lit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prot_fill_litContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Prot_fill_litContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prot_fill_lit; }
	}

	public final Prot_fill_litContext prot_fill_lit() throws RecognitionException {
		Prot_fill_litContext _localctx = new Prot_fill_litContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_prot_fill_lit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prot_size_valueContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Prot_size_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prot_size_value; }
	}

	public final Prot_size_valueContext prot_size_value() throws RecognitionException {
		Prot_size_valueContext _localctx = new Prot_size_valueContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_prot_size_value);
		try {
			setState(3099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3097);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3098);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_valueContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Number_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_value; }
	}

	public final Number_valueContext number_value() throws RecognitionException {
		Number_valueContext _localctx = new Number_valueContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_number_value);
		int _la;
		try {
			setState(3113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3101);
				line_num();
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3102);
				qualified_data_item();
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS) {
					{
					setState(3103);
					match(PLUS);
					setState(3105);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
					case 1:
						{
						setState(3104);
						line_num();
						}
						break;
					}
					}
				}

				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3109);
				match(PLUS);
				setState(3111);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(3110);
					line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_timeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(cobolParser.DATE, 0); }
		public TerminalNode YYYYMMDD() { return getToken(cobolParser.YYYYMMDD, 0); }
		public TerminalNode DAY() { return getToken(cobolParser.DAY, 0); }
		public TerminalNode YYYYDDD() { return getToken(cobolParser.YYYYDDD, 0); }
		public TerminalNode DAY_OF_WEEK() { return getToken(cobolParser.DAY_OF_WEEK, 0); }
		public TerminalNode TIME() { return getToken(cobolParser.TIME, 0); }
		public Date_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_time; }
	}

	public final Date_timeContext date_time() throws RecognitionException {
		Date_timeContext _localctx = new Date_timeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_date_time);
		int _la;
		try {
			setState(3125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3115);
				match(DATE);
				setState(3117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==YYYYMMDD) {
					{
					setState(3116);
					match(YYYYMMDD);
					}
				}

				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3119);
				match(DAY);
				setState(3121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==YYYYDDD) {
					{
					setState(3120);
					match(YYYYDDD);
					}
				}

				}
				break;
			case DAY_OF_WEEK:
				enterOuterAlt(_localctx, 3);
				{
				setState(3123);
				match(DAY_OF_WEEK);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(3124);
				match(TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dest_itemContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Dest_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dest_item; }
	}

	public final Dest_itemContext dest_item() throws RecognitionException {
		Dest_itemContext _localctx = new Dest_itemContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_dest_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3127);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Input_sourceContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Input_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_input_source; }
	}

	public final Input_sourceContext input_source() throws RecognitionException {
		Input_sourceContext _localctx = new Input_sourceContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_input_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_endContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public At_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_end; }
	}

	public final At_endContext at_end() throws RecognitionException {
		At_endContext _localctx = new At_endContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_at_end);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3131);
				match(AT);
				}
			}

			setState(3134);
			match(END);
			setState(3136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3135);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_exceptionContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(cobolParser.EXCEPTION, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public On_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_exception; }
	}

	public final On_exceptionContext on_exception() throws RecognitionException {
		On_exceptionContext _localctx = new On_exceptionContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_on_exception);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3138);
				match(ON);
				}
			}

			setState(3141);
			match(EXCEPTION);
			setState(3143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3142);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_sizeContext extends ParserRuleContext {
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public TerminalNode ERROR() { return getToken(cobolParser.ERROR, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public On_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_size; }
	}

	public final On_sizeContext on_size() throws RecognitionException {
		On_sizeContext _localctx = new On_sizeContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_on_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3145);
				match(ON);
				}
			}

			setState(3148);
			match(SIZE);
			setState(3149);
			match(ERROR);
			setState(3151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(3150);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_overflowContext extends ParserRuleContext {
		public TerminalNode OVERFLOW() { return getToken(cobolParser.OVERFLOW, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public On_overflowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_overflow; }
	}

	public final On_overflowContext on_overflow() throws RecognitionException {
		On_overflowContext _localctx = new On_overflowContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_on_overflow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3153);
				match(ON);
				}
			}

			setState(3156);
			match(OVERFLOW);
			setState(3158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3157);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_eopContext extends ParserRuleContext {
		public TerminalNode END_OF_PAGE() { return getToken(cobolParser.END_OF_PAGE, 0); }
		public TerminalNode EOP() { return getToken(cobolParser.EOP, 0); }
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public At_eopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_eop; }
	}

	public final At_eopContext at_eop() throws RecognitionException {
		At_eopContext _localctx = new At_eopContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_at_eop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3160);
				match(AT);
				}
			}

			setState(3163);
			_la = _input.LA(1);
			if ( !(_la==END_OF_PAGE || _la==EOP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3164);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invalid_keyContext extends ParserRuleContext {
		public TerminalNode INVALID() { return getToken(cobolParser.INVALID, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public SentenseContext sentense() {
			return getRuleContext(SentenseContext.class,0);
		}
		public Invalid_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invalid_key; }
	}

	public final Invalid_keyContext invalid_key() throws RecognitionException {
		Invalid_keyContext _localctx = new Invalid_keyContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_invalid_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(INVALID);
			setState(3169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(3168);
				match(KEY);
				}
			}

			setState(3172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(3171);
				sentense();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sectionContext extends ParserRuleContext {
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<File_description_entryContext> file_description_entry() {
			return getRuleContexts(File_description_entryContext.class);
		}
		public File_description_entryContext file_description_entry(int i) {
			return getRuleContext(File_description_entryContext.class,i);
		}
		public List<Report_description_entryContext> report_description_entry() {
			return getRuleContexts(Report_description_entryContext.class);
		}
		public Report_description_entryContext report_description_entry(int i) {
			return getRuleContext(Report_description_entryContext.class,i);
		}
		public List<Sort_merge_file_description_entryContext> sort_merge_file_description_entry() {
			return getRuleContexts(Sort_merge_file_description_entryContext.class);
		}
		public Sort_merge_file_description_entryContext sort_merge_file_description_entry(int i) {
			return getRuleContext(Sort_merge_file_description_entryContext.class,i);
		}
		public List<Record_description_entryContext> record_description_entry() {
			return getRuleContexts(Record_description_entryContext.class);
		}
		public Record_description_entryContext record_description_entry(int i) {
			return getRuleContext(Record_description_entryContext.class,i);
		}
		public File_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_section; }
	}

	public final File_sectionContext file_section() throws RecognitionException {
		File_sectionContext _localctx = new File_sectionContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_file_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(FILE);
			setState(3175);
			match(SECTION);
			setState(3176);
			match(DOT_);
			setState(3196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FD || _la==RD || _la==SD) {
				{
				{
				setState(3192);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FD:
					{
					setState(3177);
					file_description_entry();
					setState(3181);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==NUMERIC_LITERAL) {
						{
						{
						setState(3178);
						record_description_entry();
						}
						}
						setState(3183);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case RD:
					{
					setState(3184);
					report_description_entry();
					}
					break;
				case SD:
					{
					setState(3185);
					sort_merge_file_description_entry();
					setState(3189);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==NUMERIC_LITERAL) {
						{
						{
						setState(3186);
						record_description_entry();
						}
						}
						setState(3191);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(3198);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Working_storage_sectionContext extends ParserRuleContext {
		public TerminalNode WORKING_STORAGE() { return getToken(cobolParser.WORKING_STORAGE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Record_description_entryContext> record_description_entry() {
			return getRuleContexts(Record_description_entryContext.class);
		}
		public Record_description_entryContext record_description_entry(int i) {
			return getRuleContext(Record_description_entryContext.class,i);
		}
		public Working_storage_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_working_storage_section; }
	}

	public final Working_storage_sectionContext working_storage_section() throws RecognitionException {
		Working_storage_sectionContext _localctx = new Working_storage_sectionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_working_storage_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			match(WORKING_STORAGE);
			setState(3200);
			match(SECTION);
			setState(3201);
			match(DOT_);
			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NUMERIC_LITERAL) {
				{
				{
				setState(3202);
				record_description_entry();
				}
				}
				setState(3207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Linkage_sectionContext extends ParserRuleContext {
		public TerminalNode LINKAGE() { return getToken(cobolParser.LINKAGE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Record_description_entryContext> record_description_entry() {
			return getRuleContexts(Record_description_entryContext.class);
		}
		public Record_description_entryContext record_description_entry(int i) {
			return getRuleContext(Record_description_entryContext.class,i);
		}
		public Linkage_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linkage_section; }
	}

	public final Linkage_sectionContext linkage_section() throws RecognitionException {
		Linkage_sectionContext _localctx = new Linkage_sectionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_linkage_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			match(LINKAGE);
			setState(3209);
			match(SECTION);
			setState(3210);
			match(DOT_);
			setState(3214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NUMERIC_LITERAL) {
				{
				{
				setState(3211);
				record_description_entry();
				}
				}
				setState(3216);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_sectionContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Report_description_entryContext> report_description_entry() {
			return getRuleContexts(Report_description_entryContext.class);
		}
		public Report_description_entryContext report_description_entry(int i) {
			return getRuleContext(Report_description_entryContext.class,i);
		}
		public List<Report_group_description_entryContext> report_group_description_entry() {
			return getRuleContexts(Report_group_description_entryContext.class);
		}
		public Report_group_description_entryContext report_group_description_entry(int i) {
			return getRuleContext(Report_group_description_entryContext.class,i);
		}
		public Report_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_section; }
	}

	public final Report_sectionContext report_section() throws RecognitionException {
		Report_sectionContext _localctx = new Report_sectionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_report_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3217);
			match(REPORT);
			setState(3218);
			match(SECTION);
			setState(3219);
			match(DOT_);
			setState(3229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==RD) {
				{
				{
				setState(3220);
				report_description_entry();
				setState(3224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NUMERIC_LITERAL) {
					{
					{
					setState(3221);
					report_group_description_entry();
					}
					}
					setState(3226);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(3231);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_sectionContext extends ParserRuleContext {
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Screen_description_entryContext> screen_description_entry() {
			return getRuleContexts(Screen_description_entryContext.class);
		}
		public Screen_description_entryContext screen_description_entry(int i) {
			return getRuleContext(Screen_description_entryContext.class,i);
		}
		public Screen_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_section; }
	}

	public final Screen_sectionContext screen_section() throws RecognitionException {
		Screen_sectionContext _localctx = new Screen_sectionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_screen_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3232);
			match(SCREEN);
			setState(3233);
			match(SECTION);
			setState(3234);
			match(DOT_);
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NUMERIC_LITERAL) {
				{
				{
				setState(3235);
				screen_description_entry();
				}
				}
				setState(3240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_description_entryContext extends ParserRuleContext {
		public TerminalNode FD() { return getToken(cobolParser.FD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Fd_clauseContext> fd_clause() {
			return getRuleContexts(Fd_clauseContext.class);
		}
		public Fd_clauseContext fd_clause(int i) {
			return getRuleContext(Fd_clauseContext.class,i);
		}
		public File_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_description_entry; }
	}

	public final File_description_entryContext file_description_entry() throws RecognitionException {
		File_description_entryContext _localctx = new File_description_entryContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_file_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			match(FD);
			setState(3242);
			file_name();
			setState(3246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ALTERNATE) | (1L << BLOCK) | (1L << CODE_SET))) != 0) || _la==DATA || _la==DYNAMIC || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (EXTERNAL - 172)) | (1L << (FILE - 172)) | (1L << (GLOBAL - 172)) | (1L << (IS - 172)) | (1L << (LABEL - 172)) | (1L << (LINAGE - 172)))) != 0) || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (RANDOM - 304)) | (1L << (RECORD - 304)) | (1L << (REPORT - 304)) | (1L << (REPORTS - 304)) | (1L << (SEQUENTIAL - 304)) | (1L << (STATUS - 304)))) != 0) || _la==VALUE) {
				{
				{
				setState(3243);
				fd_clause();
				}
				}
				setState(3248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3249);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_merge_file_description_entryContext extends ParserRuleContext {
		public TerminalNode SD() { return getToken(cobolParser.SD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Sd_clauseContext> sd_clause() {
			return getRuleContexts(Sd_clauseContext.class);
		}
		public Sd_clauseContext sd_clause(int i) {
			return getRuleContext(Sd_clauseContext.class,i);
		}
		public Sort_merge_file_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_merge_file_description_entry; }
	}

	public final Sort_merge_file_description_entryContext sort_merge_file_description_entry() throws RecognitionException {
		Sort_merge_file_description_entryContext _localctx = new Sort_merge_file_description_entryContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_sort_merge_file_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3251);
			match(SD);
			setState(3252);
			file_name();
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DATA || _la==RECORD) {
				{
				{
				setState(3253);
				sd_clause();
				}
				}
				setState(3258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3259);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_description_entryContext extends ParserRuleContext {
		public TerminalNode RD() { return getToken(cobolParser.RD, 0); }
		public Report_nameContext report_name() {
			return getRuleContext(Report_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Rd_clauseContext> rd_clause() {
			return getRuleContexts(Rd_clauseContext.class);
		}
		public Rd_clauseContext rd_clause(int i) {
			return getRuleContext(Rd_clauseContext.class,i);
		}
		public Report_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_description_entry; }
	}

	public final Report_description_entryContext report_description_entry() throws RecognitionException {
		Report_description_entryContext _localctx = new Report_description_entryContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_report_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3261);
			match(RD);
			setState(3262);
			report_name();
			setState(3266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (CODE - 62)) | (1L << (CONTROL - 62)) | (1L << (CONTROLS - 62)))) != 0) || _la==GLOBAL || _la==IS || _la==PAGE) {
				{
				{
				setState(3263);
				rd_clause();
				}
				}
				setState(3268);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3269);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fd_clauseContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public Block_containsContext block_contains() {
			return getRuleContext(Block_containsContext.class,0);
		}
		public RecordContext record() {
			return getRuleContext(RecordContext.class,0);
		}
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public Value_of_idContext value_of_id() {
			return getRuleContext(Value_of_idContext.class,0);
		}
		public Data_recContext data_rec() {
			return getRuleContext(Data_recContext.class,0);
		}
		public LinageContext linage() {
			return getRuleContext(LinageContext.class,0);
		}
		public Report_isContext report_is() {
			return getRuleContext(Report_isContext.class,0);
		}
		public Code_setContext code_set() {
			return getRuleContext(Code_setContext.class,0);
		}
		public Access_modeContext access_mode() {
			return getRuleContext(Access_modeContext.class,0);
		}
		public Record_keyContext record_key() {
			return getRuleContext(Record_keyContext.class,0);
		}
		public File_statusContext file_status() {
			return getRuleContext(File_statusContext.class,0);
		}
		public Fd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fd_clause; }
	}

	public final Fd_clauseContext fd_clause() throws RecognitionException {
		Fd_clauseContext _localctx = new Fd_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_fd_clause);
		int _la;
		try {
			setState(3290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3271);
					match(IS);
					}
				}

				setState(3274);
				match(EXTERNAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3275);
					match(IS);
					}
				}

				setState(3278);
				match(GLOBAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3279);
				block_contains();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3280);
				record();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3281);
				label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3282);
				value_of_id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3283);
				data_rec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3284);
				linage();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3285);
				report_is();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3286);
				code_set();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3287);
				access_mode();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3288);
				record_key();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3289);
				file_status();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_description_entryContext extends ParserRuleContext {
		public List<Data_description_entryContext> data_description_entry() {
			return getRuleContexts(Data_description_entryContext.class);
		}
		public Data_description_entryContext data_description_entry(int i) {
			return getRuleContext(Data_description_entryContext.class,i);
		}
		public Record_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_description_entry; }
	}

	public final Record_description_entryContext record_description_entry() throws RecognitionException {
		Record_description_entryContext _localctx = new Record_description_entryContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_record_description_entry);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			data_description_entry();
			setState(3296);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3293);
					data_description_entry();
					}
					} 
				}
				setState(3298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_description_entryContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode REDEFINES() { return getToken(cobolParser.REDEFINES, 0); }
		public Other_data_itemContext other_data_item() {
			return getRuleContext(Other_data_itemContext.class,0);
		}
		public List<Data_description_clauseContext> data_description_clause() {
			return getRuleContexts(Data_description_clauseContext.class);
		}
		public Data_description_clauseContext data_description_clause(int i) {
			return getRuleContext(Data_description_clauseContext.class,i);
		}
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public Data_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_description_entry; }
	}

	public final Data_description_entryContext data_description_entry() throws RecognitionException {
		Data_description_entryContext _localctx = new Data_description_entryContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_data_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			level_number();
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILLER || _la==USER_DEFINED_WORD) {
				{
				setState(3302);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USER_DEFINED_WORD:
					{
					setState(3300);
					data_name();
					}
					break;
				case FILLER:
					{
					setState(3301);
					match(FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDEFINES) {
				{
				setState(3306);
				match(REDEFINES);
				setState(3307);
				other_data_item();
				}
			}

			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARY) | (1L << BINARY_CHAR) | (1L << BINARY_DOUBLE) | (1L << BINARY_LONG) | (1L << BINARY_SHORT) | (1L << BLANK))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (COMP - 68)) | (1L << (COMPUTATIONAL - 68)) | (1L << (COMPUTATIONAL_1 - 68)) | (1L << (COMPUTATIONAL_2 - 68)) | (1L << (COMPUTATIONAL_3 - 68)) | (1L << (COMPUTATIONAL_4 - 68)) | (1L << (COMPUTATIONAL_5 - 68)) | (1L << (COMPUTATIONAL_X - 68)) | (1L << (COMP_1 - 68)) | (1L << (COMP_2 - 68)) | (1L << (COMP_3 - 68)) | (1L << (COMP_4 - 68)) | (1L << (COMP_5 - 68)) | (1L << (COMP_X - 68)) | (1L << (DISPLAY - 68)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (EXTERNAL - 172)) | (1L << (FLOAT_EXTENDED - 172)) | (1L << (FLOAT_LONG - 172)) | (1L << (FLOAT_SHORT - 172)) | (1L << (GLOBAL - 172)) | (1L << (INDEX - 172)) | (1L << (IS - 172)) | (1L << (JUST - 172)) | (1L << (JUSTIFIED - 172)) | (1L << (LEADING - 172)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (OCCURS - 261)) | (1L << (PACKED_DECIMAL - 261)) | (1L << (PIC - 261)) | (1L << (PICTURE - 261)) | (1L << (POINTER - 261)) | (1L << (POINTER_64 - 261)) | (1L << (RENAMES - 261)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (SIGN - 353)) | (1L << (SYNC - 353)) | (1L << (SYNCHRONIZED - 353)) | (1L << (TRAILING - 353)) | (1L << (USAGE - 353)) | (1L << (VALUE - 353)) | (1L << (VALUES - 353)))) != 0)) {
				{
				{
				setState(3310);
				data_description_clause();
				}
				}
				setState(3315);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3316);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Level_numberContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Level_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_level_number; }
	}

	public final Level_numberContext level_number() throws RecognitionException {
		Level_numberContext _localctx = new Level_numberContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_level_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3318);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_description_clauseContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public UsageContext usage() {
			return getRuleContext(UsageContext.class,0);
		}
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public OccursContext occurs() {
			return getRuleContext(OccursContext.class,0);
		}
		public TerminalNode SYNCHRONIZED() { return getToken(cobolParser.SYNCHRONIZED, 0); }
		public TerminalNode SYNC() { return getToken(cobolParser.SYNC, 0); }
		public TerminalNode LEFT() { return getToken(cobolParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(cobolParser.RIGHT, 0); }
		public TerminalNode JUSTIFIED() { return getToken(cobolParser.JUSTIFIED, 0); }
		public TerminalNode JUST() { return getToken(cobolParser.JUST, 0); }
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public TerminalNode WHEN() { return getToken(cobolParser.WHEN, 0); }
		public Value_isContext value_is() {
			return getRuleContext(Value_isContext.class,0);
		}
		public RenamesContext renames() {
			return getRuleContext(RenamesContext.class,0);
		}
		public Data_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_description_clause; }
	}

	public final Data_description_clauseContext data_description_clause() throws RecognitionException {
		Data_description_clauseContext _localctx = new Data_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_data_description_clause);
		int _la;
		try {
			setState(3347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3320);
					match(IS);
					}
				}

				setState(3323);
				match(EXTERNAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3324);
					match(IS);
					}
				}

				setState(3327);
				match(GLOBAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3328);
				picture();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3329);
				usage();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3330);
				sign_is();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3331);
				occurs();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3332);
				_la = _input.LA(1);
				if ( !(_la==SYNC || _la==SYNCHRONIZED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3333);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3336);
				_la = _input.LA(1);
				if ( !(_la==JUST || _la==JUSTIFIED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RIGHT) {
					{
					setState(3337);
					match(RIGHT);
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3340);
				match(BLANK);
				setState(3342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3341);
					match(WHEN);
					}
				}

				setState(3344);
				match(ZERO);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3345);
				value_is();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3346);
				renames();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamesContext extends ParserRuleContext {
		public TerminalNode RENAMES() { return getToken(cobolParser.RENAMES, 0); }
		public Rename_startContext rename_start() {
			return getRuleContext(Rename_startContext.class,0);
		}
		public Rename_endContext rename_end() {
			return getRuleContext(Rename_endContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public RenamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renames; }
	}

	public final RenamesContext renames() throws RecognitionException {
		RenamesContext _localctx = new RenamesContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_renames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3349);
			match(RENAMES);
			setState(3350);
			rename_start();
			setState(3353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(3351);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3352);
				rename_end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_startContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rename_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_start; }
	}

	public final Rename_startContext rename_start() throws RecognitionException {
		Rename_startContext _localctx = new Rename_startContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_rename_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3355);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_endContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rename_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_end; }
	}

	public final Rename_endContext rename_end() throws RecognitionException {
		Rename_endContext _localctx = new Rename_endContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_rename_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3357);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_isContext extends ParserRuleContext {
		public List<Value_is_definitionContext> value_is_definition() {
			return getRuleContexts(Value_is_definitionContext.class);
		}
		public Value_is_definitionContext value_is_definition(int i) {
			return getRuleContext(Value_is_definitionContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(cobolParser.VALUES, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public Value_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is; }
	}

	public final Value_isContext value_is() throws RecognitionException {
		Value_isContext _localctx = new Value_isContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_value_is);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUE:
				{
				setState(3359);
				match(VALUE);
				setState(3361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3360);
					match(IS);
					}
				}

				}
				break;
			case VALUES:
				{
				setState(3363);
				match(VALUES);
				setState(3365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3364);
					match(ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3369);
			value_is_definition();
			setState(3373);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3370);
					value_is_definition();
					}
					} 
				}
				setState(3375);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,504,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definitionContext extends ParserRuleContext {
		public Value_is_definition_partContext value_is_definition_part() {
			return getRuleContext(Value_is_definition_partContext.class,0);
		}
		public Value_is_definition_thruContext value_is_definition_thru() {
			return getRuleContext(Value_is_definition_thruContext.class,0);
		}
		public Value_is_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition; }
	}

	public final Value_is_definitionContext value_is_definition() throws RecognitionException {
		Value_is_definitionContext _localctx = new Value_is_definitionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_value_is_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			value_is_definition_part();
			setState(3378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(3377);
				value_is_definition_thru();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definition_partContext extends ParserRuleContext {
		public Value_is_literalContext value_is_literal() {
			return getRuleContext(Value_is_literalContext.class,0);
		}
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public Ref_data_nameContext ref_data_name() {
			return getRuleContext(Ref_data_nameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public External_nameContext external_name() {
			return getRuleContext(External_nameContext.class,0);
		}
		public Value_is_definition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition_part; }
	}

	public final Value_is_definition_partContext value_is_definition_part() throws RecognitionException {
		Value_is_definition_partContext _localctx = new Value_is_definition_partContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_value_is_definition_part);
		try {
			setState(3385);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3380);
				value_is_literal();
				}
				break;
			case REFERENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3381);
				match(REFERENCE);
				setState(3382);
				ref_data_name();
				}
				break;
			case EXTERNAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3383);
				match(EXTERNAL);
				setState(3384);
				external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definition_thruContext extends ParserRuleContext {
		public Value_is_definition_partContext value_is_definition_part() {
			return getRuleContext(Value_is_definition_partContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public Value_is_definition_thruContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition_thru; }
	}

	public final Value_is_definition_thruContext value_is_definition_thru() throws RecognitionException {
		Value_is_definition_thruContext _localctx = new Value_is_definition_thruContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_value_is_definition_thru);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387);
			_la = _input.LA(1);
			if ( !(_la==THROUGH || _la==THRU) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3388);
			value_is_definition_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public External_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_name; }
	}

	public final External_nameContext external_name() throws RecognitionException {
		External_nameContext _localctx = new External_nameContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_external_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_data_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Ref_data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_data_name; }
	}

	public final Ref_data_nameContext ref_data_name() throws RecognitionException {
		Ref_data_nameContext _localctx = new Ref_data_nameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_ref_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Value_is_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_literal; }
	}

	public final Value_is_literalContext value_is_literal() throws RecognitionException {
		Value_is_literalContext _localctx = new Value_is_literalContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_value_is_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3394);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMERIC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OccursContext extends ParserRuleContext {
		public TerminalNode OCCURS() { return getToken(cobolParser.OCCURS, 0); }
		public Times_definitionContext times_definition() {
			return getRuleContext(Times_definitionContext.class,0);
		}
		public List<Key_isContext> key_is() {
			return getRuleContexts(Key_isContext.class);
		}
		public Key_isContext key_is(int i) {
			return getRuleContext(Key_isContext.class,i);
		}
		public Indexed_byContext indexed_by() {
			return getRuleContext(Indexed_byContext.class,0);
		}
		public OccursContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_occurs; }
	}

	public final OccursContext occurs() throws RecognitionException {
		OccursContext _localctx = new OccursContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_occurs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			match(OCCURS);
			setState(3397);
			times_definition();
			setState(3401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ASCENDING || _la==DESCENDING) {
				{
				{
				setState(3398);
				key_is();
				}
				}
				setState(3403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED) {
				{
				setState(3404);
				indexed_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexed_byContext extends ParserRuleContext {
		public TerminalNode INDEXED() { return getToken(cobolParser.INDEXED, 0); }
		public List<Ind_nameContext> ind_name() {
			return getRuleContexts(Ind_nameContext.class);
		}
		public Ind_nameContext ind_name(int i) {
			return getRuleContext(Ind_nameContext.class,i);
		}
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Indexed_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexed_by; }
	}

	public final Indexed_byContext indexed_by() throws RecognitionException {
		Indexed_byContext _localctx = new Indexed_byContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_indexed_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3407);
			match(INDEXED);
			setState(3409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(3408);
				match(BY);
				}
			}

			setState(3411);
			ind_name();
			setState(3415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER_DEFINED_WORD) {
				{
				{
				setState(3412);
				ind_name();
				}
				}
				setState(3417);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ind_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Ind_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ind_name; }
	}

	public final Ind_nameContext ind_name() throws RecognitionException {
		Ind_nameContext _localctx = new Ind_nameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_ind_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3418);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_isContext extends ParserRuleContext {
		public List<Key_nameContext> key_name() {
			return getRuleContexts(Key_nameContext.class);
		}
		public Key_nameContext key_name(int i) {
			return getRuleContext(Key_nameContext.class,i);
		}
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Key_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_is; }
	}

	public final Key_isContext key_is() throws RecognitionException {
		Key_isContext _localctx = new Key_isContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_key_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3420);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(3421);
				match(KEY);
				}
			}

			setState(3425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3424);
				match(IS);
				}
			}

			setState(3427);
			key_name();
			setState(3431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER_DEFINED_WORD) {
				{
				{
				setState(3428);
				key_name();
				}
				}
				setState(3433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Key_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_name; }
	}

	public final Key_nameContext key_name() throws RecognitionException {
		Key_nameContext _localctx = new Key_nameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_key_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3434);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Times_definitionContext extends ParserRuleContext {
		public Table_sizeContext table_size() {
			return getRuleContext(Table_sizeContext.class,0);
		}
		public TerminalNode TIMES() { return getToken(cobolParser.TIMES, 0); }
		public Min_timesContext min_times() {
			return getRuleContext(Min_timesContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Max_timesContext max_times() {
			return getRuleContext(Max_timesContext.class,0);
		}
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Depending_itemContext depending_item() {
			return getRuleContext(Depending_itemContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Times_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_times_definition; }
	}

	public final Times_definitionContext times_definition() throws RecognitionException {
		Times_definitionContext _localctx = new Times_definitionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_times_definition);
		int _la;
		try {
			setState(3449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3436);
				table_size();
				setState(3437);
				match(TIMES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3439);
				min_times();
				setState(3440);
				match(TO);
				setState(3441);
				max_times();
				setState(3442);
				match(TIMES);
				setState(3443);
				match(DEPENDING);
				setState(3445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3444);
					match(ON);
					}
				}

				setState(3447);
				depending_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sizeContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Table_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_size; }
	}

	public final Table_sizeContext table_size() throws RecognitionException {
		Table_sizeContext _localctx = new Table_sizeContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3451);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Min_timesContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Min_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_min_times; }
	}

	public final Min_timesContext min_times() throws RecognitionException {
		Min_timesContext _localctx = new Min_timesContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_min_times);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Max_timesContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Max_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_max_times; }
	}

	public final Max_timesContext max_times() throws RecognitionException {
		Max_timesContext _localctx = new Max_timesContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_max_times);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_group_description_entryContext extends ParserRuleContext {
		public List<Report_group_data_descriptionContext> report_group_data_description() {
			return getRuleContexts(Report_group_data_descriptionContext.class);
		}
		public Report_group_data_descriptionContext report_group_data_description(int i) {
			return getRuleContext(Report_group_data_descriptionContext.class,i);
		}
		public Report_group_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_group_description_entry; }
	}

	public final Report_group_description_entryContext report_group_description_entry() throws RecognitionException {
		Report_group_description_entryContext _localctx = new Report_group_description_entryContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_report_group_description_entry);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3457);
			report_group_data_description();
			setState(3461);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3458);
					report_group_data_description();
					}
					} 
				}
				setState(3463);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_group_data_descriptionContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public List<Report_group_data_description_clauseContext> report_group_data_description_clause() {
			return getRuleContexts(Report_group_data_description_clauseContext.class);
		}
		public Report_group_data_description_clauseContext report_group_data_description_clause(int i) {
			return getRuleContext(Report_group_data_description_clauseContext.class,i);
		}
		public Report_group_data_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_group_data_description; }
	}

	public final Report_group_data_descriptionContext report_group_data_description() throws RecognitionException {
		Report_group_data_descriptionContext _localctx = new Report_group_data_descriptionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_report_group_data_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3464);
			level_number();
			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_DEFINED_WORD) {
				{
				setState(3465);
				data_name();
				}
			}

			setState(3471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BLANK || _la==COLUMN || _la==DISPLAY || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (GROUP - 197)) | (1L << (JUST - 197)) | (1L << (JUSTIFIED - 197)) | (1L << (LEADING - 197)) | (1L << (LINE - 197)) | (1L << (NEXT - 197)))) != 0) || _la==PIC || _la==PICTURE || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (SIGN - 353)) | (1L << (SOURCE - 353)) | (1L << (SUM - 353)) | (1L << (TRAILING - 353)) | (1L << (TYPE - 353)) | (1L << (USAGE - 353)) | (1L << (VALUE - 353)))) != 0)) {
				{
				{
				setState(3468);
				report_group_data_description_clause();
				}
				}
				setState(3473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3474);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_group_data_description_clauseContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Line_num_definitionContext line_num_definition() {
			return getRuleContext(Line_num_definitionContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode GROUP() { return getToken(cobolParser.GROUP, 0); }
		public Next_group_definitionContext next_group_definition() {
			return getRuleContext(Next_group_definitionContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(cobolParser.TYPE, 0); }
		public Type_is_definitionContext type_is_definition() {
			return getRuleContext(Type_is_definitionContext.class,0);
		}
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public TerminalNode USAGE() { return getToken(cobolParser.USAGE, 0); }
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public TerminalNode WHEN() { return getToken(cobolParser.WHEN, 0); }
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Column_numberContext column_number() {
			return getRuleContext(Column_numberContext.class,0);
		}
		public TerminalNode INDICATE() { return getToken(cobolParser.INDICATE, 0); }
		public TerminalNode JUSTIFIED() { return getToken(cobolParser.JUSTIFIED, 0); }
		public TerminalNode JUST() { return getToken(cobolParser.JUST, 0); }
		public TerminalNode RIGHT() { return getToken(cobolParser.RIGHT, 0); }
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public TerminalNode SOURCE() { return getToken(cobolParser.SOURCE, 0); }
		public Source_nameContext source_name() {
			return getRuleContext(Source_nameContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Value_is_literalContext value_is_literal() {
			return getRuleContext(Value_is_literalContext.class,0);
		}
		public SumContext sum() {
			return getRuleContext(SumContext.class,0);
		}
		public Report_group_data_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_group_data_description_clause; }
	}

	public final Report_group_data_description_clauseContext report_group_data_description_clause() throws RecognitionException {
		Report_group_data_description_clauseContext _localctx = new Report_group_data_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_report_group_data_description_clause);
		int _la;
		try {
			setState(3536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LINE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3476);
				match(LINE);
				setState(3478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(3477);
					match(NUMBER);
					}
				}

				setState(3481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3480);
					match(IS);
					}
				}

				setState(3483);
				line_num_definition();
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3484);
				match(NEXT);
				setState(3485);
				match(GROUP);
				setState(3487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3486);
					match(IS);
					}
				}

				setState(3489);
				next_group_definition();
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3490);
				match(TYPE);
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3491);
					match(IS);
					}
				}

				setState(3494);
				type_is_definition();
				}
				break;
			case DISPLAY:
			case USAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USAGE) {
					{
					setState(3495);
					match(USAGE);
					setState(3497);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(3496);
						match(IS);
						}
					}

					}
				}

				setState(3501);
				match(DISPLAY);
				}
				break;
			case BLANK:
				enterOuterAlt(_localctx, 5);
				{
				setState(3502);
				match(BLANK);
				setState(3504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3503);
					match(WHEN);
					}
				}

				setState(3506);
				match(ZERO);
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 6);
				{
				setState(3507);
				match(COLUMN);
				setState(3509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(3508);
					match(NUMBER);
					}
				}

				setState(3512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3511);
					match(IS);
					}
				}

				setState(3514);
				column_number();
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 7);
				{
				setState(3515);
				match(GROUP);
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATE) {
					{
					setState(3516);
					match(INDICATE);
					}
				}

				}
				break;
			case JUST:
			case JUSTIFIED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3519);
				_la = _input.LA(1);
				if ( !(_la==JUST || _la==JUSTIFIED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RIGHT) {
					{
					setState(3520);
					match(RIGHT);
					}
				}

				}
				break;
			case PIC:
			case PICTURE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3523);
				picture();
				}
				break;
			case LEADING:
			case SIGN:
			case TRAILING:
				enterOuterAlt(_localctx, 10);
				{
				setState(3524);
				sign_is();
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3525);
				match(SOURCE);
				setState(3527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3526);
					match(IS);
					}
				}

				setState(3529);
				source_name();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3530);
				match(VALUE);
				setState(3532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3531);
					match(IS);
					}
				}

				setState(3534);
				value_is_literal();
				}
				break;
			case SUM:
				enterOuterAlt(_localctx, 13);
				{
				setState(3535);
				sum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sign_isContext extends ParserRuleContext {
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(cobolParser.TRAILING, 0); }
		public TerminalNode SIGN() { return getToken(cobolParser.SIGN, 0); }
		public TerminalNode SEPARATE() { return getToken(cobolParser.SEPARATE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode CHARACTER() { return getToken(cobolParser.CHARACTER, 0); }
		public Sign_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign_is; }
	}

	public final Sign_isContext sign_is() throws RecognitionException {
		Sign_isContext _localctx = new Sign_isContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_sign_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIGN) {
				{
				setState(3538);
				match(SIGN);
				setState(3540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3539);
					match(IS);
					}
				}

				}
			}

			setState(3544);
			_la = _input.LA(1);
			if ( !(_la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEPARATE) {
				{
				setState(3545);
				match(SEPARATE);
				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3546);
					match(CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SumContext extends ParserRuleContext {
		public List<TerminalNode> SUM() { return getTokens(cobolParser.SUM); }
		public TerminalNode SUM(int i) {
			return getToken(cobolParser.SUM, i);
		}
		public List<Sum_nameContext> sum_name() {
			return getRuleContexts(Sum_nameContext.class);
		}
		public Sum_nameContext sum_name(int i) {
			return getRuleContext(Sum_nameContext.class,i);
		}
		public TerminalNode RESET() { return getToken(cobolParser.RESET, 0); }
		public Control_foot_nameContext control_foot_name() {
			return getRuleContext(Control_foot_nameContext.class,0);
		}
		public List<TerminalNode> UPON() { return getTokens(cobolParser.UPON); }
		public TerminalNode UPON(int i) {
			return getToken(cobolParser.UPON, i);
		}
		public List<Detail_report_group_nameContext> detail_report_group_name() {
			return getRuleContexts(Detail_report_group_nameContext.class);
		}
		public Detail_report_group_nameContext detail_report_group_name(int i) {
			return getRuleContext(Detail_report_group_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public SumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sum; }
	}

	public final SumContext sum() throws RecognitionException {
		SumContext _localctx = new SumContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_sum);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3568); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3551);
					match(SUM);
					setState(3552);
					sum_name();
					setState(3556);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3553);
							sum_name();
							}
							} 
						}
						setState(3558);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
					}
					setState(3560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UPON) {
						{
						setState(3559);
						match(UPON);
						}
					}

					setState(3565);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==USER_DEFINED_WORD) {
						{
						{
						setState(3562);
						detail_report_group_name();
						}
						}
						setState(3567);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3570); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(3577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESET) {
				{
				setState(3572);
				match(RESET);
				setState(3574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3573);
					match(ON);
					}
				}

				setState(3576);
				control_foot_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_foot_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public Control_foot_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_foot_name; }
	}

	public final Control_foot_nameContext control_foot_name() throws RecognitionException {
		Control_foot_nameContext _localctx = new Control_foot_nameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_control_foot_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Detail_report_group_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Detail_report_group_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_detail_report_group_name; }
	}

	public final Detail_report_group_nameContext detail_report_group_name() throws RecognitionException {
		Detail_report_group_nameContext _localctx = new Detail_report_group_nameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_detail_report_group_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sum_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Sum_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sum_name; }
	}

	public final Sum_nameContext sum_name() throws RecognitionException {
		Sum_nameContext _localctx = new Sum_nameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_sum_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Source_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_name; }
	}

	public final Source_nameContext source_name() throws RecognitionException {
		Source_nameContext _localctx = new Source_nameContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_source_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_numberContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Column_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_number; }
	}

	public final Column_numberContext column_number() throws RecognitionException {
		Column_numberContext _localctx = new Column_numberContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_column_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_is_definitionContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public TerminalNode RH() { return getToken(cobolParser.RH, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public TerminalNode PH() { return getToken(cobolParser.PH, 0); }
		public Type_control_nameContext type_control_name() {
			return getRuleContext(Type_control_nameContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode CH() { return getToken(cobolParser.CH, 0); }
		public TerminalNode DETAIL() { return getToken(cobolParser.DETAIL, 0); }
		public TerminalNode DE() { return getToken(cobolParser.DE, 0); }
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public TerminalNode CF() { return getToken(cobolParser.CF, 0); }
		public TerminalNode PF() { return getToken(cobolParser.PF, 0); }
		public TerminalNode RF() { return getToken(cobolParser.RF, 0); }
		public Type_is_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_is_definition; }
	}

	public final Type_is_definitionContext type_is_definition() throws RecognitionException {
		Type_is_definitionContext _localctx = new Type_is_definitionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_type_is_definition);
		try {
			setState(3615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3589);
				match(REPORT);
				setState(3590);
				match(HEADING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3591);
				match(RH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3592);
				match(PAGE);
				setState(3593);
				match(HEADING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3594);
				match(PH);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3598);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTROL:
					{
					setState(3595);
					match(CONTROL);
					setState(3596);
					match(HEADING);
					}
					break;
				case CH:
					{
					setState(3597);
					match(CH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3600);
				type_control_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3601);
				match(DETAIL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3602);
				match(DE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3606);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTROL:
					{
					setState(3603);
					match(CONTROL);
					setState(3604);
					match(FOOTING);
					}
					break;
				case CF:
					{
					setState(3605);
					match(CF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3608);
				type_control_name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3609);
				match(PAGE);
				setState(3610);
				match(FOOTING);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3611);
				match(PF);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3612);
				match(REPORT);
				setState(3613);
				match(FOOTING);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3614);
				match(RF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_control_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public Type_control_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_control_name; }
	}

	public final Type_control_nameContext type_control_name() throws RecognitionException {
		Type_control_nameContext _localctx = new Type_control_nameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_type_control_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3617);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Next_group_definitionContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Next_group_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_next_group_definition; }
	}

	public final Next_group_definitionContext next_group_definition() throws RecognitionException {
		Next_group_definitionContext _localctx = new Next_group_definitionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_next_group_definition);
		try {
			setState(3624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3619);
				line_num();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3620);
				match(PLUS);
				setState(3621);
				line_num();
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3622);
				match(NEXT);
				setState(3623);
				match(PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_num_definitionContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Line_num_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_num_definition; }
	}

	public final Line_num_definitionContext line_num_definition() throws RecognitionException {
		Line_num_definitionContext _localctx = new Line_num_definitionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_line_num_definition);
		int _la;
		try {
			setState(3636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3626);
				line_num();
				setState(3632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(3628);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(3627);
						match(ON);
						}
					}

					setState(3630);
					match(NEXT);
					setState(3631);
					match(PAGE);
					}
					break;
				}
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3634);
				match(PLUS);
				setState(3635);
				line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Line_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_num; }
	}

	public final Line_numContext line_num() throws RecognitionException {
		Line_numContext _localctx = new Line_numContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_line_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3638);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rd_clauseContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode CODE() { return getToken(cobolParser.CODE, 0); }
		public Report_codeContext report_code() {
			return getRuleContext(Report_codeContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode CONTROLS() { return getToken(cobolParser.CONTROLS, 0); }
		public List<Control_nameContext> control_name() {
			return getRuleContexts(Control_nameContext.class);
		}
		public Control_nameContext control_name(int i) {
			return getRuleContext(Control_nameContext.class,i);
		}
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Page_size_rdContext page_size_rd() {
			return getRuleContext(Page_size_rdContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(cobolParser.LIMIT, 0); }
		public TerminalNode LIMITS() { return getToken(cobolParser.LIMITS, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public Heading_lineContext heading_line() {
			return getRuleContext(Heading_lineContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(cobolParser.FIRST, 0); }
		public List<TerminalNode> DETAIL() { return getTokens(cobolParser.DETAIL); }
		public TerminalNode DETAIL(int i) {
			return getToken(cobolParser.DETAIL, i);
		}
		public First_detail_lineContext first_detail_line() {
			return getRuleContext(First_detail_lineContext.class,0);
		}
		public TerminalNode LAST() { return getToken(cobolParser.LAST, 0); }
		public Last_detail_lineContext last_detail_line() {
			return getRuleContext(Last_detail_lineContext.class,0);
		}
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public Footing_line_rdContext footing_line_rd() {
			return getRuleContext(Footing_line_rdContext.class,0);
		}
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode LINES() { return getToken(cobolParser.LINES, 0); }
		public Rd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rd_clause; }
	}

	public final Rd_clauseContext rd_clause() throws RecognitionException {
		Rd_clauseContext _localctx = new Rd_clauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_rd_clause);
		int _la;
		try {
			setState(3705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3640);
					match(IS);
					}
				}

				setState(3643);
				match(GLOBAL);
				}
				break;
			case CODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				match(CODE);
				setState(3645);
				report_code();
				}
				break;
			case CONTROL:
			case CONTROLS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3654);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTROL:
					{
					setState(3646);
					match(CONTROL);
					setState(3648);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(3647);
						match(IS);
						}
					}

					}
					break;
				case CONTROLS:
					{
					setState(3650);
					match(CONTROLS);
					setState(3652);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ARE) {
						{
						setState(3651);
						match(ARE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3670);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USER_DEFINED_WORD:
					{
					setState(3656);
					control_name();
					setState(3660);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==USER_DEFINED_WORD) {
						{
						{
						setState(3657);
						control_name();
						}
						}
						setState(3662);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case FINAL:
					{
					setState(3663);
					match(FINAL);
					setState(3667);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==USER_DEFINED_WORD) {
						{
						{
						setState(3664);
						control_name();
						}
						}
						setState(3669);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3672);
				match(PAGE);
				setState(3681);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIMIT:
					{
					setState(3673);
					match(LIMIT);
					setState(3675);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(3674);
						match(IS);
						}
					}

					}
					break;
				case LIMITS:
					{
					setState(3677);
					match(LIMITS);
					setState(3679);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ARE) {
						{
						setState(3678);
						match(ARE);
						}
					}

					}
					break;
				case NUMERIC_LITERAL:
					break;
				default:
					break;
				}
				setState(3683);
				page_size_rd();
				setState(3685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINE || _la==LINES) {
					{
					setState(3684);
					_la = _input.LA(1);
					if ( !(_la==LINE || _la==LINES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HEADING) {
					{
					setState(3687);
					match(HEADING);
					setState(3688);
					heading_line();
					}
				}

				setState(3694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIRST) {
					{
					setState(3691);
					match(FIRST);
					setState(3692);
					match(DETAIL);
					setState(3693);
					first_detail_line();
					}
				}

				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LAST) {
					{
					setState(3696);
					match(LAST);
					setState(3697);
					match(DETAIL);
					setState(3698);
					last_detail_line();
					}
				}

				setState(3703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOOTING) {
					{
					setState(3701);
					match(FOOTING);
					setState(3702);
					footing_line_rd();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Footing_line_rdContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Footing_line_rdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_footing_line_rd; }
	}

	public final Footing_line_rdContext footing_line_rd() throws RecognitionException {
		Footing_line_rdContext _localctx = new Footing_line_rdContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_footing_line_rd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Last_detail_lineContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Last_detail_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_last_detail_line; }
	}

	public final Last_detail_lineContext last_detail_line() throws RecognitionException {
		Last_detail_lineContext _localctx = new Last_detail_lineContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_last_detail_line);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_detail_lineContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public First_detail_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_detail_line; }
	}

	public final First_detail_lineContext first_detail_line() throws RecognitionException {
		First_detail_lineContext _localctx = new First_detail_lineContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_first_detail_line);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3711);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Heading_lineContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Heading_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_heading_line; }
	}

	public final Heading_lineContext heading_line() throws RecognitionException {
		Heading_lineContext _localctx = new Heading_lineContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_heading_line);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Page_size_rdContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Page_size_rdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_page_size_rd; }
	}

	public final Page_size_rdContext page_size_rd() throws RecognitionException {
		Page_size_rdContext _localctx = new Page_size_rdContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_page_size_rd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Control_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_name; }
	}

	public final Control_nameContext control_name() throws RecognitionException {
		Control_nameContext _localctx = new Control_nameContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_control_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_codeContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Report_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_code; }
	}

	public final Report_codeContext report_code() throws RecognitionException {
		Report_codeContext _localctx = new Report_codeContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_report_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsageContext extends ParserRuleContext {
		public Usage_definitionContext usage_definition() {
			return getRuleContext(Usage_definitionContext.class,0);
		}
		public TerminalNode USAGE() { return getToken(cobolParser.USAGE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public UsageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage; }
	}

	public final UsageContext usage() throws RecognitionException {
		UsageContext _localctx = new UsageContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_usage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USAGE) {
				{
				setState(3721);
				match(USAGE);
				setState(3723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3722);
					match(IS);
					}
				}

				}
			}

			setState(3727);
			usage_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Usage_definitionContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(cobolParser.BINARY, 0); }
		public TerminalNode BINARY_CHAR() { return getToken(cobolParser.BINARY_CHAR, 0); }
		public TerminalNode SIGNED() { return getToken(cobolParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(cobolParser.UNSIGNED, 0); }
		public TerminalNode BINARY_SHORT() { return getToken(cobolParser.BINARY_SHORT, 0); }
		public TerminalNode BINARY_LONG() { return getToken(cobolParser.BINARY_LONG, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(cobolParser.BINARY_DOUBLE, 0); }
		public TerminalNode COMPUTATIONAL() { return getToken(cobolParser.COMPUTATIONAL, 0); }
		public TerminalNode COMPUTATIONAL_1() { return getToken(cobolParser.COMPUTATIONAL_1, 0); }
		public TerminalNode COMPUTATIONAL_2() { return getToken(cobolParser.COMPUTATIONAL_2, 0); }
		public TerminalNode COMPUTATIONAL_3() { return getToken(cobolParser.COMPUTATIONAL_3, 0); }
		public TerminalNode COMPUTATIONAL_4() { return getToken(cobolParser.COMPUTATIONAL_4, 0); }
		public TerminalNode COMPUTATIONAL_5() { return getToken(cobolParser.COMPUTATIONAL_5, 0); }
		public TerminalNode COMPUTATIONAL_X() { return getToken(cobolParser.COMPUTATIONAL_X, 0); }
		public TerminalNode COMP() { return getToken(cobolParser.COMP, 0); }
		public TerminalNode COMP_1() { return getToken(cobolParser.COMP_1, 0); }
		public TerminalNode COMP_2() { return getToken(cobolParser.COMP_2, 0); }
		public TerminalNode COMP_3() { return getToken(cobolParser.COMP_3, 0); }
		public TerminalNode COMP_4() { return getToken(cobolParser.COMP_4, 0); }
		public TerminalNode COMP_5() { return getToken(cobolParser.COMP_5, 0); }
		public TerminalNode COMP_X() { return getToken(cobolParser.COMP_X, 0); }
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public TerminalNode FLOAT_SHORT() { return getToken(cobolParser.FLOAT_SHORT, 0); }
		public TerminalNode FLOAT_LONG() { return getToken(cobolParser.FLOAT_LONG, 0); }
		public TerminalNode FLOAT_EXTENDED() { return getToken(cobolParser.FLOAT_EXTENDED, 0); }
		public TerminalNode INDEX() { return getToken(cobolParser.INDEX, 0); }
		public TerminalNode PACKED_DECIMAL() { return getToken(cobolParser.PACKED_DECIMAL, 0); }
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public TerminalNode POINTER_64() { return getToken(cobolParser.POINTER_64, 0); }
		public Usage_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage_definition; }
	}

	public final Usage_definitionContext usage_definition() throws RecognitionException {
		Usage_definitionContext _localctx = new Usage_definitionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_usage_definition);
		int _la;
		try {
			setState(3768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3729);
				match(BINARY);
				}
				break;
			case BINARY_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3730);
				match(BINARY_CHAR);
				setState(3732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(3731);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_SHORT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3734);
				match(BINARY_SHORT);
				setState(3736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(3735);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_LONG:
				enterOuterAlt(_localctx, 4);
				{
				setState(3738);
				match(BINARY_LONG);
				setState(3740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(3739);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3742);
				match(BINARY_DOUBLE);
				setState(3744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(3743);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case COMPUTATIONAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3746);
				match(COMPUTATIONAL);
				}
				break;
			case COMPUTATIONAL_1:
				enterOuterAlt(_localctx, 7);
				{
				setState(3747);
				match(COMPUTATIONAL_1);
				}
				break;
			case COMPUTATIONAL_2:
				enterOuterAlt(_localctx, 8);
				{
				setState(3748);
				match(COMPUTATIONAL_2);
				}
				break;
			case COMPUTATIONAL_3:
				enterOuterAlt(_localctx, 9);
				{
				setState(3749);
				match(COMPUTATIONAL_3);
				}
				break;
			case COMPUTATIONAL_4:
				enterOuterAlt(_localctx, 10);
				{
				setState(3750);
				match(COMPUTATIONAL_4);
				}
				break;
			case COMPUTATIONAL_5:
				enterOuterAlt(_localctx, 11);
				{
				setState(3751);
				match(COMPUTATIONAL_5);
				}
				break;
			case COMPUTATIONAL_X:
				enterOuterAlt(_localctx, 12);
				{
				setState(3752);
				match(COMPUTATIONAL_X);
				}
				break;
			case COMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(3753);
				match(COMP);
				}
				break;
			case COMP_1:
				enterOuterAlt(_localctx, 14);
				{
				setState(3754);
				match(COMP_1);
				}
				break;
			case COMP_2:
				enterOuterAlt(_localctx, 15);
				{
				setState(3755);
				match(COMP_2);
				}
				break;
			case COMP_3:
				enterOuterAlt(_localctx, 16);
				{
				setState(3756);
				match(COMP_3);
				}
				break;
			case COMP_4:
				enterOuterAlt(_localctx, 17);
				{
				setState(3757);
				match(COMP_4);
				}
				break;
			case COMP_5:
				enterOuterAlt(_localctx, 18);
				{
				setState(3758);
				match(COMP_5);
				}
				break;
			case COMP_X:
				enterOuterAlt(_localctx, 19);
				{
				setState(3759);
				match(COMP_X);
				}
				break;
			case DISPLAY:
				enterOuterAlt(_localctx, 20);
				{
				setState(3760);
				match(DISPLAY);
				}
				break;
			case FLOAT_SHORT:
				enterOuterAlt(_localctx, 21);
				{
				setState(3761);
				match(FLOAT_SHORT);
				}
				break;
			case FLOAT_LONG:
				enterOuterAlt(_localctx, 22);
				{
				setState(3762);
				match(FLOAT_LONG);
				}
				break;
			case FLOAT_EXTENDED:
				enterOuterAlt(_localctx, 23);
				{
				setState(3763);
				match(FLOAT_EXTENDED);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 24);
				{
				setState(3764);
				match(INDEX);
				}
				break;
			case PACKED_DECIMAL:
				enterOuterAlt(_localctx, 25);
				{
				setState(3765);
				match(PACKED_DECIMAL);
				}
				break;
			case POINTER:
				enterOuterAlt(_localctx, 26);
				{
				setState(3766);
				match(POINTER);
				}
				break;
			case POINTER_64:
				enterOuterAlt(_localctx, 27);
				{
				setState(3767);
				match(POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PictureContext extends ParserRuleContext {
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode PICTURE() { return getToken(cobolParser.PICTURE, 0); }
		public TerminalNode PIC() { return getToken(cobolParser.PIC, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_picture; }
	}

	public final PictureContext picture() throws RecognitionException {
		PictureContext _localctx = new PictureContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_picture);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			_la = _input.LA(1);
			if ( !(_la==PIC || _la==PICTURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3771);
				match(IS);
				}
			}

			setState(3774);
			character_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_stringContext extends ParserRuleContext {
		public List<Char_str_partContext> char_str_part() {
			return getRuleContexts(Char_str_partContext.class);
		}
		public Char_str_partContext char_str_part(int i) {
			return getRuleContext(Char_str_partContext.class,i);
		}
		public Character_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string; }
	}

	public final Character_stringContext character_string() throws RecognitionException {
		Character_stringContext _localctx = new Character_stringContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_character_string);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3777); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3776);
					char_str_part();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3779); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,574,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_str_partContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode COMMA_() { return getToken(cobolParser.COMMA_, 0); }
		public TerminalNode SLASH_() { return getToken(cobolParser.SLASH_, 0); }
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Char_str_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_str_part; }
	}

	public final Char_str_partContext char_str_part() throws RecognitionException {
		Char_str_partContext _localctx = new Char_str_partContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_char_str_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			_la = _input.LA(1);
			if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (SLASH_ - 432)) | (1L << (LPAREN_ - 432)) | (1L << (RPAREN_ - 432)) | (1L << (DOT_ - 432)) | (1L << (NUMERIC_LITERAL - 432)) | (1L << (USER_DEFINED_WORD - 432)) | (1L << (COMMA_ - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_data_itemContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Other_data_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_data_item; }
	}

	public final Other_data_itemContext other_data_item() throws RecognitionException {
		Other_data_itemContext _localctx = new Other_data_itemContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_other_data_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3783);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_name; }
	}

	public final Data_nameContext data_name() throws RecognitionException {
		Data_nameContext _localctx = new Data_nameContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sd_clauseContext extends ParserRuleContext {
		public RecordContext record() {
			return getRuleContext(RecordContext.class,0);
		}
		public Data_recContext data_rec() {
			return getRuleContext(Data_recContext.class,0);
		}
		public Sd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sd_clause; }
	}

	public final Sd_clauseContext sd_clause() throws RecognitionException {
		Sd_clauseContext _localctx = new Sd_clauseContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_sd_clause);
		try {
			setState(3789);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3787);
				record();
				}
				break;
			case DATA:
				enterOuterAlt(_localctx, 2);
				{
				setState(3788);
				data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_isContext extends ParserRuleContext {
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode REPORTS() { return getToken(cobolParser.REPORTS, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public Report_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_is; }
	}

	public final Report_isContext report_is() throws RecognitionException {
		Report_isContext _localctx = new Report_isContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_report_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPORT:
				{
				setState(3791);
				match(REPORT);
				setState(3793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3792);
					match(IS);
					}
				}

				}
				break;
			case REPORTS:
				{
				setState(3795);
				match(REPORTS);
				setState(3797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3796);
					match(ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3801);
			report_name();
			setState(3805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER_DEFINED_WORD) {
				{
				{
				setState(3802);
				report_name();
				}
				}
				setState(3807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Report_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_name; }
	}

	public final Report_nameContext report_name() throws RecognitionException {
		Report_nameContext _localctx = new Report_nameContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_report_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3808);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinageContext extends ParserRuleContext {
		public TerminalNode LINAGE() { return getToken(cobolParser.LINAGE, 0); }
		public Page_sizeContext page_size() {
			return getRuleContext(Page_sizeContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<TerminalNode> LINES() { return getTokens(cobolParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(cobolParser.LINES, i);
		}
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public Footing_lineContext footing_line() {
			return getRuleContext(Footing_lineContext.class,0);
		}
		public TerminalNode TOP() { return getToken(cobolParser.TOP, 0); }
		public Top_linesContext top_lines() {
			return getRuleContext(Top_linesContext.class,0);
		}
		public TerminalNode BOTTOM() { return getToken(cobolParser.BOTTOM, 0); }
		public Bottom_linesContext bottom_lines() {
			return getRuleContext(Bottom_linesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public List<TerminalNode> AT() { return getTokens(cobolParser.AT); }
		public TerminalNode AT(int i) {
			return getToken(cobolParser.AT, i);
		}
		public LinageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linage; }
	}

	public final LinageContext linage() throws RecognitionException {
		LinageContext _localctx = new LinageContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_linage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			match(LINAGE);
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3811);
				match(IS);
				}
			}

			setState(3814);
			page_size();
			setState(3816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				{
				setState(3815);
				match(LINES);
				}
				break;
			}
			setState(3826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOOTING || _la==WITH) {
				{
				setState(3819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3818);
					match(WITH);
					}
				}

				setState(3821);
				match(FOOTING);
				setState(3823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(3822);
					match(AT);
					}
				}

				setState(3825);
				footing_line();
				}
			}

			setState(3836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				{
				setState(3829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3828);
					match(LINES);
					}
				}

				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(3831);
					match(AT);
					}
				}

				setState(3834);
				match(TOP);
				setState(3835);
				top_lines();
				}
				break;
			}
			setState(3846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT || _la==BOTTOM || _la==LINES) {
				{
				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3838);
					match(LINES);
					}
				}

				setState(3842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(3841);
					match(AT);
					}
				}

				setState(3844);
				match(BOTTOM);
				setState(3845);
				bottom_lines();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bottom_linesContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Bottom_linesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bottom_lines; }
	}

	public final Bottom_linesContext bottom_lines() throws RecognitionException {
		Bottom_linesContext _localctx = new Bottom_linesContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_bottom_lines);
		try {
			setState(3850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3848);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3849);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_linesContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Top_linesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_lines; }
	}

	public final Top_linesContext top_lines() throws RecognitionException {
		Top_linesContext _localctx = new Top_linesContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_top_lines);
		try {
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3852);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3853);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Footing_lineContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Footing_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_footing_line; }
	}

	public final Footing_lineContext footing_line() throws RecognitionException {
		Footing_lineContext _localctx = new Footing_lineContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_footing_line);
		try {
			setState(3858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3857);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Page_sizeContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Page_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_page_size; }
	}

	public final Page_sizeContext page_size() throws RecognitionException {
		Page_sizeContext _localctx = new Page_sizeContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_page_size);
		try {
			setState(3862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3860);
				match(NUMERIC_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3861);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_recContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(cobolParser.DATA, 0); }
		public List<Rec_nameContext> rec_name() {
			return getRuleContexts(Rec_nameContext.class);
		}
		public Rec_nameContext rec_name(int i) {
			return getRuleContext(Rec_nameContext.class,i);
		}
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Data_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_rec; }
	}

	public final Data_recContext data_rec() throws RecognitionException {
		Data_recContext _localctx = new Data_recContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_data_rec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(DATA);
			setState(3873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORDS:
				{
				setState(3865);
				match(RECORDS);
				setState(3867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3866);
					match(ARE);
					}
				}

				}
				break;
			case RECORD:
				{
				setState(3869);
				match(RECORD);
				setState(3871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3870);
					match(IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3875);
			rec_name();
			setState(3879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER_DEFINED_WORD) {
				{
				{
				setState(3876);
				rec_name();
				}
				}
				setState(3881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rec_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Rec_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rec_name; }
	}

	public final Rec_nameContext rec_name() throws RecognitionException {
		Rec_nameContext _localctx = new Rec_nameContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_rec_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_idContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Value_of_id_definitionContext value_of_id_definition() {
			return getRuleContext(Value_of_id_definitionContext.class,0);
		}
		public TerminalNode ID() { return getToken(cobolParser.ID, 0); }
		public TerminalNode FILE_ID() { return getToken(cobolParser.FILE_ID, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Value_of_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_id; }
	}

	public final Value_of_idContext value_of_id() throws RecognitionException {
		Value_of_idContext _localctx = new Value_of_idContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_value_of_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			match(VALUE);
			setState(3885);
			match(OF);
			setState(3886);
			_la = _input.LA(1);
			if ( !(_la==FILE_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3887);
				match(IS);
				}
			}

			setState(3890);
			value_of_id_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_id_definitionContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Value_of_id_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_id_definition; }
	}

	public final Value_of_id_definitionContext value_of_id_definition() throws RecognitionException {
		Value_of_id_definitionContext _localctx = new Value_of_id_definitionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_value_of_id_definition);
		try {
			setState(3894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3892);
				match(STRING_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3893);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(cobolParser.LABEL, 0); }
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode OMITTED() { return getToken(cobolParser.OMITTED, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_label);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3896);
			match(LABEL);
			setState(3905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORDS:
				{
				setState(3897);
				match(RECORDS);
				setState(3899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3898);
					match(ARE);
					}
				}

				}
				break;
			case RECORD:
				{
				setState(3901);
				match(RECORD);
				setState(3903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3902);
					match(IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3907);
			_la = _input.LA(1);
			if ( !(_la==OMITTED || _la==STANDARD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RecordContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Record_definitionContext record_definition() {
			return getRuleContext(Record_definitionContext.class,0);
		}
		public RecordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record; }
	}

	public final RecordContext record() throws RecognitionException {
		RecordContext _localctx = new RecordContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_record);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3909);
			match(RECORD);
			setState(3910);
			record_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_definitionContext extends ParserRuleContext {
		public Longest_recContext longest_rec() {
			return getRuleContext(Longest_recContext.class,0);
		}
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public Shortest_recContext shortest_rec() {
			return getRuleContext(Shortest_recContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Depending_itemContext depending_item() {
			return getRuleContext(Depending_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Record_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_definition; }
	}

	public final Record_definitionContext record_definition() throws RecognitionException {
		Record_definitionContext _localctx = new Record_definitionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_record_definition);
		int _la;
		try {
			setState(3954);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINS:
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTAINS) {
					{
					setState(3912);
					match(CONTAINS);
					}
				}

				setState(3918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(3915);
					shortest_rec();
					setState(3916);
					match(TO);
					}
					break;
				}
				setState(3920);
				longest_rec();
				setState(3922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTERS) {
					{
					setState(3921);
					match(CHARACTERS);
					}
				}

				}
				break;
			case IS:
			case VARYING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3924);
					match(IS);
					}
				}

				setState(3927);
				match(VARYING);
				setState(3929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(3928);
					match(IN);
					}
				}

				setState(3932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(3931);
					match(SIZE);
					}
				}

				setState(3938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==NUMERIC_LITERAL) {
					{
					setState(3935);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(3934);
						match(FROM);
						}
					}

					setState(3937);
					shortest_rec();
					}
				}

				setState(3942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(3940);
					match(TO);
					setState(3941);
					longest_rec();
					}
				}

				setState(3945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTERS) {
					{
					setState(3944);
					match(CHARACTERS);
					}
				}

				setState(3952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEPENDING) {
					{
					setState(3947);
					match(DEPENDING);
					setState(3949);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(3948);
						match(ON);
						}
					}

					setState(3951);
					depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Depending_itemContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Depending_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_depending_item; }
	}

	public final Depending_itemContext depending_item() throws RecognitionException {
		Depending_itemContext _localctx = new Depending_itemContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_depending_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3956);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shortest_recContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Shortest_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shortest_rec; }
	}

	public final Shortest_recContext shortest_rec() throws RecognitionException {
		Shortest_recContext _localctx = new Shortest_recContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_shortest_rec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Longest_recContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Longest_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_longest_rec; }
	}

	public final Longest_recContext longest_rec() throws RecognitionException {
		Longest_recContext _localctx = new Longest_recContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_longest_rec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3960);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_description_entryContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Screen_description_clauseContext> screen_description_clause() {
			return getRuleContexts(Screen_description_clauseContext.class);
		}
		public Screen_description_clauseContext screen_description_clause(int i) {
			return getRuleContext(Screen_description_clauseContext.class,i);
		}
		public Screen_nameContext screen_name() {
			return getRuleContext(Screen_nameContext.class,0);
		}
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public Screen_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_description_entry; }
	}

	public final Screen_description_entryContext screen_description_entry() throws RecognitionException {
		Screen_description_entryContext _localctx = new Screen_description_entryContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_screen_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3962);
			level_number();
			setState(3967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILLER || _la==USER_DEFINED_WORD) {
				{
				setState(3965);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USER_DEFINED_WORD:
					{
					setState(3963);
					screen_name();
					}
					break;
				case FILLER:
					{
					setState(3964);
					match(FILLER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AUTO - 33)) | (1L << (BACKGROUND_COLOR - 33)) | (1L << (BELL - 33)) | (1L << (BLANK - 33)) | (1L << (BLINK - 33)) | (1L << (COLUMN - 33)))) != 0) || _la==DISPLAY || _la==ERASE || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (FOREGROUND_COLOR - 188)) | (1L << (FULL - 188)) | (1L << (HIGHLIGHT - 188)) | (1L << (JUST - 188)) | (1L << (JUSTIFIED - 188)) | (1L << (LEADING - 188)) | (1L << (LINE - 188)) | (1L << (LOWLIGHT - 188)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PIC - 284)) | (1L << (PICTURE - 284)) | (1L << (REQUIRED - 284)) | (1L << (REVERSE_VIDEO - 284)) | (1L << (SECURE - 284)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (SIGN - 353)) | (1L << (TRAILING - 353)) | (1L << (UNDERLINE - 353)) | (1L << (USAGE - 353)) | (1L << (VALUE - 353)))) != 0)) {
				{
				{
				setState(3969);
				screen_description_clause();
				}
				}
				setState(3974);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3975);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Screen_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_name; }
	}

	public final Screen_nameContext screen_name() throws RecognitionException {
		Screen_nameContext _localctx = new Screen_nameContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_screen_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3977);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_description_clauseContext extends ParserRuleContext {
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode FOREGROUND_COLOR() { return getToken(cobolParser.FOREGROUND_COLOR, 0); }
		public Color_numContext color_num() {
			return getRuleContext(Color_numContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode BACKGROUND_COLOR() { return getToken(cobolParser.BACKGROUND_COLOR, 0); }
		public TerminalNode AUTO() { return getToken(cobolParser.AUTO, 0); }
		public TerminalNode SECURE() { return getToken(cobolParser.SECURE, 0); }
		public TerminalNode REQUIRED() { return getToken(cobolParser.REQUIRED, 0); }
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public TerminalNode USAGE() { return getToken(cobolParser.USAGE, 0); }
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public TerminalNode FULL() { return getToken(cobolParser.FULL, 0); }
		public TerminalNode BELL() { return getToken(cobolParser.BELL, 0); }
		public TerminalNode BLINK() { return getToken(cobolParser.BLINK, 0); }
		public TerminalNode ERASE() { return getToken(cobolParser.ERASE, 0); }
		public TerminalNode EOL() { return getToken(cobolParser.EOL, 0); }
		public TerminalNode EOS() { return getToken(cobolParser.EOS, 0); }
		public TerminalNode HIGHLIGHT() { return getToken(cobolParser.HIGHLIGHT, 0); }
		public TerminalNode LOWLIGHT() { return getToken(cobolParser.LOWLIGHT, 0); }
		public TerminalNode REVERSE_VIDEO() { return getToken(cobolParser.REVERSE_VIDEO, 0); }
		public TerminalNode UNDERLINE() { return getToken(cobolParser.UNDERLINE, 0); }
		public Src_numberContext src_number() {
			return getRuleContext(Src_numberContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Nonnumeric_literalContext nonnumeric_literal() {
			return getRuleContext(Nonnumeric_literalContext.class,0);
		}
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public TerminalNode WHEN() { return getToken(cobolParser.WHEN, 0); }
		public TerminalNode JUSTIFIED() { return getToken(cobolParser.JUSTIFIED, 0); }
		public TerminalNode JUST() { return getToken(cobolParser.JUST, 0); }
		public TerminalNode RIGHT() { return getToken(cobolParser.RIGHT, 0); }
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public Scr_pic_usingContext scr_pic_using() {
			return getRuleContext(Scr_pic_usingContext.class,0);
		}
		public Scr_pic_fromContext scr_pic_from() {
			return getRuleContext(Scr_pic_fromContext.class,0);
		}
		public Scr_pic_toContext scr_pic_to() {
			return getRuleContext(Scr_pic_toContext.class,0);
		}
		public Screen_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_description_clause; }
	}

	public final Screen_description_clauseContext screen_description_clause() throws RecognitionException {
		Screen_description_clauseContext _localctx = new Screen_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_screen_description_clause);
		int _la;
		try {
			setState(4056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3979);
				match(BLANK);
				setState(3980);
				_la = _input.LA(1);
				if ( !(_la==LINE || _la==SCREEN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3981);
				match(FOREGROUND_COLOR);
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3982);
					match(IS);
					}
				}

				setState(3985);
				color_num();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3986);
				match(BACKGROUND_COLOR);
				setState(3988);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3987);
					match(IS);
					}
				}

				setState(3990);
				color_num();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3991);
				match(AUTO);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3992);
				match(SECURE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3993);
				match(REQUIRED);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USAGE) {
					{
					setState(3994);
					match(USAGE);
					setState(3996);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(3995);
						match(IS);
						}
					}

					}
				}

				setState(4000);
				match(DISPLAY);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4001);
				sign_is();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4002);
				match(FULL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4003);
				match(BELL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4004);
				match(BLINK);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4005);
				match(ERASE);
				setState(4006);
				_la = _input.LA(1);
				if ( !(_la==EOL || _la==EOS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4007);
				match(HIGHLIGHT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4008);
				match(LOWLIGHT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4009);
				match(REVERSE_VIDEO);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4010);
				match(UNDERLINE);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4011);
				match(LINE);
				setState(4013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(4012);
					match(NUMBER);
					}
				}

				setState(4016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4015);
					match(IS);
					}
				}

				setState(4019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS) {
					{
					setState(4018);
					match(PLUS);
					}
				}

				setState(4021);
				src_number();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4022);
				match(COLUMN);
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NUMBER) {
					{
					setState(4023);
					match(NUMBER);
					}
				}

				setState(4027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4026);
					match(IS);
					}
				}

				setState(4030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS) {
					{
					setState(4029);
					match(PLUS);
					}
				}

				setState(4032);
				src_number();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4033);
				match(VALUE);
				setState(4035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4034);
					match(IS);
					}
				}

				setState(4037);
				nonnumeric_literal();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4038);
				match(BLANK);
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4039);
					match(WHEN);
					}
				}

				setState(4042);
				match(ZERO);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4043);
				_la = _input.LA(1);
				if ( !(_la==JUST || _la==JUSTIFIED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RIGHT) {
					{
					setState(4044);
					match(RIGHT);
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4047);
				picture();
				setState(4054);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USING:
					{
					setState(4048);
					scr_pic_using();
					}
					break;
				case FROM:
					{
					setState(4049);
					scr_pic_from();
					setState(4051);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(4050);
						scr_pic_to();
						}
					}

					}
					break;
				case TO:
					{
					setState(4053);
					scr_pic_to();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Scr_pic_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_using; }
	}

	public final Scr_pic_usingContext scr_pic_using() throws RecognitionException {
		Scr_pic_usingContext _localctx = new Scr_pic_usingContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_scr_pic_using);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4058);
			match(USING);
			setState(4059);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Nonnumeric_literalContext nonnumeric_literal() {
			return getRuleContext(Nonnumeric_literalContext.class,0);
		}
		public Scr_pic_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_from; }
	}

	public final Scr_pic_fromContext scr_pic_from() throws RecognitionException {
		Scr_pic_fromContext _localctx = new Scr_pic_fromContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_scr_pic_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			match(FROM);
			setState(4064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				{
				setState(4062);
				qualified_data_item();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4063);
				nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Scr_pic_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_to; }
	}

	public final Scr_pic_toContext scr_pic_to() throws RecognitionException {
		Scr_pic_toContext _localctx = new Scr_pic_toContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_scr_pic_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4066);
			match(TO);
			setState(4067);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonnumeric_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Nonnumeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonnumeric_literal; }
	}

	public final Nonnumeric_literalContext nonnumeric_literal() throws RecognitionException {
		Nonnumeric_literalContext _localctx = new Nonnumeric_literalContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_nonnumeric_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_numberContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Src_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_number; }
	}

	public final Src_numberContext src_number() throws RecognitionException {
		Src_numberContext _localctx = new Src_numberContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_src_number);
		try {
			setState(4073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4071);
				qualified_data_item();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4072);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Color_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Color_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_color_num; }
	}

	public final Color_numContext color_num() throws RecognitionException {
		Color_numContext _localctx = new Color_numContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_color_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identification_division_paragraphContext extends ParserRuleContext {
		public Program_idContext program_id() {
			return getRuleContext(Program_idContext.class,0);
		}
		public AuthorContext author() {
			return getRuleContext(AuthorContext.class,0);
		}
		public InstallationContext installation() {
			return getRuleContext(InstallationContext.class,0);
		}
		public Date_writtenContext date_written() {
			return getRuleContext(Date_writtenContext.class,0);
		}
		public Date_compiledContext date_compiled() {
			return getRuleContext(Date_compiledContext.class,0);
		}
		public SecurityContext security() {
			return getRuleContext(SecurityContext.class,0);
		}
		public Options_Context options_() {
			return getRuleContext(Options_Context.class,0);
		}
		public Identification_division_paragraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identification_division_paragraph; }
	}

	public final Identification_division_paragraphContext identification_division_paragraph() throws RecognitionException {
		Identification_division_paragraphContext _localctx = new Identification_division_paragraphContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_identification_division_paragraph);
		try {
			setState(4084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4077);
				program_id();
				}
				break;
			case AUTHOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4078);
				author();
				}
				break;
			case INSTALLATION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4079);
				installation();
				}
				break;
			case DATE_WRITTEN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4080);
				date_written();
				}
				break;
			case DATE_COMPILED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4081);
				date_compiled();
				}
				break;
			case SECURITY:
				enterOuterAlt(_localctx, 6);
				{
				setState(4082);
				security();
				}
				break;
			case OPTIONS:
				enterOuterAlt(_localctx, 7);
				{
				setState(4083);
				options_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_idContext extends ParserRuleContext {
		public TerminalNode PROGRAM_ID() { return getToken(cobolParser.PROGRAM_ID, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public Program_nameContext program_name() {
			return getRuleContext(Program_nameContext.class,0);
		}
		public Is_programContext is_program() {
			return getRuleContext(Is_programContext.class,0);
		}
		public With_identContext with_ident() {
			return getRuleContext(With_identContext.class,0);
		}
		public Program_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_id; }
	}

	public final Program_idContext program_id() throws RecognitionException {
		Program_idContext _localctx = new Program_idContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_program_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			match(PROGRAM_ID);
			setState(4087);
			match(DOT_);
			setState(4088);
			program_name();
			setState(4090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMON || _la==INITIAL || _la==IS) {
				{
				setState(4089);
				is_program();
				}
			}

			setState(4093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENT || _la==WITH) {
				{
				setState(4092);
				with_ident();
				}
			}

			setState(4095);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Program_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_name; }
	}

	public final Program_nameContext program_name() throws RecognitionException {
		Program_nameContext _localctx = new Program_nameContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_program_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_programContext extends ParserRuleContext {
		public TerminalNode COMMON() { return getToken(cobolParser.COMMON, 0); }
		public TerminalNode INITIAL() { return getToken(cobolParser.INITIAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public Is_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_program; }
	}

	public final Is_programContext is_program() throws RecognitionException {
		Is_programContext _localctx = new Is_programContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_is_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4099);
				match(IS);
				}
			}

			setState(4102);
			_la = _input.LA(1);
			if ( !(_la==COMMON || _la==INITIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROGRAM) {
				{
				setState(4103);
				match(PROGRAM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_identContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(cobolParser.IDENT, 0); }
		public Ident_stringContext ident_string() {
			return getRuleContext(Ident_stringContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_ident; }
	}

	public final With_identContext with_ident() throws RecognitionException {
		With_identContext _localctx = new With_identContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_with_ident);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4106);
				match(WITH);
				}
			}

			setState(4109);
			match(IDENT);
			setState(4110);
			ident_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ident_stringContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Ident_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident_string; }
	}

	public final Ident_stringContext ident_string() throws RecognitionException {
		Ident_stringContext _localctx = new Ident_stringContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_ident_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4112);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallationContext extends ParserRuleContext {
		public TerminalNode INSTALLATION() { return getToken(cobolParser.INSTALLATION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public InstallationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installation; }
	}

	public final InstallationContext installation() throws RecognitionException {
		InstallationContext _localctx = new InstallationContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_installation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			match(INSTALLATION);
			setState(4115);
			match(DOT_);
			setState(4119);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4116);
					word_in_area_B();
					}
					} 
				}
				setState(4121);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_writtenContext extends ParserRuleContext {
		public TerminalNode DATE_WRITTEN() { return getToken(cobolParser.DATE_WRITTEN, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public Date_writtenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_written; }
	}

	public final Date_writtenContext date_written() throws RecognitionException {
		Date_writtenContext _localctx = new Date_writtenContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_date_written);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4122);
			match(DATE_WRITTEN);
			setState(4123);
			match(DOT_);
			setState(4127);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4124);
					word_in_area_B();
					}
					} 
				}
				setState(4129);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_compiledContext extends ParserRuleContext {
		public TerminalNode DATE_COMPILED() { return getToken(cobolParser.DATE_COMPILED, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public Date_compiledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_compiled; }
	}

	public final Date_compiledContext date_compiled() throws RecognitionException {
		Date_compiledContext _localctx = new Date_compiledContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_date_compiled);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4130);
			match(DATE_COMPILED);
			setState(4131);
			match(DOT_);
			setState(4135);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,646,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4132);
					word_in_area_B();
					}
					} 
				}
				setState(4137);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,646,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(cobolParser.SECURITY, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public SecurityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security; }
	}

	public final SecurityContext security() throws RecognitionException {
		SecurityContext _localctx = new SecurityContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_security);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4138);
			match(SECURITY);
			setState(4139);
			match(DOT_);
			setState(4143);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4140);
					word_in_area_B();
					}
					} 
				}
				setState(4145);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Options_Context extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(cobolParser.OPTIONS, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public ArithmeticContext arithmetic() {
			return getRuleContext(ArithmeticContext.class,0);
		}
		public Options_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_options_; }
	}

	public final Options_Context options_() throws RecognitionException {
		Options_Context _localctx = new Options_Context(_ctx, getState());
		enterRule(_localctx, 648, RULE_options_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4146);
			match(OPTIONS);
			setState(4147);
			match(DOT_);
			setState(4149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARITHMETIC) {
				{
				setState(4148);
				arithmetic();
				}
			}

			setState(4152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(4151);
				match(DOT_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArithmeticContext extends ParserRuleContext {
		public TerminalNode ARITHMETIC() { return getToken(cobolParser.ARITHMETIC, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode NATIVE() { return getToken(cobolParser.NATIVE, 0); }
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public ArithmeticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic; }
	}

	public final ArithmeticContext arithmetic() throws RecognitionException {
		ArithmeticContext _localctx = new ArithmeticContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_arithmetic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			match(ARITHMETIC);
			setState(4156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4155);
				match(IS);
				}
			}

			setState(4158);
			_la = _input.LA(1);
			if ( !(_la==NATIVE || _la==STANDARD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4159);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Configuration_sectionContext extends ParserRuleContext {
		public TerminalNode CONFIGURATION() { return getToken(cobolParser.CONFIGURATION, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Source_computerContext source_computer() {
			return getRuleContext(Source_computerContext.class,0);
		}
		public Object_computerContext object_computer() {
			return getRuleContext(Object_computerContext.class,0);
		}
		public Special_namesContext special_names() {
			return getRuleContext(Special_namesContext.class,0);
		}
		public Configuration_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configuration_section; }
	}

	public final Configuration_sectionContext configuration_section() throws RecognitionException {
		Configuration_sectionContext _localctx = new Configuration_sectionContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_configuration_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			match(CONFIGURATION);
			setState(4162);
			match(SECTION);
			setState(4163);
			match(DOT_);
			setState(4165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SOURCE_COMPUTER) {
				{
				setState(4164);
				source_computer();
				}
			}

			setState(4168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT_COMPUTER) {
				{
				setState(4167);
				object_computer();
				}
			}

			setState(4171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SPECIAL_NAMES) {
				{
				setState(4170);
				special_names();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Input_output_sectionContext extends ParserRuleContext {
		public TerminalNode INPUT_OUTPUT() { return getToken(cobolParser.INPUT_OUTPUT, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public File_controlContext file_control() {
			return getRuleContext(File_controlContext.class,0);
		}
		public I_o_controlContext i_o_control() {
			return getRuleContext(I_o_controlContext.class,0);
		}
		public Input_output_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_input_output_section; }
	}

	public final Input_output_sectionContext input_output_section() throws RecognitionException {
		Input_output_sectionContext _localctx = new Input_output_sectionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_input_output_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4173);
			match(INPUT_OUTPUT);
			setState(4174);
			match(SECTION);
			setState(4175);
			match(DOT_);
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_CONTROL) {
				{
				setState(4176);
				file_control();
				}
			}

			setState(4180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==I_O_CONTROL) {
				{
				setState(4179);
				i_o_control();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_computerContext extends ParserRuleContext {
		public TerminalNode SOURCE_COMPUTER() { return getToken(cobolParser.SOURCE_COMPUTER, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public Computer_typeContext computer_type() {
			return getRuleContext(Computer_typeContext.class,0);
		}
		public With_debuggingContext with_debugging() {
			return getRuleContext(With_debuggingContext.class,0);
		}
		public Source_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_computer; }
	}

	public final Source_computerContext source_computer() throws RecognitionException {
		Source_computerContext _localctx = new Source_computerContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_source_computer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(SOURCE_COMPUTER);
			setState(4183);
			match(DOT_);
			setState(4190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD) {
				{
				setState(4184);
				computer_type();
				setState(4186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEBUGGING || _la==WITH) {
					{
					setState(4185);
					with_debugging();
					}
				}

				setState(4188);
				match(DOT_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Computer_typeContext extends ParserRuleContext {
		public TerminalNode ALPHA() { return getToken(cobolParser.ALPHA, 0); }
		public TerminalNode I64() { return getToken(cobolParser.I64, 0); }
		public TerminalNode VAX() { return getToken(cobolParser.VAX, 0); }
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Computer_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computer_type; }
	}

	public final Computer_typeContext computer_type() throws RecognitionException {
		Computer_typeContext _localctx = new Computer_typeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_computer_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			_la = _input.LA(1);
			if ( !(_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_debuggingContext extends ParserRuleContext {
		public TerminalNode DEBUGGING() { return getToken(cobolParser.DEBUGGING, 0); }
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_debuggingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_debugging; }
	}

	public final With_debuggingContext with_debugging() throws RecognitionException {
		With_debuggingContext _localctx = new With_debuggingContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_with_debugging);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4194);
				match(WITH);
				}
			}

			setState(4197);
			match(DEBUGGING);
			setState(4198);
			match(MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_computerContext extends ParserRuleContext {
		public TerminalNode OBJECT_COMPUTER() { return getToken(cobolParser.OBJECT_COMPUTER, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public Computer_typeContext computer_type() {
			return getRuleContext(Computer_typeContext.class,0);
		}
		public Memory_sizeContext memory_size() {
			return getRuleContext(Memory_sizeContext.class,0);
		}
		public Program_collatingContext program_collating() {
			return getRuleContext(Program_collatingContext.class,0);
		}
		public Segment_limitContext segment_limit() {
			return getRuleContext(Segment_limitContext.class,0);
		}
		public Object_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_computer; }
	}

	public final Object_computerContext object_computer() throws RecognitionException {
		Object_computerContext _localctx = new Object_computerContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_object_computer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4200);
			match(OBJECT_COMPUTER);
			setState(4201);
			match(DOT_);
			setState(4214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD) {
				{
				setState(4202);
				computer_type();
				setState(4204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MEMORY) {
					{
					setState(4203);
					memory_size();
					}
				}

				setState(4207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING || _la==PROGRAM || _la==SEQUENCE) {
					{
					setState(4206);
					program_collating();
					}
				}

				setState(4210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT_LIMIT) {
					{
					setState(4209);
					segment_limit();
					}
				}

				setState(4212);
				match(DOT_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_sizeContext extends ParserRuleContext {
		public TerminalNode MEMORY() { return getToken(cobolParser.MEMORY, 0); }
		public Memory_size_amountContext memory_size_amount() {
			return getRuleContext(Memory_size_amountContext.class,0);
		}
		public Memory_size_unitContext memory_size_unit() {
			return getRuleContext(Memory_size_unitContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public Memory_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size; }
	}

	public final Memory_sizeContext memory_size() throws RecognitionException {
		Memory_sizeContext _localctx = new Memory_sizeContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_memory_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			match(MEMORY);
			setState(4218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(4217);
				match(SIZE);
				}
			}

			setState(4220);
			memory_size_amount();
			setState(4221);
			memory_size_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_size_amountContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Memory_size_amountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size_amount; }
	}

	public final Memory_size_amountContext memory_size_amount() throws RecognitionException {
		Memory_size_amountContext _localctx = new Memory_size_amountContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_memory_size_amount);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4223);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_size_unitContext extends ParserRuleContext {
		public TerminalNode WORDS() { return getToken(cobolParser.WORDS, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode MODULES() { return getToken(cobolParser.MODULES, 0); }
		public Memory_size_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size_unit; }
	}

	public final Memory_size_unitContext memory_size_unit() throws RecognitionException {
		Memory_size_unitContext _localctx = new Memory_size_unitContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_memory_size_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			_la = _input.LA(1);
			if ( !(_la==CHARACTERS || _la==MODULES || _la==WORDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_collatingContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Program_collatingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_collating; }
	}

	public final Program_collatingContext program_collating() throws RecognitionException {
		Program_collatingContext _localctx = new Program_collatingContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_program_collating);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROGRAM) {
				{
				setState(4227);
				match(PROGRAM);
				}
			}

			setState(4231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING) {
				{
				setState(4230);
				match(COLLATING);
				}
			}

			setState(4233);
			match(SEQUENCE);
			setState(4235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4234);
				match(IS);
				}
			}

			setState(4237);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alpha_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Alpha_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alpha_name; }
	}

	public final Alpha_nameContext alpha_name() throws RecognitionException {
		Alpha_nameContext _localctx = new Alpha_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_alpha_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4239);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_limitContext extends ParserRuleContext {
		public TerminalNode SEGMENT_LIMIT() { return getToken(cobolParser.SEGMENT_LIMIT, 0); }
		public Segment_numberContext segment_number() {
			return getRuleContext(Segment_numberContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Segment_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_limit; }
	}

	public final Segment_limitContext segment_limit() throws RecognitionException {
		Segment_limitContext _localctx = new Segment_limitContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_segment_limit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			match(SEGMENT_LIMIT);
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4242);
				match(IS);
				}
			}

			setState(4245);
			segment_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_numberContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Segment_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_number; }
	}

	public final Segment_numberContext segment_number() throws RecognitionException {
		Segment_numberContext _localctx = new Segment_numberContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_segment_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_namesContext extends ParserRuleContext {
		public TerminalNode SPECIAL_NAMES() { return getToken(cobolParser.SPECIAL_NAMES, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Special_names_contentContext> special_names_content() {
			return getRuleContexts(Special_names_contentContext.class);
		}
		public Special_names_contentContext special_names_content(int i) {
			return getRuleContext(Special_names_contentContext.class,i);
		}
		public Special_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_names; }
	}

	public final Special_namesContext special_names() throws RecognitionException {
		Special_namesContext _localctx = new Special_namesContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_special_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4249);
			match(SPECIAL_NAMES);
			setState(4250);
			match(DOT_);
			setState(4258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABET) | (1L << ARGUMENT_NUMBER) | (1L << ARGUMENT_VALUE) | (1L << C01) | (1L << CARD_READER) | (1L << CLASS))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CONSOLE - 84)) | (1L << (CRT - 84)) | (1L << (CURRENCY - 84)) | (1L << (CURSOR - 84)) | (1L << (DECIMAL_POINT - 84)))) != 0) || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (SWITCH - 374)) | (1L << (SYMBOLIC - 374)) | (1L << (SYSERR - 374)) | (1L << (SYSIN - 374)) | (1L << (SYSOUT - 374)))) != 0)) {
				{
				setState(4252); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4251);
					special_names_content();
					}
					}
					setState(4254); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABET) | (1L << ARGUMENT_NUMBER) | (1L << ARGUMENT_VALUE) | (1L << C01) | (1L << CARD_READER) | (1L << CLASS))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CONSOLE - 84)) | (1L << (CRT - 84)) | (1L << (CURRENCY - 84)) | (1L << (CURSOR - 84)) | (1L << (DECIMAL_POINT - 84)))) != 0) || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (SWITCH - 374)) | (1L << (SYMBOLIC - 374)) | (1L << (SYSERR - 374)) | (1L << (SYSIN - 374)) | (1L << (SYSOUT - 374)))) != 0) );
				setState(4256);
				match(DOT_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_names_contentContext extends ParserRuleContext {
		public Predefined_deviceContext predefined_device() {
			return getRuleContext(Predefined_deviceContext.class,0);
		}
		public Device_nameContext device_name() {
			return getRuleContext(Device_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Arg_envContext arg_env() {
			return getRuleContext(Arg_envContext.class,0);
		}
		public Arg_env_nameContext arg_env_name() {
			return getRuleContext(Arg_env_nameContext.class,0);
		}
		public TerminalNode C01() { return getToken(cobolParser.C01, 0); }
		public Top_of_page_nameContext top_of_page_name() {
			return getRuleContext(Top_of_page_nameContext.class,0);
		}
		public Switch_Context switch_() {
			return getRuleContext(Switch_Context.class,0);
		}
		public AlphabetContext alphabet() {
			return getRuleContext(AlphabetContext.class,0);
		}
		public Symbolic_charsContext symbolic_chars() {
			return getRuleContext(Symbolic_charsContext.class,0);
		}
		public Class_Context class_() {
			return getRuleContext(Class_Context.class,0);
		}
		public CurrencyContext currency() {
			return getRuleContext(CurrencyContext.class,0);
		}
		public TerminalNode DECIMAL_POINT() { return getToken(cobolParser.DECIMAL_POINT, 0); }
		public TerminalNode COMMA() { return getToken(cobolParser.COMMA, 0); }
		public TerminalNode CURSOR() { return getToken(cobolParser.CURSOR, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode CRT() { return getToken(cobolParser.CRT, 0); }
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public Special_names_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_names_content; }
	}

	public final Special_names_contentContext special_names_content() throws RecognitionException {
		Special_names_contentContext _localctx = new Special_names_contentContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_special_names_content);
		int _la;
		try {
			setState(4298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CARD_READER:
			case CONSOLE:
			case LINE_PRINTER:
			case PAPER_TAPE_PUNCH:
			case PAPER_TAPE_READER:
			case SYSERR:
			case SYSIN:
			case SYSOUT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4260);
				predefined_device();
				setState(4262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4261);
					match(IS);
					}
				}

				setState(4264);
				device_name();
				}
				break;
			case ARGUMENT_NUMBER:
			case ARGUMENT_VALUE:
			case ENVIRONMENT_NAME:
			case ENVIRONMENT_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4266);
				arg_env();
				setState(4268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4267);
					match(IS);
					}
				}

				setState(4270);
				arg_env_name();
				}
				break;
			case C01:
				enterOuterAlt(_localctx, 3);
				{
				setState(4272);
				match(C01);
				setState(4274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4273);
					match(IS);
					}
				}

				setState(4276);
				top_of_page_name();
				}
				break;
			case SWITCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(4277);
				switch_();
				}
				break;
			case ALPHABET:
				enterOuterAlt(_localctx, 5);
				{
				setState(4278);
				alphabet();
				}
				break;
			case SYMBOLIC:
				enterOuterAlt(_localctx, 6);
				{
				setState(4279);
				symbolic_chars();
				}
				break;
			case CLASS:
				enterOuterAlt(_localctx, 7);
				{
				setState(4280);
				class_();
				}
				break;
			case CURRENCY:
				enterOuterAlt(_localctx, 8);
				{
				setState(4281);
				currency();
				}
				break;
			case DECIMAL_POINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4282);
				match(DECIMAL_POINT);
				setState(4284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4283);
					match(IS);
					}
				}

				setState(4286);
				match(COMMA);
				}
				break;
			case CURSOR:
				enterOuterAlt(_localctx, 10);
				{
				setState(4287);
				match(CURSOR);
				setState(4289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4288);
					match(IS);
					}
				}

				setState(4291);
				qualified_data_item();
				}
				break;
			case CRT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4292);
				match(CRT);
				setState(4293);
				match(STATUS);
				setState(4295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4294);
					match(IS);
					}
				}

				setState(4297);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_data_itemContext extends ParserRuleContext {
		public List<TerminalNode> USER_DEFINED_WORD() { return getTokens(cobolParser.USER_DEFINED_WORD); }
		public TerminalNode USER_DEFINED_WORD(int i) {
			return getToken(cobolParser.USER_DEFINED_WORD, i);
		}
		public List<TerminalNode> IN() { return getTokens(cobolParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(cobolParser.IN, i);
		}
		public List<TerminalNode> OF() { return getTokens(cobolParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(cobolParser.OF, i);
		}
		public Qualified_data_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_data_item; }
	}

	public final Qualified_data_itemContext qualified_data_item() throws RecognitionException {
		Qualified_data_itemContext _localctx = new Qualified_data_itemContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_qualified_data_item);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(USER_DEFINED_WORD);
			setState(4305);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,677,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4301);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==OF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4302);
					match(USER_DEFINED_WORD);
					}
					} 
				}
				setState(4307);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,677,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrencyContext extends ParserRuleContext {
		public TerminalNode CURRENCY() { return getToken(cobolParser.CURRENCY, 0); }
		public Currency_definitionContext currency_definition() {
			return getRuleContext(Currency_definitionContext.class,0);
		}
		public TerminalNode SIGN() { return getToken(cobolParser.SIGN, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public CurrencyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency; }
	}

	public final CurrencyContext currency() throws RecognitionException {
		CurrencyContext _localctx = new CurrencyContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_currency);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4308);
			match(CURRENCY);
			setState(4310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIGN) {
				{
				setState(4309);
				match(SIGN);
				}
			}

			setState(4313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4312);
				match(IS);
				}
			}

			setState(4315);
			currency_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Currency_definitionContext extends ParserRuleContext {
		public Literal_7Context literal_7() {
			return getRuleContext(Literal_7Context.class,0);
		}
		public TerminalNode PICTURE() { return getToken(cobolParser.PICTURE, 0); }
		public TerminalNode SYMBOL() { return getToken(cobolParser.SYMBOL, 0); }
		public Literal_8Context literal_8() {
			return getRuleContext(Literal_8Context.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Currency_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency_definition; }
	}

	public final Currency_definitionContext currency_definition() throws RecognitionException {
		Currency_definitionContext _localctx = new Currency_definitionContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_currency_definition);
		int _la;
		try {
			setState(4326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				literal_7();
				setState(4319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4318);
					match(WITH);
					}
				}

				setState(4321);
				match(PICTURE);
				setState(4322);
				match(SYMBOL);
				setState(4323);
				literal_8();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4325);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Literal_7Context extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Literal_7Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal_7; }
	}

	public final Literal_7Context literal_7() throws RecognitionException {
		Literal_7Context _localctx = new Literal_7Context(_ctx, getState());
		enterRule(_localctx, 688, RULE_literal_7);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4328);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Literal_8Context extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Literal_8Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal_8; }
	}

	public final Literal_8Context literal_8() throws RecognitionException {
		Literal_8Context _localctx = new Literal_8Context(_ctx, getState());
		enterRule(_localctx, 690, RULE_literal_8);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_Context extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(cobolParser.CLASS, 0); }
		public Class_nameContext class_name() {
			return getRuleContext(Class_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<User_classContext> user_class() {
			return getRuleContexts(User_classContext.class);
		}
		public User_classContext user_class(int i) {
			return getRuleContext(User_classContext.class,i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_; }
	}

	public final Class_Context class_() throws RecognitionException {
		Class_Context _localctx = new Class_Context(_ctx, getState());
		enterRule(_localctx, 692, RULE_class_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(CLASS);
			setState(4333);
			class_name();
			setState(4335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4334);
				match(IS);
				}
			}

			setState(4338); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4337);
				user_class();
				}
				}
				setState(4340); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL || _la==NUMERIC_LITERAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_name; }
	}

	public final Class_nameContext class_name() throws RecognitionException {
		Class_nameContext _localctx = new Class_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_classContext extends ParserRuleContext {
		public First_literalContext first_literal() {
			return getRuleContext(First_literalContext.class,0);
		}
		public Last_literalContext last_literal() {
			return getRuleContext(Last_literalContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public User_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_class; }
	}

	public final User_classContext user_class() throws RecognitionException {
		User_classContext _localctx = new User_classContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_user_class);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4344);
			first_literal();
			setState(4347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(4345);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4346);
				last_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symbolic_charsContext extends ParserRuleContext {
		public TerminalNode SYMBOLIC() { return getToken(cobolParser.SYMBOLIC, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public List<Symb_ch_definitionContext> symb_ch_definition() {
			return getRuleContexts(Symb_ch_definitionContext.class);
		}
		public Symb_ch_definitionContext symb_ch_definition(int i) {
			return getRuleContext(Symb_ch_definitionContext.class,i);
		}
		public Symbolic_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbolic_chars; }
	}

	public final Symbolic_charsContext symbolic_chars() throws RecognitionException {
		Symbolic_charsContext _localctx = new Symbolic_charsContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_symbolic_chars);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4349);
			match(SYMBOLIC);
			setState(4351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTERS) {
				{
				setState(4350);
				match(CHARACTERS);
				}
			}

			setState(4354); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4353);
				symb_ch_definition();
				}
				}
				setState(4356); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_definitionContext extends ParserRuleContext {
		public List<Symb_ch_def_clauseContext> symb_ch_def_clause() {
			return getRuleContexts(Symb_ch_def_clauseContext.class);
		}
		public Symb_ch_def_clauseContext symb_ch_def_clause(int i) {
			return getRuleContext(Symb_ch_def_clauseContext.class,i);
		}
		public Symb_ch_def_in_alphabetContext symb_ch_def_in_alphabet() {
			return getRuleContext(Symb_ch_def_in_alphabetContext.class,0);
		}
		public Symb_ch_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_definition; }
	}

	public final Symb_ch_definitionContext symb_ch_definition() throws RecognitionException {
		Symb_ch_definitionContext _localctx = new Symb_ch_definitionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_symb_ch_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4359); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4358);
					symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4361); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,687,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(4363);
				symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_def_clauseContext extends ParserRuleContext {
		public List<Symbol_charContext> symbol_char() {
			return getRuleContexts(Symbol_charContext.class);
		}
		public Symbol_charContext symbol_char(int i) {
			return getRuleContext(Symbol_charContext.class,i);
		}
		public List<Char_valContext> char_val() {
			return getRuleContexts(Char_valContext.class);
		}
		public Char_valContext char_val(int i) {
			return getRuleContext(Char_valContext.class,i);
		}
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Symb_ch_def_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_def_clause; }
	}

	public final Symb_ch_def_clauseContext symb_ch_def_clause() throws RecognitionException {
		Symb_ch_def_clauseContext _localctx = new Symb_ch_def_clauseContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_symb_ch_def_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4366);
				symbol_char();
				}
				}
				setState(4369); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARE || _la==IS) {
				{
				setState(4371);
				_la = _input.LA(1);
				if ( !(_la==ARE || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4375); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4374);
				char_val();
				}
				}
				setState(4377); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NUMERIC_LITERAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public Symb_ch_def_in_alphabetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_def_in_alphabet; }
	}

	public final Symb_ch_def_in_alphabetContext symb_ch_def_in_alphabet() throws RecognitionException {
		Symb_ch_def_in_alphabetContext _localctx = new Symb_ch_def_in_alphabetContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_symb_ch_def_in_alphabet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4379);
			match(IN);
			setState(4380);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symbol_charContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Symbol_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbol_char; }
	}

	public final Symbol_charContext symbol_char() throws RecognitionException {
		Symbol_charContext _localctx = new Symbol_charContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_symbol_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_valContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Char_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_val; }
	}

	public final Char_valContext char_val() throws RecognitionException {
		Char_valContext _localctx = new Char_valContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_char_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlphabetContext extends ParserRuleContext {
		public TerminalNode ALPHABET() { return getToken(cobolParser.ALPHABET, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public Alpha_valueContext alpha_value() {
			return getRuleContext(Alpha_valueContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public AlphabetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alphabet; }
	}

	public final AlphabetContext alphabet() throws RecognitionException {
		AlphabetContext _localctx = new AlphabetContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_alphabet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4386);
			match(ALPHABET);
			setState(4387);
			alpha_name();
			setState(4389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4388);
				match(IS);
				}
			}

			setState(4391);
			alpha_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alpha_valueContext extends ParserRuleContext {
		public TerminalNode ASCII() { return getToken(cobolParser.ASCII, 0); }
		public TerminalNode STANDARD_1() { return getToken(cobolParser.STANDARD_1, 0); }
		public TerminalNode STANDARD_2() { return getToken(cobolParser.STANDARD_2, 0); }
		public TerminalNode NATIVE() { return getToken(cobolParser.NATIVE, 0); }
		public TerminalNode EBCDIC() { return getToken(cobolParser.EBCDIC, 0); }
		public List<User_alphaContext> user_alpha() {
			return getRuleContexts(User_alphaContext.class);
		}
		public User_alphaContext user_alpha(int i) {
			return getRuleContext(User_alphaContext.class,i);
		}
		public Alpha_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alpha_value; }
	}

	public final Alpha_valueContext alpha_value() throws RecognitionException {
		Alpha_valueContext _localctx = new Alpha_valueContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_alpha_value);
		int _la;
		try {
			setState(4403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII:
				enterOuterAlt(_localctx, 1);
				{
				setState(4393);
				match(ASCII);
				}
				break;
			case STANDARD_1:
				enterOuterAlt(_localctx, 2);
				{
				setState(4394);
				match(STANDARD_1);
				}
				break;
			case STANDARD_2:
				enterOuterAlt(_localctx, 3);
				{
				setState(4395);
				match(STANDARD_2);
				}
				break;
			case NATIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4396);
				match(NATIVE);
				}
				break;
			case EBCDIC:
				enterOuterAlt(_localctx, 5);
				{
				setState(4397);
				match(EBCDIC);
				}
				break;
			case STRING_LITERAL:
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4399); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4398);
					user_alpha();
					}
					}
					setState(4401); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL || _la==NUMERIC_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_alphaContext extends ParserRuleContext {
		public First_literalContext first_literal() {
			return getRuleContext(First_literalContext.class,0);
		}
		public Last_literalContext last_literal() {
			return getRuleContext(Last_literalContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public List<TerminalNode> ALSO() { return getTokens(cobolParser.ALSO); }
		public TerminalNode ALSO(int i) {
			return getToken(cobolParser.ALSO, i);
		}
		public List<Same_literalContext> same_literal() {
			return getRuleContexts(Same_literalContext.class);
		}
		public Same_literalContext same_literal(int i) {
			return getRuleContext(Same_literalContext.class,i);
		}
		public User_alphaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_alpha; }
	}

	public final User_alphaContext user_alpha() throws RecognitionException {
		User_alphaContext _localctx = new User_alphaContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_user_alpha);
		int _la;
		try {
			setState(4417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4405);
				first_literal();
				setState(4408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THROUGH || _la==THRU) {
					{
					setState(4406);
					_la = _input.LA(1);
					if ( !(_la==THROUGH || _la==THRU) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4407);
					last_literal();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4410);
				first_literal();
				setState(4413); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4411);
					match(ALSO);
					setState(4412);
					same_literal();
					}
					}
					setState(4415); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALSO );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public First_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_literal; }
	}

	public final First_literalContext first_literal() throws RecognitionException {
		First_literalContext _localctx = new First_literalContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_first_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4419);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMERIC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Last_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Last_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_last_literal; }
	}

	public final Last_literalContext last_literal() throws RecognitionException {
		Last_literalContext _localctx = new Last_literalContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_last_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMERIC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Same_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Same_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same_literal; }
	}

	public final Same_literalContext same_literal() throws RecognitionException {
		Same_literalContext _localctx = new Same_literalContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_same_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMERIC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_Context extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(cobolParser.SWITCH, 0); }
		public Switch_numContext switch_num() {
			return getRuleContext(Switch_numContext.class,0);
		}
		public Switch_nameContext switch_name() {
			return getRuleContext(Switch_nameContext.class,0);
		}
		public Switch_clause_onContext switch_clause_on() {
			return getRuleContext(Switch_clause_onContext.class,0);
		}
		public Switch_clause_offContext switch_clause_off() {
			return getRuleContext(Switch_clause_offContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_; }
	}

	public final Switch_Context switch_() throws RecognitionException {
		Switch_Context _localctx = new Switch_Context(_ctx, getState());
		enterRule(_localctx, 722, RULE_switch_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			match(SWITCH);
			setState(4426);
			switch_num();
			setState(4431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==USER_DEFINED_WORD) {
				{
				setState(4428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4427);
					match(IS);
					}
				}

				setState(4430);
				switch_name();
				}
			}

			setState(4441);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(4433);
				switch_clause_on();
				setState(4435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF) {
					{
					setState(4434);
					switch_clause_off();
					}
				}

				}
				break;
			case OFF:
				{
				setState(4437);
				switch_clause_off();
				setState(4439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4438);
					switch_clause_on();
					}
				}

				}
				break;
			case ALPHABET:
			case ARGUMENT_NUMBER:
			case ARGUMENT_VALUE:
			case C01:
			case CARD_READER:
			case CLASS:
			case CONSOLE:
			case CRT:
			case CURRENCY:
			case CURSOR:
			case DECIMAL_POINT:
			case ENVIRONMENT_NAME:
			case ENVIRONMENT_VALUE:
			case LINE_PRINTER:
			case PAPER_TAPE_PUNCH:
			case PAPER_TAPE_READER:
			case SWITCH:
			case SYMBOLIC:
			case SYSERR:
			case SYSIN:
			case SYSOUT:
			case DOT_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_clause_onContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Cond_nameContext cond_name() {
			return getRuleContext(Cond_nameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_clause_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_clause_on; }
	}

	public final Switch_clause_onContext switch_clause_on() throws RecognitionException {
		Switch_clause_onContext _localctx = new Switch_clause_onContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_switch_clause_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4443);
			match(ON);
			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(4444);
				match(STATUS);
				}
			}

			setState(4448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4447);
				match(IS);
				}
			}

			setState(4450);
			cond_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_clause_offContext extends ParserRuleContext {
		public TerminalNode OFF() { return getToken(cobolParser.OFF, 0); }
		public Cond_nameContext cond_name() {
			return getRuleContext(Cond_nameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_clause_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_clause_off; }
	}

	public final Switch_clause_offContext switch_clause_off() throws RecognitionException {
		Switch_clause_offContext _localctx = new Switch_clause_offContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_switch_clause_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			match(OFF);
			setState(4454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(4453);
				match(STATUS);
				}
			}

			setState(4457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4456);
				match(IS);
				}
			}

			setState(4459);
			cond_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cond_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Cond_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cond_name; }
	}

	public final Cond_nameContext cond_name() throws RecognitionException {
		Cond_nameContext _localctx = new Cond_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_cond_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Switch_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_name; }
	}

	public final Switch_nameContext switch_name() throws RecognitionException {
		Switch_nameContext _localctx = new Switch_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_switch_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4463);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Switch_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_num; }
	}

	public final Switch_numContext switch_num() throws RecognitionException {
		Switch_numContext _localctx = new Switch_numContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_switch_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_of_page_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Top_of_page_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_of_page_name; }
	}

	public final Top_of_page_nameContext top_of_page_name() throws RecognitionException {
		Top_of_page_nameContext _localctx = new Top_of_page_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_top_of_page_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4467);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_deviceContext extends ParserRuleContext {
		public TerminalNode CARD_READER() { return getToken(cobolParser.CARD_READER, 0); }
		public TerminalNode PAPER_TAPE_READER() { return getToken(cobolParser.PAPER_TAPE_READER, 0); }
		public TerminalNode CONSOLE() { return getToken(cobolParser.CONSOLE, 0); }
		public TerminalNode LINE_PRINTER() { return getToken(cobolParser.LINE_PRINTER, 0); }
		public TerminalNode PAPER_TAPE_PUNCH() { return getToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
		public TerminalNode SYSIN() { return getToken(cobolParser.SYSIN, 0); }
		public TerminalNode SYSOUT() { return getToken(cobolParser.SYSOUT, 0); }
		public TerminalNode SYSERR() { return getToken(cobolParser.SYSERR, 0); }
		public Predefined_deviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_device; }
	}

	public final Predefined_deviceContext predefined_device() throws RecognitionException {
		Predefined_deviceContext _localctx = new Predefined_deviceContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_predefined_device);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			_la = _input.LA(1);
			if ( !(_la==CARD_READER || _la==CONSOLE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 379)) & ~0x3f) == 0 && ((1L << (_la - 379)) & ((1L << (SYSERR - 379)) | (1L << (SYSIN - 379)) | (1L << (SYSOUT - 379)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Device_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Device_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_device_name; }
	}

	public final Device_nameContext device_name() throws RecognitionException {
		Device_nameContext _localctx = new Device_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_device_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4471);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_envContext extends ParserRuleContext {
		public TerminalNode ARGUMENT_NUMBER() { return getToken(cobolParser.ARGUMENT_NUMBER, 0); }
		public TerminalNode ARGUMENT_VALUE() { return getToken(cobolParser.ARGUMENT_VALUE, 0); }
		public TerminalNode ENVIRONMENT_NAME() { return getToken(cobolParser.ENVIRONMENT_NAME, 0); }
		public TerminalNode ENVIRONMENT_VALUE() { return getToken(cobolParser.ENVIRONMENT_VALUE, 0); }
		public Arg_envContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_env; }
	}

	public final Arg_envContext arg_env() throws RecognitionException {
		Arg_envContext _localctx = new Arg_envContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_arg_env);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4473);
			_la = _input.LA(1);
			if ( !(_la==ARGUMENT_NUMBER || _la==ARGUMENT_VALUE || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_env_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Arg_env_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_env_name; }
	}

	public final Arg_env_nameContext arg_env_name() throws RecognitionException {
		Arg_env_nameContext _localctx = new Arg_env_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_arg_env_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4475);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_controlContext extends ParserRuleContext {
		public TerminalNode FILE_CONTROL() { return getToken(cobolParser.FILE_CONTROL, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<SelectContext> select() {
			return getRuleContexts(SelectContext.class);
		}
		public SelectContext select(int i) {
			return getRuleContext(SelectContext.class,i);
		}
		public File_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_control; }
	}

	public final File_controlContext file_control() throws RecognitionException {
		File_controlContext _localctx = new File_controlContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_file_control);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4477);
			match(FILE_CONTROL);
			setState(4478);
			match(DOT_);
			setState(4482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SELECT) {
				{
				{
				setState(4479);
				select();
				}
				}
				setState(4484);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(cobolParser.SELECT, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public Assign_toContext assign_to() {
			return getRuleContext(Assign_toContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode OPTIONAL() { return getToken(cobolParser.OPTIONAL, 0); }
		public ReserveContext reserve() {
			return getRuleContext(ReserveContext.class,0);
		}
		public OrganizationContext organization() {
			return getRuleContext(OrganizationContext.class,0);
		}
		public Block_containsContext block_contains() {
			return getRuleContext(Block_containsContext.class,0);
		}
		public Code_setContext code_set() {
			return getRuleContext(Code_setContext.class,0);
		}
		public PaddingContext padding() {
			return getRuleContext(PaddingContext.class,0);
		}
		public Record_delimiterContext record_delimiter() {
			return getRuleContext(Record_delimiterContext.class,0);
		}
		public Access_modeContext access_mode() {
			return getRuleContext(Access_modeContext.class,0);
		}
		public List<Record_keyContext> record_key() {
			return getRuleContexts(Record_keyContext.class);
		}
		public Record_keyContext record_key(int i) {
			return getRuleContext(Record_keyContext.class,i);
		}
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public File_statusContext file_status() {
			return getRuleContext(File_statusContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4485);
			match(SELECT);
			setState(4487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONAL) {
				{
				setState(4486);
				match(OPTIONAL);
				}
			}

			setState(4489);
			file_name();
			setState(4490);
			assign_to();
			setState(4492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESERVE) {
				{
				setState(4491);
				reserve();
				}
			}

			setState(4495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(4494);
				organization();
				}
				break;
			}
			setState(4498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(4497);
				block_contains();
				}
			}

			setState(4501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CODE_SET) {
				{
				setState(4500);
				code_set();
				}
			}

			setState(4504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PADDING) {
				{
				setState(4503);
				padding();
				}
			}

			setState(4507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				setState(4506);
				record_delimiter();
				}
				break;
			}
			setState(4510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACCESS || _la==DYNAMIC || _la==RANDOM || _la==SEQUENTIAL) {
				{
				setState(4509);
				access_mode();
				}
			}

			setState(4515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTERNATE || _la==RECORD) {
				{
				{
				setState(4512);
				record_key();
				}
				}
				setState(4517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCK) {
				{
				setState(4518);
				lock_mode();
				}
			}

			setState(4522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE || _la==STATUS) {
				{
				setState(4521);
				file_status();
				}
			}

			setState(4524);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_statusContext extends ParserRuleContext {
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public File_statContext file_stat() {
			return getRuleContext(File_statContext.class,0);
		}
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public File_statusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_status; }
	}

	public final File_statusContext file_status() throws RecognitionException {
		File_statusContext _localctx = new File_statusContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_file_status);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE) {
				{
				setState(4526);
				match(FILE);
				}
			}

			setState(4529);
			match(STATUS);
			setState(4531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4530);
				match(IS);
				}
			}

			setState(4533);
			file_stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_statContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public File_statContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_stat; }
	}

	public final File_statContext file_stat() throws RecognitionException {
		File_statContext _localctx = new File_statContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_file_stat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4535);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_keyContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Record_key_definitionContext record_key_definition() {
			return getRuleContext(Record_key_definitionContext.class,0);
		}
		public TerminalNode ALTERNATE() { return getToken(cobolParser.ALTERNATE, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public Record_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_key; }
	}

	public final Record_keyContext record_key() throws RecognitionException {
		Record_keyContext _localctx = new Record_keyContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_record_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTERNATE) {
				{
				setState(4537);
				match(ALTERNATE);
				}
			}

			setState(4540);
			match(RECORD);
			setState(4542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(4541);
				match(KEY);
				}
			}

			setState(4545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4544);
				match(IS);
				}
			}

			setState(4547);
			record_key_definition();
			setState(4552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(4549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4548);
					match(WITH);
					}
				}

				setState(4551);
				match(DUPLICATES);
				}
			}

			setState(4555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				setState(4554);
				_la = _input.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_key_definitionContext extends ParserRuleContext {
		public List<Qualified_data_itemContext> qualified_data_item() {
			return getRuleContexts(Qualified_data_itemContext.class);
		}
		public Qualified_data_itemContext qualified_data_item(int i) {
			return getRuleContext(Qualified_data_itemContext.class,i);
		}
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public Record_key_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_key_definition; }
	}

	public final Record_key_definitionContext record_key_definition() throws RecognitionException {
		Record_key_definitionContext _localctx = new Record_key_definitionContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_record_key_definition);
		int _la;
		try {
			setState(4567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4557);
				qualified_data_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4558);
				match(USER_DEFINED_WORD);
				setState(4559);
				match(EQUAL_);
				setState(4560);
				qualified_data_item();
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USER_DEFINED_WORD) {
					{
					{
					setState(4561);
					qualified_data_item();
					}
					}
					setState(4566);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_modeContext extends ParserRuleContext {
		public TerminalNode SEQUENTIAL() { return getToken(cobolParser.SEQUENTIAL, 0); }
		public TerminalNode RANDOM() { return getToken(cobolParser.RANDOM, 0); }
		public TerminalNode DYNAMIC() { return getToken(cobolParser.DYNAMIC, 0); }
		public TerminalNode ACCESS() { return getToken(cobolParser.ACCESS, 0); }
		public TerminalNode RELATIVE() { return getToken(cobolParser.RELATIVE, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public List<TerminalNode> IS() { return getTokens(cobolParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(cobolParser.IS, i);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_mode; }
	}

	public final Access_modeContext access_mode() throws RecognitionException {
		Access_modeContext _localctx = new Access_modeContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_access_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACCESS) {
				{
				setState(4569);
				match(ACCESS);
				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MODE) {
					{
					setState(4570);
					match(MODE);
					}
				}

				setState(4574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4573);
					match(IS);
					}
				}

				}
			}

			setState(4578);
			_la = _input.LA(1);
			if ( !(_la==DYNAMIC || _la==RANDOM || _la==SEQUENTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELATIVE) {
				{
				setState(4579);
				match(RELATIVE);
				setState(4581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(4580);
					match(KEY);
					}
				}

				setState(4584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4583);
					match(IS);
					}
				}

				setState(4586);
				qualified_data_item();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReserveContext extends ParserRuleContext {
		public TerminalNode RESERVE() { return getToken(cobolParser.RESERVE, 0); }
		public Reserve_numContext reserve_num() {
			return getRuleContext(Reserve_numContext.class,0);
		}
		public TerminalNode AREA() { return getToken(cobolParser.AREA, 0); }
		public TerminalNode AREAS() { return getToken(cobolParser.AREAS, 0); }
		public ReserveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserve; }
	}

	public final ReserveContext reserve() throws RecognitionException {
		ReserveContext _localctx = new ReserveContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_reserve);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			match(RESERVE);
			setState(4590);
			reserve_num();
			setState(4592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AREA || _la==AREAS) {
				{
				setState(4591);
				_la = _input.LA(1);
				if ( !(_la==AREA || _la==AREAS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserve_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Reserve_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserve_num; }
	}

	public final Reserve_numContext reserve_num() throws RecognitionException {
		Reserve_numContext _localctx = new Reserve_numContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_reserve_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_delimiterContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode DELIMITER() { return getToken(cobolParser.DELIMITER, 0); }
		public TerminalNode STANDARD_1() { return getToken(cobolParser.STANDARD_1, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Record_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_delimiter; }
	}

	public final Record_delimiterContext record_delimiter() throws RecognitionException {
		Record_delimiterContext _localctx = new Record_delimiterContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_record_delimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4596);
			match(RECORD);
			setState(4597);
			match(DELIMITER);
			setState(4599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4598);
				match(IS);
				}
			}

			setState(4601);
			match(STANDARD_1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PaddingContext extends ParserRuleContext {
		public TerminalNode PADDING() { return getToken(cobolParser.PADDING, 0); }
		public Pad_charContext pad_char() {
			return getRuleContext(Pad_charContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(cobolParser.CHARACTER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public PaddingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_padding; }
	}

	public final PaddingContext padding() throws RecognitionException {
		PaddingContext _localctx = new PaddingContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_padding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4603);
			match(PADDING);
			setState(4605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(4604);
				match(CHARACTER);
				}
			}

			setState(4608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4607);
				match(IS);
				}
			}

			setState(4610);
			pad_char();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pad_charContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Pad_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pad_char; }
	}

	public final Pad_charContext pad_char() throws RecognitionException {
		Pad_charContext _localctx = new Pad_charContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_pad_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4612);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrganizationContext extends ParserRuleContext {
		public TerminalNode SEQUENTIAL() { return getToken(cobolParser.SEQUENTIAL, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode RELATIVE() { return getToken(cobolParser.RELATIVE, 0); }
		public TerminalNode INDEXED() { return getToken(cobolParser.INDEXED, 0); }
		public TerminalNode ORGANIZATION() { return getToken(cobolParser.ORGANIZATION, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public OrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_organization; }
	}

	public final OrganizationContext organization() throws RecognitionException {
		OrganizationContext _localctx = new OrganizationContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_organization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORGANIZATION) {
				{
				setState(4614);
				match(ORGANIZATION);
				setState(4616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4615);
					match(IS);
					}
				}

				}
			}

			setState(4625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENTIAL:
				{
				setState(4620);
				match(SEQUENTIAL);
				}
				break;
			case LINE:
				{
				setState(4621);
				match(LINE);
				setState(4622);
				match(SEQUENTIAL);
				}
				break;
			case RELATIVE:
				{
				setState(4623);
				match(RELATIVE);
				}
				break;
			case INDEXED:
				{
				setState(4624);
				match(INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public Lock_mode_definitionContext lock_mode_definition() {
			return getRuleContext(Lock_mode_definitionContext.class,0);
		}
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_lock_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4627);
			match(LOCK);
			setState(4629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MODE) {
				{
				setState(4628);
				match(MODE);
				}
			}

			setState(4632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4631);
				match(IS);
				}
			}

			setState(4634);
			lock_mode_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_mode_definitionContext extends ParserRuleContext {
		public TerminalNode MANUAL() { return getToken(cobolParser.MANUAL, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode AUTOMATIC() { return getToken(cobolParser.AUTOMATIC, 0); }
		public TerminalNode ROLLBACK() { return getToken(cobolParser.ROLLBACK, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(cobolParser.EXCLUSIVE, 0); }
		public Lock_mode_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode_definition; }
	}

	public final Lock_mode_definitionContext lock_mode_definition() throws RecognitionException {
		Lock_mode_definitionContext _localctx = new Lock_mode_definitionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_lock_mode_definition);
		int _la;
		try {
			setState(4657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MANUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4636);
				match(MANUAL);
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4637);
					match(WITH);
					}
				}

				setState(4640);
				match(LOCK);
				setState(4641);
				match(ON);
				setState(4642);
				match(MULTIPLE);
				setState(4643);
				match(RECORDS);
				}
				break;
			case AUTOMATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4644);
				match(AUTOMATIC);
				setState(4654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK || _la==ROLLBACK || _la==WITH) {
					{
					setState(4646);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(4645);
						match(WITH);
						}
					}

					setState(4652);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LOCK:
						{
						{
						setState(4648);
						match(LOCK);
						setState(4649);
						match(ON);
						setState(4650);
						match(RECORD);
						}
						}
						break;
					case ROLLBACK:
						{
						setState(4651);
						match(ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4656);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Code_setContext extends ParserRuleContext {
		public TerminalNode CODE_SET() { return getToken(cobolParser.CODE_SET, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Code_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_code_set; }
	}

	public final Code_setContext code_set() throws RecognitionException {
		Code_setContext _localctx = new Code_setContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_code_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4659);
			match(CODE_SET);
			setState(4661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4660);
				match(IS);
				}
			}

			setState(4663);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_containsContext extends ParserRuleContext {
		public TerminalNode BLOCK() { return getToken(cobolParser.BLOCK, 0); }
		public BlocksizeContext blocksize() {
			return getRuleContext(BlocksizeContext.class,0);
		}
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public Smallest_blockContext smallest_block() {
			return getRuleContext(Smallest_blockContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Block_containsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_contains; }
	}

	public final Block_containsContext block_contains() throws RecognitionException {
		Block_containsContext _localctx = new Block_containsContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_block_contains);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4665);
			match(BLOCK);
			setState(4667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(4666);
				match(CONTAINS);
				}
			}

			setState(4672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				{
				setState(4669);
				smallest_block();
				setState(4670);
				match(TO);
				}
				break;
			}
			setState(4674);
			blocksize();
			setState(4675);
			_la = _input.LA(1);
			if ( !(_la==CHARACTERS || _la==RECORDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Smallest_blockContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Smallest_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_smallest_block; }
	}

	public final Smallest_blockContext smallest_block() throws RecognitionException {
		Smallest_blockContext _localctx = new Smallest_blockContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_smallest_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4677);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlocksizeContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public BlocksizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blocksize; }
	}

	public final BlocksizeContext blocksize() throws RecognitionException {
		BlocksizeContext _localctx = new BlocksizeContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_blocksize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4679);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_toContext extends ParserRuleContext {
		public TerminalNode ASSIGN() { return getToken(cobolParser.ASSIGN, 0); }
		public Assign_to_definitionContext assign_to_definition() {
			return getRuleContext(Assign_to_definitionContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Assign_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_to; }
	}

	public final Assign_toContext assign_to() throws RecognitionException {
		Assign_toContext _localctx = new Assign_toContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_assign_to);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4681);
			match(ASSIGN);
			setState(4683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4682);
				match(TO);
				}
			}

			setState(4685);
			assign_to_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_to_definitionContext extends ParserRuleContext {
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public TerminalNode DYNAMIC() { return getToken(cobolParser.DYNAMIC, 0); }
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public Assign_to_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_to_definition; }
	}

	public final Assign_to_definitionContext assign_to_definition() throws RecognitionException {
		Assign_to_definitionContext _localctx = new Assign_to_definitionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_assign_to_definition);
		int _la;
		try {
			setState(4698);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case DISK:
			case DYNAMIC:
			case EXTERNAL:
			case PRINTER:
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DYNAMIC || _la==EXTERNAL) {
					{
					setState(4687);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==EXTERNAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4690);
				file_spec();
				}
				break;
			case MULTIPLE:
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MULTIPLE) {
					{
					setState(4691);
					match(MULTIPLE);
					}
				}

				setState(4694);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(4695);
					match(FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode DISK() { return getToken(cobolParser.DISK, 0); }
		public TerminalNode PRINTER() { return getToken(cobolParser.PRINTER, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_file_spec);
		try {
			setState(4704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4700);
				match(STRING_LITERAL);
				}
				break;
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4701);
				qualified_data_item();
				}
				break;
			case DISK:
				enterOuterAlt(_localctx, 3);
				{
				setState(4702);
				match(DISK);
				}
				break;
			case PRINTER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4703);
				match(PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4706);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_o_controlContext extends ParserRuleContext {
		public TerminalNode I_O_CONTROL() { return getToken(cobolParser.I_O_CONTROL, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<ApplyContext> apply() {
			return getRuleContexts(ApplyContext.class);
		}
		public ApplyContext apply(int i) {
			return getRuleContext(ApplyContext.class,i);
		}
		public List<SameContext> same() {
			return getRuleContexts(SameContext.class);
		}
		public SameContext same(int i) {
			return getRuleContext(SameContext.class,i);
		}
		public List<RerunContext> rerun() {
			return getRuleContexts(RerunContext.class);
		}
		public RerunContext rerun(int i) {
			return getRuleContext(RerunContext.class,i);
		}
		public List<Multiple_fileContext> multiple_file() {
			return getRuleContexts(Multiple_fileContext.class);
		}
		public Multiple_fileContext multiple_file(int i) {
			return getRuleContext(Multiple_fileContext.class,i);
		}
		public I_o_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_o_control; }
	}

	public final I_o_controlContext i_o_control() throws RecognitionException {
		I_o_controlContext _localctx = new I_o_controlContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_i_o_control);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4708);
			match(I_O_CONTROL);
			setState(4709);
			match(DOT_);
			setState(4735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPLY || _la==MULTIPLE || _la==RERUN || _la==SAME || _la==DOT_) {
				{
				setState(4713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==APPLY) {
					{
					{
					setState(4710);
					apply();
					}
					}
					setState(4715);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SAME) {
					{
					{
					setState(4716);
					same();
					}
					}
					setState(4721);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==RERUN) {
					{
					{
					setState(4722);
					rerun();
					}
					}
					setState(4727);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==MULTIPLE) {
					{
					{
					setState(4728);
					multiple_file();
					}
					}
					setState(4733);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4734);
				match(DOT_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_fileContext extends ParserRuleContext {
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode TAPE() { return getToken(cobolParser.TAPE, 0); }
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public List<Multiple_file_definitionContext> multiple_file_definition() {
			return getRuleContexts(Multiple_file_definitionContext.class);
		}
		public Multiple_file_definitionContext multiple_file_definition(int i) {
			return getRuleContext(Multiple_file_definitionContext.class,i);
		}
		public Multiple_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file; }
	}

	public final Multiple_fileContext multiple_file() throws RecognitionException {
		Multiple_fileContext _localctx = new Multiple_fileContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_multiple_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4737);
			match(MULTIPLE);
			setState(4738);
			match(FILE);
			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAPE) {
				{
				setState(4739);
				match(TAPE);
				}
			}

			setState(4743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(4742);
				match(CONTAINS);
				}
			}

			setState(4746); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4745);
				multiple_file_definition();
				}
				}
				setState(4748); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_file_definitionContext extends ParserRuleContext {
		public Multiple_file_nameContext multiple_file_name() {
			return getRuleContext(Multiple_file_nameContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(cobolParser.POSITION, 0); }
		public Pos_integerContext pos_integer() {
			return getRuleContext(Pos_integerContext.class,0);
		}
		public Multiple_file_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file_definition; }
	}

	public final Multiple_file_definitionContext multiple_file_definition() throws RecognitionException {
		Multiple_file_definitionContext _localctx = new Multiple_file_definitionContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_multiple_file_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4750);
			multiple_file_name();
			setState(4753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POSITION) {
				{
				setState(4751);
				match(POSITION);
				setState(4752);
				pos_integer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_file_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Multiple_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file_name; }
	}

	public final Multiple_file_nameContext multiple_file_name() throws RecognitionException {
		Multiple_file_nameContext _localctx = new Multiple_file_nameContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_multiple_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pos_integerContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Pos_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pos_integer; }
	}

	public final Pos_integerContext pos_integer() throws RecognitionException {
		Pos_integerContext _localctx = new Pos_integerContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_pos_integer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RerunContext extends ParserRuleContext {
		public TerminalNode RERUN() { return getToken(cobolParser.RERUN, 0); }
		public Rerun_definitionContext rerun_definition() {
			return getRuleContext(Rerun_definitionContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode EVERY() { return getToken(cobolParser.EVERY, 0); }
		public RerunContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun; }
	}

	public final RerunContext rerun() throws RecognitionException {
		RerunContext _localctx = new RerunContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_rerun);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4759);
			match(RERUN);
			setState(4762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4760);
				match(ON);
				setState(4761);
				file_name();
				}
			}

			setState(4765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EVERY) {
				{
				setState(4764);
				match(EVERY);
				}
			}

			setState(4767);
			rerun_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rerun_definitionContext extends ParserRuleContext {
		public Rerun_def_fileContext rerun_def_file() {
			return getRuleContext(Rerun_def_fileContext.class,0);
		}
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Clock_countContext clock_count() {
			return getRuleContext(Clock_countContext.class,0);
		}
		public TerminalNode CLOCK_UNITS() { return getToken(cobolParser.CLOCK_UNITS, 0); }
		public Condition_nameContext condition_name() {
			return getRuleContext(Condition_nameContext.class,0);
		}
		public Rerun_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun_definition; }
	}

	public final Rerun_definitionContext rerun_definition() throws RecognitionException {
		Rerun_definitionContext _localctx = new Rerun_definitionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_rerun_definition);
		int _la;
		try {
			setState(4779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4769);
				rerun_def_file();
				setState(4771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4770);
					match(OF);
					}
				}

				setState(4773);
				file_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4775);
				clock_count();
				setState(4776);
				match(CLOCK_UNITS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4778);
				condition_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clock_countContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Clock_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clock_count; }
	}

	public final Clock_countContext clock_count() throws RecognitionException {
		Clock_countContext _localctx = new Clock_countContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_clock_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4781);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_name; }
	}

	public final Condition_nameContext condition_name() throws RecognitionException {
		Condition_nameContext _localctx = new Condition_nameContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_condition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4783);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rerun_def_fileContext extends ParserRuleContext {
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Rec_countContext rec_count() {
			return getRuleContext(Rec_countContext.class,0);
		}
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public Rerun_def_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun_def_file; }
	}

	public final Rerun_def_fileContext rerun_def_file() throws RecognitionException {
		Rerun_def_fileContext _localctx = new Rerun_def_fileContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_rerun_def_file);
		int _la;
		try {
			setState(4795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END:
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(4785);
					match(END);
					setState(4787);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(4786);
						match(OF);
						}
					}

					}
				}

				setState(4791);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4792);
				rec_count();
				setState(4793);
				match(RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rec_countContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Rec_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rec_count; }
	}

	public final Rec_countContext rec_count() throws RecognitionException {
		Rec_countContext _localctx = new Rec_countContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_rec_count);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4797);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SameContext extends ParserRuleContext {
		public TerminalNode SAME() { return getToken(cobolParser.SAME, 0); }
		public List<Same_area_fileContext> same_area_file() {
			return getRuleContexts(Same_area_fileContext.class);
		}
		public Same_area_fileContext same_area_file(int i) {
			return getRuleContext(Same_area_fileContext.class,i);
		}
		public TerminalNode AREA() { return getToken(cobolParser.AREA, 0); }
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode SORT() { return getToken(cobolParser.SORT, 0); }
		public TerminalNode SORT_MERGE() { return getToken(cobolParser.SORT_MERGE, 0); }
		public SameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same; }
	}

	public final SameContext same() throws RecognitionException {
		SameContext _localctx = new SameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_same);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4799);
			match(SAME);
			setState(4801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (RECORD - 308)) | (1L << (SORT - 308)) | (1L << (SORT_MERGE - 308)))) != 0)) {
				{
				setState(4800);
				_la = _input.LA(1);
				if ( !(((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (RECORD - 308)) | (1L << (SORT - 308)) | (1L << (SORT_MERGE - 308)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AREA) {
				{
				setState(4803);
				match(AREA);
				}
			}

			setState(4807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4806);
				match(FOR);
				}
			}

			setState(4809);
			same_area_file();
			setState(4811); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4810);
				same_area_file();
				}
				}
				setState(4813); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Same_area_fileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Same_area_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same_area_file; }
	}

	public final Same_area_fileContext same_area_file() throws RecognitionException {
		Same_area_fileContext _localctx = new Same_area_fileContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_same_area_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4815);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplyContext extends ParserRuleContext {
		public TerminalNode APPLY() { return getToken(cobolParser.APPLY, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public List<Apply_definitionContext> apply_definition() {
			return getRuleContexts(Apply_definitionContext.class);
		}
		public Apply_definitionContext apply_definition(int i) {
			return getRuleContext(Apply_definitionContext.class,i);
		}
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply; }
	}

	public final ApplyContext apply() throws RecognitionException {
		ApplyContext _localctx = new ApplyContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_apply);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4817);
			match(APPLY);
			setState(4819); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4818);
				apply_definition();
				}
				}
				setState(4821); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (CONTIGUOUS - 87)) | (1L << (CONTIGUOUS_BEST_TRY - 87)) | (1L << (DEFERRED_WRITE - 87)))) != 0) || _la==EXTENSION || _la==FILL_SIZE || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (LOCK_HOLDING - 239)) | (1L << (MASS_INSERT - 239)) | (1L << (PREALLOCATION - 239)) | (1L << (PRINT_CONTROL - 239)))) != 0) || _la==WINDOW );
			setState(4823);
			match(ON);
			setState(4825); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4824);
				file_name();
				}
				}
				setState(4827); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Apply_definitionContext extends ParserRuleContext {
		public TerminalNode DEFERRED_WRITE() { return getToken(cobolParser.DEFERRED_WRITE, 0); }
		public TerminalNode EXTENSION() { return getToken(cobolParser.EXTENSION, 0); }
		public Extend_amtContext extend_amt() {
			return getRuleContext(Extend_amtContext.class,0);
		}
		public TerminalNode FILL_SIZE() { return getToken(cobolParser.FILL_SIZE, 0); }
		public TerminalNode LOCK_HOLDING() { return getToken(cobolParser.LOCK_HOLDING, 0); }
		public TerminalNode MASS_INSERT() { return getToken(cobolParser.MASS_INSERT, 0); }
		public TerminalNode PREALLOCATION() { return getToken(cobolParser.PREALLOCATION, 0); }
		public Preall_amtContext preall_amt() {
			return getRuleContext(Preall_amtContext.class,0);
		}
		public TerminalNode CONTIGUOUS() { return getToken(cobolParser.CONTIGUOUS, 0); }
		public TerminalNode CONTIGUOUS_BEST_TRY() { return getToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
		public TerminalNode PRINT_CONTROL() { return getToken(cobolParser.PRINT_CONTROL, 0); }
		public TerminalNode WINDOW() { return getToken(cobolParser.WINDOW, 0); }
		public Window_ptrsContext window_ptrs() {
			return getRuleContext(Window_ptrsContext.class,0);
		}
		public Apply_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply_definition; }
	}

	public final Apply_definitionContext apply_definition() throws RecognitionException {
		Apply_definitionContext _localctx = new Apply_definitionContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_apply_definition);
		int _la;
		try {
			setState(4843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRED_WRITE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4829);
				match(DEFERRED_WRITE);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4830);
				match(EXTENSION);
				setState(4831);
				extend_amt();
				}
				break;
			case FILL_SIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4832);
				match(FILL_SIZE);
				}
				break;
			case LOCK_HOLDING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4833);
				match(LOCK_HOLDING);
				}
				break;
			case MASS_INSERT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4834);
				match(MASS_INSERT);
				}
				break;
			case CONTIGUOUS:
			case CONTIGUOUS_BEST_TRY:
			case PREALLOCATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTIGUOUS || _la==CONTIGUOUS_BEST_TRY) {
					{
					setState(4835);
					_la = _input.LA(1);
					if ( !(_la==CONTIGUOUS || _la==CONTIGUOUS_BEST_TRY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4838);
				match(PREALLOCATION);
				setState(4839);
				preall_amt();
				}
				break;
			case PRINT_CONTROL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4840);
				match(PRINT_CONTROL);
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 8);
				{
				setState(4841);
				match(WINDOW);
				setState(4842);
				window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_ptrsContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Window_ptrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_ptrs; }
	}

	public final Window_ptrsContext window_ptrs() throws RecognitionException {
		Window_ptrsContext _localctx = new Window_ptrsContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_window_ptrs);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4845);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preall_amtContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Preall_amtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preall_amt; }
	}

	public final Preall_amtContext preall_amt() throws RecognitionException {
		Preall_amtContext _localctx = new Preall_amtContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_preall_amt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4847);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extend_amtContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public Extend_amtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extend_amt; }
	}

	public final Extend_amtContext extend_amt() throws RecognitionException {
		Extend_amtContext _localctx = new Extend_amtContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_extend_amt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4849);
			match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arithmetic_expressionContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public Unary_arithmetic_operatorContext unary_arithmetic_operator() {
			return getRuleContext(Unary_arithmetic_operatorContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
			return getRuleContext(Binary_arithmetic_operatorContext.class,0);
		}
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic_expression; }
	}

	public final Arithmetic_expressionContext arithmetic_expression() throws RecognitionException {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(_ctx, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 826;
		enterRecursionRule(_localctx, 826, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN_:
				{
				setState(4852);
				match(LPAREN_);
				setState(4853);
				arithmetic_expression(0);
				setState(4854);
				match(RPAREN_);
				}
				break;
			case PLUS_:
			case MINUS_:
				{
				setState(4856);
				unary_arithmetic_operator();
				setState(4857);
				arithmetic_expression(3);
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD:
				{
				setState(4859);
				identifier();
				}
				break;
			case STRING_LITERAL:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case NUMERIC_LITERAL:
				{
				setState(4860);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4869);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,783,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					setState(4863);
					if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
					setState(4864);
					binary_arithmetic_operator();
					setState(4865);
					arithmetic_expression(5);
					}
					} 
				}
				setState(4871);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,783,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL() { return getToken(cobolParser.NUMERIC_LITERAL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(cobolParser.STRING_LITERAL, 0); }
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_constant);
		try {
			setState(4875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4872);
				match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4873);
				match(STRING_LITERAL);
				}
				break;
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
				enterOuterAlt(_localctx, 3);
				{
				setState(4874);
				figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(cobolParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(cobolParser.MINUS_, 0); }
		public List<TerminalNode> STAR_() { return getTokens(cobolParser.STAR_); }
		public TerminalNode STAR_(int i) {
			return getToken(cobolParser.STAR_, i);
		}
		public TerminalNode SLASH_() { return getToken(cobolParser.SLASH_, 0); }
		public Binary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_arithmetic_operator; }
	}

	public final Binary_arithmetic_operatorContext binary_arithmetic_operator() throws RecognitionException {
		Binary_arithmetic_operatorContext _localctx = new Binary_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_binary_arithmetic_operator);
		try {
			setState(4883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4877);
				match(PLUS_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4878);
				match(MINUS_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4879);
				match(STAR_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4880);
				match(SLASH_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4881);
				match(STAR_);
				setState(4882);
				match(STAR_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(cobolParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(cobolParser.MINUS_, 0); }
		public Unary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_arithmetic_operator; }
	}

	public final Unary_arithmetic_operatorContext unary_arithmetic_operator() throws RecognitionException {
		Unary_arithmetic_operatorContext _localctx = new Unary_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_unary_arithmetic_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4885);
			_la = _input.LA(1);
			if ( !(_la==PLUS_ || _la==MINUS_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_expressionContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public Logic_conditionContext logic_condition() {
			return getRuleContext(Logic_conditionContext.class,0);
		}
		public Logic_operationContext logic_operation() {
			return getRuleContext(Logic_operationContext.class,0);
		}
		public Logic_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_expression; }
	}

	public final Logic_expressionContext logic_expression() throws RecognitionException {
		return logic_expression(0);
	}

	private Logic_expressionContext logic_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_expressionContext _localctx = new Logic_expressionContext(_ctx, _parentState);
		Logic_expressionContext _prevctx = _localctx;
		int _startState = 834;
		enterRecursionRule(_localctx, 834, RULE_logic_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				setState(4888);
				match(LPAREN_);
				setState(4889);
				logic_expression(0);
				setState(4890);
				match(RPAREN_);
				}
				break;
			case 2:
				{
				setState(4892);
				match(NOT);
				setState(4893);
				logic_expression(2);
				}
				break;
			case 3:
				{
				setState(4894);
				logic_condition();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4903);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logic_expression);
					setState(4897);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(4898);
					logic_operation();
					setState(4899);
					logic_expression(4);
					}
					} 
				}
				setState(4905);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logic_conditionContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public List<Logic_condition_right_partContext> logic_condition_right_part() {
			return getRuleContexts(Logic_condition_right_partContext.class);
		}
		public Logic_condition_right_partContext logic_condition_right_part(int i) {
			return getRuleContext(Logic_condition_right_partContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(cobolParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(cobolParser.OR, i);
		}
		public List<TerminalNode> AND() { return getTokens(cobolParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(cobolParser.AND, i);
		}
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Logic_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_condition; }
	}

	public final Logic_conditionContext logic_condition() throws RecognitionException {
		Logic_conditionContext _localctx = new Logic_conditionContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_logic_condition);
		int _la;
		try {
			int _alt;
			setState(4916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4906);
				arithmetic_expression(0);
				setState(4907);
				logic_condition_right_part();
				setState(4912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,788,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4908);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4909);
						logic_condition_right_part();
						}
						} 
					}
					setState(4914);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,788,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4915);
				qualified_data_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_condition_right_partContext extends ParserRuleContext {
		public Condition_operatorContext condition_operator() {
			return getRuleContext(Condition_operatorContext.class,0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Class_condition_nameContext class_condition_name() {
			return getRuleContext(Class_condition_nameContext.class,0);
		}
		public Sign_condition_nameContext sign_condition_name() {
			return getRuleContext(Sign_condition_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode SUCCESS() { return getToken(cobolParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(cobolParser.FAILURE, 0); }
		public Logic_condition_right_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_condition_right_part; }
	}

	public final Logic_condition_right_partContext logic_condition_right_part() throws RecognitionException {
		Logic_condition_right_partContext _localctx = new Logic_condition_right_partContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_logic_condition_right_part);
		int _la;
		try {
			setState(4935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4918);
				condition_operator();
				setState(4919);
				arithmetic_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4921);
					match(IS);
					}
				}

				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4924);
					match(NOT);
					}
				}

				setState(4929);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALPHABETIC:
				case ALPHABETIC_LOWER:
				case ALPHABETIC_UPPER:
				case NUMERIC:
				case USER_DEFINED_WORD:
					{
					setState(4927);
					class_condition_name();
					}
					break;
				case NEGATIVE:
				case POSITIVE:
				case ZERO:
					{
					setState(4928);
					sign_condition_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4931);
					match(IS);
					}
				}

				setState(4934);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_operationContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(cobolParser.AND, 0); }
		public TerminalNode OR() { return getToken(cobolParser.OR, 0); }
		public Logic_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_operation; }
	}

	public final Logic_operationContext logic_operation() throws RecognitionException {
		Logic_operationContext _localctx = new Logic_operationContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_logic_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sign_condition_nameContext extends ParserRuleContext {
		public TerminalNode POSITIVE() { return getToken(cobolParser.POSITIVE, 0); }
		public TerminalNode NEGATIVE() { return getToken(cobolParser.NEGATIVE, 0); }
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public Sign_condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign_condition_name; }
	}

	public final Sign_condition_nameContext sign_condition_name() throws RecognitionException {
		Sign_condition_nameContext _localctx = new Sign_condition_nameContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_sign_condition_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4939);
			_la = _input.LA(1);
			if ( !(_la==NEGATIVE || _la==POSITIVE || _la==ZERO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_condition_nameContext extends ParserRuleContext {
		public TerminalNode NUMERIC() { return getToken(cobolParser.NUMERIC, 0); }
		public TerminalNode ALPHABETIC() { return getToken(cobolParser.ALPHABETIC, 0); }
		public TerminalNode ALPHABETIC_LOWER() { return getToken(cobolParser.ALPHABETIC_LOWER, 0); }
		public TerminalNode ALPHABETIC_UPPER() { return getToken(cobolParser.ALPHABETIC_UPPER, 0); }
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Class_condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_condition_name; }
	}

	public final Class_condition_nameContext class_condition_name() throws RecognitionException {
		Class_condition_nameContext _localctx = new Class_condition_nameContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_class_condition_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4941);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHABETIC_LOWER) | (1L << ALPHABETIC_UPPER))) != 0) || _la==NUMERIC || _la==USER_DEFINED_WORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_operatorContext extends ParserRuleContext {
		public TerminalNode GREATER() { return getToken(cobolParser.GREATER, 0); }
		public TerminalNode OR() { return getToken(cobolParser.OR, 0); }
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode GE_() { return getToken(cobolParser.GE_, 0); }
		public TerminalNode LESS() { return getToken(cobolParser.LESS, 0); }
		public TerminalNode LE_() { return getToken(cobolParser.LE_, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode GT_() { return getToken(cobolParser.GT_, 0); }
		public TerminalNode LT_() { return getToken(cobolParser.LT_, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode THAN() { return getToken(cobolParser.THAN, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Condition_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_operator; }
	}

	public final Condition_operatorContext condition_operator() throws RecognitionException {
		Condition_operatorContext _localctx = new Condition_operatorContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_condition_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4943);
				match(IS);
				}
			}

			setState(4995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				setState(4947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4946);
					match(NOT);
					}
				}

				setState(4973);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GREATER:
					{
					setState(4949);
					match(GREATER);
					setState(4951);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(4950);
						match(THAN);
						}
					}

					}
					break;
				case GT_:
					{
					setState(4953);
					match(GT_);
					setState(4955);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(4954);
						match(THAN);
						}
					}

					}
					break;
				case LESS:
					{
					setState(4957);
					match(LESS);
					setState(4959);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(4958);
						match(THAN);
						}
					}

					}
					break;
				case LT_:
					{
					setState(4961);
					match(LT_);
					setState(4963);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(4962);
						match(THAN);
						}
					}

					}
					break;
				case EQUAL:
					{
					setState(4965);
					match(EQUAL);
					setState(4967);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(4966);
						match(TO);
						}
					}

					}
					break;
				case EQUAL_:
					{
					setState(4969);
					match(EQUAL_);
					setState(4971);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(4970);
						match(TO);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4975);
				match(GREATER);
				setState(4977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THAN) {
					{
					setState(4976);
					match(THAN);
					}
				}

				setState(4979);
				match(OR);
				setState(4980);
				match(EQUAL);
				setState(4982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4981);
					match(TO);
					}
				}

				}
				break;
			case 3:
				{
				setState(4984);
				match(GE_);
				}
				break;
			case 4:
				{
				setState(4985);
				match(LESS);
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THAN) {
					{
					setState(4986);
					match(THAN);
					}
				}

				setState(4989);
				match(OR);
				setState(4990);
				match(EQUAL);
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4991);
					match(TO);
					}
				}

				}
				break;
			case 5:
				{
				setState(4994);
				match(LE_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_resultContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public SubscriptingContext subscripting() {
			return getRuleContext(SubscriptingContext.class,0);
		}
		public Reference_modificationContext reference_modification() {
			return getRuleContext(Reference_modificationContext.class,0);
		}
		public Identifier_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_result; }
	}

	public final Identifier_resultContext identifier_result() throws RecognitionException {
		Identifier_resultContext _localctx = new Identifier_resultContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_identifier_result);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4997);
			qualified_data_item();
			setState(4999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				{
				setState(4998);
				subscripting();
				}
				break;
			}
			setState(5002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
			case 1:
				{
				setState(5001);
				reference_modification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(cobolParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public ArgumentsContext arguments() {
			return getRuleContext(ArgumentsContext.class,0);
		}
		public Reference_modificationContext reference_modification() {
			return getRuleContext(Reference_modificationContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_identifier);
		try {
			setState(5013);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5004);
				identifier_result();
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5005);
				match(FUNCTION);
				setState(5006);
				function_name();
				setState(5008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(5007);
					arguments();
					}
					break;
				}
				setState(5011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(5010);
					reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentsContext extends ParserRuleContext {
		public SubscriptingContext subscripting() {
			return getRuleContext(SubscriptingContext.class,0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arguments; }
	}

	public final ArgumentsContext arguments() throws RecognitionException {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_arguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5015);
			subscripting();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubscriptingContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public List<TerminalNode> ALL() { return getTokens(cobolParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(cobolParser.ALL, i);
		}
		public SubscriptingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subscripting; }
	}

	public final SubscriptingContext subscripting() throws RecognitionException {
		SubscriptingContext _localctx = new SubscriptingContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_subscripting);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5017);
			match(LPAREN_);
			setState(5020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				setState(5018);
				arithmetic_expression(0);
				}
				break;
			case 2:
				{
				setState(5019);
				match(ALL);
				}
				break;
			}
			setState(5028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==STRING_LITERAL || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (QUOTE - 302)) | (1L << (QUOTES - 302)) | (1L << (SPACE - 302)) | (1L << (SPACES - 302)))) != 0) || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (ZERO - 423)) | (1L << (PLUS_ - 423)) | (1L << (MINUS_ - 423)) | (1L << (LPAREN_ - 423)) | (1L << (NUMERIC_LITERAL - 423)) | (1L << (USER_DEFINED_WORD - 423)))) != 0)) {
				{
				{
				setState(5024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5022);
					arithmetic_expression(0);
					}
					break;
				case 2:
					{
					setState(5023);
					match(ALL);
					}
					break;
				}
				}
				}
				setState(5030);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5031);
			match(RPAREN_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modificationContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public Leftmost_character_positionContext leftmost_character_position() {
			return getRuleContext(Leftmost_character_positionContext.class,0);
		}
		public TerminalNode COLON_() { return getToken(cobolParser.COLON_, 0); }
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public Reference_modificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_modification; }
	}

	public final Reference_modificationContext reference_modification() throws RecognitionException {
		Reference_modificationContext _localctx = new Reference_modificationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_reference_modification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			match(LPAREN_);
			setState(5034);
			leftmost_character_position();
			setState(5035);
			match(COLON_);
			setState(5037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_LITERAL || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (QUOTE - 302)) | (1L << (QUOTES - 302)) | (1L << (SPACE - 302)) | (1L << (SPACES - 302)))) != 0) || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (ZERO - 423)) | (1L << (PLUS_ - 423)) | (1L << (MINUS_ - 423)) | (1L << (LPAREN_ - 423)) | (1L << (NUMERIC_LITERAL - 423)) | (1L << (USER_DEFINED_WORD - 423)))) != 0)) {
				{
				setState(5036);
				length();
				}
			}

			setState(5039);
			match(RPAREN_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Leftmost_character_positionContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Leftmost_character_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leftmost_character_position; }
	}

	public final Leftmost_character_positionContext leftmost_character_position() throws RecognitionException {
		Leftmost_character_positionContext _localctx = new Leftmost_character_positionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_leftmost_character_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5043);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD() { return getToken(cobolParser.USER_DEFINED_WORD, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5045);
			match(USER_DEFINED_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2:
			return identification_division_sempred((Identification_divisionContext)_localctx, predIndex);
		case 6:
			return word_in_area_A_sempred((Word_in_area_AContext)_localctx, predIndex);
		case 7:
			return word_in_area_B_sempred((Word_in_area_BContext)_localctx, predIndex);
		case 13:
			return end_program_sempred((End_programContext)_localctx, predIndex);
		case 16:
			return declaratives_sempred((DeclarativesContext)_localctx, predIndex);
		case 18:
			return paragraph_sempred((ParagraphContext)_localctx, predIndex);
		case 23:
			return section_header_sempred((Section_headerContext)_localctx, predIndex);
		case 413:
			return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 417:
			return logic_expression_sempred((Logic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean identification_division_sempred(Identification_divisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return (((Identification_divisionContext)_localctx).IDENTIFICATION!=null?((Identification_divisionContext)_localctx).IDENTIFICATION.getCharPositionInLine():0) <= 4;
		}
		return true;
	}
	private boolean word_in_area_A_sempred(Word_in_area_AContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return this.inputStream.LT(1).charPositionInLine < 4;
		}
		return true;
	}
	private boolean word_in_area_B_sempred(Word_in_area_BContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return this.inputStream.LT(1).charPositionInLine >= 4;
		}
		return true;
	}
	private boolean end_program_sempred(End_programContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return (((End_programContext)_localctx).END!=null?((End_programContext)_localctx).END.getCharPositionInLine():0) <= 4;
		}
		return true;
	}
	private boolean declaratives_sempred(DeclarativesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return (((DeclarativesContext)_localctx).DECLARATIVES!=null?((DeclarativesContext)_localctx).DECLARATIVES.getCharPositionInLine():0) <= 4;
		case 5:
			return (((DeclarativesContext)_localctx).END!=null?((DeclarativesContext)_localctx).END.getCharPositionInLine():0) <= 4;
		}
		return true;
	}
	private boolean paragraph_sempred(ParagraphContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return (((ParagraphContext)_localctx).paragraph_name!=null?((ParagraphContext)_localctx).paragraph_name.getCharPositionInLine():0) <= 4;
		}
		return true;
	}
	private boolean section_header_sempred(Section_headerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return (((Section_headerContext)_localctx).section_name!=null?((Section_headerContext)_localctx).section_name.getCharPositionInLine():0) <= 4;
		}
		return true;
	}
	private boolean arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean logic_expression_sempred(Logic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01c9\u13ba\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\3\2\7\2\u0364"+
		"\n\2\f\2\16\2\u0367\13\2\3\2\3\2\3\3\3\3\5\3\u036d\n\3\3\3\5\3\u0370\n"+
		"\3\3\3\5\3\u0373\n\3\3\4\3\4\3\4\3\4\3\4\7\4\u037a\n\4\f\4\16\4\u037d"+
		"\13\4\3\5\3\5\3\5\3\5\5\5\u0383\n\5\3\5\5\5\u0386\n\5\3\6\3\6\3\6\3\6"+
		"\5\6\u038c\n\6\3\6\5\6\u038f\n\6\3\6\5\6\u0392\n\6\3\6\5\6\u0395\n\6\3"+
		"\6\5\6\u0398\n\6\3\7\3\7\5\7\u039c\n\7\3\7\7\7\u039f\n\7\f\7\16\7\u03a2"+
		"\13\7\3\7\7\7\u03a5\n\7\f\7\16\7\u03a8\13\7\5\7\u03aa\n\7\3\7\5\7\u03ad"+
		"\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\7\n\u03b8\n\n\f\n\16\n\u03bb"+
		"\13\n\3\13\3\13\3\f\3\f\5\f\u03c1\n\f\3\r\3\r\3\r\5\r\u03c6\n\r\3\16\3"+
		"\16\5\16\u03ca\n\16\3\17\3\17\3\17\3\17\5\17\u03d0\n\17\3\17\3\17\3\20"+
		"\3\20\3\20\5\20\u03d7\n\20\3\20\5\20\u03da\n\20\3\20\3\20\3\21\3\21\7"+
		"\21\u03e0\n\21\f\21\16\21\u03e3\13\21\3\22\3\22\3\22\3\22\6\22\u03e9\n"+
		"\22\r\22\16\22\u03ea\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\7\23\u03f5"+
		"\n\23\f\23\16\23\u03f8\13\23\3\24\3\24\3\24\3\24\7\24\u03fe\n\24\f\24"+
		"\16\24\u0401\13\24\3\25\6\25\u0404\n\25\r\25\16\25\u0405\3\25\5\25\u0409"+
		"\n\25\3\26\3\26\5\26\u040d\n\26\3\26\3\26\5\26\u0411\n\26\3\26\3\26\3"+
		"\26\5\26\u0416\n\26\3\26\3\26\3\26\3\26\5\26\u041c\n\26\3\26\3\26\3\27"+
		"\3\27\3\30\6\30\u0423\n\30\r\30\16\30\u0424\3\30\3\30\3\30\3\30\5\30\u042b"+
		"\n\30\3\31\3\31\3\31\3\31\5\31\u0431\n\31\3\31\3\31\3\32\3\32\6\32\u0437"+
		"\n\32\r\32\16\32\u0438\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u046a\n\34\3\35"+
		"\3\35\3\35\3\35\5\35\u0470\n\35\3\35\3\35\3\35\3\35\5\35\u0476\n\35\3"+
		"\35\3\35\3\35\3\35\3\35\6\35\u047d\n\35\r\35\16\35\u047e\5\35\u0481\n"+
		"\35\3\36\3\36\6\36\u0485\n\36\r\36\16\36\u0486\3\36\3\36\5\36\u048b\n"+
		"\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\6\"\u0499\n\"\r\"\16"+
		"\"\u049a\5\"\u049d\n\"\3#\3#\3#\3#\5#\u04a3\n#\3#\3#\3#\5#\u04a8\n#\5"+
		"#\u04aa\n#\3#\3#\3#\5#\u04af\n#\3#\5#\u04b2\n#\3#\3#\3#\5#\u04b7\n#\3"+
		"#\3#\5#\u04bb\n#\5#\u04bd\n#\3#\5#\u04c0\n#\3$\3$\5$\u04c4\n$\3$\3$\5"+
		"$\u04c8\n$\3%\3%\5%\u04cc\n%\3&\3&\3&\3&\5&\u04d2\n&\3&\3&\3&\7&\u04d7"+
		"\n&\f&\16&\u04da\13&\5&\u04dc\n&\3&\3&\6&\u04e0\n&\r&\16&\u04e1\3&\5&"+
		"\u04e5\n&\3&\3&\5&\u04e9\n&\3&\3&\5&\u04ed\n&\3&\5&\u04f0\n&\3&\5&\u04f3"+
		"\n&\3&\5&\u04f6\n&\3\'\3\'\3(\3(\3(\5(\u04fd\n(\3(\5(\u0500\n(\3(\3(\5"+
		"(\u0504\n(\3(\5(\u0507\n(\3)\3)\3*\3*\3+\3+\3,\5,\u0510\n,\3,\3,\3-\3"+
		"-\3-\5-\u0517\n-\3.\3.\3/\3/\3/\3/\3/\3/\5/\u0521\n/\5/\u0523\n/\3\60"+
		"\3\60\6\60\u0527\n\60\r\60\16\60\u0528\3\61\3\61\5\61\u052d\n\61\3\62"+
		"\3\62\6\62\u0531\n\62\r\62\16\62\u0532\3\62\3\62\3\62\3\62\5\62\u0539"+
		"\n\62\3\62\3\62\5\62\u053d\n\62\6\62\u053f\n\62\r\62\16\62\u0540\3\62"+
		"\3\62\3\62\3\62\3\62\5\62\u0548\n\62\5\62\u054a\n\62\3\62\5\62\u054d\n"+
		"\62\3\62\5\62\u0550\n\62\3\63\3\63\3\64\3\64\5\64\u0556\n\64\3\65\3\65"+
		"\6\65\u055a\n\65\r\65\16\65\u055b\3\65\3\65\5\65\u0560\n\65\3\65\3\65"+
		"\5\65\u0564\n\65\6\65\u0566\n\65\r\65\16\65\u0567\3\65\3\65\3\65\5\65"+
		"\u056d\n\65\3\65\3\65\5\65\u0571\n\65\3\65\5\65\u0574\n\65\3\65\5\65\u0577"+
		"\n\65\3\66\3\66\3\67\3\67\38\38\39\39\39\59\u0582\n9\3:\3:\3:\5:\u0587"+
		"\n:\3;\3;\3;\5;\u058c\n;\3<\3<\3<\3<\3<\3<\5<\u0594\n<\3<\5<\u0597\n<"+
		"\3<\5<\u059a\n<\3<\5<\u059d\n<\3=\3=\3>\3>\5>\u05a3\n>\3?\3?\3?\6?\u05a8"+
		"\n?\r?\16?\u05a9\3?\5?\u05ad\n?\3?\3?\5?\u05b1\n?\3?\5?\u05b4\n?\5?\u05b6"+
		"\n?\3?\5?\u05b9\n?\3?\3?\5?\u05bd\n?\3?\5?\u05c0\n?\3?\3?\3?\3?\6?\u05c6"+
		"\n?\r?\16?\u05c7\5?\u05ca\n?\5?\u05cc\n?\3?\3?\3?\3?\6?\u05d2\n?\r?\16"+
		"?\u05d3\5?\u05d6\n?\5?\u05d8\n?\3@\3@\3@\7@\u05dd\n@\f@\16@\u05e0\13@"+
		"\3@\5@\u05e3\n@\3@\3@\5@\u05e7\n@\3@\5@\u05ea\n@\5@\u05ec\n@\3@\5@\u05ef"+
		"\n@\3@\3@\5@\u05f3\n@\3@\5@\u05f6\n@\3A\3A\3B\3B\5B\u05fc\nB\3B\3B\3C"+
		"\5C\u0601\nC\3C\3C\5C\u0605\nC\3C\3C\7C\u0609\nC\fC\16C\u060c\13C\3D\3"+
		"D\3E\3E\3E\3E\3E\3E\5E\u0616\nE\3F\3F\6F\u061a\nF\rF\16F\u061b\3F\3F\3"+
		"F\3G\3G\6G\u0623\nG\rG\16G\u0624\3G\3G\3G\3G\3H\3H\6H\u062d\nH\rH\16H"+
		"\u062e\3H\3H\3H\3I\3I\3I\3I\3I\6I\u0639\nI\rI\16I\u063a\3J\3J\6J\u063f"+
		"\nJ\rJ\16J\u0640\3J\3J\3J\5J\u0646\nJ\3J\3J\3K\3K\3K\3K\3K\3L\3L\5L\u0651"+
		"\nL\3M\3M\5M\u0655\nM\3N\3N\3N\3N\5N\u065b\nN\3N\5N\u065e\nN\3N\3N\3N"+
		"\6N\u0663\nN\rN\16N\u0664\6N\u0667\nN\rN\16N\u0668\3N\3N\3N\3N\3N\6N\u0670"+
		"\nN\rN\16N\u0671\3N\5N\u0675\nN\3N\3N\5N\u0679\nN\6N\u067b\nN\rN\16N\u067c"+
		"\5N\u067f\nN\3N\3N\3N\3N\5N\u0685\nN\3N\3N\3N\3N\7N\u068b\nN\fN\16N\u068e"+
		"\13N\3N\6N\u0691\nN\rN\16N\u0692\3N\5N\u0696\nN\3N\3N\5N\u069a\nN\5N\u069c"+
		"\nN\3O\3O\5O\u06a0\nO\3O\3O\5O\u06a4\nO\3O\5O\u06a7\nO\3O\5O\u06aa\nO"+
		"\3O\3O\3O\5O\u06af\nO\3P\3P\3Q\3Q\3R\3R\3S\3S\3T\3T\3T\3T\5T\u06bd\nT"+
		"\3T\3T\3T\5T\u06c2\nT\5T\u06c4\nT\3T\5T\u06c7\nT\3T\5T\u06ca\nT\3U\3U"+
		"\3V\3V\3V\5V\u06d1\nV\3V\3V\5V\u06d5\nV\3V\3V\3V\5V\u06da\nV\3V\5V\u06dd"+
		"\nV\3W\3W\3X\3X\3X\3X\5X\u06e5\nX\3Y\3Y\3Z\3Z\3[\3[\3[\3[\3[\5[\u06f0"+
		"\n[\3[\5[\u06f3\n[\3[\5[\u06f6\n[\3[\5[\u06f9\n[\3\\\3\\\3]\3]\3^\3^\3"+
		"^\5^\u0702\n^\3^\5^\u0705\n^\3^\3^\5^\u0709\n^\3^\3^\3^\5^\u070e\n^\3"+
		"^\5^\u0711\n^\3^\3^\5^\u0715\n^\3^\3^\5^\u0719\n^\5^\u071b\n^\3^\3^\5"+
		"^\u071f\n^\5^\u0721\n^\3^\5^\u0724\n^\3_\3_\5_\u0728\n_\3_\5_\u072b\n"+
		"_\3_\3_\3_\3_\3_\5_\u0732\n_\5_\u0734\n_\5_\u0736\n_\3`\5`\u0739\n`\3"+
		"`\5`\u073c\n`\3`\3`\5`\u0740\n`\3a\3a\5a\u0744\na\3a\3a\3a\5a\u0749\n"+
		"a\5a\u074b\na\3a\6a\u074e\na\ra\16a\u074f\3a\3a\5a\u0754\na\3b\3b\3b\5"+
		"b\u0759\nb\3c\3c\5c\u075d\nc\3c\3c\3d\5d\u0762\nd\3d\3d\3d\3e\5e\u0768"+
		"\ne\3e\3e\3e\3f\5f\u076e\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\7f\u0779\nf\ff"+
		"\16f\u077c\13f\3g\3g\3g\3g\3g\3g\3h\3h\5h\u0786\nh\3i\3i\5i\u078a\ni\3"+
		"j\3j\3k\3k\6k\u0790\nk\rk\16k\u0791\3k\3k\3k\3k\5k\u0798\nk\3k\3k\5k\u079c"+
		"\nk\6k\u079e\nk\rk\16k\u079f\6k\u07a2\nk\rk\16k\u07a3\5k\u07a6\nk\3l\3"+
		"l\3l\5l\u07ab\nl\3l\3l\5l\u07af\nl\3l\5l\u07b2\nl\6l\u07b4\nl\rl\16l\u07b5"+
		"\3m\5m\u07b9\nm\3m\3m\3m\3m\5m\u07bf\nm\3m\3m\3m\5m\u07c4\nm\3m\5m\u07c7"+
		"\nm\3m\3m\3m\3m\3m\5m\u07ce\nm\3m\5m\u07d1\nm\3m\3m\3m\3m\3m\5m\u07d8"+
		"\nm\3m\5m\u07db\nm\3m\3m\3m\5m\u07e0\nm\5m\u07e2\nm\5m\u07e4\nm\3n\3n"+
		"\3n\3n\3n\3n\5n\u07ec\nn\3n\3n\5n\u07f0\nn\6n\u07f2\nn\rn\16n\u07f3\3"+
		"n\5n\u07f7\nn\3n\5n\u07fa\nn\3o\3o\5o\u07fe\no\3p\3p\3p\6p\u0803\np\r"+
		"p\16p\u0804\3p\5p\u0808\np\3p\3p\5p\u080c\np\3p\5p\u080f\np\3p\3p\6p\u0813"+
		"\np\rp\16p\u0814\3p\3p\5p\u0819\np\3q\3q\3q\5q\u081e\nq\3q\3q\3r\3r\3"+
		"s\3s\3t\3t\3t\3u\3u\3v\5v\u082c\nv\3v\3v\5v\u0830\nv\3v\6v\u0833\nv\r"+
		"v\16v\u0834\3w\3w\3x\3x\3y\3y\3y\3y\5y\u083f\ny\3y\3y\5y\u0843\ny\3z\3"+
		"z\3z\3z\3z\7z\u084a\nz\fz\16z\u084d\13z\3{\3{\3|\3|\3}\3}\3}\5}\u0856"+
		"\n}\6}\u0858\n}\r}\16}\u0859\3~\3~\3~\3~\3~\7~\u0861\n~\f~\16~\u0864\13"+
		"~\6~\u0866\n~\r~\16~\u0867\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\7\u0080\u0870\n\u0080\f\u0080\16\u0080\u0873\13\u0080\3\u0081\3\u0081"+
		"\3\u0082\3\u0082\6\u0082\u0879\n\u0082\r\u0082\16\u0082\u087a\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\5\u0083\u0881\n\u0083\6\u0083\u0883\n\u0083\r"+
		"\u0083\16\u0083\u0884\3\u0084\3\u0084\7\u0084\u0889\n\u0084\f\u0084\16"+
		"\u0084\u088c\13\u0084\3\u0085\3\u0085\5\u0085\u0890\n\u0085\3\u0085\3"+
		"\u0085\3\u0086\3\u0086\3\u0086\7\u0086\u0897\n\u0086\f\u0086\16\u0086"+
		"\u089a\13\u0086\6\u0086\u089c\n\u0086\r\u0086\16\u0086\u089d\3\u0087\3"+
		"\u0087\3\u0087\5\u0087\u08a3\n\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3"+
		"\u008a\3\u008a\3\u008b\3\u008b\6\u008b\u08ad\n\u008b\r\u008b\16\u008b"+
		"\u08ae\3\u008c\3\u008c\6\u008c\u08b3\n\u008c\r\u008c\16\u008c\u08b4\3"+
		"\u008c\7\u008c\u08b8\n\u008c\f\u008c\16\u008c\u08bb\13\u008c\3\u008d\3"+
		"\u008d\3\u008d\5\u008d\u08c0\n\u008d\3\u008d\3\u008d\6\u008d\u08c4\n\u008d"+
		"\r\u008d\16\u008d\u08c5\3\u008e\3\u008e\5\u008e\u08ca\n\u008e\3\u008f"+
		"\3\u008f\3\u0090\3\u0090\5\u0090\u08d0\n\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u08d9\n\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u08de\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u08e4\n\u0091\5\u0091\u08e6\n\u0091\3\u0091\5\u0091\u08e9\n\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0093\3\u0093\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095"+
		"\3\u0096\3\u0096\5\u0096\u08f7\n\u0096\3\u0096\5\u0096\u08fa\n\u0096\3"+
		"\u0096\3\u0096\5\u0096\u08fe\n\u0096\3\u0096\6\u0096\u0901\n\u0096\r\u0096"+
		"\16\u0096\u0902\3\u0096\3\u0096\5\u0096\u0907\n\u0096\3\u0096\3\u0096"+
		"\5\u0096\u090b\n\u0096\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0912\n\u0098\3\u0098\7\u0098\u0915\n\u0098\f\u0098\16\u0098\u0918\13"+
		"\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u091d\n\u0098\3\u0098\7\u0098\u0920"+
		"\n\u0098\f\u0098\16\u0098\u0923\13\u0098\3\u0098\5\u0098\u0926\n\u0098"+
		"\6\u0098\u0928\n\u0098\r\u0098\16\u0098\u0929\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u092f\n\u0098\5\u0098\u0931\n\u0098\3\u0098\5\u0098\u0934\n\u0098"+
		"\3\u0099\3\u0099\5\u0099\u0938\n\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u093d\n\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0942\n\u0099\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\5\u009a\u0948\n\u009a\3\u009b\3\u009b\5\u009b\u094c"+
		"\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0954"+
		"\n\u009c\3\u009c\3\u009c\5\u009c\u0958\n\u009c\6\u009c\u095a\n\u009c\r"+
		"\u009c\16\u009c\u095b\3\u009c\5\u009c\u095f\n\u009c\3\u009c\5\u009c\u0962"+
		"\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u096a"+
		"\n\u009d\3\u009d\3\u009d\5\u009d\u096e\n\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0973\n\u009d\3\u009d\5\u009d\u0976\n\u009d\3\u009e\3\u009e\3"+
		"\u009f\3\u009f\5\u009f\u097c\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5"+
		"\u00a0\u0982\n\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0987\n\u00a1\f\u00a1"+
		"\16\u00a1\u098a\13\u00a1\6\u00a1\u098c\n\u00a1\r\u00a1\16\u00a1\u098d"+
		"\3\u00a1\5\u00a1\u0991\n\u00a1\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0996\n"+
		"\u00a2\f\u00a2\16\u00a2\u0999\13\u00a2\6\u00a2\u099b\n\u00a2\r\u00a2\16"+
		"\u00a2\u099c\3\u00a2\5\u00a2\u09a0\n\u00a2\3\u00a3\3\u00a3\3\u00a3\5\u00a3"+
		"\u09a5\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u09a9\n\u00a3\3\u00a3\3\u00a3\5"+
		"\u00a3\u09ad\n\u00a3\5\u00a3\u09af\n\u00a3\5\u00a3\u09b1\n\u00a3\3\u00a3"+
		"\5\u00a3\u09b4\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4"+
		"\u09bb\n\u00a4\3\u00a4\5\u00a4\u09be\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u09c2"+
		"\n\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u09c8\n\u00a7\3\u00a7"+
		"\3\u00a7\5\u00a7\u09cc\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u09d0\n\u00a8\3"+
		"\u00a8\3\u00a8\5\u00a8\u09d4\n\u00a8\3\u00a9\5\u00a9\u09d7\n\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u09dd\n\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u09e1\n\u00a9\5\u00a9\u09e3\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\5\u00aa\u09ea\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u09ee\n\u00aa\5\u00aa"+
		"\u09f0\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u09f4\n\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\3\u00aa\5\u00aa\u09fa\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u09ff"+
		"\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0a03\n\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0a07\n\u00aa\5\u00aa\u0a09\n\u00aa\3\u00ab\5\u00ab\u0a0c\n\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u0a10\n\u00ab\3\u00ab\3\u00ab\3\u00ac\5\u00ac\u0a15\n"+
		"\u00ac\3\u00ac\3\u00ac\5\u00ac\u0a19\n\u00ac\3\u00ac\3\u00ac\3\u00ad\3"+
		"\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0a22\n\u00ae\3\u00ae\5\u00ae\u0a25"+
		"\n\u00ae\3\u00ae\5\u00ae\u0a28\n\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\5\u00b0\u0a2f\n\u00b0\6\u00b0\u0a31\n\u00b0\r\u00b0\16\u00b0"+
		"\u0a32\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0a38\n\u00b0\3\u00b0\5\u00b0\u0a3b"+
		"\n\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0a40\n\u00b1\6\u00b1\u0a42\n"+
		"\u00b1\r\u00b1\16\u00b1\u0a43\3\u00b2\3\u00b2\5\u00b2\u0a48\n\u00b2\3"+
		"\u00b2\3\u00b2\5\u00b2\u0a4c\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u0a50\n\u00b2"+
		"\5\u00b2\u0a52\n\u00b2\3\u00b2\5\u00b2\u0a55\n\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\5\u00b2\u0a5a\n\u00b2\5\u00b2\u0a5c\n\u00b2\3\u00b3\3\u00b3\6\u00b3"+
		"\u0a60\n\u00b3\r\u00b3\16\u00b3\u0a61\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0a67\n\u00b4\3\u00b4\5\u00b4\u0a6a\n\u00b4\3\u00b4\5\u00b4\u0a6d\n\u00b4"+
		"\3\u00b4\5\u00b4\u0a70\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6"+
		"\6\u00b6\u0a77\n\u00b6\r\u00b6\16\u00b6\u0a78\3\u00b7\3\u00b7\5\u00b7"+
		"\u0a7d\n\u00b7\3\u00b7\3\u00b7\7\u00b7\u0a81\n\u00b7\f\u00b7\16\u00b7"+
		"\u0a84\13\u00b7\5\u00b7\u0a86\n\u00b7\3\u00b8\5\u00b8\u0a89\n\u00b8\3"+
		"\u00b8\3\u00b8\5\u00b8\u0a8d\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u0a91\n\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u0a95\n\u00b8\3\u00b8\5\u00b8\u0a98\n\u00b8\3"+
		"\u00b9\3\u00b9\3\u00b9\5\u00b9\u0a9d\n\u00b9\3\u00ba\3\u00ba\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0aa6\n\u00bb\3\u00bb\3\u00bb\6"+
		"\u00bb\u0aaa\n\u00bb\r\u00bb\16\u00bb\u0aab\3\u00bc\3\u00bc\3\u00bd\3"+
		"\u00bd\3\u00be\3\u00be\6\u00be\u0ab4\n\u00be\r\u00be\16\u00be\u0ab5\3"+
		"\u00be\3\u00be\3\u00be\5\u00be\u0abb\n\u00be\6\u00be\u0abd\n\u00be\r\u00be"+
		"\16\u00be\u0abe\3\u00be\3\u00be\7\u00be\u0ac3\n\u00be\f\u00be\16\u00be"+
		"\u0ac6\13\u00be\3\u00be\5\u00be\u0ac9\n\u00be\3\u00be\6\u00be\u0acc\n"+
		"\u00be\r\u00be\16\u00be\u0acd\3\u00be\3\u00be\3\u00be\5\u00be\u0ad3\n"+
		"\u00be\6\u00be\u0ad5\n\u00be\r\u00be\16\u00be\u0ad6\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0adf\n\u00be\5\u00be\u0ae1\n\u00be"+
		"\3\u00be\5\u00be\u0ae4\n\u00be\3\u00be\5\u00be\u0ae7\n\u00be\3\u00bf\3"+
		"\u00bf\3\u00c0\3\u00c0\5\u00c0\u0aed\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c1\5\u00c1\u0af5\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5"+
		"\u00c2\u0afa\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0aff\n\u00c2\5\u00c2"+
		"\u0b01\n\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0b06\n\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c3\5\u00c3\u0b0b\n\u00c3\5\u00c3\u0b0d\n\u00c3\3\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u0b12\n\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0b17\n"+
		"\u00c4\5\u00c4\u0b19\n\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0b1e\n\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0b23\n\u00c5\5\u00c5\u0b25\n\u00c5\3"+
		"\u00c6\3\u00c6\3\u00c6\5\u00c6\u0b2a\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5"+
		"\u00c6\u0b2f\n\u00c6\5\u00c6\u0b31\n\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u0b36\n\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0b3b\n\u00c7\5\u00c7\u0b3d"+
		"\n\u00c7\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0b42\n\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u0b46\n\u00c8\3\u00c8\5\u00c8\u0b49\n\u00c8\3\u00c9\3\u00c9\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0b51\n\u00ca\3\u00ca\3\u00ca\5"+
		"\u00ca\u0b55\n\u00ca\3\u00ca\5\u00ca\u0b58\n\u00ca\3\u00ca\5\u00ca\u0b5b"+
		"\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc"+
		"\6\u00cc\u0b65\n\u00cc\r\u00cc\16\u00cc\u0b66\3\u00cc\3\u00cc\5\u00cc"+
		"\u0b6b\n\u00cc\5\u00cc\u0b6d\n\u00cc\3\u00cc\5\u00cc\u0b70\n\u00cc\3\u00cd"+
		"\3\u00cd\5\u00cd\u0b74\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u0b78\n\u00cd\3"+
		"\u00cd\3\u00cd\6\u00cd\u0b7c\n\u00cd\r\u00cd\16\u00cd\u0b7d\3\u00cd\3"+
		"\u00cd\5\u00cd\u0b82\n\u00cd\5\u00cd\u0b84\n\u00cd\3\u00cd\5\u00cd\u0b87"+
		"\n\u00cd\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0b8c\n\u00ce\3\u00ce\5\u00ce"+
		"\u0b8f\n\u00ce\3\u00ce\5\u00ce\u0b92\n\u00ce\3\u00cf\5\u00cf\u0b95\n\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u0b99\n\u00cf\3\u00cf\3\u00cf\5\u00cf\u0b9d\n"+
		"\u00cf\5\u00cf\u0b9f\n\u00cf\3\u00d0\3\u00d0\5\u00d0\u0ba3\n\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u0ba7\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u0bab\n\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u0baf\n\u00d1\3\u00d2\5\u00d2\u0bb2\n\u00d2\3\u00d2"+
		"\3\u00d2\5\u00d2\u0bb6\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0bba\n\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u0bbe\n\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0bc3"+
		"\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0bc7\n\u00d2\5\u00d2\u0bc9\n\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u0bcd\n\u00d2\3\u00d2\5\u00d2\u0bd0\n\u00d2\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0bd6\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\7\u00d3\u0bdb\n\u00d3\f\u00d3\16\u00d3\u0bde\13\u00d3\3\u00d3\5\u00d3"+
		"\u0be1\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0be6\n\u00d3\3\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\5\u00d3\u0bec\n\u00d3\3\u00d3\3\u00d3\5\u00d3\u0bf0"+
		"\n\u00d3\3\u00d3\3\u00d3\5\u00d3\u0bf4\n\u00d3\3\u00d3\5\u00d3\u0bf7\n"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5"+
		"\u0c00\n\u00d5\5\u00d5\u0c02\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0c07"+
		"\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u0c0b\n\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\5\u00d6\u0c10\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u0c14\n\u00d6\3\u00d6\3"+
		"\u00d6\5\u00d6\u0c18\n\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8\u0c1e"+
		"\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0c24\n\u00d9\5\u00d9"+
		"\u0c26\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u0c2a\n\u00d9\5\u00d9\u0c2c\n\u00d9"+
		"\3\u00da\3\u00da\5\u00da\u0c30\n\u00da\3\u00da\3\u00da\5\u00da\u0c34\n"+
		"\u00da\3\u00da\3\u00da\5\u00da\u0c38\n\u00da\3\u00db\3\u00db\3\u00dc\3"+
		"\u00dc\3\u00dd\5\u00dd\u0c3f\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u0c43\n\u00dd"+
		"\3\u00de\5\u00de\u0c46\n\u00de\3\u00de\3\u00de\5\u00de\u0c4a\n\u00de\3"+
		"\u00df\5\u00df\u0c4d\n\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0c52\n\u00df"+
		"\3\u00e0\5\u00e0\u0c55\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c59\n\u00e0\3"+
		"\u00e1\5\u00e1\u0c5c\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u0c60\n\u00e1\3\u00e2"+
		"\3\u00e2\5\u00e2\u0c64\n\u00e2\3\u00e2\5\u00e2\u0c67\n\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0c6e\n\u00e3\f\u00e3\16\u00e3"+
		"\u0c71\13\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0c76\n\u00e3\f\u00e3"+
		"\16\u00e3\u0c79\13\u00e3\5\u00e3\u0c7b\n\u00e3\7\u00e3\u0c7d\n\u00e3\f"+
		"\u00e3\16\u00e3\u0c80\13\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4"+
		"\u0c86\n\u00e4\f\u00e4\16\u00e4\u0c89\13\u00e4\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\7\u00e5\u0c8f\n\u00e5\f\u00e5\16\u00e5\u0c92\13\u00e5\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u0c99\n\u00e6\f\u00e6\16\u00e6"+
		"\u0c9c\13\u00e6\7\u00e6\u0c9e\n\u00e6\f\u00e6\16\u00e6\u0ca1\13\u00e6"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0ca7\n\u00e7\f\u00e7\16\u00e7"+
		"\u0caa\13\u00e7\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u0caf\n\u00e8\f\u00e8"+
		"\16\u00e8\u0cb2\13\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\7\u00e9"+
		"\u0cb9\n\u00e9\f\u00e9\16\u00e9\u0cbc\13\u00e9\3\u00e9\3\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\7\u00ea\u0cc3\n\u00ea\f\u00ea\16\u00ea\u0cc6\13\u00ea"+
		"\3\u00ea\3\u00ea\3\u00eb\5\u00eb\u0ccb\n\u00eb\3\u00eb\3\u00eb\5\u00eb"+
		"\u0ccf\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0cdd\n\u00eb\3\u00ec"+
		"\3\u00ec\7\u00ec\u0ce1\n\u00ec\f\u00ec\16\u00ec\u0ce4\13\u00ec\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u0ce9\n\u00ed\5\u00ed\u0ceb\n\u00ed\3\u00ed\3"+
		"\u00ed\5\u00ed\u0cef\n\u00ed\3\u00ed\7\u00ed\u0cf2\n\u00ed\f\u00ed\16"+
		"\u00ed\u0cf5\13\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ef\5\u00ef"+
		"\u0cfc\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u0d00\n\u00ef\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0d09\n\u00ef\3\u00ef\3"+
		"\u00ef\5\u00ef\u0d0d\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u0d11\n\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\5\u00ef\u0d16\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u0d1c\n\u00f0\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f3\3\u00f3"+
		"\5\u00f3\u0d24\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u0d28\n\u00f3\5\u00f3\u0d2a"+
		"\n\u00f3\3\u00f3\3\u00f3\7\u00f3\u0d2e\n\u00f3\f\u00f3\16\u00f3\u0d31"+
		"\13\u00f3\3\u00f4\3\u00f4\5\u00f4\u0d35\n\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u0d3c\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f7"+
		"\3\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\7\u00fa"+
		"\u0d4a\n\u00fa\f\u00fa\16\u00fa\u0d4d\13\u00fa\3\u00fa\5\u00fa\u0d50\n"+
		"\u00fa\3\u00fb\3\u00fb\5\u00fb\u0d54\n\u00fb\3\u00fb\3\u00fb\7\u00fb\u0d58"+
		"\n\u00fb\f\u00fb\16\u00fb\u0d5b\13\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd"+
		"\5\u00fd\u0d61\n\u00fd\3\u00fd\5\u00fd\u0d64\n\u00fd\3\u00fd\3\u00fd\7"+
		"\u00fd\u0d68\n\u00fd\f\u00fd\16\u00fd\u0d6b\13\u00fd\3\u00fe\3\u00fe\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\5\u00ff\u0d78\n\u00ff\3\u00ff\3\u00ff\5\u00ff\u0d7c\n\u00ff\3\u0100\3"+
		"\u0100\3\u0101\3\u0101\3\u0102\3\u0102\3\u0103\3\u0103\7\u0103\u0d86\n"+
		"\u0103\f\u0103\16\u0103\u0d89\13\u0103\3\u0104\3\u0104\5\u0104\u0d8d\n"+
		"\u0104\3\u0104\7\u0104\u0d90\n\u0104\f\u0104\16\u0104\u0d93\13\u0104\3"+
		"\u0104\3\u0104\3\u0105\3\u0105\5\u0105\u0d99\n\u0105\3\u0105\5\u0105\u0d9c"+
		"\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0da2\n\u0105\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u0da7\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u0dac\n\u0105\5\u0105\u0dae\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0db3"+
		"\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0db8\n\u0105\3\u0105\5\u0105"+
		"\u0dbb\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0dc0\n\u0105\3\u0105\3"+
		"\u0105\5\u0105\u0dc4\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0dca"+
		"\n\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u0dcf\n\u0105\3\u0105\3\u0105"+
		"\5\u0105\u0dd3\n\u0105\3\u0106\3\u0106\5\u0106\u0dd7\n\u0106\5\u0106\u0dd9"+
		"\n\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0dde\n\u0106\5\u0106\u0de0\n"+
		"\u0106\3\u0107\3\u0107\3\u0107\7\u0107\u0de5\n\u0107\f\u0107\16\u0107"+
		"\u0de8\13\u0107\3\u0107\5\u0107\u0deb\n\u0107\3\u0107\7\u0107\u0dee\n"+
		"\u0107\f\u0107\16\u0107\u0df1\13\u0107\6\u0107\u0df3\n\u0107\r\u0107\16"+
		"\u0107\u0df4\3\u0107\3\u0107\5\u0107\u0df9\n\u0107\3\u0107\5\u0107\u0dfc"+
		"\n\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u010a\3\u010a\3\u010b\3\u010b"+
		"\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u0e11\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u0e19\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\5\u010d\u0e22\n\u010d\3\u010e\3\u010e\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0e2b\n\u010f\3\u0110\3\u0110"+
		"\5\u0110\u0e2f\n\u0110\3\u0110\3\u0110\5\u0110\u0e33\n\u0110\3\u0110\3"+
		"\u0110\5\u0110\u0e37\n\u0110\3\u0111\3\u0111\3\u0112\5\u0112\u0e3c\n\u0112"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0e43\n\u0112\3\u0112"+
		"\3\u0112\5\u0112\u0e47\n\u0112\5\u0112\u0e49\n\u0112\3\u0112\3\u0112\7"+
		"\u0112\u0e4d\n\u0112\f\u0112\16\u0112\u0e50\13\u0112\3\u0112\3\u0112\7"+
		"\u0112\u0e54\n\u0112\f\u0112\16\u0112\u0e57\13\u0112\5\u0112\u0e59\n\u0112"+
		"\3\u0112\3\u0112\3\u0112\5\u0112\u0e5e\n\u0112\3\u0112\3\u0112\5\u0112"+
		"\u0e62\n\u0112\5\u0112\u0e64\n\u0112\3\u0112\3\u0112\5\u0112\u0e68\n\u0112"+
		"\3\u0112\3\u0112\5\u0112\u0e6c\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u0e71\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0e76\n\u0112\3\u0112\3"+
		"\u0112\5\u0112\u0e7a\n\u0112\5\u0112\u0e7c\n\u0112\3\u0113\3\u0113\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0118\3\u0118"+
		"\3\u0119\3\u0119\3\u011a\3\u011a\5\u011a\u0e8e\n\u011a\5\u011a\u0e90\n"+
		"\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\5\u011b\u0e97\n\u011b\3"+
		"\u011b\3\u011b\5\u011b\u0e9b\n\u011b\3\u011b\3\u011b\5\u011b\u0e9f\n\u011b"+
		"\3\u011b\3\u011b\5\u011b\u0ea3\n\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\5\u011b\u0ebb\n\u011b\3\u011c\3\u011c\5\u011c\u0ebf\n\u011c\3\u011c\3"+
		"\u011c\3\u011d\6\u011d\u0ec4\n\u011d\r\u011d\16\u011d\u0ec5\3\u011e\3"+
		"\u011e\3\u011f\3\u011f\3\u0120\3\u0120\3\u0121\3\u0121\5\u0121\u0ed0\n"+
		"\u0121\3\u0122\3\u0122\5\u0122\u0ed4\n\u0122\3\u0122\3\u0122\5\u0122\u0ed8"+
		"\n\u0122\5\u0122\u0eda\n\u0122\3\u0122\3\u0122\7\u0122\u0ede\n\u0122\f"+
		"\u0122\16\u0122\u0ee1\13\u0122\3\u0123\3\u0123\3\u0124\3\u0124\5\u0124"+
		"\u0ee7\n\u0124\3\u0124\3\u0124\5\u0124\u0eeb\n\u0124\3\u0124\5\u0124\u0eee"+
		"\n\u0124\3\u0124\3\u0124\5\u0124\u0ef2\n\u0124\3\u0124\5\u0124\u0ef5\n"+
		"\u0124\3\u0124\5\u0124\u0ef8\n\u0124\3\u0124\5\u0124\u0efb\n\u0124\3\u0124"+
		"\3\u0124\5\u0124\u0eff\n\u0124\3\u0124\5\u0124\u0f02\n\u0124\3\u0124\5"+
		"\u0124\u0f05\n\u0124\3\u0124\3\u0124\5\u0124\u0f09\n\u0124\3\u0125\3\u0125"+
		"\5\u0125\u0f0d\n\u0125\3\u0126\3\u0126\5\u0126\u0f11\n\u0126\3\u0127\3"+
		"\u0127\5\u0127\u0f15\n\u0127\3\u0128\3\u0128\5\u0128\u0f19\n\u0128\3\u0129"+
		"\3\u0129\3\u0129\5\u0129\u0f1e\n\u0129\3\u0129\3\u0129\5\u0129\u0f22\n"+
		"\u0129\5\u0129\u0f24\n\u0129\3\u0129\3\u0129\7\u0129\u0f28\n\u0129\f\u0129"+
		"\16\u0129\u0f2b\13\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u0f33\n\u012b\3\u012b\3\u012b\3\u012c\3\u012c\5\u012c\u0f39\n"+
		"\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u0f3e\n\u012d\3\u012d\3\u012d\5"+
		"\u012d\u0f42\n\u012d\5\u012d\u0f44\n\u012d\3\u012d\3\u012d\3\u012e\3\u012e"+
		"\3\u012e\3\u012f\5\u012f\u0f4c\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u0f51\n\u012f\3\u012f\3\u012f\5\u012f\u0f55\n\u012f\3\u012f\5\u012f\u0f58"+
		"\n\u012f\3\u012f\3\u012f\5\u012f\u0f5c\n\u012f\3\u012f\5\u012f\u0f5f\n"+
		"\u012f\3\u012f\5\u012f\u0f62\n\u012f\3\u012f\5\u012f\u0f65\n\u012f\3\u012f"+
		"\3\u012f\5\u012f\u0f69\n\u012f\3\u012f\5\u012f\u0f6c\n\u012f\3\u012f\3"+
		"\u012f\5\u012f\u0f70\n\u012f\3\u012f\5\u012f\u0f73\n\u012f\5\u012f\u0f75"+
		"\n\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133"+
		"\3\u0133\5\u0133\u0f80\n\u0133\5\u0133\u0f82\n\u0133\3\u0133\7\u0133\u0f85"+
		"\n\u0133\f\u0133\16\u0133\u0f88\13\u0133\3\u0133\3\u0133\3\u0134\3\u0134"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u0f92\n\u0135\3\u0135\3\u0135"+
		"\3\u0135\5\u0135\u0f97\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\5\u0135\u0f9f\n\u0135\5\u0135\u0fa1\n\u0135\3\u0135\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\5\u0135\u0fb0\n\u0135\3\u0135\5\u0135\u0fb3\n\u0135\3"+
		"\u0135\5\u0135\u0fb6\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u0fbb\n\u0135"+
		"\3\u0135\5\u0135\u0fbe\n\u0135\3\u0135\5\u0135\u0fc1\n\u0135\3\u0135\3"+
		"\u0135\3\u0135\5\u0135\u0fc6\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u0fcb"+
		"\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u0fd0\n\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\5\u0135\u0fd6\n\u0135\3\u0135\5\u0135\u0fd9\n\u0135\5"+
		"\u0135\u0fdb\n\u0135\3\u0136\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\5"+
		"\u0137\u0fe3\n\u0137\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u013a\3"+
		"\u013a\5\u013a\u0fec\n\u013a\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3"+
		"\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u0ff7\n\u013c\3\u013d\3\u013d\3"+
		"\u013d\3\u013d\5\u013d\u0ffd\n\u013d\3\u013d\5\u013d\u1000\n\u013d\3\u013d"+
		"\3\u013d\3\u013e\3\u013e\3\u013f\5\u013f\u1007\n\u013f\3\u013f\3\u013f"+
		"\5\u013f\u100b\n\u013f\3\u0140\5\u0140\u100e\n\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\7\u0142\u1018\n\u0142\f"+
		"\u0142\16\u0142\u101b\13\u0142\3\u0143\3\u0143\3\u0143\7\u0143\u1020\n"+
		"\u0143\f\u0143\16\u0143\u1023\13\u0143\3\u0144\3\u0144\3\u0144\7\u0144"+
		"\u1028\n\u0144\f\u0144\16\u0144\u102b\13\u0144\3\u0145\3\u0145\3\u0145"+
		"\7\u0145\u1030\n\u0145\f\u0145\16\u0145\u1033\13\u0145\3\u0146\3\u0146"+
		"\3\u0146\5\u0146\u1038\n\u0146\3\u0146\5\u0146\u103b\n\u0146\3\u0147\3"+
		"\u0147\5\u0147\u103f\n\u0147\3\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3"+
		"\u0148\3\u0148\5\u0148\u1048\n\u0148\3\u0148\5\u0148\u104b\n\u0148\3\u0148"+
		"\5\u0148\u104e\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u1054\n"+
		"\u0149\3\u0149\5\u0149\u1057\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\5"+
		"\u014a\u105d\n\u014a\3\u014a\3\u014a\5\u014a\u1061\n\u014a\3\u014b\3\u014b"+
		"\3\u014c\5\u014c\u1066\n\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u106f\n\u014d\3\u014d\5\u014d\u1072\n\u014d\3"+
		"\u014d\5\u014d\u1075\n\u014d\3\u014d\3\u014d\5\u014d\u1079\n\u014d\3\u014e"+
		"\3\u014e\5\u014e\u107d\n\u014e\3\u014e\3\u014e\3\u014e\3\u014f\3\u014f"+
		"\3\u0150\3\u0150\3\u0151\5\u0151\u1087\n\u0151\3\u0151\5\u0151\u108a\n"+
		"\u0151\3\u0151\3\u0151\5\u0151\u108e\n\u0151\3\u0151\3\u0151\3\u0152\3"+
		"\u0152\3\u0153\3\u0153\5\u0153\u1096\n\u0153\3\u0153\3\u0153\3\u0154\3"+
		"\u0154\3\u0155\3\u0155\3\u0155\6\u0155\u109f\n\u0155\r\u0155\16\u0155"+
		"\u10a0\3\u0155\3\u0155\5\u0155\u10a5\n\u0155\3\u0156\3\u0156\5\u0156\u10a9"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u10af\n\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u10b5\n\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u10bf\n\u0156\3\u0156"+
		"\3\u0156\3\u0156\5\u0156\u10c4\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u10ca\n\u0156\3\u0156\5\u0156\u10cd\n\u0156\3\u0157\3\u0157\3"+
		"\u0157\7\u0157\u10d2\n\u0157\f\u0157\16\u0157\u10d5\13\u0157\3\u0158\3"+
		"\u0158\5\u0158\u10d9\n\u0158\3\u0158\5\u0158\u10dc\n\u0158\3\u0158\3\u0158"+
		"\3\u0159\3\u0159\5\u0159\u10e2\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\5\u0159\u10e9\n\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u10f2\n\u015c\3\u015c\6\u015c\u10f5\n\u015c\r"+
		"\u015c\16\u015c\u10f6\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\5\u015e"+
		"\u10fe\n\u015e\3\u015f\3\u015f\5\u015f\u1102\n\u015f\3\u015f\6\u015f\u1105"+
		"\n\u015f\r\u015f\16\u015f\u1106\3\u0160\6\u0160\u110a\n\u0160\r\u0160"+
		"\16\u0160\u110b\3\u0160\5\u0160\u110f\n\u0160\3\u0161\6\u0161\u1112\n"+
		"\u0161\r\u0161\16\u0161\u1113\3\u0161\5\u0161\u1117\n\u0161\3\u0161\6"+
		"\u0161\u111a\n\u0161\r\u0161\16\u0161\u111b\3\u0162\3\u0162\3\u0162\3"+
		"\u0163\3\u0163\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\5\u0165\u1128\n"+
		"\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\6\u0166\u1132\n\u0166\r\u0166\16\u0166\u1133\5\u0166\u1136\n\u0166\3"+
		"\u0167\3\u0167\3\u0167\5\u0167\u113b\n\u0167\3\u0167\3\u0167\3\u0167\6"+
		"\u0167\u1140\n\u0167\r\u0167\16\u0167\u1141\5\u0167\u1144\n\u0167\3\u0168"+
		"\3\u0168\3\u0169\3\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u114f\n\u016b\3\u016b\5\u016b\u1152\n\u016b\3\u016b\3\u016b\5\u016b\u1156"+
		"\n\u016b\3\u016b\3\u016b\5\u016b\u115a\n\u016b\5\u016b\u115c\n\u016b\3"+
		"\u016c\3\u016c\5\u016c\u1160\n\u016c\3\u016c\5\u016c\u1163\n\u016c\3\u016c"+
		"\3\u016c\3\u016d\3\u016d\5\u016d\u1169\n\u016d\3\u016d\5\u016d\u116c\n"+
		"\u016d\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170"+
		"\3\u0171\3\u0171\3\u0172\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0175"+
		"\3\u0175\3\u0176\3\u0176\3\u0176\7\u0176\u1183\n\u0176\f\u0176\16\u0176"+
		"\u1186\13\u0176\3\u0177\3\u0177\5\u0177\u118a\n\u0177\3\u0177\3\u0177"+
		"\3\u0177\5\u0177\u118f\n\u0177\3\u0177\5\u0177\u1192\n\u0177\3\u0177\5"+
		"\u0177\u1195\n\u0177\3\u0177\5\u0177\u1198\n\u0177\3\u0177\5\u0177\u119b"+
		"\n\u0177\3\u0177\5\u0177\u119e\n\u0177\3\u0177\5\u0177\u11a1\n\u0177\3"+
		"\u0177\7\u0177\u11a4\n\u0177\f\u0177\16\u0177\u11a7\13\u0177\3\u0177\5"+
		"\u0177\u11aa\n\u0177\3\u0177\5\u0177\u11ad\n\u0177\3\u0177\3\u0177\3\u0178"+
		"\5\u0178\u11b2\n\u0178\3\u0178\3\u0178\5\u0178\u11b6\n\u0178\3\u0178\3"+
		"\u0178\3\u0179\3\u0179\3\u017a\5\u017a\u11bd\n\u017a\3\u017a\3\u017a\5"+
		"\u017a\u11c1\n\u017a\3\u017a\5\u017a\u11c4\n\u017a\3\u017a\3\u017a\5\u017a"+
		"\u11c8\n\u017a\3\u017a\5\u017a\u11cb\n\u017a\3\u017a\5\u017a\u11ce\n\u017a"+
		"\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\7\u017b\u11d5\n\u017b\f\u017b"+
		"\16\u017b\u11d8\13\u017b\5\u017b\u11da\n\u017b\3\u017c\3\u017c\5\u017c"+
		"\u11de\n\u017c\3\u017c\5\u017c\u11e1\n\u017c\5\u017c\u11e3\n\u017c\3\u017c"+
		"\3\u017c\3\u017c\5\u017c\u11e8\n\u017c\3\u017c\5\u017c\u11eb\n\u017c\3"+
		"\u017c\5\u017c\u11ee\n\u017c\3\u017d\3\u017d\3\u017d\5\u017d\u11f3\n\u017d"+
		"\3\u017e\3\u017e\3\u017f\3\u017f\3\u017f\5\u017f\u11fa\n\u017f\3\u017f"+
		"\3\u017f\3\u0180\3\u0180\5\u0180\u1200\n\u0180\3\u0180\5\u0180\u1203\n"+
		"\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0182\3\u0182\5\u0182\u120b\n"+
		"\u0182\5\u0182\u120d\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5"+
		"\u0182\u1214\n\u0182\3\u0183\3\u0183\5\u0183\u1218\n\u0183\3\u0183\5\u0183"+
		"\u121b\n\u0183\3\u0183\3\u0183\3\u0184\3\u0184\5\u0184\u1221\n\u0184\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u1229\n\u0184\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u122f\n\u0184\5\u0184\u1231\n\u0184"+
		"\3\u0184\5\u0184\u1234\n\u0184\3\u0185\3\u0185\5\u0185\u1238\n\u0185\3"+
		"\u0185\3\u0185\3\u0186\3\u0186\5\u0186\u123e\n\u0186\3\u0186\3\u0186\3"+
		"\u0186\5\u0186\u1243\n\u0186\3\u0186\3\u0186\3\u0186\3\u0187\3\u0187\3"+
		"\u0188\3\u0188\3\u0189\3\u0189\5\u0189\u124e\n\u0189\3\u0189\3\u0189\3"+
		"\u018a\5\u018a\u1253\n\u018a\3\u018a\3\u018a\5\u018a\u1257\n\u018a\3\u018a"+
		"\3\u018a\5\u018a\u125b\n\u018a\5\u018a\u125d\n\u018a\3\u018b\3\u018b\3"+
		"\u018b\3\u018b\5\u018b\u1263\n\u018b\3\u018c\3\u018c\3\u018d\3\u018d\3"+
		"\u018d\7\u018d\u126a\n\u018d\f\u018d\16\u018d\u126d\13\u018d\3\u018d\7"+
		"\u018d\u1270\n\u018d\f\u018d\16\u018d\u1273\13\u018d\3\u018d\7\u018d\u1276"+
		"\n\u018d\f\u018d\16\u018d\u1279\13\u018d\3\u018d\7\u018d\u127c\n\u018d"+
		"\f\u018d\16\u018d\u127f\13\u018d\3\u018d\5\u018d\u1282\n\u018d\3\u018e"+
		"\3\u018e\3\u018e\5\u018e\u1287\n\u018e\3\u018e\5\u018e\u128a\n\u018e\3"+
		"\u018e\6\u018e\u128d\n\u018e\r\u018e\16\u018e\u128e\3\u018f\3\u018f\3"+
		"\u018f\5\u018f\u1294\n\u018f\3\u0190\3\u0190\3\u0191\3\u0191\3\u0192\3"+
		"\u0192\3\u0192\5\u0192\u129d\n\u0192\3\u0192\5\u0192\u12a0\n\u0192\3\u0192"+
		"\3\u0192\3\u0193\3\u0193\5\u0193\u12a6\n\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\5\u0193\u12ae\n\u0193\3\u0194\3\u0194\3\u0195"+
		"\3\u0195\3\u0196\3\u0196\5\u0196\u12b6\n\u0196\5\u0196\u12b8\n\u0196\3"+
		"\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u12be\n\u0196\3\u0197\3\u0197\3"+
		"\u0198\3\u0198\5\u0198\u12c4\n\u0198\3\u0198\5\u0198\u12c7\n\u0198\3\u0198"+
		"\5\u0198\u12ca\n\u0198\3\u0198\3\u0198\6\u0198\u12ce\n\u0198\r\u0198\16"+
		"\u0198\u12cf\3\u0199\3\u0199\3\u019a\3\u019a\6\u019a\u12d6\n\u019a\r\u019a"+
		"\16\u019a\u12d7\3\u019a\3\u019a\6\u019a\u12dc\n\u019a\r\u019a\16\u019a"+
		"\u12dd\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b"+
		"\u12e7\n\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b\u12ee\n"+
		"\u019b\3\u019c\3\u019c\3\u019d\3\u019d\3\u019e\3\u019e\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f"+
		"\u1300\n\u019f\3\u019f\3\u019f\3\u019f\3\u019f\7\u019f\u1306\n\u019f\f"+
		"\u019f\16\u019f\u1309\13\u019f\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u130e\n"+
		"\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\5\u01a1\u1316\n"+
		"\u01a1\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u1322\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\7\u01a3\u1328\n\u01a3\f\u01a3\16\u01a3\u132b\13\u01a3\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\7\u01a4\u1331\n\u01a4\f\u01a4\16\u01a4\u1334\13\u01a4"+
		"\3\u01a4\5\u01a4\u1337\n\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5"+
		"\u133d\n\u01a5\3\u01a5\5\u01a5\u1340\n\u01a5\3\u01a5\3\u01a5\5\u01a5\u1344"+
		"\n\u01a5\3\u01a5\5\u01a5\u1347\n\u01a5\3\u01a5\5\u01a5\u134a\n\u01a5\3"+
		"\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a9\5\u01a9\u1353\n"+
		"\u01a9\3\u01a9\5\u01a9\u1356\n\u01a9\3\u01a9\3\u01a9\5\u01a9\u135a\n\u01a9"+
		"\3\u01a9\3\u01a9\5\u01a9\u135e\n\u01a9\3\u01a9\3\u01a9\5\u01a9\u1362\n"+
		"\u01a9\3\u01a9\3\u01a9\5\u01a9\u1366\n\u01a9\3\u01a9\3\u01a9\5\u01a9\u136a"+
		"\n\u01a9\3\u01a9\3\u01a9\5\u01a9\u136e\n\u01a9\5\u01a9\u1370\n\u01a9\3"+
		"\u01a9\3\u01a9\5\u01a9\u1374\n\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u1379"+
		"\n\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u137e\n\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\5\u01a9\u1383\n\u01a9\3\u01a9\5\u01a9\u1386\n\u01a9\3\u01aa\3"+
		"\u01aa\5\u01aa\u138a\n\u01aa\3\u01aa\5\u01aa\u138d\n\u01aa\3\u01ab\3\u01ab"+
		"\3\u01ab\3\u01ab\5\u01ab\u1393\n\u01ab\3\u01ab\5\u01ab\u1396\n\u01ab\5"+
		"\u01ab\u1398\n\u01ab\3\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u139f"+
		"\n\u01ad\3\u01ad\3\u01ad\5\u01ad\u13a3\n\u01ad\7\u01ad\u13a5\n\u01ad\f"+
		"\u01ad\16\u01ad\u13a8\13\u01ad\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\5\u01ae\u13b0\n\u01ae\3\u01ae\3\u01ae\3\u01af\3\u01af\3\u01b0"+
		"\3\u01b0\3\u01b1\3\u01b1\3\u01b1\2\4\u033c\u0344\u01b2\2\4\6\b\n\f\16"+
		"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd"+
		"fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092"+
		"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa"+
		"\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2"+
		"\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da"+
		"\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2"+
		"\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a"+
		"\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122"+
		"\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a"+
		"\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152"+
		"\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a"+
		"\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182"+
		"\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a"+
		"\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2"+
		"\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca"+
		"\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2"+
		"\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa"+
		"\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212"+
		"\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a"+
		"\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242"+
		"\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a"+
		"\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272"+
		"\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a"+
		"\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2"+
		"\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba"+
		"\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2"+
		"\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea"+
		"\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302"+
		"\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a"+
		"\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332"+
		"\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a"+
		"\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\2\66"+
		"\6\2\u00ca\u00cb\u00f3\u00f4\u0130\u0131\u016a\u016b\4\2\u00a6\u00a6\u00a9"+
		"\u00a9\4\2\u00d1\u00d1\u0108\u0108\4\2\3\3\u01c4\u01c4\4\2\b\b\'\'\3\2"+
		"\u00ec\u00ed\3\2ab\4\2\36\36yy\4\2\u0081\u0081\u0196\u0196\4\2\u0109\u0109"+
		"\u010b\u010b\4\2\u00af\u00af\u0175\u0175\5\2\u0100\u0100\u0126\u0126\u012a"+
		"\u012a\3\2\u0186\u0187\4\2\u00ac\u00ac\u0114\u0114\6\2\u00ac\u00ac\u00d8"+
		"\u00d8\u00df\u00df\u0114\u0114\5\2\t\t\u00b8\u00b8\u00e6\u00e6\4\2\t\t"+
		"\u00e6\u00e6\5\2\r\r\20\21\u0104\u0105\4\2\64\64\u00dc\u00dc\4\2\u00ec"+
		"\u00ec\u0156\u0156\4\2\u00a4\u00a4\u01b4\u01b4\4\2\u0139\u0139\u0191\u0191"+
		"\4\2\u0093\u0093\u00a2\u00a2\3\2\u017b\u017c\4\2\u00e7\u00e7\u0151\u0151"+
		"\3\2\u00e1\u00e2\4\2\3\3\u01c2\u01c2\4\2\u00e6\u00e6\u018c\u018c\4\2\u00b7"+
		"\u00b7\u01c4\u01c4\4\2\u0164\u0164\u0193\u0193\3\2\u011e\u011f\b\2\u01b2"+
		"\u01b2\u01b9\u01ba\u01bf\u01bf\u01c2\u01c2\u01c4\u01c4\u01c6\u01c6\4\2"+
		"\u00b4\u00b4\u00cd\u00cd\4\2\u010a\u010a\u016d\u016d\4\2\u00a1\u00a1\u00a3"+
		"\u00a3\4\2EE\u00d5\u00d5\4\2\u00fe\u00fe\u016d\u016d\6\2\13\13\u00cc\u00cc"+
		"\u019f\u019f\u01c4\u01c4\5\2<<\u00fa\u00fa\u01a3\u01a3\4\2\30\30\u00de"+
		"\u00de\7\288VV\u00ee\u00ee\u0119\u011a\u017d\u017f\4\2\33\34\u009f\u00a0"+
		"\5\2\u0083\u0083\u0132\u0132\u0161\u0161\3\2\31\32\4\2<<\u0137\u0137\4"+
		"\2\u0083\u0083\u00ae\u00ae\4\2\u0136\u0136\u0166\u0167\3\2YZ\3\2\u01af"+
		"\u01b0\4\2\25\25\u010f\u010f\5\2\u00ff\u00ff\u0124\u0124\u01a9\u01a9\5"+
		"\2\r\17\u0104\u0104\u01c4\u01c4\2\u1636\2\u0365\3\2\2\2\4\u036a\3\2\2"+
		"\2\6\u0374\3\2\2\2\b\u037e\3\2\2\2\n\u0387\3\2\2\2\f\u0399\3\2\2\2\16"+
		"\u03ae\3\2\2\2\20\u03b1\3\2\2\2\22\u03b4\3\2\2\2\24\u03bc\3\2\2\2\26\u03c0"+
		"\3\2\2\2\30\u03c5\3\2\2\2\32\u03c9\3\2\2\2\34\u03cb\3\2\2\2\36\u03d3\3"+
		"\2\2\2 \u03dd\3\2\2\2\"\u03e4\3\2\2\2$\u03f1\3\2\2\2&\u03f9\3\2\2\2(\u0403"+
		"\3\2\2\2*\u040a\3\2\2\2,\u041f\3\2\2\2.\u042a\3\2\2\2\60\u042c\3\2\2\2"+
		"\62\u0434\3\2\2\2\64\u043a\3\2\2\2\66\u0469\3\2\2\28\u046b\3\2\2\2:\u048a"+
		"\3\2\2\2<\u048c\3\2\2\2>\u048e\3\2\2\2@\u0490\3\2\2\2B\u049c\3\2\2\2D"+
		"\u049e\3\2\2\2F\u04c7\3\2\2\2H\u04cb\3\2\2\2J\u04cd\3\2\2\2L\u04f7\3\2"+
		"\2\2N\u04f9\3\2\2\2P\u0508\3\2\2\2R\u050a\3\2\2\2T\u050c\3\2\2\2V\u050f"+
		"\3\2\2\2X\u0516\3\2\2\2Z\u0518\3\2\2\2\\\u051a\3\2\2\2^\u0524\3\2\2\2"+
		"`\u052a\3\2\2\2b\u052e\3\2\2\2d\u0551\3\2\2\2f\u0555\3\2\2\2h\u0557\3"+
		"\2\2\2j\u0578\3\2\2\2l\u057a\3\2\2\2n\u057c\3\2\2\2p\u0581\3\2\2\2r\u0583"+
		"\3\2\2\2t\u058b\3\2\2\2v\u058d\3\2\2\2x\u059e\3\2\2\2z\u05a2\3\2\2\2|"+
		"\u05a4\3\2\2\2~\u05d9\3\2\2\2\u0080\u05f7\3\2\2\2\u0082\u05f9\3\2\2\2"+
		"\u0084\u0600\3\2\2\2\u0086\u060d\3\2\2\2\u0088\u0615\3\2\2\2\u008a\u0617"+
		"\3\2\2\2\u008c\u0620\3\2\2\2\u008e\u062a\3\2\2\2\u0090\u0633\3\2\2\2\u0092"+
		"\u063c\3\2\2\2\u0094\u0649\3\2\2\2\u0096\u0650\3\2\2\2\u0098\u0654\3\2"+
		"\2\2\u009a\u069b\3\2\2\2\u009c\u06ae\3\2\2\2\u009e\u06b0\3\2\2\2\u00a0"+
		"\u06b2\3\2\2\2\u00a2\u06b4\3\2\2\2\u00a4\u06b6\3\2\2\2\u00a6\u06b8\3\2"+
		"\2\2\u00a8\u06cb\3\2\2\2\u00aa\u06cd\3\2\2\2\u00ac\u06de\3\2\2\2\u00ae"+
		"\u06e0\3\2\2\2\u00b0\u06e6\3\2\2\2\u00b2\u06e8\3\2\2\2\u00b4\u06ea\3\2"+
		"\2\2\u00b6\u06fa\3\2\2\2\u00b8\u06fc\3\2\2\2\u00ba\u06fe\3\2\2\2\u00bc"+
		"\u0735\3\2\2\2\u00be\u073f\3\2\2\2\u00c0\u0741\3\2\2\2\u00c2\u0755\3\2"+
		"\2\2\u00c4\u075c\3\2\2\2\u00c6\u0761\3\2\2\2\u00c8\u0767\3\2\2\2\u00ca"+
		"\u076d\3\2\2\2\u00cc\u077d\3\2\2\2\u00ce\u0785\3\2\2\2\u00d0\u0789\3\2"+
		"\2\2\u00d2\u078b\3\2\2\2\u00d4\u07a5\3\2\2\2\u00d6\u07a7\3\2\2\2\u00d8"+
		"\u07e3\3\2\2\2\u00da\u07e5\3\2\2\2\u00dc\u07fd\3\2\2\2\u00de\u07ff\3\2"+
		"\2\2\u00e0\u081a\3\2\2\2\u00e2\u0821\3\2\2\2\u00e4\u0823\3\2\2\2\u00e6"+
		"\u0825\3\2\2\2\u00e8\u0828\3\2\2\2\u00ea\u082b\3\2\2\2\u00ec\u0836\3\2"+
		"\2\2\u00ee\u0838\3\2\2\2\u00f0\u083a\3\2\2\2\u00f2\u0844\3\2\2\2\u00f4"+
		"\u084e\3\2\2\2\u00f6\u0850\3\2\2\2\u00f8\u0852\3\2\2\2\u00fa\u085b\3\2"+
		"\2\2\u00fc\u0869\3\2\2\2\u00fe\u086b\3\2\2\2\u0100\u0874\3\2\2\2\u0102"+
		"\u0876\3\2\2\2\u0104\u087c\3\2\2\2\u0106\u0886\3\2\2\2\u0108\u088d\3\2"+
		"\2\2\u010a\u0893\3\2\2\2\u010c\u08a2\3\2\2\2\u010e\u08a4\3\2\2\2\u0110"+
		"\u08a6\3\2\2\2\u0112\u08a8\3\2\2\2\u0114\u08aa\3\2\2\2\u0116\u08b0\3\2"+
		"\2\2\u0118\u08bc\3\2\2\2\u011a\u08c9\3\2\2\2\u011c\u08cb\3\2\2\2\u011e"+
		"\u08cd\3\2\2\2\u0120\u08d5\3\2\2\2\u0122\u08ea\3\2\2\2\u0124\u08ed\3\2"+
		"\2\2\u0126\u08ef\3\2\2\2\u0128\u08f1\3\2\2\2\u012a\u090a\3\2\2\2\u012c"+
		"\u090c\3\2\2\2\u012e\u090e\3\2\2\2\u0130\u0941\3\2\2\2\u0132\u0947\3\2"+
		"\2\2\u0134\u094b\3\2\2\2\u0136\u094d\3\2\2\2\u0138\u0963\3\2\2\2\u013a"+
		"\u0977\3\2\2\2\u013c\u097b\3\2\2\2\u013e\u0981\3\2\2\2\u0140\u0983\3\2"+
		"\2\2\u0142\u0992\3\2\2\2\u0144\u09a1\3\2\2\2\u0146\u09b5\3\2\2\2\u0148"+
		"\u09c1\3\2\2\2\u014a\u09c3\3\2\2\2\u014c\u09c5\3\2\2\2\u014e\u09cd\3\2"+
		"\2\2\u0150\u09e2\3\2\2\2\u0152\u0a08\3\2\2\2\u0154\u0a0b\3\2\2\2\u0156"+
		"\u0a14\3\2\2\2\u0158\u0a1c\3\2\2\2\u015a\u0a1e\3\2\2\2\u015c\u0a29\3\2"+
		"\2\2\u015e\u0a2b\3\2\2\2\u0160\u0a3c\3\2\2\2\u0162\u0a5b\3\2\2\2\u0164"+
		"\u0a5d\3\2\2\2\u0166\u0a63\3\2\2\2\u0168\u0a71\3\2\2\2\u016a\u0a74\3\2"+
		"\2\2\u016c\u0a85\3\2\2\2\u016e\u0a97\3\2\2\2\u0170\u0a9c\3\2\2\2\u0172"+
		"\u0a9e\3\2\2\2\u0174\u0aa0\3\2\2\2\u0176\u0aad\3\2\2\2\u0178\u0aaf\3\2"+
		"\2\2\u017a\u0ae0\3\2\2\2\u017c\u0ae8\3\2\2\2\u017e\u0aec\3\2\2\2\u0180"+
		"\u0af4\3\2\2\2\u0182\u0b00\3\2\2\2\u0184\u0b0c\3\2\2\2\u0186\u0b18\3\2"+
		"\2\2\u0188\u0b24\3\2\2\2\u018a\u0b30\3\2\2\2\u018c\u0b3c\3\2\2\2\u018e"+
		"\u0b3e\3\2\2\2\u0190\u0b4a\3\2\2\2\u0192\u0b4c\3\2\2\2\u0194\u0b5c\3\2"+
		"\2\2\u0196\u0b61\3\2\2\2\u0198\u0b71\3\2\2\2\u019a\u0b88\3\2\2\2\u019c"+
		"\u0b94\3\2\2\2\u019e\u0ba0\3\2\2\2\u01a0\u0ba8\3\2\2\2\u01a2\u0bcf\3\2"+
		"\2\2\u01a4\u0bf6\3\2\2\2\u01a6\u0bf8\3\2\2\2\u01a8\u0c01\3\2\2\2\u01aa"+
		"\u0c17\3\2\2\2\u01ac\u0c19\3\2\2\2\u01ae\u0c1d\3\2\2\2\u01b0\u0c2b\3\2"+
		"\2\2\u01b2\u0c37\3\2\2\2\u01b4\u0c39\3\2\2\2\u01b6\u0c3b\3\2\2\2\u01b8"+
		"\u0c3e\3\2\2\2\u01ba\u0c45\3\2\2\2\u01bc\u0c4c\3\2\2\2\u01be\u0c54\3\2"+
		"\2\2\u01c0\u0c5b\3\2\2\2\u01c2\u0c61\3\2\2\2\u01c4\u0c68\3\2\2\2\u01c6"+
		"\u0c81\3\2\2\2\u01c8\u0c8a\3\2\2\2\u01ca\u0c93\3\2\2\2\u01cc\u0ca2\3\2"+
		"\2\2\u01ce\u0cab\3\2\2\2\u01d0\u0cb5\3\2\2\2\u01d2\u0cbf\3\2\2\2\u01d4"+
		"\u0cdc\3\2\2\2\u01d6\u0cde\3\2\2\2\u01d8\u0ce5\3\2\2\2\u01da\u0cf8\3\2"+
		"\2\2\u01dc\u0d15\3\2\2\2\u01de\u0d17\3\2\2\2\u01e0\u0d1d\3\2\2\2\u01e2"+
		"\u0d1f\3\2\2\2\u01e4\u0d29\3\2\2\2\u01e6\u0d32\3\2\2\2\u01e8\u0d3b\3\2"+
		"\2\2\u01ea\u0d3d\3\2\2\2\u01ec\u0d40\3\2\2\2\u01ee\u0d42\3\2\2\2\u01f0"+
		"\u0d44\3\2\2\2\u01f2\u0d46\3\2\2\2\u01f4\u0d51\3\2\2\2\u01f6\u0d5c\3\2"+
		"\2\2\u01f8\u0d5e\3\2\2\2\u01fa\u0d6c\3\2\2\2\u01fc\u0d7b\3\2\2\2\u01fe"+
		"\u0d7d\3\2\2\2\u0200\u0d7f\3\2\2\2\u0202\u0d81\3\2\2\2\u0204\u0d83\3\2"+
		"\2\2\u0206\u0d8a\3\2\2\2\u0208\u0dd2\3\2\2\2\u020a\u0dd8\3\2\2\2\u020c"+
		"\u0df2\3\2\2\2\u020e\u0dfd\3\2\2\2\u0210\u0dff\3\2\2\2\u0212\u0e01\3\2"+
		"\2\2\u0214\u0e03\3\2\2\2\u0216\u0e05\3\2\2\2\u0218\u0e21\3\2\2\2\u021a"+
		"\u0e23\3\2\2\2\u021c\u0e2a\3\2\2\2\u021e\u0e36\3\2\2\2\u0220\u0e38\3\2"+
		"\2\2\u0222\u0e7b\3\2\2\2\u0224\u0e7d\3\2\2\2\u0226\u0e7f\3\2\2\2\u0228"+
		"\u0e81\3\2\2\2\u022a\u0e83\3\2\2\2\u022c\u0e85\3\2\2\2\u022e\u0e87\3\2"+
		"\2\2\u0230\u0e89\3\2\2\2\u0232\u0e8f\3\2\2\2\u0234\u0eba\3\2\2\2\u0236"+
		"\u0ebc\3\2\2\2\u0238\u0ec3\3\2\2\2\u023a\u0ec7\3\2\2\2\u023c\u0ec9\3\2"+
		"\2\2\u023e\u0ecb\3\2\2\2\u0240\u0ecf\3\2\2\2\u0242\u0ed9\3\2\2\2\u0244"+
		"\u0ee2\3\2\2\2\u0246\u0ee4\3\2\2\2\u0248\u0f0c\3\2\2\2\u024a\u0f10\3\2"+
		"\2\2\u024c\u0f14\3\2\2\2\u024e\u0f18\3\2\2\2\u0250\u0f1a\3\2\2\2\u0252"+
		"\u0f2c\3\2\2\2\u0254\u0f2e\3\2\2\2\u0256\u0f38\3\2\2\2\u0258\u0f3a\3\2"+
		"\2\2\u025a\u0f47\3\2\2\2\u025c\u0f74\3\2\2\2\u025e\u0f76\3\2\2\2\u0260"+
		"\u0f78\3\2\2\2\u0262\u0f7a\3\2\2\2\u0264\u0f7c\3\2\2\2\u0266\u0f8b\3\2"+
		"\2\2\u0268\u0fda\3\2\2\2\u026a\u0fdc\3\2\2\2\u026c\u0fdf\3\2\2\2\u026e"+
		"\u0fe4\3\2\2\2\u0270\u0fe7\3\2\2\2\u0272\u0feb\3\2\2\2\u0274\u0fed\3\2"+
		"\2\2\u0276\u0ff6\3\2\2\2\u0278\u0ff8\3\2\2\2\u027a\u1003\3\2\2\2\u027c"+
		"\u1006\3\2\2\2\u027e\u100d\3\2\2\2\u0280\u1012\3\2\2\2\u0282\u1014\3\2"+
		"\2\2\u0284\u101c\3\2\2\2\u0286\u1024\3\2\2\2\u0288\u102c\3\2\2\2\u028a"+
		"\u1034\3\2\2\2\u028c\u103c\3\2\2\2\u028e\u1043\3\2\2\2\u0290\u104f\3\2"+
		"\2\2\u0292\u1058\3\2\2\2\u0294\u1062\3\2\2\2\u0296\u1065\3\2\2\2\u0298"+
		"\u106a\3\2\2\2\u029a\u107a\3\2\2\2\u029c\u1081\3\2\2\2\u029e\u1083\3\2"+
		"\2\2\u02a0\u1086\3\2\2\2\u02a2\u1091\3\2\2\2\u02a4\u1093\3\2\2\2\u02a6"+
		"\u1099\3\2\2\2\u02a8\u109b\3\2\2\2\u02aa\u10cc\3\2\2\2\u02ac\u10ce\3\2"+
		"\2\2\u02ae\u10d6\3\2\2\2\u02b0\u10e8\3\2\2\2\u02b2\u10ea\3\2\2\2\u02b4"+
		"\u10ec\3\2\2\2\u02b6\u10ee\3\2\2\2\u02b8\u10f8\3\2\2\2\u02ba\u10fa\3\2"+
		"\2\2\u02bc\u10ff\3\2\2\2\u02be\u1109\3\2\2\2\u02c0\u1111\3\2\2\2\u02c2"+
		"\u111d\3\2\2\2\u02c4\u1120\3\2\2\2\u02c6\u1122\3\2\2\2\u02c8\u1124\3\2"+
		"\2\2\u02ca\u1135\3\2\2\2\u02cc\u1143\3\2\2\2\u02ce\u1145\3\2\2\2\u02d0"+
		"\u1147\3\2\2\2\u02d2\u1149\3\2\2\2\u02d4\u114b\3\2\2\2\u02d6\u115d\3\2"+
		"\2\2\u02d8\u1166\3\2\2\2\u02da\u116f\3\2\2\2\u02dc\u1171\3\2\2\2\u02de"+
		"\u1173\3\2\2\2\u02e0\u1175\3\2\2\2\u02e2\u1177\3\2\2\2\u02e4\u1179\3\2"+
		"\2\2\u02e6\u117b\3\2\2\2\u02e8\u117d\3\2\2\2\u02ea\u117f\3\2\2\2\u02ec"+
		"\u1187\3\2\2\2\u02ee\u11b1\3\2\2\2\u02f0\u11b9\3\2\2\2\u02f2\u11bc\3\2"+
		"\2\2\u02f4\u11d9\3\2\2\2\u02f6\u11e2\3\2\2\2\u02f8\u11ef\3\2\2\2\u02fa"+
		"\u11f4\3\2\2\2\u02fc\u11f6\3\2\2\2\u02fe\u11fd\3\2\2\2\u0300\u1206\3\2"+
		"\2\2\u0302\u120c\3\2\2\2\u0304\u1215\3\2\2\2\u0306\u1233\3\2\2\2\u0308"+
		"\u1235\3\2\2\2\u030a\u123b\3\2\2\2\u030c\u1247\3\2\2\2\u030e\u1249\3\2"+
		"\2\2\u0310\u124b\3\2\2\2\u0312\u125c\3\2\2\2\u0314\u1262\3\2\2\2\u0316"+
		"\u1264\3\2\2\2\u0318\u1266\3\2\2\2\u031a\u1283\3\2\2\2\u031c\u1290\3\2"+
		"\2\2\u031e\u1295\3\2\2\2\u0320\u1297\3\2\2\2\u0322\u1299\3\2\2\2\u0324"+
		"\u12ad\3\2\2\2\u0326\u12af\3\2\2\2\u0328\u12b1\3\2\2\2\u032a\u12bd\3\2"+
		"\2\2\u032c\u12bf\3\2\2\2\u032e\u12c1\3\2\2\2\u0330\u12d1\3\2\2\2\u0332"+
		"\u12d3\3\2\2\2\u0334\u12ed\3\2\2\2\u0336\u12ef\3\2\2\2\u0338\u12f1\3\2"+
		"\2\2\u033a\u12f3\3\2\2\2\u033c\u12ff\3\2\2\2\u033e\u130d\3\2\2\2\u0340"+
		"\u1315\3\2\2\2\u0342\u1317\3\2\2\2\u0344\u1321\3\2\2\2\u0346\u1336\3\2"+
		"\2\2\u0348\u1349\3\2\2\2\u034a\u134b\3\2\2\2\u034c\u134d\3\2\2\2\u034e"+
		"\u134f\3\2\2\2\u0350\u1352\3\2\2\2\u0352\u1387\3\2\2\2\u0354\u1397\3\2"+
		"\2\2\u0356\u1399\3\2\2\2\u0358\u139b\3\2\2\2\u035a\u13ab\3\2\2\2\u035c"+
		"\u13b3\3\2\2\2\u035e\u13b5\3\2\2\2\u0360\u13b7\3\2\2\2\u0362\u0364\5\4"+
		"\3\2\u0363\u0362\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365"+
		"\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0365\3\2\2\2\u0368\u0369\7\2"+
		"\2\3\u0369\3\3\2\2\2\u036a\u036c\5\6\4\2\u036b\u036d\5\b\5\2\u036c\u036b"+
		"\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036f\3\2\2\2\u036e\u0370\5\n\6\2\u036f"+
		"\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0372\3\2\2\2\u0371\u0373\5\f"+
		"\7\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373\5\3\2\2\2\u0374\u0375"+
		"\7\u00cf\2\2\u0375\u0376\6\4\2\3\u0376\u0377\7\u0080\2\2\u0377\u037b\7"+
		"\u01bf\2\2\u0378\u037a\5\u0276\u013c\2\u0379\u0378\3\2\2\2\u037a\u037d"+
		"\3\2\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\7\3\2\2\2\u037d"+
		"\u037b\3\2\2\2\u037e\u037f\7\u009e\2\2\u037f\u0380\7\u0080\2\2\u0380\u0382"+
		"\7\u01bf\2\2\u0381\u0383\5\u028e\u0148\2\u0382\u0381\3\2\2\2\u0382\u0383"+
		"\3\2\2\2\u0383\u0385\3\2\2\2\u0384\u0386\5\u0290\u0149\2\u0385\u0384\3"+
		"\2\2\2\u0385\u0386\3\2\2\2\u0386\t\3\2\2\2\u0387\u0388\7h\2\2\u0388\u0389"+
		"\7\u0080\2\2\u0389\u038b\7\u01bf\2\2\u038a\u038c\5\u01c4\u00e3\2\u038b"+
		"\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e\3\2\2\2\u038d\u038f\5\u01c6"+
		"\u00e4\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391\3\2\2\2\u0390"+
		"\u0392\5\u01c8\u00e5\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394"+
		"\3\2\2\2\u0393\u0395\5\u01ca\u00e6\2\u0394\u0393\3\2\2\2\u0394\u0395\3"+
		"\2\2\2\u0395\u0397\3\2\2\2\u0396\u0398\5\u01cc\u00e7\2\u0397\u0396\3\2"+
		"\2\2\u0397\u0398\3\2\2\2\u0398\13\3\2\2\2\u0399\u039b\5\36\20\2\u039a"+
		"\u039c\5\"\22\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a9\3"+
		"\2\2\2\u039d\u039f\5 \21\2\u039e\u039d\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0"+
		"\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03aa\3\2\2\2\u03a2\u03a0\3\2"+
		"\2\2\u03a3\u03a5\5&\24\2\u03a4\u03a3\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6"+
		"\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6\3\2"+
		"\2\2\u03a9\u03a0\3\2\2\2\u03a9\u03a6\3\2\2\2\u03aa\u03ac\3\2\2\2\u03ab"+
		"\u03ad\5\34\17\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\r\3\2\2"+
		"\2\u03ae\u03af\6\b\3\2\u03af\u03b0\13\2\2\2\u03b0\17\3\2\2\2\u03b1\u03b2"+
		"\6\t\4\2\u03b2\u03b3\13\2\2\2\u03b3\21\3\2\2\2\u03b4\u03b5\7\"\2\2\u03b5"+
		"\u03b9\7\u01bf\2\2\u03b6\u03b8\5\20\t\2\u03b7\u03b6\3\2\2\2\u03b8\u03bb"+
		"\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\23\3\2\2\2\u03bb"+
		"\u03b9\3\2\2\2\u03bc\u03bd\t\2\2\2\u03bd\25\3\2\2\2\u03be\u03c1\5\24\13"+
		"\2\u03bf\u03c1\7\u01a9\2\2\u03c0\u03be\3\2\2\2\u03c0\u03bf\3\2\2\2\u03c1"+
		"\27\3\2\2\2\u03c2\u03c6\5\24\13\2\u03c3\u03c4\7\t\2\2\u03c4\u03c6\7\3"+
		"\2\2\u03c5\u03c2\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6\31\3\2\2\2\u03c7\u03ca"+
		"\5\30\r\2\u03c8\u03ca\7\u01a9\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03c8\3\2"+
		"\2\2\u03ca\33\3\2\2\2\u03cb\u03cc\7\u0088\2\2\u03cc\u03cd\6\17\5\3\u03cd"+
		"\u03cf\7\u012d\2\2\u03ce\u03d0\5\u027a\u013e\2\u03cf\u03ce\3\2\2\2\u03cf"+
		"\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\7\u01bf\2\2\u03d2\35\3"+
		"\2\2\2\u03d3\u03d4\7\u012b\2\2\u03d4\u03d6\7\u0080\2\2\u03d5\u03d7\5\62"+
		"\32\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d9\3\2\2\2\u03d8"+
		"\u03da\5\64\33\2\u03d9\u03d8\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db\3"+
		"\2\2\2\u03db\u03dc\7\u01bf\2\2\u03dc\37\3\2\2\2\u03dd\u03e1\5\60\31\2"+
		"\u03de\u03e0\5&\24\2\u03df\u03de\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1\u03df"+
		"\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2!\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4"+
		"\u03e5\7q\2\2\u03e5\u03e6\6\22\6\3\u03e6\u03e8\7\u01bf\2\2\u03e7\u03e9"+
		"\5$\23\2\u03e8\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea"+
		"\u03eb\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\7\u0088\2\2\u03ed\u03ee"+
		"\6\22\7\3\u03ee\u03ef\7q\2\2\u03ef\u03f0\7\u01bf\2\2\u03f0#\3\2\2\2\u03f1"+
		"\u03f2\5\60\31\2\u03f2\u03f6\5*\26\2\u03f3\u03f5\5&\24\2\u03f4\u03f3\3"+
		"\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7"+
		"%\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03fa\7\u01c4\2\2\u03fa\u03fb\6\24"+
		"\b\3\u03fb\u03ff\7\u01bf\2\2\u03fc\u03fe\5(\25\2\u03fd\u03fc\3\2\2\2\u03fe"+
		"\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\'\3\2\2\2"+
		"\u0401\u03ff\3\2\2\2\u0402\u0404\5\66\34\2\u0403\u0402\3\2\2\2\u0404\u0405"+
		"\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407"+
		"\u0409\7\u01bf\2\2\u0408\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409)\3\2"+
		"\2\2\u040a\u040c\7\u019a\2\2\u040b\u040d\7\u00c4\2\2\u040c\u040b\3\2\2"+
		"\2\u040c\u040d\3\2\2\2\u040d\u041b\3\2\2\2\u040e\u0410\7\b\2\2\u040f\u0411"+
		"\7\u016d\2\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2"+
		"\2\u0412\u0413\t\3\2\2\u0413\u0415\7\u012b\2\2\u0414\u0416\7\u010b\2\2"+
		"\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u041c"+
		"\5.\30\2\u0418\u0419\7\'\2\2\u0419\u041a\7\u0144\2\2\u041a\u041c\5,\27"+
		"\2\u041b\u040e\3\2\2\2\u041b\u0418\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e"+
		"\7\u01bf\2\2\u041e+\3\2\2\2\u041f\u0420\5\u02ac\u0157\2\u0420-\3\2\2\2"+
		"\u0421\u0423\5\u0316\u018c\2\u0422\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424"+
		"\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u042b\3\2\2\2\u0426\u042b\7\u00d8"+
		"\2\2\u0427\u042b\7\u0114\2\2\u0428\u042b\7\u00df\2\2\u0429\u042b\7\u00ac"+
		"\2\2\u042a\u0422\3\2\2\2\u042a\u0426\3\2\2\2\u042a\u0427\3\2\2\2\u042a"+
		"\u0428\3\2\2\2\u042a\u0429\3\2\2\2\u042b/\3\2\2\2\u042c\u042d\7\u01c4"+
		"\2\2\u042d\u042e\6\31\t\3\u042e\u0430\7\u0159\2\2\u042f\u0431\5\u02a6"+
		"\u0154\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0432\3\2\2\2\u0432"+
		"\u0433\7\u01bf\2\2\u0433\61\3\2\2\2\u0434\u0436\7\u019b\2\2\u0435\u0437"+
		"\5\u02ac\u0157\2\u0436\u0435\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u0436\3"+
		"\2\2\2\u0438\u0439\3\2\2\2\u0439\63\3\2\2\2\u043a\u043b\7\u00c3\2\2\u043b"+
		"\u043c\5\u02ac\u0157\2\u043c\65\3\2\2\2\u043d\u046a\5\u0180\u00c1\2\u043e"+
		"\u046a\5\u017a\u00be\2\u043f\u046a\5\u0174\u00bb\2\u0440\u046a\5\u0166"+
		"\u00b4\2\u0441\u046a\5\u0164\u00b3\2\u0442\u046a\5\u0160\u00b1\2\u0443"+
		"\u046a\5\u015e\u00b0\2\u0444\u046a\5\u015c\u00af\2\u0445\u046a\5\u015a"+
		"\u00ae\2\u0446\u046a\5\u013e\u00a0\2\u0447\u046a\5\u0134\u009b\2\u0448"+
		"\u046a\5\u012e\u0098\2\u0449\u046a\5\u0126\u0094\2\u044a\u046a\5\u0128"+
		"\u0095\2\u044b\u046a\5\u0122\u0092\2\u044c\u046a\5\u012a\u0096\2\u044d"+
		"\u046a\5\u0120\u0091\2\u044e\u046a\5\u0116\u008c\2\u044f\u046a\5\u0114"+
		"\u008b\2\u0450\u046a\5\u00f0y\2\u0451\u046a\5\u00dep\2\u0452\u046a\5\u011e"+
		"\u0090\2\u0453\u046a\5\u00dan\2\u0454\u046a\5\u00d4k\2\u0455\u046a\5\u00c0"+
		"a\2\u0456\u046a\5\u00ba^\2\u0457\u046a\5\u00aeX\2\u0458\u046a\5\u00aa"+
		"V\2\u0459\u046a\5\u00a6T\2\u045a\u046a\5\u009aN\2\u045b\u046a\5\u0088"+
		"E\2\u045c\u046a\5z>\2\u045d\u046a\5v<\2\u045e\u046a\5r:\2\u045f\u046a"+
		"\5h\65\2\u0460\u046a\5b\62\2\u0461\u046a\5`\61\2\u0462\u046a\5^\60\2\u0463"+
		"\u046a\5\\/\2\u0464\u046a\5J&\2\u0465\u046a\5D#\2\u0466\u046a\5B\"\2\u0467"+
		"\u046a\58\35\2\u0468\u046a\5\u00b4[\2\u0469\u043d\3\2\2\2\u0469\u043e"+
		"\3\2\2\2\u0469\u043f\3\2\2\2\u0469\u0440\3\2\2\2\u0469\u0441\3\2\2\2\u0469"+
		"\u0442\3\2\2\2\u0469\u0443\3\2\2\2\u0469\u0444\3\2\2\2\u0469\u0445\3\2"+
		"\2\2\u0469\u0446\3\2\2\2\u0469\u0447\3\2\2\2\u0469\u0448\3\2\2\2\u0469"+
		"\u0449\3\2\2\2\u0469\u044a\3\2\2\2\u0469\u044b\3\2\2\2\u0469\u044c\3\2"+
		"\2\2\u0469\u044d\3\2\2\2\u0469\u044e\3\2\2\2\u0469\u044f\3\2\2\2\u0469"+
		"\u0450\3\2\2\2\u0469\u0451\3\2\2\2\u0469\u0452\3\2\2\2\u0469\u0453\3\2"+
		"\2\2\u0469\u0454\3\2\2\2\u0469\u0455\3\2\2\2\u0469\u0456\3\2\2\2\u0469"+
		"\u0457\3\2\2\2\u0469\u0458\3\2\2\2\u0469\u0459\3\2\2\2\u0469\u045a\3\2"+
		"\2\2\u0469\u045b\3\2\2\2\u0469\u045c\3\2\2\2\u0469\u045d\3\2\2\2\u0469"+
		"\u045e\3\2\2\2\u0469\u045f\3\2\2\2\u0469\u0460\3\2\2\2\u0469\u0461\3\2"+
		"\2\2\u0469\u0462\3\2\2\2\u0469\u0463\3\2\2\2\u0469\u0464\3\2\2\2\u0469"+
		"\u0465\3\2\2\2\u0469\u0466\3\2\2\2\u0469\u0467\3\2\2\2\u0469\u0468\3\2"+
		"\2\2\u046a\67\3\2\2\2\u046b\u0475\7`\2\2\u046c\u046f\5@!\2\u046d\u046e"+
		"\t\4\2\2\u046e\u0470\5> \2\u046f\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470"+
		"\u0476\3\2\2\2\u0471\u0472\5<\37\2\u0472\u0473\7\u00bf\2\2\u0473\u0474"+
		"\7|\2\2\u0474\u0476\3\2\2\2\u0475\u046c\3\2\2\2\u0475\u0471\3\2\2\2\u0476"+
		"\u0480\3\2\2\2\u0477\u047c\7\u0142\2\2\u0478\u0479\5:\36\2\u0479\u047a"+
		"\7\64\2\2\u047a\u047b\5:\36\2\u047b\u047d\3\2\2\2\u047c\u0478\3\2\2\2"+
		"\u047d\u047e\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481"+
		"\3\2\2\2\u0480\u0477\3\2\2\2\u0480\u0481\3\2\2\2\u04819\3\2\2\2\u0482"+
		"\u048b\7\u01ac\2\2\u0483\u0485\7\u01c4\2\2\u0484\u0483\3\2\2\2\u0485\u0486"+
		"\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u048b\3\2\2\2\u0488"+
		"\u048b\7\3\2\2\u0489\u048b\7\u01c2\2\2\u048a\u0482\3\2\2\2\u048a\u0484"+
		"\3\2\2\2\u048a\u0488\3\2\2\2\u048a\u0489\3\2\2\2\u048b;\3\2\2\2\u048c"+
		"\u048d\t\5\2\2\u048d=\3\2\2\2\u048e\u048f\t\5\2\2\u048f?\3\2\2\2\u0490"+
		"\u0491\t\5\2\2\u0491A\3\2\2\2\u0492\u0493\7\u0141\2\2\u0493\u049d\7\u0109"+
		"\2\2\u0494\u0498\7\u0141\2\2\u0495\u0496\7\u01ac\2\2\u0496\u0497\7\64"+
		"\2\2\u0497\u0499\7\u01ac\2\2\u0498\u0495\3\2\2\2\u0499\u049a\3\2\2\2\u049a"+
		"\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049d\3\2\2\2\u049c\u0492\3\2"+
		"\2\2\u049c\u0494\3\2\2\2\u049dC\3\2\2\2\u049e\u049f\7\u01a5\2\2\u049f"+
		"\u04a2\5\u0252\u012a\2\u04a0\u04a1\7\u00bf\2\2\u04a1\u04a3\5\u0148\u00a5"+
		"\2\u04a2\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a9\3\2\2\2\u04a4\u04a5"+
		"\7\n\2\2\u04a5\u04a7\7\u0101\2\2\u04a6\u04a8\7\u0113\2\2\u04a7\u04a6\3"+
		"\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\3\2\2\2\u04a9\u04a4\3\2\2\2\u04a9"+
		"\u04aa\3\2\2\2\u04aa\u04bc\3\2\2\2\u04ab\u04bd\5\u018c\u00c7\2\u04ac\u04ae"+
		"\t\6\2\2\u04ad\u04af\7\7\2\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af"+
		"\u04b0\3\2\2\2\u04b0\u04b2\5F$\2\u04b1\u04ac\3\2\2\2\u04b1\u04b2\3\2\2"+
		"\2\u04b2\u04b3\3\2\2\2\u04b3\u04bd\5\u018a\u00c6\2\u04b4\u04b6\t\6\2\2"+
		"\u04b5\u04b7\7\7\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8"+
		"\3\2\2\2\u04b8\u04ba\5F$\2\u04b9\u04bb\5\u018a\u00c6\2\u04ba\u04b9\3\2"+
		"\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04ab\3\2\2\2\u04bc"+
		"\u04b1\3\2\2\2\u04bc\u04b4\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04bf\3\2"+
		"\2\2\u04be\u04c0\7\u009d\2\2\u04bf\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0"+
		"E\3\2\2\2\u04c1\u04c3\5H%\2\u04c2\u04c4\t\7\2\2\u04c3\u04c2\3\2\2\2\u04c3"+
		"\u04c4\3\2\2\2\u04c4\u04c8\3\2\2\2\u04c5\u04c8\5\u02e0\u0171\2\u04c6\u04c8"+
		"\7\u0118\2\2\u04c7\u04c1\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c6\3\2\2"+
		"\2\u04c8G\3\2\2\2\u04c9\u04cc\5\u0354\u01ab\2\u04ca\u04cc\7\u01c2\2\2"+
		"\u04cb\u04c9\3\2\2\2\u04cb\u04ca\3\2\2\2\u04ccI\3\2\2\2\u04cd\u04ce\7"+
		"\u0194\2\2\u04ce\u04db\5Z.\2\u04cf\u04d1\7u\2\2\u04d0\u04d2\7\64\2\2\u04d1"+
		"\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d8\5V"+
		",\2\u04d4\u04d5\7\u010f\2\2\u04d5\u04d7\5V,\2\u04d6\u04d4\3\2\2\2\u04d7"+
		"\u04da\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04dc\3\2"+
		"\2\2\u04da\u04d8\3\2\2\2\u04db\u04cf\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc"+
		"\u04dd\3\2\2\2\u04dd\u04df\7\u00dc\2\2\u04de\u04e0\5N(\2\u04df\u04de\3"+
		"\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2"+
		"\u04e8\3\2\2\2\u04e3\u04e5\7\u01a2\2\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5"+
		"\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e7\7\u0121\2\2\u04e7\u04e9\5j\66"+
		"\2\u04e8\u04e4\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ef\3\2\2\2\u04ea\u04ec"+
		"\7\u0180\2\2\u04eb\u04ed\7\u00d1\2\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3"+
		"\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\5L\'\2\u04ef\u04ea\3\2\2\2\u04ef"+
		"\u04f0\3\2\2\2\u04f0\u04f2\3\2\2\2\u04f1\u04f3\5\u0188\u00c5\2\u04f2\u04f1"+
		"\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f5\3\2\2\2\u04f4\u04f6\7\u009c\2"+
		"\2\u04f5\u04f4\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6K\3\2\2\2\u04f7\u04f8"+
		"\5\u0352\u01aa\2\u04f8M\3\2\2\2\u04f9\u04ff\5R*\2\u04fa\u04fc\7v\2\2\u04fb"+
		"\u04fd\7\u00d1\2\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04fe"+
		"\3\2\2\2\u04fe\u0500\5T+\2\u04ff\u04fa\3\2\2\2\u04ff\u0500\3\2\2\2\u0500"+
		"\u0506\3\2\2\2\u0501\u0503\7c\2\2\u0502\u0504\7\u00d1\2\2\u0503\u0502"+
		"\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507\5P)\2\u0506"+
		"\u0501\3\2\2\2\u0506\u0507\3\2\2\2\u0507O\3\2\2\2\u0508\u0509\5\u0352"+
		"\u01aa\2\u0509Q\3\2\2\2\u050a\u050b\5\u0352\u01aa\2\u050bS\3\2\2\2\u050c"+
		"\u050d\5\u0352\u01aa\2\u050dU\3\2\2\2\u050e\u0510\7\t\2\2\u050f\u050e"+
		"\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\5X-\2\u0512"+
		"W\3\2\2\2\u0513\u0517\5\u0354\u01ab\2\u0514\u0517\7\3\2\2\u0515\u0517"+
		"\5\26\f\2\u0516\u0513\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0515\3\2\2\2"+
		"\u0517Y\3\2\2\2\u0518\u0519\5\u0354\u01ab\2\u0519[\3\2\2\2\u051a\u051b"+
		"\7\u0192\2\2\u051b\u0522\5\u0316\u018c\2\u051c\u0523\7\u0136\2\2\u051d"+
		"\u0523\7\u0137\2\2\u051e\u0520\7\t\2\2\u051f\u0521\7\u0137\2\2\u0520\u051f"+
		"\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u051c\3\2\2\2\u0522"+
		"\u051d\3\2\2\2\u0522\u051e\3\2\2\2\u0522\u0523\3\2\2\2\u0523]\3\2\2\2"+
		"\u0524\u0526\7\u0182\2\2\u0525\u0527\5\u0244\u0123\2\u0526\u0525\3\2\2"+
		"\2\u0527\u0528\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0529\3\2\2\2\u0529_"+
		"\3\2\2\2\u052a\u052c\7\u0177\2\2\u052b\u052d\7\u0128\2\2\u052c\u052b\3"+
		"\2\2\2\u052c\u052d\3\2\2\2\u052da\3\2\2\2\u052e\u0549\7\u0174\2\2\u052f"+
		"\u0531\5f\64\2\u0530\u052f\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0530\3\2"+
		"\2\2\u0532\u0533\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0538\7\u00bf\2\2\u0535"+
		"\u0536\5f\64\2\u0536\u0537\7\u00c3\2\2\u0537\u0539\3\2\2\2\u0538\u0535"+
		"\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053e\3\2\2\2\u053a\u053c\5\u0352\u01aa"+
		"\2\u053b\u053d\7\u0153\2\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d"+
		"\u053f\3\2\2\2\u053e\u053a\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u053e\3\2"+
		"\2\2\u0540\u0541\3\2\2\2\u0541\u054a\3\2\2\2\u0542\u0543\t\b\2\2\u0543"+
		"\u0544\5d\63\2\u0544\u0545\7\u00bf\2\2\u0545\u0547\5d\63\2\u0546\u0548"+
		"\7\u0153\2\2\u0547\u0546\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u054a\3\2\2"+
		"\2\u0549\u0530\3\2\2\2\u0549\u0542\3\2\2\2\u054a\u054c\3\2\2\2\u054b\u054d"+
		"\5\u0186\u00c4\2\u054c\u054b\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3"+
		"\2\2\2\u054e\u0550\7\u009b\2\2\u054f\u054e\3\2\2\2\u054f\u0550\3\2\2\2"+
		"\u0550c\3\2\2\2\u0551\u0552\5\u02ac\u0157\2\u0552e\3\2\2\2\u0553\u0556"+
		"\7\u01c2\2\2\u0554\u0556\5\u0354\u01ab\2\u0555\u0553\3\2\2\2\u0555\u0554"+
		"\3\2\2\2\u0556g\3\2\2\2\u0557\u0565\7\u0173\2\2\u0558\u055a\5p9\2\u0559"+
		"\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u0559\3\2\2\2\u055b\u055c\3\2"+
		"\2\2\u055c\u055d\3\2\2\2\u055d\u055f\7u\2\2\u055e\u0560\7\64\2\2\u055f"+
		"\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u0564\7\u0165"+
		"\2\2\u0562\u0564\5n8\2\u0563\u0561\3\2\2\2\u0563\u0562\3\2\2\2\u0564\u0566"+
		"\3\2\2\2\u0565\u0559\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0565\3\2\2\2\u0567"+
		"\u0568\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\7\u00dc\2\2\u056a\u0570"+
		"\5l\67\2\u056b\u056d\7\u01a2\2\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2"+
		"\2\u056d\u056e\3\2\2\2\u056e\u056f\7\u0121\2\2\u056f\u0571\5j\66\2\u0570"+
		"\u056c\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0574\5\u0188"+
		"\u00c5\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\3\2\2\2\u0575"+
		"\u0577\7\u009a\2\2\u0576\u0575\3\2\2\2\u0576\u0577\3\2\2\2\u0577i\3\2"+
		"\2\2\u0578\u0579\5\u0352\u01aa\2\u0579k\3\2\2\2\u057a\u057b\5\u0352\u01aa"+
		"\2\u057bm\3\2\2\2\u057c\u057d\5p9\2\u057do\3\2\2\2\u057e\u0582\5\u02ac"+
		"\u0157\2\u057f\u0582\7\3\2\2\u0580\u0582\5\32\16\2\u0581\u057e\3\2\2\2"+
		"\u0581\u057f\3\2\2\2\u0581\u0580\3\2\2\2\u0582q\3\2\2\2\u0583\u0586\7"+
		"\u0172\2\2\u0584\u0587\7\u0154\2\2\u0585\u0587\5t;\2\u0586\u0584\3\2\2"+
		"\2\u0586\u0585\3\2\2\2\u0587s\3\2\2\2\u0588\u058c\7\3\2\2\u0589\u058c"+
		"\7\u01c2\2\2\u058a\u058c\5\26\f\2\u058b\u0588\3\2\2\2\u058b\u0589\3\2"+
		"\2\2\u058b\u058a\3\2\2\2\u058cu\3\2\2\2\u058d\u058e\7\u0170\2\2\u058e"+
		"\u0593\5\u0316\u018c\2\u058f\u0590\7\u00e3\2\2\u0590\u0591\5\u0350\u01a9"+
		"\2\u0591\u0592\5x=\2\u0592\u0594\3\2\2\2\u0593\u058f\3\2\2\2\u0593\u0594"+
		"\3\2\2\2\u0594\u0596\3\2\2\2\u0595\u0597\5\u00bc_\2\u0596\u0595\3\2\2"+
		"\2\u0596\u0597\3\2\2\2\u0597\u0599\3\2\2\2\u0598\u059a\5\u018c\u00c7\2"+
		"\u0599\u0598\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059c\3\2\2\2\u059b\u059d"+
		"\7\u0099\2\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2\u059dw\3\2\2\2\u059e"+
		"\u059f\5\u02ac\u0157\2\u059fy\3\2\2\2\u05a0\u05a3\5|?\2\u05a1\u05a3\5"+
		"~@\2\u05a2\u05a0\3\2\2\2\u05a2\u05a1\3\2\2\2\u05a3{\3\2\2\2\u05a4\u05a5"+
		"\7\u0166\2\2\u05a5\u05a7\5\u0316\u018c\2\u05a6\u05a8\5\u0084C\2\u05a7"+
		"\u05a6\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2"+
		"\2\2\u05aa\u05b5\3\2\2\2\u05ab\u05ad\7\u01a2\2\2\u05ac\u05ab\3\2\2\2\u05ac"+
		"\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b0\7\u0082\2\2\u05af\u05b1"+
		"\7\u00d1\2\2\u05b0\u05af\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b3\3\2\2"+
		"\2\u05b2\u05b4\7\u0110\2\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4"+
		"\u05b6\3\2\2\2\u05b5\u05ac\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05bf\3\2"+
		"\2\2\u05b7\u05b9\7B\2\2\u05b8\u05b7\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9"+
		"\u05ba\3\2\2\2\u05ba\u05bc\7\u0160\2\2\u05bb\u05bd\7\u00de\2\2\u05bc\u05bb"+
		"\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c0\5\u02a2\u0152"+
		"\2\u05bf\u05b8\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05cb\3\2\2\2\u05c1\u05c2"+
		"\7\u00d8\2\2\u05c2\u05ca\5\u0082B\2\u05c3\u05c5\7\u019b\2\2\u05c4\u05c6"+
		"\5\u0316\u018c\2\u05c5\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c5\3"+
		"\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05c1\3\2\2\2\u05c9"+
		"\u05c3\3\2\2\2\u05ca\u05cc\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cb\u05cc\3\2"+
		"\2\2\u05cc\u05d7\3\2\2\2\u05cd\u05ce\7\u0114\2\2\u05ce\u05d6\5\u0082B"+
		"\2\u05cf\u05d1\7\u00c3\2\2\u05d0\u05d2\5\u0316\u018c\2\u05d1\u05d0\3\2"+
		"\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4"+
		"\u05d6\3\2\2\2\u05d5\u05cd\3\2\2\2\u05d5\u05cf\3\2\2\2\u05d6\u05d8\3\2"+
		"\2\2\u05d7\u05d5\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8}\3\2\2\2\u05d9\u05da"+
		"\7\u0166\2\2\u05da\u05de\5\u0080A\2\u05db\u05dd\5\u0084C\2\u05dc\u05db"+
		"\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df"+
		"\u05eb\3\2\2\2\u05e0\u05de\3\2\2\2\u05e1\u05e3\7\u01a2\2\2\u05e2\u05e1"+
		"\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e6\7\u0082\2"+
		"\2\u05e5\u05e7\7\u00d1\2\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7"+
		"\u05e9\3\2\2\2\u05e8\u05ea\7\u0110\2\2\u05e9\u05e8\3\2\2\2\u05e9\u05ea"+
		"\3\2\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05e2\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec"+
		"\u05f5\3\2\2\2\u05ed\u05ef\7B\2\2\u05ee\u05ed\3\2\2\2\u05ee\u05ef\3\2"+
		"\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\7\u0160\2\2\u05f1\u05f3\7\u00de\2"+
		"\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f6"+
		"\5\u02a2\u0152\2\u05f5\u05ee\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\177\3\2"+
		"\2\2\u05f7\u05f8\5\u02ac\u0157\2\u05f8\u0081\3\2\2\2\u05f9\u05fb\7\u012b"+
		"\2\2\u05fa\u05fc\7\u00de\2\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc"+
		"\u05fd\3\2\2\2\u05fd\u05fe\5\u00c2b\2\u05fe\u0083\3\2\2\2\u05ff\u0601"+
		"\7\u010b\2\2\u0600\u05ff\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2"+
		"\2\u0602\u0604\t\t\2\2\u0603\u0605\7\u00e3\2\2\u0604\u0603\3\2\2\2\u0604"+
		"\u0605\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u060a\5\u0086D\2\u0607\u0609"+
		"\5\u0086D\2\u0608\u0607\3\2\2\2\u0609\u060c\3\2\2\2\u060a\u0608\3\2\2"+
		"\2\u060a\u060b\3\2\2\2\u060b\u0085\3\2\2\2\u060c\u060a\3\2\2\2\u060d\u060e"+
		"\5\u02ac\u0157\2\u060e\u0087\3\2\2\2\u060f\u0616\5\u008aF\2\u0610\u0616"+
		"\5\u008cG\2\u0611\u0616\5\u008eH\2\u0612\u0616\5\u0090I\2\u0613\u0616"+
		"\5\u0092J\2\u0614\u0616\5\u0094K\2\u0615\u060f\3\2\2\2\u0615\u0610\3\2"+
		"\2\2\u0615\u0611\3\2\2\2\u0615\u0612\3\2\2\2\u0615\u0613\3\2\2\2\u0615"+
		"\u0614\3\2\2\2\u0616\u0089\3\2\2\2\u0617\u0619\7\u0162\2\2\u0618\u061a"+
		"\5\u0352\u01aa\2\u0619\u0618\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u0619\3"+
		"\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e\7\u018a\2\2"+
		"\u061e\u061f\5\u0098M\2\u061f\u008b\3\2\2\2\u0620\u0622\7\u0162\2\2\u0621"+
		"\u0623\5\u0352\u01aa\2\u0622\u0621\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0622"+
		"\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u0627\t\n\2\2\u0627"+
		"\u0628\7\64\2\2\u0628\u0629\5\u0096L\2\u0629\u008d\3\2\2\2\u062a\u062c"+
		"\7\u0162\2\2\u062b\u062d\5\u0352\u01aa\2\u062c\u062b\3\2\2\2\u062d\u062e"+
		"\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\3\2\2\2\u0630"+
		"\u0631\7\u018a\2\2\u0631\u0632\7\u018d\2\2\u0632\u008f\3\2\2\2\u0633\u0638"+
		"\7\u0162\2\2\u0634\u0635\5\u0352\u01aa\2\u0635\u0636\7\u018a\2\2\u0636"+
		"\u0637\t\13\2\2\u0637\u0639\3\2\2\2\u0638\u0634\3\2\2\2\u0639\u063a\3"+
		"\2\2\2\u063a\u0638\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u0091\3\2\2\2\u063c"+
		"\u063e\7\u0162\2\2\u063d\u063f\5\u0352\u01aa\2\u063e\u063d\3\2\2\2\u063f"+
		"\u0640\3\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0642\3\2"+
		"\2\2\u0642\u0643\7\u018a\2\2\u0643\u0645\7\u013a\2\2\u0644\u0646\7\u0108"+
		"\2\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\3\2\2\2\u0647"+
		"\u0648\5\u0352\u01aa\2\u0648\u0093\3\2\2\2\u0649\u064a\7\u0162\2\2\u064a"+
		"\u064b\5\u0352\u01aa\2\u064b\u064c\7\u018a\2\2\u064c\u064d\t\f\2\2\u064d"+
		"\u0095\3\2\2\2\u064e\u0651\5\u0354\u01ab\2\u064f\u0651\7\u01c2\2\2\u0650"+
		"\u064e\3\2\2\2\u0650\u064f\3\2\2\2\u0651\u0097\3\2\2\2\u0652\u0655\5\u0354"+
		"\u01ab\2\u0653\u0655\7\u01c2\2\2\u0654\u0652\3\2\2\2\u0654\u0653\3\2\2"+
		"\2\u0655\u0099\3\2\2\2\u0656\u0657\7\u0158\2\2\u0657\u065a\5\u00a4S\2"+
		"\u0658\u0659\7\u019e\2\2\u0659\u065b\5\u00a2R\2\u065a\u0658\3\2\2\2\u065a"+
		"\u065b\3\2\2\2\u065b\u065d\3\2\2\2\u065c\u065e\5\u01b8\u00dd\2\u065d\u065c"+
		"\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u067e\3\2\2\2\u065f\u0660\7\u01a0\2"+
		"\2\u0660\u0662\5\u0344\u01a3\2\u0661\u0663\5\66\34\2\u0662\u0661\3\2\2"+
		"\2\u0663\u0664\3\2\2\2\u0664\u0662\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u0667"+
		"\3\2\2\2\u0666\u065f\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0666\3\2\2\2\u0668"+
		"\u0669\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\7\u0098\2\2\u066b\u067f"+
		"\3\2\2\2\u066c\u066d\7\u01a0\2\2\u066d\u0678\5\u0344\u01a3\2\u066e\u0670"+
		"\5\66\34\2\u066f\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u066f\3\2\2\2"+
		"\u0671\u0672\3\2\2\2\u0672\u0674\3\2\2\2\u0673\u0675\7\u0098\2\2\u0674"+
		"\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0679\3\2\2\2\u0676\u0677\7\u0100"+
		"\2\2\u0677\u0679\7\u015e\2\2\u0678\u066f\3\2\2\2\u0678\u0676\3\2\2\2\u0679"+
		"\u067b\3\2\2\2\u067a\u066c\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067a\3\2"+
		"\2\2\u067c\u067d\3\2\2\2\u067d\u067f\3\2\2\2\u067e\u0666\3\2\2\2\u067e"+
		"\u067a\3\2\2\2\u067f\u069c\3\2\2\2\u0680\u0681\7\u0158\2\2\u0681\u0682"+
		"\7\t\2\2\u0682\u0684\5\u00a4S\2\u0683\u0685\5\u01b8\u00dd\2\u0684\u0683"+
		"\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\7\u01a0\2"+
		"\2\u0687\u068c\5\u009cO\2\u0688\u0689\7\25\2\2\u0689\u068b\5\u009cO\2"+
		"\u068a\u0688\3\2\2\2\u068b\u068e\3\2\2\2\u068c\u068a\3\2\2\2\u068c\u068d"+
		"\3\2\2\2\u068d\u0699\3\2\2\2\u068e\u068c\3\2\2\2\u068f\u0691\5\66\34\2"+
		"\u0690\u068f\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0693"+
		"\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0696\7\u0098\2\2\u0695\u0694\3\2\2"+
		"\2\u0695\u0696\3\2\2\2\u0696\u069a\3\2\2\2\u0697\u0698\7\u0100\2\2\u0698"+
		"\u069a\7\u015e\2\2\u0699\u0690\3\2\2\2\u0699\u0697\3\2\2\2\u069a\u069c"+
		"\3\2\2\2\u069b\u0656\3\2\2\2\u069b\u0680\3\2\2\2\u069c\u009b\3\2\2\2\u069d"+
		"\u06a9\5\u00a0Q\2\u069e\u06a0\7\u00de\2\2\u069f\u069e\3\2\2\2\u069f\u06a0"+
		"\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3\7\u00a4\2\2\u06a2\u06a4\7\u018a"+
		"\2\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06aa\3\2\2\2\u06a5"+
		"\u06a7\7\u00de\2\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8"+
		"\3\2\2\2\u06a8\u06aa\7\u01b4\2\2\u06a9\u069f\3\2\2\2\u06a9\u06a6\3\2\2"+
		"\2\u06aa\u06ab\3\2\2\2\u06ab\u06ac\5\u009eP\2\u06ac\u06af\3\2\2\2\u06ad"+
		"\u06af\5\u0328\u0195\2\u06ae\u069d\3\2\2\2\u06ae\u06ad\3\2\2\2\u06af\u009d"+
		"\3\2\2\2\u06b0\u06b1\5\u033c\u019f\2\u06b1\u009f\3\2\2\2\u06b2\u06b3\5"+
		"\u0352\u01aa\2\u06b3\u00a1\3\2\2\2\u06b4\u06b5\5\u0354\u01ab\2\u06b5\u00a3"+
		"\3\2\2\2\u06b6\u06b7\5\u02ac\u0157\2\u06b7\u00a5\3\2\2\2\u06b8\u06b9\7"+
		"\u014e\2\2\u06b9\u06bc\5\u00a8U\2\u06ba\u06bb\7\u00bf\2\2\u06bb\u06bd"+
		"\5\u0148\u00a5\2\u06bc\u06ba\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06c3\3"+
		"\2\2\2\u06be\u06bf\7\n\2\2\u06bf\u06c1\7\u0101\2\2\u06c0\u06c2\7\u0113"+
		"\2\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c4\3\2\2\2\u06c3"+
		"\u06be\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5\u06c7\5\u018c"+
		"\u00c7\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c9\3\2\2\2\u06c8"+
		"\u06ca\7\u0097\2\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u00a7"+
		"\3\2\2\2\u06cb\u06cc\5\u02ac\u0157\2\u06cc\u00a9\3\2\2\2\u06cd\u06ce\7"+
		"\u014a\2\2\u06ce\u06d0\5\u00acW\2\u06cf\u06d1\7\u0136\2\2\u06d0\u06cf"+
		"\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d4\3\2\2\2\u06d2\u06d3\7\u00dc\2"+
		"\2\u06d3\u06d5\5\u01b4\u00db\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2"+
		"\u06d5\u06d6\3\2\2\2\u06d6\u06d9\5\u01b8\u00dd\2\u06d7\u06d8\7\u0102\2"+
		"\2\u06d8\u06da\5\u01b8\u00dd\2\u06d9\u06d7\3\2\2\2\u06d9\u06da\3\2\2\2"+
		"\u06da\u06dc\3\2\2\2\u06db\u06dd\7\u0096\2\2\u06dc\u06db\3\2\2\2\u06dc"+
		"\u06dd\3\2\2\2\u06dd\u00ab\3\2\2\2\u06de\u06df\7\u01c4\2\2\u06df\u00ad"+
		"\3\2\2\2\u06e0\u06e1\7\u013d\2\2\u06e1\u06e4\5\u00b2Z\2\u06e2\u06e3\7"+
		"\u00bf\2\2\u06e3\u06e5\5\u00b0Y\2\u06e4\u06e2\3\2\2\2\u06e4\u06e5\3\2"+
		"\2\2\u06e5\u00af\3\2\2\2\u06e6\u06e7\5\u0354\u01ab\2\u06e7\u00b1\3\2\2"+
		"\2\u06e8\u06e9\5\u02ac\u0157\2\u06e9\u00b3\3\2\2\2\u06ea\u06eb\7\u0136"+
		"\2\2\u06eb\u06ec\7w\2\2\u06ec\u06f2\5\u00b8]\2\u06ed\u06ef\7\u018e\2\2"+
		"\u06ee\u06f0\7\u00de\2\2\u06ef\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0"+
		"\u06f1\3\2\2\2\u06f1\u06f3\5\u00b6\\\2\u06f2\u06ed\3\2\2\2\u06f2\u06f3"+
		"\3\2\2\2\u06f3\u06f8\3\2\2\2\u06f4\u06f6\7\u00d1\2\2\u06f5\u06f4\3\2\2"+
		"\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f9\7|\2\2\u06f8\u06f5"+
		"\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u00b5\3\2\2\2\u06fa\u06fb\t\5\2\2\u06fb"+
		"\u00b7\3\2\2\2\u06fc\u06fd\t\5\2\2\u06fd\u00b9\3\2\2\2\u06fe\u06ff\7\u0134"+
		"\2\2\u06ff\u0701\5\u0316\u018c\2\u0700\u0702\t\r\2\2\u0701\u0700\3\2\2"+
		"\2\u0701\u0702\3\2\2\2\u0702\u0704\3\2\2\2\u0703\u0705\7\u0136\2\2\u0704"+
		"\u0703\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0708\3\2\2\2\u0706\u0707\7\u00dc"+
		"\2\2\u0707\u0709\5\u01b4\u00db\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2"+
		"\2\u0709\u071a\3\2\2\2\u070a\u0710\5\u00be`\2\u070b\u070d\7\u00e3\2\2"+
		"\u070c\u070e\7\u00de\2\2\u070d\u070c\3\2\2\2\u070d\u070e\3\2\2\2\u070e"+
		"\u070f\3\2\2\2\u070f\u0711\5\u01fa\u00fe\2\u0710\u070b\3\2\2\2\u0710\u0711"+
		"\3\2\2\2\u0711\u071b\3\2\2\2\u0712\u0714\7\u00e3\2\2\u0713\u0715\7\u00de"+
		"\2\2\u0714\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0716\3\2\2\2\u0716"+
		"\u0718\5\u01fa\u00fe\2\u0717\u0719\5\u00be`\2\u0718\u0717\3\2\2\2\u0718"+
		"\u0719\3\2\2\2\u0719\u071b\3\2\2\2\u071a\u070a\3\2\2\2\u071a\u0712\3\2"+
		"\2\2\u071a\u071b\3\2\2\2\u071b\u0720\3\2\2\2\u071c\u071f\5\u0184\u00c3"+
		"\2\u071d\u071f\5\u018c\u00c7\2\u071e\u071c\3\2\2\2\u071e\u071d\3\2\2\2"+
		"\u071f\u0721\3\2\2\2\u0720\u071e\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0723"+
		"\3\2\2\2\u0722\u0724\7\u0095\2\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2"+
		"\2\u0724\u00bb\3\2\2\2\u0725\u0727\7\u013b\2\2\u0726\u0728\7\u0108\2\2"+
		"\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u072a\3\2\2\2\u0729\u072b"+
		"\7\u00f0\2\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u0736\3\2\2"+
		"\2\u072c\u0733\7\n\2\2\u072d\u0734\7\u0197\2\2\u072e\u0734\7\u0135\2\2"+
		"\u072f\u0731\7\u0101\2\2\u0730\u0732\7\u0113\2\2\u0731\u0730\3\2\2\2\u0731"+
		"\u0732\3\2\2\2\u0732\u0734\3\2\2\2\u0733\u072d\3\2\2\2\u0733\u072e\3\2"+
		"\2\2\u0733\u072f\3\2\2\2\u0734\u0736\3\2\2\2\u0735\u0725\3\2\2\2\u0735"+
		"\u072c\3\2\2\2\u0736\u00bd\3\2\2\2\u0737\u0739\7\u01a2\2\2\u0738\u0737"+
		"\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073b\3\2\2\2\u073a";
	private static final String _serializedATNSegment1 =
		"\u073c\7\u0101\2\2\u073b\u073a\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073d"+
		"\3\2\2\2\u073d\u0740\7\u00f0\2\2\u073e\u0740\5\u00bc_\2\u073f\u0738\3"+
		"\2\2\2\u073f\u073e\3\2\2\2\u0740\u00bf\3\2\2\2\u0741\u0743\7\u011b\2\2"+
		"\u0742\u0744\5\u00c2b\2\u0743\u0742\3\2\2\2\u0743\u0744\3\2\2\2\u0744"+
		"\u074a\3\2\2\2\u0745\u0749\5\u00c4c\2\u0746\u0749\5\u00c8e\2\u0747\u0749"+
		"\5\u00caf\2\u0748\u0745\3\2\2\2\u0748\u0746\3\2\2\2\u0748\u0747\3\2\2"+
		"\2\u0749\u074b\3\2\2\2\u074a\u0748\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u0753"+
		"\3\2\2\2\u074c\u074e\5\66\34\2\u074d\u074c\3\2\2\2\u074e\u074f\3\2\2\2"+
		"\u074f\u074d\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752"+
		"\7\u0094\2\2\u0752\u0754\3\2\2\2\u0753\u074d\3\2\2\2\u0753\u0754\3\2\2"+
		"\2\u0754\u00c1\3\2\2\2\u0755\u0758\5\u00e2r\2\u0756\u0757\t\16\2\2\u0757"+
		"\u0759\5\u00e4s\2\u0758\u0756\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u00c3"+
		"\3\2\2\2\u075a\u075d\5\u0354\u01ab\2\u075b\u075d\7\u01c2\2\2\u075c\u075a"+
		"\3\2\2\2\u075c\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u075f\7\u0189\2"+
		"\2\u075f\u00c5\3\2\2\2\u0760\u0762\7\u01a2\2\2\u0761\u0760\3\2\2\2\u0761"+
		"\u0762\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0764\7\u0183\2\2\u0764\u0765"+
		"\t\6\2\2\u0765\u00c7\3\2\2\2\u0766\u0768\5\u00c6d\2\u0767\u0766\3\2\2"+
		"\2\u0767\u0768\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076a\7\u0195\2\2\u076a"+
		"\u076b\5\u0344\u01a3\2\u076b\u00c9\3\2\2\2\u076c\u076e\5\u00c6d\2\u076d"+
		"\u076c\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0770\7\u019e"+
		"\2\2\u0770\u0771\5\u00ccg\2\u0771\u0772\7\u0195\2\2\u0772\u077a\5\u0344"+
		"\u01a3\2\u0773\u0774\7\b\2\2\u0774\u0775\5\u00ccg\2\u0775\u0776\7\u0195"+
		"\2\2\u0776\u0777\5\u0344\u01a3\2\u0777\u0779\3\2\2\2\u0778\u0773\3\2\2"+
		"\2\u0779\u077c\3\2\2\2\u077a\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u00cb"+
		"\3\2\2\2\u077c\u077a\3\2\2\2\u077d\u077e\5\u00d2j\2\u077e\u077f\7\u00bf"+
		"\2\2\u077f\u0780\5\u00d0i\2\u0780\u0781\7\64\2\2\u0781\u0782\5\u00ceh"+
		"\2\u0782\u00cd\3\2\2\2\u0783\u0786\5\u0354\u01ab\2\u0784\u0786\7\u01c2"+
		"\2\2\u0785\u0783\3\2\2\2\u0785\u0784\3\2\2\2\u0786\u00cf\3\2\2\2\u0787"+
		"\u078a\5\u0354\u01ab\2\u0788\u078a\7\u01c2\2\2\u0789\u0787\3\2\2\2\u0789"+
		"\u0788\3\2\2\2\u078a\u00d1\3\2\2\2\u078b\u078c\5\u0352\u01aa\2\u078c\u00d3"+
		"\3\2\2\2\u078d\u078f\7\u010c\2\2\u078e\u0790\5\u00d6l\2\u078f\u078e\3"+
		"\2\2\2\u0790\u0791\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792\3\2\2\2\u0792"+
		"\u07a6\3\2\2\2\u0793\u07a1\7\u010c\2\2\u0794\u079d\t\17\2\2\u0795\u079b"+
		"\5\u0316\u018c\2\u0796\u0798\7\u01a2\2\2\u0797\u0796\3\2\2\2\u0797\u0798"+
		"\3\2\2\2\u0798\u0799\3\2\2\2\u0799\u079a\7\u0101\2\2\u079a\u079c\7\u014d"+
		"\2\2\u079b\u0797\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079e\3\2\2\2\u079d"+
		"\u0795\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2"+
		"\2\2\u07a0\u07a2\3\2\2\2\u07a1\u0794\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3"+
		"\u07a1\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a6\3\2\2\2\u07a5\u078d\3\2"+
		"\2\2\u07a5\u0793\3\2\2\2\u07a6\u00d5\3\2\2\2\u07a7\u07b3\t\20\2\2\u07a8"+
		"\u07ae\5\u0316\u018c\2\u07a9\u07ab\7\u01a2\2\2\u07aa\u07a9\3\2\2\2\u07aa"+
		"\u07ab\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\7\u0101\2\2\u07ad\u07af"+
		"\7\u014d\2\2\u07ae\u07aa\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\3\2\2"+
		"\2\u07b0\u07b2\5\u00d8m\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2"+
		"\u07b4\3\2\2\2\u07b3\u07a8\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b3\3\2"+
		"\2\2\u07b5\u07b6\3\2\2\2\u07b6\u00d7\3\2\2\2\u07b7\u07b9\7\u01a2\2\2\u07b8"+
		"\u07b7\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07e4\7\u00f0"+
		"\2\2\u07bb\u07e1\7\n\2\2\u07bc\u07be\7\u0101\2\2\u07bd\u07bf\7\u0113\2"+
		"\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07e2\3\2\2\2\u07c0\u07e2"+
		"\7\t\2\2\u07c1\u07c3\7\u0135\2\2\u07c2\u07c4\7\u01a6\2\2\u07c3\u07c2\3"+
		"\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07c6\3\2\2\2\u07c5\u07c7\7\u0197\2\2"+
		"\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07e0\3\2\2\2\u07c8\u07c9"+
		"\7\u0135\2\2\u07c9\u07ca\7\u0197\2\2\u07ca\u07e0\7\u01a6\2\2\u07cb\u07cd"+
		"\7\u01a6\2\2\u07cc\u07ce\7\u0135\2\2\u07cd\u07cc\3\2\2\2\u07cd\u07ce\3"+
		"\2\2\2\u07ce\u07d0\3\2\2\2\u07cf\u07d1\7\u0197\2\2\u07d0\u07cf\3\2\2\2"+
		"\u07d0\u07d1\3\2\2\2\u07d1\u07e0\3\2\2\2\u07d2\u07d3\7\u01a6\2\2\u07d3"+
		"\u07d4\7\u0197\2\2\u07d4\u07e0\7\u0135\2\2\u07d5\u07d7\7\u0197\2\2\u07d6"+
		"\u07d8\7\u0135\2\2\u07d7\u07d6\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07da"+
		"\3\2\2\2\u07d9\u07db\7\u01a6\2\2\u07da\u07d9\3\2\2\2\u07da\u07db\3\2\2"+
		"\2\u07db\u07e0\3\2\2\2\u07dc\u07dd\7\u0197\2\2\u07dd\u07de\7\u01a6\2\2"+
		"\u07de\u07e0\7\u0135\2\2\u07df\u07c1\3\2\2\2\u07df\u07c8\3\2\2\2\u07df"+
		"\u07cb\3\2\2\2\u07df\u07d2\3\2\2\2\u07df\u07d5\3\2\2\2\u07df\u07dc\3\2"+
		"\2\2\u07e0\u07e2\3\2\2\2\u07e1\u07bc\3\2\2\2\u07e1\u07c0\3\2\2\2\u07e1"+
		"\u07df\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07b8\3\2\2\2\u07e3\u07bb\3\2"+
		"\2\2\u07e4\u00d9\3\2\2\2\u07e5\u07e6\7\u00fd\2\2\u07e6\u07e7\5\u00dco"+
		"\2\u07e7\u07eb\7\64\2\2\u07e8\u07e9\5\u00dco\2\u07e9\u07ea\7\u00c3\2\2"+
		"\u07ea\u07ec\3\2\2\2\u07eb\u07e8\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07f1"+
		"\3\2\2\2\u07ed\u07ef\5\u0352\u01aa\2\u07ee\u07f0\7\u0153\2\2\u07ef\u07ee"+
		"\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f2\3\2\2\2\u07f1\u07ed\3\2\2\2\u07f2"+
		"\u07f3\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6\3\2"+
		"\2\2\u07f5\u07f7\5\u0186\u00c4\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7\3\2\2"+
		"\2\u07f7\u07f9\3\2\2\2\u07f8\u07fa\7\u0092\2\2\u07f9\u07f8\3\2\2\2\u07f9"+
		"\u07fa\3\2\2\2\u07fa\u00db\3\2\2\2\u07fb\u07fe\5\u0354\u01ab\2\u07fc\u07fe"+
		"\7\u01c2\2\2\u07fd\u07fb\3\2\2\2\u07fd\u07fc\3\2\2\2\u07fe\u00dd\3\2\2"+
		"\2\u07ff\u0800\7\u00f8\2\2\u0800\u0802\5\u00ecw\2\u0801\u0803\5\u00ea"+
		"v\2\u0802\u0801\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0802\3\2\2\2\u0804"+
		"\u0805\3\2\2\2\u0805\u080e\3\2\2\2\u0806\u0808\7B\2\2\u0807\u0806\3\2"+
		"\2\2\u0807\u0808\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080b\7\u0160\2\2\u080a"+
		"\u080c\7\u00de\2\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d"+
		"\3\2\2\2\u080d\u080f\5\u02a2\u0152\2\u080e\u0807\3\2\2\2\u080e\u080f\3"+
		"\2\2\2\u080f\u0810\3\2\2\2\u0810\u0812\7\u019b\2\2\u0811\u0813\5\u00e8"+
		"u\2\u0812\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0812\3\2\2\2\u0814"+
		"\u0815\3\2\2\2\u0815\u0818\3\2\2\2\u0816\u0819\5\u00e0q\2\u0817\u0819"+
		"\5\u00e6t\2\u0818\u0816\3\2\2\2\u0818\u0817\3\2\2\2\u0819\u00df\3\2\2"+
		"\2\u081a\u081b\7\u0114\2\2\u081b\u081d\7\u012b\2\2\u081c\u081e\7\u00de"+
		"\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2\2\2\u081f"+
		"\u0820\5\u00c2b\2\u0820\u00e1\3\2\2\2\u0821\u0822\7\u01c4\2\2\u0822\u00e3"+
		"\3\2\2\2\u0823\u0824\7\u01c4\2\2\u0824\u00e5\3\2\2\2\u0825\u0826\7\u00c3"+
		"\2\2\u0826\u0827\5\u0316\u018c\2\u0827\u00e7\3\2\2\2\u0828\u0829\7\u01c4"+
		"\2\2\u0829\u00e9\3\2\2\2\u082a\u082c\7\u010b\2\2\u082b\u082a\3\2\2\2\u082b"+
		"\u082c\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082f\t\t\2\2\u082e\u0830\7\u00e3"+
		"\2\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0832\3\2\2\2\u0831"+
		"\u0833\5\u00eex\2\u0832\u0831\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0832"+
		"\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u00eb\3\2\2\2\u0836\u0837\7\u01c4\2"+
		"\2\u0837\u00ed\3\2\2\2\u0838\u0839\5\u02ac\u0157\2\u0839\u00ef\3\2\2\2"+
		"\u083a\u083b\7\u00da\2\2\u083b\u0842\5\u0112\u008a\2\u083c\u083e\5\u0102"+
		"\u0082\2\u083d\u083f\5\u00f8}\2\u083e\u083d\3\2\2\2\u083e\u083f\3\2\2"+
		"\2\u083f\u0843\3\2\2\2\u0840\u0843\5\u00f8}\2\u0841\u0843\5\u00f2z\2\u0842"+
		"\u083c\3\2\2\2\u0842\u0840\3\2\2\2\u0842\u0841\3\2\2\2\u0843\u00f1\3\2"+
		"\2\2\u0844\u0845\7_\2\2\u0845\u0846\5\u00f6|\2\u0846\u0847\7\u018a\2\2"+
		"\u0847\u084b\5\u00f4{\2\u0848\u084a\5\u0108\u0085\2\u0849\u0848\3\2\2"+
		"\2\u084a\u084d\3\2\2\2\u084b\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u00f3"+
		"\3\2\2\2\u084d\u084b\3\2\2\2\u084e\u084f\5\u010c\u0087\2\u084f\u00f5\3"+
		"\2\2\2\u0850\u0851\5\u010c\u0087\2\u0851\u00f7\3\2\2\2\u0852\u0857\7\u0142"+
		"\2\2\u0853\u0856\5\u00fe\u0080\2\u0854\u0856\5\u00fa~\2\u0855\u0853\3"+
		"\2\2\2\u0855\u0854\3\2\2\2\u0856\u0858\3\2\2\2\u0857\u0855\3\2\2\2\u0858"+
		"\u0859\3\2\2\2\u0859\u0857\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u00f9\3\2"+
		"\2\2\u085b\u0865\t\21\2\2\u085c\u085d\5\u010c\u0087\2\u085d\u085e\7\64"+
		"\2\2\u085e\u0862\5\u00fc\177\2\u085f\u0861\5\u0108\u0085\2\u0860\u085f"+
		"\3\2\2\2\u0861\u0864\3\2\2\2\u0862\u0860\3\2\2\2\u0862\u0863\3\2\2\2\u0863"+
		"\u0866\3\2\2\2\u0864\u0862\3\2\2\2\u0865\u085c\3\2\2\2\u0866\u0867\3\2"+
		"\2\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u00fb\3\2\2\2\u0869"+
		"\u086a\5\u010c\u0087\2\u086a\u00fd\3\2\2\2\u086b\u086c\7<\2\2\u086c\u086d"+
		"\7\64\2\2\u086d\u0871\5\u0100\u0081\2\u086e\u0870\5\u0108\u0085\2\u086f"+
		"\u086e\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871\u0872\3\2"+
		"\2\2\u0872\u00ff\3\2\2\2\u0873\u0871\3\2\2\2\u0874\u0875\5\u010c\u0087"+
		"\2\u0875\u0101\3\2\2\2\u0876\u0878\7\u0180\2\2\u0877\u0879\5\u0104\u0083"+
		"\2\u0878\u0877\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u0878\3\2\2\2\u087a\u087b"+
		"\3\2\2\2\u087b\u0103\3\2\2\2\u087c\u087d\5\u0110\u0089\2\u087d\u0882\7"+
		"\u00bd\2\2\u087e\u0881\5\u0106\u0084\2\u087f\u0881\5\u010a\u0086\2\u0880"+
		"\u087e\3\2\2\2\u0880\u087f\3\2\2\2\u0881\u0883\3\2\2\2\u0882\u0880\3\2"+
		"\2\2\u0883\u0884\3\2\2\2\u0884\u0882\3\2\2\2\u0884\u0885\3\2\2\2\u0885"+
		"\u0105\3\2\2\2\u0886\u088a\7<\2\2\u0887\u0889\5\u0108\u0085\2\u0888\u0887"+
		"\3\2\2\2\u0889\u088c\3\2\2\2\u088a\u0888\3\2\2\2\u088a\u088b\3\2\2\2\u088b"+
		"\u0107\3\2\2\2\u088c\u088a\3\2\2\2\u088d\u088f\t\6\2\2\u088e\u0890\7\u00d5"+
		"\2\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0891\3\2\2\2\u0891"+
		"\u0892\5\u010e\u0088\2\u0892\u0109\3\2\2\2\u0893\u089b\t\22\2\2\u0894"+
		"\u0898\5\u010c\u0087\2\u0895\u0897\5\u0108\u0085\2\u0896\u0895\3\2\2\2"+
		"\u0897\u089a\3\2\2\2\u0898\u0896\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u089c"+
		"\3\2\2\2\u089a\u0898\3\2\2\2\u089b\u0894\3\2\2\2\u089c\u089d\3\2\2\2\u089d"+
		"\u089b\3\2\2\2\u089d\u089e\3\2\2\2\u089e\u010b\3\2\2\2\u089f\u08a3\5\u02ac"+
		"\u0157\2\u08a0\u08a3\7\3\2\2\u08a1\u08a3\5\26\f\2\u08a2\u089f\3\2\2\2"+
		"\u08a2\u08a0\3\2\2\2\u08a2\u08a1\3\2\2\2\u08a3\u010d\3\2\2\2\u08a4\u08a5"+
		"\5\u010c\u0087\2\u08a5\u010f\3\2\2\2\u08a6\u08a7\5\u02ac\u0157\2\u08a7"+
		"\u0111\3\2\2\2\u08a8\u08a9\5\u02ac\u0157\2\u08a9\u0113\3\2\2\2\u08aa\u08ac"+
		"\7\u00d7\2\2\u08ab\u08ad\5\u0244\u0123\2\u08ac\u08ab\3\2\2\2\u08ad\u08ae"+
		"\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u0115\3\2\2\2\u08b0"+
		"\u08b2\7\u00d6\2\2\u08b1\u08b3\5\u011c\u008f\2\u08b2\u08b1\3\2\2\2\u08b3"+
		"\u08b4\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b9\3\2"+
		"\2\2\u08b6\u08b8\5\u0118\u008d\2\u08b7\u08b6\3\2\2\2\u08b8\u08bb\3\2\2"+
		"\2\u08b9\u08b7\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u0117\3\2\2\2\u08bb\u08b9"+
		"\3\2\2\2\u08bc\u08c3\7\u0142\2\2\u08bd\u08bf\t\23\2\2\u08be\u08c0\7h\2"+
		"\2\u08bf\u08be\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08c2"+
		"\7\64\2\2\u08c2\u08c4\5\u011a\u008e\2\u08c3\u08bd\3\2\2\2\u08c4\u08c5"+
		"\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u0119\3\2\2\2\u08c7"+
		"\u08ca\5\u02ac\u0157\2\u08c8\u08ca\5\u033e\u01a0\2\u08c9\u08c7\3\2\2\2"+
		"\u08c9\u08c8\3\2\2\2\u08ca\u011b\3\2\2\2\u08cb\u08cc\5\u02ac\u0157\2\u08cc"+
		"\u011d\3\2\2\2\u08cd\u08cf\7\u00fb\2\2\u08ce\u08d0\t\b\2\2\u08cf\u08ce"+
		"\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2\5\u0148\u00a5"+
		"\2\u08d2\u08d3\7\u018a\2\2\u08d3\u08d4\5\u01b4\u00db\2\u08d4\u011f\3\2"+
		"\2\2\u08d5\u08d6\7\u00d0\2\2\u08d6\u08d8\5\u0344\u01a3\2\u08d7\u08d9\7"+
		"\u0185\2\2\u08d8\u08d7\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08dd\3\2\2\2"+
		"\u08da\u08de\5(\25\2\u08db\u08dc\7\u0100\2\2\u08dc\u08de\7\u015e\2\2\u08dd"+
		"\u08da\3\2\2\2\u08dd\u08db\3\2\2\2\u08de\u08e5\3\2\2\2\u08df\u08e3\7\u0087"+
		"\2\2\u08e0\u08e4\5(\25\2\u08e1\u08e2\7\u0100\2\2\u08e2\u08e4\7\u015e\2"+
		"\2\u08e3\u08e0\3\2\2\2\u08e3\u08e1\3\2\2\2\u08e4\u08e6\3\2\2\2\u08e5\u08df"+
		"\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e8\3\2\2\2\u08e7\u08e9\7\u0091\2"+
		"\2\u08e8\u08e7\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u0121\3\2\2\2\u08ea\u08eb"+
		"\7\u00c2\2\2\u08eb\u08ec\5\u0124\u0093\2\u08ec\u0123\3\2\2\2\u08ed\u08ee"+
		"\5\u02ac\u0157\2\u08ee\u0125\3\2\2\2\u08ef\u08f0\7\u00ab\2\2\u08f0\u0127"+
		"\3\2\2\2\u08f1\u08f2\7\u00ab\2\2\u08f2\u08f3\7\u012d\2\2\u08f3\u0129\3"+
		"\2\2\2\u08f4\u08f6\7\u00c5\2\2\u08f5\u08f7\7\u018a\2\2\u08f6\u08f5\3\2"+
		"\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08f9\3\2\2\2\u08f8\u08fa\5\u012c\u0097"+
		"\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u090b\3\2\2\2\u08fb\u08fd"+
		"\7\u00c5\2\2\u08fc\u08fe\7\u018a\2\2\u08fd\u08fc\3\2\2\2\u08fd\u08fe\3"+
		"\2\2\2\u08fe\u0900\3\2\2\2\u08ff\u0901\5\u012c\u0097\2\u0900\u08ff\3\2"+
		"\2\2\u0901\u0902\3\2\2\2\u0902\u0900\3\2\2\2\u0902\u0903\3\2\2\2\u0903"+
		"\u0904\3\2\2\2\u0904\u0906\7x\2\2\u0905\u0907\7\u010b\2\2\u0906\u0905"+
		"\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0908\3\2\2\2\u0908\u0909\5\u02ac\u0157"+
		"\2\u0909\u090b\3\2\2\2\u090a\u08f4\3\2\2\2\u090a\u08fb\3\2\2\2\u090b\u012b"+
		"\3\2\2\2\u090c\u090d\7\u01c4\2\2\u090d\u012d\3\2\2\2\u090e\u090f\7\u00a7"+
		"\2\2\u090f\u0916\5\u0132\u009a\2\u0910\u0912\7\22\2\2\u0911\u0910\3\2"+
		"\2\2\u0911\u0912\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0915\5\u0132\u009a"+
		"\2\u0914\u0911\3\2\2\2\u0915\u0918\3\2\2\2\u0916\u0914\3\2\2\2\u0916\u0917"+
		"\3\2\2\2\u0917\u0927\3\2\2\2\u0918\u0916\3\2\2\2\u0919\u091a\7\u01a0\2"+
		"\2\u091a\u0921\5\u0130\u0099\2\u091b\u091d\7\22\2\2\u091c\u091b\3\2\2"+
		"\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u0920\5\u0130\u0099\2"+
		"\u091f\u091c\3\2\2\2\u0920\u0923\3\2\2\2\u0921\u091f\3\2\2\2\u0921\u0922"+
		"\3\2\2\2\u0922\u0925\3\2\2\2\u0923\u0921\3\2\2\2\u0924\u0926\5(\25\2\u0925"+
		"\u0924\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0928\3\2\2\2\u0927\u0919\3\2"+
		"\2\2\u0928\u0929\3\2\2\2\u0929\u0927\3\2\2\2\u0929\u092a\3\2\2\2\u092a"+
		"\u0930\3\2\2\2\u092b\u092c\7\u01a0\2\2\u092c\u092e\7\u0112\2\2\u092d\u092f"+
		"\5(\25\2\u092e\u092d\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0931\3\2\2\2\u0930"+
		"\u092b\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0933\3\2\2\2\u0932\u0934\7\u0090"+
		"\2\2\u0933\u0932\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u012f\3\2\2\2\u0935"+
		"\u0942\5\u0344\u01a3\2\u0936\u0938\7\u0102\2\2\u0937\u0936\3\2\2\2\u0937"+
		"\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093c\5\u033c\u019f\2\u093a\u093b"+
		"\t\16\2\2\u093b\u093d\5\u033c\u019f\2\u093c\u093a\3\2\2\2\u093c\u093d"+
		"\3\2\2\2\u093d\u0942\3\2\2\2\u093e\u0942\7\26\2\2\u093f\u0942\7\u018d"+
		"\2\2\u0940\u0942\7\u00b0\2\2\u0941\u0935\3\2\2\2\u0941\u0937\3\2\2\2\u0941"+
		"\u093e\3\2\2\2\u0941\u093f\3\2\2\2\u0941\u0940\3\2\2\2\u0942\u0131\3\2"+
		"\2\2\u0943\u0948\5\u033c\u019f\2\u0944\u0948\5\u0344\u01a3\2\u0945\u0948"+
		"\7\u018d\2\2\u0946\u0948\7\u00b0\2\2\u0947\u0943\3\2\2\2\u0947\u0944\3"+
		"\2\2\2\u0947\u0945\3\2\2\2\u0947\u0946\3\2\2\2\u0948\u0133\3\2\2\2\u0949"+
		"\u094c\5\u0136\u009c\2\u094a\u094c\5\u0138\u009d\2\u094b\u0949\3\2\2\2"+
		"\u094b\u094a\3\2\2\2\u094c\u0135\3\2\2\2\u094d\u094e\7\177\2\2\u094e\u094f"+
		"\5\u013c\u009f\2\u094f\u0953\t\24\2\2\u0950\u0951\5\u013c\u009f\2\u0951"+
		"\u0952\7\u00c3\2\2\u0952\u0954\3\2\2\2\u0953\u0950\3\2\2\2\u0953\u0954"+
		"\3\2\2\2\u0954\u0959\3\2\2\2\u0955\u0957\5\u0352\u01aa\2\u0956\u0958\7"+
		"\u0153\2\2\u0957\u0956\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u095a\3\2\2\2"+
		"\u0959\u0955\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u0959\3\2\2\2\u095b\u095c"+
		"\3\2\2\2\u095c\u095e\3\2\2\2\u095d\u095f\5\u0186\u00c4\2\u095e\u095d\3"+
		"\2\2\2\u095e\u095f\3\2\2\2\u095f\u0961\3\2\2\2\u0960\u0962\7\u008f\2\2"+
		"\u0961\u0960\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0137\3\2\2\2\u0963\u0964"+
		"\7\177\2\2\u0964\u0965\5\u013c\u009f\2\u0965\u0969\t\24\2\2\u0966\u0967"+
		"\5\u013c\u009f\2\u0967\u0968\7\u00c3\2\2\u0968\u096a\3\2\2\2\u0969\u0966"+
		"\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\3\2\2\2\u096b\u096d\5\u0352\u01aa"+
		"\2\u096c\u096e\7\u0153\2\2\u096d\u096c\3\2\2\2\u096d\u096e\3\2\2\2\u096e"+
		"\u096f\3\2\2\2\u096f\u0970\7\u013e\2\2\u0970\u0972\5\u013a\u009e\2\u0971"+
		"\u0973\5\u0186\u00c4\2\u0972\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0975"+
		"\3\2\2\2\u0974\u0976\7\u008f\2\2\u0975\u0974\3\2\2\2\u0975\u0976\3\2\2"+
		"\2\u0976\u0139\3\2\2\2\u0977\u0978\5\u0352\u01aa\2\u0978\u013b\3\2\2\2"+
		"\u0979\u097c\5\u0354\u01ab\2\u097a\u097c\7\u01c2\2\2\u097b\u0979\3\2\2"+
		"\2\u097b\u097a\3\2\2\2\u097c\u013d\3\2\2\2\u097d\u0982\5\u0140\u00a1\2"+
		"\u097e\u0982\5\u0142\u00a2\2\u097f\u0982\5\u0144\u00a3\2\u0980\u0982\5"+
		"\u0146\u00a4\2\u0981\u097d\3\2\2\2\u0981\u097e\3\2\2\2\u0981\u097f\3\2"+
		"\2\2\u0981\u0980\3\2\2\2\u0982\u013f\3\2\2\2\u0983\u098b\7~\2\2\u0984"+
		"\u0988\5\u0148\u00a5\2\u0985\u0987\5\u0150\u00a9\2\u0986\u0985\3\2\2\2"+
		"\u0987\u098a\3\2\2\2\u0988\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u098c"+
		"\3\2\2\2\u098a\u0988\3\2\2\2\u098b\u0984\3\2\2\2\u098c\u098d\3\2\2\2\u098d"+
		"\u098b\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0990\3\2\2\2\u098f\u0991\7\u008e"+
		"\2\2\u0990\u098f\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0141\3\2\2\2\u0992"+
		"\u099a\7~\2\2\u0993\u0997\5\u0148\u00a5\2\u0994\u0996\5\u0152\u00aa\2"+
		"\u0995\u0994\3\2\2\2\u0996\u0999\3\2\2\2\u0997\u0995\3\2\2\2\u0997\u0998"+
		"\3\2\2\2\u0998\u099b\3\2\2\2\u0999\u0997\3\2\2\2\u099a\u0993\3\2\2\2\u099b"+
		"\u099c\3\2\2\2\u099c\u099a\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099f\3\2"+
		"\2\2\u099e\u09a0\7\u008e\2\2\u099f\u099e\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0"+
		"\u0143\3\2\2\2\u09a1\u09a2\7~\2\2\u09a2\u09b0\5\u02ac\u0157\2\u09a3\u09a5"+
		"\7!\2\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09ae\3\2\2\2\u09a6"+
		"\u09a8\5\u014c\u00a7\2\u09a7\u09a9\5\u014e\u00a8\2\u09a8\u09a7\3\2\2\2"+
		"\u09a8\u09a9\3\2\2\2\u09a9\u09af\3\2\2\2\u09aa\u09ac\5\u014e\u00a8\2\u09ab"+
		"\u09ad\5\u014c\u00a7\2\u09ac\u09ab\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09af"+
		"\3\2\2\2\u09ae\u09a6\3\2\2\2\u09ae\u09aa\3\2\2\2\u09af\u09b1\3\2\2\2\u09b0"+
		"\u09a4\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b3\3\2\2\2\u09b2\u09b4\7\u008e"+
		"\2\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u0145\3\2\2\2\u09b5"+
		"\u09b6\7~\2\2\u09b6\u09b7\5\u0148\u00a5\2\u09b7\u09b8\7\u0198\2\2\u09b8"+
		"\u09ba\5\u014a\u00a6\2\u09b9\u09bb\5\u0182\u00c2\2\u09ba\u09b9\3\2\2\2"+
		"\u09ba\u09bb\3\2\2\2\u09bb\u09bd\3\2\2\2\u09bc\u09be\7\u008e\2\2\u09bd"+
		"\u09bc\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u0147\3\2\2\2\u09bf\u09c2\5\u0354"+
		"\u01ab\2\u09c0\u09c2\5\u033e\u01a0\2\u09c1\u09bf\3\2\2\2\u09c1\u09c0\3"+
		"\2\2\2\u09c2\u0149\3\2\2\2\u09c3\u09c4\7\u01c4\2\2\u09c4\u014b\3\2\2\2"+
		"\u09c5\u09c7\7\u00ec\2\2\u09c6\u09c8\7\u0103\2\2\u09c7\u09c6\3\2\2\2\u09c7"+
		"\u09c8\3\2\2\2\u09c8\u09cb\3\2\2\2\u09c9\u09cc\5\u0354\u01ab\2\u09ca\u09cc"+
		"\7\u01c2\2\2\u09cb\u09c9\3\2\2\2\u09cb\u09ca\3\2\2\2\u09cc\u014d\3\2\2"+
		"\2\u09cd\u09cf\7C\2\2\u09ce\u09d0\7\u0103\2\2\u09cf\u09ce\3\2\2\2\u09cf"+
		"\u09d0\3\2\2\2\u09d0\u09d3\3\2\2\2\u09d1\u09d4\5\u0354\u01ab\2\u09d2\u09d4"+
		"\7\u01c2\2\2\u09d3\u09d1\3\2\2\2\u09d3\u09d2\3\2\2\2\u09d4\u014f\3\2\2"+
		"\2\u09d5\u09d7\7\u01a2\2\2\u09d6\u09d5\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7"+
		"\u09d8\3\2\2\2\u09d8\u09e3\7^\2\2\u09d9\u09da\7\u0198\2\2\u09da\u09e3"+
		"\5\u0158\u00ad\2\u09db\u09dd\7\u01a2\2\2\u09dc\u09db\3\2\2\2\u09dc\u09dd"+
		"\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09e0\7\u0101\2\2\u09df\u09e1\7\7\2"+
		"\2\u09e0\u09df\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09e3\3\2\2\2\u09e2\u09d6"+
		"\3\2\2\2\u09e2\u09d9\3\2\2\2\u09e2\u09dc\3\2\2\2\u09e3\u0151\3\2\2\2\u09e4"+
		"\u0a09\5\u0150\u00a9\2\u09e5\u0a09\5\u0154\u00ab\2\u09e6\u0a09\5\u0156"+
		"\u00ac\2\u09e7\u09ef\7\u00a5\2\2\u09e8\u09ea\7\u018a\2\2\u09e9\u09e8\3"+
		"\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ed\7\u0088\2\2"+
		"\u09ec\u09ee\7\u0108\2\2\u09ed\u09ec\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee"+
		"\u09f0\3\2\2\2\u09ef\u09e9\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f1\3\2"+
		"\2\2\u09f1\u0a09\t\25\2\2\u09f2\u09f4\7\u01a2\2\2\u09f3\u09f2\3\2\2\2"+
		"\u09f3\u09f4\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u0a09\7(\2\2\u09f6\u0a09"+
		"\7\u0190\2\2\u09f7\u0a09\7\62\2\2\u09f8\u09fa\7\u01a2\2\2\u09f9\u09f8"+
		"\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u0a09\7\60\2\2"+
		"\u09fc\u0a09\7\u014b\2\2\u09fd\u09ff\7\u01a2\2\2\u09fe\u09fd\3\2\2\2\u09fe"+
		"\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a09\7^\2\2\u0a01\u0a03\7\u01a2"+
		"\2\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04"+
		"\u0a06\7\u0101\2\2\u0a05\u0a07\7\7\2\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07"+
		"\3\2\2\2\u0a07\u0a09\3\2\2\2\u0a08\u09e4\3\2\2\2\u0a08\u09e5\3\2\2\2\u0a08"+
		"\u09e6\3\2\2\2\u0a08\u09e7\3\2\2\2\u0a08\u09f3\3\2\2\2\u0a08\u09f6\3\2"+
		"\2\2\u0a08\u09f7\3\2\2\2\u0a08\u09f9\3\2\2\2\u0a08\u09fc\3\2\2\2\u0a08"+
		"\u09fe\3\2\2\2\u0a08\u0a02\3\2\2\2\u0a09\u0153\3\2\2\2\u0a0a\u0a0c\7!"+
		"\2\2\u0a0b\u0a0a\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d"+
		"\u0a0f\7\u00ec\2\2\u0a0e\u0a10\7\u0103\2\2\u0a0f\u0a0e\3\2\2\2\u0a0f\u0a10"+
		"\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\5\u01b0\u00d9\2\u0a12\u0155\3"+
		"\2\2\2\u0a13\u0a15\7!\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15"+
		"\u0a16\3\2\2\2\u0a16\u0a18\7C\2\2\u0a17\u0a19\7\u0103\2\2\u0a18\u0a17"+
		"\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\5\u01b0\u00d9"+
		"\2\u0a1b\u0157\3\2\2\2\u0a1c\u0a1d\7\u01c4\2\2\u0a1d\u0159\3\2\2\2\u0a1e"+
		"\u0a1f\7t\2\2\u0a1f\u0a21\5\u0316\u018c\2\u0a20\u0a22\7\u0136\2\2\u0a21"+
		"\u0a20\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a24\3\2\2\2\u0a23\u0a25\5\u018c"+
		"\u00c7\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2\u0a26"+
		"\u0a28\7\u008d\2\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28\u015b"+
		"\3\2\2\2\u0a29\u0a2a\7[\2\2\u0a2a\u015d\3\2\2\2\u0a2b\u0a30\7N\2\2\u0a2c"+
		"\u0a2e\5\u0352\u01aa\2\u0a2d\u0a2f\7\u0153\2\2\u0a2e\u0a2d\3\2\2\2\u0a2e"+
		"\u0a2f\3\2\2\2\u0a2f\u0a31\3\2\2\2\u0a30\u0a2c\3\2\2\2\u0a31\u0a32\3\2"+
		"\2\2\u0a32\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34"+
		"\u0a35\t\26\2\2\u0a35\u0a37\5\u033c\u019f\2\u0a36\u0a38\5\u0186\u00c4"+
		"\2\u0a37\u0a36\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a3a\3\2\2\2\u0a39\u0a3b"+
		"\7\u008c\2\2\u0a3a\u0a39\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u015f\3\2\2"+
		"\2\u0a3c\u0a41\7?\2\2\u0a3d\u0a3f\5\u0316\u018c\2\u0a3e\u0a40\5\u0162"+
		"\u00b2\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a42\3\2\2\2\u0a41"+
		"\u0a3d\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a41\3\2\2\2\u0a43\u0a44\3\2"+
		"\2\2\u0a44\u0161\3\2\2\2\u0a45\u0a51\t\27\2\2\u0a46\u0a48\7\u00bd\2\2"+
		"\u0a47\u0a46\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a50"+
		"\7\u013f\2\2\u0a4a\u0a4c\7\u01a2\2\2\u0a4b\u0a4a\3\2\2\2\u0a4b\u0a4c\3"+
		"\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4e\7\u0101\2\2\u0a4e\u0a50\7\u014d"+
		"\2\2\u0a4f\u0a47\3\2\2\2\u0a4f\u0a4b\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51"+
		"\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a5c\3\2\2\2\u0a53\u0a55\7\u01a2"+
		"\2\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a59\3\2\2\2\u0a56"+
		"\u0a57\7\u0101\2\2\u0a57\u0a5a\7\u014d\2\2\u0a58\u0a5a\7\u00f0\2\2\u0a59"+
		"\u0a56\3\2\2\2\u0a59\u0a58\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a45\3\2"+
		"\2\2\u0a5b\u0a54\3\2\2\2\u0a5c\u0163\3\2\2\2\u0a5d\u0a5f\7\67\2\2\u0a5e"+
		"\u0a60\5\u0172\u00ba\2\u0a5f\u0a5e\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a5f"+
		"\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0165\3\2\2\2\u0a63\u0a64\7\66\2\2"+
		"\u0a64\u0a66\5\u0172\u00ba\2\u0a65\u0a67\5\u016a\u00b6\2\u0a66\u0a65\3"+
		"\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a69\3\2\2\2\u0a68\u0a6a\5\u0168\u00b5"+
		"\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c\3\2\2\2\u0a6b\u0a6d"+
		"\5\u0182\u00c2\2\u0a6c\u0a6b\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6f\3"+
		"\2\2\2\u0a6e\u0a70\7\u008b\2\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3\2\2\2"+
		"\u0a70\u0167\3\2\2\2\u0a71\u0a72\7\u00c3\2\2\u0a72\u0a73\5\u0352\u01aa"+
		"\2\u0a73\u0169\3\2\2\2\u0a74\u0a76\7\u019b\2\2\u0a75\u0a77\5\u016c\u00b7"+
		"\2\u0a76\u0a75\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a78\u0a79"+
		"\3\2\2\2\u0a79\u016b\3\2\2\2\u0a7a\u0a86\7\u010a\2\2\u0a7b\u0a7d\5\u016e"+
		"\u00b8\2\u0a7c\u0a7b\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e"+
		"\u0a82\5\u0170\u00b9\2\u0a7f\u0a81\5\u0170\u00b9\2\u0a80\u0a7f\3\2\2\2"+
		"\u0a81\u0a84\3\2\2\2\u0a82\u0a80\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a86"+
		"\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a85\u0a7a\3\2\2\2\u0a85\u0a7c\3\2\2\2\u0a86"+
		"\u016d\3\2\2\2\u0a87\u0a89\7\64\2\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3"+
		"\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a98\7\u013a\2\2\u0a8b\u0a8d\7\64\2"+
		"\2\u0a8c\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a98"+
		"\7X\2\2\u0a8f\u0a91\7\64\2\2\u0a90\u0a8f\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91"+
		"\u0a92\3\2\2\2\u0a92\u0a98\7z\2\2\u0a93\u0a95\7\64\2\2\u0a94\u0a93\3\2"+
		"\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a98\7\u019c\2\2\u0a97"+
		"\u0a88\3\2\2\2\u0a97\u0a8c\3\2\2\2\u0a97\u0a90\3\2\2\2\u0a97\u0a94\3\2"+
		"\2\2\u0a98\u016f\3\2\2\2\u0a99\u0a9d\5\u02ac\u0157\2\u0a9a\u0a9d\7\u01c2"+
		"\2\2\u0a9b\u0a9d\7\3\2\2\u0a9c\u0a99\3\2\2\2\u0a9c\u0a9a\3\2\2\2\u0a9c"+
		"\u0a9b\3\2\2\2\u0a9d\u0171\3\2\2\2\u0a9e\u0a9f\t\5\2\2\u0a9f\u0173\3\2"+
		"\2\2\u0aa0\u0aa9\7\23\2\2\u0aa1\u0aa2\5\u0178\u00bd\2\u0aa2\u0aa5\7\u018a"+
		"\2\2\u0aa3\u0aa4\7\u012c\2\2\u0aa4\u0aa6\7\u018a\2\2\u0aa5\u0aa3\3\2\2"+
		"\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa8\5\u0176\u00bc\2"+
		"\u0aa8\u0aaa\3\2\2\2\u0aa9\u0aa1\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aa9"+
		"\3\2\2\2\u0aab\u0aac\3\2\2\2\u0aac\u0175\3\2\2\2\u0aad\u0aae\7\u01c4\2"+
		"\2\u0aae\u0177\3\2\2\2\u0aaf\u0ab0\7\u01c4\2\2\u0ab0\u0179\3\2\2\2\u0ab1"+
		"\u0ab3\7\6\2\2\u0ab2\u0ab4\5\u017e\u00c0\2\u0ab3\u0ab2\3\2\2\2\u0ab4\u0ab5"+
		"\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7"+
		"\u0abc\7\u018a\2\2\u0ab8\u0aba\5\u0352\u01aa\2\u0ab9\u0abb\7\u0153\2\2"+
		"\u0aba\u0ab9\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab8"+
		"\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0abc\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf"+
		"\u0ae1\3\2\2\2\u0ac0\u0ac4\7\6\2\2\u0ac1\u0ac3\5\u017e\u00c0\2\u0ac2\u0ac1"+
		"\3\2\2\2\u0ac3\u0ac6\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5"+
		"\u0ac8\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0ac9\7\u018a\2\2\u0ac8\u0ac7"+
		"\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0acb\3\2\2\2\u0aca\u0acc\5\u017e\u00c0"+
		"\2\u0acb\u0aca\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0acb\3\2\2\2\u0acd\u0ace"+
		"\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad4\7\u00c3\2\2\u0ad0\u0ad2\5\u0352"+
		"\u01aa\2\u0ad1\u0ad3\7\u0153\2\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2"+
		"\2\u0ad3\u0ad5\3\2\2\2\u0ad4\u0ad0\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad4"+
		"\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ae1\3\2\2\2\u0ad8\u0ad9\7\6\2\2\u0ad9"+
		"\u0ada\t\b\2\2\u0ada\u0adb\5\u017c\u00bf\2\u0adb\u0adc\7\u018a\2\2\u0adc"+
		"\u0ade\5\u017c\u00bf\2\u0add\u0adf\7\u0153\2\2\u0ade\u0add\3\2\2\2\u0ade"+
		"\u0adf\3\2\2\2\u0adf\u0ae1\3\2\2\2\u0ae0\u0ab1\3\2\2\2\u0ae0\u0ac0\3\2"+
		"\2\2\u0ae0\u0ad8\3\2\2\2\u0ae1\u0ae3\3\2\2\2\u0ae2\u0ae4\5\u0186\u00c4"+
		"\2\u0ae3\u0ae2\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae6\3\2\2\2\u0ae5\u0ae7"+
		"\7\u008a\2\2\u0ae6\u0ae5\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u017b\3\2\2"+
		"\2\u0ae8\u0ae9\5\u02ac\u0157\2\u0ae9\u017d\3\2\2\2\u0aea\u0aed\7\u01c2"+
		"\2\2\u0aeb\u0aed\5\u0354\u01ab\2\u0aec\u0aea\3\2\2\2\u0aec\u0aeb\3\2\2"+
		"\2\u0aed\u017f\3\2\2\2\u0aee\u0af5\5\u0192\u00ca\2\u0aef\u0af5\5\u0194"+
		"\u00cb\2\u0af0\u0af5\5\u0196\u00cc\2\u0af1\u0af5\5\u0198\u00cd\2\u0af2"+
		"\u0af5\5\u019a\u00ce\2\u0af3\u0af5\5\u018e\u00c8\2\u0af4\u0aee\3\2\2\2"+
		"\u0af4\u0aef\3\2\2\2\u0af4\u0af0\3\2\2\2\u0af4\u0af1\3\2\2\2\u0af4\u0af2"+
		"\3\2\2\2\u0af4\u0af3\3\2\2\2\u0af5\u0181\3\2\2\2\u0af6\u0af9\5\u01ba\u00de"+
		"\2\u0af7\u0af8\7\u0102\2\2\u0af8\u0afa\5\u01ba\u00de\2\u0af9\u0af7\3\2"+
		"\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0b01\3\2\2\2\u0afb\u0afc\7\u0102\2\2\u0afc"+
		"\u0afe\5\u01ba\u00de\2\u0afd\u0aff\5\u01ba\u00de\2\u0afe\u0afd\3\2\2\2"+
		"\u0afe\u0aff\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0af6\3\2\2\2\u0b00\u0afb"+
		"\3\2\2\2\u0b01\u0183\3\2\2\2\u0b02\u0b05\5\u01b8\u00dd\2\u0b03\u0b04\7"+
		"\u0102\2\2\u0b04\u0b06\5\u01b8\u00dd\2\u0b05\u0b03\3\2\2\2\u0b05\u0b06"+
		"\3\2\2\2\u0b06\u0b0d\3\2\2\2\u0b07\u0b08\7\u0102\2\2\u0b08\u0b0a\5\u01b8"+
		"\u00dd\2\u0b09\u0b0b\5\u01b8\u00dd\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b\3"+
		"\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b02\3\2\2\2\u0b0c\u0b07\3\2\2\2\u0b0d"+
		"\u0185\3\2\2\2\u0b0e\u0b11\5\u01bc\u00df\2\u0b0f\u0b10\7\u0102\2\2\u0b10"+
		"\u0b12\5\u01bc\u00df\2\u0b11\u0b0f\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b19"+
		"\3\2\2\2\u0b13\u0b14\7\u0102\2\2\u0b14\u0b16\5\u01bc\u00df\2\u0b15\u0b17"+
		"\5\u01bc\u00df\2\u0b16\u0b15\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b19\3"+
		"\2\2\2\u0b18\u0b0e\3\2\2\2\u0b18\u0b13\3\2\2\2\u0b19\u0187\3\2\2\2\u0b1a"+
		"\u0b1d\5\u01be\u00e0\2\u0b1b\u0b1c\7\u0102\2\2\u0b1c\u0b1e\5\u01be\u00e0"+
		"\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b25\3\2\2\2\u0b1f\u0b20"+
		"\7\u0102\2\2\u0b20\u0b22\5\u01be\u00e0\2\u0b21\u0b23\5\u01be\u00e0\2\u0b22"+
		"\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b1a\3\2"+
		"\2\2\u0b24\u0b1f\3\2\2\2\u0b25\u0189\3\2\2\2\u0b26\u0b29\5\u01c0\u00e1"+
		"\2\u0b27\u0b28\7\u0102\2\2\u0b28\u0b2a\5\u01c0\u00e1\2\u0b29\u0b27\3\2"+
		"\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b31\3\2\2\2\u0b2b\u0b2c\7\u0102\2\2\u0b2c"+
		"\u0b2e\5\u01c0\u00e1\2\u0b2d\u0b2f\5\u01c0\u00e1\2\u0b2e\u0b2d\3\2\2\2"+
		"\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b31\3\2\2\2\u0b30\u0b26\3\2\2\2\u0b30\u0b2b"+
		"\3\2\2\2\u0b31\u018b\3\2\2\2\u0b32\u0b35\5\u01c2\u00e2\2\u0b33\u0b34\7"+
		"\u0102\2\2\u0b34\u0b36\5\u01c2\u00e2\2\u0b35\u0b33\3\2\2\2\u0b35\u0b36"+
		"\3\2\2\2\u0b36\u0b3d\3\2\2\2\u0b37\u0b38\7\u0102\2\2\u0b38\u0b3a\5\u01c2"+
		"\u00e2\2\u0b39\u0b3b\5\u01c2\u00e2\2\u0b3a\u0b39\3\2\2\2\u0b3a\u0b3b\3"+
		"\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b32\3\2\2\2\u0b3c\u0b37\3\2\2\2\u0b3d"+
		"\u018d\3\2\2\2\u0b3e\u0b3f\7\4\2\2\u0b3f\u0b41\5\u01b4\u00db\2\u0b40\u0b42"+
		"\7\u00bf\2\2\u0b41\u0b40\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b43\3\2\2"+
		"\2\u0b43\u0b45\5\u0190\u00c9\2\u0b44\u0b46\5\u0182\u00c2\2\u0b45\u0b44"+
		"\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b48\3\2\2\2\u0b47\u0b49\7\u0089\2"+
		"\2\u0b48\u0b47\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u018f\3\2\2\2\u0b4a\u0b4b"+
		"\7\u01c4\2\2\u0b4b\u0191\3\2\2\2\u0b4c\u0b4d\7\4\2\2\u0b4d\u0b50\5\u01b4"+
		"\u00db\2\u0b4e\u0b4f\7\u00bf\2\2\u0b4f\u0b51\5\u01b6\u00dc\2\u0b50\u0b4e"+
		"\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b54\3\2\2\2\u0b52\u0b53\7\u01a2\2"+
		"\2\u0b53\u0b55\7^\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57"+
		"\3\2\2\2\u0b56\u0b58\5\u0184\u00c3\2\u0b57\u0b56\3\2\2\2\u0b57\u0b58\3"+
		"\2\2\2\u0b58\u0b5a\3\2\2\2\u0b59\u0b5b\7\u0089\2\2\u0b5a\u0b59\3\2\2\2"+
		"\u0b5a\u0b5b\3\2\2\2\u0b5b\u0193\3\2\2\2\u0b5c\u0b5d\7\4\2\2\u0b5d\u0b5e"+
		"\5\u01b4\u00db\2\u0b5e\u0b5f\7\u00bf\2\2\u0b5f\u0b60\5\u01b2\u00da\2\u0b60"+
		"\u0195\3\2\2\2\u0b61\u0b62\7\4\2\2\u0b62\u0b64\5\u01b4\u00db\2\u0b63\u0b65"+
		"\5\u01a4\u00d3\2\u0b64\u0b63\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b64\3"+
		"\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b6c\3\2\2\2\u0b68\u0b6b\5\u0182\u00c2"+
		"\2\u0b69\u0b6b\5\u0184\u00c3\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b69\3\2\2\2"+
		"\u0b6b\u0b6d\3\2\2\2\u0b6c\u0b6a\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b6f"+
		"\3\2\2\2\u0b6e\u0b70\7\u0089\2\2\u0b6f\u0b6e\3\2\2\2\u0b6f\u0b70\3\2\2"+
		"\2\u0b70\u0197\3\2\2\2\u0b71\u0b73\7\4\2\2\u0b72\u0b74\7\\\2\2\u0b73\u0b72"+
		"\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b77\7\u00e3\2"+
		"\2\u0b76\u0b78\7\u00d1\2\2\u0b77\u0b76\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78"+
		"\u0b79\3\2\2\2\u0b79\u0b7b\5\u01a6\u00d4\2\u0b7a\u0b7c\5\u01a2\u00d2\2"+
		"\u0b7b\u0b7a\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7b\3\2\2\2\u0b7d\u0b7e"+
		"\3\2\2\2\u0b7e\u0b83\3\2\2\2\u0b7f\u0b82\5\u0182\u00c2\2\u0b80\u0b82\5"+
		"\u0184\u00c3\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b80\3\2\2\2\u0b82\u0b84\3\2"+
		"\2\2\u0b83\u0b81\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86\3\2\2\2\u0b85"+
		"\u0b87\7\u0089\2\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0199"+
		"\3\2\2\2\u0b88\u0b89\7\4\2\2\u0b89\u0b8b\5\u0266\u0134\2\u0b8a\u0b8c\5"+
		"\u019c\u00cf\2\u0b8b\u0b8a\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e\3\2"+
		"\2\2\u0b8d\u0b8f\5\u0182\u00c2\2\u0b8e\u0b8d\3\2\2\2\u0b8e\u0b8f\3\2\2"+
		"\2\u0b8f\u0b91\3\2\2\2\u0b90\u0b92\7\u0089\2\2\u0b91\u0b90\3\2\2\2\u0b91"+
		"\u0b92\3\2\2\2\u0b92\u019b\3\2\2\2\u0b93\u0b95\7!\2\2\u0b94\u0b93\3\2"+
		"\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b9e\3\2\2\2\u0b96\u0b98\5\u019e\u00d0"+
		"\2\u0b97\u0b99\5\u01a0\u00d1\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2"+
		"\u0b99\u0b9f\3\2\2\2\u0b9a\u0b9c\5\u01a0\u00d1\2\u0b9b\u0b9d\5\u019e\u00d0"+
		"\2\u0b9c\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b96"+
		"\3\2\2\2\u0b9e\u0b9a\3\2\2\2\u0b9f\u019d\3\2\2\2\u0ba0\u0ba2\7\u00ec\2"+
		"\2\u0ba1\u0ba3\7\u0103\2\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3"+
		"\u0ba6\3\2\2\2\u0ba4\u0ba7\7\u01c2\2\2\u0ba5\u0ba7\5\u02ac\u0157\2\u0ba6"+
		"\u0ba4\3\2\2\2\u0ba6\u0ba5\3\2\2\2\u0ba7\u019f\3\2\2\2\u0ba8\u0baa\7C"+
		"\2\2\u0ba9\u0bab\7\u0103\2\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab"+
		"\u0bae\3\2\2\2\u0bac\u0baf\7\u01c2\2\2\u0bad\u0baf\5\u02ac\u0157\2\u0bae"+
		"\u0bac\3\2\2\2\u0bae\u0bad\3\2\2\2\u0baf\u01a1\3\2\2\2\u0bb0\u0bb2\7\u00bf"+
		"\2\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3"+
		"\u0bb5\7\u00ec\2\2\u0bb4\u0bb6\7\u0103\2\2\u0bb5\u0bb4\3\2\2\2\u0bb5\u0bb6"+
		"\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bd0\5\u01b0\u00d9\2\u0bb8\u0bba\7"+
		"\u00bf\2\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbb\3\2\2\2"+
		"\u0bbb\u0bbd\7C\2\2\u0bbc\u0bbe\7\u0103\2\2\u0bbd\u0bbc\3\2\2\2\u0bbd"+
		"\u0bbe\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bd0\5\u01b0\u00d9\2\u0bc0\u0bc8"+
		"\7\u00a5\2\2\u0bc1\u0bc3\7\u018a\2\2\u0bc2\u0bc1\3\2\2\2\u0bc2\u0bc3\3"+
		"\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc6\7\u0088\2\2\u0bc5\u0bc7\7\u0108"+
		"\2\2\u0bc6\u0bc5\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8"+
		"\u0bc2\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bd0\t\25"+
		"\2\2\u0bcb\u0bcd\7\u01a2\2\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd"+
		"\u0bce\3\2\2\2\u0bce\u0bd0\7(\2\2\u0bcf\u0bb1\3\2\2\2\u0bcf\u0bb9\3\2"+
		"\2\2\u0bcf\u0bc0\3\2\2\2\u0bcf\u0bcc\3\2\2\2\u0bd0\u01a3\3\2\2\2\u0bd1"+
		"\u0bf7\5\u01a2\u00d2\2\u0bd2\u0bf7\7\u0190\2\2\u0bd3\u0bf7\7\62\2\2\u0bd4"+
		"\u0bd6\7\u01a2\2\2\u0bd5\u0bd4\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd7"+
		"\3\2\2\2\u0bd7\u0bf7\7\60\2\2\u0bd8\u0bdc\7\u012f\2\2\u0bd9\u0bdb\5\u01aa"+
		"\u00d6\2\u0bda\u0bd9\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc\u0bda\3\2\2\2\u0bdc"+
		"\u0bdd\3\2\2\2\u0bdd\u0bf7\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bdf\u0be1\7\u01a2"+
		"\2\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2"+
		"\u0bf7\7^\2\2\u0be3\u0bf7\7\u014b\2\2\u0be4\u0be6\7\u01a2\2\2\u0be5\u0be4"+
		"\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be8\7\u0101\2"+
		"\2\u0be8\u0bf7\7\u0085\2\2\u0be9\u0beb\7r\2\2\u0bea\u0bec\7\u00de\2\2"+
		"\u0beb\u0bea\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bf7"+
		"\5\u01a8\u00d5\2\u0bee\u0bf0\7\\\2\2\u0bef\u0bee\3\2\2\2\u0bef\u0bf0\3"+
		"\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bf3\7\u00e3\2\2\u0bf2\u0bf4\7\u00d1"+
		"\2\2\u0bf3\u0bf2\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5"+
		"\u0bf7\5\u01a6\u00d4\2\u0bf6\u0bd1\3\2\2\2\u0bf6\u0bd2\3\2\2\2\u0bf6\u0bd3"+
		"\3\2\2\2\u0bf6\u0bd5\3\2\2\2\u0bf6\u0bd8\3\2\2\2\u0bf6\u0be0\3\2\2\2\u0bf6"+
		"\u0be3\3\2\2\2\u0bf6\u0be5\3\2\2\2\u0bf6\u0be9\3\2\2\2\u0bf6\u0bef\3\2"+
		"\2\2\u0bf7\u01a5\3\2\2\2\u0bf8\u0bf9\5\u02ac\u0157\2\u0bf9\u01a7\3\2\2"+
		"\2\u0bfa\u0c02\5\32\16\2\u0bfb\u0c02\7\3\2\2\u0bfc\u0c02\5\u02ac\u0157"+
		"\2\u0bfd\u0bff\7f\2\2\u0bfe\u0c00\7\u019c\2\2\u0bff\u0bfe\3\2\2\2\u0bff"+
		"\u0c00\3\2\2\2\u0c00\u0c02\3\2\2\2\u0c01\u0bfa\3\2\2\2\u0c01\u0bfb\3\2"+
		"\2\2\u0c01\u0bfc\3\2\2\2\u0c01\u0bfd\3\2\2\2\u0c02\u01a9\3\2\2\2\u0c03"+
		"\u0c04\7\u0165\2\2\u0c04\u0c18\5\u01ae\u00d8\2\u0c05\u0c07\7\u01a2\2\2"+
		"\u0c06\u0c05\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c18"+
		"\7%\2\2\u0c09\u0c0b\7\u01a2\2\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2"+
		"\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\7\u0101\2\2\u0c0d\u0c18\7.\2\2\u0c0e"+
		"\u0c10\7\u01a2\2\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c11"+
		"\3\2\2\2\u0c11\u0c18\7\u0086\2\2\u0c12\u0c14\7\u01a2\2\2\u0c13\u0c12\3"+
		"\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c16\7\u00b5\2\2"+
		"\u0c16\u0c18\5\u01ac\u00d7\2\u0c17\u0c03\3\2\2\2\u0c17\u0c06\3\2\2\2\u0c17"+
		"\u0c0a\3\2\2\2\u0c17\u0c0f\3\2\2\2\u0c17\u0c13\3\2\2\2\u0c18\u01ab\3\2"+
		"\2\2\u0c19\u0c1a\7\3\2\2\u0c1a\u01ad\3\2\2\2\u0c1b\u0c1e\7\u01c2\2\2\u0c1c"+
		"\u0c1e\5\u02ac\u0157\2\u0c1d\u0c1b\3\2\2\2\u0c1d\u0c1c\3\2\2\2\u0c1e\u01af"+
		"\3\2\2\2\u0c1f\u0c2c\5\u0220\u0111\2\u0c20\u0c25\5\u02ac\u0157\2\u0c21"+
		"\u0c23\7\u0120\2\2\u0c22\u0c24\5\u0220\u0111\2\u0c23\u0c22\3\2\2\2\u0c23"+
		"\u0c24\3\2\2\2\u0c24\u0c26\3\2\2\2\u0c25\u0c21\3\2\2\2\u0c25\u0c26\3\2"+
		"\2\2\u0c26\u0c2c\3\2\2\2\u0c27\u0c29\7\u0120\2\2\u0c28\u0c2a\5\u0220\u0111"+
		"\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2c\3\2\2\2\u0c2b\u0c1f"+
		"\3\2\2\2\u0c2b\u0c20\3\2\2\2\u0c2b\u0c27\3\2\2\2\u0c2c\u01b1\3\2\2\2\u0c2d"+
		"\u0c2f\7i\2\2\u0c2e\u0c30\7\u01a8\2\2\u0c2f\u0c2e\3\2\2\2\u0c2f\u0c30"+
		"\3\2\2\2\u0c30\u0c38\3\2\2\2\u0c31\u0c33\7l\2\2\u0c32\u0c34\7\u01a7\2"+
		"\2\u0c33\u0c32\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34\u0c38\3\2\2\2\u0c35\u0c38"+
		"\7m\2\2\u0c36\u0c38\7\u0188\2\2\u0c37\u0c2d\3\2\2\2\u0c37\u0c31\3\2\2"+
		"\2\u0c37\u0c35\3\2\2\2\u0c37\u0c36\3\2\2\2\u0c38\u01b3\3\2\2\2\u0c39\u0c3a"+
		"\5\u0352\u01aa\2\u0c3a\u01b5\3\2\2\2\u0c3b\u0c3c\7\u01c4\2\2\u0c3c\u01b7"+
		"\3\2\2\2\u0c3d\u0c3f\7!\2\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f"+
		"\u0c40\3\2\2\2\u0c40\u0c42\7\u0088\2\2\u0c41\u0c43\5(\25\2\u0c42\u0c41"+
		"\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u01b9\3\2\2\2\u0c44\u0c46\7\u010b\2"+
		"\2\u0c45\u0c44\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c49"+
		"\7\u00a9\2\2\u0c48\u0c4a\5(\25\2\u0c49\u0c48\3\2\2\2\u0c49\u0c4a\3\2\2"+
		"\2\u0c4a\u01bb\3\2\2\2\u0c4b\u0c4d\7\u010b\2\2\u0c4c\u0c4b\3\2\2\2\u0c4c"+
		"\u0c4d\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c4f\7\u0165\2\2\u0c4f\u0c51"+
		"\7\u00a6\2\2\u0c50\u0c52\5(\25\2\u0c51\u0c50\3\2\2\2\u0c51\u0c52\3\2\2"+
		"\2\u0c52\u01bd\3\2\2\2\u0c53\u0c55\7\u010b\2\2\u0c54\u0c53\3\2\2\2\u0c54"+
		"\u0c55\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c58\7\u0115\2\2\u0c57\u0c59"+
		"\5(\25\2\u0c58\u0c57\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u01bf\3\2\2\2\u0c5a"+
		"\u0c5c\7!\2\2\u0c5b\u0c5a\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5d\3\2"+
		"\2\2\u0c5d\u0c5f\t\30\2\2\u0c5e\u0c60\5(\25\2\u0c5f\u0c5e\3\2\2\2\u0c5f"+
		"\u0c60\3\2\2\2\u0c60\u01c1\3\2\2\2\u0c61\u0c63\7\u00dd\2\2\u0c62\u0c64"+
		"\7\u00e3\2\2\u0c63\u0c62\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c66\3\2\2"+
		"\2\u0c65\u0c67\5(\25\2\u0c66\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u01c3"+
		"\3\2\2\2\u0c68\u0c69\7\u00b2\2\2\u0c69\u0c6a\7\u0159\2\2\u0c6a\u0c7e\7"+
		"\u01bf\2\2\u0c6b\u0c6f\5\u01ce\u00e8\2\u0c6c\u0c6e\5\u01d6\u00ec\2\u0c6d"+
		"\u0c6c\3\2\2\2\u0c6e\u0c71\3\2\2\2\u0c6f\u0c6d\3\2\2\2\u0c6f\u0c70\3\2"+
		"\2\2\u0c70\u0c7b\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c72\u0c7b\5\u01d2\u00ea"+
		"\2\u0c73\u0c77\5\u01d0\u00e9\2\u0c74\u0c76\5\u01d6\u00ec\2\u0c75\u0c74"+
		"\3\2\2\2\u0c76\u0c79\3\2\2\2\u0c77\u0c75\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78"+
		"\u0c7b\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c6b\3\2\2\2\u0c7a\u0c72\3\2"+
		"\2\2\u0c7a\u0c73\3\2\2\2\u0c7b\u0c7d\3\2\2\2\u0c7c\u0c7a\3\2\2\2\u0c7d"+
		"\u0c80\3\2\2\2\u0c7e\u0c7c\3\2\2\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u01c5\3\2"+
		"\2\2\u0c80\u0c7e\3\2\2\2\u0c81\u0c82\7\u01a4\2\2\u0c82\u0c83\7\u0159\2"+
		"\2\u0c83\u0c87\7\u01bf\2\2\u0c84\u0c86\5\u01d6\u00ec\2\u0c85\u0c84\3\2"+
		"\2\2\u0c86\u0c89\3\2\2\2\u0c87\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88"+
		"\u01c7\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c8a\u0c8b\7\u00ef\2\2\u0c8b\u0c8c"+
		"\7\u0159\2\2\u0c8c\u0c90\7\u01bf\2\2\u0c8d\u0c8f\5\u01d6\u00ec\2\u0c8e"+
		"\u0c8d\3\2\2\2\u0c8f\u0c92\3\2\2\2\u0c90\u0c8e\3\2\2\2\u0c90\u0c91\3\2"+
		"\2\2\u0c91\u01c9\3\2\2\2\u0c92\u0c90\3\2\2\2\u0c93\u0c94\7\u0143\2\2\u0c94"+
		"\u0c95\7\u0159\2\2\u0c95\u0c9f\7\u01bf\2\2\u0c96\u0c9a\5\u01d2\u00ea\2"+
		"\u0c97\u0c99\5\u0204\u0103\2\u0c98\u0c97\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a"+
		"\u0c98\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9e\3\2\2\2\u0c9c\u0c9a\3\2"+
		"\2\2\u0c9d\u0c96\3\2\2\2\u0c9e\u0ca1\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0c9f"+
		"\u0ca0\3\2\2\2\u0ca0\u01cb\3\2\2\2\u0ca1\u0c9f\3\2\2\2\u0ca2\u0ca3\7\u0156"+
		"\2\2\u0ca3\u0ca4\7\u0159\2\2\u0ca4\u0ca8\7\u01bf\2\2\u0ca5\u0ca7\5\u0264"+
		"\u0133\2\u0ca6\u0ca5\3\2\2\2\u0ca7\u0caa\3\2\2\2\u0ca8\u0ca6\3\2\2\2\u0ca8"+
		"\u0ca9\3\2\2\2\u0ca9\u01cd\3\2\2\2\u0caa\u0ca8\3\2\2\2\u0cab\u0cac\7\u00b1"+
		"\2\2\u0cac\u0cb0\5\u0316\u018c\2\u0cad\u0caf\5\u01d4\u00eb\2\u0cae\u0cad"+
		"\3\2\2\2\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1"+
		"\u0cb3\3\2\2\2\u0cb2\u0cb0\3\2\2\2\u0cb3\u0cb4\7\u01bf\2\2\u0cb4\u01cf"+
		"\3\2\2\2\u0cb5\u0cb6\7\u0157\2\2\u0cb6\u0cba\5\u0316\u018c\2\u0cb7\u0cb9"+
		"\5\u0240\u0121\2\u0cb8\u0cb7\3\2\2\2\u0cb9\u0cbc\3\2\2\2\u0cba\u0cb8\3"+
		"\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbd\3\2\2\2\u0cbc\u0cba\3\2\2\2\u0cbd"+
		"\u0cbe\7\u01bf\2\2\u0cbe\u01d1\3\2\2\2\u0cbf\u0cc0\7\u0133\2\2\u0cc0\u0cc4"+
		"\5\u0244\u0123\2\u0cc1\u0cc3\5\u0222\u0112\2\u0cc2\u0cc1\3\2\2\2\u0cc3"+
		"\u0cc6\3\2\2\2\u0cc4\u0cc2\3\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc7\3\2"+
		"\2\2\u0cc6\u0cc4\3\2\2\2\u0cc7\u0cc8\7\u01bf\2\2\u0cc8\u01d3\3\2\2\2\u0cc9"+
		"\u0ccb\7\u00de\2\2\u0cca\u0cc9\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0ccc"+
		"\3\2\2\2\u0ccc\u0cdd\7\u00ae\2\2\u0ccd\u0ccf\7\u00de\2\2\u0cce\u0ccd\3"+
		"\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cdd\7\u00c4\2\2"+
		"\u0cd1\u0cdd\5\u030a\u0186\2\u0cd2\u0cdd\5\u025a\u012e\2\u0cd3\u0cdd\5"+
		"\u0258\u012d\2\u0cd4\u0cdd\5\u0254\u012b\2\u0cd5\u0cdd\5\u0250\u0129\2"+
		"\u0cd6\u0cdd\5\u0246\u0124\2\u0cd7\u0cdd\5\u0242\u0122\2\u0cd8\u0cdd\5"+
		"\u0308\u0185\2\u0cd9\u0cdd\5\u02f6\u017c\2\u0cda\u0cdd\5\u02f2\u017a\2"+
		"\u0cdb\u0cdd\5\u02ee\u0178\2\u0cdc\u0cca\3\2\2\2\u0cdc\u0cce\3\2\2\2\u0cdc"+
		"\u0cd1\3\2\2\2\u0cdc\u0cd2\3\2\2\2\u0cdc\u0cd3\3\2\2\2\u0cdc\u0cd4\3\2"+
		"\2\2\u0cdc\u0cd5\3\2\2\2\u0cdc\u0cd6\3\2\2\2\u0cdc\u0cd7\3\2\2\2\u0cdc"+
		"\u0cd8\3\2\2\2\u0cdc\u0cd9\3\2\2\2\u0cdc\u0cda\3\2\2\2\u0cdc\u0cdb\3\2"+
		"\2\2\u0cdd\u01d5\3\2\2\2\u0cde\u0ce2\5\u01d8\u00ed\2\u0cdf\u0ce1\5\u01d8"+
		"\u00ed\2\u0ce0\u0cdf\3\2\2\2\u0ce1\u0ce4\3\2\2\2\u0ce2\u0ce0\3\2\2\2\u0ce2"+
		"\u0ce3\3\2\2\2\u0ce3\u01d7\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u0cea\5\u01da"+
		"\u00ee\2\u0ce6\u0ce9\5\u023e\u0120\2\u0ce7\u0ce9\7\u00b5\2\2\u0ce8\u0ce6"+
		"\3\2\2\2\u0ce8\u0ce7\3\2\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0ce8\3\2\2\2\u0cea"+
		"\u0ceb\3\2\2\2\u0ceb\u0cee\3\2\2\2\u0cec\u0ced\7\u0138\2\2\u0ced\u0cef"+
		"\5\u023c\u011f\2\u0cee\u0cec\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf3\3"+
		"\2\2\2\u0cf0\u0cf2\5\u01dc\u00ef\2\u0cf1\u0cf0\3\2\2\2\u0cf2\u0cf5\3\2"+
		"\2\2\u0cf3\u0cf1\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf6\3\2\2\2\u0cf5"+
		"\u0cf3\3\2\2\2\u0cf6\u0cf7\7\u01bf\2\2\u0cf7\u01d9\3\2\2\2\u0cf8\u0cf9"+
		"\7\u01c2\2\2\u0cf9\u01db\3\2\2\2\u0cfa\u0cfc\7\u00de\2\2\u0cfb\u0cfa\3"+
		"\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd\u0d16\7\u00ae\2\2"+
		"\u0cfe\u0d00\7\u00de\2\2\u0cff\u0cfe\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00"+
		"\u0d01\3\2\2\2\u0d01\u0d16\7\u00c4\2\2\u0d02\u0d16\5\u0236\u011c\2\u0d03"+
		"\u0d16\5\u0232\u011a\2\u0d04\u0d16\5\u020a\u0106\2\u0d05\u0d16\5\u01f2"+
		"\u00fa\2\u0d06\u0d08\t\31\2\2\u0d07\u0d09\t\32\2\2\u0d08\u0d07\3\2\2\2"+
		"\u0d08\u0d09\3\2\2\2\u0d09\u0d16\3\2\2\2\u0d0a\u0d0c\t\33\2\2\u0d0b\u0d0d"+
		"\7\u0151\2\2\u0d0c\u0d0b\3\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d16\3\2\2"+
		"\2\u0d0e\u0d10\7.\2\2\u0d0f\u0d11\7\u01a0\2\2\u0d10\u0d0f\3\2\2\2\u0d10"+
		"\u0d11\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12\u0d16\7\u01a9\2\2\u0d13\u0d16"+
		"\5\u01e4\u00f3\2\u0d14\u0d16\5\u01de\u00f0\2\u0d15\u0cfb\3\2\2\2\u0d15"+
		"\u0cff\3\2\2\2\u0d15\u0d02\3\2\2\2\u0d15\u0d03\3\2\2\2\u0d15\u0d04\3\2"+
		"\2\2\u0d15\u0d05\3\2\2\2\u0d15\u0d06\3\2\2\2\u0d15\u0d0a\3\2\2\2\u0d15"+
		"\u0d0e\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15\u0d14\3\2\2\2\u0d16\u01dd\3\2"+
		"\2\2\u0d17\u0d18\7\u0140\2\2\u0d18\u0d1b\5\u01e0\u00f1\2\u0d19\u0d1a\t"+
		"\16\2\2\u0d1a\u0d1c\5\u01e2\u00f2\2\u0d1b\u0d19\3\2\2\2\u0d1b\u0d1c\3"+
		"\2\2\2\u0d1c\u01df\3\2\2\2\u0d1d\u0d1e\5\u02ac\u0157\2\u0d1e\u01e1\3\2"+
		"\2\2\u0d1f\u0d20\5\u02ac\u0157\2\u0d20\u01e3\3\2\2\2\u0d21\u0d23\7\u019c"+
		"\2\2\u0d22\u0d24\7\u00de\2\2\u0d23\u0d22\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24"+
		"\u0d2a\3\2\2\2\u0d25\u0d27\7\u019d\2\2\u0d26\u0d28\7\30\2\2\u0d27\u0d26"+
		"\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2a\3\2\2\2\u0d29\u0d21\3\2\2\2\u0d29"+
		"\u0d25\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d2f\5\u01e6\u00f4\2\u0d2c\u0d2e"+
		"\5\u01e6\u00f4\2\u0d2d\u0d2c\3\2\2\2\u0d2e\u0d31\3\2\2\2\u0d2f\u0d2d\3"+
		"\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30\u01e5\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d32"+
		"\u0d34\5\u01e8\u00f5\2\u0d33\u0d35\5\u01ea\u00f6\2\u0d34\u0d33\3\2\2\2"+
		"\u0d34\u0d35\3\2\2\2\u0d35\u01e7\3\2\2\2\u0d36\u0d3c\5\u01f0\u00f9\2\u0d37"+
		"\u0d38\7\u013a\2\2\u0d38\u0d3c\5\u01ee\u00f8\2\u0d39\u0d3a\7\u00ae\2\2"+
		"\u0d3a\u0d3c\5\u01ec\u00f7\2\u0d3b\u0d36\3\2\2\2\u0d3b\u0d37\3\2\2\2\u0d3b"+
		"\u0d39\3\2\2\2\u0d3c\u01e9\3\2\2\2\u0d3d\u0d3e\t\16\2\2\u0d3e\u0d3f\5"+
		"\u01e8\u00f5\2\u0d3f\u01eb\3\2\2\2\u0d40\u0d41\7\u01c4\2\2\u0d41\u01ed"+
		"\3\2\2\2\u0d42\u0d43\5\u02ac\u0157\2\u0d43\u01ef\3\2\2\2\u0d44\u0d45\t"+
		"\34\2\2\u0d45\u01f1\3\2\2\2\u0d46\u0d47\7\u0107\2\2\u0d47\u0d4b\5\u01fc"+
		"\u00ff\2\u0d48\u0d4a\5\u01f8\u00fd\2\u0d49\u0d48\3\2\2\2\u0d4a\u0d4d\3"+
		"\2\2\2\u0d4b\u0d49\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4f\3\2\2\2\u0d4d"+
		"\u0d4b\3\2\2\2\u0d4e\u0d50\5\u01f4\u00fb\2\u0d4f\u0d4e\3\2\2\2\u0d4f\u0d50"+
		"\3\2\2\2\u0d50\u01f3\3\2\2\2\u0d51\u0d53\7\u00d3\2\2\u0d52\u0d54\7\64"+
		"\2\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55"+
		"\u0d59\5\u01f6\u00fc\2\u0d56\u0d58\5\u01f6\u00fc\2\u0d57\u0d56\3\2\2\2"+
		"\u0d58\u0d5b\3\2\2\2\u0d59\u0d57\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u01f5"+
		"\3\2\2\2\u0d5b\u0d59\3\2\2\2\u0d5c\u0d5d\7\u01c4\2\2\u0d5d\u01f7\3\2\2"+
		"\2\u0d5e\u0d60\t\t\2\2\u0d5f\u0d61\7\u00e3\2\2\u0d60\u0d5f\3\2\2\2\u0d60"+
		"\u0d61\3\2\2\2\u0d61\u0d63\3\2\2\2\u0d62\u0d64\7\u00de\2\2\u0d63\u0d62"+
		"\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d69\5\u01fa\u00fe"+
		"\2\u0d66\u0d68\5\u01fa\u00fe\2\u0d67\u0d66\3\2\2\2\u0d68\u0d6b\3\2\2\2"+
		"\u0d69\u0d67\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a\u01f9\3\2\2\2\u0d6b\u0d69"+
		"\3\2\2\2\u0d6c\u0d6d\5\u02ac\u0157\2\u0d6d\u01fb\3\2\2\2\u0d6e\u0d6f\5"+
		"\u01fe\u0100\2\u0d6f\u0d70\7\u0189\2\2\u0d70\u0d7c\3\2\2\2\u0d71\u0d72"+
		"\5\u0200\u0101\2\u0d72\u0d73\7\u018a\2\2\u0d73\u0d74\5\u0202\u0102\2\u0d74"+
		"\u0d75\7\u0189\2\2\u0d75\u0d77\7x\2\2\u0d76\u0d78\7\u010b\2\2\u0d77\u0d76"+
		"\3\2\2\2\u0d77\u0d78\3\2\2\2\u0d78\u0d79\3\2\2\2\u0d79\u0d7a\5\u025e\u0130"+
		"\2\u0d7a\u0d7c\3\2\2\2\u0d7b\u0d6e\3\2\2\2\u0d7b\u0d71\3\2\2\2\u0d7c\u01fd"+
		"\3\2\2\2\u0d7d\u0d7e\7\u01c2\2\2\u0d7e\u01ff\3\2\2\2\u0d7f\u0d80\7\u01c2"+
		"\2\2\u0d80\u0201\3\2\2\2\u0d81\u0d82\7\u01c2\2\2\u0d82\u0203\3\2\2\2\u0d83"+
		"\u0d87\5\u0206\u0104\2\u0d84\u0d86\5\u0206\u0104\2\u0d85\u0d84\3\2\2\2"+
		"\u0d86\u0d89\3\2\2\2\u0d87\u0d85\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0205"+
		"\3\2\2\2\u0d89\u0d87\3\2\2\2\u0d8a\u0d8c\5\u01da\u00ee\2\u0d8b\u0d8d\5"+
		"\u023e\u0120\2\u0d8c\u0d8b\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d91\3\2"+
		"\2\2\u0d8e\u0d90\5\u0208\u0105\2\u0d8f\u0d8e\3\2\2\2\u0d90\u0d93\3\2\2"+
		"\2\u0d91\u0d8f\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93\u0d91"+
		"\3\2\2\2\u0d94\u0d95\7\u01bf\2\2\u0d95\u0207\3\2\2\2\u0d96\u0d98\7\u00ec"+
		"\2\2\u0d97\u0d99\7\u0103\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9b\3\2\2\2\u0d9a\u0d9c\7\u00de\2\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c"+
		"\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0dd3\5\u021e\u0110\2\u0d9e\u0d9f\7"+
		"\u0100\2\2\u0d9f\u0da1\7\u00c7\2\2\u0da0\u0da2\7\u00de\2\2\u0da1\u0da0"+
		"\3\2\2\2\u0da1\u0da2\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0dd3\5\u021c\u010f"+
		"\2\u0da4\u0da6\7\u018e\2\2\u0da5\u0da7\7\u00de\2\2\u0da6\u0da5\3\2\2\2"+
		"\u0da6\u0da7\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0dd3\5\u0218\u010d\2\u0da9"+
		"\u0dab\7\u0199\2\2\u0daa\u0dac\7\u00de\2\2\u0dab\u0daa\3\2\2\2\u0dab\u0dac"+
		"\3\2\2\2\u0dac\u0dae\3\2\2\2\u0dad\u0da9\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae"+
		"\u0daf\3\2\2\2\u0daf\u0dd3\7~\2\2\u0db0\u0db2\7.\2\2\u0db1\u0db3\7\u01a0"+
		"\2\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db4\3\2\2\2\u0db4"+
		"\u0dd3\7\u01a9\2\2\u0db5\u0db7\7C\2\2\u0db6\u0db8\7\u0103\2\2\u0db7\u0db6"+
		"\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0dba\3\2\2\2\u0db9\u0dbb\7\u00de\2"+
		"\2\u0dba\u0db9\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dd3"+
		"\5\u0216\u010c\2\u0dbd\u0dbf\7\u00c7\2\2\u0dbe\u0dc0\7\u00d4\2\2\u0dbf"+
		"\u0dbe\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dd3\3\2\2\2\u0dc1\u0dc3\t\33"+
		"\2\2\u0dc2\u0dc4\7\u0151\2\2\u0dc3\u0dc2\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4"+
		"\u0dd3\3\2\2\2\u0dc5\u0dd3\5\u0236\u011c\2\u0dc6\u0dd3\5\u020a\u0106\2"+
		"\u0dc7\u0dc9\7\u0168\2\2\u0dc8\u0dca\7\u00de\2\2\u0dc9\u0dc8\3\2\2\2\u0dc9"+
		"\u0dca\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dd3\5\u0214\u010b\2\u0dcc\u0dce"+
		"\7\u019c\2\2\u0dcd\u0dcf\7\u00de\2\2\u0dce\u0dcd\3\2\2\2\u0dce\u0dcf\3"+
		"\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd3\5\u01f0\u00f9\2\u0dd1\u0dd3\5\u020c"+
		"\u0107\2\u0dd2\u0d96\3\2\2\2\u0dd2\u0d9e\3\2\2\2\u0dd2\u0da4\3\2\2\2\u0dd2"+
		"\u0dad\3\2\2\2\u0dd2\u0db0\3\2\2\2\u0dd2\u0db5\3\2\2\2\u0dd2\u0dbd\3\2"+
		"\2\2\u0dd2\u0dc1\3\2\2\2\u0dd2\u0dc5\3\2\2\2\u0dd2\u0dc6\3\2\2\2\u0dd2"+
		"\u0dc7\3\2\2\2\u0dd2\u0dcc\3\2\2\2\u0dd2\u0dd1\3\2\2\2\u0dd3\u0209\3\2"+
		"\2\2\u0dd4\u0dd6\7\u0163\2\2\u0dd5\u0dd7\7\u00de\2\2\u0dd6\u0dd5\3\2\2"+
		"\2\u0dd6\u0dd7\3\2\2\2\u0dd7\u0dd9\3\2\2\2\u0dd8\u0dd4\3\2\2\2\u0dd8\u0dd9"+
		"\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddf\t\35\2\2\u0ddb\u0ddd\7\u015f"+
		"\2\2\u0ddc\u0dde\7;\2\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde"+
		"\u0de0\3\2\2\2\u0ddf\u0ddb\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u020b\3\2"+
		"\2\2\u0de1\u0de2\7\u0176\2\2\u0de2\u0de6\5\u0212\u010a\2\u0de3\u0de5\5"+
		"\u0212\u010a\2\u0de4\u0de3\3\2\2\2\u0de5\u0de8\3\2\2\2\u0de6\u0de4\3\2"+
		"\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0dea\3\2\2\2\u0de8\u0de6\3\2\2\2\u0de9"+
		"\u0deb\7\u0198\2\2\u0dea\u0de9\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0def"+
		"\3\2\2\2\u0dec\u0dee\5\u0210\u0109\2\u0ded\u0dec\3\2\2\2\u0dee\u0df1\3"+
		"\2\2\2\u0def\u0ded\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df3\3\2\2\2\u0df1"+
		"\u0def\3\2\2\2\u0df2\u0de1\3\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0df2\3\2"+
		"\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0dfb\3\2\2\2\u0df6\u0df8\7\u0149\2\2\u0df7"+
		"\u0df9\7\u010b\2\2\u0df8\u0df7\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfa"+
		"\3\2\2\2\u0dfa\u0dfc\5\u020e\u0108\2\u0dfb\u0df6\3\2\2\2\u0dfb\u0dfc\3"+
		"\2\2\2\u0dfc\u020d\3\2\2\2\u0dfd\u0dfe\t\36\2\2\u0dfe\u020f\3\2\2\2\u0dff"+
		"\u0e00\7\u01c4\2\2\u0e00\u0211\3\2\2\2\u0e01\u0e02\7\u01c4\2\2\u0e02\u0213"+
		"\3\2\2\2\u0e03\u0e04\5\u02ac\u0157\2\u0e04\u0215\3\2\2\2\u0e05\u0e06\7"+
		"\u01c2\2\2\u0e06\u0217\3\2\2\2\u0e07\u0e08\7\u0143\2\2\u0e08\u0e22\7\u00c8"+
		"\2\2\u0e09\u0e22\7\u0150\2\2\u0e0a\u0e0b\7\u0118\2\2\u0e0b\u0e22\7\u00c8"+
		"\2\2\u0e0c\u0e22\7\u011d\2\2\u0e0d\u0e0e\7\\\2\2\u0e0e\u0e11\7\u00c8\2"+
		"\2\u0e0f\u0e11\7:\2\2\u0e10\u0e0d\3\2\2\2\u0e10\u0e0f\3\2\2\2\u0e11\u0e12"+
		"\3\2\2\2\u0e12\u0e22\5\u021a\u010e\2\u0e13\u0e22\7{\2\2\u0e14\u0e22\7"+
		"n\2\2\u0e15\u0e16\7\\\2\2\u0e16\u0e19\7\u00bc\2\2\u0e17\u0e19\79\2\2\u0e18"+
		"\u0e15\3\2\2\2\u0e18\u0e17\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0e22\5\u021a"+
		"\u010e\2\u0e1b\u0e1c\7\u0118\2\2\u0e1c\u0e22\7\u00bc\2\2\u0e1d\u0e22\7"+
		"\u011c\2\2\u0e1e\u0e1f\7\u0143\2\2\u0e1f\u0e22\7\u00bc\2\2\u0e20\u0e22"+
		"\7\u014f\2\2\u0e21\u0e07\3\2\2\2\u0e21\u0e09\3\2\2\2\u0e21\u0e0a\3\2\2"+
		"\2\u0e21\u0e0c\3\2\2\2\u0e21\u0e10\3\2\2\2\u0e21\u0e13\3\2\2\2\u0e21\u0e14"+
		"\3\2\2\2\u0e21\u0e18\3\2\2\2\u0e21\u0e1b\3\2\2\2\u0e21\u0e1d\3\2\2\2\u0e21"+
		"\u0e1e\3\2\2\2\u0e21\u0e20\3\2\2\2\u0e22\u0219\3\2\2\2\u0e23\u0e24\t\36"+
		"\2\2\u0e24\u021b\3\2\2\2\u0e25\u0e2b\5\u0220\u0111\2\u0e26\u0e27\7\u0120"+
		"\2\2\u0e27\u0e2b\5\u0220\u0111\2\u0e28\u0e29\7\u0100\2\2\u0e29\u0e2b\7"+
		"\u0118\2\2\u0e2a\u0e25\3\2\2\2\u0e2a\u0e26\3\2\2\2\u0e2a\u0e28\3\2\2\2"+
		"\u0e2b\u021d\3\2\2\2\u0e2c\u0e32\5\u0220\u0111\2\u0e2d\u0e2f\7\u010b\2"+
		"\2\u0e2e\u0e2d\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u0e31"+
		"\7\u0100\2\2\u0e31\u0e33\7\u0118\2\2\u0e32\u0e2e\3\2\2\2\u0e32\u0e33\3"+
		"\2\2\2\u0e33\u0e37\3\2\2\2\u0e34\u0e35\7\u0120\2\2\u0e35\u0e37\5\u0220"+
		"\u0111\2\u0e36\u0e2c\3\2\2\2\u0e36\u0e34\3\2\2\2\u0e37\u021f\3\2\2\2\u0e38"+
		"\u0e39\7\u01c2\2\2\u0e39\u0221\3\2\2\2\u0e3a\u0e3c\7\u00de\2\2\u0e3b\u0e3a"+
		"\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e7c\7\u00c4\2"+
		"\2\u0e3e\u0e3f\7@\2\2\u0e3f\u0e7c\5\u0230\u0119\2\u0e40\u0e42\7\\\2\2"+
		"\u0e41\u0e43\7\u00de\2\2\u0e42\u0e41\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43"+
		"\u0e49\3\2\2\2\u0e44\u0e46\7]\2\2\u0e45\u0e47\7\30\2\2\u0e46\u0e45\3\2"+
		"\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e49\3\2\2\2\u0e48\u0e40\3\2\2\2\u0e48"+
		"\u0e44\3\2\2\2\u0e49\u0e58\3\2\2\2\u0e4a\u0e4e\5\u022e\u0118\2\u0e4b\u0e4d"+
		"\5\u022e\u0118\2\u0e4c\u0e4b\3\2\2\2\u0e4d\u0e50\3\2\2\2\u0e4e\u0e4c\3"+
		"\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e59\3\2\2\2\u0e50\u0e4e\3\2\2\2\u0e51"+
		"\u0e55\7\u00b7\2\2\u0e52\u0e54\5\u022e\u0118\2\u0e53\u0e52\3\2\2\2\u0e54"+
		"\u0e57\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e59\3\2"+
		"\2\2\u0e57\u0e55\3\2\2\2\u0e58\u0e4a\3\2\2\2\u0e58\u0e51\3\2\2\2\u0e59"+
		"\u0e7c\3\2\2\2\u0e5a\u0e63\7\u0118\2\2\u0e5b\u0e5d\7\u00e9\2\2\u0e5c\u0e5e"+
		"\7\u00de\2\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e64\3\2\2"+
		"\2\u0e5f\u0e61\7\u00ea\2\2\u0e60\u0e62\7\30\2\2\u0e61\u0e60\3\2\2\2\u0e61"+
		"\u0e62\3\2\2\2\u0e62\u0e64\3\2\2\2\u0e63\u0e5b\3\2\2\2\u0e63\u0e5f\3\2"+
		"\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e67\5\u022c\u0117"+
		"\2\u0e66\u0e68\t\7\2\2\u0e67\u0e66\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0e6b"+
		"\3\2\2\2\u0e69\u0e6a\7\u00c8\2\2\u0e6a\u0e6c\5\u022a\u0116\2\u0e6b\u0e69"+
		"\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e70\3\2\2\2\u0e6d\u0e6e\7\u00b8\2"+
		"\2\u0e6e\u0e6f\7{\2\2\u0e6f\u0e71\5\u0228\u0115\2\u0e70\u0e6d\3\2\2\2"+
		"\u0e70\u0e71\3\2\2\2\u0e71\u0e75\3\2\2\2\u0e72\u0e73\7\u00e5\2\2\u0e73"+
		"\u0e74\7{\2\2\u0e74\u0e76\5\u0226\u0114\2\u0e75\u0e72\3\2\2\2\u0e75\u0e76"+
		"\3\2\2\2\u0e76\u0e79\3\2\2\2\u0e77\u0e78\7\u00bc\2\2\u0e78\u0e7a\5\u0224"+
		"\u0113\2\u0e79\u0e77\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7c\3\2\2\2\u0e7b"+
		"\u0e3b\3\2\2\2\u0e7b\u0e3e\3\2\2\2\u0e7b\u0e48\3\2\2\2\u0e7b\u0e5a\3\2"+
		"\2\2\u0e7c\u0223\3\2\2\2\u0e7d\u0e7e\7\u01c2\2\2\u0e7e\u0225\3\2\2\2\u0e7f"+
		"\u0e80\7\u01c2\2\2\u0e80\u0227\3\2\2\2\u0e81\u0e82\7\u01c2\2\2\u0e82\u0229"+
		"\3\2\2\2\u0e83\u0e84\7\u01c2\2\2\u0e84\u022b\3\2\2\2\u0e85\u0e86\7\u01c2"+
		"\2\2\u0e86\u022d\3\2\2\2\u0e87\u0e88\5\u02ac\u0157\2\u0e88\u022f\3\2\2"+
		"\2\u0e89\u0e8a\7\3\2\2\u0e8a\u0231\3\2\2\2\u0e8b\u0e8d\7\u0199\2\2\u0e8c"+
		"\u0e8e\7\u00de\2\2\u0e8d\u0e8c\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e\u0e90"+
		"\3\2\2\2\u0e8f\u0e8b\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91"+
		"\u0e92\5\u0234\u011b\2\u0e92\u0233\3\2\2\2\u0e93\u0ebb\7)\2\2\u0e94\u0e96"+
		"\7*\2\2\u0e95\u0e97\t\37\2\2\u0e96\u0e95\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97"+
		"\u0ebb\3\2\2\2\u0e98\u0e9a\7-\2\2\u0e99\u0e9b\t\37\2\2\u0e9a\u0e99\3\2"+
		"\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0ebb\3\2\2\2\u0e9c\u0e9e\7,\2\2\u0e9d"+
		"\u0e9f\t\37\2\2\u0e9e\u0e9d\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0ebb\3"+
		"\2\2\2\u0ea0\u0ea2\7+\2\2\u0ea1\u0ea3\t\37\2\2\u0ea2\u0ea1\3\2\2\2\u0ea2"+
		"\u0ea3\3\2\2\2\u0ea3\u0ebb\3\2\2\2\u0ea4\u0ebb\7G\2\2\u0ea5\u0ebb\7H\2"+
		"\2\u0ea6\u0ebb\7I\2\2\u0ea7\u0ebb\7J\2\2\u0ea8\u0ebb\7K\2\2\u0ea9\u0ebb"+
		"\7L\2\2\u0eaa\u0ebb\7M\2\2\u0eab\u0ebb\7F\2\2\u0eac\u0ebb\7O\2\2\u0ead"+
		"\u0ebb\7P\2\2\u0eae\u0ebb\7Q\2\2\u0eaf\u0ebb\7R\2\2\u0eb0\u0ebb\7S\2\2"+
		"\u0eb1\u0ebb\7T\2\2\u0eb2\u0ebb\7~\2\2\u0eb3\u0ebb\7\u00bb\2\2\u0eb4\u0ebb"+
		"\7\u00ba\2\2\u0eb5\u0ebb\7\u00b9\2\2\u0eb6\u0ebb\7\u00d2\2\2\u0eb7\u0ebb"+
		"\7\u0116\2\2\u0eb8\u0ebb\7\u0121\2\2\u0eb9\u0ebb\7\u0122\2\2\u0eba\u0e93"+
		"\3\2\2\2\u0eba\u0e94\3\2\2\2\u0eba\u0e98\3\2\2\2\u0eba\u0e9c\3\2\2\2\u0eba"+
		"\u0ea0\3\2\2\2\u0eba\u0ea4\3\2\2\2\u0eba\u0ea5\3\2\2\2\u0eba\u0ea6\3\2"+
		"\2\2\u0eba\u0ea7\3\2\2\2\u0eba\u0ea8\3\2\2\2\u0eba\u0ea9\3\2\2\2\u0eba"+
		"\u0eaa\3\2\2\2\u0eba\u0eab\3\2\2\2\u0eba\u0eac\3\2\2\2\u0eba\u0ead\3\2"+
		"\2\2\u0eba\u0eae\3\2\2\2\u0eba\u0eaf\3\2\2\2\u0eba\u0eb0\3\2\2\2\u0eba"+
		"\u0eb1\3\2\2\2\u0eba\u0eb2\3\2\2\2\u0eba\u0eb3\3\2\2\2\u0eba\u0eb4\3\2"+
		"\2\2\u0eba\u0eb5\3\2\2\2\u0eba\u0eb6\3\2\2\2\u0eba\u0eb7\3\2\2\2\u0eba"+
		"\u0eb8\3\2\2\2\u0eba\u0eb9\3\2\2\2\u0ebb\u0235\3\2\2\2\u0ebc\u0ebe\t "+
		"\2\2\u0ebd\u0ebf\7\u00de\2\2\u0ebe\u0ebd\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf"+
		"\u0ec0\3\2\2\2\u0ec0\u0ec1\5\u0238\u011d\2\u0ec1\u0237\3\2\2\2\u0ec2\u0ec4"+
		"\5\u023a\u011e\2\u0ec3\u0ec2\3\2\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5\u0ec3\3"+
		"\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u0239\3\2\2\2\u0ec7\u0ec8\t!\2\2\u0ec8"+
		"\u023b\3\2\2\2\u0ec9\u0eca\7\u01c4\2\2\u0eca\u023d\3\2\2\2\u0ecb\u0ecc"+
		"\7\u01c4\2\2\u0ecc\u023f\3\2\2\2\u0ecd\u0ed0\5\u025a\u012e\2\u0ece\u0ed0"+
		"\5\u0250\u0129\2\u0ecf\u0ecd\3\2\2\2\u0ecf\u0ece\3\2\2\2\u0ed0\u0241\3"+
		"\2\2\2\u0ed1\u0ed3\7\u0143\2\2\u0ed2\u0ed4\7\u00de\2\2\u0ed3\u0ed2\3\2"+
		"\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0eda\3\2\2\2\u0ed5\u0ed7\7\u0145\2\2\u0ed6"+
		"\u0ed8\7\30\2\2\u0ed7\u0ed6\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u0eda\3"+
		"\2\2\2\u0ed9\u0ed1\3\2\2\2\u0ed9\u0ed5\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb"+
		"\u0edf\5\u0244\u0123\2\u0edc\u0ede\5\u0244\u0123\2\u0edd\u0edc\3\2\2\2"+
		"\u0ede\u0ee1\3\2\2\2\u0edf\u0edd\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0243"+
		"\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee2\u0ee3\7\u01c4\2\2\u0ee3\u0245\3\2\2"+
		"\2\u0ee4\u0ee6\7\u00eb\2\2\u0ee5\u0ee7\7\u00de\2\2\u0ee6\u0ee5\3\2\2\2"+
		"\u0ee6\u0ee7\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u0eea\5\u024e\u0128\2\u0ee9"+
		"\u0eeb\7\u00ed\2\2\u0eea\u0ee9\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0ef4"+
		"\3\2\2\2\u0eec\u0eee\7\u01a2\2\2\u0eed\u0eec\3\2\2\2\u0eed\u0eee\3\2\2"+
		"\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef1\7\u00bc\2\2\u0ef0\u0ef2\7!\2\2\u0ef1"+
		"\u0ef0\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u0ef5\5\u024c"+
		"\u0127\2\u0ef4\u0eed\3\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0efe\3\2\2\2\u0ef6"+
		"\u0ef8\7\u00ed\2\2\u0ef7\u0ef6\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8\u0efa"+
		"\3\2\2\2\u0ef9\u0efb\7!\2\2\u0efa\u0ef9\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb"+
		"\u0efc\3\2\2\2\u0efc\u0efd\7\u018b\2\2\u0efd\u0eff\5\u024a\u0126\2\u0efe"+
		"\u0ef7\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f08\3\2\2\2\u0f00\u0f02\7\u00ed"+
		"\2\2\u0f01\u0f00\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f04\3\2\2\2\u0f03"+
		"\u0f05\7!\2\2\u0f04\u0f03\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f06\3\2"+
		"\2\2\u0f06\u0f07\7\63\2\2\u0f07\u0f09\5\u0248\u0125\2\u0f08\u0f01\3\2"+
		"\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0247\3\2\2\2\u0f0a\u0f0d\7\u01c2\2\2\u0f0b"+
		"\u0f0d\5\u02ac\u0157\2\u0f0c\u0f0a\3\2\2\2\u0f0c\u0f0b\3\2\2\2\u0f0d\u0249"+
		"\3\2\2\2\u0f0e\u0f11\7\u01c2\2\2\u0f0f\u0f11\5\u02ac\u0157\2\u0f10\u0f0e"+
		"\3\2\2\2\u0f10\u0f0f\3\2\2\2\u0f11\u024b\3\2\2\2\u0f12\u0f15\7\u01c2\2"+
		"\2\u0f13\u0f15\5\u02ac\u0157\2\u0f14\u0f12\3\2\2\2\u0f14\u0f13\3\2\2\2"+
		"\u0f15\u024d\3\2\2\2\u0f16\u0f19\7\u01c2\2\2\u0f17\u0f19\5\u02ac\u0157"+
		"\2\u0f18\u0f16\3\2\2\2\u0f18\u0f17\3\2\2\2\u0f19\u024f\3\2\2\2\u0f1a\u0f23"+
		"\7h\2\2\u0f1b\u0f1d\7\u0137\2\2\u0f1c\u0f1e\7\30\2\2\u0f1d\u0f1c\3\2\2"+
		"\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f24\3\2\2\2\u0f1f\u0f21\7\u0136\2\2\u0f20"+
		"\u0f22\7\u00de\2\2\u0f21\u0f20\3\2\2\2\u0f21\u0f22\3\2\2\2\u0f22\u0f24"+
		"\3\2\2\2\u0f23\u0f1b\3\2\2\2\u0f23\u0f1f\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25"+
		"\u0f29\5\u0252\u012a\2\u0f26\u0f28\5\u0252\u012a\2\u0f27\u0f26\3\2\2\2"+
		"\u0f28\u0f2b\3\2\2\2\u0f29\u0f27\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u0251"+
		"\3\2\2\2\u0f2b\u0f29\3\2\2\2\u0f2c\u0f2d\7\u01c4\2\2\u0f2d\u0253\3\2\2"+
		"\2\u0f2e\u0f2f\7\u019c\2\2\u0f2f\u0f30\7\u0108\2\2\u0f30\u0f32\t\"\2\2"+
		"\u0f31\u0f33\7\u00de\2\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33"+
		"\u0f34\3\2\2\2\u0f34\u0f35\5\u0256\u012c\2\u0f35\u0255\3\2\2\2\u0f36\u0f39"+
		"\7\3\2\2\u0f37\u0f39\5\u02ac\u0157\2\u0f38\u0f36\3\2\2\2\u0f38\u0f37\3"+
		"\2\2\2\u0f39\u0257\3\2\2\2\u0f3a\u0f43\7\u00e4\2\2\u0f3b\u0f3d\7\u0137"+
		"\2\2\u0f3c\u0f3e\7\30\2\2\u0f3d\u0f3c\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e"+
		"\u0f44\3\2\2\2\u0f3f\u0f41\7\u0136\2\2\u0f40\u0f42\7\u00de\2\2\u0f41\u0f40"+
		"\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f44\3\2\2\2\u0f43\u0f3b\3\2\2\2\u0f43"+
		"\u0f3f\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0f46\t#\2\2\u0f46\u0259\3\2"+
		"\2\2\u0f47\u0f48\7\u0136\2\2\u0f48\u0f49\5\u025c\u012f\2\u0f49\u025b\3"+
		"\2\2\2\u0f4a\u0f4c\7W\2\2\u0f4b\u0f4a\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c"+
		"\u0f50\3\2\2\2\u0f4d\u0f4e\5\u0260\u0131\2\u0f4e\u0f4f\7\u018a\2\2\u0f4f"+
		"\u0f51\3\2\2\2\u0f50\u0f4d\3\2\2\2\u0f50\u0f51\3\2\2\2\u0f51\u0f52\3\2"+
		"\2\2\u0f52\u0f54\5\u0262\u0132\2\u0f53\u0f55\7<\2\2\u0f54\u0f53\3\2\2"+
		"\2\u0f54\u0f55\3\2\2\2\u0f55\u0f75\3\2\2\2\u0f56\u0f58\7\u00de\2\2\u0f57"+
		"\u0f56\3\2\2\2\u0f57\u0f58\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0f5b\7\u019e"+
		"\2\2\u0f5a\u0f5c\7\u00d1\2\2\u0f5b\u0f5a\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c"+
		"\u0f5e\3\2\2\2\u0f5d\u0f5f\7\u0165\2\2\u0f5e\u0f5d\3\2\2\2\u0f5e\u0f5f"+
		"\3\2\2\2\u0f5f\u0f64\3\2\2\2\u0f60\u0f62\7\u00bf\2\2\u0f61\u0f60\3\2\2"+
		"\2\u0f61\u0f62\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f65\5\u0260\u0131\2"+
		"\u0f64\u0f61\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f68\3\2\2\2\u0f66\u0f67"+
		"\7\u018a\2\2\u0f67\u0f69\5\u0262\u0132\2\u0f68\u0f66\3\2\2\2\u0f68\u0f69"+
		"\3\2\2\2\u0f69\u0f6b\3\2\2\2\u0f6a\u0f6c\7<\2\2\u0f6b\u0f6a\3\2\2\2\u0f6b"+
		"\u0f6c\3\2\2\2\u0f6c\u0f72\3\2\2\2\u0f6d\u0f6f\7x\2\2\u0f6e\u0f70\7\u010b"+
		"\2\2\u0f6f\u0f6e\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f71\3\2\2\2\u0f71"+
		"\u0f73\5\u025e\u0130\2\u0f72\u0f6d\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73\u0f75"+
		"\3\2\2\2\u0f74\u0f4b\3\2\2\2\u0f74\u0f57\3\2\2\2\u0f75\u025d\3\2\2\2\u0f76"+
		"\u0f77\5\u02ac\u0157\2\u0f77\u025f\3\2\2\2\u0f78\u0f79\7\u01c2\2\2\u0f79"+
		"\u0261\3\2\2\2\u0f7a\u0f7b\7\u01c2\2\2\u0f7b\u0263\3\2\2\2\u0f7c\u0f81"+
		"\5\u01da\u00ee\2\u0f7d\u0f80\5\u0266\u0134\2\u0f7e\u0f80\7\u00b5\2\2\u0f7f"+
		"\u0f7d\3\2\2\2\u0f7f\u0f7e\3\2\2\2\u0f80\u0f82\3\2\2\2\u0f81\u0f7f\3\2"+
		"\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f86\3\2\2\2\u0f83\u0f85\5\u0268\u0135"+
		"\2\u0f84\u0f83\3\2\2\2\u0f85\u0f88\3\2\2\2\u0f86\u0f84\3\2\2\2\u0f86\u0f87"+
		"\3\2\2\2\u0f87\u0f89\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f89\u0f8a\7\u01bf\2"+
		"\2\u0f8a\u0265\3\2\2\2\u0f8b\u0f8c\7\u01c4\2\2\u0f8c\u0267\3\2\2\2\u0f8d"+
		"\u0f8e\7.\2\2\u0f8e\u0fdb\t\25\2\2\u0f8f\u0f91\7\u00be\2\2\u0f90\u0f92"+
		"\7\u00de\2\2\u0f91\u0f90\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\3\2\2"+
		"\2\u0f93\u0fdb\5\u0274\u013b\2\u0f94\u0f96\7&\2\2\u0f95\u0f97\7\u00de"+
		"\2\2\u0f96\u0f95\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98"+
		"\u0fdb\5\u0274\u013b\2\u0f99\u0fdb\7#\2\2\u0f9a\u0fdb\7\u015a\2\2\u0f9b"+
		"\u0fdb\7\u0146\2\2\u0f9c\u0f9e\7\u0199\2\2\u0f9d\u0f9f\7\u00de\2\2\u0f9e"+
		"\u0f9d\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u0fa1\3\2\2\2\u0fa0\u0f9c\3\2"+
		"\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fdb\7~\2\2\u0fa3"+
		"\u0fdb\5\u020a\u0106\2\u0fa4\u0fdb\7\u00c0\2\2\u0fa5\u0fdb\7(\2\2\u0fa6"+
		"\u0fdb\7/\2\2\u0fa7\u0fa8\7\u00a5\2\2\u0fa8\u0fdb\t$\2\2\u0fa9\u0fdb\7"+
		"\u00c9\2\2\u0faa\u0fdb\7\u00f2\2\2\u0fab\u0fdb\7\u014c\2\2\u0fac\u0fdb"+
		"\7\u018f\2\2\u0fad\u0faf\7\u00ec\2\2\u0fae\u0fb0\7\u0103\2\2\u0faf\u0fae"+
		"\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb2\3\2\2\2\u0fb1\u0fb3\7\u00de\2"+
		"\2\u0fb2\u0fb1\3\2\2\2\u0fb2\u0fb3\3\2\2\2\u0fb3\u0fb5\3\2\2\2\u0fb4\u0fb6"+
		"\7\u0120\2\2\u0fb5\u0fb4\3\2\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6\u0fb7\3\2\2"+
		"\2\u0fb7\u0fdb\5\u0272\u013a\2\u0fb8\u0fba\7C\2\2\u0fb9\u0fbb\7\u0103"+
		"\2\2\u0fba\u0fb9\3\2\2\2\u0fba\u0fbb\3\2\2\2\u0fbb\u0fbd\3\2\2\2\u0fbc"+
		"\u0fbe\7\u00de\2\2\u0fbd\u0fbc\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fc0"+
		"\3\2\2\2\u0fbf\u0fc1\7\u0120\2\2\u0fc0\u0fbf\3\2\2\2\u0fc0\u0fc1\3\2\2"+
		"\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fdb\5\u0272\u013a\2\u0fc3\u0fc5\7\u019c"+
		"\2\2\u0fc4\u0fc6\7\u00de\2\2\u0fc5\u0fc4\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6"+
		"\u0fc7\3\2\2\2\u0fc7\u0fdb\5\u0270\u0139\2\u0fc8\u0fca\7.\2\2\u0fc9\u0fcb"+
		"\7\u01a0\2\2\u0fca\u0fc9\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc\3\2\2"+
		"\2\u0fcc\u0fdb\7\u01a9\2\2\u0fcd\u0fcf\t\33\2\2\u0fce\u0fd0\7\u0151\2"+
		"\2\u0fcf\u0fce\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0fdb\3\2\2\2\u0fd1\u0fd8"+
		"\5\u0236\u011c\2\u0fd2\u0fd9\5\u026a\u0136\2\u0fd3\u0fd5\5\u026c\u0137"+
		"\2\u0fd4\u0fd6\5\u026e\u0138\2\u0fd5\u0fd4\3\2\2\2\u0fd5\u0fd6\3\2\2\2"+
		"\u0fd6\u0fd9\3\2\2\2\u0fd7\u0fd9\5\u026e\u0138\2\u0fd8\u0fd2\3\2\2\2\u0fd8"+
		"\u0fd3\3\2\2\2\u0fd8\u0fd7\3\2\2\2\u0fd9\u0fdb\3\2\2\2\u0fda\u0f8d\3\2"+
		"\2\2\u0fda\u0f8f\3\2\2\2\u0fda\u0f94\3\2\2\2\u0fda\u0f99\3\2\2\2\u0fda"+
		"\u0f9a\3\2\2\2\u0fda\u0f9b\3\2\2\2\u0fda\u0fa0\3\2\2\2\u0fda\u0fa3\3\2"+
		"\2\2\u0fda\u0fa4\3\2\2\2\u0fda\u0fa5\3\2\2\2\u0fda\u0fa6\3\2\2\2\u0fda"+
		"\u0fa7\3\2\2\2\u0fda\u0fa9\3\2\2\2\u0fda\u0faa\3\2\2\2\u0fda\u0fab\3\2"+
		"\2\2\u0fda\u0fac\3\2\2\2\u0fda\u0fad\3\2\2\2\u0fda\u0fb8\3\2\2\2\u0fda"+
		"\u0fc3\3\2\2\2\u0fda\u0fc8\3\2\2\2\u0fda\u0fcd\3\2\2\2\u0fda\u0fd1\3\2"+
		"\2\2\u0fdb\u0269\3\2\2\2\u0fdc\u0fdd\7\u019b\2\2\u0fdd\u0fde\5\u02ac\u0157"+
		"\2\u0fde\u026b\3\2\2\2\u0fdf\u0fe2\7\u00bf\2\2\u0fe0\u0fe3\5\u02ac\u0157"+
		"\2\u0fe1\u0fe3\5\u0270\u0139\2\u0fe2\u0fe0\3\2\2\2\u0fe2\u0fe1\3\2\2\2"+
		"\u0fe3\u026d\3\2\2\2\u0fe4\u0fe5\7\u018a\2\2\u0fe5\u0fe6\5\u02ac\u0157"+
		"\2\u0fe6\u026f\3\2\2\2\u0fe7\u0fe8\7\3\2\2\u0fe8\u0271\3\2\2\2\u0fe9\u0fec"+
		"\5\u02ac\u0157\2\u0fea\u0fec\7\u01c2\2\2\u0feb\u0fe9\3\2\2\2\u0feb\u0fea"+
		"\3\2\2\2\u0fec\u0273\3\2\2\2\u0fed\u0fee\7\u01c2\2\2\u0fee\u0275\3\2\2"+
		"\2\u0fef\u0ff7\5\u0278\u013d\2\u0ff0\u0ff7\5\22\n\2\u0ff1\u0ff7\5\u0282"+
		"\u0142\2\u0ff2\u0ff7\5\u0284\u0143\2\u0ff3\u0ff7\5\u0286\u0144\2\u0ff4"+
		"\u0ff7\5\u0288\u0145\2\u0ff5\u0ff7\5\u028a\u0146\2\u0ff6\u0fef\3\2\2\2"+
		"\u0ff6\u0ff0\3\2\2\2\u0ff6\u0ff1\3\2\2\2\u0ff6\u0ff2\3\2\2\2\u0ff6\u0ff3"+
		"\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff6\u0ff5\3\2\2\2\u0ff7\u0277\3\2\2\2\u0ff8"+
		"\u0ff9\7\u012e\2\2\u0ff9\u0ffa\7\u01bf\2\2\u0ffa\u0ffc\5\u027a\u013e\2"+
		"\u0ffb\u0ffd\5\u027c\u013f\2\u0ffc\u0ffb\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd"+
		"\u0fff\3\2\2\2\u0ffe\u1000\5\u027e\u0140\2\u0fff\u0ffe\3\2\2\2\u0fff\u1000"+
		"\3\2\2\2\u1000\u1001\3\2\2\2\u1001\u1002\7\u01bf\2\2\u1002\u0279\3\2\2"+
		"\2\u1003\u1004\7\u01c4\2\2\u1004\u027b\3\2\2\2\u1005\u1007\7\u00de\2\2"+
		"\u1006\u1005\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u100a"+
		"\t%\2\2\u1009\u100b\7\u012d\2\2\u100a\u1009\3\2\2\2\u100a\u100b\3\2\2"+
		"\2\u100b\u027d\3\2\2\2\u100c\u100e\7\u01a2\2\2\u100d\u100c\3\2\2\2\u100d"+
		"\u100e\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u1010\7\u00ce\2\2\u1010\u1011"+
		"\5\u0280\u0141\2\u1011\u027f\3\2\2\2\u1012\u1013\7\3\2\2\u1013\u0281\3"+
		"\2\2\2\u1014\u1015\7\u00db\2\2\u1015\u1019\7\u01bf\2\2\u1016\u1018\5\20"+
		"\t\2\u1017\u1016\3\2\2\2\u1018\u101b\3\2\2\2\u1019\u1017\3\2\2\2\u1019"+
		"\u101a\3\2\2\2\u101a\u0283\3\2\2\2\u101b\u1019\3\2\2\2\u101c\u101d\7k"+
		"\2\2\u101d\u1021\7\u01bf\2\2\u101e\u1020\5\20\t\2\u101f\u101e\3\2\2\2"+
		"\u1020\u1023\3\2\2\2\u1021\u101f\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u0285"+
		"\3\2\2\2\u1023\u1021\3\2\2\2\u1024\u1025\7j\2\2\u1025\u1029\7\u01bf\2"+
		"\2\u1026\u1028\5\20\t\2\u1027\u1026\3\2\2\2\u1028\u102b\3\2\2\2\u1029"+
		"\u1027\3\2\2\2\u1029\u102a\3\2\2\2\u102a\u0287\3\2\2\2\u102b\u1029\3\2"+
		"\2\2\u102c\u102d\7\u015b\2\2\u102d\u1031\7\u01bf\2\2\u102e\u1030\5\20"+
		"\t\2\u102f\u102e\3\2\2\2\u1030\u1033\3\2\2\2\u1031\u102f\3\2\2\2\u1031"+
		"\u1032\3\2\2\2\u1032\u0289\3\2\2\2\u1033\u1031\3\2\2\2\u1034\u1035\7\u010e"+
		"\2\2\u1035\u1037\7\u01bf\2\2\u1036\u1038\5\u028c\u0147\2\u1037\u1036\3"+
		"\2\2\2\u1037\u1038\3\2\2\2\u1038\u103a\3\2\2\2\u1039\u103b\7\u01bf\2\2"+
		"\u103a\u1039\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u028b\3\2\2\2\u103c\u103e"+
		"\7\35\2\2\u103d\u103f\7\u00de\2\2\u103e\u103d\3\2\2\2\u103e\u103f\3\2"+
		"\2\2\u103f\u1040\3\2\2\2\u1040\u1041\t&\2\2\u1041\u1042\7\u01bf\2\2\u1042"+
		"\u028d\3\2\2\2\u1043\u1044\7U\2\2\u1044\u1045\7\u0159\2\2\u1045\u1047"+
		"\7\u01bf\2\2\u1046\u1048\5\u0292\u014a\2\u1047\u1046\3\2\2\2\u1047\u1048"+
		"\3\2\2\2\u1048\u104a\3\2\2\2\u1049\u104b\5\u0298\u014d\2\u104a\u1049\3"+
		"\2\2\2\u104a\u104b\3\2\2\2\u104b\u104d\3\2\2\2\u104c\u104e\5\u02a8\u0155"+
		"\2\u104d\u104c\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u028f\3\2\2\2\u104f\u1050"+
		"\7\u00d9\2\2\u1050\u1051\7\u0159\2\2\u1051\u1053\7\u01bf\2\2\u1052\u1054"+
		"\5\u02ea\u0176\2\u1053\u1052\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1056\3"+
		"\2\2\2\u1055\u1057\5\u0318\u018d\2\u1056\u1055\3\2\2\2\u1056\u1057\3\2"+
		"\2\2\u1057\u0291\3\2\2\2\u1058\u1059\7\u0169\2\2\u1059\u1060\7\u01bf\2"+
		"\2\u105a\u105c\5\u0294\u014b\2\u105b\u105d\5\u0296\u014c\2\u105c\u105b"+
		"\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u105f\7\u01bf\2"+
		"\2\u105f\u1061\3\2\2\2\u1060\u105a\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u0293"+
		"\3\2\2\2\u1062\u1063\t\'\2\2\u1063\u0295\3\2\2\2\u1064\u1066\7\u01a2\2"+
		"\2\u1065\u1064\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u1067\3\2\2\2\u1067\u1068"+
		"\7o\2\2\u1068\u1069\7\u00f9\2\2\u1069\u0297\3\2\2\2\u106a\u106b\7\u0106"+
		"\2\2\u106b\u1078\7\u01bf\2\2\u106c\u106e\5\u0294\u014b\2\u106d\u106f\5"+
		"\u029a\u014e\2\u106e\u106d\3\2\2\2\u106e\u106f\3\2\2\2\u106f\u1071\3\2"+
		"\2\2\u1070\u1072\5\u02a0\u0151\2\u1071\u1070\3\2\2\2\u1071\u1072\3\2\2"+
		"\2\u1072\u1074\3\2\2\2\u1073\u1075\5\u02a4\u0153\2\u1074\u1073\3\2\2\2"+
		"\u1074\u1075\3\2\2\2\u1075\u1076\3\2\2\2\u1076\u1077\7\u01bf\2\2\u1077"+
		"\u1079\3\2\2\2\u1078\u106c\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u0299\3\2"+
		"\2\2\u107a\u107c\7\u00f7\2\2\u107b\u107d\7\u0165\2\2\u107c\u107b\3\2\2"+
		"\2\u107c\u107d\3\2\2\2\u107d\u107e\3\2\2\2\u107e\u107f\5\u029c\u014f\2"+
		"\u107f\u1080\5\u029e\u0150\2\u1080\u029b\3\2\2\2\u1081\u1082\7\u01c2\2"+
		"\2\u1082\u029d\3\2\2\2\u1083\u1084\t(\2\2\u1084\u029f\3\2\2\2\u1085\u1087"+
		"\7\u012d\2\2\u1086\u1085\3\2\2\2\u1086\u1087\3\2\2\2\u1087\u1089\3\2\2"+
		"\2\u1088\u108a\7B\2\2\u1089\u1088\3\2\2\2\u1089\u108a\3\2\2\2\u108a\u108b"+
		"\3\2\2\2\u108b\u108d\7\u0160\2\2\u108c\u108e\7\u00de\2\2\u108d\u108c\3"+
		"\2\2\2\u108d\u108e\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u1090\5\u02a2\u0152"+
		"\2\u1090\u02a1\3\2\2\2\u1091\u1092\7\u01c4\2\2\u1092\u02a3\3\2\2\2\u1093"+
		"\u1095\7\u015c\2\2\u1094\u1096\7\u00de\2\2\u1095\u1094\3\2\2\2\u1095\u1096"+
		"\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\5\u02a6\u0154\2\u1098\u02a5\3"+
		"\2\2\2\u1099\u109a\7\u01c2\2\2\u109a\u02a7\3\2\2\2\u109b\u109c\7\u016c"+
		"\2\2\u109c\u10a4\7\u01bf\2\2\u109d\u109f\5\u02aa\u0156\2\u109e\u109d\3"+
		"\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u109e\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1"+
		"\u10a2\3\2\2\2\u10a2\u10a3\7\u01bf\2\2\u10a3\u10a5\3\2\2\2\u10a4\u109e"+
		"\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u02a9\3\2\2\2\u10a6\u10a8\5\u02e2\u0172"+
		"\2\u10a7\u10a9\7\u00de\2\2\u10a8\u10a7\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9"+
		"\u10aa\3\2\2\2\u10aa\u10ab\5\u02e4\u0173\2\u10ab\u10cd\3\2\2\2\u10ac\u10ae"+
		"\5\u02e6\u0174\2\u10ad\u10af\7\u00de\2\2\u10ae\u10ad\3\2\2\2\u10ae\u10af"+
		"\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10b1\5\u02e8\u0175\2\u10b1\u10cd\3"+
		"\2\2\2\u10b2\u10b4\7\65\2\2\u10b3\u10b5\7\u00de\2\2\u10b4\u10b3\3\2\2"+
		"\2\u10b4\u10b5\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10cd\5\u02e0\u0171\2"+
		"\u10b7\u10cd\5\u02d4\u016b\2\u10b8\u10cd\5\u02c8\u0165\2\u10b9\u10cd\5"+
		"\u02bc\u015f\2\u10ba\u10cd\5\u02b6\u015c\2\u10bb\u10cd\5\u02ae\u0158\2"+
		"\u10bc\u10be\7p\2\2\u10bd\u10bf\7\u00de\2\2\u10be\u10bd\3\2\2\2\u10be"+
		"\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10cd\7D\2\2\u10c1\u10c3\7g\2"+
		"\2\u10c2\u10c4\7\u00de\2\2\u10c3\u10c2\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4"+
		"\u10c5\3\2\2\2\u10c5\u10cd\5\u02ac\u0157\2\u10c6\u10c7\7d\2\2\u10c7\u10c9"+
		"\7\u0171\2\2\u10c8\u10ca\7\u00de\2\2\u10c9\u10c8\3\2\2\2\u10c9\u10ca\3"+
		"\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10cd\5\u02ac\u0157\2\u10cc\u10a6\3\2"+
		"\2\2\u10cc\u10ac\3\2\2\2\u10cc\u10b2\3\2\2\2\u10cc\u10b7\3\2\2\2\u10cc"+
		"\u10b8\3\2\2\2\u10cc\u10b9\3\2\2\2\u10cc\u10ba\3\2\2\2\u10cc\u10bb\3\2"+
		"\2\2\u10cc\u10bc\3\2\2\2\u10cc\u10c1\3\2\2\2\u10cc\u10c6\3\2\2\2\u10cd"+
		"\u02ab\3\2\2\2\u10ce\u10d3\7\u01c4\2\2\u10cf\u10d0\t\4\2\2\u10d0\u10d2"+
		"\7\u01c4\2\2\u10d1\u10cf\3\2\2\2\u10d2\u10d5\3\2\2\2\u10d3\u10d1\3\2\2"+
		"\2\u10d3\u10d4\3\2\2\2\u10d4\u02ad\3\2\2\2\u10d5\u10d3\3\2\2\2\u10d6\u10d8"+
		"\7e\2\2\u10d7\u10d9\7\u0163\2\2\u10d8\u10d7\3\2\2\2\u10d8\u10d9\3\2\2"+
		"\2\u10d9\u10db\3\2\2\2\u10da\u10dc\7\u00de\2\2\u10db\u10da\3\2\2\2\u10db"+
		"\u10dc\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10de\5\u02b0\u0159\2\u10de\u02af"+
		"\3\2\2\2\u10df\u10e1\5\u02b2\u015a\2\u10e0\u10e2\7\u01a2\2\2\u10e1\u10e0"+
		"\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e4\7\u011f\2"+
		"\2\u10e4\u10e5\7\u0179\2\2\u10e5\u10e6\5\u02b4\u015b\2\u10e6\u10e9\3\2"+
		"\2\2\u10e7\u10e9\7\3\2\2\u10e8\u10df\3\2\2\2\u10e8\u10e7\3\2\2\2\u10e9"+
		"\u02b1\3\2\2\2\u10ea\u10eb\7\3\2\2\u10eb\u02b3\3\2\2\2\u10ec\u10ed\7\3"+
		"\2\2\u10ed\u02b5\3\2\2\2\u10ee\u10ef\7=\2\2\u10ef\u10f1\5\u02b8\u015d"+
		"\2\u10f0\u10f2\7\u00de\2\2\u10f1\u10f0\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2"+
		"\u10f4\3\2\2\2\u10f3\u10f5\5\u02ba\u015e\2\u10f4\u10f3\3\2\2\2\u10f5\u10f6"+
		"\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u02b7\3\2\2\2\u10f8"+
		"\u10f9\7\u01c4\2\2\u10f9\u02b9\3\2\2\2\u10fa\u10fd\5\u02ce\u0168\2\u10fb"+
		"\u10fc\t\16\2\2\u10fc\u10fe\5\u02d0\u0169\2\u10fd\u10fb\3\2\2\2\u10fd"+
		"\u10fe\3\2\2\2\u10fe\u02bb\3\2\2\2\u10ff\u1101\7\u017a\2\2\u1100\u1102"+
		"\7<\2\2\u1101\u1100\3\2\2\2\u1101\u1102\3\2\2\2\u1102\u1104\3\2\2\2\u1103"+
		"\u1105\5\u02be\u0160\2\u1104\u1103\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1104"+
		"\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u02bd\3\2\2\2\u1108\u110a\5\u02c0\u0161"+
		"\2\u1109\u1108\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u1109\3\2\2\2\u110b\u110c"+
		"\3\2\2\2\u110c\u110e\3\2\2\2\u110d\u110f\5\u02c2\u0162\2\u110e\u110d\3"+
		"\2\2\2\u110e\u110f\3\2\2\2\u110f\u02bf\3\2\2\2\u1110\u1112\5\u02c4\u0163"+
		"\2\u1111\u1110\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1111\3\2\2\2\u1113\u1114"+
		"\3\2\2\2\u1114\u1116\3\2\2\2\u1115\u1117\t)\2\2\u1116\u1115\3\2\2\2\u1116"+
		"\u1117\3\2\2\2\u1117\u1119\3\2\2\2\u1118\u111a\5\u02c6\u0164\2\u1119\u1118"+
		"\3\2\2\2\u111a\u111b\3\2\2\2\u111b\u1119\3\2\2\2\u111b\u111c\3\2\2\2\u111c"+
		"\u02c1\3\2\2\2\u111d\u111e\7\u00d1\2\2\u111e\u111f\5\u02a2\u0152\2\u111f"+
		"\u02c3\3\2\2\2\u1120\u1121\7\u01c4\2\2\u1121\u02c5\3\2\2\2\u1122\u1123"+
		"\7\u01c2\2\2\u1123\u02c7\3\2\2\2\u1124\u1125\7\f\2\2\u1125\u1127\5\u02a2"+
		"\u0152\2\u1126\u1128\7\u00de\2\2\u1127\u1126\3\2\2\2\u1127\u1128\3\2\2"+
		"\2\u1128\u1129\3\2\2\2\u1129\u112a\5\u02ca\u0166\2\u112a\u02c9\3\2\2\2"+
		"\u112b\u1136\7\37\2\2\u112c\u1136\7\u016e\2\2\u112d\u1136\7\u016f\2\2"+
		"\u112e\u1136\7\u00fe\2\2\u112f\u1136\7\u0084\2\2\u1130\u1132\5\u02cc\u0167"+
		"\2\u1131\u1130\3\2\2\2\u1132\u1133\3\2\2\2\u1133\u1131\3\2\2\2\u1133\u1134"+
		"\3\2\2\2\u1134\u1136\3\2\2\2\u1135\u112b\3\2\2\2\u1135\u112c\3\2\2\2\u1135"+
		"\u112d\3\2\2\2\u1135\u112e\3\2\2\2\u1135\u112f\3\2\2\2\u1135\u1131\3\2"+
		"\2\2\u1136\u02cb\3\2\2\2\u1137\u113a\5\u02ce\u0168\2\u1138\u1139\t\16"+
		"\2\2\u1139\u113b\5\u02d0\u0169\2\u113a\u1138\3\2\2\2\u113a\u113b\3\2\2"+
		"\2\u113b\u1144\3\2\2\2\u113c\u113f\5\u02ce\u0168\2\u113d\u113e\7\22\2"+
		"\2\u113e\u1140\5\u02d2\u016a\2\u113f\u113d\3\2\2\2\u1140\u1141\3\2\2\2"+
		"\u1141\u113f\3\2\2\2\u1141\u1142\3\2\2\2\u1142\u1144\3\2\2\2\u1143\u1137"+
		"\3\2\2\2\u1143\u113c\3\2\2\2\u1144\u02cd\3\2\2\2\u1145\u1146\t\34\2\2"+
		"\u1146\u02cf\3\2\2\2\u1147\u1148\t\34\2\2\u1148\u02d1\3\2\2\2\u1149\u114a"+
		"\t\34\2\2\u114a\u02d3\3\2\2\2\u114b\u114c\7\u0178\2\2\u114c\u1151\5\u02de"+
		"\u0170\2\u114d\u114f\7\u00de\2\2\u114e\u114d\3\2\2\2\u114e\u114f\3\2\2"+
		"\2\u114f\u1150\3\2\2\2\u1150\u1152\5\u02dc\u016f\2\u1151\u114e\3\2\2\2"+
		"\u1151\u1152\3\2\2\2\u1152\u115b\3\2\2\2\u1153\u1155\5\u02d6\u016c\2\u1154"+
		"\u1156\5\u02d8\u016d\2\u1155\u1154\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u115c"+
		"\3\2\2\2\u1157\u1159\5\u02d8\u016d\2\u1158\u115a\5\u02d6\u016c\2\u1159"+
		"\u1158\3\2\2\2\u1159\u115a\3\2\2\2\u115a\u115c\3\2\2\2\u115b\u1153\3\2"+
		"\2\2\u115b\u1157\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u02d5\3\2\2\2\u115d"+
		"\u115f\7\u010b\2\2\u115e\u1160\7\u0171\2\2\u115f\u115e\3\2\2\2\u115f\u1160"+
		"\3\2\2\2\u1160\u1162\3\2\2\2\u1161\u1163\7\u00de\2\2\u1162\u1161\3\2\2"+
		"\2\u1162\u1163\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1165\5\u02da\u016e\2"+
		"\u1165\u02d7\3\2\2\2\u1166\u1168\7\u0109\2\2\u1167\u1169\7\u0171\2\2\u1168"+
		"\u1167\3\2\2\2\u1168\u1169\3\2\2\2\u1169\u116b\3\2\2\2\u116a\u116c\7\u00de"+
		"\2\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2\2\2\u116c\u116d\3\2\2\2\u116d"+
		"\u116e\5\u02da\u016e\2\u116e\u02d9\3\2\2\2\u116f\u1170\7\u01c4\2\2\u1170"+
		"\u02db\3\2\2\2\u1171\u1172\7\u01c4\2\2\u1172\u02dd\3\2\2\2\u1173\u1174"+
		"\7\u01c2\2\2\u1174\u02df\3\2\2\2\u1175\u1176\7\u01c4\2\2\u1176\u02e1\3"+
		"\2\2\2\u1177\u1178\t*\2\2\u1178\u02e3\3\2\2\2\u1179\u117a\7\u01c4\2\2"+
		"\u117a\u02e5\3\2\2\2\u117b\u117c\t+\2\2\u117c\u02e7\3\2\2\2\u117d\u117e"+
		"\7\u01c4\2\2\u117e\u02e9\3\2\2\2\u117f\u1180\7\u00b3\2\2\u1180\u1184\7"+
		"\u01bf\2\2\u1181\u1183\5\u02ec\u0177\2\u1182\u1181\3\2\2\2\u1183\u1186"+
		"\3\2\2\2\u1184\u1182\3\2\2\2\u1184\u1185\3\2\2\2\u1185\u02eb\3\2\2\2\u1186"+
		"\u1184\3\2\2\2\u1187\u1189\7\u015d\2\2\u1188\u118a\7\u010d\2\2\u1189\u1188"+
		"\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\5\u0316\u018c"+
		"\2\u118c\u118e\5\u0310\u0189\2\u118d\u118f\5\u02f8\u017d\2\u118e\u118d"+
		"\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1191\3\2\2\2\u1190\u1192\5\u0302\u0182"+
		"\2\u1191\u1190\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u1194\3\2\2\2\u1193\u1195"+
		"\5\u030a\u0186\2\u1194\u1193\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u1197\3"+
		"\2\2\2\u1196\u1198\5\u0308\u0185\2\u1197\u1196\3\2\2\2\u1197\u1198\3\2"+
		"\2\2\u1198\u119a\3\2\2\2\u1199\u119b\5\u02fe\u0180\2\u119a\u1199\3\2\2"+
		"\2\u119a\u119b\3\2\2\2\u119b\u119d\3\2\2\2\u119c\u119e\5\u02fc\u017f\2"+
		"\u119d\u119c\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11a0\3\2\2\2\u119f\u11a1"+
		"\5\u02f6\u017c\2\u11a0\u119f\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a5\3"+
		"\2\2\2\u11a2\u11a4\5\u02f2\u017a\2\u11a3\u11a2\3\2\2\2\u11a4\u11a7\3\2"+
		"\2\2\u11a5\u11a3\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11a9\3\2\2\2\u11a7"+
		"\u11a5\3\2\2\2\u11a8\u11aa\5\u0304\u0183\2\u11a9\u11a8\3\2\2\2\u11a9\u11aa"+
		"\3\2\2\2\u11aa\u11ac\3\2\2\2\u11ab\u11ad\5\u02ee\u0178\2\u11ac\u11ab\3"+
		"\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u11ae\3\2\2\2\u11ae\u11af\7\u01bf\2\2"+
		"\u11af\u02ed\3\2\2\2\u11b0\u11b2\7\u00b2\2\2\u11b1\u11b0\3\2\2\2\u11b1"+
		"\u11b2\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3\u11b5\7\u0171\2\2\u11b4\u11b6"+
		"\7\u00de\2\2\u11b5\u11b4\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11b7\3\2\2"+
		"\2\u11b7\u11b8\5\u02f0\u0179\2\u11b8\u02ef\3\2\2\2\u11b9\u11ba\5\u02ac"+
		"\u0157\2\u11ba\u02f1\3\2\2\2\u11bb\u11bd\7\24\2\2\u11bc\u11bb\3\2\2\2"+
		"\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11c0\7\u0136\2\2\u11bf"+
		"\u11c1\7\u00e3\2\2\u11c0\u11bf\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c3"+
		"\3\2\2\2\u11c2\u11c4\7\u00de\2\2\u11c3\u11c2\3\2\2\2\u11c3\u11c4\3\2\2"+
		"\2\u11c4\u11c5\3\2\2\2\u11c5\u11ca\5\u02f4\u017b\2\u11c6\u11c8\7\u01a2"+
		"\2\2\u11c7\u11c6\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9"+
		"\u11cb\7\u0082\2\2\u11ca\u11c7\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb\u11cd"+
		"\3\2\2\2\u11cc\u11ce\t\t\2\2\u11cd\u11cc\3\2\2\2\u11cd\u11ce\3\2\2\2\u11ce"+
		"\u02f3\3\2\2\2\u11cf\u11da\5\u02ac\u0157\2\u11d0\u11d1\7\u01c4\2\2\u11d1"+
		"\u11d2\7\u01b4\2\2\u11d2\u11d6\5\u02ac\u0157\2\u11d3\u11d5\5\u02ac\u0157"+
		"\2\u11d4\u11d3\3\2\2\2\u11d5\u11d8\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d6\u11d7"+
		"\3\2\2\2\u11d7\u11da\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d9\u11cf\3\2\2\2\u11d9"+
		"\u11d0\3\2\2\2\u11da\u02f5\3\2\2\2\u11db\u11dd\7\5\2\2\u11dc\u11de\7\u00f9"+
		"\2\2\u11dd\u11dc\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11e0\3\2\2\2\u11df"+
		"\u11e1\7\u00de\2\2\u11e0\u11df\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11e3"+
		"\3\2\2\2\u11e2\u11db\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4"+
		"\u11ed\t,\2\2\u11e5\u11e7\7\u013c\2\2\u11e6\u11e8\7\u00e3\2\2\u11e7\u11e6"+
		"\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u11ea\3\2\2\2\u11e9\u11eb\7\u00de\2"+
		"\2\u11ea\u11e9\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11ee"+
		"\5\u02ac\u0157\2\u11ed\u11e5\3\2\2\2\u11ed\u11ee\3\2\2\2\u11ee\u02f7\3"+
		"\2\2\2\u11ef\u11f0\7\u0148\2\2\u11f0\u11f2\5\u02fa\u017e\2\u11f1\u11f3"+
		"\t-\2\2\u11f2\u11f1\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u02f9\3\2\2\2\u11f4"+
		"\u11f5\7\u01c2\2\2\u11f5\u02fb\3\2\2\2\u11f6\u11f7\7\u0136\2\2\u11f7\u11f9"+
		"\7v\2\2\u11f8\u11fa\7\u00de\2\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa\3\2\2"+
		"\2\u11fa\u11fb\3\2\2\2\u11fb\u11fc\7\u016e\2\2\u11fc\u02fd\3\2\2\2\u11fd"+
		"\u11ff\7\u0117\2\2\u11fe\u1200\7;\2\2\u11ff\u11fe\3\2\2\2\u11ff\u1200"+
		"\3\2\2\2\u1200\u1202\3\2\2\2\u1201\u1203\7\u00de\2\2\u1202\u1201\3\2\2"+
		"\2\u1202\u1203\3\2\2\2\u1203\u1204\3\2\2\2\u1204\u1205\5\u0300\u0181\2"+
		"\u1205\u02ff\3\2\2\2\u1206\u1207\7\3\2\2\u1207\u0301\3\2\2\2\u1208\u120a"+
		"\7\u0111\2\2\u1209\u120b\7\u00de\2\2\u120a\u1209\3\2\2\2\u120a\u120b\3"+
		"\2\2\2\u120b\u120d\3\2\2\2\u120c\u1208\3\2\2\2\u120c\u120d\3\2\2\2\u120d"+
		"\u1213\3\2\2\2\u120e\u1214\7\u0161\2\2\u120f\u1210\7\u00ec\2\2\u1210\u1214"+
		"\7\u0161\2\2\u1211\u1214\7\u013c\2\2\u1212\u1214\7\u00d3\2\2\u1213\u120e"+
		"\3\2\2\2\u1213\u120f\3\2\2\2\u1213\u1211\3\2\2\2\u1213\u1212\3\2\2\2\u1214"+
		"\u0303\3\2\2\2\u1215\u1217\7\u00f0\2\2\u1216\u1218\7\u00f9\2\2\u1217\u1216"+
		"\3\2\2\2\u1217\u1218\3\2\2\2\u1218\u121a\3\2\2\2\u1219\u121b\7\u00de\2"+
		"\2\u121a\u1219\3\2\2\2\u121a\u121b\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121d"+
		"\5\u0306\u0184\2\u121d\u0305\3\2\2\2\u121e\u1220\7\u00f5\2\2\u121f\u1221"+
		"\7\u01a2\2\2\u1220\u121f\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1222\3\2\2"+
		"\2\u1222\u1223\7\u00f0\2\2\u1223\u1224\7\u010b\2\2\u1224\u1225\7\u00fc"+
		"\2\2\u1225\u1234\7\u0137\2\2\u1226\u1230\7$\2\2\u1227\u1229\7\u01a2\2"+
		"\2\u1228\u1227\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u122e\3\2\2\2\u122a\u122b"+
		"\7\u00f0\2\2\u122b\u122c\7\u010b\2\2\u122c\u122f\7\u0136\2\2\u122d\u122f"+
		"\7\u0152\2\2\u122e\u122a\3\2\2\2\u122e\u122d\3\2\2\2\u122f\u1231\3\2\2"+
		"\2\u1230\u1228\3\2\2\2\u1230\u1231\3\2\2\2\u1231\u1234\3\2\2\2\u1232\u1234"+
		"\7\u00aa\2\2\u1233\u121e\3\2\2\2\u1233\u1226\3\2\2\2\u1233\u1232\3\2\2"+
		"\2\u1234\u0307\3\2\2\2\u1235\u1237\7A\2\2\u1236\u1238\7\u00de\2\2\u1237"+
		"\u1236\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1239\3\2\2\2\u1239\u123a\5\u02a2"+
		"\u0152\2\u123a\u0309\3\2\2\2\u123b\u123d\7\61\2\2\u123c\u123e\7W\2\2\u123d"+
		"\u123c\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u1242\3\2\2\2\u123f\u1240\5\u030c"+
		"\u0187\2\u1240\u1241\7\u018a\2\2\u1241\u1243\3\2\2\2\u1242\u123f\3\2\2"+
		"\2\u1242\u1243\3\2\2\2\u1243\u1244\3\2\2\2\u1244\u1245\5\u030e\u0188\2"+
		"\u1245\u1246\t.\2\2\u1246\u030b\3\2\2\2\u1247\u1248\7\u01c2\2\2\u1248"+
		"\u030d\3\2\2\2\u1249\u124a\7\u01c2\2\2\u124a\u030f\3\2\2\2\u124b\u124d"+
		"\7 \2\2\u124c\u124e\7\u018a\2\2\u124d\u124c\3\2\2\2\u124d\u124e\3\2\2"+
		"\2\u124e\u124f\3\2\2\2\u124f\u1250\5\u0312\u018a\2\u1250\u0311\3\2\2\2"+
		"\u1251\u1253\t/\2\2\u1252\u1251\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1254"+
		"\3\2\2\2\u1254\u125d\5\u0314\u018b\2\u1255\u1257\7\u00fc\2\2\u1256\u1255"+
		"\3\2\2\2\u1256\u1257\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u125a\t\27\2\2"+
		"\u1259\u125b\7\u00b2\2\2\u125a\u1259\3\2\2\2\u125a\u125b\3\2\2\2\u125b"+
		"\u125d\3\2\2\2\u125c\u1252\3\2\2\2\u125c\u1256\3\2\2\2\u125d\u0313\3\2"+
		"\2\2\u125e\u1263\7\3\2\2\u125f\u1263\5\u02ac\u0157\2\u1260\u1263\7}\2"+
		"\2\u1261\u1263\7\u0127\2\2\u1262\u125e\3\2\2\2\u1262\u125f\3\2\2\2\u1262"+
		"\u1260\3\2\2\2\u1262\u1261\3\2\2\2\u1263\u0315\3\2\2\2\u1264\u1265\7\u01c4"+
		"\2\2\u1265\u0317\3\2\2\2\u1266\u1267\7\u00e0\2\2\u1267\u1281\7\u01bf\2"+
		"\2\u1268\u126a\5\u0332\u019a\2\u1269\u1268\3\2\2\2\u126a\u126d\3\2\2\2"+
		"\u126b\u1269\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u1271\3\2\2\2\u126d\u126b"+
		"\3\2\2\2\u126e\u1270\5\u032e\u0198\2\u126f\u126e\3\2\2\2\u1270\u1273\3"+
		"\2\2\2\u1271\u126f\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u1277\3\2\2\2\u1273"+
		"\u1271\3\2\2\2\u1274\u1276\5\u0322\u0192\2\u1275\u1274\3\2\2\2\u1276\u1279"+
		"\3\2\2\2\u1277\u1275\3\2\2\2\u1277\u1278\3\2\2\2\u1278\u127d\3\2\2\2\u1279"+
		"\u1277\3\2\2\2\u127a\u127c\5\u031a\u018e\2\u127b\u127a\3\2\2\2\u127c\u127f"+
		"\3\2\2\2\u127d\u127b\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u1280\3\2\2\2\u127f"+
		"\u127d\3\2\2\2\u1280\u1282\7\u01bf\2\2\u1281\u126b\3\2\2\2\u1281\u1282"+
		"\3\2\2\2\u1282\u0319\3\2\2\2\u1283\u1284\7\u00fc\2\2\u1284\u1286\7\u00b2"+
		"\2\2\u1285\u1287\7\u0181\2\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2\2\2\u1287"+
		"\u1289\3\2\2\2\u1288\u128a\7W\2\2\u1289\u1288\3\2\2\2\u1289\u128a\3\2"+
		"\2\2\u128a\u128c\3\2\2\2\u128b\u128d\5\u031c\u018f\2";
	private static final String _serializedATNSegment2 =
		"\u128c\u128b\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u128c\3\2\2\2\u128e\u128f"+
		"\3\2\2\2\u128f\u031b\3\2\2\2\u1290\u1293\5\u031e\u0190\2\u1291\u1292\7"+
		"\u0123\2\2\u1292\u1294\5\u0320\u0191\2\u1293\u1291\3\2\2\2\u1293\u1294"+
		"\3\2\2\2\u1294\u031d\3\2\2\2\u1295\u1296\7\u01c4\2\2\u1296\u031f\3\2\2"+
		"\2\u1297\u1298\7\u01c2\2\2\u1298\u0321\3\2\2\2\u1299\u129c\7\u0147\2\2"+
		"\u129a\u129b\7\u010b\2\2\u129b\u129d\5\u0316\u018c\2\u129c\u129a\3\2\2"+
		"\2\u129c\u129d\3\2\2\2\u129d\u129f\3\2\2\2\u129e\u12a0\7\u00a8\2\2\u129f"+
		"\u129e\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a1\3\2\2\2\u12a1\u12a2\5\u0324"+
		"\u0193\2\u12a2\u0323\3\2\2\2\u12a3\u12a5\5\u032a\u0196\2\u12a4\u12a6\7"+
		"\u0108\2\2\u12a5\u12a4\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6\u12a7\3\2\2\2"+
		"\u12a7\u12a8\5\u0316\u018c\2\u12a8\u12ae\3\2\2\2\u12a9\u12aa\5\u0326\u0194"+
		"\2\u12aa\u12ab\7>\2\2\u12ab\u12ae\3\2\2\2\u12ac\u12ae\5\u0328\u0195\2"+
		"\u12ad\u12a3\3\2\2\2\u12ad\u12a9\3\2\2\2\u12ad\u12ac\3\2\2\2\u12ae\u0325"+
		"\3\2\2\2\u12af\u12b0\7\u01c2\2\2\u12b0\u0327\3\2\2\2\u12b1\u12b2\7\u01c4"+
		"\2\2\u12b2\u0329\3\2\2\2\u12b3\u12b5\7\u0088\2\2\u12b4\u12b6\7\u0108\2"+
		"\2\u12b5\u12b4\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12b8\3\2\2\2\u12b7\u12b3"+
		"\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u12b9\3\2\2\2\u12b9\u12be\t\27\2\2"+
		"\u12ba\u12bb\5\u032c\u0197\2\u12bb\u12bc\7\u0137\2\2\u12bc\u12be\3\2\2"+
		"\2\u12bd\u12b7\3\2\2\2\u12bd\u12ba\3\2\2\2\u12be\u032b\3\2\2\2\u12bf\u12c0"+
		"\7\u01c2\2\2\u12c0\u032d\3\2\2\2\u12c1\u12c3\7\u0155\2\2\u12c2\u12c4\t"+
		"\60\2\2\u12c3\u12c2\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12c6\3\2\2\2\u12c5"+
		"\u12c7\7\31\2\2\u12c6\u12c5\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u12c9\3"+
		"\2\2\2\u12c8\u12ca\7\u00bd\2\2\u12c9\u12c8\3\2\2\2\u12c9\u12ca\3\2\2\2"+
		"\u12ca\u12cb\3\2\2\2\u12cb\u12cd\5\u0330\u0199\2\u12cc\u12ce\5\u0330\u0199"+
		"\2\u12cd\u12cc\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u12cd\3\2\2\2\u12cf\u12d0"+
		"\3\2\2\2\u12d0\u032f\3\2\2\2\u12d1\u12d2\7\u01c4\2\2\u12d2\u0331\3\2\2"+
		"\2\u12d3\u12d5\7\27\2\2\u12d4\u12d6\5\u0334\u019b\2\u12d5\u12d4\3\2\2"+
		"\2\u12d6\u12d7\3\2\2\2\u12d7\u12d5\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12d9"+
		"\3\2\2\2\u12d9\u12db\7\u010b\2\2\u12da\u12dc\5\u0316\u018c\2\u12db\u12da"+
		"\3\2\2\2\u12dc\u12dd\3\2\2\2\u12dd\u12db\3\2\2\2\u12dd\u12de\3\2\2\2\u12de"+
		"\u0333\3\2\2\2\u12df\u12ee\7s\2\2\u12e0\u12e1\7\u00ad\2\2\u12e1\u12ee"+
		"\5\u033a\u019e\2\u12e2\u12ee\7\u00b6\2\2\u12e3\u12ee\7\u00f1\2\2\u12e4"+
		"\u12ee\7\u00f6\2\2\u12e5\u12e7\t\61\2\2\u12e6\u12e5\3\2\2\2\u12e6\u12e7"+
		"\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12e9\7\u0125\2\2\u12e9\u12ee\5\u0338"+
		"\u019d\2\u12ea\u12ee\7\u0129\2\2\u12eb\u12ec\7\u01a1\2\2\u12ec\u12ee\5"+
		"\u0336\u019c\2\u12ed\u12df\3\2\2\2\u12ed\u12e0\3\2\2\2\u12ed\u12e2\3\2"+
		"\2\2\u12ed\u12e3\3\2\2\2\u12ed\u12e4\3\2\2\2\u12ed\u12e6\3\2\2\2\u12ed"+
		"\u12ea\3\2\2\2\u12ed\u12eb\3\2\2\2\u12ee\u0335\3\2\2\2\u12ef\u12f0\7\u01c2"+
		"\2\2\u12f0\u0337\3\2\2\2\u12f1\u12f2\7\u01c2\2\2\u12f2\u0339\3\2\2\2\u12f3"+
		"\u12f4\7\u01c2\2\2\u12f4\u033b\3\2\2\2\u12f5\u12f6\b\u019f\1\2\u12f6\u12f7"+
		"\7\u01b9\2\2\u12f7\u12f8\5\u033c\u019f\2\u12f8\u12f9\7\u01ba\2\2\u12f9"+
		"\u1300\3\2\2\2\u12fa\u12fb\5\u0342\u01a2\2\u12fb\u12fc\5\u033c\u019f\5"+
		"\u12fc\u1300\3\2\2\2\u12fd\u1300\5\u0354\u01ab\2\u12fe\u1300\5\u033e\u01a0"+
		"\2\u12ff\u12f5\3\2\2\2\u12ff\u12fa\3\2\2\2\u12ff\u12fd\3\2\2\2\u12ff\u12fe"+
		"\3\2\2\2\u1300\u1307\3\2\2\2\u1301\u1302\f\6\2\2\u1302\u1303\5\u0340\u01a1"+
		"\2\u1303\u1304\5\u033c\u019f\7\u1304\u1306\3\2\2\2\u1305\u1301\3\2\2\2"+
		"\u1306\u1309\3\2\2\2\u1307\u1305\3\2\2\2\u1307\u1308\3\2\2\2\u1308\u033d"+
		"\3\2\2\2\u1309\u1307\3\2\2\2\u130a\u130e\7\u01c2\2\2\u130b\u130e\7\3\2"+
		"\2\u130c\u130e\5\32\16\2\u130d\u130a\3\2\2\2\u130d\u130b\3\2\2\2\u130d"+
		"\u130c\3\2\2\2\u130e\u033f\3\2\2\2\u130f\u1316\7\u01af\2\2\u1310\u1316"+
		"\7\u01b0\2\2\u1311\u1316\7\u01b1\2\2\u1312\u1316\7\u01b2\2\2\u1313\u1314"+
		"\7\u01b1\2\2\u1314\u1316\7\u01b1\2\2\u1315\u130f\3\2\2\2\u1315\u1310\3"+
		"\2\2\2\u1315\u1311\3\2\2\2\u1315\u1312\3\2\2\2\u1315\u1313\3\2\2\2\u1316"+
		"\u0341\3\2\2\2\u1317\u1318\t\62\2\2\u1318\u0343\3\2\2\2\u1319\u131a\b"+
		"\u01a3\1\2\u131a\u131b\7\u01b9\2\2\u131b\u131c\5\u0344\u01a3\2\u131c\u131d"+
		"\7\u01ba\2\2\u131d\u1322\3\2\2\2\u131e\u131f\7\u0102\2\2\u131f\u1322\5"+
		"\u0344\u01a3\4\u1320\u1322\5\u0346\u01a4\2\u1321\u1319\3\2\2\2\u1321\u131e"+
		"\3\2\2\2\u1321\u1320\3\2\2\2\u1322\u1329\3\2\2\2\u1323\u1324\f\5\2\2\u1324"+
		"\u1325\5\u034a\u01a6\2\u1325\u1326\5\u0344\u01a3\6\u1326\u1328\3\2\2\2"+
		"\u1327\u1323\3\2\2\2\u1328\u132b\3\2\2\2\u1329\u1327\3\2\2\2\u1329\u132a"+
		"\3\2\2\2\u132a\u0345\3\2\2\2\u132b\u1329\3\2\2\2\u132c\u132d\5\u033c\u019f"+
		"\2\u132d\u1332\5\u0348\u01a5\2\u132e\u132f\t\63\2\2\u132f\u1331\5\u0348"+
		"\u01a5\2\u1330\u132e\3\2\2\2\u1331\u1334\3\2\2\2\u1332\u1330\3\2\2\2\u1332"+
		"\u1333\3\2\2\2\u1333\u1337\3\2\2\2\u1334\u1332\3\2\2\2\u1335\u1337\5\u02ac"+
		"\u0157\2\u1336\u132c\3\2\2\2\u1336\u1335\3\2\2\2\u1337\u0347\3\2\2\2\u1338"+
		"\u1339\5\u0350\u01a9\2\u1339\u133a\5\u033c\u019f\2\u133a\u134a\3\2\2\2"+
		"\u133b\u133d\7\u00de\2\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2\2\u133d"+
		"\u133f\3\2\2\2\u133e\u1340\7\u0102\2\2\u133f\u133e\3\2\2\2\u133f\u1340"+
		"\3\2\2\2\u1340\u1343\3\2\2\2\u1341\u1344\5\u034e\u01a8\2\u1342\u1344\5"+
		"\u034c\u01a7\2\u1343\u1341\3\2\2\2\u1343\u1342\3\2\2\2\u1344\u134a\3\2"+
		"\2\2\u1345\u1347\7\u00de\2\2\u1346\u1345\3\2\2\2\u1346\u1347\3\2\2\2\u1347"+
		"\u1348\3\2\2\2\u1348\u134a\t\f\2\2\u1349\u1338\3\2\2\2\u1349\u133c\3\2"+
		"\2\2\u1349\u1346\3\2\2\2\u134a\u0349\3\2\2\2\u134b\u134c\t\63\2\2\u134c"+
		"\u034b\3\2\2\2\u134d\u134e\t\64\2\2\u134e\u034d\3\2\2\2\u134f\u1350\t"+
		"\65\2\2\u1350\u034f\3\2\2\2\u1351\u1353\7\u00de\2\2\u1352\u1351\3\2\2"+
		"\2\u1352\u1353\3\2\2\2\u1353\u1385\3\2\2\2\u1354\u1356\7\u0102\2\2\u1355"+
		"\u1354\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u136f\3\2\2\2\u1357\u1359\7\u00c6"+
		"\2\2\u1358\u135a\7\u0184\2\2\u1359\u1358\3\2\2\2\u1359\u135a\3\2\2\2\u135a"+
		"\u1370\3\2\2\2\u135b\u135d\7\u01b8\2\2\u135c\u135e\7\u0184\2\2\u135d\u135c"+
		"\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u1370\3\2\2\2\u135f\u1361\7\u00e8\2"+
		"\2\u1360\u1362\7\u0184\2\2\u1361\u1360\3\2\2\2\u1361\u1362\3\2\2\2\u1362"+
		"\u1370\3\2\2\2\u1363\u1365\7\u01b5\2\2\u1364\u1366\7\u0184\2\2\u1365\u1364"+
		"\3\2\2\2\u1365\u1366\3\2\2\2\u1366\u1370\3\2\2\2\u1367\u1369\7\u00a4\2"+
		"\2\u1368\u136a\7\u018a\2\2\u1369\u1368\3\2\2\2\u1369\u136a\3\2\2\2\u136a"+
		"\u1370\3\2\2\2\u136b\u136d\7\u01b4\2\2\u136c\u136e\7\u018a\2\2\u136d\u136c"+
		"\3\2\2\2\u136d\u136e\3\2\2\2\u136e\u1370\3\2\2\2\u136f\u1357\3\2\2\2\u136f"+
		"\u135b\3\2\2\2\u136f\u135f\3\2\2\2\u136f\u1363\3\2\2\2\u136f\u1367\3\2"+
		"\2\2\u136f\u136b\3\2\2\2\u1370\u1386\3\2\2\2\u1371\u1373\7\u00c6\2\2\u1372"+
		"\u1374\7\u0184\2\2\u1373\u1372\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1375"+
		"\3\2\2\2\u1375\u1376\7\u010f\2\2\u1376\u1378\7\u00a4\2\2\u1377\u1379\7"+
		"\u018a\2\2\u1378\u1377\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u1386\3\2\2\2"+
		"\u137a\u1386\7\u01b7\2\2\u137b\u137d\7\u00e8\2\2\u137c\u137e\7\u0184\2"+
		"\2\u137d\u137c\3\2\2\2\u137d\u137e\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1380"+
		"\7\u010f\2\2\u1380\u1382\7\u00a4\2\2\u1381\u1383\7\u018a\2\2\u1382\u1381"+
		"\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u1386\3\2\2\2\u1384\u1386\7\u01b6\2"+
		"\2\u1385\u1355\3\2\2\2\u1385\u1371\3\2\2\2\u1385\u137a\3\2\2\2\u1385\u137b"+
		"\3\2\2\2\u1385\u1384\3\2\2\2\u1386\u0351\3\2\2\2\u1387\u1389\5\u02ac\u0157"+
		"\2\u1388\u138a\5\u0358\u01ad\2\u1389\u1388\3\2\2\2\u1389\u138a\3\2\2\2"+
		"\u138a\u138c\3\2\2\2\u138b\u138d\5\u035a\u01ae\2\u138c\u138b\3\2\2\2\u138c"+
		"\u138d\3\2\2\2\u138d\u0353\3\2\2\2\u138e\u1398\5\u0352\u01aa\2\u138f\u1390"+
		"\7\u00c1\2\2\u1390\u1392\5\u0360\u01b1\2\u1391\u1393\5\u0356\u01ac\2\u1392"+
		"\u1391\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u1395\3\2\2\2\u1394\u1396\5\u035a"+
		"\u01ae\2\u1395\u1394\3\2\2\2\u1395\u1396\3\2\2\2\u1396\u1398\3\2\2\2\u1397"+
		"\u138e\3\2\2\2\u1397\u138f\3\2\2\2\u1398\u0355\3\2\2\2\u1399\u139a\5\u0358"+
		"\u01ad\2\u139a\u0357\3\2\2\2\u139b\u139e\7\u01b9\2\2\u139c\u139f\5\u033c"+
		"\u019f\2\u139d\u139f\7\t\2\2\u139e\u139c\3\2\2\2\u139e\u139d\3\2\2\2\u139f"+
		"\u13a6\3\2\2\2\u13a0\u13a3\5\u033c\u019f\2\u13a1\u13a3\7\t\2\2\u13a2\u13a0"+
		"\3\2\2\2\u13a2\u13a1\3\2\2\2\u13a3\u13a5\3\2\2\2\u13a4\u13a2\3\2\2\2\u13a5"+
		"\u13a8\3\2\2\2\u13a6\u13a4\3\2\2\2\u13a6\u13a7\3\2\2\2\u13a7\u13a9\3\2"+
		"\2\2\u13a8\u13a6\3\2\2\2\u13a9\u13aa\7\u01ba\2\2\u13aa\u0359\3\2\2\2\u13ab"+
		"\u13ac\7\u01b9\2\2\u13ac\u13ad\5\u035c\u01af\2\u13ad\u13af\7\u01b3\2\2"+
		"\u13ae\u13b0\5\u035e\u01b0\2\u13af\u13ae\3\2\2\2\u13af\u13b0\3\2\2\2\u13b0"+
		"\u13b1\3\2\2\2\u13b1\u13b2\7\u01ba\2\2\u13b2\u035b\3\2\2\2\u13b3\u13b4"+
		"\5\u033c\u019f\2\u13b4\u035d\3\2\2\2\u13b5\u13b6\5\u033c\u019f\2\u13b6"+
		"\u035f\3\2\2\2\u13b7\u13b8\7\u01c4\2\2\u13b8\u0361\3\2\2\2\u0334\u0365"+
		"\u036c\u036f\u0372\u037b\u0382\u0385\u038b\u038e\u0391\u0394\u0397\u039b"+
		"\u03a0\u03a6\u03a9\u03ac\u03b9\u03c0\u03c5\u03c9\u03cf\u03d6\u03d9\u03e1"+
		"\u03ea\u03f6\u03ff\u0405\u0408\u040c\u0410\u0415\u041b\u0424\u042a\u0430"+
		"\u0438\u0469\u046f\u0475\u047e\u0480\u0486\u048a\u049a\u049c\u04a2\u04a7"+
		"\u04a9\u04ae\u04b1\u04b6\u04ba\u04bc\u04bf\u04c3\u04c7\u04cb\u04d1\u04d8"+
		"\u04db\u04e1\u04e4\u04e8\u04ec\u04ef\u04f2\u04f5\u04fc\u04ff\u0503\u0506"+
		"\u050f\u0516\u0520\u0522\u0528\u052c\u0532\u0538\u053c\u0540\u0547\u0549"+
		"\u054c\u054f\u0555\u055b\u055f\u0563\u0567\u056c\u0570\u0573\u0576\u0581"+
		"\u0586\u058b\u0593\u0596\u0599\u059c\u05a2\u05a9\u05ac\u05b0\u05b3\u05b5"+
		"\u05b8\u05bc\u05bf\u05c7\u05c9\u05cb\u05d3\u05d5\u05d7\u05de\u05e2\u05e6"+
		"\u05e9\u05eb\u05ee\u05f2\u05f5\u05fb\u0600\u0604\u060a\u0615\u061b\u0624"+
		"\u062e\u063a\u0640\u0645\u0650\u0654\u065a\u065d\u0664\u0668\u0671\u0674"+
		"\u0678\u067c\u067e\u0684\u068c\u0692\u0695\u0699\u069b\u069f\u06a3\u06a6"+
		"\u06a9\u06ae\u06bc\u06c1\u06c3\u06c6\u06c9\u06d0\u06d4\u06d9\u06dc\u06e4"+
		"\u06ef\u06f2\u06f5\u06f8\u0701\u0704\u0708\u070d\u0710\u0714\u0718\u071a"+
		"\u071e\u0720\u0723\u0727\u072a\u0731\u0733\u0735\u0738\u073b\u073f\u0743"+
		"\u0748\u074a\u074f\u0753\u0758\u075c\u0761\u0767\u076d\u077a\u0785\u0789"+
		"\u0791\u0797\u079b\u079f\u07a3\u07a5\u07aa\u07ae\u07b1\u07b5\u07b8\u07be"+
		"\u07c3\u07c6\u07cd\u07d0\u07d7\u07da\u07df\u07e1\u07e3\u07eb\u07ef\u07f3"+
		"\u07f6\u07f9\u07fd\u0804\u0807\u080b\u080e\u0814\u0818\u081d\u082b\u082f"+
		"\u0834\u083e\u0842\u084b\u0855\u0859\u0862\u0867\u0871\u087a\u0880\u0884"+
		"\u088a\u088f\u0898\u089d\u08a2\u08ae\u08b4\u08b9\u08bf\u08c5\u08c9\u08cf"+
		"\u08d8\u08dd\u08e3\u08e5\u08e8\u08f6\u08f9\u08fd\u0902\u0906\u090a\u0911"+
		"\u0916\u091c\u0921\u0925\u0929\u092e\u0930\u0933\u0937\u093c\u0941\u0947"+
		"\u094b\u0953\u0957\u095b\u095e\u0961\u0969\u096d\u0972\u0975\u097b\u0981"+
		"\u0988\u098d\u0990\u0997\u099c\u099f\u09a4\u09a8\u09ac\u09ae\u09b0\u09b3"+
		"\u09ba\u09bd\u09c1\u09c7\u09cb\u09cf\u09d3\u09d6\u09dc\u09e0\u09e2\u09e9"+
		"\u09ed\u09ef\u09f3\u09f9\u09fe\u0a02\u0a06\u0a08\u0a0b\u0a0f\u0a14\u0a18"+
		"\u0a21\u0a24\u0a27\u0a2e\u0a32\u0a37\u0a3a\u0a3f\u0a43\u0a47\u0a4b\u0a4f"+
		"\u0a51\u0a54\u0a59\u0a5b\u0a61\u0a66\u0a69\u0a6c\u0a6f\u0a78\u0a7c\u0a82"+
		"\u0a85\u0a88\u0a8c\u0a90\u0a94\u0a97\u0a9c\u0aa5\u0aab\u0ab5\u0aba\u0abe"+
		"\u0ac4\u0ac8\u0acd\u0ad2\u0ad6\u0ade\u0ae0\u0ae3\u0ae6\u0aec\u0af4\u0af9"+
		"\u0afe\u0b00\u0b05\u0b0a\u0b0c\u0b11\u0b16\u0b18\u0b1d\u0b22\u0b24\u0b29"+
		"\u0b2e\u0b30\u0b35\u0b3a\u0b3c\u0b41\u0b45\u0b48\u0b50\u0b54\u0b57\u0b5a"+
		"\u0b66\u0b6a\u0b6c\u0b6f\u0b73\u0b77\u0b7d\u0b81\u0b83\u0b86\u0b8b\u0b8e"+
		"\u0b91\u0b94\u0b98\u0b9c\u0b9e\u0ba2\u0ba6\u0baa\u0bae\u0bb1\u0bb5\u0bb9"+
		"\u0bbd\u0bc2\u0bc6\u0bc8\u0bcc\u0bcf\u0bd5\u0bdc\u0be0\u0be5\u0beb\u0bef"+
		"\u0bf3\u0bf6\u0bff\u0c01\u0c06\u0c0a\u0c0f\u0c13\u0c17\u0c1d\u0c23\u0c25"+
		"\u0c29\u0c2b\u0c2f\u0c33\u0c37\u0c3e\u0c42\u0c45\u0c49\u0c4c\u0c51\u0c54"+
		"\u0c58\u0c5b\u0c5f\u0c63\u0c66\u0c6f\u0c77\u0c7a\u0c7e\u0c87\u0c90\u0c9a"+
		"\u0c9f\u0ca8\u0cb0\u0cba\u0cc4\u0cca\u0cce\u0cdc\u0ce2\u0ce8\u0cea\u0cee"+
		"\u0cf3\u0cfb\u0cff\u0d08\u0d0c\u0d10\u0d15\u0d1b\u0d23\u0d27\u0d29\u0d2f"+
		"\u0d34\u0d3b\u0d4b\u0d4f\u0d53\u0d59\u0d60\u0d63\u0d69\u0d77\u0d7b\u0d87"+
		"\u0d8c\u0d91\u0d98\u0d9b\u0da1\u0da6\u0dab\u0dad\u0db2\u0db7\u0dba\u0dbf"+
		"\u0dc3\u0dc9\u0dce\u0dd2\u0dd6\u0dd8\u0ddd\u0ddf\u0de6\u0dea\u0def\u0df4"+
		"\u0df8\u0dfb\u0e10\u0e18\u0e21\u0e2a\u0e2e\u0e32\u0e36\u0e3b\u0e42\u0e46"+
		"\u0e48\u0e4e\u0e55\u0e58\u0e5d\u0e61\u0e63\u0e67\u0e6b\u0e70\u0e75\u0e79"+
		"\u0e7b\u0e8d\u0e8f\u0e96\u0e9a\u0e9e\u0ea2\u0eba\u0ebe\u0ec5\u0ecf\u0ed3"+
		"\u0ed7\u0ed9\u0edf\u0ee6\u0eea\u0eed\u0ef1\u0ef4\u0ef7\u0efa\u0efe\u0f01"+
		"\u0f04\u0f08\u0f0c\u0f10\u0f14\u0f18\u0f1d\u0f21\u0f23\u0f29\u0f32\u0f38"+
		"\u0f3d\u0f41\u0f43\u0f4b\u0f50\u0f54\u0f57\u0f5b\u0f5e\u0f61\u0f64\u0f68"+
		"\u0f6b\u0f6f\u0f72\u0f74\u0f7f\u0f81\u0f86\u0f91\u0f96\u0f9e\u0fa0\u0faf"+
		"\u0fb2\u0fb5\u0fba\u0fbd\u0fc0\u0fc5\u0fca\u0fcf\u0fd5\u0fd8\u0fda\u0fe2"+
		"\u0feb\u0ff6\u0ffc\u0fff\u1006\u100a\u100d\u1019\u1021\u1029\u1031\u1037"+
		"\u103a\u103e\u1047\u104a\u104d\u1053\u1056\u105c\u1060\u1065\u106e\u1071"+
		"\u1074\u1078\u107c\u1086\u1089\u108d\u1095\u10a0\u10a4\u10a8\u10ae\u10b4"+
		"\u10be\u10c3\u10c9\u10cc\u10d3\u10d8\u10db\u10e1\u10e8\u10f1\u10f6\u10fd"+
		"\u1101\u1106\u110b\u110e\u1113\u1116\u111b\u1127\u1133\u1135\u113a\u1141"+
		"\u1143\u114e\u1151\u1155\u1159\u115b\u115f\u1162\u1168\u116b\u1184\u1189"+
		"\u118e\u1191\u1194\u1197\u119a\u119d\u11a0\u11a5\u11a9\u11ac\u11b1\u11b5"+
		"\u11bc\u11c0\u11c3\u11c7\u11ca\u11cd\u11d6\u11d9\u11dd\u11e0\u11e2\u11e7"+
		"\u11ea\u11ed\u11f2\u11f9\u11ff\u1202\u120a\u120c\u1213\u1217\u121a\u1220"+
		"\u1228\u122e\u1230\u1233\u1237\u123d\u1242\u124d\u1252\u1256\u125a\u125c"+
		"\u1262\u126b\u1271\u1277\u127d\u1281\u1286\u1289\u128e\u1293\u129c\u129f"+
		"\u12a5\u12ad\u12b5\u12b7\u12bd\u12c3\u12c6\u12c9\u12cf\u12d7\u12dd\u12e6"+
		"\u12ed\u12ff\u1307\u130d\u1315\u1321\u1329\u1332\u1336\u133c\u133f\u1343"+
		"\u1346\u1349\u1352\u1355\u1359\u135d\u1361\u1365\u1369\u136d\u136f\u1373"+
		"\u1378\u137d\u1382\u1385\u1389\u138c\u1392\u1395\u1397\u139e\u13a2\u13a6"+
		"\u13af";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}