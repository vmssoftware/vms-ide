<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pas</string>
		<string>p</string>
		<string>pp</string>
		<string>dfm</string>
		<string>dpr</string>
		<string>dpk</string>
		<string>lfm</string>
		<string>lpr</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~P</string>
	<key>name</key>
	<string>Pascal</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\b(?i:(absolute|abstract|all|and_then|array|as|asm|attribute|begin|bindable|case|class|const|contains|default|div|else|end|except|export|exports|external|far|file|finalization|finally|forward|generic|goto|if|implements|import|in|index|inherited|initialization|interrupt|is|label|library|mod|module|name|near|not|object|of|on|only|operator|or_else|otherwise|override|package|packed|pow|private|program|protected|public|published|interface|implementation|qualified|read|record|resident|requires|resourcestring|restricted|segment|set|shl|shr|specialize|stored|then|threadvar|to|try|type|unit|uses|var|view|virtual|dynamic|overload|reintroduce|with|write|xor))\b</string>
			<key>name</key>
			<string>keyword.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.prototype.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.prototype.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(function|procedure|constructor|destructor))\b\s+(\w+(\.\w+)?)(\(.*?\))?;\s*(?=(?i:attribute|forward|external))</string>
			<key>name</key>
			<string>meta.function.prototype.pascal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.pascal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.pascal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(function|procedure|constructor|destructor|property|read|write))\b\s+(\w+(\.\w+)?)</string>
			<key>name</key>
			<string>meta.function.pascal</string>
		</dict>
			<dict>
			<key>match</key>
			<string>\b(?i:(self|result))\b</string>
			<key>name</key>			
			<string>token.variable</string>
		</dict>	
		<dict>
			<key>match</key>
			<string>\b(?i:(and|or))\b</string>
			<key>name</key>			
			<string>keyword.operator.pascal</string>
		</dict>	
		<dict>
			<key>match</key>
			<string>\b(?i:(break|continue|exit|abort|while|do|for|raise|repeat|until))\b</string>
			<key>name</key>			
			<string>keyword.control.pascal</string>
		</dict>	

		<dict>
			<key>begin</key>
			<string>\{\$</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>string.regexp</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>string.regexp</string>
		</dict>	

		<dict>
			<key>match</key>
			<string>\b(?i:(ansichar|ansistring|boolean|byte|cardinal|char|comp|currency|double|dword|extended|file|integer|int64|longint|longword|nativeint|nativeuint|olevariant|pansichar|pchar|pwidechar|pointer|real|shortint|shortstring|single|smallint|string|uint64|variant|widechar|widestring|word|wordbool))\b</string>
			<key>name</key>			
			<string>storage.support.type.pascal</string>
		</dict>	
		<dict>
			<key>match</key>
			<string>\b(\d+)|(\d*\.\d+([eE][\-+]?\d+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$[0-9a-fA-F]{1,16}\b</string>
			<key>name</key>
			<string>constant.numeric.hex.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(true|false|nil))\b</string>
			<key>name</key>
			<string>constant.language.pascal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:(Assert))\b</string>
			<key>name</key>
			<string>keyword.control</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?(?=//)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.pascal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.double-slash.pascal.two</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*\)</string>
			<key>name</key>
			<string>comment.block.pascal.one</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\{(?!\$)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>comment.block.pascal.two</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.pascal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.pascal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.pascal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.pascal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\#\d+</string>
			<key>name</key>
			<string>string.other.pascal</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.pascal</string>
	<key>uuid</key>
	<string>F42FA544-6B1C-11D9-9517-000D93589AF6</string>
</dict>
</plist>