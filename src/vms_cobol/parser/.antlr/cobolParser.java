// Generated from c:\Users\akulikovskiy\ts_projects\vms_ide\vms-ide\src\vms_cobol\parser\cobol.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class cobolParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		STRING_LITERAL_=1, ACCEPT=2, ACCESS=3, ADD=4, ADVANCING=5, AFTER=6, ALL=7, 
		ALLOWING=8, ALPHA=9, ALPHABET=10, ALPHABETIC=11, ALPHABETIC_LOWER=12, 
		ALPHABETIC_UPPER=13, ALPHANUMERIC=14, ALPHANUMERIC_EDITED=15, ALSO=16, 
		ALTER=17, ALTERNATE=18, AND=19, ANY=20, APPLY=21, ARE=22, AREA=23, AREAS=24, 
		ARGUMENT_NUMBER=25, ARGUMENT_VALUE=26, ARITHMETIC=27, ASCENDING=28, ASCII=29, 
		ASSIGN=30, AT=31, AUTHOR=32, AUTO=33, AUTOMATIC=34, AUTOTERMINATE=35, 
		BACKGROUND_COLOR=36, BEFORE=37, BELL=38, BINARY=39, BINARY_CHAR=40, BINARY_DOUBLE=41, 
		BINARY_LONG=42, BINARY_SHORT=43, BLANK=44, BLINK=45, BLINKING=46, BLOCK=47, 
		BOLD=48, BOTTOM=49, BY=50, C01=51, CALL=52, CANCEL=53, CARD_READER=54, 
		CF=55, CH=56, CHARACTER=57, CHARACTERS=58, CLASS=59, CLOCK_UNITS=60, CLOSE=61, 
		CODE=62, CODE_SET=63, COLLATING=64, COLUMN=65, COMMA=66, COMMON=67, COMP=68, 
		COMPUTATIONAL=69, COMPUTATIONAL_1=70, COMPUTATIONAL_2=71, COMPUTATIONAL_3=72, 
		COMPUTATIONAL_4=73, COMPUTATIONAL_5=74, COMPUTATIONAL_X=75, COMPUTE=76, 
		COMP_1=77, COMP_2=78, COMP_3=79, COMP_4=80, COMP_5=81, COMP_X=82, CONFIGURATION=83, 
		CONSOLE=84, CONTAINS=85, CONTENT=86, CONTIGUOUS=87, CONTIGUOUS_BEST_TRY=88, 
		CONTINUE=89, CONTROL=90, CONTROLS=91, CONVERSION=92, CONVERTING=93, COPY=94, 
		CORR=95, CORRESPONDING=96, COUNT=97, CRT=98, CURRENCY=99, CURRENT=100, 
		CURSOR=101, DATA=102, DATE=103, DATE_COMPILED=104, DATE_WRITTEN=105, DAY=106, 
		DAY_OF_WEEK=107, DE=108, DEBUGGING=109, DECIMAL_POINT=110, DECLARATIVES=111, 
		DEFAULT=112, DEFERRED_WRITE=113, DELETE=114, DELIMITED=115, DELIMITER=116, 
		DEPENDENCY=117, DEPENDING=118, DESCENDING=119, DESCRIPTOR=120, DETAIL=121, 
		DICTIONARY=122, DISK=123, DISPLAY=124, DIVIDE=125, DIVISION=126, DOWN=127, 
		DUPLICATES=128, DYNAMIC=129, EBCDIC=130, ECHO=131, EDITING=132, ELSE=133, 
		END=134, END_ACCEPT=135, END_ADD=136, END_CALL=137, END_COMPUTE=138, END_DELETE=139, 
		END_DISPLAY=140, END_DIVIDE=141, END_EVALUATE=142, END_IF=143, END_MULTIPLY=144, 
		END_OF_PAGE=145, END_PERFORM=146, END_READ=147, END_RETURN=148, END_REWRITE=149, 
		END_SEARCH=150, END_START=151, END_STRING=152, END_SUBTRACT=153, END_UNSTRING=154, 
		END_WRITE=155, ENVIRONMENT=156, ENVIRONMENT_NAME=157, ENVIRONMENT_VALUE=158, 
		EOL=159, EOP=160, EOS=161, EQUAL=162, ERASE=163, ERROR=164, EVALUATE=165, 
		EVERY=166, EXCEPTION=167, EXCLUSIVE=168, EXIT=169, EXTEND=170, EXTENSION=171, 
		EXTERNAL=172, FAILURE=173, FALSE=174, FD=175, FILE=176, FILE_CONTROL=177, 
		FILE_ID=178, FILLER=179, FILL_SIZE=180, FINAL=181, FIRST=182, FLOAT_EXTENDED=183, 
		FLOAT_LONG=184, FLOAT_SHORT=185, FOOTING=186, FOR=187, FOREGROUND_COLOR=188, 
		FROM=189, FULL=190, FUNCTION=191, GENERATE=192, GIVING=193, GLOBAL=194, 
		GO=195, GREATER=196, GROUP=197, HEADING=198, HIGHLIGHT=199, HIGH_VALUE=200, 
		HIGH_VALUES=201, I64=202, ID=203, IDENT=204, IDENTIFICATION=205, IF=206, 
		IN=207, INDEX=208, INDEXED=209, INDICATE=210, INITIAL=211, INITIALIZE=212, 
		INITIATE=213, INPUT=214, INPUT_OUTPUT=215, INSPECT=216, INSTALLATION=217, 
		INTO=218, INVALID=219, IS=220, I_O=221, I_O_CONTROL=222, JUST=223, JUSTIFIED=224, 
		KEY=225, LABEL=226, LAST=227, LEADING=228, LEFT=229, LESS=230, LIMIT=231, 
		LIMITS=232, LINAGE=233, LINE=234, LINES=235, LINE_PRINTER=236, LINKAGE=237, 
		LOCK=238, LOCK_HOLDING=239, LOWLIGHT=240, LOW_VALUE=241, LOW_VALUES=242, 
		MANUAL=243, MASS_INSERT=244, MEMORY=245, MERGE=246, MODE=247, MODULES=248, 
		MOVE=249, MULTIPLE=250, MULTIPLY=251, NATIVE=252, NEGATIVE=253, NEXT=254, 
		NO=255, NOT=256, NUMBER=257, NUMERIC=258, NUMERIC_EDITED=259, OBJECT_COMPUTER=260, 
		OCCURS=261, OF=262, OFF=263, OMITTED=264, ON=265, OPEN=266, OPTIONAL=267, 
		OPTIONS=268, OR=269, ORDER=270, ORGANIZATION=271, OTHER=272, OTHERS=273, 
		OUTPUT=274, OVERFLOW=275, PACKED_DECIMAL=276, PADDING=277, PAGE=278, PAPER_TAPE_PUNCH=279, 
		PAPER_TAPE_READER=280, PERFORM=281, PF=282, PH=283, PLUS=284, POINTER=285, 
		POINTER_64=286, POSITION=287, POSITIVE=288, PREALLOCATION=289, PREVIOUS=290, 
		PRINTER=291, PRINTING=292, PRINT_CONTROL=293, PRIOR=294, PROCEDURE=295, 
		PROCEED=296, PROGRAM=297, PROGRAM_ID=298, PROTECTED=299, QUOTE=300, QUOTES=301, 
		RANDOM=302, RD=303, READ=304, READERS=305, RECORD=306, RECORDS=307, REDEFINES=308, 
		REEL=309, REFERENCE=310, REGARDLESS=311, RELATIVE=312, RELEASE=313, REMAINDER=314, 
		REMOVAL=315, RENAMES=316, REPLACE=317, REPLACING=318, REPORT=319, REPORTING=320, 
		REPORTS=321, REQUIRED=322, RERUN=323, RESERVE=324, RESET=325, RETURN=326, 
		REVERSED=327, REVERSE_VIDEO=328, REWIND=329, REWRITE=330, RF=331, RH=332, 
		RIGHT=333, ROLLBACK=334, ROUNDED=335, RUN=336, SAME=337, SCREEN=338, SD=339, 
		SEARCH=340, SECTION=341, SECURE=342, SECURITY=343, SEGMENT_LIMIT=344, 
		SELECT=345, SENTENCE=346, SEPARATE=347, SEQUENCE=348, SEQUENTIAL=349, 
		SET=350, SIGN=351, SIGNED=352, SIZE=353, SORT=354, SORT_MERGE=355, SOURCE=356, 
		SOURCE_COMPUTER=357, SPACE=358, SPACES=359, SPECIAL_NAMES=360, STANDARD=361, 
		STANDARD_1=362, STANDARD_2=363, START=364, STATUS=365, STOP=366, STRING=367, 
		SUBTRACT=368, SUCCESS=369, SUM=370, SUPPRESS=371, SWITCH=372, SWITCH_N_=373, 
		SYMBOL=374, SYMBOLIC=375, SYNC=376, SYNCHRONIZED=377, SYSERR=378, SYSIN=379, 
		SYSOUT=380, TALLYING=381, TAPE=382, TERMINATE=383, TEST=384, THAN=385, 
		THEN=386, THROUGH=387, THRU=388, TIME=389, TIMES=390, TO=391, TOP=392, 
		TRAILING=393, TRUE=394, TYPE=395, UNDERLINE=396, UNDERLINED=397, UNIT=398, 
		UNLOCK=399, UNSIGNED=400, UNSTRING=401, UNTIL=402, UP=403, UPDATERS=404, 
		UPON=405, USAGE=406, USE=407, USING=408, VALUE=409, VALUES=410, VARYING=411, 
		VAX=412, WHEN=413, WINDOW=414, WITH=415, WORDS=416, WORKING_STORAGE=417, 
		WRITE=418, WRITERS=419, YYYYDDD=420, YYYYMMDD=421, ZERO=422, ZEROES=423, 
		ZEROS=424, EXEC=425, SQL=426, END_EXEC=427, PIC=428, PICTURE=429, PSEUDO_TEXT_=430, 
		EXCLAM_=431, UNDER_=432, PLUS_=433, MINUS_=434, STAR_=435, SLASH_=436, 
		COLON_=437, EQUAL_=438, LT_=439, LE_=440, GE_=441, GT_=442, LPAREN_=443, 
		RPAREN_=444, LBRACK_=445, RBRACK_=446, POINTER_=447, ATP_=448, DOT_=449, 
		LCURLY_=450, RCURLY_=451, NUMERIC_LITERAL_=452, INTEGER_LITERAL_=453, 
		HEX_LITERAL_=454, USER_DEFINED_WORD_=455, COMMA_=456, SEMI_=457, WHITESPACE_=458, 
		NEWLINE_=459, ANY_CHAR_=460, SYMBOL_IN_PICTURE_=461, IS_IN_PICTURE_=462, 
		CHARACTER_STRING_=463;
	public static final int
		RULE_cobol_source = 0, RULE_program = 1, RULE_identification_division = 2, 
		RULE_identification_division_header = 3, RULE_environment_division = 4, 
		RULE_environment_division_header = 5, RULE_data_division = 6, RULE_data_division_header = 7, 
		RULE_procedure_division = 8, RULE_word_in_area_B = 9, RULE_author = 10, 
		RULE_author_header = 11, RULE_figurative_constant_witout_all_zero = 12, 
		RULE_figurative_constant_zero = 13, RULE_figurative_constant_witout_all = 14, 
		RULE_figurative_constant_witout_zero = 15, RULE_figurative_constant = 16, 
		RULE_end_program = 17, RULE_end_program_header = 18, RULE_procedure_division_header = 19, 
		RULE_procedure_division_header_start = 20, RULE_procedure_division_header_end = 21, 
		RULE_section = 22, RULE_declaratives = 23, RULE_declaratives_header = 24, 
		RULE_end_declaratives = 25, RULE_declaratives_section = 26, RULE_paragraph = 27, 
		RULE_paragraph_name = 28, RULE_use_statement = 29, RULE_group_data_name = 30, 
		RULE_use_on = 31, RULE_section_header = 32, RULE_section_name = 33, RULE_using = 34, 
		RULE_giving = 35, RULE_statement = 36, RULE_exec_sql_statement = 37, RULE_record_name = 38, 
		RULE_library_name = 39, RULE_text_name = 40, RULE_replace_statement = 41, 
		RULE_write_statement = 42, RULE_advance_value = 43, RULE_advance_num = 44, 
		RULE_unstring_statement = 45, RULE_unstring_tally_ctr = 46, RULE_unstring_dest_clause = 47, 
		RULE_countr = 48, RULE_dest_string = 49, RULE_delim_dest = 50, RULE_unstring_delim_clause = 51, 
		RULE_unstring_delim = 52, RULE_unstring_src = 53, RULE_unlock_statement = 54, 
		RULE_terminate_statement = 55, RULE_suppress_statement = 56, RULE_subtract_statement = 57, 
		RULE_sub_grp = 58, RULE_sub_num = 59, RULE_string_statement = 60, RULE_string_pointer = 61, 
		RULE_string_dest = 62, RULE_string_delim = 63, RULE_string_src = 64, RULE_stop_statement = 65, 
		RULE_stop_disp = 66, RULE_start_statement = 67, RULE_sort_key_data = 68, 
		RULE_sort_statement = 69, RULE_sort_name = 70, RULE_procedure_is = 71, 
		RULE_on_sort_key = 72, RULE_sort_key = 73, RULE_set_statement = 74, RULE_set_statement_form1 = 75, 
		RULE_set_statement_form2 = 76, RULE_set_statement_form3 = 77, RULE_set_statement_form4 = 78, 
		RULE_set_statement_form5 = 79, RULE_set_statement_form6 = 80, RULE_set_increm = 81, 
		RULE_set_val = 82, RULE_search_statement = 83, RULE_search_condition = 84, 
		RULE_search_arg = 85, RULE_search_elemnt = 86, RULE_search_pointer = 87, 
		RULE_src_table = 88, RULE_rewrite_statement = 89, RULE_rewrite_rec_name = 90, 
		RULE_return_statement = 91, RULE_smrg_file = 92, RULE_release_statement = 93, 
		RULE_release_src_area = 94, RULE_release_rec = 95, RULE_record_statement = 96, 
		RULE_relation_type = 97, RULE_path_name = 98, RULE_read_statement = 99, 
		RULE_regard_allow = 100, RULE_read_options = 101, RULE_perform_statement = 102, 
		RULE_proc_thru_proc = 103, RULE_perform_times = 104, RULE_with_test = 105, 
		RULE_perform_until = 106, RULE_perform_varying = 107, RULE_perform_range = 108, 
		RULE_perform_increm = 109, RULE_perform_init = 110, RULE_perform_var = 111, 
		RULE_open_statement = 112, RULE_open_definition = 113, RULE_open_file_attributes = 114, 
		RULE_multiply_statement = 115, RULE_mult_num = 116, RULE_merge_statement = 117, 
		RULE_output_proc = 118, RULE_first_proc = 119, RULE_end_proc = 120, RULE_giving_file = 121, 
		RULE_infile = 122, RULE_merge_on = 123, RULE_mergefile = 124, RULE_mergekey = 125, 
		RULE_inspect_statement = 126, RULE_inspect_converting = 127, RULE_convert_chars = 128, 
		RULE_compare_chars = 129, RULE_inspect_replacing = 130, RULE_replacing_all = 131, 
		RULE_replace_val = 132, RULE_replacing_characters = 133, RULE_replace_char = 134, 
		RULE_inspect_tallying = 135, RULE_tallying_for = 136, RULE_tallying_for_characters = 137, 
		RULE_delim_definition = 138, RULE_tallying_for_all = 139, RULE_compare_val = 140, 
		RULE_delim_val = 141, RULE_tally_ctr = 142, RULE_src_string = 143, RULE_initiate_statement = 144, 
		RULE_initialize_statement = 145, RULE_replacing = 146, RULE_init_value = 147, 
		RULE_fld_name = 148, RULE_move_statement = 149, RULE_if_statement = 150, 
		RULE_generate_statement = 151, RULE_report_item = 152, RULE_exit_statement = 153, 
		RULE_exit_program_statement = 154, RULE_go_to_statement = 155, RULE_proc_name = 156, 
		RULE_evaluate_statement = 157, RULE_when_condition = 158, RULE_subj_item = 159, 
		RULE_divide_statement = 160, RULE_divide_statement_form1 = 161, RULE_divide_statement_form2 = 162, 
		RULE_remaind = 163, RULE_divide_num = 164, RULE_display_statement = 165, 
		RULE_display_statement_form1 = 166, RULE_display_statement_form2 = 167, 
		RULE_display_statement_form3 = 168, RULE_display_statement_form4 = 169, 
		RULE_src_item = 170, RULE_disp_f3_line = 171, RULE_disp_f3_column = 172, 
		RULE_display_form1_clause = 173, RULE_upon_dest = 174, RULE_with_conversion = 175, 
		RULE_with_no_advancing = 176, RULE_display_form2_clause = 177, RULE_reversed = 178, 
		RULE_with_blinking = 179, RULE_bold = 180, RULE_with_bell = 181, RULE_underlined = 182, 
		RULE_erase_to = 183, RULE_at_line_number = 184, RULE_at_column_number = 185, 
		RULE_out_dest = 186, RULE_delete_statement = 187, RULE_continue_statement = 188, 
		RULE_compute_statement = 189, RULE_close_statement = 190, RULE_close_params = 191, 
		RULE_cancel_statement = 192, RULE_call_statement = 193, RULE_call_giving = 194, 
		RULE_call_using = 195, RULE_using_arg = 196, RULE_using_prefix = 197, 
		RULE_argument = 198, RULE_prog_name = 199, RULE_alter_statement = 200, 
		RULE_add_statement = 201, RULE_add_grp = 202, RULE_add_num = 203, RULE_accept_statement = 204, 
		RULE_on_exception_variants = 205, RULE_at_end_variants = 206, RULE_on_size_variants = 207, 
		RULE_on_overflow_variants = 208, RULE_at_eop_variants = 209, RULE_invalid_key_variants = 210, 
		RULE_accept_form6 = 211, RULE_arg_env_accept = 212, RULE_accept_form1 = 213, 
		RULE_accept_form2 = 214, RULE_accept_form3 = 215, RULE_accept_form4 = 216, 
		RULE_accept_form5 = 217, RULE_accept_at = 218, RULE_accept_at_line = 219, 
		RULE_accept_at_column = 220, RULE_accept_form4_clause = 221, RULE_from_column_number = 222, 
		RULE_from_line_number = 223, RULE_accept_form3_clause = 224, RULE_protected_clause = 225, 
		RULE_control_key_in = 226, RULE_default_is = 227, RULE_with_no_echo = 228, 
		RULE_key_dest_item = 229, RULE_def_value = 230, RULE_protected_value = 231, 
		RULE_prot_fill_lit = 232, RULE_prot_size_value = 233, RULE_number_value = 234, 
		RULE_date_time = 235, RULE_dest_item = 236, RULE_input_source = 237, RULE_at_end = 238, 
		RULE_on_exception = 239, RULE_on_size = 240, RULE_on_overflow = 241, RULE_at_eop = 242, 
		RULE_invalid_key = 243, RULE_file_section = 244, RULE_file_description = 245, 
		RULE_sort_merge_file_description = 246, RULE_working_storage_section = 247, 
		RULE_working_storage_entry = 248, RULE_linkage_section = 249, RULE_report_section = 250, 
		RULE_report_description = 251, RULE_screen_section = 252, RULE_file_description_entry = 253, 
		RULE_sort_merge_file_description_entry = 254, RULE_report_description_entry = 255, 
		RULE_fd_clause = 256, RULE_is_external = 257, RULE_is_global = 258, RULE_data_description_entry = 259, 
		RULE_level_number = 260, RULE_data_description_clause = 261, RULE_synchronized_lr = 262, 
		RULE_justified = 263, RULE_black_when_zero = 264, RULE_renames = 265, 
		RULE_rename_start = 266, RULE_rename_end = 267, RULE_value_is = 268, RULE_value_is_definition = 269, 
		RULE_value_is_definition_part = 270, RULE_value_is_definition_thru = 271, 
		RULE_external_name = 272, RULE_ref_data_name = 273, RULE_value_is_literal = 274, 
		RULE_occurs = 275, RULE_indexed_by = 276, RULE_ind_name = 277, RULE_key_is = 278, 
		RULE_key_name = 279, RULE_times_definition = 280, RULE_table_size = 281, 
		RULE_min_times = 282, RULE_max_times = 283, RULE_report_group_data_description_entry = 284, 
		RULE_report_group_data_description_clause = 285, RULE_rep_source_sum_or_value = 286, 
		RULE_rep_value_is = 287, RULE_rep_source = 288, RULE_rep_group_ind = 289, 
		RULE_rep_column = 290, RULE_usage_display = 291, RULE_rep_type = 292, 
		RULE_rep_next_group = 293, RULE_rep_line_num = 294, RULE_sign_is = 295, 
		RULE_rep_sum = 296, RULE_control_foot_name = 297, RULE_detail_report_group_name = 298, 
		RULE_sum_name = 299, RULE_source_name = 300, RULE_column_number = 301, 
		RULE_type_is_definition = 302, RULE_rep_type_pf = 303, RULE_rep_type_rf = 304, 
		RULE_rep_type_de = 305, RULE_rep_type_ch = 306, RULE_rep_type_cf = 307, 
		RULE_rep_type_rh = 308, RULE_rep_type_ph = 309, RULE_type_control_name = 310, 
		RULE_next_group_definition = 311, RULE_line_num_definition = 312, RULE_line_num = 313, 
		RULE_rd_clause = 314, RULE_report_page = 315, RULE_report_control = 316, 
		RULE_report_code = 317, RULE_footing_line_rd = 318, RULE_last_detail_line = 319, 
		RULE_first_detail_line = 320, RULE_heading_line = 321, RULE_page_size_rd = 322, 
		RULE_control_name = 323, RULE_usage = 324, RULE_usage_definition = 325, 
		RULE_picture = 326, RULE_character_string = 327, RULE_other_data_item = 328, 
		RULE_data_name = 329, RULE_sd_clause = 330, RULE_report_is = 331, RULE_report_name = 332, 
		RULE_linage = 333, RULE_bottom_lines = 334, RULE_top_lines = 335, RULE_footing_line = 336, 
		RULE_page_size = 337, RULE_data_rec = 338, RULE_rec_name = 339, RULE_value_of_id = 340, 
		RULE_value_of_id_definition = 341, RULE_label = 342, RULE_record = 343, 
		RULE_record_definition = 344, RULE_depending_item = 345, RULE_shortest_rec = 346, 
		RULE_longest_rec = 347, RULE_screen_description_entry = 348, RULE_screen_description_clause = 349, 
		RULE_scr_light = 350, RULE_scr_picture = 351, RULE_scr_value = 352, RULE_scr_column = 353, 
		RULE_scr_line = 354, RULE_scr_underline = 355, RULE_scr_reverse = 356, 
		RULE_scr_lowlight = 357, RULE_scr_highlight = 358, RULE_scr_erase = 359, 
		RULE_scr_blink = 360, RULE_scr_bell = 361, RULE_scr_full = 362, RULE_scr_required = 363, 
		RULE_scr_secure = 364, RULE_scr_auto = 365, RULE_scr_background = 366, 
		RULE_scr_foreground = 367, RULE_scr_blank = 368, RULE_scr_pic_using = 369, 
		RULE_scr_pic_from = 370, RULE_scr_pic_to = 371, RULE_nonnumeric_literal = 372, 
		RULE_src_number = 373, RULE_color_num = 374, RULE_program_id = 375, RULE_program_name = 376, 
		RULE_common_initial = 377, RULE_with_ident = 378, RULE_ident_string = 379, 
		RULE_installation = 380, RULE_date_written = 381, RULE_date_compiled = 382, 
		RULE_security = 383, RULE_options_ = 384, RULE_arithmetic = 385, RULE_configuration_section = 386, 
		RULE_input_output_section = 387, RULE_source_computer = 388, RULE_computer_type = 389, 
		RULE_with_debugging = 390, RULE_object_computer = 391, RULE_memory_size = 392, 
		RULE_memory_size_amount = 393, RULE_memory_size_unit = 394, RULE_program_collating = 395, 
		RULE_alpha_name = 396, RULE_segment_limit = 397, RULE_segment_number = 398, 
		RULE_special_names = 399, RULE_special_names_content = 400, RULE_cursor_is = 401, 
		RULE_crt_is = 402, RULE_predefined_name_relation = 403, RULE_predefined_name = 404, 
		RULE_switch_definition = 405, RULE_switch_clause_on = 406, RULE_switch_clause_off = 407, 
		RULE_cond_name = 408, RULE_switch_name = 409, RULE_switch_num = 410, RULE_qualified_data_item = 411, 
		RULE_currency = 412, RULE_currency_definition = 413, RULE_currency_string = 414, 
		RULE_currency_char = 415, RULE_class_ = 416, RULE_class_name = 417, RULE_user_class = 418, 
		RULE_symbolic_chars = 419, RULE_symb_ch_definition = 420, RULE_symb_ch_def_clause = 421, 
		RULE_symb_ch_def_in_alphabet = 422, RULE_symbol_char = 423, RULE_char_val = 424, 
		RULE_alphabet = 425, RULE_alpha_value = 426, RULE_user_alpha = 427, RULE_first_literal = 428, 
		RULE_last_literal = 429, RULE_same_literal = 430, RULE_top_of_page_name = 431, 
		RULE_user_name = 432, RULE_file_control = 433, RULE_select = 434, RULE_select_clause = 435, 
		RULE_file_status = 436, RULE_file_stat = 437, RULE_record_key = 438, RULE_alt_record_key = 439, 
		RULE_record_key_definition = 440, RULE_seg_key = 441, RULE_rec_key = 442, 
		RULE_access_mode = 443, RULE_reserve = 444, RULE_reserve_num = 445, RULE_record_delimiter = 446, 
		RULE_padding = 447, RULE_pad_char = 448, RULE_organization = 449, RULE_lock_mode = 450, 
		RULE_lock_mode_definition = 451, RULE_code_set = 452, RULE_block_contains = 453, 
		RULE_smallest_block = 454, RULE_blocksize = 455, RULE_assign_to = 456, 
		RULE_assign_to_definition = 457, RULE_file_spec = 458, RULE_file_name = 459, 
		RULE_i_o_control = 460, RULE_i_o_control_clause = 461, RULE_multiple_file = 462, 
		RULE_multiple_file_definition = 463, RULE_multiple_file_name = 464, RULE_pos_integer = 465, 
		RULE_rerun = 466, RULE_rerun_definition = 467, RULE_clock_count = 468, 
		RULE_condition_name = 469, RULE_rerun_def_file = 470, RULE_rec_count = 471, 
		RULE_same = 472, RULE_same_area_file = 473, RULE_apply = 474, RULE_apply_definition = 475, 
		RULE_window_ptrs = 476, RULE_preall_amt = 477, RULE_extend_amt = 478, 
		RULE_arithmetic_expression = 479, RULE_constant = 480, RULE_binary_arithmetic_operator = 481, 
		RULE_unary_arithmetic_operator = 482, RULE_logic_expression = 483, RULE_logic_condition = 484, 
		RULE_logic_condition_abbrev = 485, RULE_logic_operation = 486, RULE_bool_condition_name = 487, 
		RULE_sign_condition_name = 488, RULE_class_condition_name = 489, RULE_condition_operator = 490, 
		RULE_identifier_result = 491, RULE_identifier = 492, RULE_arguments = 493, 
		RULE_subscripting = 494, RULE_reference_modification = 495, RULE_leftmost_character_position = 496, 
		RULE_length = 497, RULE_function_name = 498;
	public static final String[] ruleNames = {
		"cobol_source", "program", "identification_division", "identification_division_header", 
		"environment_division", "environment_division_header", "data_division", 
		"data_division_header", "procedure_division", "word_in_area_B", "author", 
		"author_header", "figurative_constant_witout_all_zero", "figurative_constant_zero", 
		"figurative_constant_witout_all", "figurative_constant_witout_zero", "figurative_constant", 
		"end_program", "end_program_header", "procedure_division_header", "procedure_division_header_start", 
		"procedure_division_header_end", "section", "declaratives", "declaratives_header", 
		"end_declaratives", "declaratives_section", "paragraph", "paragraph_name", 
		"use_statement", "group_data_name", "use_on", "section_header", "section_name", 
		"using", "giving", "statement", "exec_sql_statement", "record_name", "library_name", 
		"text_name", "replace_statement", "write_statement", "advance_value", 
		"advance_num", "unstring_statement", "unstring_tally_ctr", "unstring_dest_clause", 
		"countr", "dest_string", "delim_dest", "unstring_delim_clause", "unstring_delim", 
		"unstring_src", "unlock_statement", "terminate_statement", "suppress_statement", 
		"subtract_statement", "sub_grp", "sub_num", "string_statement", "string_pointer", 
		"string_dest", "string_delim", "string_src", "stop_statement", "stop_disp", 
		"start_statement", "sort_key_data", "sort_statement", "sort_name", "procedure_is", 
		"on_sort_key", "sort_key", "set_statement", "set_statement_form1", "set_statement_form2", 
		"set_statement_form3", "set_statement_form4", "set_statement_form5", "set_statement_form6", 
		"set_increm", "set_val", "search_statement", "search_condition", "search_arg", 
		"search_elemnt", "search_pointer", "src_table", "rewrite_statement", "rewrite_rec_name", 
		"return_statement", "smrg_file", "release_statement", "release_src_area", 
		"release_rec", "record_statement", "relation_type", "path_name", "read_statement", 
		"regard_allow", "read_options", "perform_statement", "proc_thru_proc", 
		"perform_times", "with_test", "perform_until", "perform_varying", "perform_range", 
		"perform_increm", "perform_init", "perform_var", "open_statement", "open_definition", 
		"open_file_attributes", "multiply_statement", "mult_num", "merge_statement", 
		"output_proc", "first_proc", "end_proc", "giving_file", "infile", "merge_on", 
		"mergefile", "mergekey", "inspect_statement", "inspect_converting", "convert_chars", 
		"compare_chars", "inspect_replacing", "replacing_all", "replace_val", 
		"replacing_characters", "replace_char", "inspect_tallying", "tallying_for", 
		"tallying_for_characters", "delim_definition", "tallying_for_all", "compare_val", 
		"delim_val", "tally_ctr", "src_string", "initiate_statement", "initialize_statement", 
		"replacing", "init_value", "fld_name", "move_statement", "if_statement", 
		"generate_statement", "report_item", "exit_statement", "exit_program_statement", 
		"go_to_statement", "proc_name", "evaluate_statement", "when_condition", 
		"subj_item", "divide_statement", "divide_statement_form1", "divide_statement_form2", 
		"remaind", "divide_num", "display_statement", "display_statement_form1", 
		"display_statement_form2", "display_statement_form3", "display_statement_form4", 
		"src_item", "disp_f3_line", "disp_f3_column", "display_form1_clause", 
		"upon_dest", "with_conversion", "with_no_advancing", "display_form2_clause", 
		"reversed", "with_blinking", "bold", "with_bell", "underlined", "erase_to", 
		"at_line_number", "at_column_number", "out_dest", "delete_statement", 
		"continue_statement", "compute_statement", "close_statement", "close_params", 
		"cancel_statement", "call_statement", "call_giving", "call_using", "using_arg", 
		"using_prefix", "argument", "prog_name", "alter_statement", "add_statement", 
		"add_grp", "add_num", "accept_statement", "on_exception_variants", "at_end_variants", 
		"on_size_variants", "on_overflow_variants", "at_eop_variants", "invalid_key_variants", 
		"accept_form6", "arg_env_accept", "accept_form1", "accept_form2", "accept_form3", 
		"accept_form4", "accept_form5", "accept_at", "accept_at_line", "accept_at_column", 
		"accept_form4_clause", "from_column_number", "from_line_number", "accept_form3_clause", 
		"protected_clause", "control_key_in", "default_is", "with_no_echo", "key_dest_item", 
		"def_value", "protected_value", "prot_fill_lit", "prot_size_value", "number_value", 
		"date_time", "dest_item", "input_source", "at_end", "on_exception", "on_size", 
		"on_overflow", "at_eop", "invalid_key", "file_section", "file_description", 
		"sort_merge_file_description", "working_storage_section", "working_storage_entry", 
		"linkage_section", "report_section", "report_description", "screen_section", 
		"file_description_entry", "sort_merge_file_description_entry", "report_description_entry", 
		"fd_clause", "is_external", "is_global", "data_description_entry", "level_number", 
		"data_description_clause", "synchronized_lr", "justified", "black_when_zero", 
		"renames", "rename_start", "rename_end", "value_is", "value_is_definition", 
		"value_is_definition_part", "value_is_definition_thru", "external_name", 
		"ref_data_name", "value_is_literal", "occurs", "indexed_by", "ind_name", 
		"key_is", "key_name", "times_definition", "table_size", "min_times", "max_times", 
		"report_group_data_description_entry", "report_group_data_description_clause", 
		"rep_source_sum_or_value", "rep_value_is", "rep_source", "rep_group_ind", 
		"rep_column", "usage_display", "rep_type", "rep_next_group", "rep_line_num", 
		"sign_is", "rep_sum", "control_foot_name", "detail_report_group_name", 
		"sum_name", "source_name", "column_number", "type_is_definition", "rep_type_pf", 
		"rep_type_rf", "rep_type_de", "rep_type_ch", "rep_type_cf", "rep_type_rh", 
		"rep_type_ph", "type_control_name", "next_group_definition", "line_num_definition", 
		"line_num", "rd_clause", "report_page", "report_control", "report_code", 
		"footing_line_rd", "last_detail_line", "first_detail_line", "heading_line", 
		"page_size_rd", "control_name", "usage", "usage_definition", "picture", 
		"character_string", "other_data_item", "data_name", "sd_clause", "report_is", 
		"report_name", "linage", "bottom_lines", "top_lines", "footing_line", 
		"page_size", "data_rec", "rec_name", "value_of_id", "value_of_id_definition", 
		"label", "record", "record_definition", "depending_item", "shortest_rec", 
		"longest_rec", "screen_description_entry", "screen_description_clause", 
		"scr_light", "scr_picture", "scr_value", "scr_column", "scr_line", "scr_underline", 
		"scr_reverse", "scr_lowlight", "scr_highlight", "scr_erase", "scr_blink", 
		"scr_bell", "scr_full", "scr_required", "scr_secure", "scr_auto", "scr_background", 
		"scr_foreground", "scr_blank", "scr_pic_using", "scr_pic_from", "scr_pic_to", 
		"nonnumeric_literal", "src_number", "color_num", "program_id", "program_name", 
		"common_initial", "with_ident", "ident_string", "installation", "date_written", 
		"date_compiled", "security", "options_", "arithmetic", "configuration_section", 
		"input_output_section", "source_computer", "computer_type", "with_debugging", 
		"object_computer", "memory_size", "memory_size_amount", "memory_size_unit", 
		"program_collating", "alpha_name", "segment_limit", "segment_number", 
		"special_names", "special_names_content", "cursor_is", "crt_is", "predefined_name_relation", 
		"predefined_name", "switch_definition", "switch_clause_on", "switch_clause_off", 
		"cond_name", "switch_name", "switch_num", "qualified_data_item", "currency", 
		"currency_definition", "currency_string", "currency_char", "class_", "class_name", 
		"user_class", "symbolic_chars", "symb_ch_definition", "symb_ch_def_clause", 
		"symb_ch_def_in_alphabet", "symbol_char", "char_val", "alphabet", "alpha_value", 
		"user_alpha", "first_literal", "last_literal", "same_literal", "top_of_page_name", 
		"user_name", "file_control", "select", "select_clause", "file_status", 
		"file_stat", "record_key", "alt_record_key", "record_key_definition", 
		"seg_key", "rec_key", "access_mode", "reserve", "reserve_num", "record_delimiter", 
		"padding", "pad_char", "organization", "lock_mode", "lock_mode_definition", 
		"code_set", "block_contains", "smallest_block", "blocksize", "assign_to", 
		"assign_to_definition", "file_spec", "file_name", "i_o_control", "i_o_control_clause", 
		"multiple_file", "multiple_file_definition", "multiple_file_name", "pos_integer", 
		"rerun", "rerun_definition", "clock_count", "condition_name", "rerun_def_file", 
		"rec_count", "same", "same_area_file", "apply", "apply_definition", "window_ptrs", 
		"preall_amt", "extend_amt", "arithmetic_expression", "constant", "binary_arithmetic_operator", 
		"unary_arithmetic_operator", "logic_expression", "logic_condition", "logic_condition_abbrev", 
		"logic_operation", "bool_condition_name", "sign_condition_name", "class_condition_name", 
		"condition_operator", "identifier_result", "identifier", "arguments", 
		"subscripting", "reference_modification", "leftmost_character_position", 
		"length", "function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'!'", 
		"'_'", "'+'", "'-'", "'*'", "'/'", "':'", "'='", "'<'", "'<='", "'>='", 
		"'>'", "'('", "')'", "'['", "']'", "'^'", "'@'", null, "'{'", "'}'", null, 
		null, null, null, "','", "';'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "STRING_LITERAL_", "ACCEPT", "ACCESS", "ADD", "ADVANCING", "AFTER", 
		"ALL", "ALLOWING", "ALPHA", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", 
		"ALPHABETIC_UPPER", "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER", 
		"ALTERNATE", "AND", "ANY", "APPLY", "ARE", "AREA", "AREAS", "ARGUMENT_NUMBER", 
		"ARGUMENT_VALUE", "ARITHMETIC", "ASCENDING", "ASCII", "ASSIGN", "AT", 
		"AUTHOR", "AUTO", "AUTOMATIC", "AUTOTERMINATE", "BACKGROUND_COLOR", "BEFORE", 
		"BELL", "BINARY", "BINARY_CHAR", "BINARY_DOUBLE", "BINARY_LONG", "BINARY_SHORT", 
		"BLANK", "BLINK", "BLINKING", "BLOCK", "BOLD", "BOTTOM", "BY", "C01", 
		"CALL", "CANCEL", "CARD_READER", "CF", "CH", "CHARACTER", "CHARACTERS", 
		"CLASS", "CLOCK_UNITS", "CLOSE", "CODE", "CODE_SET", "COLLATING", "COLUMN", 
		"COMMA", "COMMON", "COMP", "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", 
		"COMPUTATIONAL_3", "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTATIONAL_X", 
		"COMPUTE", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", "COMP_X", 
		"CONFIGURATION", "CONSOLE", "CONTAINS", "CONTENT", "CONTIGUOUS", "CONTIGUOUS_BEST_TRY", 
		"CONTINUE", "CONTROL", "CONTROLS", "CONVERSION", "CONVERTING", "COPY", 
		"CORR", "CORRESPONDING", "COUNT", "CRT", "CURRENCY", "CURRENT", "CURSOR", 
		"DATA", "DATE", "DATE_COMPILED", "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", 
		"DE", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DEFERRED_WRITE", 
		"DELETE", "DELIMITED", "DELIMITER", "DEPENDENCY", "DEPENDING", "DESCENDING", 
		"DESCRIPTOR", "DETAIL", "DICTIONARY", "DISK", "DISPLAY", "DIVIDE", "DIVISION", 
		"DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "ECHO", "EDITING", "ELSE", 
		"END", "END_ACCEPT", "END_ADD", "END_CALL", "END_COMPUTE", "END_DELETE", 
		"END_DISPLAY", "END_DIVIDE", "END_EVALUATE", "END_IF", "END_MULTIPLY", 
		"END_OF_PAGE", "END_PERFORM", "END_READ", "END_RETURN", "END_REWRITE", 
		"END_SEARCH", "END_START", "END_STRING", "END_SUBTRACT", "END_UNSTRING", 
		"END_WRITE", "ENVIRONMENT", "ENVIRONMENT_NAME", "ENVIRONMENT_VALUE", "EOL", 
		"EOP", "EOS", "EQUAL", "ERASE", "ERROR", "EVALUATE", "EVERY", "EXCEPTION", 
		"EXCLUSIVE", "EXIT", "EXTEND", "EXTENSION", "EXTERNAL", "FAILURE", "FALSE", 
		"FD", "FILE", "FILE_CONTROL", "FILE_ID", "FILLER", "FILL_SIZE", "FINAL", 
		"FIRST", "FLOAT_EXTENDED", "FLOAT_LONG", "FLOAT_SHORT", "FOOTING", "FOR", 
		"FOREGROUND_COLOR", "FROM", "FULL", "FUNCTION", "GENERATE", "GIVING", 
		"GLOBAL", "GO", "GREATER", "GROUP", "HEADING", "HIGHLIGHT", "HIGH_VALUE", 
		"HIGH_VALUES", "I64", "ID", "IDENT", "IDENTIFICATION", "IF", "IN", "INDEX", 
		"INDEXED", "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
		"INSPECT", "INSTALLATION", "INTO", "INVALID", "IS", "I_O", "I_O_CONTROL", 
		"JUST", "JUSTIFIED", "KEY", "LABEL", "LAST", "LEADING", "LEFT", "LESS", 
		"LIMIT", "LIMITS", "LINAGE", "LINE", "LINES", "LINE_PRINTER", "LINKAGE", 
		"LOCK", "LOCK_HOLDING", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MANUAL", 
		"MASS_INSERT", "MEMORY", "MERGE", "MODE", "MODULES", "MOVE", "MULTIPLE", 
		"MULTIPLY", "NATIVE", "NEGATIVE", "NEXT", "NO", "NOT", "NUMBER", "NUMERIC", 
		"NUMERIC_EDITED", "OBJECT_COMPUTER", "OCCURS", "OF", "OFF", "OMITTED", 
		"ON", "OPEN", "OPTIONAL", "OPTIONS", "OR", "ORDER", "ORGANIZATION", "OTHER", 
		"OTHERS", "OUTPUT", "OVERFLOW", "PACKED_DECIMAL", "PADDING", "PAGE", "PAPER_TAPE_PUNCH", 
		"PAPER_TAPE_READER", "PERFORM", "PF", "PH", "PLUS", "POINTER", "POINTER_64", 
		"POSITION", "POSITIVE", "PREALLOCATION", "PREVIOUS", "PRINTER", "PRINTING", 
		"PRINT_CONTROL", "PRIOR", "PROCEDURE", "PROCEED", "PROGRAM", "PROGRAM_ID", 
		"PROTECTED", "QUOTE", "QUOTES", "RANDOM", "RD", "READ", "READERS", "RECORD", 
		"RECORDS", "REDEFINES", "REEL", "REFERENCE", "REGARDLESS", "RELATIVE", 
		"RELEASE", "REMAINDER", "REMOVAL", "RENAMES", "REPLACE", "REPLACING", 
		"REPORT", "REPORTING", "REPORTS", "REQUIRED", "RERUN", "RESERVE", "RESET", 
		"RETURN", "REVERSED", "REVERSE_VIDEO", "REWIND", "REWRITE", "RF", "RH", 
		"RIGHT", "ROLLBACK", "ROUNDED", "RUN", "SAME", "SCREEN", "SD", "SEARCH", 
		"SECTION", "SECURE", "SECURITY", "SEGMENT_LIMIT", "SELECT", "SENTENCE", 
		"SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SIGN", "SIGNED", "SIZE", 
		"SORT", "SORT_MERGE", "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", 
		"SPECIAL_NAMES", "STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", 
		"STOP", "STRING", "SUBTRACT", "SUCCESS", "SUM", "SUPPRESS", "SWITCH", 
		"SWITCH_N_", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "SYSERR", "SYSIN", 
		"SYSOUT", "TALLYING", "TAPE", "TERMINATE", "TEST", "THAN", "THEN", "THROUGH", 
		"THRU", "TIME", "TIMES", "TO", "TOP", "TRAILING", "TRUE", "TYPE", "UNDERLINE", 
		"UNDERLINED", "UNIT", "UNLOCK", "UNSIGNED", "UNSTRING", "UNTIL", "UP", 
		"UPDATERS", "UPON", "USAGE", "USE", "USING", "VALUE", "VALUES", "VARYING", 
		"VAX", "WHEN", "WINDOW", "WITH", "WORDS", "WORKING_STORAGE", "WRITE", 
		"WRITERS", "YYYYDDD", "YYYYMMDD", "ZERO", "ZEROES", "ZEROS", "EXEC", "SQL", 
		"END_EXEC", "PIC", "PICTURE", "PSEUDO_TEXT_", "EXCLAM_", "UNDER_", "PLUS_", 
		"MINUS_", "STAR_", "SLASH_", "COLON_", "EQUAL_", "LT_", "LE_", "GE_", 
		"GT_", "LPAREN_", "RPAREN_", "LBRACK_", "RBRACK_", "POINTER_", "ATP_", 
		"DOT_", "LCURLY_", "RCURLY_", "NUMERIC_LITERAL_", "INTEGER_LITERAL_", 
		"HEX_LITERAL_", "USER_DEFINED_WORD_", "COMMA_", "SEMI_", "WHITESPACE_", 
		"NEWLINE_", "ANY_CHAR_", "SYMBOL_IN_PICTURE_", "IS_IN_PICTURE_", "CHARACTER_STRING_"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "cobol.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public cobolParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Cobol_sourceContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(cobolParser.EOF, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<ProgramContext> program() {
			return getRuleContexts(ProgramContext.class);
		}
		public ProgramContext program(int i) {
			return getRuleContext(ProgramContext.class,i);
		}
		public Cobol_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cobol_source; }
	}

	public final Cobol_sourceContext cobol_source() throws RecognitionException {
		Cobol_sourceContext _localctx = new Cobol_sourceContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_cobol_source);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(998);
				replace_statement();
				}
				}
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IDENTIFICATION) {
				{
				{
				setState(1004);
				program();
				}
				}
				setState(1009);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1010);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgramContext extends ParserRuleContext {
		public Identification_divisionContext identification_division() {
			return getRuleContext(Identification_divisionContext.class,0);
		}
		public Environment_divisionContext environment_division() {
			return getRuleContext(Environment_divisionContext.class,0);
		}
		public Data_divisionContext data_division() {
			return getRuleContext(Data_divisionContext.class,0);
		}
		public Procedure_divisionContext procedure_division() {
			return getRuleContext(Procedure_divisionContext.class,0);
		}
		public List<ProgramContext> program() {
			return getRuleContexts(ProgramContext.class);
		}
		public ProgramContext program(int i) {
			return getRuleContext(ProgramContext.class,i);
		}
		public End_programContext end_program() {
			return getRuleContext(End_programContext.class,0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1012);
			identification_division();
			setState(1014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENVIRONMENT) {
				{
				setState(1013);
				environment_division();
				}
			}

			setState(1017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA) {
				{
				setState(1016);
				data_division();
				}
			}

			setState(1020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURE) {
				{
				setState(1019);
				procedure_division();
				}
			}

			setState(1025);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1022);
					program();
					}
					} 
				}
				setState(1027);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(1029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(1028);
				end_program();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identification_divisionContext extends ParserRuleContext {
		public Identification_division_headerContext identification_division_header() {
			return getRuleContext(Identification_division_headerContext.class,0);
		}
		public Program_idContext program_id() {
			return getRuleContext(Program_idContext.class,0);
		}
		public AuthorContext author() {
			return getRuleContext(AuthorContext.class,0);
		}
		public InstallationContext installation() {
			return getRuleContext(InstallationContext.class,0);
		}
		public Date_writtenContext date_written() {
			return getRuleContext(Date_writtenContext.class,0);
		}
		public Date_compiledContext date_compiled() {
			return getRuleContext(Date_compiledContext.class,0);
		}
		public SecurityContext security() {
			return getRuleContext(SecurityContext.class,0);
		}
		public Options_Context options_() {
			return getRuleContext(Options_Context.class,0);
		}
		public Identification_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identification_division; }
	}

	public final Identification_divisionContext identification_division() throws RecognitionException {
		Identification_divisionContext _localctx = new Identification_divisionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_identification_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1031);
			identification_division_header();
			setState(1032);
			program_id();
			setState(1034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHOR) {
				{
				setState(1033);
				author();
				}
			}

			setState(1037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTALLATION) {
				{
				setState(1036);
				installation();
				}
			}

			setState(1040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATE_WRITTEN) {
				{
				setState(1039);
				date_written();
				}
			}

			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATE_COMPILED) {
				{
				setState(1042);
				date_compiled();
				}
			}

			setState(1046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURITY) {
				{
				setState(1045);
				security();
				}
			}

			setState(1049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(1048);
				options_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identification_division_headerContext extends ParserRuleContext {
		public TerminalNode IDENTIFICATION() { return getToken(cobolParser.IDENTIFICATION, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Identification_division_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identification_division_header; }
	}

	public final Identification_division_headerContext identification_division_header() throws RecognitionException {
		Identification_division_headerContext _localctx = new Identification_division_headerContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_identification_division_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1051);
			match(IDENTIFICATION);
			setState(1052);
			match(DIVISION);
			setState(1053);
			match(DOT_);
			setState(1057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1054);
				replace_statement();
				}
				}
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Environment_divisionContext extends ParserRuleContext {
		public Environment_division_headerContext environment_division_header() {
			return getRuleContext(Environment_division_headerContext.class,0);
		}
		public Configuration_sectionContext configuration_section() {
			return getRuleContext(Configuration_sectionContext.class,0);
		}
		public Input_output_sectionContext input_output_section() {
			return getRuleContext(Input_output_sectionContext.class,0);
		}
		public Environment_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_environment_division; }
	}

	public final Environment_divisionContext environment_division() throws RecognitionException {
		Environment_divisionContext _localctx = new Environment_divisionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_environment_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1060);
			environment_division_header();
			setState(1062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONFIGURATION) {
				{
				setState(1061);
				configuration_section();
				}
			}

			setState(1065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INPUT_OUTPUT) {
				{
				setState(1064);
				input_output_section();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Environment_division_headerContext extends ParserRuleContext {
		public TerminalNode ENVIRONMENT() { return getToken(cobolParser.ENVIRONMENT, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Environment_division_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_environment_division_header; }
	}

	public final Environment_division_headerContext environment_division_header() throws RecognitionException {
		Environment_division_headerContext _localctx = new Environment_division_headerContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_environment_division_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1067);
			match(ENVIRONMENT);
			setState(1068);
			match(DIVISION);
			setState(1069);
			match(DOT_);
			setState(1073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1070);
				replace_statement();
				}
				}
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_divisionContext extends ParserRuleContext {
		public Data_division_headerContext data_division_header() {
			return getRuleContext(Data_division_headerContext.class,0);
		}
		public File_sectionContext file_section() {
			return getRuleContext(File_sectionContext.class,0);
		}
		public Working_storage_sectionContext working_storage_section() {
			return getRuleContext(Working_storage_sectionContext.class,0);
		}
		public Linkage_sectionContext linkage_section() {
			return getRuleContext(Linkage_sectionContext.class,0);
		}
		public Report_sectionContext report_section() {
			return getRuleContext(Report_sectionContext.class,0);
		}
		public Screen_sectionContext screen_section() {
			return getRuleContext(Screen_sectionContext.class,0);
		}
		public Data_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_division; }
	}

	public final Data_divisionContext data_division() throws RecognitionException {
		Data_divisionContext _localctx = new Data_divisionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_data_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1076);
			data_division_header();
			setState(1078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE) {
				{
				setState(1077);
				file_section();
				}
			}

			setState(1081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORKING_STORAGE) {
				{
				setState(1080);
				working_storage_section();
				}
			}

			setState(1084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINKAGE) {
				{
				setState(1083);
				linkage_section();
				}
			}

			setState(1087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPORT) {
				{
				setState(1086);
				report_section();
				}
			}

			setState(1090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCREEN) {
				{
				setState(1089);
				screen_section();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_division_headerContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(cobolParser.DATA, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Data_division_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_division_header; }
	}

	public final Data_division_headerContext data_division_header() throws RecognitionException {
		Data_division_headerContext _localctx = new Data_division_headerContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_data_division_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			match(DATA);
			setState(1093);
			match(DIVISION);
			setState(1094);
			match(DOT_);
			setState(1098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1095);
				replace_statement();
				}
				}
				setState(1100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_divisionContext extends ParserRuleContext {
		public Procedure_division_headerContext procedure_division_header() {
			return getRuleContext(Procedure_division_headerContext.class,0);
		}
		public DeclarativesContext declaratives() {
			return getRuleContext(DeclarativesContext.class,0);
		}
		public List<SectionContext> section() {
			return getRuleContexts(SectionContext.class);
		}
		public SectionContext section(int i) {
			return getRuleContext(SectionContext.class,i);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public Procedure_divisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division; }
	}

	public final Procedure_divisionContext procedure_division() throws RecognitionException {
		Procedure_divisionContext _localctx = new Procedure_divisionContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_procedure_division);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1101);
			procedure_division_header();
			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARATIVES) {
				{
				setState(1102);
				declaratives();
				}
			}

			setState(1117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTEGER_LITERAL_ || _la==USER_DEFINED_WORD_) {
					{
					{
					setState(1105);
					section();
					}
					}
					setState(1110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTEGER_LITERAL_ || _la==USER_DEFINED_WORD_) {
					{
					{
					setState(1111);
					paragraph();
					}
					}
					setState(1116);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Word_in_area_BContext extends ParserRuleContext {
		public Word_in_area_BContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_word_in_area_B; }
	}

	public final Word_in_area_BContext word_in_area_B() throws RecognitionException {
		Word_in_area_BContext _localctx = new Word_in_area_BContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_word_in_area_B);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1119);
			if (!( (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false )) throw new FailedPredicateException(this, " (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false ");
			setState(1120);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthorContext extends ParserRuleContext {
		public Author_headerContext author_header() {
			return getRuleContext(Author_headerContext.class,0);
		}
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public AuthorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_author; }
	}

	public final AuthorContext author() throws RecognitionException {
		AuthorContext _localctx = new AuthorContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_author);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1122);
			author_header();
			setState(1126);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1123);
					word_in_area_B();
					}
					} 
				}
				setState(1128);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			setState(1132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1129);
				replace_statement();
				}
				}
				setState(1134);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Author_headerContext extends ParserRuleContext {
		public TerminalNode AUTHOR() { return getToken(cobolParser.AUTHOR, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Author_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_author_header; }
	}

	public final Author_headerContext author_header() throws RecognitionException {
		Author_headerContext _localctx = new Author_headerContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_author_header);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1135);
			match(AUTHOR);
			setState(1136);
			match(DOT_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_all_zeroContext extends ParserRuleContext {
		public TerminalNode SPACE() { return getToken(cobolParser.SPACE, 0); }
		public TerminalNode SPACES() { return getToken(cobolParser.SPACES, 0); }
		public TerminalNode HIGH_VALUE() { return getToken(cobolParser.HIGH_VALUE, 0); }
		public TerminalNode HIGH_VALUES() { return getToken(cobolParser.HIGH_VALUES, 0); }
		public TerminalNode LOW_VALUE() { return getToken(cobolParser.LOW_VALUE, 0); }
		public TerminalNode LOW_VALUES() { return getToken(cobolParser.LOW_VALUES, 0); }
		public TerminalNode QUOTE() { return getToken(cobolParser.QUOTE, 0); }
		public TerminalNode QUOTES() { return getToken(cobolParser.QUOTES, 0); }
		public Figurative_constant_witout_all_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_all_zero; }
	}

	public final Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() throws RecognitionException {
		Figurative_constant_witout_all_zeroContext _localctx = new Figurative_constant_witout_all_zeroContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_figurative_constant_witout_all_zero);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1138);
			_la = _input.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_zeroContext extends ParserRuleContext {
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public TerminalNode ZEROS() { return getToken(cobolParser.ZEROS, 0); }
		public TerminalNode ZEROES() { return getToken(cobolParser.ZEROES, 0); }
		public Figurative_constant_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_zero; }
	}

	public final Figurative_constant_zeroContext figurative_constant_zero() throws RecognitionException {
		Figurative_constant_zeroContext _localctx = new Figurative_constant_zeroContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_figurative_constant_zero);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1140);
			_la = _input.LA(1);
			if ( !(((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_allContext extends ParserRuleContext {
		public Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() {
			return getRuleContext(Figurative_constant_witout_all_zeroContext.class,0);
		}
		public Figurative_constant_zeroContext figurative_constant_zero() {
			return getRuleContext(Figurative_constant_zeroContext.class,0);
		}
		public Figurative_constant_witout_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_all; }
	}

	public final Figurative_constant_witout_allContext figurative_constant_witout_all() throws RecognitionException {
		Figurative_constant_witout_allContext _localctx = new Figurative_constant_witout_allContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_figurative_constant_witout_all);
		try {
			setState(1144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(1142);
				figurative_constant_witout_all_zero();
				}
				break;
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1143);
				figurative_constant_zero();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constant_witout_zeroContext extends ParserRuleContext {
		public Figurative_constant_witout_all_zeroContext figurative_constant_witout_all_zero() {
			return getRuleContext(Figurative_constant_witout_all_zeroContext.class,0);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Figurative_constant_witout_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant_witout_zero; }
	}

	public final Figurative_constant_witout_zeroContext figurative_constant_witout_zero() throws RecognitionException {
		Figurative_constant_witout_zeroContext _localctx = new Figurative_constant_witout_zeroContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_figurative_constant_witout_zero);
		try {
			setState(1149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(1146);
				figurative_constant_witout_all_zero();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1147);
				match(ALL);
				setState(1148);
				match(STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Figurative_constantContext extends ParserRuleContext {
		public Figurative_constant_witout_zeroContext figurative_constant_witout_zero() {
			return getRuleContext(Figurative_constant_witout_zeroContext.class,0);
		}
		public Figurative_constant_zeroContext figurative_constant_zero() {
			return getRuleContext(Figurative_constant_zeroContext.class,0);
		}
		public Figurative_constantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_figurative_constant; }
	}

	public final Figurative_constantContext figurative_constant() throws RecognitionException {
		Figurative_constantContext _localctx = new Figurative_constantContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_figurative_constant);
		try {
			setState(1153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
				enterOuterAlt(_localctx, 1);
				{
				setState(1151);
				figurative_constant_witout_zero();
				}
				break;
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1152);
				figurative_constant_zero();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_programContext extends ParserRuleContext {
		public End_program_headerContext end_program_header() {
			return getRuleContext(End_program_headerContext.class,0);
		}
		public Program_nameContext program_name() {
			return getRuleContext(Program_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public End_programContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_program; }
	}

	public final End_programContext end_program() throws RecognitionException {
		End_programContext _localctx = new End_programContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_end_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1155);
			end_program_header();
			setState(1156);
			program_name();
			setState(1157);
			match(DOT_);
			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1158);
				replace_statement();
				}
				}
				setState(1163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_program_headerContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public End_program_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_program_header; }
	}

	public final End_program_headerContext end_program_header() throws RecognitionException {
		End_program_headerContext _localctx = new End_program_headerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_end_program_header);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1164);
			match(END);
			setState(1165);
			match(PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_division_headerContext extends ParserRuleContext {
		public Procedure_division_header_startContext procedure_division_header_start() {
			return getRuleContext(Procedure_division_header_startContext.class,0);
		}
		public Procedure_division_header_endContext procedure_division_header_end() {
			return getRuleContext(Procedure_division_header_endContext.class,0);
		}
		public UsingContext using() {
			return getRuleContext(UsingContext.class,0);
		}
		public GivingContext giving() {
			return getRuleContext(GivingContext.class,0);
		}
		public Procedure_division_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division_header; }
	}

	public final Procedure_division_headerContext procedure_division_header() throws RecognitionException {
		Procedure_division_headerContext _localctx = new Procedure_division_headerContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_procedure_division_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1167);
			procedure_division_header_start();
			setState(1169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1168);
				using();
				}
			}

			setState(1172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GIVING) {
				{
				setState(1171);
				giving();
				}
			}

			setState(1174);
			procedure_division_header_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_division_header_startContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public TerminalNode DIVISION() { return getToken(cobolParser.DIVISION, 0); }
		public Procedure_division_header_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division_header_start; }
	}

	public final Procedure_division_header_startContext procedure_division_header_start() throws RecognitionException {
		Procedure_division_header_startContext _localctx = new Procedure_division_header_startContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_procedure_division_header_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1176);
			match(PROCEDURE);
			setState(1177);
			match(DIVISION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_division_header_endContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Procedure_division_header_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_division_header_end; }
	}

	public final Procedure_division_header_endContext procedure_division_header_end() throws RecognitionException {
		Procedure_division_header_endContext _localctx = new Procedure_division_header_endContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_procedure_division_header_end);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1179);
			match(DOT_);
			setState(1183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1180);
				replace_statement();
				}
				}
				setState(1185);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SectionContext extends ParserRuleContext {
		public Section_headerContext section_header() {
			return getRuleContext(Section_headerContext.class,0);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section; }
	}

	public final SectionContext section() throws RecognitionException {
		SectionContext _localctx = new SectionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_section);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1186);
			section_header();
			setState(1190);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1187);
					paragraph();
					}
					} 
				}
				setState(1192);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarativesContext extends ParserRuleContext {
		public Declaratives_headerContext declaratives_header() {
			return getRuleContext(Declaratives_headerContext.class,0);
		}
		public End_declarativesContext end_declaratives() {
			return getRuleContext(End_declarativesContext.class,0);
		}
		public List<Declaratives_sectionContext> declaratives_section() {
			return getRuleContexts(Declaratives_sectionContext.class);
		}
		public Declaratives_sectionContext declaratives_section(int i) {
			return getRuleContext(Declaratives_sectionContext.class,i);
		}
		public DeclarativesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaratives; }
	}

	public final DeclarativesContext declaratives() throws RecognitionException {
		DeclarativesContext _localctx = new DeclarativesContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_declaratives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			declaratives_header();
			setState(1197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==USER_DEFINED_WORD_) {
				{
				{
				setState(1194);
				declaratives_section();
				}
				}
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1200);
			end_declaratives();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declaratives_headerContext extends ParserRuleContext {
		public TerminalNode DECLARATIVES() { return getToken(cobolParser.DECLARATIVES, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Declaratives_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaratives_header; }
	}

	public final Declaratives_headerContext declaratives_header() throws RecognitionException {
		Declaratives_headerContext _localctx = new Declaratives_headerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_declaratives_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(DECLARATIVES);
			setState(1203);
			match(DOT_);
			setState(1207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1204);
				replace_statement();
				}
				}
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_declarativesContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode DECLARATIVES() { return getToken(cobolParser.DECLARATIVES, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public End_declarativesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_declaratives; }
	}

	public final End_declarativesContext end_declaratives() throws RecognitionException {
		End_declarativesContext _localctx = new End_declarativesContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_end_declaratives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1210);
			match(END);
			setState(1211);
			match(DECLARATIVES);
			setState(1212);
			match(DOT_);
			setState(1216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1213);
				replace_statement();
				}
				}
				setState(1218);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declaratives_sectionContext extends ParserRuleContext {
		public Section_headerContext section_header() {
			return getRuleContext(Section_headerContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public List<ParagraphContext> paragraph() {
			return getRuleContexts(ParagraphContext.class);
		}
		public ParagraphContext paragraph(int i) {
			return getRuleContext(ParagraphContext.class,i);
		}
		public Declaratives_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaratives_section; }
	}

	public final Declaratives_sectionContext declaratives_section() throws RecognitionException {
		Declaratives_sectionContext _localctx = new Declaratives_sectionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_declaratives_section);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			section_header();
			setState(1220);
			use_statement();
			setState(1224);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1221);
					paragraph();
					}
					} 
				}
				setState(1226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParagraphContext extends ParserRuleContext {
		public Paragraph_nameContext paragraph_name() {
			return getRuleContext(Paragraph_nameContext.class,0);
		}
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paragraph; }
	}

	public final ParagraphContext paragraph() throws RecognitionException {
		ParagraphContext _localctx = new ParagraphContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_paragraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1227);
			paragraph_name();
			setState(1228);
			match(DOT_);
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1229);
				replace_statement();
				}
				}
				setState(1234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELEASE - 313)) | (1L << (RETURN - 313)) | (1L << (REWRITE - 313)) | (1L << (SEARCH - 313)) | (1L << (SET - 313)) | (1L << (SORT - 313)) | (1L << (START - 313)) | (1L << (STOP - 313)) | (1L << (STRING - 313)) | (1L << (SUBTRACT - 313)) | (1L << (SUPPRESS - 313)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (TERMINATE - 383)) | (1L << (UNLOCK - 383)) | (1L << (UNSTRING - 383)) | (1L << (WRITE - 383)) | (1L << (EXEC - 383)))) != 0)) {
				{
				{
				setState(1237); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1237);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(1235);
						statement();
						}
						break;
					case EXEC:
						{
						setState(1236);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1239); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELEASE - 313)) | (1L << (RETURN - 313)) | (1L << (REWRITE - 313)) | (1L << (SEARCH - 313)) | (1L << (SET - 313)) | (1L << (SORT - 313)) | (1L << (START - 313)) | (1L << (STOP - 313)) | (1L << (STRING - 313)) | (1L << (SUBTRACT - 313)) | (1L << (SUPPRESS - 313)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (TERMINATE - 383)) | (1L << (UNLOCK - 383)) | (1L << (UNSTRING - 383)) | (1L << (WRITE - 383)) | (1L << (EXEC - 383)))) != 0) );
				setState(1241);
				match(DOT_);
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==REPLACE) {
					{
					{
					setState(1242);
					replace_statement();
					}
					}
					setState(1247);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(1252);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Paragraph_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public Paragraph_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paragraph_name; }
	}

	public final Paragraph_nameContext paragraph_name() throws RecognitionException {
		Paragraph_nameContext _localctx = new Paragraph_nameContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_paragraph_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(cobolParser.USE, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Use_onContext use_on() {
			return getRuleContext(Use_onContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode REPORTING() { return getToken(cobolParser.REPORTING, 0); }
		public Group_data_nameContext group_data_name() {
			return getRuleContext(Group_data_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public TerminalNode EXCEPTION() { return getToken(cobolParser.EXCEPTION, 0); }
		public TerminalNode ERROR() { return getToken(cobolParser.ERROR, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_use_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1255);
			match(USE);
			setState(1257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(1256);
				match(GLOBAL);
				}
			}

			setState(1272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER:
				{
				setState(1259);
				match(AFTER);
				setState(1261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STANDARD) {
					{
					setState(1260);
					match(STANDARD);
					}
				}

				setState(1263);
				_la = _input.LA(1);
				if ( !(_la==ERROR || _la==EXCEPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1264);
				match(PROCEDURE);
				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1265);
					match(ON);
					}
				}

				setState(1268);
				use_on();
				}
				break;
			case BEFORE:
				{
				setState(1269);
				match(BEFORE);
				setState(1270);
				match(REPORTING);
				setState(1271);
				group_data_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1274);
			match(DOT_);
			setState(1278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1275);
				replace_statement();
				}
				}
				setState(1280);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_data_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Group_data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_data_name; }
	}

	public final Group_data_nameContext group_data_name() throws RecognitionException {
		Group_data_nameContext _localctx = new Group_data_nameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_group_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1281);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_onContext extends ParserRuleContext {
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode I_O() { return getToken(cobolParser.I_O, 0); }
		public TerminalNode EXTEND() { return getToken(cobolParser.EXTEND, 0); }
		public Use_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_on; }
	}

	public final Use_onContext use_on() throws RecognitionException {
		Use_onContext _localctx = new Use_onContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_use_on);
		int _la;
		try {
			setState(1292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1284); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1283);
					file_name();
					}
					}
					setState(1286); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case INPUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1288);
				match(INPUT);
				}
				break;
			case OUTPUT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1289);
				match(OUTPUT);
				}
				break;
			case I_O:
				enterOuterAlt(_localctx, 4);
				{
				setState(1290);
				match(I_O);
				}
				break;
			case EXTEND:
				enterOuterAlt(_localctx, 5);
				{
				setState(1291);
				match(EXTEND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Section_headerContext extends ParserRuleContext {
		public Section_nameContext section_name() {
			return getRuleContext(Section_nameContext.class,0);
		}
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Segment_numberContext segment_number() {
			return getRuleContext(Segment_numberContext.class,0);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Section_headerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section_header; }
	}

	public final Section_headerContext section_header() throws RecognitionException {
		Section_headerContext _localctx = new Section_headerContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_section_header);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1294);
			section_name();
			setState(1295);
			match(SECTION);
			setState(1297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				setState(1296);
				segment_number();
				}
			}

			setState(1299);
			match(DOT_);
			setState(1303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(1300);
				replace_statement();
				}
				}
				setState(1305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Section_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public Section_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_section_name; }
	}

	public final Section_nameContext section_name() throws RecognitionException {
		Section_nameContext _localctx = new Section_nameContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_section_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1306);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public List<Qualified_data_itemContext> qualified_data_item() {
			return getRuleContexts(Qualified_data_itemContext.class);
		}
		public Qualified_data_itemContext qualified_data_item(int i) {
			return getRuleContext(Qualified_data_itemContext.class,i);
		}
		public UsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using; }
	}

	public final UsingContext using() throws RecognitionException {
		UsingContext _localctx = new UsingContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_using);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			match(USING);
			setState(1310); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1309);
				qualified_data_item();
				}
				}
				setState(1312); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GivingContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public GivingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_giving; }
	}

	public final GivingContext giving() throws RecognitionException {
		GivingContext _localctx = new GivingContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_giving);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(GIVING);
			setState(1315);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Accept_statementContext accept_statement() {
			return getRuleContext(Accept_statementContext.class,0);
		}
		public Add_statementContext add_statement() {
			return getRuleContext(Add_statementContext.class,0);
		}
		public Alter_statementContext alter_statement() {
			return getRuleContext(Alter_statementContext.class,0);
		}
		public Call_statementContext call_statement() {
			return getRuleContext(Call_statementContext.class,0);
		}
		public Cancel_statementContext cancel_statement() {
			return getRuleContext(Cancel_statementContext.class,0);
		}
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Compute_statementContext compute_statement() {
			return getRuleContext(Compute_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Display_statementContext display_statement() {
			return getRuleContext(Display_statementContext.class,0);
		}
		public Divide_statementContext divide_statement() {
			return getRuleContext(Divide_statementContext.class,0);
		}
		public Evaluate_statementContext evaluate_statement() {
			return getRuleContext(Evaluate_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Exit_program_statementContext exit_program_statement() {
			return getRuleContext(Exit_program_statementContext.class,0);
		}
		public Generate_statementContext generate_statement() {
			return getRuleContext(Generate_statementContext.class,0);
		}
		public Go_to_statementContext go_to_statement() {
			return getRuleContext(Go_to_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Initialize_statementContext initialize_statement() {
			return getRuleContext(Initialize_statementContext.class,0);
		}
		public Initiate_statementContext initiate_statement() {
			return getRuleContext(Initiate_statementContext.class,0);
		}
		public Inspect_statementContext inspect_statement() {
			return getRuleContext(Inspect_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Move_statementContext move_statement() {
			return getRuleContext(Move_statementContext.class,0);
		}
		public Multiply_statementContext multiply_statement() {
			return getRuleContext(Multiply_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Perform_statementContext perform_statement() {
			return getRuleContext(Perform_statementContext.class,0);
		}
		public Read_statementContext read_statement() {
			return getRuleContext(Read_statementContext.class,0);
		}
		public Release_statementContext release_statement() {
			return getRuleContext(Release_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Rewrite_statementContext rewrite_statement() {
			return getRuleContext(Rewrite_statementContext.class,0);
		}
		public Search_statementContext search_statement() {
			return getRuleContext(Search_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Sort_statementContext sort_statement() {
			return getRuleContext(Sort_statementContext.class,0);
		}
		public Start_statementContext start_statement() {
			return getRuleContext(Start_statementContext.class,0);
		}
		public Stop_statementContext stop_statement() {
			return getRuleContext(Stop_statementContext.class,0);
		}
		public String_statementContext string_statement() {
			return getRuleContext(String_statementContext.class,0);
		}
		public Subtract_statementContext subtract_statement() {
			return getRuleContext(Subtract_statementContext.class,0);
		}
		public Suppress_statementContext suppress_statement() {
			return getRuleContext(Suppress_statementContext.class,0);
		}
		public Terminate_statementContext terminate_statement() {
			return getRuleContext(Terminate_statementContext.class,0);
		}
		public Unlock_statementContext unlock_statement() {
			return getRuleContext(Unlock_statementContext.class,0);
		}
		public Unstring_statementContext unstring_statement() {
			return getRuleContext(Unstring_statementContext.class,0);
		}
		public Write_statementContext write_statement() {
			return getRuleContext(Write_statementContext.class,0);
		}
		public Record_statementContext record_statement() {
			return getRuleContext(Record_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(1317);
				accept_statement();
				}
				break;
			case 2:
				{
				setState(1318);
				add_statement();
				}
				break;
			case 3:
				{
				setState(1319);
				alter_statement();
				}
				break;
			case 4:
				{
				setState(1320);
				call_statement();
				}
				break;
			case 5:
				{
				setState(1321);
				cancel_statement();
				}
				break;
			case 6:
				{
				setState(1322);
				close_statement();
				}
				break;
			case 7:
				{
				setState(1323);
				compute_statement();
				}
				break;
			case 8:
				{
				setState(1324);
				continue_statement();
				}
				break;
			case 9:
				{
				setState(1325);
				delete_statement();
				}
				break;
			case 10:
				{
				setState(1326);
				display_statement();
				}
				break;
			case 11:
				{
				setState(1327);
				divide_statement();
				}
				break;
			case 12:
				{
				setState(1328);
				evaluate_statement();
				}
				break;
			case 13:
				{
				setState(1329);
				exit_statement();
				}
				break;
			case 14:
				{
				setState(1330);
				exit_program_statement();
				}
				break;
			case 15:
				{
				setState(1331);
				generate_statement();
				}
				break;
			case 16:
				{
				setState(1332);
				go_to_statement();
				}
				break;
			case 17:
				{
				setState(1333);
				if_statement();
				}
				break;
			case 18:
				{
				setState(1334);
				initialize_statement();
				}
				break;
			case 19:
				{
				setState(1335);
				initiate_statement();
				}
				break;
			case 20:
				{
				setState(1336);
				inspect_statement();
				}
				break;
			case 21:
				{
				setState(1337);
				merge_statement();
				}
				break;
			case 22:
				{
				setState(1338);
				move_statement();
				}
				break;
			case 23:
				{
				setState(1339);
				multiply_statement();
				}
				break;
			case 24:
				{
				setState(1340);
				open_statement();
				}
				break;
			case 25:
				{
				setState(1341);
				perform_statement();
				}
				break;
			case 26:
				{
				setState(1342);
				read_statement();
				}
				break;
			case 27:
				{
				setState(1343);
				release_statement();
				}
				break;
			case 28:
				{
				setState(1344);
				return_statement();
				}
				break;
			case 29:
				{
				setState(1345);
				rewrite_statement();
				}
				break;
			case 30:
				{
				setState(1346);
				search_statement();
				}
				break;
			case 31:
				{
				setState(1347);
				set_statement();
				}
				break;
			case 32:
				{
				setState(1348);
				sort_statement();
				}
				break;
			case 33:
				{
				setState(1349);
				start_statement();
				}
				break;
			case 34:
				{
				setState(1350);
				stop_statement();
				}
				break;
			case 35:
				{
				setState(1351);
				string_statement();
				}
				break;
			case 36:
				{
				setState(1352);
				subtract_statement();
				}
				break;
			case 37:
				{
				setState(1353);
				suppress_statement();
				}
				break;
			case 38:
				{
				setState(1354);
				terminate_statement();
				}
				break;
			case 39:
				{
				setState(1355);
				unlock_statement();
				}
				break;
			case 40:
				{
				setState(1356);
				unstring_statement();
				}
				break;
			case 41:
				{
				setState(1357);
				write_statement();
				}
				break;
			case 42:
				{
				setState(1358);
				record_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exec_sql_statementContext extends ParserRuleContext {
		public TerminalNode EXEC() { return getToken(cobolParser.EXEC, 0); }
		public TerminalNode SQL() { return getToken(cobolParser.SQL, 0); }
		public List<TerminalNode> END_EXEC() { return getTokens(cobolParser.END_EXEC); }
		public TerminalNode END_EXEC(int i) {
			return getToken(cobolParser.END_EXEC, i);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Exec_sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exec_sql_statement; }
	}

	public final Exec_sql_statementContext exec_sql_statement() throws RecognitionException {
		Exec_sql_statementContext _localctx = new Exec_sql_statementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_exec_sql_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1361);
			match(EXEC);
			setState(1362);
			match(SQL);
			setState(1366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LITERAL_) | (1L << ACCEPT) | (1L << ACCESS) | (1L << ADD) | (1L << ADVANCING) | (1L << AFTER) | (1L << ALL) | (1L << ALLOWING) | (1L << ALPHA) | (1L << ALPHABET) | (1L << ALPHABETIC) | (1L << ALPHABETIC_LOWER) | (1L << ALPHABETIC_UPPER) | (1L << ALPHANUMERIC) | (1L << ALPHANUMERIC_EDITED) | (1L << ALSO) | (1L << ALTER) | (1L << ALTERNATE) | (1L << AND) | (1L << ANY) | (1L << APPLY) | (1L << ARE) | (1L << AREA) | (1L << AREAS) | (1L << ARGUMENT_NUMBER) | (1L << ARGUMENT_VALUE) | (1L << ARITHMETIC) | (1L << ASCENDING) | (1L << ASCII) | (1L << ASSIGN) | (1L << AT) | (1L << AUTHOR) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTOTERMINATE) | (1L << BACKGROUND_COLOR) | (1L << BEFORE) | (1L << BELL) | (1L << BINARY) | (1L << BINARY_CHAR) | (1L << BINARY_DOUBLE) | (1L << BINARY_LONG) | (1L << BINARY_SHORT) | (1L << BLANK) | (1L << BLINK) | (1L << BLINKING) | (1L << BLOCK) | (1L << BOLD) | (1L << BOTTOM) | (1L << BY) | (1L << C01) | (1L << CALL) | (1L << CANCEL) | (1L << CARD_READER) | (1L << CF) | (1L << CH) | (1L << CHARACTER) | (1L << CHARACTERS) | (1L << CLASS) | (1L << CLOCK_UNITS) | (1L << CLOSE) | (1L << CODE) | (1L << CODE_SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLATING - 64)) | (1L << (COLUMN - 64)) | (1L << (COMMA - 64)) | (1L << (COMMON - 64)) | (1L << (COMP - 64)) | (1L << (COMPUTATIONAL - 64)) | (1L << (COMPUTATIONAL_1 - 64)) | (1L << (COMPUTATIONAL_2 - 64)) | (1L << (COMPUTATIONAL_3 - 64)) | (1L << (COMPUTATIONAL_4 - 64)) | (1L << (COMPUTATIONAL_5 - 64)) | (1L << (COMPUTATIONAL_X - 64)) | (1L << (COMPUTE - 64)) | (1L << (COMP_1 - 64)) | (1L << (COMP_2 - 64)) | (1L << (COMP_3 - 64)) | (1L << (COMP_4 - 64)) | (1L << (COMP_5 - 64)) | (1L << (COMP_X - 64)) | (1L << (CONFIGURATION - 64)) | (1L << (CONSOLE - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTIGUOUS - 64)) | (1L << (CONTIGUOUS_BEST_TRY - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONTROL - 64)) | (1L << (CONTROLS - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERTING - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (CRT - 64)) | (1L << (CURRENCY - 64)) | (1L << (CURRENT - 64)) | (1L << (CURSOR - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DATE_COMPILED - 64)) | (1L << (DATE_WRITTEN - 64)) | (1L << (DAY - 64)) | (1L << (DAY_OF_WEEK - 64)) | (1L << (DE - 64)) | (1L << (DEBUGGING - 64)) | (1L << (DECIMAL_POINT - 64)) | (1L << (DECLARATIVES - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFERRED_WRITE - 64)) | (1L << (DELETE - 64)) | (1L << (DELIMITED - 64)) | (1L << (DELIMITER - 64)) | (1L << (DEPENDENCY - 64)) | (1L << (DEPENDING - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESCRIPTOR - 64)) | (1L << (DETAIL - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISK - 64)) | (1L << (DISPLAY - 64)) | (1L << (DIVIDE - 64)) | (1L << (DIVISION - 64)) | (1L << (DOWN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DUPLICATES - 128)) | (1L << (DYNAMIC - 128)) | (1L << (EBCDIC - 128)) | (1L << (ECHO - 128)) | (1L << (EDITING - 128)) | (1L << (ELSE - 128)) | (1L << (END - 128)) | (1L << (END_ACCEPT - 128)) | (1L << (END_ADD - 128)) | (1L << (END_CALL - 128)) | (1L << (END_COMPUTE - 128)) | (1L << (END_DELETE - 128)) | (1L << (END_DISPLAY - 128)) | (1L << (END_DIVIDE - 128)) | (1L << (END_EVALUATE - 128)) | (1L << (END_IF - 128)) | (1L << (END_MULTIPLY - 128)) | (1L << (END_OF_PAGE - 128)) | (1L << (END_PERFORM - 128)) | (1L << (END_READ - 128)) | (1L << (END_RETURN - 128)) | (1L << (END_REWRITE - 128)) | (1L << (END_SEARCH - 128)) | (1L << (END_START - 128)) | (1L << (END_STRING - 128)) | (1L << (END_SUBTRACT - 128)) | (1L << (END_UNSTRING - 128)) | (1L << (END_WRITE - 128)) | (1L << (ENVIRONMENT - 128)) | (1L << (ENVIRONMENT_NAME - 128)) | (1L << (ENVIRONMENT_VALUE - 128)) | (1L << (EOL - 128)) | (1L << (EOP - 128)) | (1L << (EOS - 128)) | (1L << (EQUAL - 128)) | (1L << (ERASE - 128)) | (1L << (ERROR - 128)) | (1L << (EVALUATE - 128)) | (1L << (EVERY - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXIT - 128)) | (1L << (EXTEND - 128)) | (1L << (EXTENSION - 128)) | (1L << (EXTERNAL - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FD - 128)) | (1L << (FILE - 128)) | (1L << (FILE_CONTROL - 128)) | (1L << (FILE_ID - 128)) | (1L << (FILLER - 128)) | (1L << (FILL_SIZE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FLOAT_EXTENDED - 128)) | (1L << (FLOAT_LONG - 128)) | (1L << (FLOAT_SHORT - 128)) | (1L << (FOOTING - 128)) | (1L << (FOR - 128)) | (1L << (FOREGROUND_COLOR - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (GENERATE - 192)) | (1L << (GIVING - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GREATER - 192)) | (1L << (GROUP - 192)) | (1L << (HEADING - 192)) | (1L << (HIGHLIGHT - 192)) | (1L << (HIGH_VALUE - 192)) | (1L << (HIGH_VALUES - 192)) | (1L << (I64 - 192)) | (1L << (ID - 192)) | (1L << (IDENT - 192)) | (1L << (IDENTIFICATION - 192)) | (1L << (IF - 192)) | (1L << (IN - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXED - 192)) | (1L << (INDICATE - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALIZE - 192)) | (1L << (INITIATE - 192)) | (1L << (INPUT - 192)) | (1L << (INPUT_OUTPUT - 192)) | (1L << (INSPECT - 192)) | (1L << (INSTALLATION - 192)) | (1L << (INTO - 192)) | (1L << (INVALID - 192)) | (1L << (IS - 192)) | (1L << (I_O - 192)) | (1L << (I_O_CONTROL - 192)) | (1L << (JUST - 192)) | (1L << (JUSTIFIED - 192)) | (1L << (KEY - 192)) | (1L << (LABEL - 192)) | (1L << (LAST - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LESS - 192)) | (1L << (LIMIT - 192)) | (1L << (LIMITS - 192)) | (1L << (LINAGE - 192)) | (1L << (LINE - 192)) | (1L << (LINES - 192)) | (1L << (LINE_PRINTER - 192)) | (1L << (LINKAGE - 192)) | (1L << (LOCK - 192)) | (1L << (LOCK_HOLDING - 192)) | (1L << (LOWLIGHT - 192)) | (1L << (LOW_VALUE - 192)) | (1L << (LOW_VALUES - 192)) | (1L << (MANUAL - 192)) | (1L << (MASS_INSERT - 192)) | (1L << (MEMORY - 192)) | (1L << (MERGE - 192)) | (1L << (MODE - 192)) | (1L << (MODULES - 192)) | (1L << (MOVE - 192)) | (1L << (MULTIPLE - 192)) | (1L << (MULTIPLY - 192)) | (1L << (NATIVE - 192)) | (1L << (NEGATIVE - 192)) | (1L << (NEXT - 192)) | (1L << (NO - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOT - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NUMERIC_EDITED - 256)) | (1L << (OBJECT_COMPUTER - 256)) | (1L << (OCCURS - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OMITTED - 256)) | (1L << (ON - 256)) | (1L << (OPEN - 256)) | (1L << (OPTIONAL - 256)) | (1L << (OPTIONS - 256)) | (1L << (OR - 256)) | (1L << (ORDER - 256)) | (1L << (ORGANIZATION - 256)) | (1L << (OTHER - 256)) | (1L << (OTHERS - 256)) | (1L << (OUTPUT - 256)) | (1L << (OVERFLOW - 256)) | (1L << (PACKED_DECIMAL - 256)) | (1L << (PADDING - 256)) | (1L << (PAGE - 256)) | (1L << (PAPER_TAPE_PUNCH - 256)) | (1L << (PAPER_TAPE_READER - 256)) | (1L << (PERFORM - 256)) | (1L << (PF - 256)) | (1L << (PH - 256)) | (1L << (PLUS - 256)) | (1L << (POINTER - 256)) | (1L << (POINTER_64 - 256)) | (1L << (POSITION - 256)) | (1L << (POSITIVE - 256)) | (1L << (PREALLOCATION - 256)) | (1L << (PREVIOUS - 256)) | (1L << (PRINTER - 256)) | (1L << (PRINTING - 256)) | (1L << (PRINT_CONTROL - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (PROCEED - 256)) | (1L << (PROGRAM - 256)) | (1L << (PROGRAM_ID - 256)) | (1L << (PROTECTED - 256)) | (1L << (QUOTE - 256)) | (1L << (QUOTES - 256)) | (1L << (RANDOM - 256)) | (1L << (RD - 256)) | (1L << (READ - 256)) | (1L << (READERS - 256)) | (1L << (RECORD - 256)) | (1L << (RECORDS - 256)) | (1L << (REDEFINES - 256)) | (1L << (REEL - 256)) | (1L << (REFERENCE - 256)) | (1L << (REGARDLESS - 256)) | (1L << (RELATIVE - 256)) | (1L << (RELEASE - 256)) | (1L << (REMAINDER - 256)) | (1L << (REMOVAL - 256)) | (1L << (RENAMES - 256)) | (1L << (REPLACE - 256)) | (1L << (REPLACING - 256)) | (1L << (REPORT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (REPORTING - 320)) | (1L << (REPORTS - 320)) | (1L << (REQUIRED - 320)) | (1L << (RERUN - 320)) | (1L << (RESERVE - 320)) | (1L << (RESET - 320)) | (1L << (RETURN - 320)) | (1L << (REVERSED - 320)) | (1L << (REVERSE_VIDEO - 320)) | (1L << (REWIND - 320)) | (1L << (REWRITE - 320)) | (1L << (RF - 320)) | (1L << (RH - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROUNDED - 320)) | (1L << (RUN - 320)) | (1L << (SAME - 320)) | (1L << (SCREEN - 320)) | (1L << (SD - 320)) | (1L << (SEARCH - 320)) | (1L << (SECTION - 320)) | (1L << (SECURE - 320)) | (1L << (SECURITY - 320)) | (1L << (SEGMENT_LIMIT - 320)) | (1L << (SELECT - 320)) | (1L << (SENTENCE - 320)) | (1L << (SEPARATE - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SET - 320)) | (1L << (SIGN - 320)) | (1L << (SIGNED - 320)) | (1L << (SIZE - 320)) | (1L << (SORT - 320)) | (1L << (SORT_MERGE - 320)) | (1L << (SOURCE - 320)) | (1L << (SOURCE_COMPUTER - 320)) | (1L << (SPACE - 320)) | (1L << (SPACES - 320)) | (1L << (SPECIAL_NAMES - 320)) | (1L << (STANDARD - 320)) | (1L << (STANDARD_1 - 320)) | (1L << (STANDARD_2 - 320)) | (1L << (START - 320)) | (1L << (STATUS - 320)) | (1L << (STOP - 320)) | (1L << (STRING - 320)) | (1L << (SUBTRACT - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUM - 320)) | (1L << (SUPPRESS - 320)) | (1L << (SWITCH - 320)) | (1L << (SWITCH_N_ - 320)) | (1L << (SYMBOL - 320)) | (1L << (SYMBOLIC - 320)) | (1L << (SYNC - 320)) | (1L << (SYNCHRONIZED - 320)) | (1L << (SYSERR - 320)) | (1L << (SYSIN - 320)) | (1L << (SYSOUT - 320)) | (1L << (TALLYING - 320)) | (1L << (TAPE - 320)) | (1L << (TERMINATE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TEST - 384)) | (1L << (THAN - 384)) | (1L << (THEN - 384)) | (1L << (THROUGH - 384)) | (1L << (THRU - 384)) | (1L << (TIME - 384)) | (1L << (TIMES - 384)) | (1L << (TO - 384)) | (1L << (TOP - 384)) | (1L << (TRAILING - 384)) | (1L << (TRUE - 384)) | (1L << (TYPE - 384)) | (1L << (UNDERLINE - 384)) | (1L << (UNDERLINED - 384)) | (1L << (UNIT - 384)) | (1L << (UNLOCK - 384)) | (1L << (UNSIGNED - 384)) | (1L << (UNSTRING - 384)) | (1L << (UNTIL - 384)) | (1L << (UP - 384)) | (1L << (UPDATERS - 384)) | (1L << (UPON - 384)) | (1L << (USAGE - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARYING - 384)) | (1L << (VAX - 384)) | (1L << (WHEN - 384)) | (1L << (WINDOW - 384)) | (1L << (WITH - 384)) | (1L << (WORDS - 384)) | (1L << (WORKING_STORAGE - 384)) | (1L << (WRITE - 384)) | (1L << (WRITERS - 384)) | (1L << (YYYYDDD - 384)) | (1L << (YYYYMMDD - 384)) | (1L << (ZERO - 384)) | (1L << (ZEROES - 384)) | (1L << (ZEROS - 384)) | (1L << (EXEC - 384)) | (1L << (SQL - 384)) | (1L << (PIC - 384)) | (1L << (PICTURE - 384)) | (1L << (PSEUDO_TEXT_ - 384)) | (1L << (EXCLAM_ - 384)) | (1L << (UNDER_ - 384)) | (1L << (PLUS_ - 384)) | (1L << (MINUS_ - 384)) | (1L << (STAR_ - 384)) | (1L << (SLASH_ - 384)) | (1L << (COLON_ - 384)) | (1L << (EQUAL_ - 384)) | (1L << (LT_ - 384)) | (1L << (LE_ - 384)) | (1L << (GE_ - 384)) | (1L << (GT_ - 384)) | (1L << (LPAREN_ - 384)) | (1L << (RPAREN_ - 384)) | (1L << (LBRACK_ - 384)) | (1L << (RBRACK_ - 384)) | (1L << (POINTER_ - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ATP_ - 448)) | (1L << (DOT_ - 448)) | (1L << (LCURLY_ - 448)) | (1L << (RCURLY_ - 448)) | (1L << (NUMERIC_LITERAL_ - 448)) | (1L << (INTEGER_LITERAL_ - 448)) | (1L << (HEX_LITERAL_ - 448)) | (1L << (USER_DEFINED_WORD_ - 448)) | (1L << (COMMA_ - 448)) | (1L << (SEMI_ - 448)) | (1L << (WHITESPACE_ - 448)) | (1L << (NEWLINE_ - 448)) | (1L << (ANY_CHAR_ - 448)) | (1L << (SYMBOL_IN_PICTURE_ - 448)) | (1L << (IS_IN_PICTURE_ - 448)) | (1L << (CHARACTER_STRING_ - 448)))) != 0)) {
				{
				{
				setState(1363);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==END_EXEC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1369);
			match(END_EXEC);
			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1370);
				match(DOT_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_record_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Library_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Library_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library_name; }
	}

	public final Library_nameContext library_name() throws RecognitionException {
		Library_nameContext _localctx = new Library_nameContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_library_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1375);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Text_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Text_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_text_name; }
	}

	public final Text_nameContext text_name() throws RecognitionException {
		Text_nameContext _localctx = new Text_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_text_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1377);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_statementContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(cobolParser.REPLACE, 0); }
		public TerminalNode OFF() { return getToken(cobolParser.OFF, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<TerminalNode> PSEUDO_TEXT_() { return getTokens(cobolParser.PSEUDO_TEXT_); }
		public TerminalNode PSEUDO_TEXT_(int i) {
			return getToken(cobolParser.PSEUDO_TEXT_, i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public Replace_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_statement; }
	}

	public final Replace_statementContext replace_statement() throws RecognitionException {
		Replace_statementContext _localctx = new Replace_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_replace_statement);
		int _la;
		try {
			setState(1391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1379);
				match(REPLACE);
				setState(1380);
				match(OFF);
				setState(1381);
				match(DOT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1382);
				match(REPLACE);
				setState(1386); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1383);
					match(PSEUDO_TEXT_);
					setState(1384);
					match(BY);
					setState(1385);
					match(PSEUDO_TEXT_);
					}
					}
					setState(1388); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PSEUDO_TEXT_ );
				setState(1390);
				match(DOT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_statementContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(cobolParser.WRITE, 0); }
		public Rec_nameContext rec_name() {
			return getRuleContext(Rec_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public At_eop_variantsContext at_eop_variants() {
			return getRuleContext(At_eop_variantsContext.class,0);
		}
		public Advance_valueContext advance_value() {
			return getRuleContext(Advance_valueContext.class,0);
		}
		public TerminalNode END_WRITE() { return getToken(cobolParser.END_WRITE, 0); }
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public TerminalNode ADVANCING() { return getToken(cobolParser.ADVANCING, 0); }
		public Write_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_statement; }
	}

	public final Write_statementContext write_statement() throws RecognitionException {
		Write_statementContext _localctx = new Write_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_write_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1393);
			match(WRITE);
			setState(1394);
			rec_name();
			setState(1397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1395);
				match(FROM);
				setState(1396);
				src_item();
				}
			}

			setState(1404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING) {
				{
				setState(1399);
				match(ALLOWING);
				setState(1400);
				match(NO);
				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OTHERS) {
					{
					setState(1401);
					match(OTHERS);
					}
				}

				}
			}

			setState(1423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1406);
				invalid_key_variants();
				}
				break;
			case 2:
				{
				setState(1412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(1407);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1409);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ADVANCING) {
						{
						setState(1408);
						match(ADVANCING);
						}
					}

					setState(1411);
					advance_value();
					}
				}

				setState(1414);
				at_eop_variants();
				}
				break;
			case 3:
				{
				setState(1415);
				_la = _input.LA(1);
				if ( !(_la==AFTER || _la==BEFORE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADVANCING) {
					{
					setState(1416);
					match(ADVANCING);
					}
				}

				setState(1419);
				advance_value();
				setState(1421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1420);
					at_eop_variants();
					}
					break;
				}
				}
				break;
			}
			setState(1426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1425);
				match(END_WRITE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advance_valueContext extends ParserRuleContext {
		public Advance_numContext advance_num() {
			return getRuleContext(Advance_numContext.class,0);
		}
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode LINES() { return getToken(cobolParser.LINES, 0); }
		public Top_of_page_nameContext top_of_page_name() {
			return getRuleContext(Top_of_page_nameContext.class,0);
		}
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Advance_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advance_value; }
	}

	public final Advance_valueContext advance_value() throws RecognitionException {
		Advance_valueContext _localctx = new Advance_valueContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_advance_value);
		int _la;
		try {
			setState(1434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1428);
				advance_num();
				setState(1430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINE || _la==LINES) {
					{
					setState(1429);
					_la = _input.LA(1);
					if ( !(_la==LINE || _la==LINES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1432);
				top_of_page_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1433);
				match(PAGE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advance_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Advance_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advance_num; }
	}

	public final Advance_numContext advance_num() throws RecognitionException {
		Advance_numContext _localctx = new Advance_numContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_advance_num);
		int _la;
		try {
			setState(1438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1436);
				identifier();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1437);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_statementContext extends ParserRuleContext {
		public TerminalNode UNSTRING() { return getToken(cobolParser.UNSTRING, 0); }
		public Unstring_srcContext unstring_src() {
			return getRuleContext(Unstring_srcContext.class,0);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode DELIMITED() { return getToken(cobolParser.DELIMITED, 0); }
		public List<Unstring_delim_clauseContext> unstring_delim_clause() {
			return getRuleContexts(Unstring_delim_clauseContext.class);
		}
		public Unstring_delim_clauseContext unstring_delim_clause(int i) {
			return getRuleContext(Unstring_delim_clauseContext.class,i);
		}
		public List<Unstring_dest_clauseContext> unstring_dest_clause() {
			return getRuleContexts(Unstring_dest_clauseContext.class);
		}
		public Unstring_dest_clauseContext unstring_dest_clause(int i) {
			return getRuleContext(Unstring_dest_clauseContext.class,i);
		}
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public String_pointerContext string_pointer() {
			return getRuleContext(String_pointerContext.class,0);
		}
		public TerminalNode TALLYING() { return getToken(cobolParser.TALLYING, 0); }
		public Unstring_tally_ctrContext unstring_tally_ctr() {
			return getRuleContext(Unstring_tally_ctrContext.class,0);
		}
		public On_overflow_variantsContext on_overflow_variants() {
			return getRuleContext(On_overflow_variantsContext.class,0);
		}
		public TerminalNode END_UNSTRING() { return getToken(cobolParser.END_UNSTRING, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public List<TerminalNode> OR() { return getTokens(cobolParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(cobolParser.OR, i);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Unstring_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_statement; }
	}

	public final Unstring_statementContext unstring_statement() throws RecognitionException {
		Unstring_statementContext _localctx = new Unstring_statementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_unstring_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1440);
			match(UNSTRING);
			setState(1441);
			unstring_src();
			setState(1454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELIMITED) {
				{
				setState(1442);
				match(DELIMITED);
				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1443);
					match(BY);
					}
				}

				setState(1446);
				unstring_delim_clause();
				setState(1451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OR) {
					{
					{
					setState(1447);
					match(OR);
					setState(1448);
					unstring_delim_clause();
					}
					}
					setState(1453);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1456);
			match(INTO);
			setState(1458); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1457);
				unstring_dest_clause();
				}
				}
				setState(1460); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(1467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POINTER || _la==WITH) {
				{
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1462);
					match(WITH);
					}
				}

				setState(1465);
				match(POINTER);
				setState(1466);
				string_pointer();
				}
			}

			setState(1474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TALLYING) {
				{
				setState(1469);
				match(TALLYING);
				setState(1471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1470);
					match(IN);
					}
				}

				setState(1473);
				unstring_tally_ctr();
				}
			}

			setState(1477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1476);
				on_overflow_variants();
				}
				break;
			}
			setState(1480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1479);
				match(END_UNSTRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_tally_ctrContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Unstring_tally_ctrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_tally_ctr; }
	}

	public final Unstring_tally_ctrContext unstring_tally_ctr() throws RecognitionException {
		Unstring_tally_ctrContext _localctx = new Unstring_tally_ctrContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_unstring_tally_ctr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_dest_clauseContext extends ParserRuleContext {
		public Dest_stringContext dest_string() {
			return getRuleContext(Dest_stringContext.class,0);
		}
		public TerminalNode DELIMITER() { return getToken(cobolParser.DELIMITER, 0); }
		public Delim_destContext delim_dest() {
			return getRuleContext(Delim_destContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(cobolParser.COUNT, 0); }
		public CountrContext countr() {
			return getRuleContext(CountrContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(cobolParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(cobolParser.IN, i);
		}
		public Unstring_dest_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_dest_clause; }
	}

	public final Unstring_dest_clauseContext unstring_dest_clause() throws RecognitionException {
		Unstring_dest_clauseContext _localctx = new Unstring_dest_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_unstring_dest_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1484);
			dest_string();
			setState(1490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELIMITER) {
				{
				setState(1485);
				match(DELIMITER);
				setState(1487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1486);
					match(IN);
					}
				}

				setState(1489);
				delim_dest();
				}
			}

			setState(1497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNT) {
				{
				setState(1492);
				match(COUNT);
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1493);
					match(IN);
					}
				}

				setState(1496);
				countr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CountrContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public CountrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countr; }
	}

	public final CountrContext countr() throws RecognitionException {
		CountrContext _localctx = new CountrContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_countr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dest_stringContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Dest_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dest_string; }
	}

	public final Dest_stringContext dest_string() throws RecognitionException {
		Dest_stringContext _localctx = new Dest_stringContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_dest_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1501);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_destContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Delim_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_dest; }
	}

	public final Delim_destContext delim_dest() throws RecognitionException {
		Delim_destContext _localctx = new Delim_destContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_delim_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1503);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_delim_clauseContext extends ParserRuleContext {
		public Unstring_delimContext unstring_delim() {
			return getRuleContext(Unstring_delimContext.class,0);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public Unstring_delim_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_delim_clause; }
	}

	public final Unstring_delim_clauseContext unstring_delim_clause() throws RecognitionException {
		Unstring_delim_clauseContext _localctx = new Unstring_delim_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_unstring_delim_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(1505);
				match(ALL);
				}
			}

			setState(1508);
			unstring_delim();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_delimContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Unstring_delimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_delim; }
	}

	public final Unstring_delimContext unstring_delim() throws RecognitionException {
		Unstring_delimContext _localctx = new Unstring_delimContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_unstring_delim);
		try {
			setState(1513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1510);
				identifier();
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1511);
				match(STRING_LITERAL_);
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1512);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unstring_srcContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unstring_srcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unstring_src; }
	}

	public final Unstring_srcContext unstring_src() throws RecognitionException {
		Unstring_srcContext _localctx = new Unstring_srcContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_unstring_src);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1515);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unlock_statementContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(cobolParser.UNLOCK, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public Unlock_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlock_statement; }
	}

	public final Unlock_statementContext unlock_statement() throws RecognitionException {
		Unlock_statementContext _localctx = new Unlock_statementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_unlock_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1517);
			match(UNLOCK);
			setState(1518);
			file_name();
			setState(1525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1519);
				match(RECORD);
				}
				break;
			case 2:
				{
				setState(1520);
				match(RECORDS);
				}
				break;
			case 3:
				{
				setState(1521);
				match(ALL);
				setState(1523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECORDS) {
					{
					setState(1522);
					match(RECORDS);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Terminate_statementContext extends ParserRuleContext {
		public TerminalNode TERMINATE() { return getToken(cobolParser.TERMINATE, 0); }
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public Terminate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terminate_statement; }
	}

	public final Terminate_statementContext terminate_statement() throws RecognitionException {
		Terminate_statementContext _localctx = new Terminate_statementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_terminate_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			match(TERMINATE);
			setState(1529); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1528);
				report_name();
				}
				}
				setState(1531); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Suppress_statementContext extends ParserRuleContext {
		public TerminalNode SUPPRESS() { return getToken(cobolParser.SUPPRESS, 0); }
		public TerminalNode PRINTING() { return getToken(cobolParser.PRINTING, 0); }
		public Suppress_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_suppress_statement; }
	}

	public final Suppress_statementContext suppress_statement() throws RecognitionException {
		Suppress_statementContext _localctx = new Suppress_statementContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_suppress_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			match(SUPPRESS);
			setState(1535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRINTING) {
				{
				setState(1534);
				match(PRINTING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtract_statementContext extends ParserRuleContext {
		public TerminalNode SUBTRACT() { return getToken(cobolParser.SUBTRACT, 0); }
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public List<Sub_grpContext> sub_grp() {
			return getRuleContexts(Sub_grpContext.class);
		}
		public Sub_grpContext sub_grp(int i) {
			return getRuleContext(Sub_grpContext.class,i);
		}
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_SUBTRACT() { return getToken(cobolParser.END_SUBTRACT, 0); }
		public List<Sub_numContext> sub_num() {
			return getRuleContexts(Sub_numContext.class);
		}
		public Sub_numContext sub_num(int i) {
			return getRuleContext(Sub_numContext.class,i);
		}
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Subtract_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtract_statement; }
	}

	public final Subtract_statementContext subtract_statement() throws RecognitionException {
		Subtract_statementContext _localctx = new Subtract_statementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_subtract_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1537);
			match(SUBTRACT);
			setState(1564);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
			case USER_DEFINED_WORD_:
				{
				setState(1539); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1538);
					sub_num();
					}
					}
					setState(1541); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)) | (1L << (USER_DEFINED_WORD_ - 452)))) != 0) );
				setState(1543);
				match(FROM);
				setState(1547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1544);
					sub_num();
					setState(1545);
					match(GIVING);
					}
					break;
				}
				setState(1553); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1549);
					identifier_result();
					setState(1551);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROUNDED) {
						{
						setState(1550);
						match(ROUNDED);
						}
					}

					}
					}
					setState(1555); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case CORR:
			case CORRESPONDING:
				{
				setState(1557);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1558);
				sub_grp();
				setState(1559);
				match(FROM);
				setState(1560);
				sub_grp();
				setState(1562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(1561);
					match(ROUNDED);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1566);
				on_size_variants();
				}
				break;
			}
			setState(1570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1569);
				match(END_SUBTRACT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_grpContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Sub_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_grp; }
	}

	public final Sub_grpContext sub_grp() throws RecognitionException {
		Sub_grpContext _localctx = new Sub_grpContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_sub_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1572);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sub_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Sub_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_num; }
	}

	public final Sub_numContext sub_num() throws RecognitionException {
		Sub_numContext _localctx = new Sub_numContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_sub_num);
		int _la;
		try {
			setState(1576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1574);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1575);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_statementContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(cobolParser.STRING, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public String_destContext string_dest() {
			return getRuleContext(String_destContext.class,0);
		}
		public List<TerminalNode> DELIMITED() { return getTokens(cobolParser.DELIMITED); }
		public TerminalNode DELIMITED(int i) {
			return getToken(cobolParser.DELIMITED, i);
		}
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public String_pointerContext string_pointer() {
			return getRuleContext(String_pointerContext.class,0);
		}
		public On_overflow_variantsContext on_overflow_variants() {
			return getRuleContext(On_overflow_variantsContext.class,0);
		}
		public TerminalNode END_STRING() { return getToken(cobolParser.END_STRING, 0); }
		public List<TerminalNode> SIZE() { return getTokens(cobolParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(cobolParser.SIZE, i);
		}
		public List<String_delimContext> string_delim() {
			return getRuleContexts(String_delimContext.class);
		}
		public String_delimContext string_delim(int i) {
			return getRuleContext(String_delimContext.class,i);
		}
		public List<String_srcContext> string_src() {
			return getRuleContexts(String_srcContext.class);
		}
		public String_srcContext string_src(int i) {
			return getRuleContext(String_srcContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public String_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_statement; }
	}

	public final String_statementContext string_statement() throws RecognitionException {
		String_statementContext _localctx = new String_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_string_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1578);
			match(STRING);
			setState(1592); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1580); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1579);
					string_src();
					}
					}
					setState(1582); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL_ || _la==ALL || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
				setState(1584);
				match(DELIMITED);
				setState(1586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1585);
					match(BY);
					}
				}

				setState(1590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SIZE:
					{
					setState(1588);
					match(SIZE);
					}
					break;
				case STRING_LITERAL_:
				case ALL:
				case HIGH_VALUE:
				case HIGH_VALUES:
				case LOW_VALUE:
				case LOW_VALUES:
				case QUOTE:
				case QUOTES:
				case SPACE:
				case SPACES:
				case ZERO:
				case ZEROES:
				case ZEROS:
				case USER_DEFINED_WORD_:
					{
					setState(1589);
					string_delim();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(1594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==ALL || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
			setState(1596);
			match(INTO);
			setState(1597);
			string_dest();
			setState(1603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POINTER || _la==WITH) {
				{
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1598);
					match(WITH);
					}
				}

				setState(1601);
				match(POINTER);
				setState(1602);
				string_pointer();
				}
			}

			setState(1606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(1605);
				on_overflow_variants();
				}
				break;
			}
			setState(1609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1608);
				match(END_STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_pointerContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public String_pointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_pointer; }
	}

	public final String_pointerContext string_pointer() throws RecognitionException {
		String_pointerContext _localctx = new String_pointerContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_string_pointer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1611);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_destContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public String_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_dest; }
	}

	public final String_destContext string_dest() throws RecognitionException {
		String_destContext _localctx = new String_destContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_string_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1613);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_delimContext extends ParserRuleContext {
		public String_srcContext string_src() {
			return getRuleContext(String_srcContext.class,0);
		}
		public String_delimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_delim; }
	}

	public final String_delimContext string_delim() throws RecognitionException {
		String_delimContext _localctx = new String_delimContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_string_delim);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			string_src();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_srcContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public String_srcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_src; }
	}

	public final String_srcContext string_src() throws RecognitionException {
		String_srcContext _localctx = new String_srcContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_string_src);
		try {
			setState(1620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1617);
				identifier_result();
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1618);
				match(STRING_LITERAL_);
				}
				break;
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1619);
				figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_statementContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(cobolParser.STOP, 0); }
		public TerminalNode RUN() { return getToken(cobolParser.RUN, 0); }
		public Stop_dispContext stop_disp() {
			return getRuleContext(Stop_dispContext.class,0);
		}
		public Stop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_statement; }
	}

	public final Stop_statementContext stop_statement() throws RecognitionException {
		Stop_statementContext _localctx = new Stop_statementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_stop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1622);
			match(STOP);
			setState(1625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RUN:
				{
				setState(1623);
				match(RUN);
				}
				break;
			case STRING_LITERAL_:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(1624);
				stop_disp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stop_dispContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Stop_dispContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stop_disp; }
	}

	public final Stop_dispContext stop_disp() throws RecognitionException {
		Stop_dispContext _localctx = new Stop_dispContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_stop_disp);
		int _la;
		try {
			setState(1630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1627);
				match(STRING_LITERAL_);
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1628);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1629);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_statementContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(cobolParser.START, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Condition_operatorContext condition_operator() {
			return getRuleContext(Condition_operatorContext.class,0);
		}
		public Sort_key_dataContext sort_key_data() {
			return getRuleContext(Sort_key_dataContext.class,0);
		}
		public Regard_allowContext regard_allow() {
			return getRuleContext(Regard_allowContext.class,0);
		}
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_START() { return getToken(cobolParser.END_START, 0); }
		public Start_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_statement; }
	}

	public final Start_statementContext start_statement() throws RecognitionException {
		Start_statementContext _localctx = new Start_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_start_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(START);
			setState(1633);
			file_name();
			setState(1638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(1634);
				match(KEY);
				setState(1635);
				condition_operator();
				setState(1636);
				sort_key_data();
				}
			}

			setState(1641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING || _la==REGARDLESS) {
				{
				setState(1640);
				regard_allow();
				}
			}

			setState(1644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1643);
				invalid_key_variants();
				}
				break;
			}
			setState(1647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1646);
				match(END_START);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_key_dataContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sort_key_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key_data; }
	}

	public final Sort_key_dataContext sort_key_data() throws RecognitionException {
		Sort_key_dataContext _localctx = new Sort_key_dataContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_sort_key_data);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_statementContext extends ParserRuleContext {
		public TerminalNode SORT() { return getToken(cobolParser.SORT, 0); }
		public Sort_nameContext sort_name() {
			return getRuleContext(Sort_nameContext.class,0);
		}
		public List<On_sort_keyContext> on_sort_key() {
			return getRuleContexts(On_sort_keyContext.class);
		}
		public On_sort_keyContext on_sort_key(int i) {
			return getRuleContext(On_sort_keyContext.class,i);
		}
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public List<Procedure_isContext> procedure_is() {
			return getRuleContexts(Procedure_isContext.class);
		}
		public Procedure_isContext procedure_is(int i) {
			return getRuleContext(Procedure_isContext.class,i);
		}
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode ORDER() { return getToken(cobolParser.ORDER, 0); }
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public Sort_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_statement; }
	}

	public final Sort_statementContext sort_statement() throws RecognitionException {
		Sort_statementContext _localctx = new Sort_statementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_sort_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1651);
			match(SORT);
			setState(1652);
			sort_name();
			setState(1656);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,117,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1653);
					on_sort_key();
					}
					} 
				}
				setState(1658);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,117,_ctx);
			}
			setState(1669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1659);
					match(WITH);
					}
				}

				setState(1662);
				match(DUPLICATES);
				setState(1664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1663);
					match(IN);
					}
				}

				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(1666);
					match(ORDER);
					}
				}

				}
			}

			setState(1679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING || _la==SEQUENCE) {
				{
				setState(1672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING) {
					{
					setState(1671);
					match(COLLATING);
					}
				}

				setState(1674);
				match(SEQUENCE);
				setState(1676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1675);
					match(IS);
					}
				}

				setState(1678);
				alpha_name();
				}
			}

			setState(1689);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INPUT:
				{
				setState(1681);
				match(INPUT);
				setState(1682);
				procedure_is();
				}
				break;
			case USING:
				{
				setState(1683);
				match(USING);
				setState(1685); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1684);
					file_name();
					}
					}
					setState(1687); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case ACCEPT:
			case ADD:
			case ALTER:
			case AT:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case ELSE:
			case END:
			case END_ACCEPT:
			case END_ADD:
			case END_CALL:
			case END_COMPUTE:
			case END_DELETE:
			case END_DISPLAY:
			case END_DIVIDE:
			case END_EVALUATE:
			case END_IF:
			case END_MULTIPLY:
			case END_OF_PAGE:
			case END_PERFORM:
			case END_READ:
			case END_RETURN:
			case END_REWRITE:
			case END_SEARCH:
			case END_START:
			case END_STRING:
			case END_SUBTRACT:
			case END_UNSTRING:
			case END_WRITE:
			case EOP:
			case EVALUATE:
			case EXCEPTION:
			case EXIT:
			case GENERATE:
			case GIVING:
			case GO:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case INVALID:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case NOT:
			case ON:
			case OPEN:
			case OUTPUT:
			case OVERFLOW:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SIZE:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WHEN:
			case WRITE:
			case EXEC:
			case DOT_:
				break;
			default:
				break;
			}
			setState(1699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OUTPUT:
				{
				setState(1691);
				match(OUTPUT);
				setState(1692);
				procedure_is();
				}
				break;
			case GIVING:
				{
				setState(1693);
				match(GIVING);
				setState(1695); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1694);
					file_name();
					}
					}
					setState(1697); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case ACCEPT:
			case ADD:
			case ALTER:
			case AT:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case ELSE:
			case END:
			case END_ACCEPT:
			case END_ADD:
			case END_CALL:
			case END_COMPUTE:
			case END_DELETE:
			case END_DISPLAY:
			case END_DIVIDE:
			case END_EVALUATE:
			case END_IF:
			case END_MULTIPLY:
			case END_OF_PAGE:
			case END_PERFORM:
			case END_READ:
			case END_RETURN:
			case END_REWRITE:
			case END_SEARCH:
			case END_START:
			case END_STRING:
			case END_SUBTRACT:
			case END_UNSTRING:
			case END_WRITE:
			case EOP:
			case EVALUATE:
			case EXCEPTION:
			case EXIT:
			case GENERATE:
			case GO:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case INVALID:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case NOT:
			case ON:
			case OPEN:
			case OVERFLOW:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SIZE:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WHEN:
			case WRITE:
			case EXEC:
			case DOT_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sort_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_name; }
	}

	public final Sort_nameContext sort_name() throws RecognitionException {
		Sort_nameContext _localctx = new Sort_nameContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_sort_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1701);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_isContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Procedure_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_is; }
	}

	public final Procedure_isContext procedure_is() throws RecognitionException {
		Procedure_isContext _localctx = new Procedure_isContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_procedure_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1703);
			match(PROCEDURE);
			setState(1705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(1704);
				match(IS);
				}
			}

			setState(1707);
			proc_thru_proc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_sort_keyContext extends ParserRuleContext {
		public List<Sort_keyContext> sort_key() {
			return getRuleContexts(Sort_keyContext.class);
		}
		public Sort_keyContext sort_key(int i) {
			return getRuleContext(Sort_keyContext.class,i);
		}
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public On_sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_sort_key; }
	}

	public final On_sort_keyContext on_sort_key() throws RecognitionException {
		On_sort_keyContext _localctx = new On_sort_keyContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_on_sort_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1709);
				match(ON);
				}
			}

			setState(1712);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(1713);
				match(KEY);
				}
			}

			setState(1716);
			sort_key();
			setState(1720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USER_DEFINED_WORD_) {
				{
				{
				setState(1717);
				sort_key();
				}
				}
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_keyContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Sort_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_key; }
	}

	public final Sort_keyContext sort_key() throws RecognitionException {
		Sort_keyContext _localctx = new Sort_keyContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_sort_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1723);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public Set_statement_form1Context set_statement_form1() {
			return getRuleContext(Set_statement_form1Context.class,0);
		}
		public Set_statement_form2Context set_statement_form2() {
			return getRuleContext(Set_statement_form2Context.class,0);
		}
		public Set_statement_form3Context set_statement_form3() {
			return getRuleContext(Set_statement_form3Context.class,0);
		}
		public Set_statement_form4Context set_statement_form4() {
			return getRuleContext(Set_statement_form4Context.class,0);
		}
		public Set_statement_form5Context set_statement_form5() {
			return getRuleContext(Set_statement_form5Context.class,0);
		}
		public Set_statement_form6Context set_statement_form6() {
			return getRuleContext(Set_statement_form6Context.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_set_statement);
		try {
			setState(1731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1725);
				set_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1726);
				set_statement_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1727);
				set_statement_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1728);
				set_statement_form4();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1729);
				set_statement_form5();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1730);
				set_statement_form6();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form1Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Set_valContext set_val() {
			return getRuleContext(Set_valContext.class,0);
		}
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form1; }
	}

	public final Set_statement_form1Context set_statement_form1() throws RecognitionException {
		Set_statement_form1Context _localctx = new Set_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 150, RULE_set_statement_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1733);
			match(SET);
			setState(1735); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1734);
				identifier_result();
				}
				}
				setState(1737); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(1739);
			match(TO);
			setState(1740);
			set_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form2Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Set_incremContext set_increm() {
			return getRuleContext(Set_incremContext.class,0);
		}
		public TerminalNode UP() { return getToken(cobolParser.UP, 0); }
		public TerminalNode DOWN() { return getToken(cobolParser.DOWN, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form2; }
	}

	public final Set_statement_form2Context set_statement_form2() throws RecognitionException {
		Set_statement_form2Context _localctx = new Set_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 152, RULE_set_statement_form2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			match(SET);
			setState(1744); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1743);
				identifier_result();
				}
				}
				setState(1746); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(1748);
			_la = _input.LA(1);
			if ( !(_la==DOWN || _la==UP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1749);
			match(BY);
			setState(1750);
			set_increm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form3Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public Set_statement_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form3; }
	}

	public final Set_statement_form3Context set_statement_form3() throws RecognitionException {
		Set_statement_form3Context _localctx = new Set_statement_form3Context(_ctx, getState());
		enterRule(_localctx, 154, RULE_set_statement_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1752);
			match(SET);
			setState(1754); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1753);
				identifier_result();
				}
				}
				setState(1756); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(1758);
			match(TO);
			setState(1759);
			match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form4Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(cobolParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(cobolParser.TO, i);
		}
		public List<TerminalNode> ON() { return getTokens(cobolParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(cobolParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(cobolParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(cobolParser.OFF, i);
		}
		public Set_statement_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form4; }
	}

	public final Set_statement_form4Context set_statement_form4() throws RecognitionException {
		Set_statement_form4Context _localctx = new Set_statement_form4Context(_ctx, getState());
		enterRule(_localctx, 156, RULE_set_statement_form4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1761);
			match(SET);
			setState(1766); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1762);
				identifier_result();
				setState(1763);
				match(TO);
				setState(1764);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1768); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form5Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Set_statement_form5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form5; }
	}

	public final Set_statement_form5Context set_statement_form5() throws RecognitionException {
		Set_statement_form5Context _localctx = new Set_statement_form5Context(_ctx, getState());
		enterRule(_localctx, 158, RULE_set_statement_form5);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			match(SET);
			setState(1772); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1771);
				identifier_result();
				}
				}
				setState(1774); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(1776);
			match(TO);
			setState(1777);
			match(REFERENCE);
			setState(1779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1778);
				match(OF);
				}
			}

			setState(1781);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_form6Context extends ParserRuleContext {
		public TerminalNode SET() { return getToken(cobolParser.SET, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode SUCCESS() { return getToken(cobolParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(cobolParser.FAILURE, 0); }
		public Set_statement_form6Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_form6; }
	}

	public final Set_statement_form6Context set_statement_form6() throws RecognitionException {
		Set_statement_form6Context _localctx = new Set_statement_form6Context(_ctx, getState());
		enterRule(_localctx, 160, RULE_set_statement_form6);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			match(SET);
			setState(1784);
			identifier_result();
			setState(1785);
			match(TO);
			setState(1786);
			_la = _input.LA(1);
			if ( !(_la==FAILURE || _la==SUCCESS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_incremContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Set_incremContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_increm; }
	}

	public final Set_incremContext set_increm() throws RecognitionException {
		Set_incremContext _localctx = new Set_incremContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_set_increm);
		int _la;
		try {
			setState(1790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1788);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1789);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_valContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Set_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_val; }
	}

	public final Set_valContext set_val() throws RecognitionException {
		Set_valContext _localctx = new Set_valContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_set_val);
		int _la;
		try {
			setState(1794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1792);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1793);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_statementContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(cobolParser.SEARCH, 0); }
		public Src_tableContext src_table() {
			return getRuleContext(Src_tableContext.class,0);
		}
		public List<TerminalNode> END_SEARCH() { return getTokens(cobolParser.END_SEARCH); }
		public TerminalNode END_SEARCH(int i) {
			return getToken(cobolParser.END_SEARCH, i);
		}
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public Search_pointerContext search_pointer() {
			return getRuleContext(Search_pointerContext.class,0);
		}
		public At_endContext at_end() {
			return getRuleContext(At_endContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(cobolParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(cobolParser.WHEN, i);
		}
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public List<TerminalNode> NEXT() { return getTokens(cobolParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(cobolParser.NEXT, i);
		}
		public List<TerminalNode> SENTENCE() { return getTokens(cobolParser.SENTENCE); }
		public TerminalNode SENTENCE(int i) {
			return getToken(cobolParser.SENTENCE, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(cobolParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(cobolParser.AND, i);
		}
		public Search_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_statement; }
	}

	public final Search_statementContext search_statement() throws RecognitionException {
		Search_statementContext _localctx = new Search_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_search_statement);
		int _la;
		try {
			int _alt;
			setState(1868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1796);
				match(SEARCH);
				setState(1797);
				src_table();
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(1798);
					match(VARYING);
					setState(1799);
					search_pointer();
					}
				}

				setState(1803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT || _la==END) {
					{
					setState(1802);
					at_end();
					}
				}

				setState(1838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(1813); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1805);
						match(WHEN);
						setState(1806);
						logic_expression(0);
						setState(1809); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							setState(1809);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
								{
								setState(1807);
								statement();
								}
								break;
							case EXEC:
								{
								setState(1808);
								exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							setState(1811); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELEASE - 313)) | (1L << (RETURN - 313)) | (1L << (REWRITE - 313)) | (1L << (SEARCH - 313)) | (1L << (SET - 313)) | (1L << (SORT - 313)) | (1L << (START - 313)) | (1L << (STOP - 313)) | (1L << (STRING - 313)) | (1L << (SUBTRACT - 313)) | (1L << (SUPPRESS - 313)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (TERMINATE - 383)) | (1L << (UNLOCK - 383)) | (1L << (UNSTRING - 383)) | (1L << (WRITE - 383)) | (1L << (EXEC - 383)))) != 0) );
						}
						}
						setState(1815); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==WHEN );
					setState(1817);
					match(END_SEARCH);
					}
					break;
				case 2:
					{
					setState(1834); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1819);
							match(WHEN);
							setState(1820);
							logic_expression(0);
							setState(1832);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
							case EXEC:
								{
								setState(1823); 
								_errHandler.sync(this);
								_alt = 1;
								do {
									switch (_alt) {
									case 1:
										{
										setState(1823);
										_errHandler.sync(this);
										switch (_input.LA(1)) {
										case ACCEPT:
										case ADD:
										case ALTER:
										case CALL:
										case CANCEL:
										case CLOSE:
										case COMPUTE:
										case CONTINUE:
										case DELETE:
										case DISPLAY:
										case DIVIDE:
										case EVALUATE:
										case EXIT:
										case GENERATE:
										case GO:
										case IF:
										case INITIALIZE:
										case INITIATE:
										case INSPECT:
										case MERGE:
										case MOVE:
										case MULTIPLY:
										case OPEN:
										case PERFORM:
										case READ:
										case RECORD:
										case RELEASE:
										case RETURN:
										case REWRITE:
										case SEARCH:
										case SET:
										case SORT:
										case START:
										case STOP:
										case STRING:
										case SUBTRACT:
										case SUPPRESS:
										case TERMINATE:
										case UNLOCK:
										case UNSTRING:
										case WRITE:
											{
											setState(1821);
											statement();
											}
											break;
										case EXEC:
											{
											setState(1822);
											exec_sql_statement();
											}
											break;
										default:
											throw new NoViableAltException(this);
										}
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									setState(1825); 
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
								} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
								setState(1828);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
								case 1:
									{
									setState(1827);
									match(END_SEARCH);
									}
									break;
								}
								}
								break;
							case NEXT:
								{
								setState(1830);
								match(NEXT);
								setState(1831);
								match(SENTENCE);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1836); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1840);
				match(SEARCH);
				setState(1841);
				match(ALL);
				setState(1842);
				src_table();
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT || _la==END) {
					{
					setState(1843);
					at_end();
					}
				}

				setState(1846);
				match(WHEN);
				setState(1847);
				search_condition();
				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AND) {
					{
					{
					setState(1848);
					match(AND);
					setState(1849);
					search_condition();
					}
					}
					setState(1854);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1866);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCEPT:
				case ADD:
				case ALTER:
				case CALL:
				case CANCEL:
				case CLOSE:
				case COMPUTE:
				case CONTINUE:
				case DELETE:
				case DISPLAY:
				case DIVIDE:
				case EVALUATE:
				case EXIT:
				case GENERATE:
				case GO:
				case IF:
				case INITIALIZE:
				case INITIATE:
				case INSPECT:
				case MERGE:
				case MOVE:
				case MULTIPLY:
				case OPEN:
				case PERFORM:
				case READ:
				case RECORD:
				case RELEASE:
				case RETURN:
				case REWRITE:
				case SEARCH:
				case SET:
				case SORT:
				case START:
				case STOP:
				case STRING:
				case SUBTRACT:
				case SUPPRESS:
				case TERMINATE:
				case UNLOCK:
				case UNSTRING:
				case WRITE:
				case EXEC:
					{
					setState(1857); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(1857);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
								{
								setState(1855);
								statement();
								}
								break;
							case EXEC:
								{
								setState(1856);
								exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1859); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,156,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(1862);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
					case 1:
						{
						setState(1861);
						match(END_SEARCH);
						}
						break;
					}
					}
					break;
				case NEXT:
					{
					setState(1864);
					match(NEXT);
					setState(1865);
					match(SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Search_elemntContext search_elemnt() {
			return getRuleContext(Search_elemntContext.class,0);
		}
		public Search_argContext search_arg() {
			return getRuleContext(Search_argContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Condition_nameContext condition_name() {
			return getRuleContext(Condition_nameContext.class,0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_search_condition);
		int _la;
		try {
			setState(1887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1870);
				search_elemnt();
				setState(1882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(1872);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1871);
						match(IS);
						}
					}

					setState(1874);
					match(EQUAL);
					setState(1876);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(1875);
						match(TO);
						}
					}

					}
					break;
				case 2:
					{
					setState(1879);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1878);
						match(IS);
						}
					}

					setState(1881);
					match(EQUAL_);
					}
					break;
				}
				setState(1884);
				search_arg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1886);
				condition_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_argContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Search_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_arg; }
	}

	public final Search_argContext search_arg() throws RecognitionException {
		Search_argContext _localctx = new Search_argContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_search_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_elemntContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Search_elemntContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_elemnt; }
	}

	public final Search_elemntContext search_elemnt() throws RecognitionException {
		Search_elemntContext _localctx = new Search_elemntContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_search_elemnt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1891);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_pointerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Search_pointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_pointer; }
	}

	public final Search_pointerContext search_pointer() throws RecognitionException {
		Search_pointerContext _localctx = new Search_pointerContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_search_pointer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_tableContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Src_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_table; }
	}

	public final Src_tableContext src_table() throws RecognitionException {
		Src_tableContext _localctx = new Src_tableContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_src_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewrite_statementContext extends ParserRuleContext {
		public TerminalNode REWRITE() { return getToken(cobolParser.REWRITE, 0); }
		public Rewrite_rec_nameContext rewrite_rec_name() {
			return getRuleContext(Rewrite_rec_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_REWRITE() { return getToken(cobolParser.END_REWRITE, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Rewrite_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewrite_statement; }
	}

	public final Rewrite_statementContext rewrite_statement() throws RecognitionException {
		Rewrite_statementContext _localctx = new Rewrite_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_rewrite_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			match(REWRITE);
			setState(1898);
			rewrite_rec_name();
			setState(1901);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1899);
				match(FROM);
				setState(1900);
				src_item();
				}
			}

			setState(1908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWING) {
				{
				setState(1903);
				match(ALLOWING);
				setState(1904);
				match(NO);
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OTHERS) {
					{
					setState(1905);
					match(OTHERS);
					}
				}

				}
			}

			setState(1911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1910);
				invalid_key_variants();
				}
				break;
			}
			setState(1914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1913);
				match(END_REWRITE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rewrite_rec_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rewrite_rec_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewrite_rec_name; }
	}

	public final Rewrite_rec_nameContext rewrite_rec_name() throws RecognitionException {
		Rewrite_rec_nameContext _localctx = new Rewrite_rec_nameContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_rewrite_rec_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1916);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(cobolParser.RETURN, 0); }
		public Smrg_fileContext smrg_file() {
			return getRuleContext(Smrg_fileContext.class,0);
		}
		public List<At_endContext> at_end() {
			return getRuleContexts(At_endContext.class);
		}
		public At_endContext at_end(int i) {
			return getRuleContext(At_endContext.class,i);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode END_RETURN() { return getToken(cobolParser.END_RETURN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918);
			match(RETURN);
			setState(1919);
			smrg_file();
			setState(1921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORD) {
				{
				setState(1920);
				match(RECORD);
				}
			}

			setState(1925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1923);
				match(INTO);
				setState(1924);
				dest_item();
				}
			}

			setState(1927);
			at_end();
			setState(1930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1928);
				match(NOT);
				setState(1929);
				at_end();
				}
				break;
			}
			setState(1933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1932);
				match(END_RETURN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Smrg_fileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Smrg_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_smrg_file; }
	}

	public final Smrg_fileContext smrg_file() throws RecognitionException {
		Smrg_fileContext _localctx = new Smrg_fileContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_smrg_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1935);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_statementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(cobolParser.RELEASE, 0); }
		public Release_recContext release_rec() {
			return getRuleContext(Release_recContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Release_src_areaContext release_src_area() {
			return getRuleContext(Release_src_areaContext.class,0);
		}
		public Release_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_statement; }
	}

	public final Release_statementContext release_statement() throws RecognitionException {
		Release_statementContext _localctx = new Release_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_release_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1937);
			match(RELEASE);
			setState(1938);
			release_rec();
			setState(1941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1939);
				match(FROM);
				setState(1940);
				release_src_area();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_src_areaContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Release_src_areaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_src_area; }
	}

	public final Release_src_areaContext release_src_area() throws RecognitionException {
		Release_src_areaContext _localctx = new Release_src_areaContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_release_src_area);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1943);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_recContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Release_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_rec; }
	}

	public final Release_recContext release_rec() throws RecognitionException {
		Release_recContext _localctx = new Release_recContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_release_rec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1945);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_statementContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode DEPENDENCY() { return getToken(cobolParser.DEPENDENCY, 0); }
		public Path_nameContext path_name() {
			return getRuleContext(Path_nameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(cobolParser.TYPE, 0); }
		public Relation_typeContext relation_type() {
			return getRuleContext(Relation_typeContext.class,0);
		}
		public TerminalNode DICTIONARY() { return getToken(cobolParser.DICTIONARY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Record_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_statement; }
	}

	public final Record_statementContext record_statement() throws RecognitionException {
		Record_statementContext _localctx = new Record_statementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_record_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			match(RECORD);
			setState(1948);
			match(DEPENDENCY);
			setState(1949);
			path_name();
			setState(1955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(1950);
				match(TYPE);
				setState(1952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1951);
					match(IS);
					}
				}

				setState(1954);
				relation_type();
				}
			}

			setState(1961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DICTIONARY || _la==IN) {
				{
				setState(1958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1957);
					match(IN);
					}
				}

				setState(1960);
				match(DICTIONARY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relation_typeContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Relation_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation_type; }
	}

	public final Relation_typeContext relation_type() throws RecognitionException {
		Relation_typeContext _localctx = new Relation_typeContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_relation_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Path_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Path_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path_name; }
	}

	public final Path_nameContext path_name() throws RecognitionException {
		Path_nameContext _localctx = new Path_nameContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_path_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			_la = _input.LA(1);
			if ( !(_la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Read_statementContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(cobolParser.READ, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public Read_optionsContext read_options() {
			return getRuleContext(Read_optionsContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_nameContext key_name() {
			return getRuleContext(Key_nameContext.class,0);
		}
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_READ() { return getToken(cobolParser.END_READ, 0); }
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PREVIOUS() { return getToken(cobolParser.PREVIOUS, 0); }
		public TerminalNode PRIOR() { return getToken(cobolParser.PRIOR, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Read_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_read_statement; }
	}

	public final Read_statementContext read_statement() throws RecognitionException {
		Read_statementContext _localctx = new Read_statementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_read_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1967);
			match(READ);
			setState(1968);
			file_name();
			setState(1970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (NEXT - 254)) | (1L << (PREVIOUS - 254)) | (1L << (PRIOR - 254)))) != 0)) {
				{
				setState(1969);
				_la = _input.LA(1);
				if ( !(((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (NEXT - 254)) | (1L << (PREVIOUS - 254)) | (1L << (PRIOR - 254)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(1972);
				match(RECORD);
				}
				break;
			}
			setState(1977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1975);
				match(INTO);
				setState(1976);
				dest_item();
				}
			}

			setState(1995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOWING:
			case LOCK:
			case NO:
			case REGARDLESS:
			case WITH:
				{
				setState(1979);
				read_options();
				setState(1985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(1980);
					match(KEY);
					setState(1982);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IS) {
						{
						setState(1981);
						match(IS);
						}
					}

					setState(1984);
					key_name();
					}
				}

				}
				break;
			case KEY:
				{
				setState(1987);
				match(KEY);
				setState(1989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(1988);
					match(IS);
					}
				}

				setState(1991);
				key_name();
				setState(1993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWING || _la==LOCK || _la==NO || _la==REGARDLESS || _la==WITH) {
					{
					setState(1992);
					read_options();
					}
				}

				}
				break;
			case ACCEPT:
			case ADD:
			case ALTER:
			case AT:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case ELSE:
			case END:
			case END_ACCEPT:
			case END_ADD:
			case END_CALL:
			case END_COMPUTE:
			case END_DELETE:
			case END_DISPLAY:
			case END_DIVIDE:
			case END_EVALUATE:
			case END_IF:
			case END_MULTIPLY:
			case END_OF_PAGE:
			case END_PERFORM:
			case END_READ:
			case END_RETURN:
			case END_REWRITE:
			case END_SEARCH:
			case END_START:
			case END_STRING:
			case END_SUBTRACT:
			case END_UNSTRING:
			case END_WRITE:
			case EOP:
			case EVALUATE:
			case EXCEPTION:
			case EXIT:
			case GENERATE:
			case GO:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case INVALID:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case NOT:
			case ON:
			case OPEN:
			case OVERFLOW:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SIZE:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WHEN:
			case WRITE:
			case EXEC:
			case DOT_:
				break;
			default:
				break;
			}
			setState(1999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(1997);
				at_end_variants();
				}
				break;
			case 2:
				{
				setState(1998);
				invalid_key_variants();
				}
				break;
			}
			setState(2002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2001);
				match(END_READ);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regard_allowContext extends ParserRuleContext {
		public TerminalNode REGARDLESS() { return getToken(cobolParser.REGARDLESS, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode UPDATERS() { return getToken(cobolParser.UPDATERS, 0); }
		public TerminalNode READERS() { return getToken(cobolParser.READERS, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Regard_allowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regard_allow; }
	}

	public final Regard_allowContext regard_allow() throws RecognitionException {
		Regard_allowContext _localctx = new Regard_allowContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_regard_allow);
		int _la;
		try {
			setState(2020);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGARDLESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2004);
				match(REGARDLESS);
				setState(2006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(2005);
					match(OF);
					}
				}

				setState(2009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK) {
					{
					setState(2008);
					match(LOCK);
					}
				}

				}
				break;
			case ALLOWING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2011);
				match(ALLOWING);
				setState(2018);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATERS:
					{
					setState(2012);
					match(UPDATERS);
					}
					break;
				case READERS:
					{
					setState(2013);
					match(READERS);
					}
					break;
				case NO:
					{
					setState(2014);
					match(NO);
					setState(2016);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OTHERS) {
						{
						setState(2015);
						match(OTHERS);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Read_optionsContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public Regard_allowContext regard_allow() {
			return getRuleContext(Regard_allowContext.class,0);
		}
		public Read_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_read_options; }
	}

	public final Read_optionsContext read_options() throws RecognitionException {
		Read_optionsContext _localctx = new Read_optionsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_read_options);
		int _la;
		try {
			setState(2030);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCK:
			case NO:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2022);
					match(WITH);
					}
				}

				setState(2026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2025);
					match(NO);
					}
				}

				setState(2028);
				match(LOCK);
				}
				break;
			case ALLOWING:
			case REGARDLESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2029);
				regard_allow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_statementContext extends ParserRuleContext {
		public TerminalNode PERFORM() { return getToken(cobolParser.PERFORM, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode END_PERFORM() { return getToken(cobolParser.END_PERFORM, 0); }
		public Perform_timesContext perform_times() {
			return getRuleContext(Perform_timesContext.class,0);
		}
		public Perform_untilContext perform_until() {
			return getRuleContext(Perform_untilContext.class,0);
		}
		public Perform_varyingContext perform_varying() {
			return getRuleContext(Perform_varyingContext.class,0);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public Perform_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_statement; }
	}

	public final Perform_statementContext perform_statement() throws RecognitionException {
		Perform_statementContext _localctx = new Perform_statementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_perform_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2032);
			match(PERFORM);
			setState(2034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2033);
				proc_thru_proc();
				}
				break;
			}
			setState(2041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FUNCTION || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TEST - 384)) | (1L << (UNTIL - 384)) | (1L << (VARYING - 384)) | (1L << (WITH - 384)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (INTEGER_LITERAL_ - 453)) | (1L << (HEX_LITERAL_ - 453)) | (1L << (USER_DEFINED_WORD_ - 453)))) != 0)) {
				{
				setState(2039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(2036);
					perform_times();
					}
					break;
				case 2:
					{
					setState(2037);
					perform_until();
					}
					break;
				case 3:
					{
					setState(2038);
					perform_varying();
					}
					break;
				}
				}
			}

			setState(2050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2044); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2043);
					statement();
					}
					}
					setState(2046); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCEPT) | (1L << ADD) | (1L << ALTER) | (1L << CALL) | (1L << CANCEL) | (1L << CLOSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (COMPUTE - 76)) | (1L << (CONTINUE - 76)) | (1L << (DELETE - 76)) | (1L << (DISPLAY - 76)) | (1L << (DIVIDE - 76)))) != 0) || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (EVALUATE - 165)) | (1L << (EXIT - 165)) | (1L << (GENERATE - 165)) | (1L << (GO - 165)) | (1L << (IF - 165)) | (1L << (INITIALIZE - 165)) | (1L << (INITIATE - 165)) | (1L << (INSPECT - 165)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (MERGE - 246)) | (1L << (MOVE - 246)) | (1L << (MULTIPLY - 246)) | (1L << (OPEN - 246)) | (1L << (PERFORM - 246)) | (1L << (READ - 246)) | (1L << (RECORD - 246)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (RELEASE - 313)) | (1L << (RETURN - 313)) | (1L << (REWRITE - 313)) | (1L << (SEARCH - 313)) | (1L << (SET - 313)) | (1L << (SORT - 313)) | (1L << (START - 313)) | (1L << (STOP - 313)) | (1L << (STRING - 313)) | (1L << (SUBTRACT - 313)) | (1L << (SUPPRESS - 313)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (TERMINATE - 383)) | (1L << (UNLOCK - 383)) | (1L << (UNSTRING - 383)) | (1L << (WRITE - 383)))) != 0) );
				setState(2048);
				match(END_PERFORM);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_thru_procContext extends ParserRuleContext {
		public List<Proc_nameContext> proc_name() {
			return getRuleContexts(Proc_nameContext.class);
		}
		public Proc_nameContext proc_name(int i) {
			return getRuleContext(Proc_nameContext.class,i);
		}
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public Proc_thru_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_thru_proc; }
	}

	public final Proc_thru_procContext proc_thru_proc() throws RecognitionException {
		Proc_thru_procContext _localctx = new Proc_thru_procContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_proc_thru_proc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			proc_name();
			setState(2055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(2053);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2054);
				proc_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_timesContext extends ParserRuleContext {
		public TerminalNode TIMES() { return getToken(cobolParser.TIMES, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Perform_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_times; }
	}

	public final Perform_timesContext perform_times() throws RecognitionException {
		Perform_timesContext _localctx = new Perform_timesContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_perform_times);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(2057);
				identifier();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(2058);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2061);
			match(TIMES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_testContext extends ParserRuleContext {
		public TerminalNode TEST() { return getToken(cobolParser.TEST, 0); }
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_testContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_test; }
	}

	public final With_testContext with_test() throws RecognitionException {
		With_testContext _localctx = new With_testContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_with_test);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2063);
				match(WITH);
				}
			}

			setState(2066);
			match(TEST);
			setState(2067);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_untilContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(cobolParser.UNTIL, 0); }
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public With_testContext with_test() {
			return getRuleContext(With_testContext.class,0);
		}
		public Perform_untilContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_until; }
	}

	public final Perform_untilContext perform_until() throws RecognitionException {
		Perform_untilContext _localctx = new Perform_untilContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_perform_until);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEST || _la==WITH) {
				{
				setState(2069);
				with_test();
				}
			}

			setState(2072);
			match(UNTIL);
			setState(2073);
			logic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_varyingContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public List<Perform_rangeContext> perform_range() {
			return getRuleContexts(Perform_rangeContext.class);
		}
		public Perform_rangeContext perform_range(int i) {
			return getRuleContext(Perform_rangeContext.class,i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(cobolParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(cobolParser.UNTIL, i);
		}
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public With_testContext with_test() {
			return getRuleContext(With_testContext.class,0);
		}
		public List<TerminalNode> AFTER() { return getTokens(cobolParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(cobolParser.AFTER, i);
		}
		public Perform_varyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_varying; }
	}

	public final Perform_varyingContext perform_varying() throws RecognitionException {
		Perform_varyingContext _localctx = new Perform_varyingContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_perform_varying);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEST || _la==WITH) {
				{
				setState(2075);
				with_test();
				}
			}

			setState(2078);
			match(VARYING);
			setState(2079);
			perform_range();
			setState(2080);
			match(UNTIL);
			setState(2081);
			logic_expression(0);
			setState(2089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER) {
				{
				{
				setState(2082);
				match(AFTER);
				setState(2083);
				perform_range();
				setState(2084);
				match(UNTIL);
				setState(2085);
				logic_expression(0);
				}
				}
				setState(2091);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_rangeContext extends ParserRuleContext {
		public Perform_varContext perform_var() {
			return getRuleContext(Perform_varContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Perform_initContext perform_init() {
			return getRuleContext(Perform_initContext.class,0);
		}
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Perform_incremContext perform_increm() {
			return getRuleContext(Perform_incremContext.class,0);
		}
		public Perform_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_range; }
	}

	public final Perform_rangeContext perform_range() throws RecognitionException {
		Perform_rangeContext _localctx = new Perform_rangeContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_perform_range);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2092);
			perform_var();
			setState(2093);
			match(FROM);
			setState(2094);
			perform_init();
			setState(2095);
			match(BY);
			setState(2096);
			perform_increm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_incremContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Perform_incremContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_increm; }
	}

	public final Perform_incremContext perform_increm() throws RecognitionException {
		Perform_incremContext _localctx = new Perform_incremContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_perform_increm);
		int _la;
		try {
			setState(2100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2098);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2099);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_initContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Perform_initContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_init; }
	}

	public final Perform_initContext perform_init() throws RecognitionException {
		Perform_initContext _localctx = new Perform_initContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_perform_init);
		int _la;
		try {
			setState(2104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2102);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2103);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Perform_varContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Perform_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_perform_var; }
	}

	public final Perform_varContext perform_var() throws RecognitionException {
		Perform_varContext _localctx = new Perform_varContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_perform_var);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(cobolParser.OPEN, 0); }
		public List<Open_definitionContext> open_definition() {
			return getRuleContexts(Open_definitionContext.class);
		}
		public Open_definitionContext open_definition(int i) {
			return getRuleContext(Open_definitionContext.class,i);
		}
		public List<TerminalNode> OUTPUT() { return getTokens(cobolParser.OUTPUT); }
		public TerminalNode OUTPUT(int i) {
			return getToken(cobolParser.OUTPUT, i);
		}
		public List<TerminalNode> EXTEND() { return getTokens(cobolParser.EXTEND); }
		public TerminalNode EXTEND(int i) {
			return getToken(cobolParser.EXTEND, i);
		}
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(cobolParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(cobolParser.NO, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(cobolParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(cobolParser.REWIND, i);
		}
		public List<TerminalNode> WITH() { return getTokens(cobolParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(cobolParser.WITH, i);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_open_statement);
		int _la;
		try {
			setState(2132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2108);
				match(OPEN);
				setState(2110); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2109);
					open_definition();
					}
					}
					setState(2112); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EXTEND - 170)) | (1L << (INPUT - 170)) | (1L << (I_O - 170)))) != 0) || _la==OUTPUT );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2114);
				match(OPEN);
				setState(2128); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2115);
					_la = _input.LA(1);
					if ( !(_la==EXTEND || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2124); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2116);
						file_name();
						setState(2122);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO || _la==WITH) {
							{
							setState(2118);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WITH) {
								{
								setState(2117);
								match(WITH);
								}
							}

							setState(2120);
							match(NO);
							setState(2121);
							match(REWIND);
							}
						}

						}
						}
						setState(2126); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==USER_DEFINED_WORD_ );
					}
					}
					setState(2130); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==EXTEND || _la==OUTPUT );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_definitionContext extends ParserRuleContext {
		public TerminalNode INPUT() { return getToken(cobolParser.INPUT, 0); }
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode EXTEND() { return getToken(cobolParser.EXTEND, 0); }
		public TerminalNode I_O() { return getToken(cobolParser.I_O, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(cobolParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(cobolParser.NO, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(cobolParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(cobolParser.REWIND, i);
		}
		public List<Open_file_attributesContext> open_file_attributes() {
			return getRuleContexts(Open_file_attributesContext.class);
		}
		public Open_file_attributesContext open_file_attributes(int i) {
			return getRuleContext(Open_file_attributesContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(cobolParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(cobolParser.WITH, i);
		}
		public Open_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_definition; }
	}

	public final Open_definitionContext open_definition() throws RecognitionException {
		Open_definitionContext _localctx = new Open_definitionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_open_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2134);
			_la = _input.LA(1);
			if ( !(((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & ((1L << (EXTEND - 170)) | (1L << (INPUT - 170)) | (1L << (I_O - 170)))) != 0) || _la==OUTPUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2146); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2135);
				file_name();
				setState(2141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(2137);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2136);
						match(WITH);
						}
					}

					setState(2139);
					match(NO);
					setState(2140);
					match(REWIND);
					}
					break;
				}
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWING || _la==LOCK || _la==WITH) {
					{
					setState(2143);
					open_file_attributes();
					}
				}

				}
				}
				setState(2148); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_file_attributesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode ALLOWING() { return getToken(cobolParser.ALLOWING, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode READERS() { return getToken(cobolParser.READERS, 0); }
		public TerminalNode UPDATERS() { return getToken(cobolParser.UPDATERS, 0); }
		public TerminalNode WRITERS() { return getToken(cobolParser.WRITERS, 0); }
		public TerminalNode OTHERS() { return getToken(cobolParser.OTHERS, 0); }
		public Open_file_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_file_attributes; }
	}

	public final Open_file_attributesContext open_file_attributes() throws RecognitionException {
		Open_file_attributesContext _localctx = new Open_file_attributesContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_open_file_attributes);
		int _la;
		try {
			setState(2194);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCK:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2150);
					match(WITH);
					}
				}

				setState(2153);
				match(LOCK);
				}
				break;
			case ALLOWING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2154);
				match(ALLOWING);
				setState(2192);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(2155);
					match(NO);
					setState(2157);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OTHERS) {
						{
						setState(2156);
						match(OTHERS);
						}
					}

					}
					break;
				case ALL:
					{
					setState(2159);
					match(ALL);
					}
					break;
				case READERS:
				case UPDATERS:
				case WRITERS:
					{
					setState(2190);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
					case 1:
						{
						setState(2160);
						match(READERS);
						setState(2162);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WRITERS) {
							{
							setState(2161);
							match(WRITERS);
							}
						}

						setState(2165);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==UPDATERS) {
							{
							setState(2164);
							match(UPDATERS);
							}
						}

						}
						break;
					case 2:
						{
						setState(2167);
						match(READERS);
						setState(2168);
						match(UPDATERS);
						setState(2169);
						match(WRITERS);
						}
						break;
					case 3:
						{
						setState(2170);
						match(WRITERS);
						setState(2172);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==READERS) {
							{
							setState(2171);
							match(READERS);
							}
						}

						setState(2175);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==UPDATERS) {
							{
							setState(2174);
							match(UPDATERS);
							}
						}

						}
						break;
					case 4:
						{
						setState(2177);
						match(WRITERS);
						setState(2178);
						match(UPDATERS);
						setState(2179);
						match(READERS);
						}
						break;
					case 5:
						{
						setState(2180);
						match(UPDATERS);
						setState(2182);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==READERS) {
							{
							setState(2181);
							match(READERS);
							}
						}

						setState(2185);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WRITERS) {
							{
							setState(2184);
							match(WRITERS);
							}
						}

						}
						break;
					case 6:
						{
						setState(2187);
						match(UPDATERS);
						setState(2188);
						match(WRITERS);
						setState(2189);
						match(READERS);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_statementContext extends ParserRuleContext {
		public TerminalNode MULTIPLY() { return getToken(cobolParser.MULTIPLY, 0); }
		public List<Mult_numContext> mult_num() {
			return getRuleContexts(Mult_numContext.class);
		}
		public Mult_numContext mult_num(int i) {
			return getRuleContext(Mult_numContext.class,i);
		}
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_MULTIPLY() { return getToken(cobolParser.END_MULTIPLY, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Multiply_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_statement; }
	}

	public final Multiply_statementContext multiply_statement() throws RecognitionException {
		Multiply_statementContext _localctx = new Multiply_statementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_multiply_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196);
			match(MULTIPLY);
			setState(2197);
			mult_num();
			setState(2198);
			match(BY);
			setState(2202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2199);
				mult_num();
				setState(2200);
				match(GIVING);
				}
				break;
			}
			setState(2208); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2204);
				identifier_result();
				setState(2206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2205);
					match(ROUNDED);
					}
				}

				}
				}
				setState(2210); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(2213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2212);
				on_size_variants();
				}
				break;
			}
			setState(2216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2215);
				match(END_MULTIPLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mult_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Mult_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mult_num; }
	}

	public final Mult_numContext mult_num() throws RecognitionException {
		Mult_numContext _localctx = new Mult_numContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_mult_num);
		int _la;
		try {
			setState(2220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2218);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2219);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(cobolParser.MERGE, 0); }
		public MergefileContext mergefile() {
			return getRuleContext(MergefileContext.class,0);
		}
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public Output_procContext output_proc() {
			return getRuleContext(Output_procContext.class,0);
		}
		public Giving_fileContext giving_file() {
			return getRuleContext(Giving_fileContext.class,0);
		}
		public List<Merge_onContext> merge_on() {
			return getRuleContexts(Merge_onContext.class);
		}
		public Merge_onContext merge_on(int i) {
			return getRuleContext(Merge_onContext.class,i);
		}
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public List<InfileContext> infile() {
			return getRuleContexts(InfileContext.class);
		}
		public InfileContext infile(int i) {
			return getRuleContext(InfileContext.class,i);
		}
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			match(MERGE);
			setState(2223);
			mergefile();
			setState(2225); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2224);
				merge_on();
				}
				}
				setState(2227); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASCENDING || _la==DESCENDING || _la==ON );
			setState(2237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING || _la==SEQUENCE) {
				{
				setState(2230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING) {
					{
					setState(2229);
					match(COLLATING);
					}
				}

				setState(2232);
				match(SEQUENCE);
				setState(2234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(2233);
					match(IS);
					}
				}

				setState(2236);
				alpha_name();
				}
			}

			setState(2239);
			match(USING);
			setState(2241); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2240);
				infile();
				}
				}
				setState(2243); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(2247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OUTPUT:
				{
				setState(2245);
				output_proc();
				}
				break;
			case GIVING:
				{
				setState(2246);
				giving_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_procContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(cobolParser.OUTPUT, 0); }
		public TerminalNode PROCEDURE() { return getToken(cobolParser.PROCEDURE, 0); }
		public Proc_thru_procContext proc_thru_proc() {
			return getRuleContext(Proc_thru_procContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Output_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_proc; }
	}

	public final Output_procContext output_proc() throws RecognitionException {
		Output_procContext _localctx = new Output_procContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_output_proc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			match(OUTPUT);
			setState(2250);
			match(PROCEDURE);
			setState(2252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2251);
				match(IS);
				}
			}

			setState(2254);
			proc_thru_proc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_procContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public First_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_proc; }
	}

	public final First_procContext first_proc() throws RecognitionException {
		First_procContext _localctx = new First_procContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_first_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_procContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public End_procContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_proc; }
	}

	public final End_procContext end_proc() throws RecognitionException {
		End_procContext _localctx = new End_procContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_end_proc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2258);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Giving_fileContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public Giving_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_giving_file; }
	}

	public final Giving_fileContext giving_file() throws RecognitionException {
		Giving_fileContext _localctx = new Giving_fileContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_giving_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2260);
			match(GIVING);
			setState(2261);
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InfileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public InfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_infile; }
	}

	public final InfileContext infile() throws RecognitionException {
		InfileContext _localctx = new InfileContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_infile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_onContext extends ParserRuleContext {
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public List<MergekeyContext> mergekey() {
			return getRuleContexts(MergekeyContext.class);
		}
		public MergekeyContext mergekey(int i) {
			return getRuleContext(MergekeyContext.class,i);
		}
		public Merge_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_on; }
	}

	public final Merge_onContext merge_on() throws RecognitionException {
		Merge_onContext _localctx = new Merge_onContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_merge_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2265);
				match(ON);
				}
			}

			setState(2268);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(2269);
				match(KEY);
				}
			}

			setState(2273); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2272);
				mergekey();
				}
				}
				setState(2275); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergefileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public MergefileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergefile; }
	}

	public final MergefileContext mergefile() throws RecognitionException {
		MergefileContext _localctx = new MergefileContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_mergefile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2277);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergekeyContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public MergekeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergekey; }
	}

	public final MergekeyContext mergekey() throws RecognitionException {
		MergekeyContext _localctx = new MergekeyContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_mergekey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_statementContext extends ParserRuleContext {
		public TerminalNode INSPECT() { return getToken(cobolParser.INSPECT, 0); }
		public Src_stringContext src_string() {
			return getRuleContext(Src_stringContext.class,0);
		}
		public Inspect_tallyingContext inspect_tallying() {
			return getRuleContext(Inspect_tallyingContext.class,0);
		}
		public Inspect_replacingContext inspect_replacing() {
			return getRuleContext(Inspect_replacingContext.class,0);
		}
		public Inspect_convertingContext inspect_converting() {
			return getRuleContext(Inspect_convertingContext.class,0);
		}
		public Inspect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_statement; }
	}

	public final Inspect_statementContext inspect_statement() throws RecognitionException {
		Inspect_statementContext _localctx = new Inspect_statementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_inspect_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2281);
			match(INSPECT);
			setState(2282);
			src_string();
			setState(2289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TALLYING:
				{
				setState(2283);
				inspect_tallying();
				setState(2285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACING) {
					{
					setState(2284);
					inspect_replacing();
					}
				}

				}
				break;
			case REPLACING:
				{
				setState(2287);
				inspect_replacing();
				}
				break;
			case CONVERTING:
				{
				setState(2288);
				inspect_converting();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_convertingContext extends ParserRuleContext {
		public TerminalNode CONVERTING() { return getToken(cobolParser.CONVERTING, 0); }
		public Compare_charsContext compare_chars() {
			return getRuleContext(Compare_charsContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Convert_charsContext convert_chars() {
			return getRuleContext(Convert_charsContext.class,0);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Inspect_convertingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_converting; }
	}

	public final Inspect_convertingContext inspect_converting() throws RecognitionException {
		Inspect_convertingContext _localctx = new Inspect_convertingContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_inspect_converting);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2291);
			match(CONVERTING);
			setState(2292);
			compare_chars();
			setState(2293);
			match(TO);
			setState(2294);
			convert_chars();
			setState(2298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2295);
				delim_definition();
				}
				}
				setState(2300);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Convert_charsContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Convert_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convert_chars; }
	}

	public final Convert_charsContext convert_chars() throws RecognitionException {
		Convert_charsContext _localctx = new Convert_charsContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_convert_chars);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_charsContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Compare_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_chars; }
	}

	public final Compare_charsContext compare_chars() throws RecognitionException {
		Compare_charsContext _localctx = new Compare_charsContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_compare_chars);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_replacingContext extends ParserRuleContext {
		public TerminalNode REPLACING() { return getToken(cobolParser.REPLACING, 0); }
		public List<Replacing_charactersContext> replacing_characters() {
			return getRuleContexts(Replacing_charactersContext.class);
		}
		public Replacing_charactersContext replacing_characters(int i) {
			return getRuleContext(Replacing_charactersContext.class,i);
		}
		public List<Replacing_allContext> replacing_all() {
			return getRuleContexts(Replacing_allContext.class);
		}
		public Replacing_allContext replacing_all(int i) {
			return getRuleContext(Replacing_allContext.class,i);
		}
		public Inspect_replacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_replacing; }
	}

	public final Inspect_replacingContext inspect_replacing() throws RecognitionException {
		Inspect_replacingContext _localctx = new Inspect_replacingContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_inspect_replacing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			match(REPLACING);
			setState(2308); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2308);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTERS:
					{
					setState(2306);
					replacing_characters();
					}
					break;
				case ALL:
				case FIRST:
				case LEADING:
					{
					setState(2307);
					replacing_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2310); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==CHARACTERS || _la==FIRST || _la==LEADING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replacing_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public TerminalNode FIRST() { return getToken(cobolParser.FIRST, 0); }
		public List<Compare_valContext> compare_val() {
			return getRuleContexts(Compare_valContext.class);
		}
		public Compare_valContext compare_val(int i) {
			return getRuleContext(Compare_valContext.class,i);
		}
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public List<Replace_valContext> replace_val() {
			return getRuleContexts(Replace_valContext.class);
		}
		public Replace_valContext replace_val(int i) {
			return getRuleContext(Replace_valContext.class,i);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Replacing_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing_all; }
	}

	public final Replacing_allContext replacing_all() throws RecognitionException {
		Replacing_allContext _localctx = new Replacing_allContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_replacing_all);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2312);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==FIRST || _la==LEADING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2322); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2313);
				compare_val();
				setState(2314);
				match(BY);
				setState(2315);
				replace_val();
				setState(2319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AFTER || _la==BEFORE) {
					{
					{
					setState(2316);
					delim_definition();
					}
					}
					setState(2321);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(2324); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (HIGH_VALUE - 200)) | (1L << (HIGH_VALUES - 200)) | (1L << (LOW_VALUE - 200)) | (1L << (LOW_VALUES - 200)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_valContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Replace_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_val; }
	}

	public final Replace_valContext replace_val() throws RecognitionException {
		Replace_valContext _localctx = new Replace_valContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_replace_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2326);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replacing_charactersContext extends ParserRuleContext {
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public Replace_charContext replace_char() {
			return getRuleContext(Replace_charContext.class,0);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Replacing_charactersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing_characters; }
	}

	public final Replacing_charactersContext replacing_characters() throws RecognitionException {
		Replacing_charactersContext _localctx = new Replacing_charactersContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_replacing_characters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2328);
			match(CHARACTERS);
			setState(2329);
			match(BY);
			setState(2330);
			replace_char();
			setState(2334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2331);
				delim_definition();
				}
				}
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_charContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Replace_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_char; }
	}

	public final Replace_charContext replace_char() throws RecognitionException {
		Replace_charContext _localctx = new Replace_charContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_replace_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inspect_tallyingContext extends ParserRuleContext {
		public TerminalNode TALLYING() { return getToken(cobolParser.TALLYING, 0); }
		public List<Tallying_forContext> tallying_for() {
			return getRuleContexts(Tallying_forContext.class);
		}
		public Tallying_forContext tallying_for(int i) {
			return getRuleContext(Tallying_forContext.class,i);
		}
		public Inspect_tallyingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inspect_tallying; }
	}

	public final Inspect_tallyingContext inspect_tallying() throws RecognitionException {
		Inspect_tallyingContext _localctx = new Inspect_tallyingContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_inspect_tallying);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			match(TALLYING);
			setState(2341); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2340);
				tallying_for();
				}
				}
				setState(2343); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_forContext extends ParserRuleContext {
		public Tally_ctrContext tally_ctr() {
			return getRuleContext(Tally_ctrContext.class,0);
		}
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public List<Tallying_for_charactersContext> tallying_for_characters() {
			return getRuleContexts(Tallying_for_charactersContext.class);
		}
		public Tallying_for_charactersContext tallying_for_characters(int i) {
			return getRuleContext(Tallying_for_charactersContext.class,i);
		}
		public List<Tallying_for_allContext> tallying_for_all() {
			return getRuleContexts(Tallying_for_allContext.class);
		}
		public Tallying_for_allContext tallying_for_all(int i) {
			return getRuleContext(Tallying_for_allContext.class,i);
		}
		public Tallying_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for; }
	}

	public final Tallying_forContext tallying_for() throws RecognitionException {
		Tallying_forContext _localctx = new Tallying_forContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_tallying_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2345);
			tally_ctr();
			setState(2346);
			match(FOR);
			setState(2349); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2349);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTERS:
					{
					setState(2347);
					tallying_for_characters();
					}
					break;
				case ALL:
				case LEADING:
					{
					setState(2348);
					tallying_for_all();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2351); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==CHARACTERS || _la==LEADING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_for_charactersContext extends ParserRuleContext {
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Tallying_for_charactersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for_characters; }
	}

	public final Tallying_for_charactersContext tallying_for_characters() throws RecognitionException {
		Tallying_for_charactersContext _localctx = new Tallying_for_charactersContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_tallying_for_characters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2353);
			match(CHARACTERS);
			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AFTER || _la==BEFORE) {
				{
				{
				setState(2354);
				delim_definition();
				}
				}
				setState(2359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_definitionContext extends ParserRuleContext {
		public Delim_valContext delim_val() {
			return getRuleContext(Delim_valContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(cobolParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(cobolParser.AFTER, 0); }
		public TerminalNode INITIAL() { return getToken(cobolParser.INITIAL, 0); }
		public Delim_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_definition; }
	}

	public final Delim_definitionContext delim_definition() throws RecognitionException {
		Delim_definitionContext _localctx = new Delim_definitionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_delim_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2360);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL) {
				{
				setState(2361);
				match(INITIAL);
				}
			}

			setState(2364);
			delim_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tallying_for_allContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(cobolParser.ALL, 0); }
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public List<Compare_valContext> compare_val() {
			return getRuleContexts(Compare_valContext.class);
		}
		public Compare_valContext compare_val(int i) {
			return getRuleContext(Compare_valContext.class,i);
		}
		public List<Delim_definitionContext> delim_definition() {
			return getRuleContexts(Delim_definitionContext.class);
		}
		public Delim_definitionContext delim_definition(int i) {
			return getRuleContext(Delim_definitionContext.class,i);
		}
		public Tallying_for_allContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tallying_for_all; }
	}

	public final Tallying_for_allContext tallying_for_all() throws RecognitionException {
		Tallying_for_allContext _localctx = new Tallying_for_allContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_tallying_for_all);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2366);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==LEADING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2374); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2367);
					compare_val();
					setState(2371);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AFTER || _la==BEFORE) {
						{
						{
						setState(2368);
						delim_definition();
						}
						}
						setState(2373);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2376); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_valContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Figurative_constant_witout_allContext figurative_constant_witout_all() {
			return getRuleContext(Figurative_constant_witout_allContext.class,0);
		}
		public Compare_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_val; }
	}

	public final Compare_valContext compare_val() throws RecognitionException {
		Compare_valContext _localctx = new Compare_valContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_compare_val);
		try {
			setState(2381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2378);
				identifier_result();
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2379);
				match(STRING_LITERAL_);
				}
				break;
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(2380);
				figurative_constant_witout_all();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delim_valContext extends ParserRuleContext {
		public Compare_valContext compare_val() {
			return getRuleContext(Compare_valContext.class,0);
		}
		public Delim_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delim_val; }
	}

	public final Delim_valContext delim_val() throws RecognitionException {
		Delim_valContext _localctx = new Delim_valContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_delim_val);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2383);
			compare_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tally_ctrContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Tally_ctrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tally_ctr; }
	}

	public final Tally_ctrContext tally_ctr() throws RecognitionException {
		Tally_ctrContext _localctx = new Tally_ctrContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_tally_ctr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_stringContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Src_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_string; }
	}

	public final Src_stringContext src_string() throws RecognitionException {
		Src_stringContext _localctx = new Src_stringContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_src_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2387);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Initiate_statementContext extends ParserRuleContext {
		public TerminalNode INITIATE() { return getToken(cobolParser.INITIATE, 0); }
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public Initiate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initiate_statement; }
	}

	public final Initiate_statementContext initiate_statement() throws RecognitionException {
		Initiate_statementContext _localctx = new Initiate_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_initiate_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2389);
			match(INITIATE);
			setState(2391); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2390);
				report_name();
				}
				}
				setState(2393); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Initialize_statementContext extends ParserRuleContext {
		public TerminalNode INITIALIZE() { return getToken(cobolParser.INITIALIZE, 0); }
		public List<Fld_nameContext> fld_name() {
			return getRuleContexts(Fld_nameContext.class);
		}
		public Fld_nameContext fld_name(int i) {
			return getRuleContext(Fld_nameContext.class,i);
		}
		public List<ReplacingContext> replacing() {
			return getRuleContexts(ReplacingContext.class);
		}
		public ReplacingContext replacing(int i) {
			return getRuleContext(ReplacingContext.class,i);
		}
		public Initialize_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initialize_statement; }
	}

	public final Initialize_statementContext initialize_statement() throws RecognitionException {
		Initialize_statementContext _localctx = new Initialize_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_initialize_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			match(INITIALIZE);
			setState(2397); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2396);
				fld_name();
				}
				}
				setState(2399); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(2404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACING) {
				{
				{
				setState(2401);
				replacing();
				}
				}
				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplacingContext extends ParserRuleContext {
		public TerminalNode REPLACING() { return getToken(cobolParser.REPLACING, 0); }
		public List<TerminalNode> BY() { return getTokens(cobolParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(cobolParser.BY, i);
		}
		public List<Init_valueContext> init_value() {
			return getRuleContexts(Init_valueContext.class);
		}
		public Init_valueContext init_value(int i) {
			return getRuleContext(Init_valueContext.class,i);
		}
		public List<TerminalNode> ALPHABETIC() { return getTokens(cobolParser.ALPHABETIC); }
		public TerminalNode ALPHABETIC(int i) {
			return getToken(cobolParser.ALPHABETIC, i);
		}
		public List<TerminalNode> ALPHANUMERIC() { return getTokens(cobolParser.ALPHANUMERIC); }
		public TerminalNode ALPHANUMERIC(int i) {
			return getToken(cobolParser.ALPHANUMERIC, i);
		}
		public List<TerminalNode> NUMERIC() { return getTokens(cobolParser.NUMERIC); }
		public TerminalNode NUMERIC(int i) {
			return getToken(cobolParser.NUMERIC, i);
		}
		public List<TerminalNode> ALPHANUMERIC_EDITED() { return getTokens(cobolParser.ALPHANUMERIC_EDITED); }
		public TerminalNode ALPHANUMERIC_EDITED(int i) {
			return getToken(cobolParser.ALPHANUMERIC_EDITED, i);
		}
		public List<TerminalNode> NUMERIC_EDITED() { return getTokens(cobolParser.NUMERIC_EDITED); }
		public TerminalNode NUMERIC_EDITED(int i) {
			return getToken(cobolParser.NUMERIC_EDITED, i);
		}
		public List<TerminalNode> DATA() { return getTokens(cobolParser.DATA); }
		public TerminalNode DATA(int i) {
			return getToken(cobolParser.DATA, i);
		}
		public ReplacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacing; }
	}

	public final ReplacingContext replacing() throws RecognitionException {
		ReplacingContext _localctx = new ReplacingContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_replacing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2407);
			match(REPLACING);
			setState(2414); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2408);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHANUMERIC) | (1L << ALPHANUMERIC_EDITED))) != 0) || _la==NUMERIC || _la==NUMERIC_EDITED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA) {
					{
					setState(2409);
					match(DATA);
					}
				}

				setState(2412);
				match(BY);
				setState(2413);
				init_value();
				}
				}
				setState(2416); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHANUMERIC) | (1L << ALPHANUMERIC_EDITED))) != 0) || _la==NUMERIC || _la==NUMERIC_EDITED );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Init_valueContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Init_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_init_value; }
	}

	public final Init_valueContext init_value() throws RecognitionException {
		Init_valueContext _localctx = new Init_valueContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_init_value);
		try {
			setState(2420);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2418);
				qualified_data_item();
				}
				break;
			case STRING_LITERAL_:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2419);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fld_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Fld_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fld_name; }
	}

	public final Fld_nameContext fld_name() throws RecognitionException {
		Fld_nameContext _localctx = new Fld_nameContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_fld_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2422);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Move_statementContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(cobolParser.MOVE, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public List<Dest_itemContext> dest_item() {
			return getRuleContexts(Dest_itemContext.class);
		}
		public Dest_itemContext dest_item(int i) {
			return getRuleContext(Dest_itemContext.class,i);
		}
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public Move_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_statement; }
	}

	public final Move_statementContext move_statement() throws RecognitionException {
		Move_statementContext _localctx = new Move_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_move_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2424);
			match(MOVE);
			setState(2426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CORR || _la==CORRESPONDING) {
				{
				setState(2425);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2428);
			src_item();
			setState(2429);
			match(TO);
			setState(2431); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2430);
				dest_item();
				}
				}
				setState(2433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(cobolParser.IF, 0); }
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public List<TerminalNode> NEXT() { return getTokens(cobolParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(cobolParser.NEXT, i);
		}
		public List<TerminalNode> SENTENCE() { return getTokens(cobolParser.SENTENCE); }
		public TerminalNode SENTENCE(int i) {
			return getToken(cobolParser.SENTENCE, i);
		}
		public TerminalNode THEN() { return getToken(cobolParser.THEN, 0); }
		public TerminalNode ELSE() { return getToken(cobolParser.ELSE, 0); }
		public TerminalNode END_IF() { return getToken(cobolParser.END_IF, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_if_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2435);
			match(IF);
			setState(2436);
			logic_expression(0);
			setState(2438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THEN) {
				{
				setState(2437);
				match(THEN);
				}
			}

			setState(2448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCEPT:
			case ADD:
			case ALTER:
			case CALL:
			case CANCEL:
			case CLOSE:
			case COMPUTE:
			case CONTINUE:
			case DELETE:
			case DISPLAY:
			case DIVIDE:
			case EVALUATE:
			case EXIT:
			case GENERATE:
			case GO:
			case IF:
			case INITIALIZE:
			case INITIATE:
			case INSPECT:
			case MERGE:
			case MOVE:
			case MULTIPLY:
			case OPEN:
			case PERFORM:
			case READ:
			case RECORD:
			case RELEASE:
			case RETURN:
			case REWRITE:
			case SEARCH:
			case SET:
			case SORT:
			case START:
			case STOP:
			case STRING:
			case SUBTRACT:
			case SUPPRESS:
			case TERMINATE:
			case UNLOCK:
			case UNSTRING:
			case WRITE:
			case EXEC:
				{
				setState(2442); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2442);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ACCEPT:
						case ADD:
						case ALTER:
						case CALL:
						case CANCEL:
						case CLOSE:
						case COMPUTE:
						case CONTINUE:
						case DELETE:
						case DISPLAY:
						case DIVIDE:
						case EVALUATE:
						case EXIT:
						case GENERATE:
						case GO:
						case IF:
						case INITIALIZE:
						case INITIATE:
						case INSPECT:
						case MERGE:
						case MOVE:
						case MULTIPLY:
						case OPEN:
						case PERFORM:
						case READ:
						case RECORD:
						case RELEASE:
						case RETURN:
						case REWRITE:
						case SEARCH:
						case SET:
						case SORT:
						case START:
						case STOP:
						case STRING:
						case SUBTRACT:
						case SUPPRESS:
						case TERMINATE:
						case UNLOCK:
						case UNSTRING:
						case WRITE:
							{
							setState(2440);
							statement();
							}
							break;
						case EXEC:
							{
							setState(2441);
							exec_sql_statement();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2444); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case NEXT:
				{
				setState(2446);
				match(NEXT);
				setState(2447);
				match(SENTENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2450);
				match(ELSE);
				setState(2459);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCEPT:
				case ADD:
				case ALTER:
				case CALL:
				case CANCEL:
				case CLOSE:
				case COMPUTE:
				case CONTINUE:
				case DELETE:
				case DISPLAY:
				case DIVIDE:
				case EVALUATE:
				case EXIT:
				case GENERATE:
				case GO:
				case IF:
				case INITIALIZE:
				case INITIATE:
				case INSPECT:
				case MERGE:
				case MOVE:
				case MULTIPLY:
				case OPEN:
				case PERFORM:
				case READ:
				case RECORD:
				case RELEASE:
				case RETURN:
				case REWRITE:
				case SEARCH:
				case SET:
				case SORT:
				case START:
				case STOP:
				case STRING:
				case SUBTRACT:
				case SUPPRESS:
				case TERMINATE:
				case UNLOCK:
				case UNSTRING:
				case WRITE:
				case EXEC:
					{
					setState(2453); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(2453);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
								{
								setState(2451);
								statement();
								}
								break;
							case EXEC:
								{
								setState(2452);
								exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2455); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case NEXT:
					{
					setState(2457);
					match(NEXT);
					setState(2458);
					match(SENTENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2463);
				match(END_IF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_statementContext extends ParserRuleContext {
		public TerminalNode GENERATE() { return getToken(cobolParser.GENERATE, 0); }
		public Report_itemContext report_item() {
			return getRuleContext(Report_itemContext.class,0);
		}
		public Generate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_statement; }
	}

	public final Generate_statementContext generate_statement() throws RecognitionException {
		Generate_statementContext _localctx = new Generate_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_generate_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			match(GENERATE);
			setState(2467);
			report_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_itemContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Report_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_item; }
	}

	public final Report_itemContext report_item() throws RecognitionException {
		Report_itemContext _localctx = new Report_itemContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_report_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(cobolParser.EXIT, 0); }
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_exit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_program_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(cobolParser.EXIT, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public Exit_program_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_program_statement; }
	}

	public final Exit_program_statementContext exit_program_statement() throws RecognitionException {
		Exit_program_statementContext _localctx = new Exit_program_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_exit_program_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473);
			match(EXIT);
			setState(2474);
			match(PROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_to_statementContext extends ParserRuleContext {
		public TerminalNode GO() { return getToken(cobolParser.GO, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public List<Proc_nameContext> proc_name() {
			return getRuleContexts(Proc_nameContext.class);
		}
		public Proc_nameContext proc_name(int i) {
			return getRuleContext(Proc_nameContext.class,i);
		}
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Go_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_to_statement; }
	}

	public final Go_to_statementContext go_to_statement() throws RecognitionException {
		Go_to_statementContext _localctx = new Go_to_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_go_to_statement);
		int _la;
		try {
			setState(2498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2476);
				match(GO);
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2477);
					match(TO);
					}
				}

				setState(2481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_DEFINED_WORD_) {
					{
					setState(2480);
					proc_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2483);
				match(GO);
				setState(2485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2484);
					match(TO);
					}
				}

				setState(2488); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2487);
					proc_name();
					}
					}
					setState(2490); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				setState(2492);
				match(DEPENDING);
				setState(2494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2493);
					match(ON);
					}
				}

				setState(2496);
				identifier_result();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_name; }
	}

	public final Proc_nameContext proc_name() throws RecognitionException {
		Proc_nameContext _localctx = new Proc_nameContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_proc_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Evaluate_statementContext extends ParserRuleContext {
		public TerminalNode EVALUATE() { return getToken(cobolParser.EVALUATE, 0); }
		public List<Subj_itemContext> subj_item() {
			return getRuleContexts(Subj_itemContext.class);
		}
		public Subj_itemContext subj_item(int i) {
			return getRuleContext(Subj_itemContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(cobolParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(cobolParser.WHEN, i);
		}
		public List<When_conditionContext> when_condition() {
			return getRuleContexts(When_conditionContext.class);
		}
		public When_conditionContext when_condition(int i) {
			return getRuleContext(When_conditionContext.class,i);
		}
		public TerminalNode OTHER() { return getToken(cobolParser.OTHER, 0); }
		public TerminalNode END_EVALUATE() { return getToken(cobolParser.END_EVALUATE, 0); }
		public List<TerminalNode> ALSO() { return getTokens(cobolParser.ALSO); }
		public TerminalNode ALSO(int i) {
			return getToken(cobolParser.ALSO, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public Evaluate_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_evaluate_statement; }
	}

	public final Evaluate_statementContext evaluate_statement() throws RecognitionException {
		Evaluate_statementContext _localctx = new Evaluate_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_evaluate_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2502);
			match(EVALUATE);
			setState(2503);
			subj_item();
			setState(2510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING_LITERAL_) | (1L << ALL) | (1L << ALSO))) != 0) || ((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (FALSE - 174)) | (1L << (FUNCTION - 174)) | (1L << (HIGH_VALUE - 174)) | (1L << (HIGH_VALUES - 174)))) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & ((1L << (LOW_VALUE - 241)) | (1L << (LOW_VALUES - 241)) | (1L << (NOT - 241)) | (1L << (QUOTE - 241)) | (1L << (QUOTES - 241)))) != 0) || ((((_la - 358)) & ~0x3f) == 0 && ((1L << (_la - 358)) & ((1L << (SPACE - 358)) | (1L << (SPACES - 358)) | (1L << (TRUE - 358)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (PLUS_ - 422)) | (1L << (MINUS_ - 422)) | (1L << (LPAREN_ - 422)) | (1L << (NUMERIC_LITERAL_ - 422)) | (1L << (INTEGER_LITERAL_ - 422)) | (1L << (HEX_LITERAL_ - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0)) {
				{
				{
				setState(2505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALSO) {
					{
					setState(2504);
					match(ALSO);
					}
				}

				setState(2507);
				subj_item();
				}
				}
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2531); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2513);
					match(WHEN);
					setState(2514);
					when_condition();
					setState(2521);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,289,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2516);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==ALSO) {
								{
								setState(2515);
								match(ALSO);
								}
							}

							setState(2518);
							when_condition();
							}
							} 
						}
						setState(2523);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,289,_ctx);
					}
					setState(2528);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,291,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(2526);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case ACCEPT:
							case ADD:
							case ALTER:
							case CALL:
							case CANCEL:
							case CLOSE:
							case COMPUTE:
							case CONTINUE:
							case DELETE:
							case DISPLAY:
							case DIVIDE:
							case EVALUATE:
							case EXIT:
							case GENERATE:
							case GO:
							case IF:
							case INITIALIZE:
							case INITIATE:
							case INSPECT:
							case MERGE:
							case MOVE:
							case MULTIPLY:
							case OPEN:
							case PERFORM:
							case READ:
							case RECORD:
							case RELEASE:
							case RETURN:
							case REWRITE:
							case SEARCH:
							case SET:
							case SORT:
							case START:
							case STOP:
							case STRING:
							case SUBTRACT:
							case SUPPRESS:
							case TERMINATE:
							case UNLOCK:
							case UNSTRING:
							case WRITE:
								{
								setState(2524);
								statement();
								}
								break;
							case EXEC:
								{
								setState(2525);
								exec_sql_statement();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(2530);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,291,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2533); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				setState(2535);
				match(WHEN);
				setState(2536);
				match(OTHER);
				setState(2541);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(2539);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ACCEPT:
						case ADD:
						case ALTER:
						case CALL:
						case CANCEL:
						case CLOSE:
						case COMPUTE:
						case CONTINUE:
						case DELETE:
						case DISPLAY:
						case DIVIDE:
						case EVALUATE:
						case EXIT:
						case GENERATE:
						case GO:
						case IF:
						case INITIALIZE:
						case INITIATE:
						case INSPECT:
						case MERGE:
						case MOVE:
						case MULTIPLY:
						case OPEN:
						case PERFORM:
						case READ:
						case RECORD:
						case RELEASE:
						case RETURN:
						case REWRITE:
						case SEARCH:
						case SET:
						case SORT:
						case START:
						case STOP:
						case STRING:
						case SUBTRACT:
						case SUPPRESS:
						case TERMINATE:
						case UNLOCK:
						case UNSTRING:
						case WRITE:
							{
							setState(2537);
							statement();
							}
							break;
						case EXEC:
							{
							setState(2538);
							exec_sql_statement();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(2543);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
				}
				}
				break;
			}
			setState(2547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2546);
				match(END_EVALUATE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_conditionContext extends ParserRuleContext {
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode ANY() { return getToken(cobolParser.ANY, 0); }
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(cobolParser.FALSE, 0); }
		public When_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_condition; }
	}

	public final When_conditionContext when_condition() throws RecognitionException {
		When_conditionContext _localctx = new When_conditionContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_when_condition);
		int _la;
		try {
			setState(2561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2549);
				logic_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2550);
					match(NOT);
					}
				}

				setState(2553);
				arithmetic_expression(0);
				setState(2556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THROUGH || _la==THRU) {
					{
					setState(2554);
					_la = _input.LA(1);
					if ( !(_la==THROUGH || _la==THRU) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2555);
					arithmetic_expression(0);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2558);
				match(ANY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2559);
				match(TRUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2560);
				match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subj_itemContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Logic_expressionContext logic_expression() {
			return getRuleContext(Logic_expressionContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(cobolParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(cobolParser.FALSE, 0); }
		public Subj_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subj_item; }
	}

	public final Subj_itemContext subj_item() throws RecognitionException {
		Subj_itemContext _localctx = new Subj_itemContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_subj_item);
		try {
			setState(2567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2563);
				arithmetic_expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2564);
				logic_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2565);
				match(TRUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2566);
				match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statementContext extends ParserRuleContext {
		public Divide_statement_form1Context divide_statement_form1() {
			return getRuleContext(Divide_statement_form1Context.class,0);
		}
		public Divide_statement_form2Context divide_statement_form2() {
			return getRuleContext(Divide_statement_form2Context.class,0);
		}
		public Divide_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement; }
	}

	public final Divide_statementContext divide_statement() throws RecognitionException {
		Divide_statementContext _localctx = new Divide_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_divide_statement);
		try {
			setState(2571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2569);
				divide_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2570);
				divide_statement_form2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statement_form1Context extends ParserRuleContext {
		public TerminalNode DIVIDE() { return getToken(cobolParser.DIVIDE, 0); }
		public List<Divide_numContext> divide_num() {
			return getRuleContexts(Divide_numContext.class);
		}
		public Divide_numContext divide_num(int i) {
			return getRuleContext(Divide_numContext.class,i);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_DIVIDE() { return getToken(cobolParser.END_DIVIDE, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Divide_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement_form1; }
	}

	public final Divide_statement_form1Context divide_statement_form1() throws RecognitionException {
		Divide_statement_form1Context _localctx = new Divide_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 322, RULE_divide_statement_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2573);
			match(DIVIDE);
			setState(2574);
			divide_num();
			setState(2575);
			_la = _input.LA(1);
			if ( !(_la==BY || _la==INTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2576);
				divide_num();
				setState(2577);
				match(GIVING);
				}
				break;
			}
			setState(2585); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2581);
				identifier_result();
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2582);
					match(ROUNDED);
					}
				}

				}
				}
				setState(2587); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(2590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2589);
				on_size_variants();
				}
				break;
			}
			setState(2593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2592);
				match(END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_statement_form2Context extends ParserRuleContext {
		public TerminalNode DIVIDE() { return getToken(cobolParser.DIVIDE, 0); }
		public List<Divide_numContext> divide_num() {
			return getRuleContexts(Divide_numContext.class);
		}
		public Divide_numContext divide_num(int i) {
			return getRuleContext(Divide_numContext.class,i);
		}
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode REMAINDER() { return getToken(cobolParser.REMAINDER, 0); }
		public RemaindContext remaind() {
			return getRuleContext(RemaindContext.class,0);
		}
		public TerminalNode INTO() { return getToken(cobolParser.INTO, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public TerminalNode ROUNDED() { return getToken(cobolParser.ROUNDED, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_DIVIDE() { return getToken(cobolParser.END_DIVIDE, 0); }
		public Divide_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_statement_form2; }
	}

	public final Divide_statement_form2Context divide_statement_form2() throws RecognitionException {
		Divide_statement_form2Context _localctx = new Divide_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 324, RULE_divide_statement_form2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2595);
			match(DIVIDE);
			setState(2596);
			divide_num();
			setState(2597);
			_la = _input.LA(1);
			if ( !(_la==BY || _la==INTO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2598);
				divide_num();
				setState(2599);
				match(GIVING);
				}
				break;
			}
			setState(2603);
			identifier_result();
			setState(2605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROUNDED) {
				{
				setState(2604);
				match(ROUNDED);
				}
			}

			setState(2607);
			match(REMAINDER);
			setState(2608);
			remaind();
			setState(2610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2609);
				on_size_variants();
				}
				break;
			}
			setState(2613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2612);
				match(END_DIVIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemaindContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public RemaindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remaind; }
	}

	public final RemaindContext remaind() throws RecognitionException {
		RemaindContext _localctx = new RemaindContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_remaind);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Divide_numContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Divide_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_divide_num; }
	}

	public final Divide_numContext divide_num() throws RecognitionException {
		Divide_numContext _localctx = new Divide_numContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_divide_num);
		int _la;
		try {
			setState(2619);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2617);
				identifier();
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2618);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statementContext extends ParserRuleContext {
		public Display_statement_form1Context display_statement_form1() {
			return getRuleContext(Display_statement_form1Context.class,0);
		}
		public Display_statement_form2Context display_statement_form2() {
			return getRuleContext(Display_statement_form2Context.class,0);
		}
		public Display_statement_form3Context display_statement_form3() {
			return getRuleContext(Display_statement_form3Context.class,0);
		}
		public Display_statement_form4Context display_statement_form4() {
			return getRuleContext(Display_statement_form4Context.class,0);
		}
		public Display_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement; }
	}

	public final Display_statementContext display_statement() throws RecognitionException {
		Display_statementContext _localctx = new Display_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_display_statement);
		try {
			setState(2625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2621);
				display_statement_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2622);
				display_statement_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2623);
				display_statement_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2624);
				display_statement_form4();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form1Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public List<Src_itemContext> src_item() {
			return getRuleContexts(Src_itemContext.class);
		}
		public Src_itemContext src_item(int i) {
			return getRuleContext(Src_itemContext.class,i);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public List<Display_form1_clauseContext> display_form1_clause() {
			return getRuleContexts(Display_form1_clauseContext.class);
		}
		public Display_form1_clauseContext display_form1_clause(int i) {
			return getRuleContext(Display_form1_clauseContext.class,i);
		}
		public Display_statement_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form1; }
	}

	public final Display_statement_form1Context display_statement_form1() throws RecognitionException {
		Display_statement_form1Context _localctx = new Display_statement_form1Context(_ctx, getState());
		enterRule(_localctx, 332, RULE_display_statement_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2627);
			match(DISPLAY);
			setState(2635); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2628);
				src_item();
				setState(2632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CONVERSION || _la==NO || _la==UPON || _la==WITH) {
					{
					{
					setState(2629);
					display_form1_clause();
					}
					}
					setState(2634);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(2637); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (NUMERIC_LITERAL_ - 422)) | (1L << (INTEGER_LITERAL_ - 422)) | (1L << (HEX_LITERAL_ - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
			setState(2640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2639);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form2Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public List<Src_itemContext> src_item() {
			return getRuleContexts(Src_itemContext.class);
		}
		public Src_itemContext src_item(int i) {
			return getRuleContext(Src_itemContext.class,i);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public List<Display_form2_clauseContext> display_form2_clause() {
			return getRuleContexts(Display_form2_clauseContext.class);
		}
		public Display_form2_clauseContext display_form2_clause(int i) {
			return getRuleContext(Display_form2_clauseContext.class,i);
		}
		public Display_statement_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form2; }
	}

	public final Display_statement_form2Context display_statement_form2() throws RecognitionException {
		Display_statement_form2Context _localctx = new Display_statement_form2Context(_ctx, getState());
		enterRule(_localctx, 334, RULE_display_statement_form2);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			match(DISPLAY);
			setState(2650); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2643);
				src_item();
				setState(2647);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2644);
						display_form2_clause();
						}
						} 
					}
					setState(2649);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
				}
				}
				}
				setState(2652); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (NUMERIC_LITERAL_ - 422)) | (1L << (INTEGER_LITERAL_ - 422)) | (1L << (HEX_LITERAL_ - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
			setState(2655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2654);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form3Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public Disp_f3_lineContext disp_f3_line() {
			return getRuleContext(Disp_f3_lineContext.class,0);
		}
		public Disp_f3_columnContext disp_f3_column() {
			return getRuleContext(Disp_f3_columnContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public Display_statement_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form3; }
	}

	public final Display_statement_form3Context display_statement_form3() throws RecognitionException {
		Display_statement_form3Context _localctx = new Display_statement_form3Context(_ctx, getState());
		enterRule(_localctx, 336, RULE_display_statement_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(DISPLAY);
			setState(2658);
			identifier_result();
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(2659);
					match(AT);
					}
				}

				setState(2670);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LINE:
					{
					setState(2662);
					disp_f3_line();
					setState(2664);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLUMN) {
						{
						setState(2663);
						disp_f3_column();
						}
					}

					}
					break;
				case COLUMN:
					{
					setState(2666);
					disp_f3_column();
					setState(2668);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LINE) {
						{
						setState(2667);
						disp_f3_line();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(2674);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_statement_form4Context extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public Src_itemContext src_item() {
			return getRuleContext(Src_itemContext.class,0);
		}
		public Upon_destContext upon_dest() {
			return getRuleContext(Upon_destContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_DISPLAY() { return getToken(cobolParser.END_DISPLAY, 0); }
		public Display_statement_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_statement_form4; }
	}

	public final Display_statement_form4Context display_statement_form4() throws RecognitionException {
		Display_statement_form4Context _localctx = new Display_statement_form4Context(_ctx, getState());
		enterRule(_localctx, 338, RULE_display_statement_form4);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677);
			match(DISPLAY);
			setState(2678);
			src_item();
			setState(2679);
			upon_dest();
			setState(2681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(2680);
				on_exception_variants();
				}
				break;
			}
			setState(2684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(2683);
				match(END_DISPLAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_itemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Src_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_item; }
	}

	public final Src_itemContext src_item() throws RecognitionException {
		Src_itemContext _localctx = new Src_itemContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_src_item);
		try {
			setState(2688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2686);
				identifier();
				}
				break;
			case STRING_LITERAL_:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2687);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disp_f3_lineContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Disp_f3_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disp_f3_line; }
	}

	public final Disp_f3_lineContext disp_f3_line() throws RecognitionException {
		Disp_f3_lineContext _localctx = new Disp_f3_lineContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_disp_f3_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2690);
			match(LINE);
			setState(2692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2691);
				match(NUMBER);
				}
			}

			setState(2696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(2694);
				identifier();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(2695);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disp_f3_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Disp_f3_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disp_f3_column; }
	}

	public final Disp_f3_columnContext disp_f3_column() throws RecognitionException {
		Disp_f3_columnContext _localctx = new Disp_f3_columnContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_disp_f3_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(COLUMN);
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2699);
				match(NUMBER);
				}
			}

			setState(2704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(2702);
				identifier();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(2703);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_form1_clauseContext extends ParserRuleContext {
		public With_conversionContext with_conversion() {
			return getRuleContext(With_conversionContext.class,0);
		}
		public Upon_destContext upon_dest() {
			return getRuleContext(Upon_destContext.class,0);
		}
		public With_no_advancingContext with_no_advancing() {
			return getRuleContext(With_no_advancingContext.class,0);
		}
		public Display_form1_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_form1_clause; }
	}

	public final Display_form1_clauseContext display_form1_clause() throws RecognitionException {
		Display_form1_clauseContext _localctx = new Display_form1_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_display_form1_clause);
		try {
			setState(2709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				with_conversion();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2707);
				upon_dest();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2708);
				with_no_advancing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upon_destContext extends ParserRuleContext {
		public TerminalNode UPON() { return getToken(cobolParser.UPON, 0); }
		public Out_destContext out_dest() {
			return getRuleContext(Out_destContext.class,0);
		}
		public Upon_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upon_dest; }
	}

	public final Upon_destContext upon_dest() throws RecognitionException {
		Upon_destContext _localctx = new Upon_destContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_upon_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2711);
			match(UPON);
			setState(2712);
			out_dest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_conversionContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_conversion; }
	}

	public final With_conversionContext with_conversion() throws RecognitionException {
		With_conversionContext _localctx = new With_conversionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_with_conversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2714);
				match(WITH);
				}
			}

			setState(2717);
			match(CONVERSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_no_advancingContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode ADVANCING() { return getToken(cobolParser.ADVANCING, 0); }
		public With_no_advancingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_no_advancing; }
	}

	public final With_no_advancingContext with_no_advancing() throws RecognitionException {
		With_no_advancingContext _localctx = new With_no_advancingContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_with_no_advancing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2719);
				match(WITH);
				}
			}

			setState(2722);
			match(NO);
			setState(2724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADVANCING) {
				{
				setState(2723);
				match(ADVANCING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Display_form2_clauseContext extends ParserRuleContext {
		public Display_form1_clauseContext display_form1_clause() {
			return getRuleContext(Display_form1_clauseContext.class,0);
		}
		public At_line_numberContext at_line_number() {
			return getRuleContext(At_line_numberContext.class,0);
		}
		public At_column_numberContext at_column_number() {
			return getRuleContext(At_column_numberContext.class,0);
		}
		public Erase_toContext erase_to() {
			return getRuleContext(Erase_toContext.class,0);
		}
		public With_bellContext with_bell() {
			return getRuleContext(With_bellContext.class,0);
		}
		public UnderlinedContext underlined() {
			return getRuleContext(UnderlinedContext.class,0);
		}
		public BoldContext bold() {
			return getRuleContext(BoldContext.class,0);
		}
		public With_blinkingContext with_blinking() {
			return getRuleContext(With_blinkingContext.class,0);
		}
		public ReversedContext reversed() {
			return getRuleContext(ReversedContext.class,0);
		}
		public With_conversionContext with_conversion() {
			return getRuleContext(With_conversionContext.class,0);
		}
		public With_no_advancingContext with_no_advancing() {
			return getRuleContext(With_no_advancingContext.class,0);
		}
		public Display_form2_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display_form2_clause; }
	}

	public final Display_form2_clauseContext display_form2_clause() throws RecognitionException {
		Display_form2_clauseContext _localctx = new Display_form2_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_display_form2_clause);
		try {
			setState(2737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2726);
				display_form1_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2727);
				at_line_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2728);
				at_column_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2729);
				erase_to();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2730);
				with_bell();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2731);
				underlined();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2732);
				bold();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2733);
				with_blinking();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2734);
				reversed();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2735);
				with_conversion();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2736);
				with_no_advancing();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReversedContext extends ParserRuleContext {
		public TerminalNode REVERSED() { return getToken(cobolParser.REVERSED, 0); }
		public ReversedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reversed; }
	}

	public final ReversedContext reversed() throws RecognitionException {
		ReversedContext _localctx = new ReversedContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_reversed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			match(REVERSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_blinkingContext extends ParserRuleContext {
		public TerminalNode BLINKING() { return getToken(cobolParser.BLINKING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_blinkingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_blinking; }
	}

	public final With_blinkingContext with_blinking() throws RecognitionException {
		With_blinkingContext _localctx = new With_blinkingContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_with_blinking);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2741);
				match(WITH);
				}
			}

			setState(2744);
			match(BLINKING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoldContext extends ParserRuleContext {
		public TerminalNode BOLD() { return getToken(cobolParser.BOLD, 0); }
		public BoldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bold; }
	}

	public final BoldContext bold() throws RecognitionException {
		BoldContext _localctx = new BoldContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_bold);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(BOLD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_bellContext extends ParserRuleContext {
		public TerminalNode BELL() { return getToken(cobolParser.BELL, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_bellContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_bell; }
	}

	public final With_bellContext with_bell() throws RecognitionException {
		With_bellContext _localctx = new With_bellContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_with_bell);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2748);
				match(WITH);
				}
			}

			setState(2751);
			match(BELL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnderlinedContext extends ParserRuleContext {
		public TerminalNode UNDERLINED() { return getToken(cobolParser.UNDERLINED, 0); }
		public UnderlinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_underlined; }
	}

	public final UnderlinedContext underlined() throws RecognitionException {
		UnderlinedContext _localctx = new UnderlinedContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_underlined);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2753);
			match(UNDERLINED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Erase_toContext extends ParserRuleContext {
		public TerminalNode ERASE() { return getToken(cobolParser.ERASE, 0); }
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Erase_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_erase_to; }
	}

	public final Erase_toContext erase_to() throws RecognitionException {
		Erase_toContext _localctx = new Erase_toContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_erase_to);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2755);
			match(ERASE);
			setState(2763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==END || _la==TO) {
				{
				setState(2757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2756);
					match(TO);
					}
				}

				setState(2759);
				match(END);
				setState(2761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(2760);
					match(OF);
					}
				}

				}
			}

			setState(2765);
			_la = _input.LA(1);
			if ( !(_la==LINE || _la==SCREEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_line_numberContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public At_line_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_line_number; }
	}

	public final At_line_numberContext at_line_number() throws RecognitionException {
		At_line_numberContext _localctx = new At_line_numberContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_at_line_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2767);
				match(AT);
				}
			}

			setState(2770);
			match(LINE);
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2771);
				match(NUMBER);
				}
			}

			setState(2774);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_column_numberContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public At_column_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_column_number; }
	}

	public final At_column_numberContext at_column_number() throws RecognitionException {
		At_column_numberContext _localctx = new At_column_numberContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_at_column_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(2776);
				match(AT);
				}
			}

			setState(2779);
			match(COLUMN);
			setState(2781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(2780);
				match(NUMBER);
				}
			}

			setState(2783);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_destContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Out_destContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_dest; }
	}

	public final Out_destContext out_dest() throws RecognitionException {
		Out_destContext _localctx = new Out_destContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_out_dest);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2785);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(cobolParser.DELETE, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Invalid_key_variantsContext invalid_key_variants() {
			return getRuleContext(Invalid_key_variantsContext.class,0);
		}
		public TerminalNode END_DELETE() { return getToken(cobolParser.END_DELETE, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_delete_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			match(DELETE);
			setState(2788);
			file_name();
			setState(2790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(2789);
				match(RECORD);
				}
				break;
			}
			setState(2793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(2792);
				invalid_key_variants();
				}
				break;
			}
			setState(2796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(2795);
				match(END_DELETE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(cobolParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compute_statementContext extends ParserRuleContext {
		public TerminalNode COMPUTE() { return getToken(cobolParser.COMPUTE, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_COMPUTE() { return getToken(cobolParser.END_COMPUTE, 0); }
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Compute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compute_statement; }
	}

	public final Compute_statementContext compute_statement() throws RecognitionException {
		Compute_statementContext _localctx = new Compute_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_compute_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2800);
			match(COMPUTE);
			setState(2805); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2801);
				identifier_result();
				setState(2803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2802);
					match(ROUNDED);
					}
				}

				}
				}
				setState(2807); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(2809);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==EQUAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2810);
			arithmetic_expression(0);
			setState(2812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				setState(2811);
				on_size_variants();
				}
				break;
			}
			setState(2815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(2814);
				match(END_COMPUTE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(cobolParser.CLOSE, 0); }
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public List<Close_paramsContext> close_params() {
			return getRuleContexts(Close_paramsContext.class);
		}
		public Close_paramsContext close_params(int i) {
			return getRuleContext(Close_paramsContext.class,i);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_close_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2817);
			match(CLOSE);
			setState(2822); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2818);
				file_name();
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK || _la==NO || _la==REEL || _la==UNIT || _la==WITH) {
					{
					setState(2819);
					close_params();
					}
				}

				}
				}
				setState(2824); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_paramsContext extends ParserRuleContext {
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode REMOVAL() { return getToken(cobolParser.REMOVAL, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode REWIND() { return getToken(cobolParser.REWIND, 0); }
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public Close_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_params; }
	}

	public final Close_paramsContext close_params() throws RecognitionException {
		Close_paramsContext _localctx = new Close_paramsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_close_params);
		int _la;
		try {
			setState(2846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2826);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2836);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
				case REMOVAL:
					{
					setState(2828);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(2827);
						match(FOR);
						}
					}

					setState(2830);
					match(REMOVAL);
					}
					break;
				case NO:
				case WITH:
					{
					setState(2832);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2831);
						match(WITH);
						}
					}

					setState(2834);
					match(NO);
					setState(2835);
					match(REWIND);
					}
					break;
				case ACCEPT:
				case ADD:
				case ALTER:
				case AT:
				case CALL:
				case CANCEL:
				case CLOSE:
				case COMPUTE:
				case CONTINUE:
				case DELETE:
				case DISPLAY:
				case DIVIDE:
				case ELSE:
				case END:
				case END_ACCEPT:
				case END_ADD:
				case END_CALL:
				case END_COMPUTE:
				case END_DELETE:
				case END_DISPLAY:
				case END_DIVIDE:
				case END_EVALUATE:
				case END_IF:
				case END_MULTIPLY:
				case END_OF_PAGE:
				case END_PERFORM:
				case END_READ:
				case END_RETURN:
				case END_REWRITE:
				case END_SEARCH:
				case END_START:
				case END_STRING:
				case END_SUBTRACT:
				case END_UNSTRING:
				case END_WRITE:
				case EOP:
				case EVALUATE:
				case EXCEPTION:
				case EXIT:
				case GENERATE:
				case GO:
				case IF:
				case INITIALIZE:
				case INITIATE:
				case INSPECT:
				case INVALID:
				case MERGE:
				case MOVE:
				case MULTIPLY:
				case NOT:
				case ON:
				case OPEN:
				case OVERFLOW:
				case PERFORM:
				case READ:
				case RECORD:
				case RELEASE:
				case RETURN:
				case REWRITE:
				case SEARCH:
				case SET:
				case SIZE:
				case SORT:
				case START:
				case STOP:
				case STRING:
				case SUBTRACT:
				case SUPPRESS:
				case TERMINATE:
				case UNLOCK:
				case UNSTRING:
				case WHEN:
				case WRITE:
				case EXEC:
				case DOT_:
				case USER_DEFINED_WORD_:
					break;
				default:
					break;
				}
				}
				break;
			case LOCK:
			case NO:
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2838);
					match(WITH);
					}
				}

				setState(2844);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NO:
					{
					setState(2841);
					match(NO);
					setState(2842);
					match(REWIND);
					}
					break;
				case LOCK:
					{
					setState(2843);
					match(LOCK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cancel_statementContext extends ParserRuleContext {
		public TerminalNode CANCEL() { return getToken(cobolParser.CANCEL, 0); }
		public List<Prog_nameContext> prog_name() {
			return getRuleContexts(Prog_nameContext.class);
		}
		public Prog_nameContext prog_name(int i) {
			return getRuleContext(Prog_nameContext.class,i);
		}
		public Cancel_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cancel_statement; }
	}

	public final Cancel_statementContext cancel_statement() throws RecognitionException {
		Cancel_statementContext _localctx = new Cancel_statementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_cancel_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2848);
			match(CANCEL);
			setState(2850); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2849);
				prog_name();
				}
				}
				setState(2852); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_statementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(cobolParser.CALL, 0); }
		public Prog_nameContext prog_name() {
			return getRuleContext(Prog_nameContext.class,0);
		}
		public Call_usingContext call_using() {
			return getRuleContext(Call_usingContext.class,0);
		}
		public Call_givingContext call_giving() {
			return getRuleContext(Call_givingContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_CALL() { return getToken(cobolParser.END_CALL, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_statement; }
	}

	public final Call_statementContext call_statement() throws RecognitionException {
		Call_statementContext _localctx = new Call_statementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_call_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			match(CALL);
			setState(2855);
			prog_name();
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2856);
				call_using();
				}
			}

			setState(2860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GIVING) {
				{
				setState(2859);
				call_giving();
				}
			}

			setState(2863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(2862);
				on_exception_variants();
				}
				break;
			}
			setState(2866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(2865);
				match(END_CALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_givingContext extends ParserRuleContext {
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Call_givingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_giving; }
	}

	public final Call_givingContext call_giving() throws RecognitionException {
		Call_givingContext _localctx = new Call_givingContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_call_giving);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2868);
			match(GIVING);
			setState(2869);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public List<Using_argContext> using_arg() {
			return getRuleContexts(Using_argContext.class);
		}
		public Using_argContext using_arg(int i) {
			return getRuleContext(Using_argContext.class,i);
		}
		public Call_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_using; }
	}

	public final Call_usingContext call_using() throws RecognitionException {
		Call_usingContext _localctx = new Call_usingContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_call_using);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			match(USING);
			setState(2873); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2872);
				using_arg();
				}
				}
				setState(2875); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==BY || _la==CONTENT || _la==DESCRIPTOR || _la==OMITTED || _la==REFERENCE || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (VALUE - 409)) | (1L << (INTEGER_LITERAL_ - 409)) | (1L << (HEX_LITERAL_ - 409)) | (1L << (USER_DEFINED_WORD_ - 409)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_argContext extends ParserRuleContext {
		public TerminalNode OMITTED() { return getToken(cobolParser.OMITTED, 0); }
		public Using_prefixContext using_prefix() {
			return getRuleContext(Using_prefixContext.class,0);
		}
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Using_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_arg; }
	}

	public final Using_argContext using_arg() throws RecognitionException {
		Using_argContext _localctx = new Using_argContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_using_arg);
		int _la;
		try {
			int _alt;
			setState(2886);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OMITTED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2877);
				match(OMITTED);
				}
				break;
			case STRING_LITERAL_:
			case BY:
			case CONTENT:
			case DESCRIPTOR:
			case REFERENCE:
			case VALUE:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY || _la==CONTENT || _la==DESCRIPTOR || _la==REFERENCE || _la==VALUE) {
					{
					setState(2878);
					using_prefix();
					}
				}

				setState(2882); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2881);
						argument();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2884); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_prefixContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public TerminalNode CONTENT() { return getToken(cobolParser.CONTENT, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(cobolParser.DESCRIPTOR, 0); }
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Using_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_prefix; }
	}

	public final Using_prefixContext using_prefix() throws RecognitionException {
		Using_prefixContext _localctx = new Using_prefixContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_using_prefix);
		int _la;
		try {
			setState(2904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2888);
					match(BY);
					}
				}

				setState(2891);
				match(REFERENCE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2892);
					match(BY);
					}
				}

				setState(2895);
				match(CONTENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2896);
					match(BY);
					}
				}

				setState(2899);
				match(DESCRIPTOR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2900);
					match(BY);
					}
				}

				setState(2903);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_argument);
		int _la;
		try {
			setState(2909);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2906);
				identifier_result();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2907);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2908);
				match(STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prog_nameContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Prog_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prog_name; }
	}

	public final Prog_nameContext prog_name() throws RecognitionException {
		Prog_nameContext _localctx = new Prog_nameContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_prog_name);
		try {
			setState(2913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2911);
				identifier_result();
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2912);
				match(STRING_LITERAL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_statementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(cobolParser.ALTER, 0); }
		public List<Proc_nameContext> proc_name() {
			return getRuleContexts(Proc_nameContext.class);
		}
		public Proc_nameContext proc_name(int i) {
			return getRuleContext(Proc_nameContext.class,i);
		}
		public List<TerminalNode> TO() { return getTokens(cobolParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(cobolParser.TO, i);
		}
		public List<TerminalNode> PROCEED() { return getTokens(cobolParser.PROCEED); }
		public TerminalNode PROCEED(int i) {
			return getToken(cobolParser.PROCEED, i);
		}
		public Alter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statement; }
	}

	public final Alter_statementContext alter_statement() throws RecognitionException {
		Alter_statementContext _localctx = new Alter_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_alter_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2915);
			match(ALTER);
			setState(2924); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2916);
				proc_name();
				setState(2917);
				match(TO);
				setState(2920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEED) {
					{
					setState(2918);
					match(PROCEED);
					setState(2919);
					match(TO);
					}
				}

				setState(2922);
				proc_name();
				}
				}
				setState(2926); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_statementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(cobolParser.ADD, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode GIVING() { return getToken(cobolParser.GIVING, 0); }
		public List<Add_grpContext> add_grp() {
			return getRuleContexts(Add_grpContext.class);
		}
		public Add_grpContext add_grp(int i) {
			return getRuleContext(Add_grpContext.class,i);
		}
		public TerminalNode CORR() { return getToken(cobolParser.CORR, 0); }
		public TerminalNode CORRESPONDING() { return getToken(cobolParser.CORRESPONDING, 0); }
		public On_size_variantsContext on_size_variants() {
			return getRuleContext(On_size_variantsContext.class,0);
		}
		public TerminalNode END_ADD() { return getToken(cobolParser.END_ADD, 0); }
		public List<Add_numContext> add_num() {
			return getRuleContexts(Add_numContext.class);
		}
		public Add_numContext add_num(int i) {
			return getRuleContext(Add_numContext.class,i);
		}
		public List<Identifier_resultContext> identifier_result() {
			return getRuleContexts(Identifier_resultContext.class);
		}
		public Identifier_resultContext identifier_result(int i) {
			return getRuleContext(Identifier_resultContext.class,i);
		}
		public List<TerminalNode> ROUNDED() { return getTokens(cobolParser.ROUNDED); }
		public TerminalNode ROUNDED(int i) {
			return getToken(cobolParser.ROUNDED, i);
		}
		public Add_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_statement; }
	}

	public final Add_statementContext add_statement() throws RecognitionException {
		Add_statementContext _localctx = new Add_statementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_add_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(2928);
				match(ADD);
				setState(2930); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2929);
					add_num();
					}
					}
					setState(2932); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)) | (1L << (USER_DEFINED_WORD_ - 452)))) != 0) );
				setState(2934);
				match(TO);
				setState(2939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2935);
					identifier_result();
					setState(2937);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROUNDED) {
						{
						setState(2936);
						match(ROUNDED);
						}
					}

					}
					}
					setState(2941); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case 2:
				{
				setState(2943);
				match(ADD);
				setState(2947);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2944);
						add_num();
						}
						} 
					}
					setState(2949);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
				}
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2950);
					match(TO);
					}
				}

				setState(2954); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2953);
					add_num();
					}
					}
					setState(2956); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FUNCTION || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)) | (1L << (USER_DEFINED_WORD_ - 452)))) != 0) );
				setState(2958);
				match(GIVING);
				setState(2963); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2959);
					identifier_result();
					setState(2961);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ROUNDED) {
						{
						setState(2960);
						match(ROUNDED);
						}
					}

					}
					}
					setState(2965); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case 3:
				{
				setState(2967);
				match(ADD);
				setState(2968);
				_la = _input.LA(1);
				if ( !(_la==CORR || _la==CORRESPONDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2969);
				add_grp();
				setState(2970);
				match(TO);
				setState(2971);
				add_grp();
				setState(2973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUNDED) {
					{
					setState(2972);
					match(ROUNDED);
					}
				}

				}
				break;
			}
			setState(2978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(2977);
				on_size_variants();
				}
				break;
			}
			setState(2981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(2980);
				match(END_ADD);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_grpContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Add_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_grp; }
	}

	public final Add_grpContext add_grp() throws RecognitionException {
		Add_grpContext _localctx = new Add_grpContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_add_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_numContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Add_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_num; }
	}

	public final Add_numContext add_num() throws RecognitionException {
		Add_numContext _localctx = new Add_numContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_add_num);
		int _la;
		try {
			setState(2987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2985);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2986);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_statementContext extends ParserRuleContext {
		public Accept_form1Context accept_form1() {
			return getRuleContext(Accept_form1Context.class,0);
		}
		public Accept_form2Context accept_form2() {
			return getRuleContext(Accept_form2Context.class,0);
		}
		public Accept_form3Context accept_form3() {
			return getRuleContext(Accept_form3Context.class,0);
		}
		public Accept_form4Context accept_form4() {
			return getRuleContext(Accept_form4Context.class,0);
		}
		public Accept_form5Context accept_form5() {
			return getRuleContext(Accept_form5Context.class,0);
		}
		public Accept_form6Context accept_form6() {
			return getRuleContext(Accept_form6Context.class,0);
		}
		public Accept_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_statement; }
	}

	public final Accept_statementContext accept_statement() throws RecognitionException {
		Accept_statementContext _localctx = new Accept_statementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_accept_statement);
		try {
			setState(2995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2989);
				accept_form1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2990);
				accept_form2();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2991);
				accept_form3();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2992);
				accept_form4();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2993);
				accept_form5();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2994);
				accept_form6();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_exception_variantsContext extends ParserRuleContext {
		public List<On_exceptionContext> on_exception() {
			return getRuleContexts(On_exceptionContext.class);
		}
		public On_exceptionContext on_exception(int i) {
			return getRuleContext(On_exceptionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_exception_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_exception_variants; }
	}

	public final On_exception_variantsContext on_exception_variants() throws RecognitionException {
		On_exception_variantsContext _localctx = new On_exception_variantsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_on_exception_variants);
		try {
			setState(3007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPTION:
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997);
				on_exception();
				setState(3000);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(2998);
					match(NOT);
					setState(2999);
					on_exception();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3002);
				match(NOT);
				setState(3003);
				on_exception();
				setState(3005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(3004);
					on_exception();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_end_variantsContext extends ParserRuleContext {
		public List<At_endContext> at_end() {
			return getRuleContexts(At_endContext.class);
		}
		public At_endContext at_end(int i) {
			return getRuleContext(At_endContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public At_end_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_end_variants; }
	}

	public final At_end_variantsContext at_end_variants() throws RecognitionException {
		At_end_variantsContext _localctx = new At_end_variantsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_at_end_variants);
		try {
			setState(3019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
			case END:
				enterOuterAlt(_localctx, 1);
				{
				setState(3009);
				at_end();
				setState(3012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(3010);
					match(NOT);
					setState(3011);
					at_end();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3014);
				match(NOT);
				setState(3015);
				at_end();
				setState(3017);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3016);
					at_end();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_size_variantsContext extends ParserRuleContext {
		public List<On_sizeContext> on_size() {
			return getRuleContexts(On_sizeContext.class);
		}
		public On_sizeContext on_size(int i) {
			return getRuleContext(On_sizeContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_size_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_size_variants; }
	}

	public final On_size_variantsContext on_size_variants() throws RecognitionException {
		On_size_variantsContext _localctx = new On_size_variantsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_on_size_variants);
		try {
			setState(3031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
			case SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3021);
				on_size();
				setState(3024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(3022);
					match(NOT);
					setState(3023);
					on_size();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3026);
				match(NOT);
				setState(3027);
				on_size();
				setState(3029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3028);
					on_size();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_overflow_variantsContext extends ParserRuleContext {
		public List<On_overflowContext> on_overflow() {
			return getRuleContexts(On_overflowContext.class);
		}
		public On_overflowContext on_overflow(int i) {
			return getRuleContext(On_overflowContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public On_overflow_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_overflow_variants; }
	}

	public final On_overflow_variantsContext on_overflow_variants() throws RecognitionException {
		On_overflow_variantsContext _localctx = new On_overflow_variantsContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_on_overflow_variants);
		try {
			setState(3043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
			case OVERFLOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				on_overflow();
				setState(3036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3034);
					match(NOT);
					setState(3035);
					on_overflow();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3038);
				match(NOT);
				setState(3039);
				on_overflow();
				setState(3041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(3040);
					on_overflow();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_eop_variantsContext extends ParserRuleContext {
		public List<At_eopContext> at_eop() {
			return getRuleContexts(At_eopContext.class);
		}
		public At_eopContext at_eop(int i) {
			return getRuleContext(At_eopContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public At_eop_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_eop_variants; }
	}

	public final At_eop_variantsContext at_eop_variants() throws RecognitionException {
		At_eop_variantsContext _localctx = new At_eop_variantsContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_at_eop_variants);
		try {
			setState(3055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
			case END_OF_PAGE:
			case EOP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3045);
				at_eop();
				setState(3048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(3046);
					match(NOT);
					setState(3047);
					at_eop();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3050);
				match(NOT);
				setState(3051);
				at_eop();
				setState(3053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(3052);
					at_eop();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invalid_key_variantsContext extends ParserRuleContext {
		public List<Invalid_keyContext> invalid_key() {
			return getRuleContexts(Invalid_keyContext.class);
		}
		public Invalid_keyContext invalid_key(int i) {
			return getRuleContext(Invalid_keyContext.class,i);
		}
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public Invalid_key_variantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invalid_key_variants; }
	}

	public final Invalid_key_variantsContext invalid_key_variants() throws RecognitionException {
		Invalid_key_variantsContext _localctx = new Invalid_key_variantsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_invalid_key_variants);
		try {
			setState(3067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3057);
				invalid_key();
				setState(3060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3058);
					match(NOT);
					setState(3059);
					invalid_key();
					}
					break;
				}
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3062);
				match(NOT);
				setState(3063);
				invalid_key();
				setState(3065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3064);
					invalid_key();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form6Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public Arg_env_acceptContext arg_env_accept() {
			return getRuleContext(Arg_env_acceptContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form6Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form6; }
	}

	public final Accept_form6Context accept_form6() throws RecognitionException {
		Accept_form6Context _localctx = new Accept_form6Context(_ctx, getState());
		enterRule(_localctx, 422, RULE_accept_form6);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(ACCEPT);
			setState(3070);
			dest_item();
			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3071);
				match(FROM);
				}
			}

			setState(3074);
			arg_env_accept();
			setState(3076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3075);
				on_exception_variants();
				}
				break;
			}
			setState(3079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3078);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_env_acceptContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Arg_env_acceptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_env_accept; }
	}

	public final Arg_env_acceptContext arg_env_accept() throws RecognitionException {
		Arg_env_acceptContext _localctx = new Arg_env_acceptContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_arg_env_accept);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3081);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form1Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Input_sourceContext input_source() {
			return getRuleContext(Input_sourceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode CONVERSION() { return getToken(cobolParser.CONVERSION, 0); }
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form1; }
	}

	public final Accept_form1Context accept_form1() throws RecognitionException {
		Accept_form1Context _localctx = new Accept_form1Context(_ctx, getState());
		enterRule(_localctx, 426, RULE_accept_form1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3083);
			match(ACCEPT);
			setState(3084);
			dest_item();
			setState(3087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3085);
				match(FROM);
				setState(3086);
				input_source();
				}
			}

			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3089);
				match(WITH);
				setState(3090);
				match(CONVERSION);
				}
			}

			setState(3094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3093);
				at_end_variants();
				}
				break;
			}
			setState(3097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3096);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form2Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Date_timeContext date_time() {
			return getRuleContext(Date_timeContext.class,0);
		}
		public Accept_form2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form2; }
	}

	public final Accept_form2Context accept_form2() throws RecognitionException {
		Accept_form2Context _localctx = new Accept_form2Context(_ctx, getState());
		enterRule(_localctx, 428, RULE_accept_form2);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			match(ACCEPT);
			setState(3100);
			dest_item();
			setState(3101);
			match(FROM);
			setState(3102);
			date_time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form3Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Dest_itemContext dest_item() {
			return getRuleContext(Dest_itemContext.class,0);
		}
		public List<Accept_form3_clauseContext> accept_form3_clause() {
			return getRuleContexts(Accept_form3_clauseContext.class);
		}
		public Accept_form3_clauseContext accept_form3_clause(int i) {
			return getRuleContext(Accept_form3_clauseContext.class,i);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form3; }
	}

	public final Accept_form3Context accept_form3() throws RecognitionException {
		Accept_form3Context _localctx = new Accept_form3Context(_ctx, getState());
		enterRule(_localctx, 430, RULE_accept_form3);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3104);
			match(ACCEPT);
			setState(3105);
			dest_item();
			setState(3107); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3106);
				accept_form3_clause();
				}
				}
				setState(3109); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BELL) | (1L << BLINKING) | (1L << BOLD))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (COLUMN - 65)) | (1L << (CONTROL - 65)) | (1L << (CONVERSION - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ERASE - 163)) | (1L << (FROM - 163)) | (1L << (KEY - 163)))) != 0) || _la==LINE || _la==NO || _la==PROTECTED || _la==REVERSED || _la==UNDERLINED || _la==WITH );
			setState(3113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3111);
				on_exception_variants();
				}
				break;
			case 2:
				{
				setState(3112);
				at_end_variants();
				}
				break;
			}
			setState(3116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3115);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form4Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_dest_itemContext key_dest_item() {
			return getRuleContext(Key_dest_itemContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public List<Accept_form4_clauseContext> accept_form4_clause() {
			return getRuleContexts(Accept_form4_clauseContext.class);
		}
		public Accept_form4_clauseContext accept_form4_clause(int i) {
			return getRuleContext(Accept_form4_clauseContext.class,i);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public At_end_variantsContext at_end_variants() {
			return getRuleContext(At_end_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form4; }
	}

	public final Accept_form4Context accept_form4() throws RecognitionException {
		Accept_form4Context _localctx = new Accept_form4Context(_ctx, getState());
		enterRule(_localctx, 432, RULE_accept_form4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3118);
			match(ACCEPT);
			setState(3120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTROL) {
				{
				setState(3119);
				match(CONTROL);
				}
			}

			setState(3122);
			match(KEY);
			setState(3124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3123);
				match(IN);
				}
			}

			setState(3126);
			key_dest_item();
			setState(3128); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3127);
				accept_form4_clause();
				}
				}
				setState(3130); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BELL || _la==COLUMN || _la==ERASE || _la==FROM || _la==LINE || _la==WITH );
			setState(3134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3132);
				on_exception_variants();
				}
				break;
			case 2:
				{
				setState(3133);
				at_end_variants();
				}
				break;
			}
			setState(3137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				setState(3136);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form5Context extends ParserRuleContext {
		public TerminalNode ACCEPT() { return getToken(cobolParser.ACCEPT, 0); }
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public Accept_atContext accept_at() {
			return getRuleContext(Accept_atContext.class,0);
		}
		public On_exception_variantsContext on_exception_variants() {
			return getRuleContext(On_exception_variantsContext.class,0);
		}
		public TerminalNode END_ACCEPT() { return getToken(cobolParser.END_ACCEPT, 0); }
		public Accept_form5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form5; }
	}

	public final Accept_form5Context accept_form5() throws RecognitionException {
		Accept_form5Context _localctx = new Accept_form5Context(_ctx, getState());
		enterRule(_localctx, 434, RULE_accept_form5);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139);
			match(ACCEPT);
			setState(3140);
			data_name();
			setState(3142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3141);
				accept_at();
				}
				break;
			}
			setState(3145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3144);
				on_exception_variants();
				}
				break;
			}
			setState(3148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3147);
				match(END_ACCEPT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_atContext extends ParserRuleContext {
		public Accept_at_lineContext accept_at_line() {
			return getRuleContext(Accept_at_lineContext.class,0);
		}
		public Accept_at_columnContext accept_at_column() {
			return getRuleContext(Accept_at_columnContext.class,0);
		}
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public Accept_atContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at; }
	}

	public final Accept_atContext accept_at() throws RecognitionException {
		Accept_atContext _localctx = new Accept_atContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_accept_at);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3150);
				match(AT);
				}
			}

			setState(3161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LINE:
				{
				setState(3153);
				accept_at_line();
				setState(3155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(3154);
					accept_at_column();
					}
				}

				}
				break;
			case COLUMN:
				{
				setState(3157);
				accept_at_column();
				setState(3159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINE) {
					{
					setState(3158);
					accept_at_line();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_at_lineContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Accept_at_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at_line; }
	}

	public final Accept_at_lineContext accept_at_line() throws RecognitionException {
		Accept_at_lineContext _localctx = new Accept_at_lineContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_accept_at_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163);
			match(LINE);
			setState(3165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3164);
				match(NUMBER);
				}
			}

			setState(3169);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(3167);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(3168);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_at_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Accept_at_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_at_column; }
	}

	public final Accept_at_columnContext accept_at_column() throws RecognitionException {
		Accept_at_columnContext _localctx = new Accept_at_columnContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_accept_at_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3171);
			match(COLUMN);
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3172);
				match(NUMBER);
				}
			}

			setState(3177);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(3175);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(3176);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form4_clauseContext extends ParserRuleContext {
		public From_line_numberContext from_line_number() {
			return getRuleContext(From_line_numberContext.class,0);
		}
		public From_column_numberContext from_column_number() {
			return getRuleContext(From_column_numberContext.class,0);
		}
		public Erase_toContext erase_to() {
			return getRuleContext(Erase_toContext.class,0);
		}
		public With_bellContext with_bell() {
			return getRuleContext(With_bellContext.class,0);
		}
		public Accept_form4_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form4_clause; }
	}

	public final Accept_form4_clauseContext accept_form4_clause() throws RecognitionException {
		Accept_form4_clauseContext _localctx = new Accept_form4_clauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_accept_form4_clause);
		try {
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3179);
				from_line_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3180);
				from_column_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3181);
				erase_to();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3182);
				with_bell();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_column_numberContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public From_column_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_column_number; }
	}

	public final From_column_numberContext from_column_number() throws RecognitionException {
		From_column_numberContext _localctx = new From_column_numberContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_from_column_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3185);
				match(FROM);
				}
			}

			setState(3188);
			match(COLUMN);
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3189);
				match(NUMBER);
				}
			}

			setState(3192);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_line_numberContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Number_valueContext number_value() {
			return getRuleContext(Number_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public From_line_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_line_number; }
	}

	public final From_line_numberContext from_line_number() throws RecognitionException {
		From_line_numberContext _localctx = new From_line_numberContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_from_line_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3194);
				match(FROM);
				}
			}

			setState(3197);
			match(LINE);
			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3198);
				match(NUMBER);
				}
			}

			setState(3201);
			number_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Accept_form3_clauseContext extends ParserRuleContext {
		public Accept_form4_clauseContext accept_form4_clause() {
			return getRuleContext(Accept_form4_clauseContext.class,0);
		}
		public UnderlinedContext underlined() {
			return getRuleContext(UnderlinedContext.class,0);
		}
		public BoldContext bold() {
			return getRuleContext(BoldContext.class,0);
		}
		public With_blinkingContext with_blinking() {
			return getRuleContext(With_blinkingContext.class,0);
		}
		public Protected_clauseContext protected_clause() {
			return getRuleContext(Protected_clauseContext.class,0);
		}
		public With_conversionContext with_conversion() {
			return getRuleContext(With_conversionContext.class,0);
		}
		public ReversedContext reversed() {
			return getRuleContext(ReversedContext.class,0);
		}
		public With_no_echoContext with_no_echo() {
			return getRuleContext(With_no_echoContext.class,0);
		}
		public Default_isContext default_is() {
			return getRuleContext(Default_isContext.class,0);
		}
		public Control_key_inContext control_key_in() {
			return getRuleContext(Control_key_inContext.class,0);
		}
		public Accept_form3_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accept_form3_clause; }
	}

	public final Accept_form3_clauseContext accept_form3_clause() throws RecognitionException {
		Accept_form3_clauseContext _localctx = new Accept_form3_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_accept_form3_clause);
		try {
			setState(3213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3203);
				accept_form4_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3204);
				underlined();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3205);
				bold();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3206);
				with_blinking();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3207);
				protected_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3208);
				with_conversion();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3209);
				reversed();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3210);
				with_no_echo();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3211);
				default_is();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3212);
				control_key_in();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protected_clauseContext extends ParserRuleContext {
		public TerminalNode PROTECTED() { return getToken(cobolParser.PROTECTED, 0); }
		public List<Protected_valueContext> protected_value() {
			return getRuleContexts(Protected_valueContext.class);
		}
		public Protected_valueContext protected_value(int i) {
			return getRuleContext(Protected_valueContext.class,i);
		}
		public Protected_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protected_clause; }
	}

	public final Protected_clauseContext protected_clause() throws RecognitionException {
		Protected_clauseContext _localctx = new Protected_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_protected_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3215);
			match(PROTECTED);
			setState(3219);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3216);
					protected_value();
					}
					} 
				}
				setState(3221);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_key_inContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Key_dest_itemContext key_dest_item() {
			return getRuleContext(Key_dest_itemContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Control_key_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_key_in; }
	}

	public final Control_key_inContext control_key_in() throws RecognitionException {
		Control_key_inContext _localctx = new Control_key_inContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_control_key_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTROL) {
				{
				setState(3222);
				match(CONTROL);
				}
			}

			setState(3225);
			match(KEY);
			setState(3227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3226);
				match(IN);
				}
			}

			setState(3229);
			key_dest_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_isContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(cobolParser.DEFAULT, 0); }
		public Def_valueContext def_value() {
			return getRuleContext(Def_valueContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Default_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_is; }
	}

	public final Default_isContext default_is() throws RecognitionException {
		Default_isContext _localctx = new Default_isContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_default_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3231);
			match(DEFAULT);
			setState(3233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3232);
				match(IS);
				}
			}

			setState(3235);
			def_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_no_echoContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode ECHO() { return getToken(cobolParser.ECHO, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_no_echoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_no_echo; }
	}

	public final With_no_echoContext with_no_echo() throws RecognitionException {
		With_no_echoContext _localctx = new With_no_echoContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_with_no_echo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3237);
				match(WITH);
				}
			}

			setState(3240);
			match(NO);
			setState(3241);
			match(ECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_dest_itemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Key_dest_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_dest_item; }
	}

	public final Key_dest_itemContext key_dest_item() throws RecognitionException {
		Key_dest_itemContext _localctx = new Key_dest_itemContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_key_dest_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Def_valueContext extends ParserRuleContext {
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(cobolParser.CURRENT, 0); }
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Def_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_def_value; }
	}

	public final Def_valueContext def_value() throws RecognitionException {
		Def_valueContext _localctx = new Def_valueContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_def_value);
		int _la;
		try {
			setState(3252);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3245);
				figurative_constant();
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3246);
				match(STRING_LITERAL_);
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3247);
				identifier();
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3248);
				match(CURRENT);
				setState(3250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(3249);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protected_valueContext extends ParserRuleContext {
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public Prot_size_valueContext prot_size_value() {
			return getRuleContext(Prot_size_valueContext.class,0);
		}
		public TerminalNode AUTOTERMINATE() { return getToken(cobolParser.AUTOTERMINATE, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode NO() { return getToken(cobolParser.NO, 0); }
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode EDITING() { return getToken(cobolParser.EDITING, 0); }
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public Prot_fill_litContext prot_fill_lit() {
			return getRuleContext(Prot_fill_litContext.class,0);
		}
		public Protected_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protected_value; }
	}

	public final Protected_valueContext protected_value() throws RecognitionException {
		Protected_valueContext _localctx = new Protected_valueContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_protected_value);
		int _la;
		try {
			setState(3274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3254);
				match(SIZE);
				setState(3255);
				prot_size_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3256);
					match(WITH);
					}
				}

				setState(3259);
				match(AUTOTERMINATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3260);
					match(WITH);
					}
				}

				setState(3263);
				match(NO);
				setState(3264);
				match(BLANK);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3265);
					match(WITH);
					}
				}

				setState(3268);
				match(EDITING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3269);
					match(WITH);
					}
				}

				setState(3272);
				match(FILLER);
				setState(3273);
				prot_fill_lit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prot_fill_litContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Prot_fill_litContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prot_fill_lit; }
	}

	public final Prot_fill_litContext prot_fill_lit() throws RecognitionException {
		Prot_fill_litContext _localctx = new Prot_fill_litContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_prot_fill_lit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prot_size_valueContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Prot_size_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prot_size_value; }
	}

	public final Prot_size_valueContext prot_size_value() throws RecognitionException {
		Prot_size_valueContext _localctx = new Prot_size_valueContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_prot_size_value);
		int _la;
		try {
			setState(3280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3278);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3279);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Number_valueContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Number_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number_value; }
	}

	public final Number_valueContext number_value() throws RecognitionException {
		Number_valueContext _localctx = new Number_valueContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_number_value);
		int _la;
		try {
			setState(3294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3282);
				line_num();
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3283);
				identifier();
				setState(3288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS) {
					{
					setState(3284);
					match(PLUS);
					setState(3286);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
					case 1:
						{
						setState(3285);
						line_num();
						}
						break;
					}
					}
				}

				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3290);
				match(PLUS);
				setState(3292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(3291);
					line_num();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_timeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(cobolParser.DATE, 0); }
		public TerminalNode YYYYMMDD() { return getToken(cobolParser.YYYYMMDD, 0); }
		public TerminalNode DAY() { return getToken(cobolParser.DAY, 0); }
		public TerminalNode YYYYDDD() { return getToken(cobolParser.YYYYDDD, 0); }
		public TerminalNode DAY_OF_WEEK() { return getToken(cobolParser.DAY_OF_WEEK, 0); }
		public TerminalNode TIME() { return getToken(cobolParser.TIME, 0); }
		public Date_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_time; }
	}

	public final Date_timeContext date_time() throws RecognitionException {
		Date_timeContext _localctx = new Date_timeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_date_time);
		int _la;
		try {
			setState(3306);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3296);
				match(DATE);
				setState(3298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==YYYYMMDD) {
					{
					setState(3297);
					match(YYYYMMDD);
					}
				}

				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3300);
				match(DAY);
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==YYYYDDD) {
					{
					setState(3301);
					match(YYYYDDD);
					}
				}

				}
				break;
			case DAY_OF_WEEK:
				enterOuterAlt(_localctx, 3);
				{
				setState(3304);
				match(DAY_OF_WEEK);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(3305);
				match(TIME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dest_itemContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Dest_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dest_item; }
	}

	public final Dest_itemContext dest_item() throws RecognitionException {
		Dest_itemContext _localctx = new Dest_itemContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_dest_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3308);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Input_sourceContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Input_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_input_source; }
	}

	public final Input_sourceContext input_source() throws RecognitionException {
		Input_sourceContext _localctx = new Input_sourceContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_input_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3310);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_endContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public At_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_end; }
	}

	public final At_endContext at_end() throws RecognitionException {
		At_endContext _localctx = new At_endContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_at_end);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3312);
				match(AT);
				}
			}

			setState(3315);
			match(END);
			setState(3320);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3318);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3316);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3317);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3322);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_exceptionContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(cobolParser.EXCEPTION, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public On_exceptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_exception; }
	}

	public final On_exceptionContext on_exception() throws RecognitionException {
		On_exceptionContext _localctx = new On_exceptionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_on_exception);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3323);
				match(ON);
				}
			}

			setState(3326);
			match(EXCEPTION);
			setState(3331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3329);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3327);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3328);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_sizeContext extends ParserRuleContext {
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public TerminalNode ERROR() { return getToken(cobolParser.ERROR, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public On_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_size; }
	}

	public final On_sizeContext on_size() throws RecognitionException {
		On_sizeContext _localctx = new On_sizeContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_on_size);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3334);
				match(ON);
				}
			}

			setState(3337);
			match(SIZE);
			setState(3338);
			match(ERROR);
			setState(3343);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3341);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3339);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3340);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3345);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_overflowContext extends ParserRuleContext {
		public TerminalNode OVERFLOW() { return getToken(cobolParser.OVERFLOW, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public On_overflowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_overflow; }
	}

	public final On_overflowContext on_overflow() throws RecognitionException {
		On_overflowContext _localctx = new On_overflowContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_on_overflow);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3346);
				match(ON);
				}
			}

			setState(3349);
			match(OVERFLOW);
			setState(3354);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3352);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3350);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3351);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3356);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_eopContext extends ParserRuleContext {
		public TerminalNode END_OF_PAGE() { return getToken(cobolParser.END_OF_PAGE, 0); }
		public TerminalNode EOP() { return getToken(cobolParser.EOP, 0); }
		public TerminalNode AT() { return getToken(cobolParser.AT, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public At_eopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_eop; }
	}

	public final At_eopContext at_eop() throws RecognitionException {
		At_eopContext _localctx = new At_eopContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_at_eop);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(3357);
				match(AT);
				}
			}

			setState(3360);
			_la = _input.LA(1);
			if ( !(_la==END_OF_PAGE || _la==EOP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3365);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3363);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3361);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3362);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3367);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invalid_keyContext extends ParserRuleContext {
		public TerminalNode INVALID() { return getToken(cobolParser.INVALID, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Exec_sql_statementContext> exec_sql_statement() {
			return getRuleContexts(Exec_sql_statementContext.class);
		}
		public Exec_sql_statementContext exec_sql_statement(int i) {
			return getRuleContext(Exec_sql_statementContext.class,i);
		}
		public Invalid_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invalid_key; }
	}

	public final Invalid_keyContext invalid_key() throws RecognitionException {
		Invalid_keyContext _localctx = new Invalid_keyContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_invalid_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(INVALID);
			setState(3370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(3369);
				match(KEY);
				}
			}

			setState(3376);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,480,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3374);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ACCEPT:
					case ADD:
					case ALTER:
					case CALL:
					case CANCEL:
					case CLOSE:
					case COMPUTE:
					case CONTINUE:
					case DELETE:
					case DISPLAY:
					case DIVIDE:
					case EVALUATE:
					case EXIT:
					case GENERATE:
					case GO:
					case IF:
					case INITIALIZE:
					case INITIATE:
					case INSPECT:
					case MERGE:
					case MOVE:
					case MULTIPLY:
					case OPEN:
					case PERFORM:
					case READ:
					case RECORD:
					case RELEASE:
					case RETURN:
					case REWRITE:
					case SEARCH:
					case SET:
					case SORT:
					case START:
					case STOP:
					case STRING:
					case SUBTRACT:
					case SUPPRESS:
					case TERMINATE:
					case UNLOCK:
					case UNSTRING:
					case WRITE:
						{
						setState(3372);
						statement();
						}
						break;
					case EXEC:
						{
						setState(3373);
						exec_sql_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3378);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,480,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sectionContext extends ParserRuleContext {
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<File_descriptionContext> file_description() {
			return getRuleContexts(File_descriptionContext.class);
		}
		public File_descriptionContext file_description(int i) {
			return getRuleContext(File_descriptionContext.class,i);
		}
		public List<Sort_merge_file_descriptionContext> sort_merge_file_description() {
			return getRuleContexts(Sort_merge_file_descriptionContext.class);
		}
		public Sort_merge_file_descriptionContext sort_merge_file_description(int i) {
			return getRuleContext(Sort_merge_file_descriptionContext.class,i);
		}
		public File_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_section; }
	}

	public final File_sectionContext file_section() throws RecognitionException {
		File_sectionContext _localctx = new File_sectionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_file_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			match(FILE);
			setState(3380);
			match(SECTION);
			setState(3381);
			match(DOT_);
			setState(3385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3382);
				replace_statement();
				}
				}
				setState(3387);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FD || _la==SD) {
				{
				setState(3390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FD:
					{
					setState(3388);
					file_description();
					}
					break;
				case SD:
					{
					setState(3389);
					sort_merge_file_description();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3394);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_descriptionContext extends ParserRuleContext {
		public File_description_entryContext file_description_entry() {
			return getRuleContext(File_description_entryContext.class,0);
		}
		public List<Data_description_entryContext> data_description_entry() {
			return getRuleContexts(Data_description_entryContext.class);
		}
		public Data_description_entryContext data_description_entry(int i) {
			return getRuleContext(Data_description_entryContext.class,i);
		}
		public File_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_description; }
	}

	public final File_descriptionContext file_description() throws RecognitionException {
		File_descriptionContext _localctx = new File_descriptionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_file_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			file_description_entry();
			setState(3399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				{
				setState(3396);
				data_description_entry();
				}
				}
				setState(3401);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_merge_file_descriptionContext extends ParserRuleContext {
		public Sort_merge_file_description_entryContext sort_merge_file_description_entry() {
			return getRuleContext(Sort_merge_file_description_entryContext.class,0);
		}
		public List<Data_description_entryContext> data_description_entry() {
			return getRuleContexts(Data_description_entryContext.class);
		}
		public Data_description_entryContext data_description_entry(int i) {
			return getRuleContext(Data_description_entryContext.class,i);
		}
		public Sort_merge_file_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_merge_file_description; }
	}

	public final Sort_merge_file_descriptionContext sort_merge_file_description() throws RecognitionException {
		Sort_merge_file_descriptionContext _localctx = new Sort_merge_file_descriptionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_sort_merge_file_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3402);
			sort_merge_file_description_entry();
			setState(3406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				{
				setState(3403);
				data_description_entry();
				}
				}
				setState(3408);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Working_storage_sectionContext extends ParserRuleContext {
		public TerminalNode WORKING_STORAGE() { return getToken(cobolParser.WORKING_STORAGE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<Working_storage_entryContext> working_storage_entry() {
			return getRuleContexts(Working_storage_entryContext.class);
		}
		public Working_storage_entryContext working_storage_entry(int i) {
			return getRuleContext(Working_storage_entryContext.class,i);
		}
		public Working_storage_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_working_storage_section; }
	}

	public final Working_storage_sectionContext working_storage_section() throws RecognitionException {
		Working_storage_sectionContext _localctx = new Working_storage_sectionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_working_storage_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3409);
			match(WORKING_STORAGE);
			setState(3410);
			match(SECTION);
			setState(3411);
			match(DOT_);
			setState(3415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3412);
				replace_statement();
				}
				}
				setState(3417);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (EXEC - 425)) | (1L << (INTEGER_LITERAL_ - 425)) | (1L << (HEX_LITERAL_ - 425)))) != 0)) {
				{
				{
				setState(3418);
				working_storage_entry();
				}
				}
				setState(3423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Working_storage_entryContext extends ParserRuleContext {
		public Data_description_entryContext data_description_entry() {
			return getRuleContext(Data_description_entryContext.class,0);
		}
		public Exec_sql_statementContext exec_sql_statement() {
			return getRuleContext(Exec_sql_statementContext.class,0);
		}
		public Working_storage_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_working_storage_entry; }
	}

	public final Working_storage_entryContext working_storage_entry() throws RecognitionException {
		Working_storage_entryContext _localctx = new Working_storage_entryContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_working_storage_entry);
		try {
			setState(3426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3424);
				data_description_entry();
				}
				break;
			case EXEC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3425);
				exec_sql_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Linkage_sectionContext extends ParserRuleContext {
		public TerminalNode LINKAGE() { return getToken(cobolParser.LINKAGE, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<Data_description_entryContext> data_description_entry() {
			return getRuleContexts(Data_description_entryContext.class);
		}
		public Data_description_entryContext data_description_entry(int i) {
			return getRuleContext(Data_description_entryContext.class,i);
		}
		public Linkage_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linkage_section; }
	}

	public final Linkage_sectionContext linkage_section() throws RecognitionException {
		Linkage_sectionContext _localctx = new Linkage_sectionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_linkage_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3428);
			match(LINKAGE);
			setState(3429);
			match(SECTION);
			setState(3430);
			match(DOT_);
			setState(3434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3431);
				replace_statement();
				}
				}
				setState(3436);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				{
				setState(3437);
				data_description_entry();
				}
				}
				setState(3442);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_sectionContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<Report_descriptionContext> report_description() {
			return getRuleContexts(Report_descriptionContext.class);
		}
		public Report_descriptionContext report_description(int i) {
			return getRuleContext(Report_descriptionContext.class,i);
		}
		public Report_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_section; }
	}

	public final Report_sectionContext report_section() throws RecognitionException {
		Report_sectionContext _localctx = new Report_sectionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_report_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(REPORT);
			setState(3444);
			match(SECTION);
			setState(3445);
			match(DOT_);
			setState(3449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3446);
				replace_statement();
				}
				}
				setState(3451);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==RD) {
				{
				{
				setState(3452);
				report_description();
				}
				}
				setState(3457);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_descriptionContext extends ParserRuleContext {
		public Report_description_entryContext report_description_entry() {
			return getRuleContext(Report_description_entryContext.class,0);
		}
		public List<Report_group_data_description_entryContext> report_group_data_description_entry() {
			return getRuleContexts(Report_group_data_description_entryContext.class);
		}
		public Report_group_data_description_entryContext report_group_data_description_entry(int i) {
			return getRuleContext(Report_group_data_description_entryContext.class,i);
		}
		public Report_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_description; }
	}

	public final Report_descriptionContext report_description() throws RecognitionException {
		Report_descriptionContext _localctx = new Report_descriptionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_report_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			report_description_entry();
			setState(3462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				{
				setState(3459);
				report_group_data_description_entry();
				}
				}
				setState(3464);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_sectionContext extends ParserRuleContext {
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<Screen_description_entryContext> screen_description_entry() {
			return getRuleContexts(Screen_description_entryContext.class);
		}
		public Screen_description_entryContext screen_description_entry(int i) {
			return getRuleContext(Screen_description_entryContext.class,i);
		}
		public Screen_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_section; }
	}

	public final Screen_sectionContext screen_section() throws RecognitionException {
		Screen_sectionContext _localctx = new Screen_sectionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_screen_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			match(SCREEN);
			setState(3466);
			match(SECTION);
			setState(3467);
			match(DOT_);
			setState(3471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3468);
				replace_statement();
				}
				}
				setState(3473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
				{
				{
				setState(3474);
				screen_description_entry();
				}
				}
				setState(3479);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_description_entryContext extends ParserRuleContext {
		public TerminalNode FD() { return getToken(cobolParser.FD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Fd_clauseContext> fd_clause() {
			return getRuleContexts(Fd_clauseContext.class);
		}
		public Fd_clauseContext fd_clause(int i) {
			return getRuleContext(Fd_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public File_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_description_entry; }
	}

	public final File_description_entryContext file_description_entry() throws RecognitionException {
		File_description_entryContext _localctx = new File_description_entryContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_file_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			match(FD);
			setState(3481);
			file_name();
			setState(3485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ALTERNATE) | (1L << BLOCK) | (1L << CODE_SET))) != 0) || _la==DATA || _la==DYNAMIC || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (EXTERNAL - 172)) | (1L << (FILE - 172)) | (1L << (GLOBAL - 172)) | (1L << (IS - 172)) | (1L << (LABEL - 172)) | (1L << (LINAGE - 172)))) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & ((1L << (RANDOM - 302)) | (1L << (RECORD - 302)) | (1L << (REPORT - 302)) | (1L << (REPORTS - 302)) | (1L << (SEQUENTIAL - 302)) | (1L << (STATUS - 302)))) != 0) || _la==VALUE) {
				{
				{
				setState(3482);
				fd_clause();
				}
				}
				setState(3487);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3488);
			match(DOT_);
			setState(3492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3489);
				replace_statement();
				}
				}
				setState(3494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_merge_file_description_entryContext extends ParserRuleContext {
		public TerminalNode SD() { return getToken(cobolParser.SD, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Sd_clauseContext> sd_clause() {
			return getRuleContexts(Sd_clauseContext.class);
		}
		public Sd_clauseContext sd_clause(int i) {
			return getRuleContext(Sd_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Sort_merge_file_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_merge_file_description_entry; }
	}

	public final Sort_merge_file_description_entryContext sort_merge_file_description_entry() throws RecognitionException {
		Sort_merge_file_description_entryContext _localctx = new Sort_merge_file_description_entryContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_sort_merge_file_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3495);
			match(SD);
			setState(3496);
			file_name();
			setState(3500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DATA || _la==RECORD) {
				{
				{
				setState(3497);
				sd_clause();
				}
				}
				setState(3502);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3503);
			match(DOT_);
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3504);
				replace_statement();
				}
				}
				setState(3509);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_description_entryContext extends ParserRuleContext {
		public TerminalNode RD() { return getToken(cobolParser.RD, 0); }
		public Report_nameContext report_name() {
			return getRuleContext(Report_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Rd_clauseContext> rd_clause() {
			return getRuleContexts(Rd_clauseContext.class);
		}
		public Rd_clauseContext rd_clause(int i) {
			return getRuleContext(Rd_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Report_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_description_entry; }
	}

	public final Report_description_entryContext report_description_entry() throws RecognitionException {
		Report_description_entryContext _localctx = new Report_description_entryContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_report_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3510);
			match(RD);
			setState(3511);
			report_name();
			setState(3515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (CODE - 62)) | (1L << (CONTROL - 62)) | (1L << (CONTROLS - 62)))) != 0) || _la==GLOBAL || _la==IS || _la==PAGE) {
				{
				{
				setState(3512);
				rd_clause();
				}
				}
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3518);
			match(DOT_);
			setState(3522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3519);
				replace_statement();
				}
				}
				setState(3524);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fd_clauseContext extends ParserRuleContext {
		public Is_externalContext is_external() {
			return getRuleContext(Is_externalContext.class,0);
		}
		public Is_globalContext is_global() {
			return getRuleContext(Is_globalContext.class,0);
		}
		public Block_containsContext block_contains() {
			return getRuleContext(Block_containsContext.class,0);
		}
		public RecordContext record() {
			return getRuleContext(RecordContext.class,0);
		}
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public Value_of_idContext value_of_id() {
			return getRuleContext(Value_of_idContext.class,0);
		}
		public Data_recContext data_rec() {
			return getRuleContext(Data_recContext.class,0);
		}
		public LinageContext linage() {
			return getRuleContext(LinageContext.class,0);
		}
		public Report_isContext report_is() {
			return getRuleContext(Report_isContext.class,0);
		}
		public Code_setContext code_set() {
			return getRuleContext(Code_setContext.class,0);
		}
		public Access_modeContext access_mode() {
			return getRuleContext(Access_modeContext.class,0);
		}
		public Record_keyContext record_key() {
			return getRuleContext(Record_keyContext.class,0);
		}
		public Alt_record_keyContext alt_record_key() {
			return getRuleContext(Alt_record_keyContext.class,0);
		}
		public File_statusContext file_status() {
			return getRuleContext(File_statusContext.class,0);
		}
		public Fd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fd_clause; }
	}

	public final Fd_clauseContext fd_clause() throws RecognitionException {
		Fd_clauseContext _localctx = new Fd_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_fd_clause);
		try {
			setState(3539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3525);
				is_external();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3526);
				is_global();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3527);
				block_contains();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3528);
				record();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3529);
				label();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3530);
				value_of_id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3531);
				data_rec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3532);
				linage();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3533);
				report_is();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3534);
				code_set();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3535);
				access_mode();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3536);
				record_key();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3537);
				alt_record_key();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3538);
				file_status();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_externalContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Is_externalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_external; }
	}

	public final Is_externalContext is_external() throws RecognitionException {
		Is_externalContext _localctx = new Is_externalContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_is_external);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3541);
				match(IS);
				}
			}

			setState(3544);
			match(EXTERNAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_globalContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(cobolParser.GLOBAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Is_globalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_global; }
	}

	public final Is_globalContext is_global() throws RecognitionException {
		Is_globalContext _localctx = new Is_globalContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_is_global);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3546);
				match(IS);
				}
			}

			setState(3549);
			match(GLOBAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_description_entryContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public TerminalNode REDEFINES() { return getToken(cobolParser.REDEFINES, 0); }
		public Other_data_itemContext other_data_item() {
			return getRuleContext(Other_data_itemContext.class,0);
		}
		public List<Data_description_clauseContext> data_description_clause() {
			return getRuleContexts(Data_description_clauseContext.class);
		}
		public Data_description_clauseContext data_description_clause(int i) {
			return getRuleContext(Data_description_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Data_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_description_entry; }
	}

	public final Data_description_entryContext data_description_entry() throws RecognitionException {
		Data_description_entryContext _localctx = new Data_description_entryContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_data_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			level_number();
			setState(3554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				{
				setState(3552);
				data_name();
				}
				break;
			case FILLER:
				{
				setState(3553);
				match(FILLER);
				}
				break;
			case BINARY:
			case BINARY_CHAR:
			case BINARY_DOUBLE:
			case BINARY_LONG:
			case BINARY_SHORT:
			case BLANK:
			case COMP:
			case COMPUTATIONAL:
			case COMPUTATIONAL_1:
			case COMPUTATIONAL_2:
			case COMPUTATIONAL_3:
			case COMPUTATIONAL_4:
			case COMPUTATIONAL_5:
			case COMPUTATIONAL_X:
			case COMP_1:
			case COMP_2:
			case COMP_3:
			case COMP_4:
			case COMP_5:
			case COMP_X:
			case DISPLAY:
			case EXTERNAL:
			case FLOAT_EXTENDED:
			case FLOAT_LONG:
			case FLOAT_SHORT:
			case GLOBAL:
			case INDEX:
			case IS:
			case JUST:
			case JUSTIFIED:
			case LEADING:
			case OCCURS:
			case PACKED_DECIMAL:
			case POINTER:
			case POINTER_64:
			case REDEFINES:
			case RENAMES:
			case SIGN:
			case SYNC:
			case SYNCHRONIZED:
			case TRAILING:
			case USAGE:
			case VALUE:
			case VALUES:
			case PIC:
			case PICTURE:
			case DOT_:
				break;
			default:
				break;
			}
			setState(3558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDEFINES) {
				{
				setState(3556);
				match(REDEFINES);
				setState(3557);
				other_data_item();
				}
			}

			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARY) | (1L << BINARY_CHAR) | (1L << BINARY_DOUBLE) | (1L << BINARY_LONG) | (1L << BINARY_SHORT) | (1L << BLANK))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (COMP - 68)) | (1L << (COMPUTATIONAL - 68)) | (1L << (COMPUTATIONAL_1 - 68)) | (1L << (COMPUTATIONAL_2 - 68)) | (1L << (COMPUTATIONAL_3 - 68)) | (1L << (COMPUTATIONAL_4 - 68)) | (1L << (COMPUTATIONAL_5 - 68)) | (1L << (COMPUTATIONAL_X - 68)) | (1L << (COMP_1 - 68)) | (1L << (COMP_2 - 68)) | (1L << (COMP_3 - 68)) | (1L << (COMP_4 - 68)) | (1L << (COMP_5 - 68)) | (1L << (COMP_X - 68)) | (1L << (DISPLAY - 68)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (EXTERNAL - 172)) | (1L << (FLOAT_EXTENDED - 172)) | (1L << (FLOAT_LONG - 172)) | (1L << (FLOAT_SHORT - 172)) | (1L << (GLOBAL - 172)) | (1L << (INDEX - 172)) | (1L << (IS - 172)) | (1L << (JUST - 172)) | (1L << (JUSTIFIED - 172)) | (1L << (LEADING - 172)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (OCCURS - 261)) | (1L << (PACKED_DECIMAL - 261)) | (1L << (POINTER - 261)) | (1L << (POINTER_64 - 261)) | (1L << (RENAMES - 261)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (SIGN - 351)) | (1L << (SYNC - 351)) | (1L << (SYNCHRONIZED - 351)) | (1L << (TRAILING - 351)) | (1L << (USAGE - 351)) | (1L << (VALUE - 351)) | (1L << (VALUES - 351)))) != 0) || _la==PIC || _la==PICTURE) {
				{
				{
				setState(3560);
				data_description_clause();
				}
				}
				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3566);
			match(DOT_);
			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3567);
				replace_statement();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Level_numberContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Level_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_level_number; }
	}

	public final Level_numberContext level_number() throws RecognitionException {
		Level_numberContext _localctx = new Level_numberContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_level_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_description_clauseContext extends ParserRuleContext {
		public Is_externalContext is_external() {
			return getRuleContext(Is_externalContext.class,0);
		}
		public Is_globalContext is_global() {
			return getRuleContext(Is_globalContext.class,0);
		}
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public UsageContext usage() {
			return getRuleContext(UsageContext.class,0);
		}
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public OccursContext occurs() {
			return getRuleContext(OccursContext.class,0);
		}
		public Synchronized_lrContext synchronized_lr() {
			return getRuleContext(Synchronized_lrContext.class,0);
		}
		public JustifiedContext justified() {
			return getRuleContext(JustifiedContext.class,0);
		}
		public Black_when_zeroContext black_when_zero() {
			return getRuleContext(Black_when_zeroContext.class,0);
		}
		public Value_isContext value_is() {
			return getRuleContext(Value_isContext.class,0);
		}
		public RenamesContext renames() {
			return getRuleContext(RenamesContext.class,0);
		}
		public Data_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_description_clause; }
	}

	public final Data_description_clauseContext data_description_clause() throws RecognitionException {
		Data_description_clauseContext _localctx = new Data_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_data_description_clause);
		try {
			setState(3586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575);
				is_external();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3576);
				is_global();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3577);
				picture();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3578);
				usage();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3579);
				sign_is();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3580);
				occurs();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3581);
				synchronized_lr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3582);
				justified();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3583);
				black_when_zero();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3584);
				value_is();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3585);
				renames();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synchronized_lrContext extends ParserRuleContext {
		public TerminalNode SYNCHRONIZED() { return getToken(cobolParser.SYNCHRONIZED, 0); }
		public TerminalNode SYNC() { return getToken(cobolParser.SYNC, 0); }
		public TerminalNode LEFT() { return getToken(cobolParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(cobolParser.RIGHT, 0); }
		public Synchronized_lrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synchronized_lr; }
	}

	public final Synchronized_lrContext synchronized_lr() throws RecognitionException {
		Synchronized_lrContext _localctx = new Synchronized_lrContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_synchronized_lr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			_la = _input.LA(1);
			if ( !(_la==SYNC || _la==SYNCHRONIZED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				setState(3589);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JustifiedContext extends ParserRuleContext {
		public TerminalNode JUSTIFIED() { return getToken(cobolParser.JUSTIFIED, 0); }
		public TerminalNode JUST() { return getToken(cobolParser.JUST, 0); }
		public TerminalNode RIGHT() { return getToken(cobolParser.RIGHT, 0); }
		public JustifiedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_justified; }
	}

	public final JustifiedContext justified() throws RecognitionException {
		JustifiedContext _localctx = new JustifiedContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_justified);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			_la = _input.LA(1);
			if ( !(_la==JUST || _la==JUSTIFIED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RIGHT) {
				{
				setState(3593);
				match(RIGHT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Black_when_zeroContext extends ParserRuleContext {
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public TerminalNode WHEN() { return getToken(cobolParser.WHEN, 0); }
		public Black_when_zeroContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_black_when_zero; }
	}

	public final Black_when_zeroContext black_when_zero() throws RecognitionException {
		Black_when_zeroContext _localctx = new Black_when_zeroContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_black_when_zero);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			match(BLANK);
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(3597);
				match(WHEN);
				}
			}

			setState(3600);
			match(ZERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamesContext extends ParserRuleContext {
		public TerminalNode RENAMES() { return getToken(cobolParser.RENAMES, 0); }
		public Rename_startContext rename_start() {
			return getRuleContext(Rename_startContext.class,0);
		}
		public Rename_endContext rename_end() {
			return getRuleContext(Rename_endContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public RenamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renames; }
	}

	public final RenamesContext renames() throws RecognitionException {
		RenamesContext _localctx = new RenamesContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_renames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3602);
			match(RENAMES);
			setState(3603);
			rename_start();
			setState(3606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(3604);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3605);
				rename_end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_startContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rename_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_start; }
	}

	public final Rename_startContext rename_start() throws RecognitionException {
		Rename_startContext _localctx = new Rename_startContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_rename_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_endContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rename_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_end; }
	}

	public final Rename_endContext rename_end() throws RecognitionException {
		Rename_endContext _localctx = new Rename_endContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_rename_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3610);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_isContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(cobolParser.VALUES, 0); }
		public List<Value_is_definitionContext> value_is_definition() {
			return getRuleContexts(Value_is_definitionContext.class);
		}
		public Value_is_definitionContext value_is_definition(int i) {
			return getRuleContext(Value_is_definitionContext.class,i);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public Value_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is; }
	}

	public final Value_isContext value_is() throws RecognitionException {
		Value_isContext _localctx = new Value_isContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_value_is);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUE:
				{
				setState(3612);
				match(VALUE);
				setState(3614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3613);
					match(IS);
					}
				}

				}
				break;
			case VALUES:
				{
				setState(3616);
				match(VALUES);
				setState(3618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3617);
					match(ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3623); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3622);
					value_is_definition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3625); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,517,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definitionContext extends ParserRuleContext {
		public Value_is_definition_partContext value_is_definition_part() {
			return getRuleContext(Value_is_definition_partContext.class,0);
		}
		public Value_is_definition_thruContext value_is_definition_thru() {
			return getRuleContext(Value_is_definition_thruContext.class,0);
		}
		public Value_is_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition; }
	}

	public final Value_is_definitionContext value_is_definition() throws RecognitionException {
		Value_is_definitionContext _localctx = new Value_is_definitionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_value_is_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3627);
			value_is_definition_part();
			setState(3629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(3628);
				value_is_definition_thru();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definition_partContext extends ParserRuleContext {
		public Value_is_literalContext value_is_literal() {
			return getRuleContext(Value_is_literalContext.class,0);
		}
		public TerminalNode REFERENCE() { return getToken(cobolParser.REFERENCE, 0); }
		public Ref_data_nameContext ref_data_name() {
			return getRuleContext(Ref_data_nameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public External_nameContext external_name() {
			return getRuleContext(External_nameContext.class,0);
		}
		public Value_is_definition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition_part; }
	}

	public final Value_is_definition_partContext value_is_definition_part() throws RecognitionException {
		Value_is_definition_partContext _localctx = new Value_is_definition_partContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_value_is_definition_part);
		try {
			setState(3636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3631);
				value_is_literal();
				}
				break;
			case REFERENCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3632);
				match(REFERENCE);
				setState(3633);
				ref_data_name();
				}
				break;
			case EXTERNAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3634);
				match(EXTERNAL);
				setState(3635);
				external_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_definition_thruContext extends ParserRuleContext {
		public Value_is_definition_partContext value_is_definition_part() {
			return getRuleContext(Value_is_definition_partContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public Value_is_definition_thruContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_definition_thru; }
	}

	public final Value_is_definition_thruContext value_is_definition_thru() throws RecognitionException {
		Value_is_definition_thruContext _localctx = new Value_is_definition_thruContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_value_is_definition_thru);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3638);
			_la = _input.LA(1);
			if ( !(_la==THROUGH || _la==THRU) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3639);
			value_is_definition_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public External_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_name; }
	}

	public final External_nameContext external_name() throws RecognitionException {
		External_nameContext _localctx = new External_nameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_external_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_data_nameContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Ref_data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_data_name; }
	}

	public final Ref_data_nameContext ref_data_name() throws RecognitionException {
		Ref_data_nameContext _localctx = new Ref_data_nameContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_ref_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_is_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Value_is_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_is_literal; }
	}

	public final Value_is_literalContext value_is_literal() throws RecognitionException {
		Value_is_literalContext _localctx = new Value_is_literalContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_value_is_literal);
		int _la;
		try {
			setState(3649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3645);
				match(STRING_LITERAL_);
				}
				break;
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3646);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3647);
				figurative_constant();
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 4);
				{
				setState(3648);
				match(USER_DEFINED_WORD_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OccursContext extends ParserRuleContext {
		public TerminalNode OCCURS() { return getToken(cobolParser.OCCURS, 0); }
		public Times_definitionContext times_definition() {
			return getRuleContext(Times_definitionContext.class,0);
		}
		public List<Key_isContext> key_is() {
			return getRuleContexts(Key_isContext.class);
		}
		public Key_isContext key_is(int i) {
			return getRuleContext(Key_isContext.class,i);
		}
		public Indexed_byContext indexed_by() {
			return getRuleContext(Indexed_byContext.class,0);
		}
		public OccursContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_occurs; }
	}

	public final OccursContext occurs() throws RecognitionException {
		OccursContext _localctx = new OccursContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_occurs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			match(OCCURS);
			setState(3652);
			times_definition();
			setState(3656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ASCENDING || _la==DESCENDING) {
				{
				{
				setState(3653);
				key_is();
				}
				}
				setState(3658);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED) {
				{
				setState(3659);
				indexed_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexed_byContext extends ParserRuleContext {
		public TerminalNode INDEXED() { return getToken(cobolParser.INDEXED, 0); }
		public TerminalNode BY() { return getToken(cobolParser.BY, 0); }
		public List<Ind_nameContext> ind_name() {
			return getRuleContexts(Ind_nameContext.class);
		}
		public Ind_nameContext ind_name(int i) {
			return getRuleContext(Ind_nameContext.class,i);
		}
		public Indexed_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexed_by; }
	}

	public final Indexed_byContext indexed_by() throws RecognitionException {
		Indexed_byContext _localctx = new Indexed_byContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_indexed_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			match(INDEXED);
			setState(3664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(3663);
				match(BY);
				}
			}

			setState(3667); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3666);
				ind_name();
				}
				}
				setState(3669); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ind_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Ind_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ind_name; }
	}

	public final Ind_nameContext ind_name() throws RecognitionException {
		Ind_nameContext _localctx = new Ind_nameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_ind_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3671);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_isContext extends ParserRuleContext {
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<Key_nameContext> key_name() {
			return getRuleContexts(Key_nameContext.class);
		}
		public Key_nameContext key_name(int i) {
			return getRuleContext(Key_nameContext.class,i);
		}
		public Key_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_is; }
	}

	public final Key_isContext key_is() throws RecognitionException {
		Key_isContext _localctx = new Key_isContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_key_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			_la = _input.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(3674);
				match(KEY);
				}
			}

			setState(3678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3677);
				match(IS);
				}
			}

			setState(3681); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3680);
				key_name();
				}
				}
				setState(3683); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Key_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_name; }
	}

	public final Key_nameContext key_name() throws RecognitionException {
		Key_nameContext _localctx = new Key_nameContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_key_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Times_definitionContext extends ParserRuleContext {
		public Table_sizeContext table_size() {
			return getRuleContext(Table_sizeContext.class,0);
		}
		public TerminalNode TIMES() { return getToken(cobolParser.TIMES, 0); }
		public Min_timesContext min_times() {
			return getRuleContext(Min_timesContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Max_timesContext max_times() {
			return getRuleContext(Max_timesContext.class,0);
		}
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Depending_itemContext depending_item() {
			return getRuleContext(Depending_itemContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Times_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_times_definition; }
	}

	public final Times_definitionContext times_definition() throws RecognitionException {
		Times_definitionContext _localctx = new Times_definitionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_times_definition);
		int _la;
		try {
			setState(3703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3687);
				table_size();
				setState(3689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TIMES) {
					{
					setState(3688);
					match(TIMES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3691);
				min_times();
				setState(3692);
				match(TO);
				setState(3693);
				max_times();
				setState(3695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TIMES) {
					{
					setState(3694);
					match(TIMES);
					}
				}

				setState(3697);
				match(DEPENDING);
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3698);
					match(ON);
					}
				}

				setState(3701);
				depending_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sizeContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Table_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_size; }
	}

	public final Table_sizeContext table_size() throws RecognitionException {
		Table_sizeContext _localctx = new Table_sizeContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_table_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Min_timesContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Min_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_min_times; }
	}

	public final Min_timesContext min_times() throws RecognitionException {
		Min_timesContext _localctx = new Min_timesContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_min_times);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Max_timesContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Max_timesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_max_times; }
	}

	public final Max_timesContext max_times() throws RecognitionException {
		Max_timesContext _localctx = new Max_timesContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_max_times);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_group_data_description_entryContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public List<Report_group_data_description_clauseContext> report_group_data_description_clause() {
			return getRuleContexts(Report_group_data_description_clauseContext.class);
		}
		public Report_group_data_description_clauseContext report_group_data_description_clause(int i) {
			return getRuleContext(Report_group_data_description_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Report_group_data_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_group_data_description_entry; }
	}

	public final Report_group_data_description_entryContext report_group_data_description_entry() throws RecognitionException {
		Report_group_data_description_entryContext _localctx = new Report_group_data_description_entryContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_report_group_data_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3711);
			level_number();
			setState(3713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER_DEFINED_WORD_) {
				{
				setState(3712);
				data_name();
				}
			}

			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BLANK || _la==COLUMN || _la==DISPLAY || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (GROUP - 197)) | (1L << (JUST - 197)) | (1L << (JUSTIFIED - 197)) | (1L << (LEADING - 197)) | (1L << (LINE - 197)) | (1L << (NEXT - 197)))) != 0) || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (SIGN - 351)) | (1L << (SOURCE - 351)) | (1L << (SUM - 351)) | (1L << (TRAILING - 351)) | (1L << (TYPE - 351)) | (1L << (USAGE - 351)) | (1L << (VALUE - 351)))) != 0) || _la==PIC || _la==PICTURE) {
				{
				{
				setState(3715);
				report_group_data_description_clause();
				}
				}
				setState(3720);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3721);
			match(DOT_);
			setState(3725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(3722);
				replace_statement();
				}
				}
				setState(3727);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_group_data_description_clauseContext extends ParserRuleContext {
		public Rep_line_numContext rep_line_num() {
			return getRuleContext(Rep_line_numContext.class,0);
		}
		public Rep_next_groupContext rep_next_group() {
			return getRuleContext(Rep_next_groupContext.class,0);
		}
		public Rep_typeContext rep_type() {
			return getRuleContext(Rep_typeContext.class,0);
		}
		public Usage_displayContext usage_display() {
			return getRuleContext(Usage_displayContext.class,0);
		}
		public Black_when_zeroContext black_when_zero() {
			return getRuleContext(Black_when_zeroContext.class,0);
		}
		public Rep_columnContext rep_column() {
			return getRuleContext(Rep_columnContext.class,0);
		}
		public Rep_group_indContext rep_group_ind() {
			return getRuleContext(Rep_group_indContext.class,0);
		}
		public JustifiedContext justified() {
			return getRuleContext(JustifiedContext.class,0);
		}
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public Rep_source_sum_or_valueContext rep_source_sum_or_value() {
			return getRuleContext(Rep_source_sum_or_valueContext.class,0);
		}
		public Report_group_data_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_group_data_description_clause; }
	}

	public final Report_group_data_description_clauseContext report_group_data_description_clause() throws RecognitionException {
		Report_group_data_description_clauseContext _localctx = new Report_group_data_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_report_group_data_description_clause);
		try {
			setState(3739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LINE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3728);
				rep_line_num();
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3729);
				rep_next_group();
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3730);
				rep_type();
				}
				break;
			case DISPLAY:
			case USAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3731);
				usage_display();
				}
				break;
			case BLANK:
				enterOuterAlt(_localctx, 5);
				{
				setState(3732);
				black_when_zero();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 6);
				{
				setState(3733);
				rep_column();
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 7);
				{
				setState(3734);
				rep_group_ind();
				}
				break;
			case JUST:
			case JUSTIFIED:
				enterOuterAlt(_localctx, 8);
				{
				setState(3735);
				justified();
				}
				break;
			case PIC:
			case PICTURE:
				enterOuterAlt(_localctx, 9);
				{
				setState(3736);
				picture();
				}
				break;
			case LEADING:
			case SIGN:
			case TRAILING:
				enterOuterAlt(_localctx, 10);
				{
				setState(3737);
				sign_is();
				}
				break;
			case SOURCE:
			case SUM:
			case VALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3738);
				rep_source_sum_or_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_source_sum_or_valueContext extends ParserRuleContext {
		public Rep_sourceContext rep_source() {
			return getRuleContext(Rep_sourceContext.class,0);
		}
		public Rep_sumContext rep_sum() {
			return getRuleContext(Rep_sumContext.class,0);
		}
		public Rep_value_isContext rep_value_is() {
			return getRuleContext(Rep_value_isContext.class,0);
		}
		public Rep_source_sum_or_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_source_sum_or_value; }
	}

	public final Rep_source_sum_or_valueContext rep_source_sum_or_value() throws RecognitionException {
		Rep_source_sum_or_valueContext _localctx = new Rep_source_sum_or_valueContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_rep_source_sum_or_value);
		try {
			setState(3744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3741);
				rep_source();
				}
				break;
			case SUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(3742);
				rep_sum();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3743);
				rep_value_is();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_value_isContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Value_is_literalContext value_is_literal() {
			return getRuleContext(Value_is_literalContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_value_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_value_is; }
	}

	public final Rep_value_isContext rep_value_is() throws RecognitionException {
		Rep_value_isContext _localctx = new Rep_value_isContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_rep_value_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3746);
			match(VALUE);
			setState(3748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3747);
				match(IS);
				}
			}

			setState(3750);
			value_is_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_sourceContext extends ParserRuleContext {
		public TerminalNode SOURCE() { return getToken(cobolParser.SOURCE, 0); }
		public Source_nameContext source_name() {
			return getRuleContext(Source_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_source; }
	}

	public final Rep_sourceContext rep_source() throws RecognitionException {
		Rep_sourceContext _localctx = new Rep_sourceContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_rep_source);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3752);
			match(SOURCE);
			setState(3754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3753);
				match(IS);
				}
			}

			setState(3756);
			source_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_group_indContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(cobolParser.GROUP, 0); }
		public TerminalNode INDICATE() { return getToken(cobolParser.INDICATE, 0); }
		public Rep_group_indContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_group_ind; }
	}

	public final Rep_group_indContext rep_group_ind() throws RecognitionException {
		Rep_group_indContext _localctx = new Rep_group_indContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_rep_group_ind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3758);
			match(GROUP);
			setState(3760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDICATE) {
				{
				setState(3759);
				match(INDICATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Column_numberContext column_number() {
			return getRuleContext(Column_numberContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_column; }
	}

	public final Rep_columnContext rep_column() throws RecognitionException {
		Rep_columnContext _localctx = new Rep_columnContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_rep_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			match(COLUMN);
			setState(3764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3763);
				match(NUMBER);
				}
			}

			setState(3767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3766);
				match(IS);
				}
			}

			setState(3769);
			column_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Usage_displayContext extends ParserRuleContext {
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public TerminalNode USAGE() { return getToken(cobolParser.USAGE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Usage_displayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage_display; }
	}

	public final Usage_displayContext usage_display() throws RecognitionException {
		Usage_displayContext _localctx = new Usage_displayContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_usage_display);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USAGE) {
				{
				setState(3771);
				match(USAGE);
				setState(3773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3772);
					match(IS);
					}
				}

				}
			}

			setState(3777);
			match(DISPLAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_typeContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(cobolParser.TYPE, 0); }
		public Type_is_definitionContext type_is_definition() {
			return getRuleContext(Type_is_definitionContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type; }
	}

	public final Rep_typeContext rep_type() throws RecognitionException {
		Rep_typeContext _localctx = new Rep_typeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_rep_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3779);
			match(TYPE);
			setState(3781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3780);
				match(IS);
				}
			}

			setState(3783);
			type_is_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_next_groupContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode GROUP() { return getToken(cobolParser.GROUP, 0); }
		public Next_group_definitionContext next_group_definition() {
			return getRuleContext(Next_group_definitionContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_next_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_next_group; }
	}

	public final Rep_next_groupContext rep_next_group() throws RecognitionException {
		Rep_next_groupContext _localctx = new Rep_next_groupContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_rep_next_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(NEXT);
			setState(3786);
			match(GROUP);
			setState(3788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3787);
				match(IS);
				}
			}

			setState(3790);
			next_group_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_line_numContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Line_num_definitionContext line_num_definition() {
			return getRuleContext(Line_num_definitionContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Rep_line_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_line_num; }
	}

	public final Rep_line_numContext rep_line_num() throws RecognitionException {
		Rep_line_numContext _localctx = new Rep_line_numContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_rep_line_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3792);
			match(LINE);
			setState(3794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(3793);
				match(NUMBER);
				}
			}

			setState(3797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3796);
				match(IS);
				}
			}

			setState(3799);
			line_num_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sign_isContext extends ParserRuleContext {
		public TerminalNode LEADING() { return getToken(cobolParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(cobolParser.TRAILING, 0); }
		public TerminalNode SIGN() { return getToken(cobolParser.SIGN, 0); }
		public TerminalNode SEPARATE() { return getToken(cobolParser.SEPARATE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode CHARACTER() { return getToken(cobolParser.CHARACTER, 0); }
		public Sign_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign_is; }
	}

	public final Sign_isContext sign_is() throws RecognitionException {
		Sign_isContext _localctx = new Sign_isContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_sign_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIGN) {
				{
				setState(3801);
				match(SIGN);
				setState(3803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3802);
					match(IS);
					}
				}

				}
			}

			setState(3807);
			_la = _input.LA(1);
			if ( !(_la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEPARATE) {
				{
				setState(3808);
				match(SEPARATE);
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3809);
					match(CHARACTER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_sumContext extends ParserRuleContext {
		public List<TerminalNode> SUM() { return getTokens(cobolParser.SUM); }
		public TerminalNode SUM(int i) {
			return getToken(cobolParser.SUM, i);
		}
		public TerminalNode RESET() { return getToken(cobolParser.RESET, 0); }
		public Control_foot_nameContext control_foot_name() {
			return getRuleContext(Control_foot_nameContext.class,0);
		}
		public List<Sum_nameContext> sum_name() {
			return getRuleContexts(Sum_nameContext.class);
		}
		public Sum_nameContext sum_name(int i) {
			return getRuleContext(Sum_nameContext.class,i);
		}
		public List<TerminalNode> UPON() { return getTokens(cobolParser.UPON); }
		public TerminalNode UPON(int i) {
			return getToken(cobolParser.UPON, i);
		}
		public List<Detail_report_group_nameContext> detail_report_group_name() {
			return getRuleContexts(Detail_report_group_nameContext.class);
		}
		public Detail_report_group_nameContext detail_report_group_name(int i) {
			return getRuleContext(Detail_report_group_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Rep_sumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_sum; }
	}

	public final Rep_sumContext rep_sum() throws RecognitionException {
		Rep_sumContext _localctx = new Rep_sumContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_rep_sum);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3829); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3814);
					match(SUM);
					setState(3816); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3815);
							sum_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3818); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(3821);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UPON) {
						{
						setState(3820);
						match(UPON);
						}
					}

					setState(3826);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==USER_DEFINED_WORD_) {
						{
						{
						setState(3823);
						detail_report_group_name();
						}
						}
						setState(3828);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3831); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESET) {
				{
				setState(3833);
				match(RESET);
				setState(3835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3834);
					match(ON);
					}
				}

				setState(3837);
				control_foot_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_foot_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public Control_foot_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_foot_name; }
	}

	public final Control_foot_nameContext control_foot_name() throws RecognitionException {
		Control_foot_nameContext _localctx = new Control_foot_nameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_control_foot_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Detail_report_group_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Detail_report_group_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_detail_report_group_name; }
	}

	public final Detail_report_group_nameContext detail_report_group_name() throws RecognitionException {
		Detail_report_group_nameContext _localctx = new Detail_report_group_nameContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_detail_report_group_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3842);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sum_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Sum_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sum_name; }
	}

	public final Sum_nameContext sum_name() throws RecognitionException {
		Sum_nameContext _localctx = new Sum_nameContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_sum_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3844);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Source_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_name; }
	}

	public final Source_nameContext source_name() throws RecognitionException {
		Source_nameContext _localctx = new Source_nameContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_source_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_numberContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Column_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_number; }
	}

	public final Column_numberContext column_number() throws RecognitionException {
		Column_numberContext _localctx = new Column_numberContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_column_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_is_definitionContext extends ParserRuleContext {
		public Rep_type_rhContext rep_type_rh() {
			return getRuleContext(Rep_type_rhContext.class,0);
		}
		public Rep_type_phContext rep_type_ph() {
			return getRuleContext(Rep_type_phContext.class,0);
		}
		public Rep_type_chContext rep_type_ch() {
			return getRuleContext(Rep_type_chContext.class,0);
		}
		public Rep_type_deContext rep_type_de() {
			return getRuleContext(Rep_type_deContext.class,0);
		}
		public Rep_type_cfContext rep_type_cf() {
			return getRuleContext(Rep_type_cfContext.class,0);
		}
		public Rep_type_pfContext rep_type_pf() {
			return getRuleContext(Rep_type_pfContext.class,0);
		}
		public Rep_type_rfContext rep_type_rf() {
			return getRuleContext(Rep_type_rfContext.class,0);
		}
		public Type_is_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_is_definition; }
	}

	public final Type_is_definitionContext type_is_definition() throws RecognitionException {
		Type_is_definitionContext _localctx = new Type_is_definitionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_type_is_definition);
		try {
			setState(3857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3850);
				rep_type_rh();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3851);
				rep_type_ph();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3852);
				rep_type_ch();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3853);
				rep_type_de();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3854);
				rep_type_cf();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3855);
				rep_type_pf();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3856);
				rep_type_rf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_pfContext extends ParserRuleContext {
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public TerminalNode PF() { return getToken(cobolParser.PF, 0); }
		public Rep_type_pfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_pf; }
	}

	public final Rep_type_pfContext rep_type_pf() throws RecognitionException {
		Rep_type_pfContext _localctx = new Rep_type_pfContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_rep_type_pf);
		try {
			setState(3862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3859);
				match(PAGE);
				setState(3860);
				match(FOOTING);
				}
				break;
			case PF:
				enterOuterAlt(_localctx, 2);
				{
				setState(3861);
				match(PF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_rfContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public TerminalNode RF() { return getToken(cobolParser.RF, 0); }
		public Rep_type_rfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_rf; }
	}

	public final Rep_type_rfContext rep_type_rf() throws RecognitionException {
		Rep_type_rfContext _localctx = new Rep_type_rfContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_rep_type_rf);
		try {
			setState(3867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3864);
				match(REPORT);
				setState(3865);
				match(FOOTING);
				}
				break;
			case RF:
				enterOuterAlt(_localctx, 2);
				{
				setState(3866);
				match(RF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_deContext extends ParserRuleContext {
		public TerminalNode DETAIL() { return getToken(cobolParser.DETAIL, 0); }
		public TerminalNode DE() { return getToken(cobolParser.DE, 0); }
		public Rep_type_deContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_de; }
	}

	public final Rep_type_deContext rep_type_de() throws RecognitionException {
		Rep_type_deContext _localctx = new Rep_type_deContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_rep_type_de);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3869);
			_la = _input.LA(1);
			if ( !(_la==DE || _la==DETAIL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_chContext extends ParserRuleContext {
		public Type_control_nameContext type_control_name() {
			return getRuleContext(Type_control_nameContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public TerminalNode CH() { return getToken(cobolParser.CH, 0); }
		public Rep_type_chContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_ch; }
	}

	public final Rep_type_chContext rep_type_ch() throws RecognitionException {
		Rep_type_chContext _localctx = new Rep_type_chContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_rep_type_ch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3874);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTROL:
				{
				setState(3871);
				match(CONTROL);
				setState(3872);
				match(HEADING);
				}
				break;
			case CH:
				{
				setState(3873);
				match(CH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3876);
			type_control_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_cfContext extends ParserRuleContext {
		public Type_control_nameContext type_control_name() {
			return getRuleContext(Type_control_nameContext.class,0);
		}
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public TerminalNode CF() { return getToken(cobolParser.CF, 0); }
		public Rep_type_cfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_cf; }
	}

	public final Rep_type_cfContext rep_type_cf() throws RecognitionException {
		Rep_type_cfContext _localctx = new Rep_type_cfContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_rep_type_cf);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTROL:
				{
				setState(3878);
				match(CONTROL);
				setState(3879);
				match(FOOTING);
				}
				break;
			case CF:
				{
				setState(3880);
				match(CF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3883);
			type_control_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_rhContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public TerminalNode RH() { return getToken(cobolParser.RH, 0); }
		public Rep_type_rhContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_rh; }
	}

	public final Rep_type_rhContext rep_type_rh() throws RecognitionException {
		Rep_type_rhContext _localctx = new Rep_type_rhContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_rep_type_rh);
		try {
			setState(3888);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPORT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3885);
				match(REPORT);
				setState(3886);
				match(HEADING);
				}
				break;
			case RH:
				enterOuterAlt(_localctx, 2);
				{
				setState(3887);
				match(RH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rep_type_phContext extends ParserRuleContext {
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public TerminalNode PH() { return getToken(cobolParser.PH, 0); }
		public Rep_type_phContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rep_type_ph; }
	}

	public final Rep_type_phContext rep_type_ph() throws RecognitionException {
		Rep_type_phContext _localctx = new Rep_type_phContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_rep_type_ph);
		try {
			setState(3893);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3890);
				match(PAGE);
				setState(3891);
				match(HEADING);
				}
				break;
			case PH:
				enterOuterAlt(_localctx, 2);
				{
				setState(3892);
				match(PH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_control_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public Type_control_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_control_name; }
	}

	public final Type_control_nameContext type_control_name() throws RecognitionException {
		Type_control_nameContext _localctx = new Type_control_nameContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_type_control_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3895);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Next_group_definitionContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Next_group_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_next_group_definition; }
	}

	public final Next_group_definitionContext next_group_definition() throws RecognitionException {
		Next_group_definitionContext _localctx = new Next_group_definitionContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_next_group_definition);
		try {
			setState(3902);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3897);
				line_num();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3898);
				match(PLUS);
				setState(3899);
				line_num();
				}
				break;
			case NEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3900);
				match(NEXT);
				setState(3901);
				match(PAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_num_definitionContext extends ParserRuleContext {
		public Line_numContext line_num() {
			return getRuleContext(Line_numContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(cobolParser.NEXT, 0); }
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Line_num_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_num_definition; }
	}

	public final Line_num_definitionContext line_num_definition() throws RecognitionException {
		Line_num_definitionContext _localctx = new Line_num_definitionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_line_num_definition);
		int _la;
		try {
			setState(3914);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3904);
				line_num();
				setState(3910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
				case 1:
					{
					setState(3906);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(3905);
						match(ON);
						}
					}

					setState(3908);
					match(NEXT);
					setState(3909);
					match(PAGE);
					}
					break;
				}
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3912);
				match(PLUS);
				setState(3913);
				line_num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Line_numContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Line_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_line_num; }
	}

	public final Line_numContext line_num() throws RecognitionException {
		Line_numContext _localctx = new Line_numContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_line_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3916);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rd_clauseContext extends ParserRuleContext {
		public Is_globalContext is_global() {
			return getRuleContext(Is_globalContext.class,0);
		}
		public Report_codeContext report_code() {
			return getRuleContext(Report_codeContext.class,0);
		}
		public Report_controlContext report_control() {
			return getRuleContext(Report_controlContext.class,0);
		}
		public Report_pageContext report_page() {
			return getRuleContext(Report_pageContext.class,0);
		}
		public Rd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rd_clause; }
	}

	public final Rd_clauseContext rd_clause() throws RecognitionException {
		Rd_clauseContext _localctx = new Rd_clauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_rd_clause);
		try {
			setState(3922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3918);
				is_global();
				}
				break;
			case CODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3919);
				report_code();
				}
				break;
			case CONTROL:
			case CONTROLS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3920);
				report_control();
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3921);
				report_page();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_pageContext extends ParserRuleContext {
		public TerminalNode PAGE() { return getToken(cobolParser.PAGE, 0); }
		public Page_size_rdContext page_size_rd() {
			return getRuleContext(Page_size_rdContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(cobolParser.LIMIT, 0); }
		public TerminalNode LIMITS() { return getToken(cobolParser.LIMITS, 0); }
		public TerminalNode HEADING() { return getToken(cobolParser.HEADING, 0); }
		public Heading_lineContext heading_line() {
			return getRuleContext(Heading_lineContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(cobolParser.FIRST, 0); }
		public List<TerminalNode> DETAIL() { return getTokens(cobolParser.DETAIL); }
		public TerminalNode DETAIL(int i) {
			return getToken(cobolParser.DETAIL, i);
		}
		public First_detail_lineContext first_detail_line() {
			return getRuleContext(First_detail_lineContext.class,0);
		}
		public TerminalNode LAST() { return getToken(cobolParser.LAST, 0); }
		public Last_detail_lineContext last_detail_line() {
			return getRuleContext(Last_detail_lineContext.class,0);
		}
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public Footing_line_rdContext footing_line_rd() {
			return getRuleContext(Footing_line_rdContext.class,0);
		}
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode LINES() { return getToken(cobolParser.LINES, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public Report_pageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_page; }
	}

	public final Report_pageContext report_page() throws RecognitionException {
		Report_pageContext _localctx = new Report_pageContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_report_page);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			match(PAGE);
			setState(3933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(3925);
				match(LIMIT);
				setState(3927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3926);
					match(IS);
					}
				}

				}
				break;
			case LIMITS:
				{
				setState(3929);
				match(LIMITS);
				setState(3931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3930);
					match(ARE);
					}
				}

				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				break;
			default:
				break;
			}
			setState(3935);
			page_size_rd();
			setState(3937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINE || _la==LINES) {
				{
				setState(3936);
				_la = _input.LA(1);
				if ( !(_la==LINE || _la==LINES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADING) {
				{
				setState(3939);
				match(HEADING);
				setState(3940);
				heading_line();
				}
			}

			setState(3946);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FIRST) {
				{
				setState(3943);
				match(FIRST);
				setState(3944);
				match(DETAIL);
				setState(3945);
				first_detail_line();
				}
			}

			setState(3951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LAST) {
				{
				setState(3948);
				match(LAST);
				setState(3949);
				match(DETAIL);
				setState(3950);
				last_detail_line();
				}
			}

			setState(3955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOOTING) {
				{
				setState(3953);
				match(FOOTING);
				setState(3954);
				footing_line_rd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_controlContext extends ParserRuleContext {
		public TerminalNode CONTROL() { return getToken(cobolParser.CONTROL, 0); }
		public TerminalNode CONTROLS() { return getToken(cobolParser.CONTROLS, 0); }
		public TerminalNode FINAL() { return getToken(cobolParser.FINAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public List<Control_nameContext> control_name() {
			return getRuleContexts(Control_nameContext.class);
		}
		public Control_nameContext control_name(int i) {
			return getRuleContext(Control_nameContext.class,i);
		}
		public Report_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_control; }
	}

	public final Report_controlContext report_control() throws RecognitionException {
		Report_controlContext _localctx = new Report_controlContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_report_control);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTROL:
				{
				setState(3957);
				match(CONTROL);
				setState(3959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3958);
					match(IS);
					}
				}

				}
				break;
			case CONTROLS:
				{
				setState(3961);
				match(CONTROLS);
				setState(3963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(3962);
					match(ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				{
				setState(3968); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3967);
					control_name();
					}
					}
					setState(3970); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			case FINAL:
				{
				setState(3972);
				match(FINAL);
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USER_DEFINED_WORD_) {
					{
					{
					setState(3973);
					control_name();
					}
					}
					setState(3978);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_codeContext extends ParserRuleContext {
		public TerminalNode CODE() { return getToken(cobolParser.CODE, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Report_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_code; }
	}

	public final Report_codeContext report_code() throws RecognitionException {
		Report_codeContext _localctx = new Report_codeContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_report_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			match(CODE);
			setState(3982);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Footing_line_rdContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Footing_line_rdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_footing_line_rd; }
	}

	public final Footing_line_rdContext footing_line_rd() throws RecognitionException {
		Footing_line_rdContext _localctx = new Footing_line_rdContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_footing_line_rd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3984);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Last_detail_lineContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Last_detail_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_last_detail_line; }
	}

	public final Last_detail_lineContext last_detail_line() throws RecognitionException {
		Last_detail_lineContext _localctx = new Last_detail_lineContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_last_detail_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3986);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_detail_lineContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public First_detail_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_detail_line; }
	}

	public final First_detail_lineContext first_detail_line() throws RecognitionException {
		First_detail_lineContext _localctx = new First_detail_lineContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_first_detail_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Heading_lineContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Heading_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_heading_line; }
	}

	public final Heading_lineContext heading_line() throws RecognitionException {
		Heading_lineContext _localctx = new Heading_lineContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_heading_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3990);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Page_size_rdContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Page_size_rdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_page_size_rd; }
	}

	public final Page_size_rdContext page_size_rd() throws RecognitionException {
		Page_size_rdContext _localctx = new Page_size_rdContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_page_size_rd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3992);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Control_nameContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Control_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_control_name; }
	}

	public final Control_nameContext control_name() throws RecognitionException {
		Control_nameContext _localctx = new Control_nameContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_control_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3994);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsageContext extends ParserRuleContext {
		public Usage_definitionContext usage_definition() {
			return getRuleContext(Usage_definitionContext.class,0);
		}
		public TerminalNode USAGE() { return getToken(cobolParser.USAGE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public UsageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage; }
	}

	public final UsageContext usage() throws RecognitionException {
		UsageContext _localctx = new UsageContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_usage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USAGE) {
				{
				setState(3996);
				match(USAGE);
				setState(3998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(3997);
					match(IS);
					}
				}

				}
			}

			setState(4002);
			usage_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Usage_definitionContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(cobolParser.BINARY, 0); }
		public TerminalNode BINARY_CHAR() { return getToken(cobolParser.BINARY_CHAR, 0); }
		public TerminalNode SIGNED() { return getToken(cobolParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(cobolParser.UNSIGNED, 0); }
		public TerminalNode BINARY_SHORT() { return getToken(cobolParser.BINARY_SHORT, 0); }
		public TerminalNode BINARY_LONG() { return getToken(cobolParser.BINARY_LONG, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(cobolParser.BINARY_DOUBLE, 0); }
		public TerminalNode COMPUTATIONAL() { return getToken(cobolParser.COMPUTATIONAL, 0); }
		public TerminalNode COMPUTATIONAL_1() { return getToken(cobolParser.COMPUTATIONAL_1, 0); }
		public TerminalNode COMPUTATIONAL_2() { return getToken(cobolParser.COMPUTATIONAL_2, 0); }
		public TerminalNode COMPUTATIONAL_3() { return getToken(cobolParser.COMPUTATIONAL_3, 0); }
		public TerminalNode COMPUTATIONAL_4() { return getToken(cobolParser.COMPUTATIONAL_4, 0); }
		public TerminalNode COMPUTATIONAL_5() { return getToken(cobolParser.COMPUTATIONAL_5, 0); }
		public TerminalNode COMPUTATIONAL_X() { return getToken(cobolParser.COMPUTATIONAL_X, 0); }
		public TerminalNode COMP() { return getToken(cobolParser.COMP, 0); }
		public TerminalNode COMP_1() { return getToken(cobolParser.COMP_1, 0); }
		public TerminalNode COMP_2() { return getToken(cobolParser.COMP_2, 0); }
		public TerminalNode COMP_3() { return getToken(cobolParser.COMP_3, 0); }
		public TerminalNode COMP_4() { return getToken(cobolParser.COMP_4, 0); }
		public TerminalNode COMP_5() { return getToken(cobolParser.COMP_5, 0); }
		public TerminalNode COMP_X() { return getToken(cobolParser.COMP_X, 0); }
		public TerminalNode DISPLAY() { return getToken(cobolParser.DISPLAY, 0); }
		public TerminalNode FLOAT_SHORT() { return getToken(cobolParser.FLOAT_SHORT, 0); }
		public TerminalNode FLOAT_LONG() { return getToken(cobolParser.FLOAT_LONG, 0); }
		public TerminalNode FLOAT_EXTENDED() { return getToken(cobolParser.FLOAT_EXTENDED, 0); }
		public TerminalNode INDEX() { return getToken(cobolParser.INDEX, 0); }
		public TerminalNode PACKED_DECIMAL() { return getToken(cobolParser.PACKED_DECIMAL, 0); }
		public TerminalNode POINTER() { return getToken(cobolParser.POINTER, 0); }
		public TerminalNode POINTER_64() { return getToken(cobolParser.POINTER_64, 0); }
		public Usage_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usage_definition; }
	}

	public final Usage_definitionContext usage_definition() throws RecognitionException {
		Usage_definitionContext _localctx = new Usage_definitionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_usage_definition);
		int _la;
		try {
			setState(4043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4004);
				match(BINARY);
				}
				break;
			case BINARY_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4005);
				match(BINARY_CHAR);
				setState(4007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(4006);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_SHORT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4009);
				match(BINARY_SHORT);
				setState(4011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(4010);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_LONG:
				enterOuterAlt(_localctx, 4);
				{
				setState(4013);
				match(BINARY_LONG);
				setState(4015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(4014);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4017);
				match(BINARY_DOUBLE);
				setState(4019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(4018);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case COMPUTATIONAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4021);
				match(COMPUTATIONAL);
				}
				break;
			case COMPUTATIONAL_1:
				enterOuterAlt(_localctx, 7);
				{
				setState(4022);
				match(COMPUTATIONAL_1);
				}
				break;
			case COMPUTATIONAL_2:
				enterOuterAlt(_localctx, 8);
				{
				setState(4023);
				match(COMPUTATIONAL_2);
				}
				break;
			case COMPUTATIONAL_3:
				enterOuterAlt(_localctx, 9);
				{
				setState(4024);
				match(COMPUTATIONAL_3);
				}
				break;
			case COMPUTATIONAL_4:
				enterOuterAlt(_localctx, 10);
				{
				setState(4025);
				match(COMPUTATIONAL_4);
				}
				break;
			case COMPUTATIONAL_5:
				enterOuterAlt(_localctx, 11);
				{
				setState(4026);
				match(COMPUTATIONAL_5);
				}
				break;
			case COMPUTATIONAL_X:
				enterOuterAlt(_localctx, 12);
				{
				setState(4027);
				match(COMPUTATIONAL_X);
				}
				break;
			case COMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(4028);
				match(COMP);
				}
				break;
			case COMP_1:
				enterOuterAlt(_localctx, 14);
				{
				setState(4029);
				match(COMP_1);
				}
				break;
			case COMP_2:
				enterOuterAlt(_localctx, 15);
				{
				setState(4030);
				match(COMP_2);
				}
				break;
			case COMP_3:
				enterOuterAlt(_localctx, 16);
				{
				setState(4031);
				match(COMP_3);
				}
				break;
			case COMP_4:
				enterOuterAlt(_localctx, 17);
				{
				setState(4032);
				match(COMP_4);
				}
				break;
			case COMP_5:
				enterOuterAlt(_localctx, 18);
				{
				setState(4033);
				match(COMP_5);
				}
				break;
			case COMP_X:
				enterOuterAlt(_localctx, 19);
				{
				setState(4034);
				match(COMP_X);
				}
				break;
			case DISPLAY:
				enterOuterAlt(_localctx, 20);
				{
				setState(4035);
				match(DISPLAY);
				}
				break;
			case FLOAT_SHORT:
				enterOuterAlt(_localctx, 21);
				{
				setState(4036);
				match(FLOAT_SHORT);
				}
				break;
			case FLOAT_LONG:
				enterOuterAlt(_localctx, 22);
				{
				setState(4037);
				match(FLOAT_LONG);
				}
				break;
			case FLOAT_EXTENDED:
				enterOuterAlt(_localctx, 23);
				{
				setState(4038);
				match(FLOAT_EXTENDED);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 24);
				{
				setState(4039);
				match(INDEX);
				}
				break;
			case PACKED_DECIMAL:
				enterOuterAlt(_localctx, 25);
				{
				setState(4040);
				match(PACKED_DECIMAL);
				}
				break;
			case POINTER:
				enterOuterAlt(_localctx, 26);
				{
				setState(4041);
				match(POINTER);
				}
				break;
			case POINTER_64:
				enterOuterAlt(_localctx, 27);
				{
				setState(4042);
				match(POINTER_64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PictureContext extends ParserRuleContext {
		public Character_stringContext character_string() {
			return getRuleContext(Character_stringContext.class,0);
		}
		public TerminalNode PICTURE() { return getToken(cobolParser.PICTURE, 0); }
		public TerminalNode PIC() { return getToken(cobolParser.PIC, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode IS_IN_PICTURE_() { return getToken(cobolParser.IS_IN_PICTURE_, 0); }
		public PictureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_picture; }
	}

	public final PictureContext picture() throws RecognitionException {
		PictureContext _localctx = new PictureContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_picture);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			_la = _input.LA(1);
			if ( !(_la==PIC || _la==PICTURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==IS_IN_PICTURE_) {
				{
				setState(4046);
				_la = _input.LA(1);
				if ( !(_la==IS || _la==IS_IN_PICTURE_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4049);
			character_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_stringContext extends ParserRuleContext {
		public TerminalNode CHARACTER_STRING_() { return getToken(cobolParser.CHARACTER_STRING_, 0); }
		public Character_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string; }
	}

	public final Character_stringContext character_string() throws RecognitionException {
		Character_stringContext _localctx = new Character_stringContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_character_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			match(CHARACTER_STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_data_itemContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Other_data_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_data_item; }
	}

	public final Other_data_itemContext other_data_item() throws RecognitionException {
		Other_data_itemContext _localctx = new Other_data_itemContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_other_data_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4053);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Data_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_name; }
	}

	public final Data_nameContext data_name() throws RecognitionException {
		Data_nameContext _localctx = new Data_nameContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_data_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sd_clauseContext extends ParserRuleContext {
		public RecordContext record() {
			return getRuleContext(RecordContext.class,0);
		}
		public Data_recContext data_rec() {
			return getRuleContext(Data_recContext.class,0);
		}
		public Sd_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sd_clause; }
	}

	public final Sd_clauseContext sd_clause() throws RecognitionException {
		Sd_clauseContext _localctx = new Sd_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_sd_clause);
		try {
			setState(4059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4057);
				record();
				}
				break;
			case DATA:
				enterOuterAlt(_localctx, 2);
				{
				setState(4058);
				data_rec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_isContext extends ParserRuleContext {
		public TerminalNode REPORT() { return getToken(cobolParser.REPORT, 0); }
		public TerminalNode REPORTS() { return getToken(cobolParser.REPORTS, 0); }
		public List<Report_nameContext> report_name() {
			return getRuleContexts(Report_nameContext.class);
		}
		public Report_nameContext report_name(int i) {
			return getRuleContext(Report_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public Report_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_is; }
	}

	public final Report_isContext report_is() throws RecognitionException {
		Report_isContext _localctx = new Report_isContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_report_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPORT:
				{
				setState(4061);
				match(REPORT);
				setState(4063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4062);
					match(IS);
					}
				}

				}
				break;
			case REPORTS:
				{
				setState(4065);
				match(REPORTS);
				setState(4067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(4066);
					match(ARE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4072); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4071);
				report_name();
				}
				}
				setState(4074); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Report_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Report_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_report_name; }
	}

	public final Report_nameContext report_name() throws RecognitionException {
		Report_nameContext _localctx = new Report_nameContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_report_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinageContext extends ParserRuleContext {
		public TerminalNode LINAGE() { return getToken(cobolParser.LINAGE, 0); }
		public Page_sizeContext page_size() {
			return getRuleContext(Page_sizeContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<TerminalNode> LINES() { return getTokens(cobolParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(cobolParser.LINES, i);
		}
		public TerminalNode FOOTING() { return getToken(cobolParser.FOOTING, 0); }
		public Footing_lineContext footing_line() {
			return getRuleContext(Footing_lineContext.class,0);
		}
		public TerminalNode TOP() { return getToken(cobolParser.TOP, 0); }
		public Top_linesContext top_lines() {
			return getRuleContext(Top_linesContext.class,0);
		}
		public TerminalNode BOTTOM() { return getToken(cobolParser.BOTTOM, 0); }
		public Bottom_linesContext bottom_lines() {
			return getRuleContext(Bottom_linesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public List<TerminalNode> AT() { return getTokens(cobolParser.AT); }
		public TerminalNode AT(int i) {
			return getToken(cobolParser.AT, i);
		}
		public LinageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linage; }
	}

	public final LinageContext linage() throws RecognitionException {
		LinageContext _localctx = new LinageContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_linage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			match(LINAGE);
			setState(4080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4079);
				match(IS);
				}
			}

			setState(4082);
			page_size();
			setState(4084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(4083);
				match(LINES);
				}
				break;
			}
			setState(4094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOOTING || _la==WITH) {
				{
				setState(4087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4086);
					match(WITH);
					}
				}

				setState(4089);
				match(FOOTING);
				setState(4091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(4090);
					match(AT);
					}
				}

				setState(4093);
				footing_line();
				}
			}

			setState(4104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(4096);
					match(LINES);
					}
				}

				setState(4100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(4099);
					match(AT);
					}
				}

				setState(4102);
				match(TOP);
				setState(4103);
				top_lines();
				}
				break;
			}
			setState(4114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT || _la==BOTTOM || _la==LINES) {
				{
				setState(4107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(4106);
					match(LINES);
					}
				}

				setState(4110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT) {
					{
					setState(4109);
					match(AT);
					}
				}

				setState(4112);
				match(BOTTOM);
				setState(4113);
				bottom_lines();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bottom_linesContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Bottom_linesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bottom_lines; }
	}

	public final Bottom_linesContext bottom_lines() throws RecognitionException {
		Bottom_linesContext _localctx = new Bottom_linesContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_bottom_lines);
		int _la;
		try {
			setState(4118);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4116);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4117);
				identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_linesContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Top_linesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_lines; }
	}

	public final Top_linesContext top_lines() throws RecognitionException {
		Top_linesContext _localctx = new Top_linesContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_top_lines);
		int _la;
		try {
			setState(4122);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4120);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4121);
				identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Footing_lineContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Footing_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_footing_line; }
	}

	public final Footing_lineContext footing_line() throws RecognitionException {
		Footing_lineContext _localctx = new Footing_lineContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_footing_line);
		int _la;
		try {
			setState(4126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4124);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4125);
				identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Page_sizeContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Page_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_page_size; }
	}

	public final Page_sizeContext page_size() throws RecognitionException {
		Page_sizeContext _localctx = new Page_sizeContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_page_size);
		int _la;
		try {
			setState(4130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4128);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4129);
				identifier_result();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_recContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(cobolParser.DATA, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public List<Rec_nameContext> rec_name() {
			return getRuleContexts(Rec_nameContext.class);
		}
		public Rec_nameContext rec_name(int i) {
			return getRuleContext(Rec_nameContext.class,i);
		}
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Data_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_rec; }
	}

	public final Data_recContext data_rec() throws RecognitionException {
		Data_recContext _localctx = new Data_recContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_data_rec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4132);
			match(DATA);
			setState(4141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORDS:
				{
				setState(4133);
				match(RECORDS);
				setState(4135);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(4134);
					match(ARE);
					}
				}

				}
				break;
			case RECORD:
				{
				setState(4137);
				match(RECORD);
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4138);
					match(IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4144); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4143);
				rec_name();
				}
				}
				setState(4146); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rec_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Rec_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rec_name; }
	}

	public final Rec_nameContext rec_name() throws RecognitionException {
		Rec_nameContext _localctx = new Rec_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_rec_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_idContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Value_of_id_definitionContext value_of_id_definition() {
			return getRuleContext(Value_of_id_definitionContext.class,0);
		}
		public TerminalNode ID() { return getToken(cobolParser.ID, 0); }
		public TerminalNode FILE_ID() { return getToken(cobolParser.FILE_ID, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Value_of_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_id; }
	}

	public final Value_of_idContext value_of_id() throws RecognitionException {
		Value_of_idContext _localctx = new Value_of_idContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_value_of_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4150);
			match(VALUE);
			setState(4151);
			match(OF);
			setState(4152);
			_la = _input.LA(1);
			if ( !(_la==FILE_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4153);
				match(IS);
				}
			}

			setState(4156);
			value_of_id_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_of_id_definitionContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Value_of_id_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_of_id_definition; }
	}

	public final Value_of_id_definitionContext value_of_id_definition() throws RecognitionException {
		Value_of_id_definitionContext _localctx = new Value_of_id_definitionContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_value_of_id_definition);
		try {
			setState(4160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4158);
				match(STRING_LITERAL_);
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4159);
				qualified_data_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(cobolParser.LABEL, 0); }
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode OMITTED() { return getToken(cobolParser.OMITTED, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_label);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4162);
			match(LABEL);
			setState(4171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORDS:
				{
				setState(4163);
				match(RECORDS);
				setState(4165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARE) {
					{
					setState(4164);
					match(ARE);
					}
				}

				}
				break;
			case RECORD:
				{
				setState(4167);
				match(RECORD);
				setState(4169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4168);
					match(IS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4173);
			_la = _input.LA(1);
			if ( !(_la==OMITTED || _la==STANDARD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RecordContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Record_definitionContext record_definition() {
			return getRuleContext(Record_definitionContext.class,0);
		}
		public RecordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record; }
	}

	public final RecordContext record() throws RecognitionException {
		RecordContext _localctx = new RecordContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_record);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			match(RECORD);
			setState(4176);
			record_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_definitionContext extends ParserRuleContext {
		public Longest_recContext longest_rec() {
			return getRuleContext(Longest_recContext.class,0);
		}
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public Shortest_recContext shortest_rec() {
			return getRuleContext(Shortest_recContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode VARYING() { return getToken(cobolParser.VARYING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public TerminalNode DEPENDING() { return getToken(cobolParser.DEPENDING, 0); }
		public Depending_itemContext depending_item() {
			return getRuleContext(Depending_itemContext.class,0);
		}
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Record_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_definition; }
	}

	public final Record_definitionContext record_definition() throws RecognitionException {
		Record_definitionContext _localctx = new Record_definitionContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_record_definition);
		int _la;
		try {
			setState(4220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINS:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTAINS) {
					{
					setState(4178);
					match(CONTAINS);
					}
				}

				setState(4184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(4181);
					shortest_rec();
					setState(4182);
					match(TO);
					}
					break;
				}
				setState(4186);
				longest_rec();
				setState(4188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTERS) {
					{
					setState(4187);
					match(CHARACTERS);
					}
				}

				}
				break;
			case IS:
			case VARYING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4190);
					match(IS);
					}
				}

				setState(4193);
				match(VARYING);
				setState(4195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4194);
					match(IN);
					}
				}

				setState(4198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4197);
					match(SIZE);
					}
				}

				setState(4204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) {
					{
					setState(4201);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(4200);
						match(FROM);
						}
					}

					setState(4203);
					shortest_rec();
					}
				}

				setState(4208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4206);
					match(TO);
					setState(4207);
					longest_rec();
					}
				}

				setState(4211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTERS) {
					{
					setState(4210);
					match(CHARACTERS);
					}
				}

				setState(4218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEPENDING) {
					{
					setState(4213);
					match(DEPENDING);
					setState(4215);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(4214);
						match(ON);
						}
					}

					setState(4217);
					depending_item();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Depending_itemContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Depending_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_depending_item; }
	}

	public final Depending_itemContext depending_item() throws RecognitionException {
		Depending_itemContext _localctx = new Depending_itemContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_depending_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4222);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shortest_recContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Shortest_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shortest_rec; }
	}

	public final Shortest_recContext shortest_rec() throws RecognitionException {
		Shortest_recContext _localctx = new Shortest_recContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_shortest_rec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4224);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Longest_recContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Longest_recContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_longest_rec; }
	}

	public final Longest_recContext longest_rec() throws RecognitionException {
		Longest_recContext _localctx = new Longest_recContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_longest_rec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4226);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_description_entryContext extends ParserRuleContext {
		public Level_numberContext level_number() {
			return getRuleContext(Level_numberContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public Data_nameContext data_name() {
			return getRuleContext(Data_nameContext.class,0);
		}
		public TerminalNode FILLER() { return getToken(cobolParser.FILLER, 0); }
		public List<Screen_description_clauseContext> screen_description_clause() {
			return getRuleContexts(Screen_description_clauseContext.class);
		}
		public Screen_description_clauseContext screen_description_clause(int i) {
			return getRuleContext(Screen_description_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Screen_description_entryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_description_entry; }
	}

	public final Screen_description_entryContext screen_description_entry() throws RecognitionException {
		Screen_description_entryContext _localctx = new Screen_description_entryContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_screen_description_entry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			level_number();
			setState(4231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				{
				setState(4229);
				data_name();
				}
				break;
			case FILLER:
				{
				setState(4230);
				match(FILLER);
				}
				break;
			case AUTO:
			case BACKGROUND_COLOR:
			case BELL:
			case BLANK:
			case BLINK:
			case COLUMN:
			case DISPLAY:
			case ERASE:
			case FOREGROUND_COLOR:
			case FULL:
			case HIGHLIGHT:
			case JUST:
			case JUSTIFIED:
			case LEADING:
			case LINE:
			case LOWLIGHT:
			case REQUIRED:
			case REVERSE_VIDEO:
			case SECURE:
			case SIGN:
			case TRAILING:
			case UNDERLINE:
			case USAGE:
			case VALUE:
			case PIC:
			case PICTURE:
			case DOT_:
				break;
			default:
				break;
			}
			setState(4236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (AUTO - 33)) | (1L << (BACKGROUND_COLOR - 33)) | (1L << (BELL - 33)) | (1L << (BLANK - 33)) | (1L << (BLINK - 33)) | (1L << (COLUMN - 33)))) != 0) || _la==DISPLAY || _la==ERASE || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (FOREGROUND_COLOR - 188)) | (1L << (FULL - 188)) | (1L << (HIGHLIGHT - 188)) | (1L << (JUST - 188)) | (1L << (JUSTIFIED - 188)) | (1L << (LEADING - 188)) | (1L << (LINE - 188)) | (1L << (LOWLIGHT - 188)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (REQUIRED - 322)) | (1L << (REVERSE_VIDEO - 322)) | (1L << (SECURE - 322)) | (1L << (SIGN - 322)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (TRAILING - 393)) | (1L << (UNDERLINE - 393)) | (1L << (USAGE - 393)) | (1L << (VALUE - 393)) | (1L << (PIC - 393)) | (1L << (PICTURE - 393)))) != 0)) {
				{
				{
				setState(4233);
				screen_description_clause();
				}
				}
				setState(4238);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4239);
			match(DOT_);
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4240);
				replace_statement();
				}
				}
				setState(4245);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Screen_description_clauseContext extends ParserRuleContext {
		public Scr_blankContext scr_blank() {
			return getRuleContext(Scr_blankContext.class,0);
		}
		public Scr_foregroundContext scr_foreground() {
			return getRuleContext(Scr_foregroundContext.class,0);
		}
		public Scr_backgroundContext scr_background() {
			return getRuleContext(Scr_backgroundContext.class,0);
		}
		public Scr_autoContext scr_auto() {
			return getRuleContext(Scr_autoContext.class,0);
		}
		public Scr_secureContext scr_secure() {
			return getRuleContext(Scr_secureContext.class,0);
		}
		public Scr_requiredContext scr_required() {
			return getRuleContext(Scr_requiredContext.class,0);
		}
		public Usage_displayContext usage_display() {
			return getRuleContext(Usage_displayContext.class,0);
		}
		public Sign_isContext sign_is() {
			return getRuleContext(Sign_isContext.class,0);
		}
		public Scr_fullContext scr_full() {
			return getRuleContext(Scr_fullContext.class,0);
		}
		public Scr_bellContext scr_bell() {
			return getRuleContext(Scr_bellContext.class,0);
		}
		public Scr_blinkContext scr_blink() {
			return getRuleContext(Scr_blinkContext.class,0);
		}
		public Scr_eraseContext scr_erase() {
			return getRuleContext(Scr_eraseContext.class,0);
		}
		public Scr_lightContext scr_light() {
			return getRuleContext(Scr_lightContext.class,0);
		}
		public Scr_reverseContext scr_reverse() {
			return getRuleContext(Scr_reverseContext.class,0);
		}
		public Scr_underlineContext scr_underline() {
			return getRuleContext(Scr_underlineContext.class,0);
		}
		public Scr_lineContext scr_line() {
			return getRuleContext(Scr_lineContext.class,0);
		}
		public Scr_columnContext scr_column() {
			return getRuleContext(Scr_columnContext.class,0);
		}
		public Scr_valueContext scr_value() {
			return getRuleContext(Scr_valueContext.class,0);
		}
		public Black_when_zeroContext black_when_zero() {
			return getRuleContext(Black_when_zeroContext.class,0);
		}
		public JustifiedContext justified() {
			return getRuleContext(JustifiedContext.class,0);
		}
		public Scr_pictureContext scr_picture() {
			return getRuleContext(Scr_pictureContext.class,0);
		}
		public Screen_description_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_screen_description_clause; }
	}

	public final Screen_description_clauseContext screen_description_clause() throws RecognitionException {
		Screen_description_clauseContext _localctx = new Screen_description_clauseContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_screen_description_clause);
		try {
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4246);
				scr_blank();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4247);
				scr_foreground();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4248);
				scr_background();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4249);
				scr_auto();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4250);
				scr_secure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4251);
				scr_required();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4252);
				usage_display();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4253);
				sign_is();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4254);
				scr_full();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4255);
				scr_bell();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4256);
				scr_blink();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4257);
				scr_erase();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4258);
				scr_light();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4259);
				scr_reverse();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4260);
				scr_underline();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4261);
				scr_line();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4262);
				scr_column();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4263);
				scr_value();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4264);
				black_when_zero();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4265);
				justified();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4266);
				scr_picture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_lightContext extends ParserRuleContext {
		public Scr_highlightContext scr_highlight() {
			return getRuleContext(Scr_highlightContext.class,0);
		}
		public Scr_lowlightContext scr_lowlight() {
			return getRuleContext(Scr_lowlightContext.class,0);
		}
		public Scr_lightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_light; }
	}

	public final Scr_lightContext scr_light() throws RecognitionException {
		Scr_lightContext _localctx = new Scr_lightContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_scr_light);
		try {
			setState(4271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HIGHLIGHT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4269);
				scr_highlight();
				}
				break;
			case LOWLIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4270);
				scr_lowlight();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pictureContext extends ParserRuleContext {
		public PictureContext picture() {
			return getRuleContext(PictureContext.class,0);
		}
		public Scr_pic_usingContext scr_pic_using() {
			return getRuleContext(Scr_pic_usingContext.class,0);
		}
		public Scr_pic_fromContext scr_pic_from() {
			return getRuleContext(Scr_pic_fromContext.class,0);
		}
		public Scr_pic_toContext scr_pic_to() {
			return getRuleContext(Scr_pic_toContext.class,0);
		}
		public Scr_pictureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_picture; }
	}

	public final Scr_pictureContext scr_picture() throws RecognitionException {
		Scr_pictureContext _localctx = new Scr_pictureContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_scr_picture);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4273);
			picture();
			setState(4280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				{
				setState(4274);
				scr_pic_using();
				}
				break;
			case FROM:
				{
				setState(4275);
				scr_pic_from();
				setState(4277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4276);
					scr_pic_to();
					}
				}

				}
				break;
			case TO:
				{
				setState(4279);
				scr_pic_to();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_valueContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(cobolParser.VALUE, 0); }
		public Nonnumeric_literalContext nonnumeric_literal() {
			return getRuleContext(Nonnumeric_literalContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Scr_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_value; }
	}

	public final Scr_valueContext scr_value() throws RecognitionException {
		Scr_valueContext _localctx = new Scr_valueContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_scr_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			match(VALUE);
			setState(4284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4283);
				match(IS);
				}
			}

			setState(4286);
			nonnumeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_columnContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(cobolParser.COLUMN, 0); }
		public Src_numberContext src_number() {
			return getRuleContext(Src_numberContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Scr_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_column; }
	}

	public final Scr_columnContext scr_column() throws RecognitionException {
		Scr_columnContext _localctx = new Scr_columnContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_scr_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4288);
			match(COLUMN);
			setState(4290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(4289);
				match(NUMBER);
				}
			}

			setState(4293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4292);
				match(IS);
				}
			}

			setState(4296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS) {
				{
				setState(4295);
				match(PLUS);
				}
			}

			setState(4298);
			src_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_lineContext extends ParserRuleContext {
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Src_numberContext src_number() {
			return getRuleContext(Src_numberContext.class,0);
		}
		public TerminalNode NUMBER() { return getToken(cobolParser.NUMBER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode PLUS() { return getToken(cobolParser.PLUS, 0); }
		public Scr_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_line; }
	}

	public final Scr_lineContext scr_line() throws RecognitionException {
		Scr_lineContext _localctx = new Scr_lineContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_scr_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(LINE);
			setState(4302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER) {
				{
				setState(4301);
				match(NUMBER);
				}
			}

			setState(4305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4304);
				match(IS);
				}
			}

			setState(4308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS) {
				{
				setState(4307);
				match(PLUS);
				}
			}

			setState(4310);
			src_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_underlineContext extends ParserRuleContext {
		public TerminalNode UNDERLINE() { return getToken(cobolParser.UNDERLINE, 0); }
		public Scr_underlineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_underline; }
	}

	public final Scr_underlineContext scr_underline() throws RecognitionException {
		Scr_underlineContext _localctx = new Scr_underlineContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_scr_underline);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4312);
			match(UNDERLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_reverseContext extends ParserRuleContext {
		public TerminalNode REVERSE_VIDEO() { return getToken(cobolParser.REVERSE_VIDEO, 0); }
		public Scr_reverseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_reverse; }
	}

	public final Scr_reverseContext scr_reverse() throws RecognitionException {
		Scr_reverseContext _localctx = new Scr_reverseContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_scr_reverse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(REVERSE_VIDEO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_lowlightContext extends ParserRuleContext {
		public TerminalNode LOWLIGHT() { return getToken(cobolParser.LOWLIGHT, 0); }
		public Scr_lowlightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_lowlight; }
	}

	public final Scr_lowlightContext scr_lowlight() throws RecognitionException {
		Scr_lowlightContext _localctx = new Scr_lowlightContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_scr_lowlight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4316);
			match(LOWLIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_highlightContext extends ParserRuleContext {
		public TerminalNode HIGHLIGHT() { return getToken(cobolParser.HIGHLIGHT, 0); }
		public Scr_highlightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_highlight; }
	}

	public final Scr_highlightContext scr_highlight() throws RecognitionException {
		Scr_highlightContext _localctx = new Scr_highlightContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_scr_highlight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4318);
			match(HIGHLIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_eraseContext extends ParserRuleContext {
		public TerminalNode ERASE() { return getToken(cobolParser.ERASE, 0); }
		public TerminalNode EOL() { return getToken(cobolParser.EOL, 0); }
		public TerminalNode EOS() { return getToken(cobolParser.EOS, 0); }
		public Scr_eraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_erase; }
	}

	public final Scr_eraseContext scr_erase() throws RecognitionException {
		Scr_eraseContext _localctx = new Scr_eraseContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_scr_erase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			match(ERASE);
			setState(4321);
			_la = _input.LA(1);
			if ( !(_la==EOL || _la==EOS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_blinkContext extends ParserRuleContext {
		public TerminalNode BLINK() { return getToken(cobolParser.BLINK, 0); }
		public Scr_blinkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_blink; }
	}

	public final Scr_blinkContext scr_blink() throws RecognitionException {
		Scr_blinkContext _localctx = new Scr_blinkContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_scr_blink);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			match(BLINK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_bellContext extends ParserRuleContext {
		public TerminalNode BELL() { return getToken(cobolParser.BELL, 0); }
		public Scr_bellContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_bell; }
	}

	public final Scr_bellContext scr_bell() throws RecognitionException {
		Scr_bellContext _localctx = new Scr_bellContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_scr_bell);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4325);
			match(BELL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_fullContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(cobolParser.FULL, 0); }
		public Scr_fullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_full; }
	}

	public final Scr_fullContext scr_full() throws RecognitionException {
		Scr_fullContext _localctx = new Scr_fullContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_scr_full);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4327);
			match(FULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_requiredContext extends ParserRuleContext {
		public TerminalNode REQUIRED() { return getToken(cobolParser.REQUIRED, 0); }
		public Scr_requiredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_required; }
	}

	public final Scr_requiredContext scr_required() throws RecognitionException {
		Scr_requiredContext _localctx = new Scr_requiredContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_scr_required);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4329);
			match(REQUIRED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_secureContext extends ParserRuleContext {
		public TerminalNode SECURE() { return getToken(cobolParser.SECURE, 0); }
		public Scr_secureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_secure; }
	}

	public final Scr_secureContext scr_secure() throws RecognitionException {
		Scr_secureContext _localctx = new Scr_secureContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_scr_secure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4331);
			match(SECURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_autoContext extends ParserRuleContext {
		public TerminalNode AUTO() { return getToken(cobolParser.AUTO, 0); }
		public Scr_autoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_auto; }
	}

	public final Scr_autoContext scr_auto() throws RecognitionException {
		Scr_autoContext _localctx = new Scr_autoContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_scr_auto);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4333);
			match(AUTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_backgroundContext extends ParserRuleContext {
		public TerminalNode BACKGROUND_COLOR() { return getToken(cobolParser.BACKGROUND_COLOR, 0); }
		public Color_numContext color_num() {
			return getRuleContext(Color_numContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Scr_backgroundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_background; }
	}

	public final Scr_backgroundContext scr_background() throws RecognitionException {
		Scr_backgroundContext _localctx = new Scr_backgroundContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_scr_background);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4335);
			match(BACKGROUND_COLOR);
			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4336);
				match(IS);
				}
			}

			setState(4339);
			color_num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_foregroundContext extends ParserRuleContext {
		public TerminalNode FOREGROUND_COLOR() { return getToken(cobolParser.FOREGROUND_COLOR, 0); }
		public Color_numContext color_num() {
			return getRuleContext(Color_numContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Scr_foregroundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_foreground; }
	}

	public final Scr_foregroundContext scr_foreground() throws RecognitionException {
		Scr_foregroundContext _localctx = new Scr_foregroundContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_scr_foreground);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			match(FOREGROUND_COLOR);
			setState(4343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4342);
				match(IS);
				}
			}

			setState(4345);
			color_num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_blankContext extends ParserRuleContext {
		public TerminalNode BLANK() { return getToken(cobolParser.BLANK, 0); }
		public TerminalNode SCREEN() { return getToken(cobolParser.SCREEN, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public Scr_blankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_blank; }
	}

	public final Scr_blankContext scr_blank() throws RecognitionException {
		Scr_blankContext _localctx = new Scr_blankContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_scr_blank);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4347);
			match(BLANK);
			setState(4348);
			_la = _input.LA(1);
			if ( !(_la==LINE || _la==SCREEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_usingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(cobolParser.USING, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Scr_pic_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_using; }
	}

	public final Scr_pic_usingContext scr_pic_using() throws RecognitionException {
		Scr_pic_usingContext _localctx = new Scr_pic_usingContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_scr_pic_using);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4350);
			match(USING);
			setState(4351);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_fromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(cobolParser.FROM, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Nonnumeric_literalContext nonnumeric_literal() {
			return getRuleContext(Nonnumeric_literalContext.class,0);
		}
		public Scr_pic_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_from; }
	}

	public final Scr_pic_fromContext scr_pic_from() throws RecognitionException {
		Scr_pic_fromContext _localctx = new Scr_pic_fromContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_scr_pic_from);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4353);
			match(FROM);
			setState(4356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				{
				setState(4354);
				identifier_result();
				}
				break;
			case STRING_LITERAL_:
				{
				setState(4355);
				nonnumeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scr_pic_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Scr_pic_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scr_pic_to; }
	}

	public final Scr_pic_toContext scr_pic_to() throws RecognitionException {
		Scr_pic_toContext _localctx = new Scr_pic_toContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_scr_pic_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4358);
			match(TO);
			setState(4359);
			identifier_result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonnumeric_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Nonnumeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonnumeric_literal; }
	}

	public final Nonnumeric_literalContext nonnumeric_literal() throws RecognitionException {
		Nonnumeric_literalContext _localctx = new Nonnumeric_literalContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_nonnumeric_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Src_numberContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Src_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_src_number; }
	}

	public final Src_numberContext src_number() throws RecognitionException {
		Src_numberContext _localctx = new Src_numberContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_src_number);
		int _la;
		try {
			setState(4365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4363);
				identifier_result();
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4364);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Color_numContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Color_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_color_num; }
	}

	public final Color_numContext color_num() throws RecognitionException {
		Color_numContext _localctx = new Color_numContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_color_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_idContext extends ParserRuleContext {
		public TerminalNode PROGRAM_ID() { return getToken(cobolParser.PROGRAM_ID, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public Program_nameContext program_name() {
			return getRuleContext(Program_nameContext.class,0);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Common_initialContext common_initial() {
			return getRuleContext(Common_initialContext.class,0);
		}
		public With_identContext with_ident() {
			return getRuleContext(With_identContext.class,0);
		}
		public Program_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_id; }
	}

	public final Program_idContext program_id() throws RecognitionException {
		Program_idContext _localctx = new Program_idContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_program_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			match(PROGRAM_ID);
			setState(4370);
			match(DOT_);
			setState(4374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4371);
				replace_statement();
				}
				}
				setState(4376);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4377);
			program_name();
			setState(4379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMON || _la==INITIAL || _la==IS) {
				{
				setState(4378);
				common_initial();
				}
			}

			setState(4382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENT || _la==WITH) {
				{
				setState(4381);
				with_ident();
				}
			}

			setState(4384);
			match(DOT_);
			setState(4388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4385);
				replace_statement();
				}
				}
				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Program_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_name; }
	}

	public final Program_nameContext program_name() throws RecognitionException {
		Program_nameContext _localctx = new Program_nameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_program_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_initialContext extends ParserRuleContext {
		public TerminalNode COMMON() { return getToken(cobolParser.COMMON, 0); }
		public TerminalNode INITIAL() { return getToken(cobolParser.INITIAL, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public Common_initialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_initial; }
	}

	public final Common_initialContext common_initial() throws RecognitionException {
		Common_initialContext _localctx = new Common_initialContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_common_initial);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4393);
				match(IS);
				}
			}

			setState(4404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMON:
				{
				setState(4396);
				match(COMMON);
				setState(4398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INITIAL) {
					{
					setState(4397);
					match(INITIAL);
					}
				}

				}
				break;
			case INITIAL:
				{
				setState(4400);
				match(INITIAL);
				setState(4402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMON) {
					{
					setState(4401);
					match(COMMON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROGRAM) {
				{
				setState(4406);
				match(PROGRAM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_identContext extends ParserRuleContext {
		public TerminalNode IDENT() { return getToken(cobolParser.IDENT, 0); }
		public Ident_stringContext ident_string() {
			return getRuleContext(Ident_stringContext.class,0);
		}
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_identContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_ident; }
	}

	public final With_identContext with_ident() throws RecognitionException {
		With_identContext _localctx = new With_identContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_with_ident);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4409);
				match(WITH);
				}
			}

			setState(4412);
			match(IDENT);
			setState(4413);
			ident_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ident_stringContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Ident_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident_string; }
	}

	public final Ident_stringContext ident_string() throws RecognitionException {
		Ident_stringContext _localctx = new Ident_stringContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_ident_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4415);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallationContext extends ParserRuleContext {
		public TerminalNode INSTALLATION() { return getToken(cobolParser.INSTALLATION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public InstallationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installation; }
	}

	public final InstallationContext installation() throws RecognitionException {
		InstallationContext _localctx = new InstallationContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_installation);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			match(INSTALLATION);
			setState(4418);
			match(DOT_);
			setState(4422);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,662,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4419);
					word_in_area_B();
					}
					} 
				}
				setState(4424);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,662,_ctx);
			}
			setState(4428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4425);
				replace_statement();
				}
				}
				setState(4430);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_writtenContext extends ParserRuleContext {
		public TerminalNode DATE_WRITTEN() { return getToken(cobolParser.DATE_WRITTEN, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Date_writtenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_written; }
	}

	public final Date_writtenContext date_written() throws RecognitionException {
		Date_writtenContext _localctx = new Date_writtenContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_date_written);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4431);
			match(DATE_WRITTEN);
			setState(4432);
			match(DOT_);
			setState(4436);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4433);
					word_in_area_B();
					}
					} 
				}
				setState(4438);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			}
			setState(4442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4439);
				replace_statement();
				}
				}
				setState(4444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_compiledContext extends ParserRuleContext {
		public TerminalNode DATE_COMPILED() { return getToken(cobolParser.DATE_COMPILED, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Date_compiledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_compiled; }
	}

	public final Date_compiledContext date_compiled() throws RecognitionException {
		Date_compiledContext _localctx = new Date_compiledContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_date_compiled);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4445);
			match(DATE_COMPILED);
			setState(4446);
			match(DOT_);
			setState(4450);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,666,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4447);
					word_in_area_B();
					}
					} 
				}
				setState(4452);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,666,_ctx);
			}
			setState(4456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4453);
				replace_statement();
				}
				}
				setState(4458);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(cobolParser.SECURITY, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Word_in_area_BContext> word_in_area_B() {
			return getRuleContexts(Word_in_area_BContext.class);
		}
		public Word_in_area_BContext word_in_area_B(int i) {
			return getRuleContext(Word_in_area_BContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public SecurityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security; }
	}

	public final SecurityContext security() throws RecognitionException {
		SecurityContext _localctx = new SecurityContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_security);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4459);
			match(SECURITY);
			setState(4460);
			match(DOT_);
			setState(4464);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,668,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4461);
					word_in_area_B();
					}
					} 
				}
				setState(4466);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,668,_ctx);
			}
			setState(4470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4467);
				replace_statement();
				}
				}
				setState(4472);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Options_Context extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(cobolParser.OPTIONS, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public ArithmeticContext arithmetic() {
			return getRuleContext(ArithmeticContext.class,0);
		}
		public Options_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_options_; }
	}

	public final Options_Context options_() throws RecognitionException {
		Options_Context _localctx = new Options_Context(_ctx, getState());
		enterRule(_localctx, 768, RULE_options_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4473);
			match(OPTIONS);
			setState(4474);
			match(DOT_);
			setState(4478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4475);
				replace_statement();
				}
				}
				setState(4480);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARITHMETIC) {
				{
				setState(4481);
				arithmetic();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArithmeticContext extends ParserRuleContext {
		public TerminalNode ARITHMETIC() { return getToken(cobolParser.ARITHMETIC, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode NATIVE() { return getToken(cobolParser.NATIVE, 0); }
		public TerminalNode STANDARD() { return getToken(cobolParser.STANDARD, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public ArithmeticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic; }
	}

	public final ArithmeticContext arithmetic() throws RecognitionException {
		ArithmeticContext _localctx = new ArithmeticContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_arithmetic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4484);
			match(ARITHMETIC);
			setState(4486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4485);
				match(IS);
				}
			}

			setState(4488);
			_la = _input.LA(1);
			if ( !(_la==NATIVE || _la==STANDARD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4489);
			match(DOT_);
			setState(4493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4490);
				replace_statement();
				}
				}
				setState(4495);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Configuration_sectionContext extends ParserRuleContext {
		public TerminalNode CONFIGURATION() { return getToken(cobolParser.CONFIGURATION, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Source_computerContext source_computer() {
			return getRuleContext(Source_computerContext.class,0);
		}
		public Object_computerContext object_computer() {
			return getRuleContext(Object_computerContext.class,0);
		}
		public Special_namesContext special_names() {
			return getRuleContext(Special_namesContext.class,0);
		}
		public Configuration_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configuration_section; }
	}

	public final Configuration_sectionContext configuration_section() throws RecognitionException {
		Configuration_sectionContext _localctx = new Configuration_sectionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_configuration_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4496);
			match(CONFIGURATION);
			setState(4497);
			match(SECTION);
			setState(4498);
			match(DOT_);
			setState(4502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4499);
				replace_statement();
				}
				}
				setState(4504);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SOURCE_COMPUTER) {
				{
				setState(4505);
				source_computer();
				}
			}

			setState(4509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT_COMPUTER) {
				{
				setState(4508);
				object_computer();
				}
			}

			setState(4512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SPECIAL_NAMES) {
				{
				setState(4511);
				special_names();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Input_output_sectionContext extends ParserRuleContext {
		public TerminalNode INPUT_OUTPUT() { return getToken(cobolParser.INPUT_OUTPUT, 0); }
		public TerminalNode SECTION() { return getToken(cobolParser.SECTION, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public File_controlContext file_control() {
			return getRuleContext(File_controlContext.class,0);
		}
		public I_o_controlContext i_o_control() {
			return getRuleContext(I_o_controlContext.class,0);
		}
		public Input_output_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_input_output_section; }
	}

	public final Input_output_sectionContext input_output_section() throws RecognitionException {
		Input_output_sectionContext _localctx = new Input_output_sectionContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_input_output_section);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4514);
			match(INPUT_OUTPUT);
			setState(4515);
			match(SECTION);
			setState(4516);
			match(DOT_);
			setState(4520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4517);
				replace_statement();
				}
				}
				setState(4522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_CONTROL) {
				{
				setState(4523);
				file_control();
				}
			}

			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==I_O_CONTROL) {
				{
				setState(4526);
				i_o_control();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Source_computerContext extends ParserRuleContext {
		public TerminalNode SOURCE_COMPUTER() { return getToken(cobolParser.SOURCE_COMPUTER, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Computer_typeContext computer_type() {
			return getRuleContext(Computer_typeContext.class,0);
		}
		public With_debuggingContext with_debugging() {
			return getRuleContext(With_debuggingContext.class,0);
		}
		public Source_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source_computer; }
	}

	public final Source_computerContext source_computer() throws RecognitionException {
		Source_computerContext _localctx = new Source_computerContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_source_computer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4529);
			match(SOURCE_COMPUTER);
			setState(4530);
			match(DOT_);
			setState(4534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4531);
				replace_statement();
				}
				}
				setState(4536);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD_) {
				{
				setState(4537);
				computer_type();
				setState(4539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEBUGGING || _la==WITH) {
					{
					setState(4538);
					with_debugging();
					}
				}

				setState(4541);
				match(DOT_);
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==REPLACE) {
					{
					{
					setState(4542);
					replace_statement();
					}
					}
					setState(4547);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Computer_typeContext extends ParserRuleContext {
		public TerminalNode ALPHA() { return getToken(cobolParser.ALPHA, 0); }
		public TerminalNode I64() { return getToken(cobolParser.I64, 0); }
		public TerminalNode VAX() { return getToken(cobolParser.VAX, 0); }
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Computer_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_computer_type; }
	}

	public final Computer_typeContext computer_type() throws RecognitionException {
		Computer_typeContext _localctx = new Computer_typeContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_computer_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4550);
			_la = _input.LA(1);
			if ( !(_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_debuggingContext extends ParserRuleContext {
		public TerminalNode DEBUGGING() { return getToken(cobolParser.DEBUGGING, 0); }
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public With_debuggingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_debugging; }
	}

	public final With_debuggingContext with_debugging() throws RecognitionException {
		With_debuggingContext _localctx = new With_debuggingContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_with_debugging);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4552);
				match(WITH);
				}
			}

			setState(4555);
			match(DEBUGGING);
			setState(4556);
			match(MODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_computerContext extends ParserRuleContext {
		public TerminalNode OBJECT_COMPUTER() { return getToken(cobolParser.OBJECT_COMPUTER, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Computer_typeContext computer_type() {
			return getRuleContext(Computer_typeContext.class,0);
		}
		public Memory_sizeContext memory_size() {
			return getRuleContext(Memory_sizeContext.class,0);
		}
		public Program_collatingContext program_collating() {
			return getRuleContext(Program_collatingContext.class,0);
		}
		public Segment_limitContext segment_limit() {
			return getRuleContext(Segment_limitContext.class,0);
		}
		public Object_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_computer; }
	}

	public final Object_computerContext object_computer() throws RecognitionException {
		Object_computerContext _localctx = new Object_computerContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_object_computer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4558);
			match(OBJECT_COMPUTER);
			setState(4559);
			match(DOT_);
			setState(4563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4560);
				replace_statement();
				}
				}
				setState(4565);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALPHA || _la==I64 || _la==VAX || _la==USER_DEFINED_WORD_) {
				{
				setState(4566);
				computer_type();
				setState(4568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MEMORY) {
					{
					setState(4567);
					memory_size();
					}
				}

				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATING || _la==PROGRAM || _la==SEQUENCE) {
					{
					setState(4570);
					program_collating();
					}
				}

				setState(4574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT_LIMIT) {
					{
					setState(4573);
					segment_limit();
					}
				}

				setState(4576);
				match(DOT_);
				setState(4580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==REPLACE) {
					{
					{
					setState(4577);
					replace_statement();
					}
					}
					setState(4582);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_sizeContext extends ParserRuleContext {
		public TerminalNode MEMORY() { return getToken(cobolParser.MEMORY, 0); }
		public Memory_size_amountContext memory_size_amount() {
			return getRuleContext(Memory_size_amountContext.class,0);
		}
		public Memory_size_unitContext memory_size_unit() {
			return getRuleContext(Memory_size_unitContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(cobolParser.SIZE, 0); }
		public Memory_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size; }
	}

	public final Memory_sizeContext memory_size() throws RecognitionException {
		Memory_sizeContext _localctx = new Memory_sizeContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_memory_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4585);
			match(MEMORY);
			setState(4587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(4586);
				match(SIZE);
				}
			}

			setState(4589);
			memory_size_amount();
			setState(4590);
			memory_size_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_size_amountContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Memory_size_amountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size_amount; }
	}

	public final Memory_size_amountContext memory_size_amount() throws RecognitionException {
		Memory_size_amountContext _localctx = new Memory_size_amountContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_memory_size_amount);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4592);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Memory_size_unitContext extends ParserRuleContext {
		public TerminalNode WORDS() { return getToken(cobolParser.WORDS, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode MODULES() { return getToken(cobolParser.MODULES, 0); }
		public Memory_size_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_memory_size_unit; }
	}

	public final Memory_size_unitContext memory_size_unit() throws RecognitionException {
		Memory_size_unitContext _localctx = new Memory_size_unitContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_memory_size_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			_la = _input.LA(1);
			if ( !(_la==CHARACTERS || _la==MODULES || _la==WORDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Program_collatingContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(cobolParser.SEQUENCE, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode PROGRAM() { return getToken(cobolParser.PROGRAM, 0); }
		public TerminalNode COLLATING() { return getToken(cobolParser.COLLATING, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Program_collatingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program_collating; }
	}

	public final Program_collatingContext program_collating() throws RecognitionException {
		Program_collatingContext _localctx = new Program_collatingContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_program_collating);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROGRAM) {
				{
				setState(4596);
				match(PROGRAM);
				}
			}

			setState(4600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATING) {
				{
				setState(4599);
				match(COLLATING);
				}
			}

			setState(4602);
			match(SEQUENCE);
			setState(4604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4603);
				match(IS);
				}
			}

			setState(4606);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alpha_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Alpha_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alpha_name; }
	}

	public final Alpha_nameContext alpha_name() throws RecognitionException {
		Alpha_nameContext _localctx = new Alpha_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_alpha_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4608);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_limitContext extends ParserRuleContext {
		public TerminalNode SEGMENT_LIMIT() { return getToken(cobolParser.SEGMENT_LIMIT, 0); }
		public Segment_numberContext segment_number() {
			return getRuleContext(Segment_numberContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Segment_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_limit; }
	}

	public final Segment_limitContext segment_limit() throws RecognitionException {
		Segment_limitContext _localctx = new Segment_limitContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_segment_limit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4610);
			match(SEGMENT_LIMIT);
			setState(4612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4611);
				match(IS);
				}
			}

			setState(4614);
			segment_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_numberContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Segment_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_number; }
	}

	public final Segment_numberContext segment_number() throws RecognitionException {
		Segment_numberContext _localctx = new Segment_numberContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_segment_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4616);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_namesContext extends ParserRuleContext {
		public TerminalNode SPECIAL_NAMES() { return getToken(cobolParser.SPECIAL_NAMES, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public Special_names_contentContext special_names_content() {
			return getRuleContext(Special_names_contentContext.class,0);
		}
		public Special_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_names; }
	}

	public final Special_namesContext special_names() throws RecognitionException {
		Special_namesContext _localctx = new Special_namesContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_special_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4618);
			match(SPECIAL_NAMES);
			setState(4619);
			match(DOT_);
			setState(4623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4620);
				replace_statement();
				}
				}
				setState(4625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABET) | (1L << ARGUMENT_NUMBER) | (1L << ARGUMENT_VALUE) | (1L << C01) | (1L << CARD_READER) | (1L << CLASS))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CONSOLE - 84)) | (1L << (CRT - 84)) | (1L << (CURRENCY - 84)) | (1L << (CURSOR - 84)) | (1L << (DECIMAL_POINT - 84)))) != 0) || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (SWITCH - 372)) | (1L << (SWITCH_N_ - 372)) | (1L << (SYMBOLIC - 372)) | (1L << (SYSERR - 372)) | (1L << (SYSIN - 372)) | (1L << (SYSOUT - 372)))) != 0) || _la==DOT_) {
				{
				setState(4626);
				special_names_content();
				setState(4627);
				match(DOT_);
				setState(4631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==REPLACE) {
					{
					{
					setState(4628);
					replace_statement();
					}
					}
					setState(4633);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Special_names_contentContext extends ParserRuleContext {
		public List<Predefined_name_relationContext> predefined_name_relation() {
			return getRuleContexts(Predefined_name_relationContext.class);
		}
		public Predefined_name_relationContext predefined_name_relation(int i) {
			return getRuleContext(Predefined_name_relationContext.class,i);
		}
		public List<Switch_definitionContext> switch_definition() {
			return getRuleContexts(Switch_definitionContext.class);
		}
		public Switch_definitionContext switch_definition(int i) {
			return getRuleContext(Switch_definitionContext.class,i);
		}
		public List<AlphabetContext> alphabet() {
			return getRuleContexts(AlphabetContext.class);
		}
		public AlphabetContext alphabet(int i) {
			return getRuleContext(AlphabetContext.class,i);
		}
		public List<Symbolic_charsContext> symbolic_chars() {
			return getRuleContexts(Symbolic_charsContext.class);
		}
		public Symbolic_charsContext symbolic_chars(int i) {
			return getRuleContext(Symbolic_charsContext.class,i);
		}
		public List<Class_Context> class_() {
			return getRuleContexts(Class_Context.class);
		}
		public Class_Context class_(int i) {
			return getRuleContext(Class_Context.class,i);
		}
		public List<CurrencyContext> currency() {
			return getRuleContexts(CurrencyContext.class);
		}
		public CurrencyContext currency(int i) {
			return getRuleContext(CurrencyContext.class,i);
		}
		public TerminalNode DECIMAL_POINT() { return getToken(cobolParser.DECIMAL_POINT, 0); }
		public TerminalNode COMMA() { return getToken(cobolParser.COMMA, 0); }
		public Cursor_isContext cursor_is() {
			return getRuleContext(Cursor_isContext.class,0);
		}
		public Crt_isContext crt_is() {
			return getRuleContext(Crt_isContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Special_names_contentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_special_names_content; }
	}

	public final Special_names_contentContext special_names_content() throws RecognitionException {
		Special_names_contentContext _localctx = new Special_names_contentContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_special_names_content);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (ARGUMENT_NUMBER - 25)) | (1L << (ARGUMENT_VALUE - 25)) | (1L << (C01 - 25)) | (1L << (CARD_READER - 25)) | (1L << (CONSOLE - 25)))) != 0) || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (SWITCH - 372)) | (1L << (SWITCH_N_ - 372)) | (1L << (SYSERR - 372)) | (1L << (SYSIN - 372)) | (1L << (SYSOUT - 372)))) != 0)) {
				{
				setState(4638);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ARGUMENT_NUMBER:
				case ARGUMENT_VALUE:
				case C01:
				case CARD_READER:
				case CONSOLE:
				case ENVIRONMENT_NAME:
				case ENVIRONMENT_VALUE:
				case LINE_PRINTER:
				case PAPER_TAPE_PUNCH:
				case PAPER_TAPE_READER:
				case SYSERR:
				case SYSIN:
				case SYSOUT:
					{
					setState(4636);
					predefined_name_relation();
					}
					break;
				case SWITCH:
				case SWITCH_N_:
					{
					setState(4637);
					switch_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALPHABET) {
				{
				{
				setState(4643);
				alphabet();
				}
				}
				setState(4648);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SYMBOLIC) {
				{
				{
				setState(4649);
				symbolic_chars();
				}
				}
				setState(4654);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CLASS) {
				{
				{
				setState(4655);
				class_();
				}
				}
				setState(4660);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CURRENCY) {
				{
				{
				setState(4661);
				currency();
				}
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL_POINT) {
				{
				setState(4667);
				match(DECIMAL_POINT);
				setState(4669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4668);
					match(IS);
					}
				}

				setState(4671);
				match(COMMA);
				}
			}

			setState(4675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURSOR) {
				{
				setState(4674);
				cursor_is();
				}
			}

			setState(4678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CRT) {
				{
				setState(4677);
				crt_is();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_isContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(cobolParser.CURSOR, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Cursor_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_is; }
	}

	public final Cursor_isContext cursor_is() throws RecognitionException {
		Cursor_isContext _localctx = new Cursor_isContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_cursor_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			match(CURSOR);
			setState(4682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4681);
				match(IS);
				}
			}

			setState(4684);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Crt_isContext extends ParserRuleContext {
		public TerminalNode CRT() { return getToken(cobolParser.CRT, 0); }
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Crt_isContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_crt_is; }
	}

	public final Crt_isContext crt_is() throws RecognitionException {
		Crt_isContext _localctx = new Crt_isContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_crt_is);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4686);
			match(CRT);
			setState(4687);
			match(STATUS);
			setState(4689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4688);
				match(IS);
				}
			}

			setState(4691);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_name_relationContext extends ParserRuleContext {
		public Predefined_nameContext predefined_name() {
			return getRuleContext(Predefined_nameContext.class,0);
		}
		public User_nameContext user_name() {
			return getRuleContext(User_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Predefined_name_relationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_name_relation; }
	}

	public final Predefined_name_relationContext predefined_name_relation() throws RecognitionException {
		Predefined_name_relationContext _localctx = new Predefined_name_relationContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_predefined_name_relation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4693);
			predefined_name();
			setState(4695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4694);
				match(IS);
				}
			}

			setState(4697);
			user_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_nameContext extends ParserRuleContext {
		public TerminalNode CARD_READER() { return getToken(cobolParser.CARD_READER, 0); }
		public TerminalNode PAPER_TAPE_READER() { return getToken(cobolParser.PAPER_TAPE_READER, 0); }
		public TerminalNode CONSOLE() { return getToken(cobolParser.CONSOLE, 0); }
		public TerminalNode LINE_PRINTER() { return getToken(cobolParser.LINE_PRINTER, 0); }
		public TerminalNode PAPER_TAPE_PUNCH() { return getToken(cobolParser.PAPER_TAPE_PUNCH, 0); }
		public TerminalNode SYSIN() { return getToken(cobolParser.SYSIN, 0); }
		public TerminalNode SYSOUT() { return getToken(cobolParser.SYSOUT, 0); }
		public TerminalNode SYSERR() { return getToken(cobolParser.SYSERR, 0); }
		public TerminalNode C01() { return getToken(cobolParser.C01, 0); }
		public TerminalNode ARGUMENT_NUMBER() { return getToken(cobolParser.ARGUMENT_NUMBER, 0); }
		public TerminalNode ARGUMENT_VALUE() { return getToken(cobolParser.ARGUMENT_VALUE, 0); }
		public TerminalNode ENVIRONMENT_NAME() { return getToken(cobolParser.ENVIRONMENT_NAME, 0); }
		public TerminalNode ENVIRONMENT_VALUE() { return getToken(cobolParser.ENVIRONMENT_VALUE, 0); }
		public Predefined_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_name; }
	}

	public final Predefined_nameContext predefined_name() throws RecognitionException {
		Predefined_nameContext _localctx = new Predefined_nameContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_predefined_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4699);
			_la = _input.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (ARGUMENT_NUMBER - 25)) | (1L << (ARGUMENT_VALUE - 25)) | (1L << (C01 - 25)) | (1L << (CARD_READER - 25)) | (1L << (CONSOLE - 25)))) != 0) || _la==ENVIRONMENT_NAME || _la==ENVIRONMENT_VALUE || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LINE_PRINTER - 236)) | (1L << (PAPER_TAPE_PUNCH - 236)) | (1L << (PAPER_TAPE_READER - 236)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (SYSERR - 378)) | (1L << (SYSIN - 378)) | (1L << (SYSOUT - 378)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_definitionContext extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(cobolParser.SWITCH, 0); }
		public Switch_numContext switch_num() {
			return getRuleContext(Switch_numContext.class,0);
		}
		public TerminalNode SWITCH_N_() { return getToken(cobolParser.SWITCH_N_, 0); }
		public Switch_nameContext switch_name() {
			return getRuleContext(Switch_nameContext.class,0);
		}
		public Switch_clause_onContext switch_clause_on() {
			return getRuleContext(Switch_clause_onContext.class,0);
		}
		public Switch_clause_offContext switch_clause_off() {
			return getRuleContext(Switch_clause_offContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_definition; }
	}

	public final Switch_definitionContext switch_definition() throws RecognitionException {
		Switch_definitionContext _localctx = new Switch_definitionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_switch_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SWITCH:
				{
				setState(4701);
				match(SWITCH);
				setState(4702);
				switch_num();
				}
				break;
			case SWITCH_N_:
				{
				setState(4703);
				match(SWITCH_N_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS || _la==USER_DEFINED_WORD_) {
				{
				setState(4707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4706);
					match(IS);
					}
				}

				setState(4709);
				switch_name();
				}
			}

			setState(4720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(4712);
				switch_clause_on();
				setState(4714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF) {
					{
					setState(4713);
					switch_clause_off();
					}
				}

				}
				break;
			case OFF:
				{
				setState(4716);
				switch_clause_off();
				setState(4718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4717);
					switch_clause_on();
					}
				}

				}
				break;
			case ALPHABET:
			case ARGUMENT_NUMBER:
			case ARGUMENT_VALUE:
			case C01:
			case CARD_READER:
			case CLASS:
			case CONSOLE:
			case CRT:
			case CURRENCY:
			case CURSOR:
			case DECIMAL_POINT:
			case ENVIRONMENT_NAME:
			case ENVIRONMENT_VALUE:
			case LINE_PRINTER:
			case PAPER_TAPE_PUNCH:
			case PAPER_TAPE_READER:
			case SWITCH:
			case SWITCH_N_:
			case SYMBOLIC:
			case SYSERR:
			case SYSIN:
			case SYSOUT:
			case DOT_:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_clause_onContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public Cond_nameContext cond_name() {
			return getRuleContext(Cond_nameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_clause_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_clause_on; }
	}

	public final Switch_clause_onContext switch_clause_on() throws RecognitionException {
		Switch_clause_onContext _localctx = new Switch_clause_onContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_switch_clause_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4722);
			match(ON);
			setState(4724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(4723);
				match(STATUS);
				}
			}

			setState(4727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4726);
				match(IS);
				}
			}

			setState(4729);
			cond_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_clause_offContext extends ParserRuleContext {
		public TerminalNode OFF() { return getToken(cobolParser.OFF, 0); }
		public Cond_nameContext cond_name() {
			return getRuleContext(Cond_nameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Switch_clause_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_clause_off; }
	}

	public final Switch_clause_offContext switch_clause_off() throws RecognitionException {
		Switch_clause_offContext _localctx = new Switch_clause_offContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_switch_clause_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4731);
			match(OFF);
			setState(4733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(4732);
				match(STATUS);
				}
			}

			setState(4736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4735);
				match(IS);
				}
			}

			setState(4738);
			cond_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cond_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Cond_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cond_name; }
	}

	public final Cond_nameContext cond_name() throws RecognitionException {
		Cond_nameContext _localctx = new Cond_nameContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_cond_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4740);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Switch_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_name; }
	}

	public final Switch_nameContext switch_name() throws RecognitionException {
		Switch_nameContext _localctx = new Switch_nameContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_switch_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4742);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_numContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Switch_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_num; }
	}

	public final Switch_numContext switch_num() throws RecognitionException {
		Switch_numContext _localctx = new Switch_numContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_switch_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4744);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_data_itemContext extends ParserRuleContext {
		public List<TerminalNode> USER_DEFINED_WORD_() { return getTokens(cobolParser.USER_DEFINED_WORD_); }
		public TerminalNode USER_DEFINED_WORD_(int i) {
			return getToken(cobolParser.USER_DEFINED_WORD_, i);
		}
		public List<TerminalNode> IN() { return getTokens(cobolParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(cobolParser.IN, i);
		}
		public List<TerminalNode> OF() { return getTokens(cobolParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(cobolParser.OF, i);
		}
		public Qualified_data_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_data_item; }
	}

	public final Qualified_data_itemContext qualified_data_item() throws RecognitionException {
		Qualified_data_itemContext _localctx = new Qualified_data_itemContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_qualified_data_item);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4746);
			match(USER_DEFINED_WORD_);
			setState(4751);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,723,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4747);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==OF) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4748);
					match(USER_DEFINED_WORD_);
					}
					} 
				}
				setState(4753);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,723,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrencyContext extends ParserRuleContext {
		public TerminalNode CURRENCY() { return getToken(cobolParser.CURRENCY, 0); }
		public Currency_definitionContext currency_definition() {
			return getRuleContext(Currency_definitionContext.class,0);
		}
		public TerminalNode SIGN() { return getToken(cobolParser.SIGN, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public CurrencyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency; }
	}

	public final CurrencyContext currency() throws RecognitionException {
		CurrencyContext _localctx = new CurrencyContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_currency);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4754);
			match(CURRENCY);
			setState(4756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIGN) {
				{
				setState(4755);
				match(SIGN);
				}
			}

			setState(4759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4758);
				match(IS);
				}
			}

			setState(4761);
			currency_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Currency_definitionContext extends ParserRuleContext {
		public Currency_charContext currency_char() {
			return getRuleContext(Currency_charContext.class,0);
		}
		public Currency_stringContext currency_string() {
			return getRuleContext(Currency_stringContext.class,0);
		}
		public TerminalNode PICTURE() { return getToken(cobolParser.PICTURE, 0); }
		public TerminalNode SYMBOL() { return getToken(cobolParser.SYMBOL, 0); }
		public TerminalNode SYMBOL_IN_PICTURE_() { return getToken(cobolParser.SYMBOL_IN_PICTURE_, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public Currency_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency_definition; }
	}

	public final Currency_definitionContext currency_definition() throws RecognitionException {
		Currency_definitionContext _localctx = new Currency_definitionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_currency_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				setState(4763);
				currency_string();
				setState(4765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4764);
					match(WITH);
					}
				}

				setState(4767);
				match(PICTURE);
				setState(4768);
				_la = _input.LA(1);
				if ( !(_la==SYMBOL || _la==SYMBOL_IN_PICTURE_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4772);
			currency_char();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Currency_stringContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Currency_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency_string; }
	}

	public final Currency_stringContext currency_string() throws RecognitionException {
		Currency_stringContext _localctx = new Currency_stringContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_currency_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4774);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Currency_charContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Currency_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currency_char; }
	}

	public final Currency_charContext currency_char() throws RecognitionException {
		Currency_charContext _localctx = new Currency_charContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_currency_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4776);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_Context extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(cobolParser.CLASS, 0); }
		public Class_nameContext class_name() {
			return getRuleContext(Class_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public List<User_classContext> user_class() {
			return getRuleContexts(User_classContext.class);
		}
		public User_classContext user_class(int i) {
			return getRuleContext(User_classContext.class,i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_; }
	}

	public final Class_Context class_() throws RecognitionException {
		Class_Context _localctx = new Class_Context(_ctx, getState());
		enterRule(_localctx, 832, RULE_class_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4778);
			match(CLASS);
			setState(4779);
			class_name();
			setState(4781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4780);
				match(IS);
				}
			}

			setState(4784); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4783);
				user_class();
				}
				}
				setState(4786); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==INTEGER_LITERAL_ || _la==HEX_LITERAL_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_name; }
	}

	public final Class_nameContext class_name() throws RecognitionException {
		Class_nameContext _localctx = new Class_nameContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4788);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_classContext extends ParserRuleContext {
		public First_literalContext first_literal() {
			return getRuleContext(First_literalContext.class,0);
		}
		public Last_literalContext last_literal() {
			return getRuleContext(Last_literalContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public User_classContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_class; }
	}

	public final User_classContext user_class() throws RecognitionException {
		User_classContext _localctx = new User_classContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_user_class);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4790);
			first_literal();
			setState(4793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THROUGH || _la==THRU) {
				{
				setState(4791);
				_la = _input.LA(1);
				if ( !(_la==THROUGH || _la==THRU) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4792);
				last_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symbolic_charsContext extends ParserRuleContext {
		public TerminalNode SYMBOLIC() { return getToken(cobolParser.SYMBOLIC, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public List<Symb_ch_definitionContext> symb_ch_definition() {
			return getRuleContexts(Symb_ch_definitionContext.class);
		}
		public Symb_ch_definitionContext symb_ch_definition(int i) {
			return getRuleContext(Symb_ch_definitionContext.class,i);
		}
		public Symbolic_charsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbolic_chars; }
	}

	public final Symbolic_charsContext symbolic_chars() throws RecognitionException {
		Symbolic_charsContext _localctx = new Symbolic_charsContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_symbolic_chars);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4795);
			match(SYMBOLIC);
			setState(4797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTERS) {
				{
				setState(4796);
				match(CHARACTERS);
				}
			}

			setState(4800); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4799);
				symb_ch_definition();
				}
				}
				setState(4802); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_definitionContext extends ParserRuleContext {
		public List<Symb_ch_def_clauseContext> symb_ch_def_clause() {
			return getRuleContexts(Symb_ch_def_clauseContext.class);
		}
		public Symb_ch_def_clauseContext symb_ch_def_clause(int i) {
			return getRuleContext(Symb_ch_def_clauseContext.class,i);
		}
		public Symb_ch_def_in_alphabetContext symb_ch_def_in_alphabet() {
			return getRuleContext(Symb_ch_def_in_alphabetContext.class,0);
		}
		public Symb_ch_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_definition; }
	}

	public final Symb_ch_definitionContext symb_ch_definition() throws RecognitionException {
		Symb_ch_definitionContext _localctx = new Symb_ch_definitionContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_symb_ch_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4805); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4804);
					symb_ch_def_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4807); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,733,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(4809);
				symb_ch_def_in_alphabet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_def_clauseContext extends ParserRuleContext {
		public List<Symbol_charContext> symbol_char() {
			return getRuleContexts(Symbol_charContext.class);
		}
		public Symbol_charContext symbol_char(int i) {
			return getRuleContext(Symbol_charContext.class,i);
		}
		public List<Char_valContext> char_val() {
			return getRuleContexts(Char_valContext.class);
		}
		public Char_valContext char_val(int i) {
			return getRuleContext(Char_valContext.class,i);
		}
		public TerminalNode ARE() { return getToken(cobolParser.ARE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Symb_ch_def_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_def_clause; }
	}

	public final Symb_ch_def_clauseContext symb_ch_def_clause() throws RecognitionException {
		Symb_ch_def_clauseContext _localctx = new Symb_ch_def_clauseContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_symb_ch_def_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4813); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4812);
				symbol_char();
				}
				}
				setState(4815); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			setState(4818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARE || _la==IS) {
				{
				setState(4817);
				_la = _input.LA(1);
				if ( !(_la==ARE || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4821); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4820);
				char_val();
				}
				}
				setState(4823); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTEGER_LITERAL_ || _la==HEX_LITERAL_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symb_ch_def_in_alphabetContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(cobolParser.IN, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public Symb_ch_def_in_alphabetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symb_ch_def_in_alphabet; }
	}

	public final Symb_ch_def_in_alphabetContext symb_ch_def_in_alphabet() throws RecognitionException {
		Symb_ch_def_in_alphabetContext _localctx = new Symb_ch_def_in_alphabetContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_symb_ch_def_in_alphabet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4825);
			match(IN);
			setState(4826);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Symbol_charContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Symbol_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbol_char; }
	}

	public final Symbol_charContext symbol_char() throws RecognitionException {
		Symbol_charContext _localctx = new Symbol_charContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_symbol_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4828);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_valContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Char_valContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_val; }
	}

	public final Char_valContext char_val() throws RecognitionException {
		Char_valContext _localctx = new Char_valContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_char_val);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlphabetContext extends ParserRuleContext {
		public TerminalNode ALPHABET() { return getToken(cobolParser.ALPHABET, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public Alpha_valueContext alpha_value() {
			return getRuleContext(Alpha_valueContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public AlphabetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alphabet; }
	}

	public final AlphabetContext alphabet() throws RecognitionException {
		AlphabetContext _localctx = new AlphabetContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_alphabet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4832);
			match(ALPHABET);
			setState(4833);
			alpha_name();
			setState(4835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4834);
				match(IS);
				}
			}

			setState(4837);
			alpha_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alpha_valueContext extends ParserRuleContext {
		public TerminalNode ASCII() { return getToken(cobolParser.ASCII, 0); }
		public TerminalNode STANDARD_1() { return getToken(cobolParser.STANDARD_1, 0); }
		public TerminalNode STANDARD_2() { return getToken(cobolParser.STANDARD_2, 0); }
		public TerminalNode NATIVE() { return getToken(cobolParser.NATIVE, 0); }
		public TerminalNode EBCDIC() { return getToken(cobolParser.EBCDIC, 0); }
		public List<User_alphaContext> user_alpha() {
			return getRuleContexts(User_alphaContext.class);
		}
		public User_alphaContext user_alpha(int i) {
			return getRuleContext(User_alphaContext.class,i);
		}
		public Alpha_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alpha_value; }
	}

	public final Alpha_valueContext alpha_value() throws RecognitionException {
		Alpha_valueContext _localctx = new Alpha_valueContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_alpha_value);
		int _la;
		try {
			setState(4849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII:
				enterOuterAlt(_localctx, 1);
				{
				setState(4839);
				match(ASCII);
				}
				break;
			case STANDARD_1:
				enterOuterAlt(_localctx, 2);
				{
				setState(4840);
				match(STANDARD_1);
				}
				break;
			case STANDARD_2:
				enterOuterAlt(_localctx, 3);
				{
				setState(4841);
				match(STANDARD_2);
				}
				break;
			case NATIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4842);
				match(NATIVE);
				}
				break;
			case EBCDIC:
				enterOuterAlt(_localctx, 5);
				{
				setState(4843);
				match(EBCDIC);
				}
				break;
			case STRING_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 6);
				{
				setState(4845); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4844);
					user_alpha();
					}
					}
					setState(4847); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL_ || _la==INTEGER_LITERAL_ || _la==HEX_LITERAL_ );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_alphaContext extends ParserRuleContext {
		public First_literalContext first_literal() {
			return getRuleContext(First_literalContext.class,0);
		}
		public Last_literalContext last_literal() {
			return getRuleContext(Last_literalContext.class,0);
		}
		public TerminalNode THRU() { return getToken(cobolParser.THRU, 0); }
		public TerminalNode THROUGH() { return getToken(cobolParser.THROUGH, 0); }
		public List<TerminalNode> ALSO() { return getTokens(cobolParser.ALSO); }
		public TerminalNode ALSO(int i) {
			return getToken(cobolParser.ALSO, i);
		}
		public List<Same_literalContext> same_literal() {
			return getRuleContexts(Same_literalContext.class);
		}
		public Same_literalContext same_literal(int i) {
			return getRuleContext(Same_literalContext.class,i);
		}
		public User_alphaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_alpha; }
	}

	public final User_alphaContext user_alpha() throws RecognitionException {
		User_alphaContext _localctx = new User_alphaContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_user_alpha);
		int _la;
		try {
			setState(4863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4851);
				first_literal();
				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THROUGH || _la==THRU) {
					{
					setState(4852);
					_la = _input.LA(1);
					if ( !(_la==THROUGH || _la==THRU) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4853);
					last_literal();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4856);
				first_literal();
				setState(4859); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4857);
					match(ALSO);
					setState(4858);
					same_literal();
					}
					}
					setState(4861); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALSO );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class First_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public First_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_literal; }
	}

	public final First_literalContext first_literal() throws RecognitionException {
		First_literalContext _localctx = new First_literalContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_first_literal);
		int _la;
		try {
			setState(4867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4865);
				match(STRING_LITERAL_);
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4866);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Last_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Last_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_last_literal; }
	}

	public final Last_literalContext last_literal() throws RecognitionException {
		Last_literalContext _localctx = new Last_literalContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_last_literal);
		int _la;
		try {
			setState(4871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4869);
				match(STRING_LITERAL_);
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4870);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Same_literalContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Same_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same_literal; }
	}

	public final Same_literalContext same_literal() throws RecognitionException {
		Same_literalContext _localctx = new Same_literalContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_same_literal);
		int _la;
		try {
			setState(4875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4873);
				match(STRING_LITERAL_);
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4874);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_of_page_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Top_of_page_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_of_page_name; }
	}

	public final Top_of_page_nameContext top_of_page_name() throws RecognitionException {
		Top_of_page_nameContext _localctx = new Top_of_page_nameContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_top_of_page_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4877);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public User_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_name; }
	}

	public final User_nameContext user_name() throws RecognitionException {
		User_nameContext _localctx = new User_nameContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_user_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4879);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_controlContext extends ParserRuleContext {
		public TerminalNode FILE_CONTROL() { return getToken(cobolParser.FILE_CONTROL, 0); }
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<SelectContext> select() {
			return getRuleContexts(SelectContext.class);
		}
		public SelectContext select(int i) {
			return getRuleContext(SelectContext.class,i);
		}
		public File_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_control; }
	}

	public final File_controlContext file_control() throws RecognitionException {
		File_controlContext _localctx = new File_controlContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_file_control);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			match(FILE_CONTROL);
			setState(4882);
			match(DOT_);
			setState(4886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4883);
				replace_statement();
				}
				}
				setState(4888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SELECT) {
				{
				{
				setState(4889);
				select();
				}
				}
				setState(4894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(cobolParser.SELECT, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(cobolParser.DOT_, 0); }
		public TerminalNode OPTIONAL() { return getToken(cobolParser.OPTIONAL, 0); }
		public List<Select_clauseContext> select_clause() {
			return getRuleContexts(Select_clauseContext.class);
		}
		public Select_clauseContext select_clause(int i) {
			return getRuleContext(Select_clauseContext.class,i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			match(SELECT);
			setState(4897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONAL) {
				{
				setState(4896);
				match(OPTIONAL);
				}
			}

			setState(4899);
			file_name();
			setState(4901); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4900);
				select_clause();
				}
				}
				setState(4903); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ALTERNATE) | (1L << ASSIGN) | (1L << BLOCK) | (1L << CODE_SET))) != 0) || _la==DYNAMIC || _la==FILE || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (INDEXED - 209)) | (1L << (LINE - 209)) | (1L << (LOCK - 209)) | (1L << (ORGANIZATION - 209)))) != 0) || ((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (PADDING - 277)) | (1L << (RANDOM - 277)) | (1L << (RECORD - 277)) | (1L << (RELATIVE - 277)) | (1L << (RESERVE - 277)))) != 0) || _la==SEQUENTIAL || _la==STATUS );
			setState(4905);
			match(DOT_);
			setState(4909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(4906);
				replace_statement();
				}
				}
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public Assign_toContext assign_to() {
			return getRuleContext(Assign_toContext.class,0);
		}
		public ReserveContext reserve() {
			return getRuleContext(ReserveContext.class,0);
		}
		public OrganizationContext organization() {
			return getRuleContext(OrganizationContext.class,0);
		}
		public PaddingContext padding() {
			return getRuleContext(PaddingContext.class,0);
		}
		public Record_delimiterContext record_delimiter() {
			return getRuleContext(Record_delimiterContext.class,0);
		}
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public Block_containsContext block_contains() {
			return getRuleContext(Block_containsContext.class,0);
		}
		public Code_setContext code_set() {
			return getRuleContext(Code_setContext.class,0);
		}
		public Access_modeContext access_mode() {
			return getRuleContext(Access_modeContext.class,0);
		}
		public Record_keyContext record_key() {
			return getRuleContext(Record_keyContext.class,0);
		}
		public Alt_record_keyContext alt_record_key() {
			return getRuleContext(Alt_record_keyContext.class,0);
		}
		public File_statusContext file_status() {
			return getRuleContext(File_statusContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_select_clause);
		try {
			setState(4924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4912);
				assign_to();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4913);
				reserve();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4914);
				organization();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4915);
				padding();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4916);
				record_delimiter();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4917);
				lock_mode();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4918);
				block_contains();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4919);
				code_set();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4920);
				access_mode();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4921);
				record_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4922);
				alt_record_key();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4923);
				file_status();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_statusContext extends ParserRuleContext {
		public TerminalNode STATUS() { return getToken(cobolParser.STATUS, 0); }
		public File_statContext file_stat() {
			return getRuleContext(File_statContext.class,0);
		}
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public File_statusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_status; }
	}

	public final File_statusContext file_status() throws RecognitionException {
		File_statusContext _localctx = new File_statusContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_file_status);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE) {
				{
				setState(4926);
				match(FILE);
				}
			}

			setState(4929);
			match(STATUS);
			setState(4931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4930);
				match(IS);
				}
			}

			setState(4933);
			file_stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_statContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public File_statContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_stat; }
	}

	public final File_statContext file_stat() throws RecognitionException {
		File_statContext _localctx = new File_statContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_file_stat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_keyContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Record_key_definitionContext record_key_definition() {
			return getRuleContext(Record_key_definitionContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public Record_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_key; }
	}

	public final Record_keyContext record_key() throws RecognitionException {
		Record_keyContext _localctx = new Record_keyContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_record_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937);
			match(RECORD);
			setState(4939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(4938);
				match(KEY);
				}
			}

			setState(4942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4941);
				match(IS);
				}
			}

			setState(4944);
			record_key_definition();
			setState(4949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4945);
					match(WITH);
					}
				}

				setState(4948);
				match(DUPLICATES);
				}
			}

			setState(4952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				setState(4951);
				_la = _input.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alt_record_keyContext extends ParserRuleContext {
		public TerminalNode ALTERNATE() { return getToken(cobolParser.ALTERNATE, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public Record_key_definitionContext record_key_definition() {
			return getRuleContext(Record_key_definitionContext.class,0);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode DUPLICATES() { return getToken(cobolParser.DUPLICATES, 0); }
		public TerminalNode ASCENDING() { return getToken(cobolParser.ASCENDING, 0); }
		public TerminalNode DESCENDING() { return getToken(cobolParser.DESCENDING, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public Alt_record_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alt_record_key; }
	}

	public final Alt_record_keyContext alt_record_key() throws RecognitionException {
		Alt_record_keyContext _localctx = new Alt_record_keyContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_alt_record_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			match(ALTERNATE);
			setState(4955);
			match(RECORD);
			setState(4957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(4956);
				match(KEY);
				}
			}

			setState(4960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(4959);
				match(IS);
				}
			}

			setState(4962);
			record_key_definition();
			setState(4967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATES || _la==WITH) {
				{
				setState(4964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4963);
					match(WITH);
					}
				}

				setState(4966);
				match(DUPLICATES);
				}
			}

			setState(4970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				setState(4969);
				_la = _input.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_key_definitionContext extends ParserRuleContext {
		public List<Rec_keyContext> rec_key() {
			return getRuleContexts(Rec_keyContext.class);
		}
		public Rec_keyContext rec_key(int i) {
			return getRuleContext(Rec_keyContext.class,i);
		}
		public Seg_keyContext seg_key() {
			return getRuleContext(Seg_keyContext.class,0);
		}
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public Record_key_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_key_definition; }
	}

	public final Record_key_definitionContext record_key_definition() throws RecognitionException {
		Record_key_definitionContext _localctx = new Record_key_definitionContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_record_key_definition);
		int _la;
		try {
			setState(4980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4972);
				rec_key();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4973);
				seg_key();
				setState(4974);
				match(EQUAL_);
				setState(4976); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4975);
					rec_key();
					}
					}
					setState(4978); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==USER_DEFINED_WORD_ );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seg_keyContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Seg_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seg_key; }
	}

	public final Seg_keyContext seg_key() throws RecognitionException {
		Seg_keyContext _localctx = new Seg_keyContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_seg_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4982);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rec_keyContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public Rec_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rec_key; }
	}

	public final Rec_keyContext rec_key() throws RecognitionException {
		Rec_keyContext _localctx = new Rec_keyContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_rec_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			qualified_data_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_modeContext extends ParserRuleContext {
		public TerminalNode SEQUENTIAL() { return getToken(cobolParser.SEQUENTIAL, 0); }
		public TerminalNode RANDOM() { return getToken(cobolParser.RANDOM, 0); }
		public TerminalNode DYNAMIC() { return getToken(cobolParser.DYNAMIC, 0); }
		public TerminalNode ACCESS() { return getToken(cobolParser.ACCESS, 0); }
		public TerminalNode RELATIVE() { return getToken(cobolParser.RELATIVE, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public List<TerminalNode> IS() { return getTokens(cobolParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(cobolParser.IS, i);
		}
		public TerminalNode KEY() { return getToken(cobolParser.KEY, 0); }
		public Access_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_mode; }
	}

	public final Access_modeContext access_mode() throws RecognitionException {
		Access_modeContext _localctx = new Access_modeContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_access_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACCESS) {
				{
				setState(4986);
				match(ACCESS);
				setState(4988);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MODE) {
					{
					setState(4987);
					match(MODE);
					}
				}

				setState(4991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(4990);
					match(IS);
					}
				}

				}
			}

			setState(4995);
			_la = _input.LA(1);
			if ( !(_la==DYNAMIC || _la==RANDOM || _la==SEQUENTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(4996);
				match(RELATIVE);
				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEY) {
					{
					setState(4997);
					match(KEY);
					}
				}

				setState(5001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(5000);
					match(IS);
					}
				}

				setState(5003);
				qualified_data_item();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReserveContext extends ParserRuleContext {
		public TerminalNode RESERVE() { return getToken(cobolParser.RESERVE, 0); }
		public Reserve_numContext reserve_num() {
			return getRuleContext(Reserve_numContext.class,0);
		}
		public TerminalNode AREA() { return getToken(cobolParser.AREA, 0); }
		public TerminalNode AREAS() { return getToken(cobolParser.AREAS, 0); }
		public ReserveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserve; }
	}

	public final ReserveContext reserve() throws RecognitionException {
		ReserveContext _localctx = new ReserveContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_reserve);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5006);
			match(RESERVE);
			setState(5007);
			reserve_num();
			setState(5009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AREA || _la==AREAS) {
				{
				setState(5008);
				_la = _input.LA(1);
				if ( !(_la==AREA || _la==AREAS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reserve_numContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Reserve_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserve_num; }
	}

	public final Reserve_numContext reserve_num() throws RecognitionException {
		Reserve_numContext _localctx = new Reserve_numContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_reserve_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5011);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_delimiterContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode DELIMITER() { return getToken(cobolParser.DELIMITER, 0); }
		public TerminalNode STANDARD_1() { return getToken(cobolParser.STANDARD_1, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Record_delimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_delimiter; }
	}

	public final Record_delimiterContext record_delimiter() throws RecognitionException {
		Record_delimiterContext _localctx = new Record_delimiterContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_record_delimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5013);
			match(RECORD);
			setState(5014);
			match(DELIMITER);
			setState(5016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5015);
				match(IS);
				}
			}

			setState(5018);
			match(STANDARD_1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PaddingContext extends ParserRuleContext {
		public TerminalNode PADDING() { return getToken(cobolParser.PADDING, 0); }
		public Pad_charContext pad_char() {
			return getRuleContext(Pad_charContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(cobolParser.CHARACTER, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public PaddingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_padding; }
	}

	public final PaddingContext padding() throws RecognitionException {
		PaddingContext _localctx = new PaddingContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_padding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			match(PADDING);
			setState(5022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(5021);
				match(CHARACTER);
				}
			}

			setState(5025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5024);
				match(IS);
				}
			}

			setState(5027);
			pad_char();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pad_charContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Pad_charContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pad_char; }
	}

	public final Pad_charContext pad_char() throws RecognitionException {
		Pad_charContext _localctx = new Pad_charContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_pad_char);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			match(STRING_LITERAL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrganizationContext extends ParserRuleContext {
		public TerminalNode SEQUENTIAL() { return getToken(cobolParser.SEQUENTIAL, 0); }
		public TerminalNode LINE() { return getToken(cobolParser.LINE, 0); }
		public TerminalNode RELATIVE() { return getToken(cobolParser.RELATIVE, 0); }
		public TerminalNode INDEXED() { return getToken(cobolParser.INDEXED, 0); }
		public TerminalNode ORGANIZATION() { return getToken(cobolParser.ORGANIZATION, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public OrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_organization; }
	}

	public final OrganizationContext organization() throws RecognitionException {
		OrganizationContext _localctx = new OrganizationContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_organization);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORGANIZATION) {
				{
				setState(5031);
				match(ORGANIZATION);
				setState(5033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(5032);
					match(IS);
					}
				}

				}
			}

			setState(5042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENTIAL:
				{
				setState(5037);
				match(SEQUENTIAL);
				}
				break;
			case LINE:
				{
				setState(5038);
				match(LINE);
				setState(5039);
				match(SEQUENTIAL);
				}
				break;
			case RELATIVE:
				{
				setState(5040);
				match(RELATIVE);
				}
				break;
			case INDEXED:
				{
				setState(5041);
				match(INDEXED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public Lock_mode_definitionContext lock_mode_definition() {
			return getRuleContext(Lock_mode_definitionContext.class,0);
		}
		public TerminalNode MODE() { return getToken(cobolParser.MODE, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_lock_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5044);
			match(LOCK);
			setState(5046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MODE) {
				{
				setState(5045);
				match(MODE);
				}
			}

			setState(5049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5048);
				match(IS);
				}
			}

			setState(5051);
			lock_mode_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_mode_definitionContext extends ParserRuleContext {
		public TerminalNode MANUAL() { return getToken(cobolParser.MANUAL, 0); }
		public TerminalNode LOCK() { return getToken(cobolParser.LOCK, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode WITH() { return getToken(cobolParser.WITH, 0); }
		public TerminalNode AUTOMATIC() { return getToken(cobolParser.AUTOMATIC, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode ROLLBACK() { return getToken(cobolParser.ROLLBACK, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(cobolParser.EXCLUSIVE, 0); }
		public Lock_mode_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode_definition; }
	}

	public final Lock_mode_definitionContext lock_mode_definition() throws RecognitionException {
		Lock_mode_definitionContext _localctx = new Lock_mode_definitionContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_lock_mode_definition);
		int _la;
		try {
			setState(5074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MANUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5053);
				match(MANUAL);
				setState(5055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5054);
					match(WITH);
					}
				}

				setState(5057);
				match(LOCK);
				setState(5058);
				match(ON);
				setState(5059);
				match(MULTIPLE);
				setState(5060);
				match(RECORDS);
				}
				break;
			case AUTOMATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(5061);
				match(AUTOMATIC);
				setState(5071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(5063);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5062);
						match(WITH);
						}
					}

					setState(5069);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LOCK:
						{
						setState(5065);
						match(LOCK);
						setState(5066);
						match(ON);
						setState(5067);
						match(RECORD);
						}
						break;
					case ROLLBACK:
						{
						setState(5068);
						match(ROLLBACK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case EXCLUSIVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5073);
				match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Code_setContext extends ParserRuleContext {
		public TerminalNode CODE_SET() { return getToken(cobolParser.CODE_SET, 0); }
		public Alpha_nameContext alpha_name() {
			return getRuleContext(Alpha_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public Code_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_code_set; }
	}

	public final Code_setContext code_set() throws RecognitionException {
		Code_setContext _localctx = new Code_setContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_code_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5076);
			match(CODE_SET);
			setState(5078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5077);
				match(IS);
				}
			}

			setState(5080);
			alpha_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_containsContext extends ParserRuleContext {
		public TerminalNode BLOCK() { return getToken(cobolParser.BLOCK, 0); }
		public BlocksizeContext blocksize() {
			return getRuleContext(BlocksizeContext.class,0);
		}
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public TerminalNode CHARACTERS() { return getToken(cobolParser.CHARACTERS, 0); }
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public Smallest_blockContext smallest_block() {
			return getRuleContext(Smallest_blockContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Block_containsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_contains; }
	}

	public final Block_containsContext block_contains() throws RecognitionException {
		Block_containsContext _localctx = new Block_containsContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_block_contains);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5082);
			match(BLOCK);
			setState(5084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(5083);
				match(CONTAINS);
				}
			}

			setState(5089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				setState(5086);
				smallest_block();
				setState(5087);
				match(TO);
				}
				break;
			}
			setState(5091);
			blocksize();
			setState(5092);
			_la = _input.LA(1);
			if ( !(_la==CHARACTERS || _la==RECORDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Smallest_blockContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Smallest_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_smallest_block; }
	}

	public final Smallest_blockContext smallest_block() throws RecognitionException {
		Smallest_blockContext _localctx = new Smallest_blockContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_smallest_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5094);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlocksizeContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public BlocksizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blocksize; }
	}

	public final BlocksizeContext blocksize() throws RecognitionException {
		BlocksizeContext _localctx = new BlocksizeContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_blocksize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5096);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_toContext extends ParserRuleContext {
		public TerminalNode ASSIGN() { return getToken(cobolParser.ASSIGN, 0); }
		public Assign_to_definitionContext assign_to_definition() {
			return getRuleContext(Assign_to_definitionContext.class,0);
		}
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Assign_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_to; }
	}

	public final Assign_toContext assign_to() throws RecognitionException {
		Assign_toContext _localctx = new Assign_toContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_assign_to);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(ASSIGN);
			setState(5100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(5099);
				match(TO);
				}
			}

			setState(5102);
			assign_to_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assign_to_definitionContext extends ParserRuleContext {
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(cobolParser.EXTERNAL, 0); }
		public TerminalNode DYNAMIC() { return getToken(cobolParser.DYNAMIC, 0); }
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public Assign_to_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assign_to_definition; }
	}

	public final Assign_to_definitionContext assign_to_definition() throws RecognitionException {
		Assign_to_definitionContext _localctx = new Assign_to_definitionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_assign_to_definition);
		int _la;
		try {
			setState(5115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
			case DISK:
			case DYNAMIC:
			case EXTERNAL:
			case PRINTER:
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DYNAMIC || _la==EXTERNAL) {
					{
					setState(5104);
					_la = _input.LA(1);
					if ( !(_la==DYNAMIC || _la==EXTERNAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5107);
				file_spec();
				}
				break;
			case MULTIPLE:
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MULTIPLE) {
					{
					setState(5108);
					match(MULTIPLE);
					}
				}

				setState(5111);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(5112);
					match(FILE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public TerminalNode DISK() { return getToken(cobolParser.DISK, 0); }
		public TerminalNode PRINTER() { return getToken(cobolParser.PRINTER, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_file_spec);
		try {
			setState(5121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5117);
				match(STRING_LITERAL_);
				}
				break;
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5118);
				qualified_data_item();
				}
				break;
			case DISK:
				enterOuterAlt(_localctx, 3);
				{
				setState(5119);
				match(DISK);
				}
				break;
			case PRINTER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5120);
				match(PRINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_o_controlContext extends ParserRuleContext {
		public TerminalNode I_O_CONTROL() { return getToken(cobolParser.I_O_CONTROL, 0); }
		public List<TerminalNode> DOT_() { return getTokens(cobolParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(cobolParser.DOT_, i);
		}
		public List<Replace_statementContext> replace_statement() {
			return getRuleContexts(Replace_statementContext.class);
		}
		public Replace_statementContext replace_statement(int i) {
			return getRuleContext(Replace_statementContext.class,i);
		}
		public List<I_o_control_clauseContext> i_o_control_clause() {
			return getRuleContexts(I_o_control_clauseContext.class);
		}
		public I_o_control_clauseContext i_o_control_clause(int i) {
			return getRuleContext(I_o_control_clauseContext.class,i);
		}
		public I_o_controlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_o_control; }
	}

	public final I_o_controlContext i_o_control() throws RecognitionException {
		I_o_controlContext _localctx = new I_o_controlContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_i_o_control);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			match(I_O_CONTROL);
			setState(5126);
			match(DOT_);
			setState(5130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REPLACE) {
				{
				{
				setState(5127);
				replace_statement();
				}
				}
				setState(5132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==APPLY || _la==MULTIPLE || _la==RERUN || _la==SAME) {
				{
				setState(5134); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5133);
					i_o_control_clause();
					}
					}
					setState(5136); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==APPLY || _la==MULTIPLE || _la==RERUN || _la==SAME );
				setState(5138);
				match(DOT_);
				setState(5142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==REPLACE) {
					{
					{
					setState(5139);
					replace_statement();
					}
					}
					setState(5144);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class I_o_control_clauseContext extends ParserRuleContext {
		public ApplyContext apply() {
			return getRuleContext(ApplyContext.class,0);
		}
		public SameContext same() {
			return getRuleContext(SameContext.class,0);
		}
		public RerunContext rerun() {
			return getRuleContext(RerunContext.class,0);
		}
		public Multiple_fileContext multiple_file() {
			return getRuleContext(Multiple_fileContext.class,0);
		}
		public I_o_control_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_i_o_control_clause; }
	}

	public final I_o_control_clauseContext i_o_control_clause() throws RecognitionException {
		I_o_control_clauseContext _localctx = new I_o_control_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_i_o_control_clause);
		try {
			setState(5151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case APPLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5147);
				apply();
				}
				break;
			case SAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(5148);
				same();
				}
				break;
			case RERUN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5149);
				rerun();
				}
				break;
			case MULTIPLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5150);
				multiple_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_fileContext extends ParserRuleContext {
		public TerminalNode MULTIPLE() { return getToken(cobolParser.MULTIPLE, 0); }
		public TerminalNode FILE() { return getToken(cobolParser.FILE, 0); }
		public TerminalNode TAPE() { return getToken(cobolParser.TAPE, 0); }
		public TerminalNode CONTAINS() { return getToken(cobolParser.CONTAINS, 0); }
		public List<Multiple_file_definitionContext> multiple_file_definition() {
			return getRuleContexts(Multiple_file_definitionContext.class);
		}
		public Multiple_file_definitionContext multiple_file_definition(int i) {
			return getRuleContext(Multiple_file_definitionContext.class,i);
		}
		public Multiple_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file; }
	}

	public final Multiple_fileContext multiple_file() throws RecognitionException {
		Multiple_fileContext _localctx = new Multiple_fileContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_multiple_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5153);
			match(MULTIPLE);
			setState(5154);
			match(FILE);
			setState(5156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAPE) {
				{
				setState(5155);
				match(TAPE);
				}
			}

			setState(5159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(5158);
				match(CONTAINS);
				}
			}

			setState(5162); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5161);
				multiple_file_definition();
				}
				}
				setState(5164); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_file_definitionContext extends ParserRuleContext {
		public Multiple_file_nameContext multiple_file_name() {
			return getRuleContext(Multiple_file_nameContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(cobolParser.POSITION, 0); }
		public Pos_integerContext pos_integer() {
			return getRuleContext(Pos_integerContext.class,0);
		}
		public Multiple_file_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file_definition; }
	}

	public final Multiple_file_definitionContext multiple_file_definition() throws RecognitionException {
		Multiple_file_definitionContext _localctx = new Multiple_file_definitionContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_multiple_file_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5166);
			multiple_file_name();
			setState(5169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POSITION) {
				{
				setState(5167);
				match(POSITION);
				setState(5168);
				pos_integer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_file_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Multiple_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_file_name; }
	}

	public final Multiple_file_nameContext multiple_file_name() throws RecognitionException {
		Multiple_file_nameContext _localctx = new Multiple_file_nameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_multiple_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5171);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pos_integerContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Pos_integerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pos_integer; }
	}

	public final Pos_integerContext pos_integer() throws RecognitionException {
		Pos_integerContext _localctx = new Pos_integerContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_pos_integer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5173);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RerunContext extends ParserRuleContext {
		public TerminalNode RERUN() { return getToken(cobolParser.RERUN, 0); }
		public Rerun_definitionContext rerun_definition() {
			return getRuleContext(Rerun_definitionContext.class,0);
		}
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode EVERY() { return getToken(cobolParser.EVERY, 0); }
		public RerunContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun; }
	}

	public final RerunContext rerun() throws RecognitionException {
		RerunContext _localctx = new RerunContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_rerun);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			match(RERUN);
			setState(5178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5176);
				match(ON);
				setState(5177);
				file_name();
				}
			}

			setState(5181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EVERY) {
				{
				setState(5180);
				match(EVERY);
				}
			}

			setState(5183);
			rerun_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rerun_definitionContext extends ParserRuleContext {
		public Rerun_def_fileContext rerun_def_file() {
			return getRuleContext(Rerun_def_fileContext.class,0);
		}
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Clock_countContext clock_count() {
			return getRuleContext(Clock_countContext.class,0);
		}
		public TerminalNode CLOCK_UNITS() { return getToken(cobolParser.CLOCK_UNITS, 0); }
		public Condition_nameContext condition_name() {
			return getRuleContext(Condition_nameContext.class,0);
		}
		public Rerun_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun_definition; }
	}

	public final Rerun_definitionContext rerun_definition() throws RecognitionException {
		Rerun_definitionContext _localctx = new Rerun_definitionContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_rerun_definition);
		int _la;
		try {
			setState(5195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5185);
				rerun_def_file();
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(5186);
					match(OF);
					}
				}

				setState(5189);
				file_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5191);
				clock_count();
				setState(5192);
				match(CLOCK_UNITS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5194);
				condition_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clock_countContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Clock_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clock_count; }
	}

	public final Clock_countContext clock_count() throws RecognitionException {
		Clock_countContext _localctx = new Clock_countContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_clock_count);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5197);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_name; }
	}

	public final Condition_nameContext condition_name() throws RecognitionException {
		Condition_nameContext _localctx = new Condition_nameContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_condition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rerun_def_fileContext extends ParserRuleContext {
		public TerminalNode REEL() { return getToken(cobolParser.REEL, 0); }
		public TerminalNode UNIT() { return getToken(cobolParser.UNIT, 0); }
		public TerminalNode END() { return getToken(cobolParser.END, 0); }
		public TerminalNode OF() { return getToken(cobolParser.OF, 0); }
		public Rec_countContext rec_count() {
			return getRuleContext(Rec_countContext.class,0);
		}
		public TerminalNode RECORDS() { return getToken(cobolParser.RECORDS, 0); }
		public Rerun_def_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rerun_def_file; }
	}

	public final Rerun_def_fileContext rerun_def_file() throws RecognitionException {
		Rerun_def_fileContext _localctx = new Rerun_def_fileContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_rerun_def_file);
		int _la;
		try {
			setState(5211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case END:
			case REEL:
			case UNIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END) {
					{
					setState(5201);
					match(END);
					setState(5203);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(5202);
						match(OF);
						}
					}

					}
				}

				setState(5207);
				_la = _input.LA(1);
				if ( !(_la==REEL || _la==UNIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5208);
				rec_count();
				setState(5209);
				match(RECORDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rec_countContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Rec_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rec_count; }
	}

	public final Rec_countContext rec_count() throws RecognitionException {
		Rec_countContext _localctx = new Rec_countContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_rec_count);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5213);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SameContext extends ParserRuleContext {
		public TerminalNode SAME() { return getToken(cobolParser.SAME, 0); }
		public List<Same_area_fileContext> same_area_file() {
			return getRuleContexts(Same_area_fileContext.class);
		}
		public Same_area_fileContext same_area_file(int i) {
			return getRuleContext(Same_area_fileContext.class,i);
		}
		public TerminalNode AREA() { return getToken(cobolParser.AREA, 0); }
		public TerminalNode FOR() { return getToken(cobolParser.FOR, 0); }
		public TerminalNode RECORD() { return getToken(cobolParser.RECORD, 0); }
		public TerminalNode SORT() { return getToken(cobolParser.SORT, 0); }
		public TerminalNode SORT_MERGE() { return getToken(cobolParser.SORT_MERGE, 0); }
		public SameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same; }
	}

	public final SameContext same() throws RecognitionException {
		SameContext _localctx = new SameContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_same);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			match(SAME);
			setState(5217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (RECORD - 306)) | (1L << (SORT - 306)) | (1L << (SORT_MERGE - 306)))) != 0)) {
				{
				setState(5216);
				_la = _input.LA(1);
				if ( !(((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (RECORD - 306)) | (1L << (SORT - 306)) | (1L << (SORT_MERGE - 306)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AREA) {
				{
				setState(5219);
				match(AREA);
				}
			}

			setState(5223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5222);
				match(FOR);
				}
			}

			setState(5225);
			same_area_file();
			setState(5227); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5226);
				same_area_file();
				}
				}
				setState(5229); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Same_area_fileContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Same_area_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_same_area_file; }
	}

	public final Same_area_fileContext same_area_file() throws RecognitionException {
		Same_area_fileContext _localctx = new Same_area_fileContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_same_area_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			match(USER_DEFINED_WORD_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplyContext extends ParserRuleContext {
		public TerminalNode APPLY() { return getToken(cobolParser.APPLY, 0); }
		public TerminalNode ON() { return getToken(cobolParser.ON, 0); }
		public List<Apply_definitionContext> apply_definition() {
			return getRuleContexts(Apply_definitionContext.class);
		}
		public Apply_definitionContext apply_definition(int i) {
			return getRuleContext(Apply_definitionContext.class,i);
		}
		public List<File_nameContext> file_name() {
			return getRuleContexts(File_nameContext.class);
		}
		public File_nameContext file_name(int i) {
			return getRuleContext(File_nameContext.class,i);
		}
		public ApplyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply; }
	}

	public final ApplyContext apply() throws RecognitionException {
		ApplyContext _localctx = new ApplyContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_apply);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			match(APPLY);
			setState(5235); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5234);
				apply_definition();
				}
				}
				setState(5237); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (CONTIGUOUS - 87)) | (1L << (CONTIGUOUS_BEST_TRY - 87)) | (1L << (DEFERRED_WRITE - 87)))) != 0) || _la==EXTENSION || _la==FILL_SIZE || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (LOCK_HOLDING - 239)) | (1L << (MASS_INSERT - 239)) | (1L << (PREALLOCATION - 239)) | (1L << (PRINT_CONTROL - 239)))) != 0) || _la==WINDOW );
			setState(5239);
			match(ON);
			setState(5241); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5240);
				file_name();
				}
				}
				setState(5243); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==USER_DEFINED_WORD_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Apply_definitionContext extends ParserRuleContext {
		public TerminalNode DEFERRED_WRITE() { return getToken(cobolParser.DEFERRED_WRITE, 0); }
		public TerminalNode EXTENSION() { return getToken(cobolParser.EXTENSION, 0); }
		public Extend_amtContext extend_amt() {
			return getRuleContext(Extend_amtContext.class,0);
		}
		public TerminalNode FILL_SIZE() { return getToken(cobolParser.FILL_SIZE, 0); }
		public TerminalNode LOCK_HOLDING() { return getToken(cobolParser.LOCK_HOLDING, 0); }
		public TerminalNode MASS_INSERT() { return getToken(cobolParser.MASS_INSERT, 0); }
		public TerminalNode PREALLOCATION() { return getToken(cobolParser.PREALLOCATION, 0); }
		public Preall_amtContext preall_amt() {
			return getRuleContext(Preall_amtContext.class,0);
		}
		public TerminalNode CONTIGUOUS() { return getToken(cobolParser.CONTIGUOUS, 0); }
		public TerminalNode CONTIGUOUS_BEST_TRY() { return getToken(cobolParser.CONTIGUOUS_BEST_TRY, 0); }
		public TerminalNode PRINT_CONTROL() { return getToken(cobolParser.PRINT_CONTROL, 0); }
		public TerminalNode WINDOW() { return getToken(cobolParser.WINDOW, 0); }
		public Window_ptrsContext window_ptrs() {
			return getRuleContext(Window_ptrsContext.class,0);
		}
		public Apply_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply_definition; }
	}

	public final Apply_definitionContext apply_definition() throws RecognitionException {
		Apply_definitionContext _localctx = new Apply_definitionContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_apply_definition);
		int _la;
		try {
			setState(5259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFERRED_WRITE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5245);
				match(DEFERRED_WRITE);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5246);
				match(EXTENSION);
				setState(5247);
				extend_amt();
				}
				break;
			case FILL_SIZE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5248);
				match(FILL_SIZE);
				}
				break;
			case LOCK_HOLDING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5249);
				match(LOCK_HOLDING);
				}
				break;
			case MASS_INSERT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5250);
				match(MASS_INSERT);
				}
				break;
			case CONTIGUOUS:
			case CONTIGUOUS_BEST_TRY:
			case PREALLOCATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(5252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTIGUOUS || _la==CONTIGUOUS_BEST_TRY) {
					{
					setState(5251);
					_la = _input.LA(1);
					if ( !(_la==CONTIGUOUS || _la==CONTIGUOUS_BEST_TRY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5254);
				match(PREALLOCATION);
				setState(5255);
				preall_amt();
				}
				break;
			case PRINT_CONTROL:
				enterOuterAlt(_localctx, 7);
				{
				setState(5256);
				match(PRINT_CONTROL);
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 8);
				{
				setState(5257);
				match(WINDOW);
				setState(5258);
				window_ptrs();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_ptrsContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Window_ptrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_ptrs; }
	}

	public final Window_ptrsContext window_ptrs() throws RecognitionException {
		Window_ptrsContext _localctx = new Window_ptrsContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_window_ptrs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5261);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preall_amtContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Preall_amtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preall_amt; }
	}

	public final Preall_amtContext preall_amt() throws RecognitionException {
		Preall_amtContext _localctx = new Preall_amtContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_preall_amt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5263);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extend_amtContext extends ParserRuleContext {
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public Extend_amtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extend_amt; }
	}

	public final Extend_amtContext extend_amt() throws RecognitionException {
		Extend_amtContext _localctx = new Extend_amtContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_extend_amt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5265);
			_la = _input.LA(1);
			if ( !(_la==INTEGER_LITERAL_ || _la==HEX_LITERAL_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arithmetic_expressionContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public Unary_arithmetic_operatorContext unary_arithmetic_operator() {
			return getRuleContext(Unary_arithmetic_operatorContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
			return getRuleContext(Binary_arithmetic_operatorContext.class,0);
		}
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmetic_expression; }
	}

	public final Arithmetic_expressionContext arithmetic_expression() throws RecognitionException {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(_ctx, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 958;
		enterRecursionRule(_localctx, 958, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LPAREN_:
				{
				setState(5268);
				match(LPAREN_);
				setState(5269);
				arithmetic_expression(0);
				setState(5270);
				match(RPAREN_);
				}
				break;
			case PLUS_:
			case MINUS_:
				{
				setState(5272);
				unary_arithmetic_operator();
				setState(5273);
				arithmetic_expression(3);
				}
				break;
			case FUNCTION:
			case USER_DEFINED_WORD_:
				{
				setState(5275);
				identifier();
				}
				break;
			case STRING_LITERAL_:
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				{
				setState(5276);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(5285);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,821,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					setState(5279);
					if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
					setState(5280);
					binary_arithmetic_operator();
					setState(5281);
					arithmetic_expression(5);
					}
					} 
				}
				setState(5287);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,821,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode NUMERIC_LITERAL_() { return getToken(cobolParser.NUMERIC_LITERAL_, 0); }
		public TerminalNode INTEGER_LITERAL_() { return getToken(cobolParser.INTEGER_LITERAL_, 0); }
		public TerminalNode HEX_LITERAL_() { return getToken(cobolParser.HEX_LITERAL_, 0); }
		public TerminalNode STRING_LITERAL_() { return getToken(cobolParser.STRING_LITERAL_, 0); }
		public Figurative_constantContext figurative_constant() {
			return getRuleContext(Figurative_constantContext.class,0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_constant);
		int _la;
		try {
			setState(5291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMERIC_LITERAL_:
			case INTEGER_LITERAL_:
			case HEX_LITERAL_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5288);
				_la = _input.LA(1);
				if ( !(((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (NUMERIC_LITERAL_ - 452)) | (1L << (INTEGER_LITERAL_ - 452)) | (1L << (HEX_LITERAL_ - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STRING_LITERAL_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				match(STRING_LITERAL_);
				}
				break;
			case ALL:
			case HIGH_VALUE:
			case HIGH_VALUES:
			case LOW_VALUE:
			case LOW_VALUES:
			case QUOTE:
			case QUOTES:
			case SPACE:
			case SPACES:
			case ZERO:
			case ZEROES:
			case ZEROS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5290);
				figurative_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(cobolParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(cobolParser.MINUS_, 0); }
		public List<TerminalNode> STAR_() { return getTokens(cobolParser.STAR_); }
		public TerminalNode STAR_(int i) {
			return getToken(cobolParser.STAR_, i);
		}
		public TerminalNode SLASH_() { return getToken(cobolParser.SLASH_, 0); }
		public Binary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_arithmetic_operator; }
	}

	public final Binary_arithmetic_operatorContext binary_arithmetic_operator() throws RecognitionException {
		Binary_arithmetic_operatorContext _localctx = new Binary_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_binary_arithmetic_operator);
		try {
			setState(5299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5293);
				match(PLUS_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5294);
				match(MINUS_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5295);
				match(STAR_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5296);
				match(SLASH_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5297);
				match(STAR_);
				setState(5298);
				match(STAR_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_arithmetic_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(cobolParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(cobolParser.MINUS_, 0); }
		public Unary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_arithmetic_operator; }
	}

	public final Unary_arithmetic_operatorContext unary_arithmetic_operator() throws RecognitionException {
		Unary_arithmetic_operatorContext _localctx = new Unary_arithmetic_operatorContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_unary_arithmetic_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5301);
			_la = _input.LA(1);
			if ( !(_la==PLUS_ || _la==MINUS_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_expressionContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public List<Logic_expressionContext> logic_expression() {
			return getRuleContexts(Logic_expressionContext.class);
		}
		public Logic_expressionContext logic_expression(int i) {
			return getRuleContext(Logic_expressionContext.class,i);
		}
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public Logic_conditionContext logic_condition() {
			return getRuleContext(Logic_conditionContext.class,0);
		}
		public Logic_operationContext logic_operation() {
			return getRuleContext(Logic_operationContext.class,0);
		}
		public Logic_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_expression; }
	}

	public final Logic_expressionContext logic_expression() throws RecognitionException {
		return logic_expression(0);
	}

	private Logic_expressionContext logic_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_expressionContext _localctx = new Logic_expressionContext(_ctx, _parentState);
		Logic_expressionContext _prevctx = _localctx;
		int _startState = 966;
		enterRecursionRule(_localctx, 966, RULE_logic_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
			case 1:
				{
				setState(5304);
				match(LPAREN_);
				setState(5305);
				logic_expression(0);
				setState(5306);
				match(RPAREN_);
				}
				break;
			case 2:
				{
				setState(5308);
				match(NOT);
				setState(5309);
				logic_expression(2);
				}
				break;
			case 3:
				{
				setState(5310);
				logic_condition();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5319);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logic_expression);
					setState(5313);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(5314);
					logic_operation();
					setState(5315);
					logic_expression(4);
					}
					} 
				}
				setState(5321);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logic_conditionContext extends ParserRuleContext {
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public Condition_operatorContext condition_operator() {
			return getRuleContext(Condition_operatorContext.class,0);
		}
		public List<Logic_operationContext> logic_operation() {
			return getRuleContexts(Logic_operationContext.class);
		}
		public Logic_operationContext logic_operation(int i) {
			return getRuleContext(Logic_operationContext.class,i);
		}
		public List<Logic_condition_abbrevContext> logic_condition_abbrev() {
			return getRuleContexts(Logic_condition_abbrevContext.class);
		}
		public Logic_condition_abbrevContext logic_condition_abbrev(int i) {
			return getRuleContext(Logic_condition_abbrevContext.class,i);
		}
		public Class_condition_nameContext class_condition_name() {
			return getRuleContext(Class_condition_nameContext.class,0);
		}
		public Sign_condition_nameContext sign_condition_name() {
			return getRuleContext(Sign_condition_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode SUCCESS() { return getToken(cobolParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(cobolParser.FAILURE, 0); }
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public Logic_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_condition; }
	}

	public final Logic_conditionContext logic_condition() throws RecognitionException {
		Logic_conditionContext _localctx = new Logic_conditionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_logic_condition);
		int _la;
		try {
			int _alt;
			setState(5362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5322);
				arithmetic_expression(0);
				setState(5323);
				condition_operator();
				setState(5324);
				arithmetic_expression(0);
				setState(5330);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5325);
						logic_operation();
						setState(5326);
						logic_condition_abbrev();
						}
						} 
					}
					setState(5332);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5333);
				arithmetic_expression(0);
				setState(5335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(5334);
					match(IS);
					}
				}

				setState(5338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5337);
					match(NOT);
					}
				}

				setState(5342);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALPHABETIC:
				case ALPHABETIC_LOWER:
				case ALPHABETIC_UPPER:
				case NUMERIC:
				case USER_DEFINED_WORD_:
					{
					setState(5340);
					class_condition_name();
					}
					break;
				case NEGATIVE:
				case POSITIVE:
				case ZERO:
					{
					setState(5341);
					sign_condition_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5349);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5344);
						logic_operation();
						setState(5345);
						logic_condition_abbrev();
						}
						} 
					}
					setState(5351);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5352);
				arithmetic_expression(0);
				setState(5354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IS) {
					{
					setState(5353);
					match(IS);
					}
				}

				setState(5357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5356);
					match(NOT);
					}
				}

				setState(5359);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5361);
				identifier_result();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_condition_abbrevContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Condition_operatorContext condition_operator() {
			return getRuleContext(Condition_operatorContext.class,0);
		}
		public Logic_condition_abbrevContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_condition_abbrev; }
	}

	public final Logic_condition_abbrevContext logic_condition_abbrev() throws RecognitionException {
		Logic_condition_abbrevContext _localctx = new Logic_condition_abbrevContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_logic_condition_abbrev);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (EQUAL - 162)) | (1L << (GREATER - 162)) | (1L << (IS - 162)))) != 0) || _la==LESS || _la==NOT || ((((_la - 438)) & ~0x3f) == 0 && ((1L << (_la - 438)) & ((1L << (EQUAL_ - 438)) | (1L << (LT_ - 438)) | (1L << (LE_ - 438)) | (1L << (GE_ - 438)) | (1L << (GT_ - 438)))) != 0)) {
				{
				setState(5364);
				condition_operator();
				}
			}

			setState(5367);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_operationContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(cobolParser.AND, 0); }
		public TerminalNode OR() { return getToken(cobolParser.OR, 0); }
		public Logic_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_operation; }
	}

	public final Logic_operationContext logic_operation() throws RecognitionException {
		Logic_operationContext _localctx = new Logic_operationContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_logic_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5369);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_condition_nameContext extends ParserRuleContext {
		public TerminalNode SUCCESS() { return getToken(cobolParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(cobolParser.FAILURE, 0); }
		public Bool_condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_condition_name; }
	}

	public final Bool_condition_nameContext bool_condition_name() throws RecognitionException {
		Bool_condition_nameContext _localctx = new Bool_condition_nameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_bool_condition_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5371);
			_la = _input.LA(1);
			if ( !(_la==FAILURE || _la==SUCCESS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sign_condition_nameContext extends ParserRuleContext {
		public TerminalNode POSITIVE() { return getToken(cobolParser.POSITIVE, 0); }
		public TerminalNode NEGATIVE() { return getToken(cobolParser.NEGATIVE, 0); }
		public TerminalNode ZERO() { return getToken(cobolParser.ZERO, 0); }
		public Sign_condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign_condition_name; }
	}

	public final Sign_condition_nameContext sign_condition_name() throws RecognitionException {
		Sign_condition_nameContext _localctx = new Sign_condition_nameContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_sign_condition_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5373);
			_la = _input.LA(1);
			if ( !(_la==NEGATIVE || _la==POSITIVE || _la==ZERO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_condition_nameContext extends ParserRuleContext {
		public TerminalNode NUMERIC() { return getToken(cobolParser.NUMERIC, 0); }
		public TerminalNode ALPHABETIC() { return getToken(cobolParser.ALPHABETIC, 0); }
		public TerminalNode ALPHABETIC_LOWER() { return getToken(cobolParser.ALPHABETIC_LOWER, 0); }
		public TerminalNode ALPHABETIC_UPPER() { return getToken(cobolParser.ALPHABETIC_UPPER, 0); }
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public Class_condition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_condition_name; }
	}

	public final Class_condition_nameContext class_condition_name() throws RecognitionException {
		Class_condition_nameContext _localctx = new Class_condition_nameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_class_condition_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5375);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALPHABETIC) | (1L << ALPHABETIC_LOWER) | (1L << ALPHABETIC_UPPER))) != 0) || _la==NUMERIC || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_operatorContext extends ParserRuleContext {
		public TerminalNode GREATER() { return getToken(cobolParser.GREATER, 0); }
		public TerminalNode OR() { return getToken(cobolParser.OR, 0); }
		public TerminalNode EQUAL() { return getToken(cobolParser.EQUAL, 0); }
		public TerminalNode GE_() { return getToken(cobolParser.GE_, 0); }
		public TerminalNode LESS() { return getToken(cobolParser.LESS, 0); }
		public TerminalNode LE_() { return getToken(cobolParser.LE_, 0); }
		public TerminalNode IS() { return getToken(cobolParser.IS, 0); }
		public TerminalNode GT_() { return getToken(cobolParser.GT_, 0); }
		public TerminalNode LT_() { return getToken(cobolParser.LT_, 0); }
		public TerminalNode EQUAL_() { return getToken(cobolParser.EQUAL_, 0); }
		public TerminalNode NOT() { return getToken(cobolParser.NOT, 0); }
		public TerminalNode THAN() { return getToken(cobolParser.THAN, 0); }
		public TerminalNode TO() { return getToken(cobolParser.TO, 0); }
		public Condition_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_operator; }
	}

	public final Condition_operatorContext condition_operator() throws RecognitionException {
		Condition_operatorContext _localctx = new Condition_operatorContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_condition_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5377);
				match(IS);
				}
			}

			setState(5429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(5381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5380);
					match(NOT);
					}
				}

				setState(5407);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GREATER:
					{
					setState(5383);
					match(GREATER);
					setState(5385);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(5384);
						match(THAN);
						}
					}

					}
					break;
				case GT_:
					{
					setState(5387);
					match(GT_);
					setState(5389);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(5388);
						match(THAN);
						}
					}

					}
					break;
				case LESS:
					{
					setState(5391);
					match(LESS);
					setState(5393);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(5392);
						match(THAN);
						}
					}

					}
					break;
				case LT_:
					{
					setState(5395);
					match(LT_);
					setState(5397);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==THAN) {
						{
						setState(5396);
						match(THAN);
						}
					}

					}
					break;
				case EQUAL:
					{
					setState(5399);
					match(EQUAL);
					setState(5401);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(5400);
						match(TO);
						}
					}

					}
					break;
				case EQUAL_:
					{
					setState(5403);
					match(EQUAL_);
					setState(5405);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TO) {
						{
						setState(5404);
						match(TO);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(5409);
				match(GREATER);
				setState(5411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THAN) {
					{
					setState(5410);
					match(THAN);
					}
				}

				setState(5413);
				match(OR);
				setState(5414);
				match(EQUAL);
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(5415);
					match(TO);
					}
				}

				}
				break;
			case 3:
				{
				setState(5418);
				match(GE_);
				}
				break;
			case 4:
				{
				setState(5419);
				match(LESS);
				setState(5421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==THAN) {
					{
					setState(5420);
					match(THAN);
					}
				}

				setState(5423);
				match(OR);
				setState(5424);
				match(EQUAL);
				setState(5426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(5425);
					match(TO);
					}
				}

				}
				break;
			case 5:
				{
				setState(5428);
				match(LE_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_resultContext extends ParserRuleContext {
		public Qualified_data_itemContext qualified_data_item() {
			return getRuleContext(Qualified_data_itemContext.class,0);
		}
		public SubscriptingContext subscripting() {
			return getRuleContext(SubscriptingContext.class,0);
		}
		public Reference_modificationContext reference_modification() {
			return getRuleContext(Reference_modificationContext.class,0);
		}
		public Identifier_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_result; }
	}

	public final Identifier_resultContext identifier_result() throws RecognitionException {
		Identifier_resultContext _localctx = new Identifier_resultContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_identifier_result);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			qualified_data_item();
			setState(5433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(5432);
				subscripting();
				}
				break;
			}
			setState(5436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(5435);
				reference_modification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Identifier_resultContext identifier_result() {
			return getRuleContext(Identifier_resultContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(cobolParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public ArgumentsContext arguments() {
			return getRuleContext(ArgumentsContext.class,0);
		}
		public Reference_modificationContext reference_modification() {
			return getRuleContext(Reference_modificationContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_identifier);
		try {
			setState(5447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_DEFINED_WORD_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5438);
				identifier_result();
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5439);
				match(FUNCTION);
				setState(5440);
				function_name();
				setState(5442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5441);
					arguments();
					}
					break;
				}
				setState(5445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(5444);
					reference_modification();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentsContext extends ParserRuleContext {
		public SubscriptingContext subscripting() {
			return getRuleContext(SubscriptingContext.class,0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arguments; }
	}

	public final ArgumentsContext arguments() throws RecognitionException {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_arguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5449);
			subscripting();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubscriptingContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public List<Arithmetic_expressionContext> arithmetic_expression() {
			return getRuleContexts(Arithmetic_expressionContext.class);
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return getRuleContext(Arithmetic_expressionContext.class,i);
		}
		public List<TerminalNode> ALL() { return getTokens(cobolParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(cobolParser.ALL, i);
		}
		public SubscriptingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subscripting; }
	}

	public final SubscriptingContext subscripting() throws RecognitionException {
		SubscriptingContext _localctx = new SubscriptingContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_subscripting);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(LPAREN_);
			setState(5454); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(5454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(5452);
					arithmetic_expression(0);
					}
					break;
				case 2:
					{
					setState(5453);
					match(ALL);
					}
					break;
				}
				}
				setState(5456); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==STRING_LITERAL_ || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (PLUS_ - 422)) | (1L << (MINUS_ - 422)) | (1L << (LPAREN_ - 422)) | (1L << (NUMERIC_LITERAL_ - 422)) | (1L << (INTEGER_LITERAL_ - 422)) | (1L << (HEX_LITERAL_ - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0) );
			setState(5458);
			match(RPAREN_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modificationContext extends ParserRuleContext {
		public TerminalNode LPAREN_() { return getToken(cobolParser.LPAREN_, 0); }
		public Leftmost_character_positionContext leftmost_character_position() {
			return getRuleContext(Leftmost_character_positionContext.class,0);
		}
		public TerminalNode COLON_() { return getToken(cobolParser.COLON_, 0); }
		public TerminalNode RPAREN_() { return getToken(cobolParser.RPAREN_, 0); }
		public LengthContext length() {
			return getRuleContext(LengthContext.class,0);
		}
		public Reference_modificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_modification; }
	}

	public final Reference_modificationContext reference_modification() throws RecognitionException {
		Reference_modificationContext _localctx = new Reference_modificationContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_reference_modification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			match(LPAREN_);
			setState(5461);
			leftmost_character_position();
			setState(5462);
			match(COLON_);
			setState(5464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_LITERAL_ || _la==ALL || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (FUNCTION - 191)) | (1L << (HIGH_VALUE - 191)) | (1L << (HIGH_VALUES - 191)) | (1L << (LOW_VALUE - 191)) | (1L << (LOW_VALUES - 191)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (QUOTE - 300)) | (1L << (QUOTES - 300)) | (1L << (SPACE - 300)) | (1L << (SPACES - 300)))) != 0) || ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (ZERO - 422)) | (1L << (ZEROES - 422)) | (1L << (ZEROS - 422)) | (1L << (PLUS_ - 422)) | (1L << (MINUS_ - 422)) | (1L << (LPAREN_ - 422)) | (1L << (NUMERIC_LITERAL_ - 422)) | (1L << (INTEGER_LITERAL_ - 422)) | (1L << (HEX_LITERAL_ - 422)) | (1L << (USER_DEFINED_WORD_ - 422)))) != 0)) {
				{
				setState(5463);
				length();
				}
			}

			setState(5466);
			match(RPAREN_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Leftmost_character_positionContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public Leftmost_character_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leftmost_character_position; }
	}

	public final Leftmost_character_positionContext leftmost_character_position() throws RecognitionException {
		Leftmost_character_positionContext _localctx = new Leftmost_character_positionContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_leftmost_character_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5468);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthContext extends ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return getRuleContext(Arithmetic_expressionContext.class,0);
		}
		public LengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_length; }
	}

	public final LengthContext length() throws RecognitionException {
		LengthContext _localctx = new LengthContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			arithmetic_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public TerminalNode USER_DEFINED_WORD_() { return getToken(cobolParser.USER_DEFINED_WORD_, 0); }
		public TerminalNode RANDOM() { return getToken(cobolParser.RANDOM, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			_la = _input.LA(1);
			if ( !(_la==RANDOM || _la==USER_DEFINED_WORD_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9:
			return word_in_area_B_sempred((Word_in_area_BContext)_localctx, predIndex);
		case 479:
			return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 483:
			return logic_expression_sempred((Logic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean word_in_area_B_sempred(Word_in_area_BContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return  (this as any).testCurrentWordInAreaB ? (this as any).testCurrentWordInAreaB() as boolean : false ;
		}
		return true;
	}
	private boolean arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean logic_expression_sempred(Logic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01d1\u1565\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\3\2\7\2\u03ea\n\2\f\2"+
		"\16\2\u03ed\13\2\3\2\7\2\u03f0\n\2\f\2\16\2\u03f3\13\2\3\2\3\2\3\3\3\3"+
		"\5\3\u03f9\n\3\3\3\5\3\u03fc\n\3\3\3\5\3\u03ff\n\3\3\3\7\3\u0402\n\3\f"+
		"\3\16\3\u0405\13\3\3\3\5\3\u0408\n\3\3\4\3\4\3\4\5\4\u040d\n\4\3\4\5\4"+
		"\u0410\n\4\3\4\5\4\u0413\n\4\3\4\5\4\u0416\n\4\3\4\5\4\u0419\n\4\3\4\5"+
		"\4\u041c\n\4\3\5\3\5\3\5\3\5\7\5\u0422\n\5\f\5\16\5\u0425\13\5\3\6\3\6"+
		"\5\6\u0429\n\6\3\6\5\6\u042c\n\6\3\7\3\7\3\7\3\7\7\7\u0432\n\7\f\7\16"+
		"\7\u0435\13\7\3\b\3\b\5\b\u0439\n\b\3\b\5\b\u043c\n\b\3\b\5\b\u043f\n"+
		"\b\3\b\5\b\u0442\n\b\3\b\5\b\u0445\n\b\3\t\3\t\3\t\3\t\7\t\u044b\n\t\f"+
		"\t\16\t\u044e\13\t\3\n\3\n\5\n\u0452\n\n\3\n\7\n\u0455\n\n\f\n\16\n\u0458"+
		"\13\n\3\n\7\n\u045b\n\n\f\n\16\n\u045e\13\n\5\n\u0460\n\n\3\13\3\13\3"+
		"\13\3\f\3\f\7\f\u0467\n\f\f\f\16\f\u046a\13\f\3\f\7\f\u046d\n\f\f\f\16"+
		"\f\u0470\13\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\5\20\u047b\n\20"+
		"\3\21\3\21\3\21\5\21\u0480\n\21\3\22\3\22\5\22\u0484\n\22\3\23\3\23\3"+
		"\23\3\23\7\23\u048a\n\23\f\23\16\23\u048d\13\23\3\24\3\24\3\24\3\25\3"+
		"\25\5\25\u0494\n\25\3\25\5\25\u0497\n\25\3\25\3\25\3\26\3\26\3\26\3\27"+
		"\3\27\7\27\u04a0\n\27\f\27\16\27\u04a3\13\27\3\30\3\30\7\30\u04a7\n\30"+
		"\f\30\16\30\u04aa\13\30\3\31\3\31\7\31\u04ae\n\31\f\31\16\31\u04b1\13"+
		"\31\3\31\3\31\3\32\3\32\3\32\7\32\u04b8\n\32\f\32\16\32\u04bb\13\32\3"+
		"\33\3\33\3\33\3\33\7\33\u04c1\n\33\f\33\16\33\u04c4\13\33\3\34\3\34\3"+
		"\34\7\34\u04c9\n\34\f\34\16\34\u04cc\13\34\3\35\3\35\3\35\7\35\u04d1\n"+
		"\35\f\35\16\35\u04d4\13\35\3\35\3\35\6\35\u04d8\n\35\r\35\16\35\u04d9"+
		"\3\35\3\35\7\35\u04de\n\35\f\35\16\35\u04e1\13\35\7\35\u04e3\n\35\f\35"+
		"\16\35\u04e6\13\35\3\36\3\36\3\37\3\37\5\37\u04ec\n\37\3\37\3\37\5\37"+
		"\u04f0\n\37\3\37\3\37\3\37\5\37\u04f5\n\37\3\37\3\37\3\37\3\37\5\37\u04fb"+
		"\n\37\3\37\3\37\7\37\u04ff\n\37\f\37\16\37\u0502\13\37\3 \3 \3!\6!\u0507"+
		"\n!\r!\16!\u0508\3!\3!\3!\3!\5!\u050f\n!\3\"\3\"\3\"\5\"\u0514\n\"\3\""+
		"\3\"\7\"\u0518\n\"\f\"\16\"\u051b\13\"\3#\3#\3$\3$\6$\u0521\n$\r$\16$"+
		"\u0522\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&"+
		"\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&"+
		"\3&\5&\u0552\n&\3\'\3\'\3\'\7\'\u0557\n\'\f\'\16\'\u055a\13\'\3\'\3\'"+
		"\5\'\u055e\n\'\3(\3(\3)\3)\3*\3*\3+\3+\3+\3+\3+\3+\3+\6+\u056d\n+\r+\16"+
		"+\u056e\3+\5+\u0572\n+\3,\3,\3,\3,\5,\u0578\n,\3,\3,\3,\5,\u057d\n,\5"+
		",\u057f\n,\3,\3,\3,\5,\u0584\n,\3,\5,\u0587\n,\3,\3,\3,\5,\u058c\n,\3"+
		",\3,\5,\u0590\n,\5,\u0592\n,\3,\5,\u0595\n,\3-\3-\5-\u0599\n-\3-\3-\5"+
		"-\u059d\n-\3.\3.\5.\u05a1\n.\3/\3/\3/\3/\5/\u05a7\n/\3/\3/\3/\7/\u05ac"+
		"\n/\f/\16/\u05af\13/\5/\u05b1\n/\3/\3/\6/\u05b5\n/\r/\16/\u05b6\3/\5/"+
		"\u05ba\n/\3/\3/\5/\u05be\n/\3/\3/\5/\u05c2\n/\3/\5/\u05c5\n/\3/\5/\u05c8"+
		"\n/\3/\5/\u05cb\n/\3\60\3\60\3\61\3\61\3\61\5\61\u05d2\n\61\3\61\5\61"+
		"\u05d5\n\61\3\61\3\61\5\61\u05d9\n\61\3\61\5\61\u05dc\n\61\3\62\3\62\3"+
		"\63\3\63\3\64\3\64\3\65\5\65\u05e5\n\65\3\65\3\65\3\66\3\66\3\66\5\66"+
		"\u05ec\n\66\3\67\3\67\38\38\38\38\38\38\58\u05f6\n8\58\u05f8\n8\39\39"+
		"\69\u05fc\n9\r9\169\u05fd\3:\3:\5:\u0602\n:\3;\3;\6;\u0606\n;\r;\16;\u0607"+
		"\3;\3;\3;\3;\5;\u060e\n;\3;\3;\5;\u0612\n;\6;\u0614\n;\r;\16;\u0615\3"+
		";\3;\3;\3;\3;\5;\u061d\n;\5;\u061f\n;\3;\5;\u0622\n;\3;\5;\u0625\n;\3"+
		"<\3<\3=\3=\5=\u062b\n=\3>\3>\6>\u062f\n>\r>\16>\u0630\3>\3>\5>\u0635\n"+
		">\3>\3>\5>\u0639\n>\6>\u063b\n>\r>\16>\u063c\3>\3>\3>\5>\u0642\n>\3>\3"+
		">\5>\u0646\n>\3>\5>\u0649\n>\3>\5>\u064c\n>\3?\3?\3@\3@\3A\3A\3B\3B\3"+
		"B\5B\u0657\nB\3C\3C\3C\5C\u065c\nC\3D\3D\3D\5D\u0661\nD\3E\3E\3E\3E\3"+
		"E\3E\5E\u0669\nE\3E\5E\u066c\nE\3E\5E\u066f\nE\3E\5E\u0672\nE\3F\3F\3"+
		"G\3G\3G\7G\u0679\nG\fG\16G\u067c\13G\3G\5G\u067f\nG\3G\3G\5G\u0683\nG"+
		"\3G\5G\u0686\nG\5G\u0688\nG\3G\5G\u068b\nG\3G\3G\5G\u068f\nG\3G\5G\u0692"+
		"\nG\3G\3G\3G\3G\6G\u0698\nG\rG\16G\u0699\5G\u069c\nG\3G\3G\3G\3G\6G\u06a2"+
		"\nG\rG\16G\u06a3\5G\u06a6\nG\3H\3H\3I\3I\5I\u06ac\nI\3I\3I\3J\5J\u06b1"+
		"\nJ\3J\3J\5J\u06b5\nJ\3J\3J\7J\u06b9\nJ\fJ\16J\u06bc\13J\3K\3K\3L\3L\3"+
		"L\3L\3L\3L\5L\u06c6\nL\3M\3M\6M\u06ca\nM\rM\16M\u06cb\3M\3M\3M\3N\3N\6"+
		"N\u06d3\nN\rN\16N\u06d4\3N\3N\3N\3N\3O\3O\6O\u06dd\nO\rO\16O\u06de\3O"+
		"\3O\3O\3P\3P\3P\3P\3P\6P\u06e9\nP\rP\16P\u06ea\3Q\3Q\6Q\u06ef\nQ\rQ\16"+
		"Q\u06f0\3Q\3Q\3Q\5Q\u06f6\nQ\3Q\3Q\3R\3R\3R\3R\3R\3S\3S\5S\u0701\nS\3"+
		"T\3T\5T\u0705\nT\3U\3U\3U\3U\5U\u070b\nU\3U\5U\u070e\nU\3U\3U\3U\3U\6"+
		"U\u0714\nU\rU\16U\u0715\6U\u0718\nU\rU\16U\u0719\3U\3U\3U\3U\3U\3U\6U"+
		"\u0722\nU\rU\16U\u0723\3U\5U\u0727\nU\3U\3U\5U\u072b\nU\6U\u072d\nU\r"+
		"U\16U\u072e\5U\u0731\nU\3U\3U\3U\3U\5U\u0737\nU\3U\3U\3U\3U\7U\u073d\n"+
		"U\fU\16U\u0740\13U\3U\3U\6U\u0744\nU\rU\16U\u0745\3U\5U\u0749\nU\3U\3"+
		"U\5U\u074d\nU\5U\u074f\nU\3V\3V\5V\u0753\nV\3V\3V\5V\u0757\nV\3V\5V\u075a"+
		"\nV\3V\5V\u075d\nV\3V\3V\3V\5V\u0762\nV\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3["+
		"\3[\3[\5[\u0770\n[\3[\3[\3[\5[\u0775\n[\5[\u0777\n[\3[\5[\u077a\n[\3["+
		"\5[\u077d\n[\3\\\3\\\3]\3]\3]\5]\u0784\n]\3]\3]\5]\u0788\n]\3]\3]\3]\5"+
		"]\u078d\n]\3]\5]\u0790\n]\3^\3^\3_\3_\3_\3_\5_\u0798\n_\3`\3`\3a\3a\3"+
		"b\3b\3b\3b\3b\5b\u07a3\nb\3b\5b\u07a6\nb\3b\5b\u07a9\nb\3b\5b\u07ac\n"+
		"b\3c\3c\3d\3d\3e\3e\3e\5e\u07b5\ne\3e\5e\u07b8\ne\3e\3e\5e\u07bc\ne\3"+
		"e\3e\3e\5e\u07c1\ne\3e\5e\u07c4\ne\3e\3e\5e\u07c8\ne\3e\3e\5e\u07cc\n"+
		"e\5e\u07ce\ne\3e\3e\5e\u07d2\ne\3e\5e\u07d5\ne\3f\3f\5f\u07d9\nf\3f\5"+
		"f\u07dc\nf\3f\3f\3f\3f\3f\5f\u07e3\nf\5f\u07e5\nf\5f\u07e7\nf\3g\5g\u07ea"+
		"\ng\3g\5g\u07ed\ng\3g\3g\5g\u07f1\ng\3h\3h\5h\u07f5\nh\3h\3h\3h\5h\u07fa"+
		"\nh\5h\u07fc\nh\3h\6h\u07ff\nh\rh\16h\u0800\3h\3h\5h\u0805\nh\3i\3i\3"+
		"i\5i\u080a\ni\3j\3j\5j\u080e\nj\3j\3j\3k\5k\u0813\nk\3k\3k\3k\3l\5l\u0819"+
		"\nl\3l\3l\3l\3m\5m\u081f\nm\3m\3m\3m\3m\3m\3m\3m\3m\3m\7m\u082a\nm\fm"+
		"\16m\u082d\13m\3n\3n\3n\3n\3n\3n\3o\3o\5o\u0837\no\3p\3p\5p\u083b\np\3"+
		"q\3q\3r\3r\6r\u0841\nr\rr\16r\u0842\3r\3r\3r\3r\5r\u0849\nr\3r\3r\5r\u084d"+
		"\nr\6r\u084f\nr\rr\16r\u0850\6r\u0853\nr\rr\16r\u0854\5r\u0857\nr\3s\3"+
		"s\3s\5s\u085c\ns\3s\3s\5s\u0860\ns\3s\5s\u0863\ns\6s\u0865\ns\rs\16s\u0866"+
		"\3t\5t\u086a\nt\3t\3t\3t\3t\5t\u0870\nt\3t\3t\3t\5t\u0875\nt\3t\5t\u0878"+
		"\nt\3t\3t\3t\3t\3t\5t\u087f\nt\3t\5t\u0882\nt\3t\3t\3t\3t\3t\5t\u0889"+
		"\nt\3t\5t\u088c\nt\3t\3t\3t\5t\u0891\nt\5t\u0893\nt\5t\u0895\nt\3u\3u"+
		"\3u\3u\3u\3u\5u\u089d\nu\3u\3u\5u\u08a1\nu\6u\u08a3\nu\ru\16u\u08a4\3"+
		"u\5u\u08a8\nu\3u\5u\u08ab\nu\3v\3v\5v\u08af\nv\3w\3w\3w\6w\u08b4\nw\r"+
		"w\16w\u08b5\3w\5w\u08b9\nw\3w\3w\5w\u08bd\nw\3w\5w\u08c0\nw\3w\3w\6w\u08c4"+
		"\nw\rw\16w\u08c5\3w\3w\5w\u08ca\nw\3x\3x\3x\5x\u08cf\nx\3x\3x\3y\3y\3"+
		"z\3z\3{\3{\3{\3|\3|\3}\5}\u08dd\n}\3}\3}\5}\u08e1\n}\3}\6}\u08e4\n}\r"+
		"}\16}\u08e5\3~\3~\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080"+
		"\u08f0\n\u0080\3\u0080\3\u0080\5\u0080\u08f4\n\u0080\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\7\u0081\u08fb\n\u0081\f\u0081\16\u0081\u08fe\13"+
		"\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\6\u0084"+
		"\u0907\n\u0084\r\u0084\16\u0084\u0908\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\7\u0085\u0910\n\u0085\f\u0085\16\u0085\u0913\13\u0085\6\u0085"+
		"\u0915\n\u0085\r\u0085\16\u0085\u0916\3\u0086\3\u0086\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\7\u0087\u091f\n\u0087\f\u0087\16\u0087\u0922\13\u0087"+
		"\3\u0088\3\u0088\3\u0089\3\u0089\6\u0089\u0928\n\u0089\r\u0089\16\u0089"+
		"\u0929\3\u008a\3\u008a\3\u008a\3\u008a\6\u008a\u0930\n\u008a\r\u008a\16"+
		"\u008a\u0931\3\u008b\3\u008b\7\u008b\u0936\n\u008b\f\u008b\16\u008b\u0939"+
		"\13\u008b\3\u008c\3\u008c\5\u008c\u093d\n\u008c\3\u008c\3\u008c\3\u008d"+
		"\3\u008d\3\u008d\7\u008d\u0944\n\u008d\f\u008d\16\u008d\u0947\13\u008d"+
		"\6\u008d\u0949\n\u008d\r\u008d\16\u008d\u094a\3\u008e\3\u008e\3\u008e"+
		"\5\u008e\u0950\n\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0091\3\u0091"+
		"\3\u0092\3\u0092\6\u0092\u095a\n\u0092\r\u0092\16\u0092\u095b\3\u0093"+
		"\3\u0093\6\u0093\u0960\n\u0093\r\u0093\16\u0093\u0961\3\u0093\7\u0093"+
		"\u0965\n\u0093\f\u0093\16\u0093\u0968\13\u0093\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u096d\n\u0094\3\u0094\3\u0094\6\u0094\u0971\n\u0094\r\u0094\16"+
		"\u0094\u0972\3\u0095\3\u0095\5\u0095\u0977\n\u0095\3\u0096\3\u0096\3\u0097"+
		"\3\u0097\5\u0097\u097d\n\u0097\3\u0097\3\u0097\3\u0097\6\u0097\u0982\n"+
		"\u0097\r\u0097\16\u0097\u0983\3\u0098\3\u0098\3\u0098\5\u0098\u0989\n"+
		"\u0098\3\u0098\3\u0098\6\u0098\u098d\n\u0098\r\u0098\16\u0098\u098e\3"+
		"\u0098\3\u0098\5\u0098\u0993\n\u0098\3\u0098\3\u0098\3\u0098\6\u0098\u0998"+
		"\n\u0098\r\u0098\16\u0098\u0999\3\u0098\3\u0098\5\u0098\u099e\n\u0098"+
		"\5\u0098\u09a0\n\u0098\3\u0098\5\u0098\u09a3\n\u0098\3\u0099\3\u0099\3"+
		"\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009d"+
		"\3\u009d\5\u009d\u09b1\n\u009d\3\u009d\5\u009d\u09b4\n\u009d\3\u009d\3"+
		"\u009d\5\u009d\u09b8\n\u009d\3\u009d\6\u009d\u09bb\n\u009d\r\u009d\16"+
		"\u009d\u09bc\3\u009d\3\u009d\5\u009d\u09c1\n\u009d\3\u009d\3\u009d\5\u009d"+
		"\u09c5\n\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\5\u009f\u09cc\n"+
		"\u009f\3\u009f\7\u009f\u09cf\n\u009f\f\u009f\16\u009f\u09d2\13\u009f\3"+
		"\u009f\3\u009f\3\u009f\5\u009f\u09d7\n\u009f\3\u009f\7\u009f\u09da\n\u009f"+
		"\f\u009f\16\u009f\u09dd\13\u009f\3\u009f\3\u009f\7\u009f\u09e1\n\u009f"+
		"\f\u009f\16\u009f\u09e4\13\u009f\6\u009f\u09e6\n\u009f\r\u009f\16\u009f"+
		"\u09e7\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u09ee\n\u009f\f\u009f\16"+
		"\u009f\u09f1\13\u009f\5\u009f\u09f3\n\u009f\3\u009f\5\u009f\u09f6\n\u009f"+
		"\3\u00a0\3\u00a0\5\u00a0\u09fa\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0"+
		"\u09ff\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a04\n\u00a0\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\5\u00a1\u0a0a\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0a0e"+
		"\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0a16"+
		"\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0a1a\n\u00a3\6\u00a3\u0a1c\n\u00a3\r"+
		"\u00a3\16\u00a3\u0a1d\3\u00a3\5\u00a3\u0a21\n\u00a3\3\u00a3\5\u00a3\u0a24"+
		"\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0a2c"+
		"\n\u00a4\3\u00a4\3\u00a4\5\u00a4\u0a30\n\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0a35\n\u00a4\3\u00a4\5\u00a4\u0a38\n\u00a4\3\u00a5\3\u00a5\3"+
		"\u00a6\3\u00a6\5\u00a6\u0a3e\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5"+
		"\u00a7\u0a44\n\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0a49\n\u00a8\f\u00a8"+
		"\16\u00a8\u0a4c\13\u00a8\6\u00a8\u0a4e\n\u00a8\r\u00a8\16\u00a8\u0a4f"+
		"\3\u00a8\5\u00a8\u0a53\n\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0a58\n"+
		"\u00a9\f\u00a9\16\u00a9\u0a5b\13\u00a9\6\u00a9\u0a5d\n\u00a9\r\u00a9\16"+
		"\u00a9\u0a5e\3\u00a9\5\u00a9\u0a62\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0a67\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0a6b\n\u00aa\3\u00aa\3\u00aa\5"+
		"\u00aa\u0a6f\n\u00aa\5\u00aa\u0a71\n\u00aa\5\u00aa\u0a73\n\u00aa\3\u00aa"+
		"\5\u00aa\u0a76\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0a7c\n"+
		"\u00ab\3\u00ab\5\u00ab\u0a7f\n\u00ab\3\u00ac\3\u00ac\5\u00ac\u0a83\n\u00ac"+
		"\3\u00ad\3\u00ad\5\u00ad\u0a87\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0a8b\n"+
		"\u00ad\3\u00ae\3\u00ae\5\u00ae\u0a8f\n\u00ae\3\u00ae\3\u00ae\5\u00ae\u0a93"+
		"\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0a98\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b1\5\u00b1\u0a9e\n\u00b1\3\u00b1\3\u00b1\3\u00b2\5\u00b2"+
		"\u0aa3\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u0aa7\n\u00b2\3\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u0ab4\n\u00b3\3\u00b4\3\u00b4\3\u00b5\5\u00b5\u0ab9\n\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b7\5\u00b7\u0ac0\n\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b8\3\u00b8\3\u00b9\3\u00b9\5\u00b9\u0ac8\n\u00b9\3\u00b9\3"+
		"\u00b9\5\u00b9\u0acc\n\u00b9\5\u00b9\u0ace\n\u00b9\3\u00b9\3\u00b9\3\u00ba"+
		"\5\u00ba\u0ad3\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0ad7\n\u00ba\3\u00ba\3"+
		"\u00ba\3\u00bb\5\u00bb\u0adc\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u0ae0\n\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0ae9"+
		"\n\u00bd\3\u00bd\5\u00bd\u0aec\n\u00bd\3\u00bd\5\u00bd\u0aef\n\u00bd\3"+
		"\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0af6\n\u00bf\6\u00bf\u0af8"+
		"\n\u00bf\r\u00bf\16\u00bf\u0af9\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0aff"+
		"\n\u00bf\3\u00bf\5\u00bf\u0b02\n\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0"+
		"\u0b07\n\u00c0\6\u00c0\u0b09\n\u00c0\r\u00c0\16\u00c0\u0b0a\3\u00c1\3"+
		"\u00c1\5\u00c1\u0b0f\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0b13\n\u00c1\3\u00c1"+
		"\3\u00c1\5\u00c1\u0b17\n\u00c1\3\u00c1\5\u00c1\u0b1a\n\u00c1\3\u00c1\3"+
		"\u00c1\3\u00c1\5\u00c1\u0b1f\n\u00c1\5\u00c1\u0b21\n\u00c1\3\u00c2\3\u00c2"+
		"\6\u00c2\u0b25\n\u00c2\r\u00c2\16\u00c2\u0b26\3\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u0b2c\n\u00c3\3\u00c3\5\u00c3\u0b2f\n\u00c3\3\u00c3\5\u00c3\u0b32"+
		"\n\u00c3\3\u00c3\5\u00c3\u0b35\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c5"+
		"\3\u00c5\6\u00c5\u0b3c\n\u00c5\r\u00c5\16\u00c5\u0b3d\3\u00c6\3\u00c6"+
		"\5\u00c6\u0b42\n\u00c6\3\u00c6\6\u00c6\u0b45\n\u00c6\r\u00c6\16\u00c6"+
		"\u0b46\5\u00c6\u0b49\n\u00c6\3\u00c7\5\u00c7\u0b4c\n\u00c7\3\u00c7\3\u00c7"+
		"\5\u00c7\u0b50\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0b54\n\u00c7\3\u00c7\3"+
		"\u00c7\5\u00c7\u0b58\n\u00c7\3\u00c7\5\u00c7\u0b5b\n\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0b60\n\u00c8\3\u00c9\3\u00c9\5\u00c9\u0b64\n\u00c9\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0b6b\n\u00ca\3\u00ca\3"+
		"\u00ca\6\u00ca\u0b6f\n\u00ca\r\u00ca\16\u00ca\u0b70\3\u00cb\3\u00cb\6"+
		"\u00cb\u0b75\n\u00cb\r\u00cb\16\u00cb\u0b76\3\u00cb\3\u00cb\3\u00cb\5"+
		"\u00cb\u0b7c\n\u00cb\6\u00cb\u0b7e\n\u00cb\r\u00cb\16\u00cb\u0b7f\3\u00cb"+
		"\3\u00cb\7\u00cb\u0b84\n\u00cb\f\u00cb\16\u00cb\u0b87\13\u00cb\3\u00cb"+
		"\5\u00cb\u0b8a\n\u00cb\3\u00cb\6\u00cb\u0b8d\n\u00cb\r\u00cb\16\u00cb"+
		"\u0b8e\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0b94\n\u00cb\6\u00cb\u0b96\n\u00cb"+
		"\r\u00cb\16\u00cb\u0b97\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u0ba0\n\u00cb\5\u00cb\u0ba2\n\u00cb\3\u00cb\5\u00cb\u0ba5\n\u00cb"+
		"\3\u00cb\5\u00cb\u0ba8\n\u00cb\3\u00cc\3\u00cc\3\u00cd\3\u00cd\5\u00cd"+
		"\u0bae\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0bb6\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0bbb\n\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\5\u00cf\u0bc0\n\u00cf\5\u00cf\u0bc2\n\u00cf\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u0bc7\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0bcc\n"+
		"\u00d0\5\u00d0\u0bce\n\u00d0\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0bd3\n\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0bd8\n\u00d1\5\u00d1\u0bda\n\u00d1\3"+
		"\u00d2\3\u00d2\3\u00d2\5\u00d2\u0bdf\n\u00d2\3\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u0be4\n\u00d2\5\u00d2\u0be6\n\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u0beb\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0bf0\n\u00d3\5\u00d3\u0bf2"+
		"\n\u00d3\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0bf7\n\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u0bfc\n\u00d4\5\u00d4\u0bfe\n\u00d4\3\u00d5\3\u00d5\3"+
		"\u00d5\5\u00d5\u0c03\n\u00d5\3\u00d5\3\u00d5\5\u00d5\u0c07\n\u00d5\3\u00d5"+
		"\5\u00d5\u0c0a\n\u00d5\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\5\u00d7\u0c12\n\u00d7\3\u00d7\3\u00d7\5\u00d7\u0c16\n\u00d7\3\u00d7\5"+
		"\u00d7\u0c19\n\u00d7\3\u00d7\5\u00d7\u0c1c\n\u00d7\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\6\u00d9\u0c26\n\u00d9\r\u00d9"+
		"\16\u00d9\u0c27\3\u00d9\3\u00d9\5\u00d9\u0c2c\n\u00d9\3\u00d9\5\u00d9"+
		"\u0c2f\n\u00d9\3\u00da\3\u00da\5\u00da\u0c33\n\u00da\3\u00da\3\u00da\5"+
		"\u00da\u0c37\n\u00da\3\u00da\3\u00da\6\u00da\u0c3b\n\u00da\r\u00da\16"+
		"\u00da\u0c3c\3\u00da\3\u00da\5\u00da\u0c41\n\u00da\3\u00da\5\u00da\u0c44"+
		"\n\u00da\3\u00db\3\u00db\3\u00db\5\u00db\u0c49\n\u00db\3\u00db\5\u00db"+
		"\u0c4c\n\u00db\3\u00db\5\u00db\u0c4f\n\u00db\3\u00dc\5\u00dc\u0c52\n\u00dc"+
		"\3\u00dc\3\u00dc\5\u00dc\u0c56\n\u00dc\3\u00dc\3\u00dc\5\u00dc\u0c5a\n"+
		"\u00dc\5\u00dc\u0c5c\n\u00dc\3\u00dd\3\u00dd\5\u00dd\u0c60\n\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u0c64\n\u00dd\3\u00de\3\u00de\5\u00de\u0c68\n\u00de\3"+
		"\u00de\3\u00de\5\u00de\u0c6c\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\5"+
		"\u00df\u0c72\n\u00df\3\u00e0\5\u00e0\u0c75\n\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u0c79\n\u00e0\3\u00e0\3\u00e0\3\u00e1\5\u00e1\u0c7e\n\u00e1\3\u00e1\3"+
		"\u00e1\5\u00e1\u0c82\n\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0c90\n"+
		"\u00e2\3\u00e3\3\u00e3\7\u00e3\u0c94\n\u00e3\f\u00e3\16\u00e3\u0c97\13"+
		"\u00e3\3\u00e4\5\u00e4\u0c9a\n\u00e4\3\u00e4\3\u00e4\5\u00e4\u0c9e\n\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e5\3\u00e5\5\u00e5\u0ca4\n\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e6\5\u00e6\u0ca9\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0cb5\n\u00e8\5\u00e8"+
		"\u0cb7\n\u00e8\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0cbc\n\u00e9\3\u00e9\3"+
		"\u00e9\5\u00e9\u0cc0\n\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0cc5\n\u00e9"+
		"\3\u00e9\3\u00e9\5\u00e9\u0cc9\n\u00e9\3\u00e9\3\u00e9\5\u00e9\u0ccd\n"+
		"\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u0cd3\n\u00eb\3\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\5\u00ec\u0cd9\n\u00ec\5\u00ec\u0cdb\n\u00ec\3\u00ec"+
		"\3\u00ec\5\u00ec\u0cdf\n\u00ec\5\u00ec\u0ce1\n\u00ec\3\u00ed\3\u00ed\5"+
		"\u00ed\u0ce5\n\u00ed\3\u00ed\3\u00ed\5\u00ed\u0ce9\n\u00ed\3\u00ed\3\u00ed"+
		"\5\u00ed\u0ced\n\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00f0\5\u00f0"+
		"\u0cf4\n\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u0cf9\n\u00f0\f\u00f0\16"+
		"\u00f0\u0cfc\13\u00f0\3\u00f1\5\u00f1\u0cff\n\u00f1\3\u00f1\3\u00f1\3"+
		"\u00f1\7\u00f1\u0d04\n\u00f1\f\u00f1\16\u00f1\u0d07\13\u00f1\3\u00f2\5"+
		"\u00f2\u0d0a\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u0d10\n\u00f2"+
		"\f\u00f2\16\u00f2\u0d13\13\u00f2\3\u00f3\5\u00f3\u0d16\n\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\7\u00f3\u0d1b\n\u00f3\f\u00f3\16\u00f3\u0d1e\13\u00f3"+
		"\3\u00f4\5\u00f4\u0d21\n\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0d26\n"+
		"\u00f4\f\u00f4\16\u00f4\u0d29\13\u00f4\3\u00f5\3\u00f5\5\u00f5\u0d2d\n"+
		"\u00f5\3\u00f5\3\u00f5\7\u00f5\u0d31\n\u00f5\f\u00f5\16\u00f5\u0d34\13"+
		"\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u0d3a\n\u00f6\f\u00f6\16"+
		"\u00f6\u0d3d\13\u00f6\3\u00f6\3\u00f6\7\u00f6\u0d41\n\u00f6\f\u00f6\16"+
		"\u00f6\u0d44\13\u00f6\3\u00f7\3\u00f7\7\u00f7\u0d48\n\u00f7\f\u00f7\16"+
		"\u00f7\u0d4b\13\u00f7\3\u00f8\3\u00f8\7\u00f8\u0d4f\n\u00f8\f\u00f8\16"+
		"\u00f8\u0d52\13\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u0d58\n"+
		"\u00f9\f\u00f9\16\u00f9\u0d5b\13\u00f9\3\u00f9\7\u00f9\u0d5e\n\u00f9\f"+
		"\u00f9\16\u00f9\u0d61\13\u00f9\3\u00fa\3\u00fa\5\u00fa\u0d65\n\u00fa\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u0d6b\n\u00fb\f\u00fb\16\u00fb"+
		"\u0d6e\13\u00fb\3\u00fb\7\u00fb\u0d71\n\u00fb\f\u00fb\16\u00fb\u0d74\13"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u0d7a\n\u00fc\f\u00fc\16"+
		"\u00fc\u0d7d\13\u00fc\3\u00fc\7\u00fc\u0d80\n\u00fc\f\u00fc\16\u00fc\u0d83"+
		"\13\u00fc\3\u00fd\3\u00fd\7\u00fd\u0d87\n\u00fd\f\u00fd\16\u00fd\u0d8a"+
		"\13\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u0d90\n\u00fe\f\u00fe"+
		"\16\u00fe\u0d93\13\u00fe\3\u00fe\7\u00fe\u0d96\n\u00fe\f\u00fe\16\u00fe"+
		"\u0d99\13\u00fe\3\u00ff\3\u00ff\3\u00ff\7\u00ff\u0d9e\n\u00ff\f\u00ff"+
		"\16\u00ff\u0da1\13\u00ff\3\u00ff\3\u00ff\7\u00ff\u0da5\n\u00ff\f\u00ff"+
		"\16\u00ff\u0da8\13\u00ff\3\u0100\3\u0100\3\u0100\7\u0100\u0dad\n\u0100"+
		"\f\u0100\16\u0100\u0db0\13\u0100\3\u0100\3\u0100\7\u0100\u0db4\n\u0100"+
		"\f\u0100\16\u0100\u0db7\13\u0100\3\u0101\3\u0101\3\u0101\7\u0101\u0dbc"+
		"\n\u0101\f\u0101\16\u0101\u0dbf\13\u0101\3\u0101\3\u0101\7\u0101\u0dc3"+
		"\n\u0101\f\u0101\16\u0101\u0dc6\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\5\u0102\u0dd6\n\u0102\3\u0103\5\u0103\u0dd9\n\u0103\3\u0103\3"+
		"\u0103\3\u0104\5\u0104\u0dde\n\u0104\3\u0104\3\u0104\3\u0105\3\u0105\3"+
		"\u0105\5\u0105\u0de5\n\u0105\3\u0105\3\u0105\5\u0105\u0de9\n\u0105\3\u0105"+
		"\7\u0105\u0dec\n\u0105\f\u0105\16\u0105\u0def\13\u0105\3\u0105\3\u0105"+
		"\7\u0105\u0df3\n\u0105\f\u0105\16\u0105\u0df6\13\u0105\3\u0106\3\u0106"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\5\u0107\u0e05\n\u0107\3\u0108\3\u0108\5\u0108\u0e09\n"+
		"\u0108\3\u0109\3\u0109\5\u0109\u0e0d\n\u0109\3\u010a\3\u010a\5\u010a\u0e11"+
		"\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u0e19"+
		"\n\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010e\3\u010e\5\u010e\u0e21"+
		"\n\u010e\3\u010e\3\u010e\5\u010e\u0e25\n\u010e\5\u010e\u0e27\n\u010e\3"+
		"\u010e\6\u010e\u0e2a\n\u010e\r\u010e\16\u010e\u0e2b\3\u010f\3\u010f\5"+
		"\u010f\u0e30\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u0e37"+
		"\n\u0110\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u0e44\n\u0114\3\u0115\3\u0115\3\u0115"+
		"\7\u0115\u0e49\n\u0115\f\u0115\16\u0115\u0e4c\13\u0115\3\u0115\5\u0115"+
		"\u0e4f\n\u0115\3\u0116\3\u0116\5\u0116\u0e53\n\u0116\3\u0116\6\u0116\u0e56"+
		"\n\u0116\r\u0116\16\u0116\u0e57\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118"+
		"\u0e5e\n\u0118\3\u0118\5\u0118\u0e61\n\u0118\3\u0118\6\u0118\u0e64\n\u0118"+
		"\r\u0118\16\u0118\u0e65\3\u0119\3\u0119\3\u011a\3\u011a\5\u011a\u0e6c"+
		"\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u0e72\n\u011a\3\u011a"+
		"\3\u011a\5\u011a\u0e76\n\u011a\3\u011a\3\u011a\5\u011a\u0e7a\n\u011a\3"+
		"\u011b\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e\3\u011e\5\u011e"+
		"\u0e84\n\u011e\3\u011e\7\u011e\u0e87\n\u011e\f\u011e\16\u011e\u0e8a\13"+
		"\u011e\3\u011e\3\u011e\7\u011e\u0e8e\n\u011e\f\u011e\16\u011e\u0e91\13"+
		"\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\5\u011f\u0e9e\n\u011f\3\u0120\3\u0120\3\u0120"+
		"\5\u0120\u0ea3\n\u0120\3\u0121\3\u0121\5\u0121\u0ea7\n\u0121\3\u0121\3"+
		"\u0121\3\u0122\3\u0122\5\u0122\u0ead\n\u0122\3\u0122\3\u0122\3\u0123\3"+
		"\u0123\5\u0123\u0eb3\n\u0123\3\u0124\3\u0124\5\u0124\u0eb7\n\u0124\3\u0124"+
		"\5\u0124\u0eba\n\u0124\3\u0124\3\u0124\3\u0125\3\u0125\5\u0125\u0ec0\n"+
		"\u0125\5\u0125\u0ec2\n\u0125\3\u0125\3\u0125\3\u0126\3\u0126\5\u0126\u0ec8"+
		"\n\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\5\u0127\u0ecf\n\u0127"+
		"\3\u0127\3\u0127\3\u0128\3\u0128\5\u0128\u0ed5\n\u0128\3\u0128\5\u0128"+
		"\u0ed8\n\u0128\3\u0128\3\u0128\3\u0129\3\u0129\5\u0129\u0ede\n\u0129\5"+
		"\u0129\u0ee0\n\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u0ee5\n\u0129\5\u0129"+
		"\u0ee7\n\u0129\3\u012a\3\u012a\6\u012a\u0eeb\n\u012a\r\u012a\16\u012a"+
		"\u0eec\3\u012a\5\u012a\u0ef0\n\u012a\3\u012a\7\u012a\u0ef3\n\u012a\f\u012a"+
		"\16\u012a\u0ef6\13\u012a\6\u012a\u0ef8\n\u012a\r\u012a\16\u012a\u0ef9"+
		"\3\u012a\3\u012a\5\u012a\u0efe\n\u012a\3\u012a\5\u012a\u0f01\n\u012a\3"+
		"\u012b\3\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f"+
		"\3\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u0f14\n\u0130\3\u0131\3\u0131\3\u0131\5\u0131\u0f19\n\u0131\3\u0132\3"+
		"\u0132\3\u0132\5\u0132\u0f1e\n\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3"+
		"\u0134\5\u0134\u0f25\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u0f2c\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u0f33"+
		"\n\u0136\3\u0137\3\u0137\3\u0137\5\u0137\u0f38\n\u0137\3\u0138\3\u0138"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u0f41\n\u0139\3\u013a"+
		"\3\u013a\5\u013a\u0f45\n\u013a\3\u013a\3\u013a\5\u013a\u0f49\n\u013a\3"+
		"\u013a\3\u013a\5\u013a\u0f4d\n\u013a\3\u013b\3\u013b\3\u013c\3\u013c\3"+
		"\u013c\3\u013c\5\u013c\u0f55\n\u013c\3\u013d\3\u013d\3\u013d\5\u013d\u0f5a"+
		"\n\u013d\3\u013d\3\u013d\5\u013d\u0f5e\n\u013d\5\u013d\u0f60\n\u013d\3"+
		"\u013d\3\u013d\5\u013d\u0f64\n\u013d\3\u013d\3\u013d\5\u013d\u0f68\n\u013d"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u0f6d\n\u013d\3\u013d\3\u013d\3\u013d"+
		"\5\u013d\u0f72\n\u013d\3\u013d\3\u013d\5\u013d\u0f76\n\u013d\3\u013e\3"+
		"\u013e\5\u013e\u0f7a\n\u013e\3\u013e\3\u013e\5\u013e\u0f7e\n\u013e\5\u013e"+
		"\u0f80\n\u013e\3\u013e\6\u013e\u0f83\n\u013e\r\u013e\16\u013e\u0f84\3"+
		"\u013e\3\u013e\7\u013e\u0f89\n\u013e\f\u013e\16\u013e\u0f8c\13\u013e\5"+
		"\u013e\u0f8e\n\u013e\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0141\3"+
		"\u0141\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0145\3\u0145"+
		"\3\u0146\3\u0146\5\u0146\u0fa1\n\u0146\5\u0146\u0fa3\n\u0146\3\u0146\3"+
		"\u0146\3\u0147\3\u0147\3\u0147\5\u0147\u0faa\n\u0147\3\u0147\3\u0147\5"+
		"\u0147\u0fae\n\u0147\3\u0147\3\u0147\5\u0147\u0fb2\n\u0147\3\u0147\3\u0147"+
		"\5\u0147\u0fb6\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u0fce"+
		"\n\u0147\3\u0148\3\u0148\5\u0148\u0fd2\n\u0148\3\u0148\3\u0148\3\u0149"+
		"\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c\3\u014c\5\u014c\u0fde"+
		"\n\u014c\3\u014d\3\u014d\5\u014d\u0fe2\n\u014d\3\u014d\3\u014d\5\u014d"+
		"\u0fe6\n\u014d\5\u014d\u0fe8\n\u014d\3\u014d\6\u014d\u0feb\n\u014d\r\u014d"+
		"\16\u014d\u0fec\3\u014e\3\u014e\3\u014f\3\u014f\5\u014f\u0ff3\n\u014f"+
		"\3\u014f\3\u014f\5\u014f\u0ff7\n\u014f\3\u014f\5\u014f\u0ffa\n\u014f\3"+
		"\u014f\3\u014f\5\u014f\u0ffe\n\u014f\3\u014f\5\u014f\u1001\n\u014f\3\u014f"+
		"\5\u014f\u1004\n\u014f\3\u014f\5\u014f\u1007\n\u014f\3\u014f\3\u014f\5"+
		"\u014f\u100b\n\u014f\3\u014f\5\u014f\u100e\n\u014f\3\u014f\5\u014f\u1011"+
		"\n\u014f\3\u014f\3\u014f\5\u014f\u1015\n\u014f\3\u0150\3\u0150\5\u0150"+
		"\u1019\n\u0150\3\u0151\3\u0151\5\u0151\u101d\n\u0151\3\u0152\3\u0152\5"+
		"\u0152\u1021\n\u0152\3\u0153\3\u0153\5\u0153\u1025\n\u0153\3\u0154\3\u0154"+
		"\3\u0154\5\u0154\u102a\n\u0154\3\u0154\3\u0154\5\u0154\u102e\n\u0154\5"+
		"\u0154\u1030\n\u0154\3\u0154\6\u0154\u1033\n\u0154\r\u0154\16\u0154\u1034"+
		"\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u103d\n\u0156"+
		"\3\u0156\3\u0156\3\u0157\3\u0157\5\u0157\u1043\n\u0157\3\u0158\3\u0158"+
		"\3\u0158\5\u0158\u1048\n\u0158\3\u0158\3\u0158\5\u0158\u104c\n\u0158\5"+
		"\u0158\u104e\n\u0158\3\u0158\3\u0158\3\u0159\3\u0159\3\u0159\3\u015a\5"+
		"\u015a\u1056\n\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u105b\n\u015a\3\u015a"+
		"\3\u015a\5\u015a\u105f\n\u015a\3\u015a\5\u015a\u1062\n\u015a\3\u015a\3"+
		"\u015a\5\u015a\u1066\n\u015a\3\u015a\5\u015a\u1069\n\u015a\3\u015a\5\u015a"+
		"\u106c\n\u015a\3\u015a\5\u015a\u106f\n\u015a\3\u015a\3\u015a\5\u015a\u1073"+
		"\n\u015a\3\u015a\5\u015a\u1076\n\u015a\3\u015a\3\u015a\5\u015a\u107a\n"+
		"\u015a\3\u015a\5\u015a\u107d\n\u015a\5\u015a\u107f\n\u015a\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\5\u015e\u108a"+
		"\n\u015e\3\u015e\7\u015e\u108d\n\u015e\f\u015e\16\u015e\u1090\13\u015e"+
		"\3\u015e\3\u015e\7\u015e\u1094\n\u015e\f\u015e\16\u015e\u1097\13\u015e"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\5\u015f\u10ae\n\u015f\3\u0160\3\u0160\5\u0160"+
		"\u10b2\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u10b8\n\u0161\3"+
		"\u0161\5\u0161\u10bb\n\u0161\3\u0162\3\u0162\5\u0162\u10bf\n\u0162\3\u0162"+
		"\3\u0162\3\u0163\3\u0163\5\u0163\u10c5\n\u0163\3\u0163\5\u0163\u10c8\n"+
		"\u0163\3\u0163\5\u0163\u10cb\n\u0163\3\u0163\3\u0163\3\u0164\3\u0164\5"+
		"\u0164\u10d1\n\u0164\3\u0164\5\u0164\u10d4\n\u0164\3\u0164\5\u0164\u10d7"+
		"\n\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0166\3\u0166\3\u0167\3\u0167"+
		"\3\u0168\3\u0168\3\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016b\3\u016b"+
		"\3\u016c\3\u016c\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\3\u0170"+
		"\3\u0170\5\u0170\u10f4\n\u0170\3\u0170\3\u0170\3\u0171\3\u0171\5\u0171"+
		"\u10fa\n\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0173\3\u0173"+
		"\3\u0173\3\u0174\3\u0174\3\u0174\5\u0174\u1107\n\u0174\3\u0175\3\u0175"+
		"\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177\5\u0177\u1110\n\u0177\3\u0178"+
		"\3\u0178\3\u0179\3\u0179\3\u0179\7\u0179\u1117\n\u0179\f\u0179\16\u0179"+
		"\u111a\13\u0179\3\u0179\3\u0179\5\u0179\u111e\n\u0179\3\u0179\5\u0179"+
		"\u1121\n\u0179\3\u0179\3\u0179\7\u0179\u1125\n\u0179\f\u0179\16\u0179"+
		"\u1128\13\u0179\3\u017a\3\u017a\3\u017b\5\u017b\u112d\n\u017b\3\u017b"+
		"\3\u017b\5\u017b\u1131\n\u017b\3\u017b\3\u017b\5\u017b\u1135\n\u017b\5"+
		"\u017b\u1137\n\u017b\3\u017b\5\u017b\u113a\n\u017b\3\u017c\5\u017c\u113d"+
		"\n\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e"+
		"\7\u017e\u1147\n\u017e\f\u017e\16\u017e\u114a\13\u017e\3\u017e\7\u017e"+
		"\u114d\n\u017e\f\u017e\16\u017e\u1150\13\u017e\3\u017f\3\u017f\3\u017f"+
		"\7\u017f\u1155\n\u017f\f\u017f\16\u017f\u1158\13\u017f\3\u017f\7\u017f"+
		"\u115b\n\u017f\f\u017f\16\u017f\u115e\13\u017f\3\u0180\3\u0180\3\u0180"+
		"\7\u0180\u1163\n\u0180\f\u0180\16\u0180\u1166\13\u0180\3\u0180\7\u0180"+
		"\u1169\n\u0180\f\u0180\16\u0180\u116c\13\u0180\3\u0181\3\u0181\3\u0181"+
		"\7\u0181\u1171\n\u0181\f\u0181\16\u0181\u1174\13\u0181\3\u0181\7\u0181"+
		"\u1177\n\u0181\f\u0181\16\u0181\u117a\13\u0181\3\u0182\3\u0182\3\u0182"+
		"\7\u0182\u117f\n\u0182\f\u0182\16\u0182\u1182\13\u0182\3\u0182\5\u0182"+
		"\u1185\n\u0182\3\u0183\3\u0183\5\u0183\u1189\n\u0183\3\u0183\3\u0183\3"+
		"\u0183\7\u0183\u118e\n\u0183\f\u0183\16\u0183\u1191\13\u0183\3\u0184\3"+
		"\u0184\3\u0184\3\u0184\7\u0184\u1197\n\u0184\f\u0184\16\u0184\u119a\13"+
		"\u0184\3\u0184\5\u0184\u119d\n\u0184\3\u0184\5\u0184\u11a0\n\u0184\3\u0184"+
		"\5\u0184\u11a3\n\u0184\3\u0185\3\u0185\3\u0185\3\u0185\7\u0185\u11a9\n"+
		"\u0185\f\u0185\16\u0185\u11ac\13\u0185\3\u0185\5\u0185\u11af\n\u0185\3"+
		"\u0185\5\u0185\u11b2\n\u0185\3\u0186\3\u0186\3\u0186\7\u0186\u11b7\n\u0186"+
		"\f\u0186\16\u0186\u11ba\13\u0186\3\u0186\3\u0186\5\u0186\u11be\n\u0186"+
		"\3\u0186\3\u0186\7\u0186\u11c2\n\u0186\f\u0186\16\u0186\u11c5\13\u0186"+
		"\5\u0186\u11c7\n\u0186\3\u0187\3\u0187\3\u0188\5\u0188\u11cc\n\u0188\3"+
		"\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\7\u0189\u11d4\n\u0189\f"+
		"\u0189\16\u0189\u11d7\13\u0189\3\u0189\3\u0189\5\u0189\u11db\n\u0189\3"+
		"\u0189\5\u0189\u11de\n\u0189\3\u0189\5\u0189\u11e1\n\u0189\3\u0189\3\u0189"+
		"\7\u0189\u11e5\n\u0189\f\u0189\16\u0189\u11e8\13\u0189\5\u0189\u11ea\n"+
		"\u0189\3\u018a\3\u018a\5\u018a\u11ee\n\u018a\3\u018a\3\u018a\3\u018a\3"+
		"\u018b\3\u018b\3\u018c\3\u018c\3\u018d\5\u018d\u11f8\n\u018d\3\u018d\5"+
		"\u018d\u11fb\n\u018d\3\u018d\3\u018d\5\u018d\u11ff\n\u018d\3\u018d\3\u018d"+
		"\3\u018e\3\u018e\3\u018f\3\u018f\5\u018f\u1207\n\u018f\3\u018f\3\u018f"+
		"\3\u0190\3\u0190\3\u0191\3\u0191\3\u0191\7\u0191\u1210\n\u0191\f\u0191"+
		"\16\u0191\u1213\13\u0191\3\u0191\3\u0191\3\u0191\7\u0191\u1218\n\u0191"+
		"\f\u0191\16\u0191\u121b\13\u0191\5\u0191\u121d\n\u0191\3\u0192\3\u0192"+
		"\7\u0192\u1221\n\u0192\f\u0192\16\u0192\u1224\13\u0192\3\u0192\7\u0192"+
		"\u1227\n\u0192\f\u0192\16\u0192\u122a\13\u0192\3\u0192\7\u0192\u122d\n"+
		"\u0192\f\u0192\16\u0192\u1230\13\u0192\3\u0192\7\u0192\u1233\n\u0192\f"+
		"\u0192\16\u0192\u1236\13\u0192\3\u0192\7\u0192\u1239\n\u0192\f\u0192\16"+
		"\u0192\u123c\13\u0192\3\u0192\3\u0192\5\u0192\u1240\n\u0192\3\u0192\5"+
		"\u0192\u1243\n\u0192\3\u0192\5\u0192\u1246\n\u0192\3\u0192\5\u0192\u1249"+
		"\n\u0192\3\u0193\3\u0193\5\u0193\u124d\n\u0193\3\u0193\3\u0193\3\u0194"+
		"\3\u0194\3\u0194\5\u0194\u1254\n\u0194\3\u0194\3\u0194\3\u0195\3\u0195"+
		"\5\u0195\u125a\n\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0197\3\u0197"+
		"\3\u0197\5\u0197\u1263\n\u0197\3\u0197\5\u0197\u1266\n\u0197\3\u0197\5"+
		"\u0197\u1269\n\u0197\3\u0197\3\u0197\5\u0197\u126d\n\u0197\3\u0197\3\u0197"+
		"\5\u0197\u1271\n\u0197\5\u0197\u1273\n\u0197\3\u0198\3\u0198\5\u0198\u1277"+
		"\n\u0198\3\u0198\5\u0198\u127a\n\u0198\3\u0198\3\u0198\3\u0199\3\u0199"+
		"\5\u0199\u1280\n\u0199\3\u0199\5\u0199\u1283\n\u0199\3\u0199\3\u0199\3"+
		"\u019a\3\u019a\3\u019b\3\u019b\3\u019c\3\u019c\3\u019d\3\u019d\3\u019d"+
		"\7\u019d\u1290\n\u019d\f\u019d\16\u019d\u1293\13\u019d\3\u019e\3\u019e"+
		"\5\u019e\u1297\n\u019e\3\u019e\5\u019e\u129a\n\u019e\3\u019e\3\u019e\3"+
		"\u019f\3\u019f\5\u019f\u12a0\n\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u12a5"+
		"\n\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a2\3\u01a2"+
		"\3\u01a2\5\u01a2\u12b0\n\u01a2\3\u01a2\6\u01a2\u12b3\n\u01a2\r\u01a2\16"+
		"\u01a2\u12b4\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u12bc\n\u01a4"+
		"\3\u01a5\3\u01a5\5\u01a5\u12c0\n\u01a5\3\u01a5\6\u01a5\u12c3\n\u01a5\r"+
		"\u01a5\16\u01a5\u12c4\3\u01a6\6\u01a6\u12c8\n\u01a6\r\u01a6\16\u01a6\u12c9"+
		"\3\u01a6\5\u01a6\u12cd\n\u01a6\3\u01a7\6\u01a7\u12d0\n\u01a7\r\u01a7\16"+
		"\u01a7\u12d1\3\u01a7\5\u01a7\u12d5\n\u01a7\3\u01a7\6\u01a7\u12d8\n\u01a7"+
		"\r\u01a7\16\u01a7\u12d9\3\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\3\u01aa"+
		"\3\u01aa\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u12e6\n\u01ab\3\u01ab\3\u01ab"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\6\u01ac\u12f0\n\u01ac"+
		"\r\u01ac\16\u01ac\u12f1\5\u01ac\u12f4\n\u01ac\3\u01ad\3\u01ad\3\u01ad"+
		"\5\u01ad\u12f9\n\u01ad\3\u01ad\3\u01ad\3\u01ad\6\u01ad\u12fe\n\u01ad\r"+
		"\u01ad\16\u01ad\u12ff\5\u01ad\u1302\n\u01ad\3\u01ae\3\u01ae\5\u01ae\u1306"+
		"\n\u01ae\3\u01af\3\u01af\5\u01af\u130a\n\u01af\3\u01b0\3\u01b0\5\u01b0"+
		"\u130e\n\u01b0\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3"+
		"\7\u01b3\u1317\n\u01b3\f\u01b3\16\u01b3\u131a\13\u01b3\3\u01b3\7\u01b3"+
		"\u131d\n\u01b3\f\u01b3\16\u01b3\u1320\13\u01b3\3\u01b4\3\u01b4\5\u01b4"+
		"\u1324\n\u01b4\3\u01b4\3\u01b4\6\u01b4\u1328\n\u01b4\r\u01b4\16\u01b4"+
		"\u1329\3\u01b4\3\u01b4\7\u01b4\u132e\n\u01b4\f\u01b4\16\u01b4\u1331\13"+
		"\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u133f\n\u01b5\3\u01b6\5\u01b6"+
		"\u1342\n\u01b6\3\u01b6\3\u01b6\5\u01b6\u1346\n\u01b6\3\u01b6\3\u01b6\3"+
		"\u01b7\3\u01b7\3\u01b8\3\u01b8\5\u01b8\u134e\n\u01b8\3\u01b8\5\u01b8\u1351"+
		"\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1355\n\u01b8\3\u01b8\5\u01b8\u1358\n"+
		"\u01b8\3\u01b8\5\u01b8\u135b\n\u01b8\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1360"+
		"\n\u01b9\3\u01b9\5\u01b9\u1363\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u1367\n"+
		"\u01b9\3\u01b9\5\u01b9\u136a\n\u01b9\3\u01b9\5\u01b9\u136d\n\u01b9\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\6\u01ba\u1373\n\u01ba\r\u01ba\16\u01ba\u1374"+
		"\5\u01ba\u1377\n\u01ba\3\u01bb\3\u01bb\3\u01bc\3\u01bc\3\u01bd\3\u01bd"+
		"\5\u01bd\u137f\n\u01bd\3\u01bd\5\u01bd\u1382\n\u01bd\5\u01bd\u1384\n\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1389\n\u01bd\3\u01bd\5\u01bd\u138c\n"+
		"\u01bd\3\u01bd\5\u01bd\u138f\n\u01bd\3\u01be\3\u01be\3\u01be\5\u01be\u1394"+
		"\n\u01be\3\u01bf\3\u01bf\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u139b\n\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c1\3\u01c1\5\u01c1\u13a1\n\u01c1\3\u01c1\5\u01c1"+
		"\u13a4\n\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c3\3\u01c3\5\u01c3"+
		"\u13ac\n\u01c3\5\u01c3\u13ae\n\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3"+
		"\u01c3\5\u01c3\u13b5\n\u01c3\3\u01c4\3\u01c4\5\u01c4\u13b9\n\u01c4\3\u01c4"+
		"\5\u01c4\u13bc\n\u01c4\3\u01c4\3\u01c4\3\u01c5\3\u01c5\5\u01c5\u13c2\n"+
		"\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u13ca\n"+
		"\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u13d0\n\u01c5\5\u01c5\u13d2"+
		"\n\u01c5\3\u01c5\5\u01c5\u13d5\n\u01c5\3\u01c6\3\u01c6\5\u01c6\u13d9\n"+
		"\u01c6\3\u01c6\3\u01c6\3\u01c7\3\u01c7\5\u01c7\u13df\n\u01c7\3\u01c7\3"+
		"\u01c7\3\u01c7\5\u01c7\u13e4\n\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3"+
		"\u01c8\3\u01c9\3\u01c9\3\u01ca\3\u01ca\5\u01ca\u13ef\n\u01ca\3\u01ca\3"+
		"\u01ca\3\u01cb\5\u01cb\u13f4\n\u01cb\3\u01cb\3\u01cb\5\u01cb\u13f8\n\u01cb"+
		"\3\u01cb\3\u01cb\5\u01cb\u13fc\n\u01cb\5\u01cb\u13fe\n\u01cb\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1404\n\u01cc\3\u01cd\3\u01cd\3\u01ce\3"+
		"\u01ce\3\u01ce\7\u01ce\u140b\n\u01ce\f\u01ce\16\u01ce\u140e\13\u01ce\3"+
		"\u01ce\6\u01ce\u1411\n\u01ce\r\u01ce\16\u01ce\u1412\3\u01ce\3\u01ce\7"+
		"\u01ce\u1417\n\u01ce\f\u01ce\16\u01ce\u141a\13\u01ce\5\u01ce\u141c\n\u01ce"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1422\n\u01cf\3\u01d0\3\u01d0"+
		"\3\u01d0\5\u01d0\u1427\n\u01d0\3\u01d0\5\u01d0\u142a\n\u01d0\3\u01d0\6"+
		"\u01d0\u142d\n\u01d0\r\u01d0\16\u01d0\u142e\3\u01d1\3\u01d1\3\u01d1\5"+
		"\u01d1\u1434\n\u01d1\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3"+
		"\u01d4\5\u01d4\u143d\n\u01d4\3\u01d4\5\u01d4\u1440\n\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d5\3\u01d5\5\u01d5\u1446\n\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\5\u01d5\u144e\n\u01d5\3\u01d6\3\u01d6\3\u01d7\3\u01d7"+
		"\3\u01d8\3\u01d8\5\u01d8\u1456\n\u01d8\5\u01d8\u1458\n\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u145e\n\u01d8\3\u01d9\3\u01d9\3\u01da\3"+
		"\u01da\5\u01da\u1464\n\u01da\3\u01da\5\u01da\u1467\n\u01da\3\u01da\5\u01da"+
		"\u146a\n\u01da\3\u01da\3\u01da\6\u01da\u146e\n\u01da\r\u01da\16\u01da"+
		"\u146f\3\u01db\3\u01db\3\u01dc\3\u01dc\6\u01dc\u1476\n\u01dc\r\u01dc\16"+
		"\u01dc\u1477\3\u01dc\3\u01dc\6\u01dc\u147c\n\u01dc\r\u01dc\16\u01dc\u147d"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u1487"+
		"\n\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u148e\n\u01dd"+
		"\3\u01de\3\u01de\3\u01df\3\u01df\3\u01e0\3\u01e0\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u14a0"+
		"\n\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\7\u01e1\u14a6\n\u01e1\f\u01e1"+
		"\16\u01e1\u14a9\13\u01e1\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u14ae\n\u01e2"+
		"\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u14b6\n\u01e3"+
		"\3\u01e4\3\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e5\5\u01e5\u14c2\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\7\u01e5"+
		"\u14c8\n\u01e5\f\u01e5\16\u01e5\u14cb\13\u01e5\3\u01e6\3\u01e6\3\u01e6"+
		"\3\u01e6\3\u01e6\3\u01e6\7\u01e6\u14d3\n\u01e6\f\u01e6\16\u01e6\u14d6"+
		"\13\u01e6\3\u01e6\3\u01e6\5\u01e6\u14da\n\u01e6\3\u01e6\5\u01e6\u14dd"+
		"\n\u01e6\3\u01e6\3\u01e6\5\u01e6\u14e1\n\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\7\u01e6\u14e6\n\u01e6\f\u01e6\16\u01e6\u14e9\13\u01e6\3\u01e6\3\u01e6"+
		"\5\u01e6\u14ed\n\u01e6\3\u01e6\5\u01e6\u14f0\n\u01e6\3\u01e6\3\u01e6\3"+
		"\u01e6\5\u01e6\u14f5\n\u01e6\3\u01e7\5\u01e7\u14f8\n\u01e7\3\u01e7\3\u01e7"+
		"\3\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01ec"+
		"\5\u01ec\u1505\n\u01ec\3\u01ec\5\u01ec\u1508\n\u01ec\3\u01ec\3\u01ec\5"+
		"\u01ec\u150c\n\u01ec\3\u01ec\3\u01ec\5\u01ec\u1510\n\u01ec\3\u01ec\3\u01ec"+
		"\5\u01ec\u1514\n\u01ec\3\u01ec\3\u01ec\5\u01ec\u1518\n\u01ec\3\u01ec\3"+
		"\u01ec\5\u01ec\u151c\n\u01ec\3\u01ec\3\u01ec\5\u01ec\u1520\n\u01ec\5\u01ec"+
		"\u1522\n\u01ec\3\u01ec\3\u01ec\5\u01ec\u1526\n\u01ec\3\u01ec\3\u01ec\3"+
		"\u01ec\5\u01ec\u152b\n\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1530\n\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u1535\n\u01ec\3\u01ec\5\u01ec\u1538\n"+
		"\u01ec\3\u01ed\3\u01ed\5\u01ed\u153c\n\u01ed\3\u01ed\5\u01ed\u153f\n\u01ed"+
		"\3\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u1545\n\u01ee\3\u01ee\5\u01ee"+
		"\u1548\n\u01ee\5\u01ee\u154a\n\u01ee\3\u01ef\3\u01ef\3\u01f0\3\u01f0\3"+
		"\u01f0\6\u01f0\u1551\n\u01f0\r\u01f0\16\u01f0\u1552\3\u01f0\3\u01f0\3"+
		"\u01f1\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u155b\n\u01f1\3\u01f1\3\u01f1\3"+
		"\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f4\3\u01f4\3\u01f4\2\4\u03c0\u03c8"+
		"\u01f5\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<"+
		">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a"+
		"\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222"+
		"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a"+
		"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252"+
		"\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a"+
		"\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282"+
		"\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a"+
		"\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2"+
		"\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca"+
		"\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2"+
		"\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa"+
		"\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312"+
		"\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a"+
		"\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342"+
		"\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a"+
		"\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372"+
		"\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a"+
		"\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2"+
		"\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba"+
		"\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2"+
		"\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\2;\6\2\u00ca"+
		"\u00cb\u00f3\u00f4\u012e\u012f\u0168\u0169\3\2\u01a8\u01aa\4\2\u01c7\u01c7"+
		"\u01c9\u01c9\4\2\u00a6\u00a6\u00a9\u00a9\3\2\u01ad\u01ad\4\2\3\3\u01c9"+
		"\u01c9\4\2\b\b\'\'\3\2\u00ec\u00ed\3\2\u01c7\u01c8\3\2ab\3\2\u01c6\u01c8"+
		"\4\2\36\36yy\4\2\u0081\u0081\u0195\u0195\4\2\u0109\u0109\u010b\u010b\4"+
		"\2\u00af\u00af\u0173\u0173\5\2\u0100\u0100\u0124\u0124\u0128\u0128\3\2"+
		"\u0185\u0186\4\2\u00ac\u00ac\u0114\u0114\6\2\u00ac\u00ac\u00d8\u00d8\u00df"+
		"\u00df\u0114\u0114\5\2\t\t\u00b8\u00b8\u00e6\u00e6\4\2\t\t\u00e6\u00e6"+
		"\5\2\r\r\20\21\u0104\u0105\4\2\64\64\u00dc\u00dc\4\2\u00ec\u00ec\u0154"+
		"\u0154\4\2\u00a4\u00a4\u01b8\u01b8\4\2\u0137\u0137\u0190\u0190\4\2\u0093"+
		"\u0093\u00a2\u00a2\3\2\u017a\u017b\4\2\u00e7\u00e7\u014f\u014f\3\2\u00e1"+
		"\u00e2\4\2\u00e6\u00e6\u018b\u018b\4\2\u00b7\u00b7\u01c9\u01c9\4\2nn{"+
		"{\4\2\u0162\u0162\u0192\u0192\3\2\u01ae\u01af\4\2\u00de\u00de\u01d0\u01d0"+
		"\4\2\u00b4\u00b4\u00cd\u00cd\4\2\u010a\u010a\u016b\u016b\4\2\u00a1\u00a1"+
		"\u00a3\u00a3\4\2\u00fe\u00fe\u016b\u016b\6\2\13\13\u00cc\u00cc\u019e\u019e"+
		"\u01c9\u01c9\5\2<<\u00fa\u00fa\u01a2\u01a2\n\2\33\34\65\6588VV\u009f\u00a0"+
		"\u00ee\u00ee\u0119\u011a\u017c\u017e\4\2\u00d1\u00d1\u0108\u0108\4\2\u0178"+
		"\u0178\u01cf\u01cf\4\2\30\30\u00de\u00de\5\2\u0083\u0083\u0130\u0130\u015f"+
		"\u015f\3\2\31\32\4\2<<\u0135\u0135\4\2\u0083\u0083\u00ae\u00ae\4\2\u0134"+
		"\u0134\u0164\u0165\3\2YZ\3\2\u01b3\u01b4\4\2\25\25\u010f\u010f\5\2\u00ff"+
		"\u00ff\u0122\u0122\u01a8\u01a8\5\2\r\17\u0104\u0104\u01c9\u01c9\4\2\u0130"+
		"\u0130\u01c9\u01c9\2\u17c3\2\u03eb\3\2\2\2\4\u03f6\3\2\2\2\6\u0409\3\2"+
		"\2\2\b\u041d\3\2\2\2\n\u0426\3\2\2\2\f\u042d\3\2\2\2\16\u0436\3\2\2\2"+
		"\20\u0446\3\2\2\2\22\u044f\3\2\2\2\24\u0461\3\2\2\2\26\u0464\3\2\2\2\30"+
		"\u0471\3\2\2\2\32\u0474\3\2\2\2\34\u0476\3\2\2\2\36\u047a\3\2\2\2 \u047f"+
		"\3\2\2\2\"\u0483\3\2\2\2$\u0485\3\2\2\2&\u048e\3\2\2\2(\u0491\3\2\2\2"+
		"*\u049a\3\2\2\2,\u049d\3\2\2\2.\u04a4\3\2\2\2\60\u04ab\3\2\2\2\62\u04b4"+
		"\3\2\2\2\64\u04bc\3\2\2\2\66\u04c5\3\2\2\28\u04cd\3\2\2\2:\u04e7\3\2\2"+
		"\2<\u04e9\3\2\2\2>\u0503\3\2\2\2@\u050e\3\2\2\2B\u0510\3\2\2\2D\u051c"+
		"\3\2\2\2F\u051e\3\2\2\2H\u0524\3\2\2\2J\u0551\3\2\2\2L\u0553\3\2\2\2N"+
		"\u055f\3\2\2\2P\u0561\3\2\2\2R\u0563\3\2\2\2T\u0571\3\2\2\2V\u0573\3\2"+
		"\2\2X\u059c\3\2\2\2Z\u05a0\3\2\2\2\\\u05a2\3\2\2\2^\u05cc\3\2\2\2`\u05ce"+
		"\3\2\2\2b\u05dd\3\2\2\2d\u05df\3\2\2\2f\u05e1\3\2\2\2h\u05e4\3\2\2\2j"+
		"\u05eb\3\2\2\2l\u05ed\3\2\2\2n\u05ef\3\2\2\2p\u05f9\3\2\2\2r\u05ff\3\2"+
		"\2\2t\u0603\3\2\2\2v\u0626\3\2\2\2x\u062a\3\2\2\2z\u062c\3\2\2\2|\u064d"+
		"\3\2\2\2~\u064f\3\2\2\2\u0080\u0651\3\2\2\2\u0082\u0656\3\2\2\2\u0084"+
		"\u0658\3\2\2\2\u0086\u0660\3\2\2\2\u0088\u0662\3\2\2\2\u008a\u0673\3\2"+
		"\2\2\u008c\u0675\3\2\2\2\u008e\u06a7\3\2\2\2\u0090\u06a9\3\2\2\2\u0092"+
		"\u06b0\3\2\2\2\u0094\u06bd\3\2\2\2\u0096\u06c5\3\2\2\2\u0098\u06c7\3\2"+
		"\2\2\u009a\u06d0\3\2\2\2\u009c\u06da\3\2\2\2\u009e\u06e3\3\2\2\2\u00a0"+
		"\u06ec\3\2\2\2\u00a2\u06f9\3\2\2\2\u00a4\u0700\3\2\2\2\u00a6\u0704\3\2"+
		"\2\2\u00a8\u074e\3\2\2\2\u00aa\u0761\3\2\2\2\u00ac\u0763\3\2\2\2\u00ae"+
		"\u0765\3\2\2\2\u00b0\u0767\3\2\2\2\u00b2\u0769\3\2\2\2\u00b4\u076b\3\2"+
		"\2\2\u00b6\u077e\3\2\2\2\u00b8\u0780\3\2\2\2\u00ba\u0791\3\2\2\2\u00bc"+
		"\u0793\3\2\2\2\u00be\u0799\3\2\2\2\u00c0\u079b\3\2\2\2\u00c2\u079d\3\2"+
		"\2\2\u00c4\u07ad\3\2\2\2\u00c6\u07af\3\2\2\2\u00c8\u07b1\3\2\2\2\u00ca"+
		"\u07e6\3\2\2\2\u00cc\u07f0\3\2\2\2\u00ce\u07f2\3\2\2\2\u00d0\u0806\3\2"+
		"\2\2\u00d2\u080d\3\2\2\2\u00d4\u0812\3\2\2\2\u00d6\u0818\3\2\2\2\u00d8"+
		"\u081e\3\2\2\2\u00da\u082e\3\2\2\2\u00dc\u0836\3\2\2\2\u00de\u083a\3\2"+
		"\2\2\u00e0\u083c\3\2\2\2\u00e2\u0856\3\2\2\2\u00e4\u0858\3\2\2\2\u00e6"+
		"\u0894\3\2\2\2\u00e8\u0896\3\2\2\2\u00ea\u08ae\3\2\2\2\u00ec\u08b0\3\2"+
		"\2\2\u00ee\u08cb\3\2\2\2\u00f0\u08d2\3\2\2\2\u00f2\u08d4\3\2\2\2\u00f4"+
		"\u08d6\3\2\2\2\u00f6\u08d9\3\2\2\2\u00f8\u08dc\3\2\2\2\u00fa\u08e7\3\2"+
		"\2\2\u00fc\u08e9\3\2\2\2\u00fe\u08eb\3\2\2\2\u0100\u08f5\3\2\2\2\u0102"+
		"\u08ff\3\2\2\2\u0104\u0901\3\2\2\2\u0106\u0903\3\2\2\2\u0108\u090a\3\2"+
		"\2\2\u010a\u0918\3\2\2\2\u010c\u091a\3\2\2\2\u010e\u0923\3\2\2\2\u0110"+
		"\u0925\3\2\2\2\u0112\u092b\3\2\2\2\u0114\u0933\3\2\2\2\u0116\u093a\3\2"+
		"\2\2\u0118\u0940\3\2\2\2\u011a\u094f\3\2\2\2\u011c\u0951\3\2\2\2\u011e"+
		"\u0953\3\2\2\2\u0120\u0955\3\2\2\2\u0122\u0957\3\2\2\2\u0124\u095d\3\2"+
		"\2\2\u0126\u0969\3\2\2\2\u0128\u0976\3\2\2\2\u012a\u0978\3\2\2\2\u012c"+
		"\u097a\3\2\2\2\u012e\u0985\3\2\2\2\u0130\u09a4\3\2\2\2\u0132\u09a7\3\2"+
		"\2\2\u0134\u09a9\3\2\2\2\u0136\u09ab\3\2\2\2\u0138\u09c4\3\2\2\2\u013a"+
		"\u09c6\3\2\2\2\u013c\u09c8\3\2\2\2\u013e\u0a03\3\2\2\2\u0140\u0a09\3\2"+
		"\2\2\u0142\u0a0d\3\2\2\2\u0144\u0a0f\3\2\2\2\u0146\u0a25\3\2\2\2\u0148"+
		"\u0a39\3\2\2\2\u014a\u0a3d\3\2\2\2\u014c\u0a43\3\2\2\2\u014e\u0a45\3\2"+
		"\2\2\u0150\u0a54\3\2\2\2\u0152\u0a63\3\2\2\2\u0154\u0a77\3\2\2\2\u0156"+
		"\u0a82\3\2\2\2\u0158\u0a84\3\2\2\2\u015a\u0a8c\3\2\2\2\u015c\u0a97\3\2"+
		"\2\2\u015e\u0a99\3\2\2\2\u0160\u0a9d\3\2\2\2\u0162\u0aa2\3\2\2\2\u0164"+
		"\u0ab3\3\2\2\2\u0166\u0ab5\3\2\2\2\u0168\u0ab8\3\2\2\2\u016a\u0abc\3\2"+
		"\2\2\u016c\u0abf\3\2\2\2\u016e\u0ac3\3\2\2\2\u0170\u0ac5\3\2\2\2\u0172"+
		"\u0ad2\3\2\2\2\u0174\u0adb\3\2\2\2\u0176\u0ae3\3\2\2\2\u0178\u0ae5\3\2"+
		"\2\2\u017a\u0af0\3\2\2\2\u017c\u0af2\3\2\2\2\u017e\u0b03\3\2\2\2\u0180"+
		"\u0b20\3\2\2\2\u0182\u0b22\3\2\2\2\u0184\u0b28\3\2\2\2\u0186\u0b36\3\2"+
		"\2\2\u0188\u0b39\3\2\2\2\u018a\u0b48\3\2\2\2\u018c\u0b5a\3\2\2\2\u018e"+
		"\u0b5f\3\2\2\2\u0190\u0b63\3\2\2\2\u0192\u0b65\3\2\2\2\u0194\u0ba1\3\2"+
		"\2\2\u0196\u0ba9\3\2\2\2\u0198\u0bad\3\2\2\2\u019a\u0bb5\3\2\2\2\u019c"+
		"\u0bc1\3\2\2\2\u019e\u0bcd\3\2\2\2\u01a0\u0bd9\3\2\2\2\u01a2\u0be5\3\2"+
		"\2\2\u01a4\u0bf1\3\2\2\2\u01a6\u0bfd\3\2\2\2\u01a8\u0bff\3\2\2\2\u01aa"+
		"\u0c0b\3\2\2\2\u01ac\u0c0d\3\2\2\2\u01ae\u0c1d\3\2\2\2\u01b0\u0c22\3\2"+
		"\2\2\u01b2\u0c30\3\2\2\2\u01b4\u0c45\3\2\2\2\u01b6\u0c51\3\2\2\2\u01b8"+
		"\u0c5d\3\2\2\2\u01ba\u0c65\3\2\2\2\u01bc\u0c71\3\2\2\2\u01be\u0c74\3\2"+
		"\2\2\u01c0\u0c7d\3\2\2\2\u01c2\u0c8f\3\2\2\2\u01c4\u0c91\3\2\2\2\u01c6"+
		"\u0c99\3\2\2\2\u01c8\u0ca1\3\2\2\2\u01ca\u0ca8\3\2\2\2\u01cc\u0cad\3\2"+
		"\2\2\u01ce\u0cb6\3\2\2\2\u01d0\u0ccc\3\2\2\2\u01d2\u0cce\3\2\2\2\u01d4"+
		"\u0cd2\3\2\2\2\u01d6\u0ce0\3\2\2\2\u01d8\u0cec\3\2\2\2\u01da\u0cee\3\2"+
		"\2\2\u01dc\u0cf0\3\2\2\2\u01de\u0cf3\3\2\2\2\u01e0\u0cfe\3\2\2\2\u01e2"+
		"\u0d09\3\2\2\2\u01e4\u0d15\3\2\2\2\u01e6\u0d20\3\2\2\2\u01e8\u0d2a\3\2"+
		"\2\2\u01ea\u0d35\3\2\2\2\u01ec\u0d45\3\2\2\2\u01ee\u0d4c\3\2\2\2\u01f0"+
		"\u0d53\3\2\2\2\u01f2\u0d64\3\2\2\2\u01f4\u0d66\3\2\2\2\u01f6\u0d75\3\2"+
		"\2\2\u01f8\u0d84\3\2\2\2\u01fa\u0d8b\3\2\2\2\u01fc\u0d9a\3\2\2\2\u01fe"+
		"\u0da9\3\2\2\2\u0200\u0db8\3\2\2\2\u0202\u0dd5\3\2\2\2\u0204\u0dd8\3\2"+
		"\2\2\u0206\u0ddd\3\2\2\2\u0208\u0de1\3\2\2\2\u020a\u0df7\3\2\2\2\u020c"+
		"\u0e04\3\2\2\2\u020e\u0e06\3\2\2\2\u0210\u0e0a\3\2\2\2\u0212\u0e0e\3\2"+
		"\2\2\u0214\u0e14\3\2\2\2\u0216\u0e1a\3\2\2\2\u0218\u0e1c\3\2\2\2\u021a"+
		"\u0e26\3\2\2\2\u021c\u0e2d\3\2\2\2\u021e\u0e36\3\2\2\2\u0220\u0e38\3\2"+
		"\2\2\u0222\u0e3b\3\2\2\2\u0224\u0e3d\3\2\2\2\u0226\u0e43\3\2\2\2\u0228"+
		"\u0e45\3\2\2\2\u022a\u0e50\3\2\2\2\u022c\u0e59\3\2\2\2\u022e\u0e5b\3\2"+
		"\2\2\u0230\u0e67\3\2\2\2\u0232\u0e79\3\2\2\2\u0234\u0e7b\3\2\2\2\u0236"+
		"\u0e7d\3\2\2\2\u0238\u0e7f\3\2\2\2\u023a\u0e81\3\2\2\2\u023c\u0e9d\3\2"+
		"\2\2\u023e\u0ea2\3\2\2\2\u0240\u0ea4\3\2\2\2\u0242\u0eaa\3\2\2\2\u0244"+
		"\u0eb0\3\2\2\2\u0246\u0eb4\3\2\2\2\u0248\u0ec1\3\2\2\2\u024a\u0ec5\3\2"+
		"\2\2\u024c\u0ecb\3\2\2\2\u024e\u0ed2\3\2\2\2\u0250\u0edf\3\2\2\2\u0252"+
		"\u0ef7\3\2\2\2\u0254\u0f02\3\2\2\2\u0256\u0f04\3\2\2\2\u0258\u0f06\3\2"+
		"\2\2\u025a\u0f08\3\2\2\2\u025c\u0f0a\3\2\2\2\u025e\u0f13\3\2\2\2\u0260"+
		"\u0f18\3\2\2\2\u0262\u0f1d\3\2\2\2\u0264\u0f1f\3\2\2\2\u0266\u0f24\3\2"+
		"\2\2\u0268\u0f2b\3\2\2\2\u026a\u0f32\3\2\2\2\u026c\u0f37\3\2\2\2\u026e"+
		"\u0f39\3\2\2\2\u0270\u0f40\3\2\2\2\u0272\u0f4c\3\2\2\2\u0274\u0f4e\3\2"+
		"\2\2\u0276\u0f54\3\2\2\2\u0278\u0f56\3\2\2\2\u027a\u0f7f\3\2\2\2\u027c"+
		"\u0f8f\3\2\2\2\u027e\u0f92\3\2\2\2\u0280\u0f94\3\2\2\2\u0282\u0f96\3\2"+
		"\2\2\u0284\u0f98\3\2\2\2\u0286\u0f9a\3\2\2\2\u0288\u0f9c\3\2\2\2\u028a"+
		"\u0fa2\3\2\2\2\u028c\u0fcd\3\2\2\2\u028e\u0fcf\3\2\2\2\u0290\u0fd5\3\2"+
		"\2\2\u0292\u0fd7\3\2\2\2\u0294\u0fd9\3\2\2\2\u0296\u0fdd\3\2\2\2\u0298"+
		"\u0fe7\3\2\2\2\u029a\u0fee\3\2\2\2\u029c\u0ff0\3\2\2\2\u029e\u1018\3\2"+
		"\2\2\u02a0\u101c\3\2\2\2\u02a2\u1020\3\2\2\2\u02a4\u1024\3\2\2\2\u02a6"+
		"\u1026\3\2\2\2\u02a8\u1036\3\2\2\2\u02aa\u1038\3\2\2\2\u02ac\u1042\3\2"+
		"\2\2\u02ae\u1044\3\2\2\2\u02b0\u1051\3\2\2\2\u02b2\u107e\3\2\2\2\u02b4"+
		"\u1080\3\2\2\2\u02b6\u1082\3\2\2\2\u02b8\u1084\3\2\2\2\u02ba\u1086\3\2"+
		"\2\2\u02bc\u10ad\3\2\2\2\u02be\u10b1\3\2\2\2\u02c0\u10b3\3\2\2\2\u02c2"+
		"\u10bc\3\2\2\2\u02c4\u10c2\3\2\2\2\u02c6\u10ce\3\2\2\2\u02c8\u10da\3\2"+
		"\2\2\u02ca\u10dc\3\2\2\2\u02cc\u10de\3\2\2\2\u02ce\u10e0\3\2\2\2\u02d0"+
		"\u10e2\3\2\2\2\u02d2\u10e5\3\2\2\2\u02d4\u10e7\3\2\2\2\u02d6\u10e9\3\2"+
		"\2\2\u02d8\u10eb\3\2\2\2\u02da\u10ed\3\2\2\2\u02dc\u10ef\3\2\2\2\u02de"+
		"\u10f1\3\2\2\2\u02e0\u10f7\3\2\2\2\u02e2\u10fd\3\2\2\2\u02e4\u1100\3\2"+
		"\2\2\u02e6\u1103\3\2\2\2\u02e8\u1108\3\2\2\2\u02ea\u110b\3\2\2\2\u02ec"+
		"\u110f\3\2\2\2\u02ee\u1111\3\2\2\2\u02f0\u1113\3\2\2\2\u02f2\u1129\3\2"+
		"\2\2\u02f4\u112c\3\2\2\2\u02f6\u113c\3\2\2\2\u02f8\u1141\3\2\2\2\u02fa"+
		"\u1143\3\2\2\2\u02fc\u1151\3\2\2\2\u02fe\u115f\3\2\2\2\u0300\u116d\3\2"+
		"\2\2\u0302\u117b\3\2\2\2\u0304\u1186\3\2\2\2\u0306\u1192\3\2\2\2\u0308"+
		"\u11a4\3\2\2\2\u030a\u11b3\3\2\2\2\u030c\u11c8\3\2\2\2\u030e\u11cb\3\2"+
		"\2\2\u0310\u11d0\3\2\2\2\u0312\u11eb\3\2\2\2\u0314\u11f2\3\2\2\2\u0316"+
		"\u11f4\3\2\2\2\u0318\u11f7\3\2\2\2\u031a\u1202\3\2\2\2\u031c\u1204\3\2"+
		"\2\2\u031e\u120a\3\2\2\2\u0320\u120c\3\2\2\2\u0322\u1222\3\2\2\2\u0324"+
		"\u124a\3\2\2\2\u0326\u1250\3\2\2\2\u0328\u1257\3\2\2\2\u032a\u125d\3\2"+
		"\2\2\u032c\u1262\3\2\2\2\u032e\u1274\3\2\2\2\u0330\u127d\3\2\2\2\u0332"+
		"\u1286\3\2\2\2\u0334\u1288\3\2\2\2\u0336\u128a\3\2\2\2\u0338\u128c\3\2"+
		"\2\2\u033a\u1294\3\2\2\2\u033c\u12a4\3\2\2\2\u033e\u12a8\3\2\2\2\u0340"+
		"\u12aa\3\2\2\2\u0342\u12ac\3\2\2\2\u0344\u12b6\3\2\2\2\u0346\u12b8\3\2"+
		"\2\2\u0348\u12bd\3\2\2\2\u034a\u12c7\3\2\2\2\u034c\u12cf\3\2\2\2\u034e"+
		"\u12db\3\2\2\2\u0350\u12de\3\2\2\2\u0352\u12e0\3\2\2\2\u0354\u12e2\3\2"+
		"\2\2\u0356\u12f3\3\2\2\2\u0358\u1301\3\2\2\2\u035a\u1305\3\2\2\2\u035c"+
		"\u1309\3\2\2\2\u035e\u130d\3\2\2\2\u0360\u130f\3\2\2\2\u0362\u1311\3\2"+
		"\2\2\u0364\u1313\3\2\2\2\u0366\u1321\3\2\2\2\u0368\u133e\3\2\2\2\u036a"+
		"\u1341\3\2\2\2\u036c\u1349\3\2\2\2\u036e\u134b\3\2\2\2\u0370\u135c\3\2"+
		"\2\2\u0372\u1376\3\2\2\2\u0374\u1378\3\2\2\2\u0376\u137a\3\2\2\2\u0378"+
		"\u1383\3\2\2\2\u037a\u1390\3\2\2\2\u037c\u1395\3\2\2\2\u037e\u1397\3\2"+
		"\2\2\u0380\u139e\3\2\2\2\u0382\u13a7\3\2\2\2\u0384\u13ad\3\2\2\2\u0386"+
		"\u13b6\3\2\2\2\u0388\u13d4\3\2\2\2\u038a\u13d6\3\2\2\2\u038c\u13dc\3\2"+
		"\2\2\u038e\u13e8\3\2\2\2\u0390\u13ea\3\2\2\2\u0392\u13ec\3\2\2\2\u0394"+
		"\u13fd\3\2\2\2\u0396\u1403\3\2\2\2\u0398\u1405\3\2\2\2\u039a\u1407\3\2"+
		"\2\2\u039c\u1421\3\2\2\2\u039e\u1423\3\2\2\2\u03a0\u1430\3\2\2\2\u03a2"+
		"\u1435\3\2\2\2\u03a4\u1437\3\2\2\2\u03a6\u1439\3\2\2\2\u03a8\u144d\3\2"+
		"\2\2\u03aa\u144f\3\2\2\2\u03ac\u1451\3\2\2\2\u03ae\u145d\3\2\2\2\u03b0"+
		"\u145f\3\2\2\2\u03b2\u1461\3\2\2\2\u03b4\u1471\3\2\2\2\u03b6\u1473\3\2"+
		"\2\2\u03b8\u148d\3\2\2\2\u03ba\u148f\3\2\2\2\u03bc\u1491\3\2\2\2\u03be"+
		"\u1493\3\2\2\2\u03c0\u149f\3\2\2\2\u03c2\u14ad\3\2\2\2\u03c4\u14b5\3\2"+
		"\2\2\u03c6\u14b7\3\2\2\2\u03c8\u14c1\3\2\2\2\u03ca\u14f4\3\2\2\2\u03cc"+
		"\u14f7\3\2\2\2\u03ce\u14fb\3\2\2\2\u03d0\u14fd\3\2\2\2\u03d2\u14ff\3\2"+
		"\2\2\u03d4\u1501\3\2\2\2\u03d6\u1504\3\2\2\2\u03d8\u1539\3\2\2\2\u03da"+
		"\u1549\3\2\2\2\u03dc\u154b\3\2\2\2\u03de\u154d\3\2\2\2\u03e0\u1556\3\2"+
		"\2\2\u03e2\u155e\3\2\2\2\u03e4\u1560\3\2\2\2\u03e6\u1562\3\2\2\2\u03e8"+
		"\u03ea\5T+\2\u03e9\u03e8\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2"+
		"\2\u03eb\u03ec\3\2\2\2\u03ec\u03f1\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03f0"+
		"\5\4\3\2\u03ef\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1"+
		"\u03f2\3\2\2\2\u03f2\u03f4\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f4\u03f5\7\2"+
		"\2\3\u03f5\3\3\2\2\2\u03f6\u03f8\5\6\4\2\u03f7\u03f9\5\n\6\2\u03f8\u03f7"+
		"\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\3\2\2\2\u03fa\u03fc\5\16\b\2"+
		"\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03ff"+
		"\5\22\n\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0403\3\2\2\2"+
		"\u0400\u0402\5\4\3\2\u0401\u0400\3\2\2\2\u0402\u0405\3\2\2\2\u0403\u0401"+
		"\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2\u0406"+
		"\u0408\5$\23\2\u0407\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\5\3\2\2\2"+
		"\u0409\u040a\5\b\5\2\u040a\u040c\5\u02f0\u0179\2\u040b\u040d\5\26\f\2"+
		"\u040c\u040b\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040f\3\2\2\2\u040e\u0410"+
		"\5\u02fa\u017e\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0412\3"+
		"\2\2\2\u0411\u0413\5\u02fc\u017f\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2"+
		"\2\2\u0413\u0415\3\2\2\2\u0414\u0416\5\u02fe\u0180\2\u0415\u0414\3\2\2"+
		"\2\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0419\5\u0300\u0181\2"+
		"\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041b\3\2\2\2\u041a\u041c"+
		"\5\u0302\u0182\2\u041b\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c\7\3\2\2"+
		"\2\u041d\u041e\7\u00cf\2\2\u041e\u041f\7\u0080\2\2\u041f\u0423\7\u01c3"+
		"\2\2\u0420\u0422\5T+\2\u0421\u0420\3\2\2\2\u0422\u0425\3\2\2\2\u0423\u0421"+
		"\3\2\2\2\u0423\u0424\3\2\2\2\u0424\t\3\2\2\2\u0425\u0423\3\2\2\2\u0426"+
		"\u0428\5\f\7\2\u0427\u0429\5\u0306\u0184\2\u0428\u0427\3\2\2\2\u0428\u0429"+
		"\3\2\2\2\u0429\u042b\3\2\2\2\u042a\u042c\5\u0308\u0185\2\u042b\u042a\3"+
		"\2\2\2\u042b\u042c\3\2\2\2\u042c\13\3\2\2\2\u042d\u042e\7\u009e\2\2\u042e"+
		"\u042f\7\u0080\2\2\u042f\u0433\7\u01c3\2\2\u0430\u0432\5T+\2\u0431\u0430"+
		"\3\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434"+
		"\r\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0438\5\20\t\2\u0437\u0439\5\u01ea"+
		"\u00f6\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\3\2\2\2\u043a"+
		"\u043c\5\u01f0\u00f9\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043e"+
		"\3\2\2\2\u043d\u043f\5\u01f4\u00fb\2\u043e\u043d\3\2\2\2\u043e\u043f\3"+
		"\2\2\2\u043f\u0441\3\2\2\2\u0440\u0442\5\u01f6\u00fc\2\u0441\u0440\3\2"+
		"\2\2\u0441\u0442\3\2\2\2\u0442\u0444\3\2\2\2\u0443\u0445\5\u01fa\u00fe"+
		"\2\u0444\u0443\3\2\2\2\u0444\u0445\3\2\2\2\u0445\17\3\2\2\2\u0446\u0447"+
		"\7h\2\2\u0447\u0448\7\u0080\2\2\u0448\u044c\7\u01c3\2\2\u0449\u044b\5"+
		"T+\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c"+
		"\u044d\3\2\2\2\u044d\21\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0451\5(\25"+
		"\2\u0450\u0452\5\60\31\2\u0451\u0450\3\2\2\2\u0451\u0452\3\2\2\2\u0452"+
		"\u045f\3\2\2\2\u0453\u0455\5.\30\2\u0454\u0453\3\2\2\2\u0455\u0458\3\2"+
		"\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0460\3\2\2\2\u0458"+
		"\u0456\3\2\2\2\u0459\u045b\58\35\2\u045a\u0459\3\2\2\2\u045b\u045e\3\2"+
		"\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0460\3\2\2\2\u045e"+
		"\u045c\3\2\2\2\u045f\u0456\3\2\2\2\u045f\u045c\3\2\2\2\u0460\23\3\2\2"+
		"\2\u0461\u0462\6\13\2\2\u0462\u0463\13\2\2\2\u0463\25\3\2\2\2\u0464\u0468"+
		"\5\30\r\2\u0465\u0467\5\24\13\2\u0466\u0465\3\2\2\2\u0467\u046a\3\2\2"+
		"\2\u0468\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046e\3\2\2\2\u046a\u0468"+
		"\3\2\2\2\u046b\u046d\5T+\2\u046c\u046b\3\2\2\2\u046d\u0470\3\2\2\2\u046e"+
		"\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\27\3\2\2\2\u0470\u046e\3\2\2"+
		"\2\u0471\u0472\7\"\2\2\u0472\u0473\7\u01c3\2\2\u0473\31\3\2\2\2\u0474"+
		"\u0475\t\2\2\2\u0475\33\3\2\2\2\u0476\u0477\t\3\2\2\u0477\35\3\2\2\2\u0478"+
		"\u047b\5\32\16\2\u0479\u047b\5\34\17\2\u047a\u0478\3\2\2\2\u047a\u0479"+
		"\3\2\2\2\u047b\37\3\2\2\2\u047c\u0480\5\32\16\2\u047d\u047e\7\t\2\2\u047e"+
		"\u0480\7\3\2\2\u047f\u047c\3\2\2\2\u047f\u047d\3\2\2\2\u0480!\3\2\2\2"+
		"\u0481\u0484\5 \21\2\u0482\u0484\5\34\17\2\u0483\u0481\3\2\2\2\u0483\u0482"+
		"\3\2\2\2\u0484#\3\2\2\2\u0485\u0486\5&\24\2\u0486\u0487\5\u02f2\u017a"+
		"\2\u0487\u048b\7\u01c3\2\2\u0488\u048a\5T+\2\u0489\u0488\3\2\2\2\u048a"+
		"\u048d\3\2\2\2\u048b\u0489\3\2\2\2\u048b\u048c\3\2\2\2\u048c%\3\2\2\2"+
		"\u048d\u048b\3\2\2\2\u048e\u048f\7\u0088\2\2\u048f\u0490\7\u012b\2\2\u0490"+
		"\'\3\2\2\2\u0491\u0493\5*\26\2\u0492\u0494\5F$\2\u0493\u0492\3\2\2\2\u0493"+
		"\u0494\3\2\2\2\u0494\u0496\3\2\2\2\u0495\u0497\5H%\2\u0496\u0495\3\2\2"+
		"\2\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\5,\27\2\u0499)"+
		"\3\2\2\2\u049a\u049b\7\u0129\2\2\u049b\u049c\7\u0080\2\2\u049c+\3\2\2"+
		"\2\u049d\u04a1\7\u01c3\2\2\u049e\u04a0\5T+\2\u049f\u049e\3\2\2\2\u04a0"+
		"\u04a3\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2-\3\2\2\2"+
		"\u04a3\u04a1\3\2\2\2\u04a4\u04a8\5B\"\2\u04a5\u04a7\58\35\2\u04a6\u04a5"+
		"\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9"+
		"/\3\2\2\2\u04aa\u04a8\3\2\2\2\u04ab\u04af\5\62\32\2\u04ac\u04ae\5\66\34"+
		"\2\u04ad\u04ac\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2\u04af\u04b0"+
		"\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b3\5\64\33\2"+
		"\u04b3\61\3\2\2\2\u04b4\u04b5\7q\2\2\u04b5\u04b9\7\u01c3\2\2\u04b6\u04b8"+
		"\5T+\2\u04b7\u04b6\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9"+
		"\u04ba\3\2\2\2\u04ba\63\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bc\u04bd\7\u0088"+
		"\2\2\u04bd\u04be\7q\2\2\u04be\u04c2\7\u01c3\2\2\u04bf\u04c1\5T+\2\u04c0"+
		"\u04bf\3\2\2\2\u04c1\u04c4\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2"+
		"\2\2\u04c3\65\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04c6\5B\"\2\u04c6\u04ca"+
		"\5<\37\2\u04c7\u04c9\58\35\2\u04c8\u04c7\3\2\2\2\u04c9\u04cc\3\2\2\2\u04ca"+
		"\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\67\3\2\2\2\u04cc\u04ca\3\2\2"+
		"\2\u04cd\u04ce\5:\36\2\u04ce\u04d2\7\u01c3\2\2\u04cf\u04d1\5T+\2\u04d0"+
		"\u04cf\3\2\2\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2"+
		"\2\2\u04d3\u04e4\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04d8\5J&\2\u04d6\u04d8"+
		"\5L\'\2\u04d7\u04d5\3\2\2\2\u04d7\u04d6\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9"+
		"\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04df\7\u01c3"+
		"\2\2\u04dc\u04de\5T+\2\u04dd\u04dc\3\2\2\2\u04de\u04e1\3\2\2\2\u04df\u04dd"+
		"\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e2"+
		"\u04d7\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5\3\2"+
		"\2\2\u04e59\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e7\u04e8\t\4\2\2\u04e8;\3\2"+
		"\2\2\u04e9\u04eb\7\u0199\2\2\u04ea\u04ec\7\u00c4\2\2\u04eb\u04ea\3\2\2"+
		"\2\u04eb\u04ec\3\2\2\2\u04ec\u04fa\3\2\2\2\u04ed\u04ef\7\b\2\2\u04ee\u04f0"+
		"\7\u016b\2\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3\2\2"+
		"\2\u04f1\u04f2\t\5\2\2\u04f2\u04f4\7\u0129\2\2\u04f3\u04f5\7\u010b\2\2"+
		"\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04fb"+
		"\5@!\2\u04f7\u04f8\7\'\2\2\u04f8\u04f9\7\u0142\2\2\u04f9\u04fb\5> \2\u04fa"+
		"\u04ed\3\2\2\2\u04fa\u04f7\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u0500\7\u01c3"+
		"\2\2\u04fd\u04ff\5T+\2\u04fe\u04fd\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe"+
		"\3\2\2\2\u0500\u0501\3\2\2\2\u0501=\3\2\2\2\u0502\u0500\3\2\2\2\u0503"+
		"\u0504\5\u0338\u019d\2\u0504?\3\2\2\2\u0505\u0507\5\u0398\u01cd\2\u0506"+
		"\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2"+
		"\2\2\u0509\u050f\3\2\2\2\u050a\u050f\7\u00d8\2\2\u050b\u050f\7\u0114\2"+
		"\2\u050c\u050f\7\u00df\2\2\u050d\u050f\7\u00ac\2\2\u050e\u0506\3\2\2\2"+
		"\u050e\u050a\3\2\2\2\u050e\u050b\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050d"+
		"\3\2\2\2\u050fA\3\2\2\2\u0510\u0511\5D#\2\u0511\u0513\7\u0157\2\2\u0512"+
		"\u0514\5\u031e\u0190\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515"+
		"\3\2\2\2\u0515\u0519\7\u01c3\2\2\u0516\u0518\5T+\2\u0517\u0516\3\2\2\2"+
		"\u0518\u051b\3\2\2\2\u0519\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051aC\3"+
		"\2\2\2\u051b\u0519\3\2\2\2\u051c\u051d\t\4\2\2\u051dE\3\2\2\2\u051e\u0520"+
		"\7\u019a\2\2\u051f\u0521\5\u0338\u019d\2\u0520\u051f\3\2\2\2\u0521\u0522"+
		"\3\2\2\2\u0522\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523G\3\2\2\2\u0524"+
		"\u0525\7\u00c3\2\2\u0525\u0526\5\u0338\u019d\2\u0526I\3\2\2\2\u0527\u0552"+
		"\5\u019a\u00ce\2\u0528\u0552\5\u0194\u00cb\2\u0529\u0552\5\u0192\u00ca"+
		"\2\u052a\u0552\5\u0184\u00c3\2\u052b\u0552\5\u0182\u00c2\2\u052c\u0552"+
		"\5\u017e\u00c0\2\u052d\u0552\5\u017c\u00bf\2\u052e\u0552\5\u017a\u00be"+
		"\2\u052f\u0552\5\u0178\u00bd\2\u0530\u0552\5\u014c\u00a7\2\u0531\u0552"+
		"\5\u0142\u00a2\2\u0532\u0552\5\u013c\u009f\2\u0533\u0552\5\u0134\u009b"+
		"\2\u0534\u0552\5\u0136\u009c\2\u0535\u0552\5\u0130\u0099\2\u0536\u0552"+
		"\5\u0138\u009d\2\u0537\u0552\5\u012e\u0098\2\u0538\u0552\5\u0124\u0093"+
		"\2\u0539\u0552\5\u0122\u0092\2\u053a\u0552\5\u00fe\u0080\2\u053b\u0552"+
		"\5\u00ecw\2\u053c\u0552\5\u012c\u0097\2\u053d\u0552\5\u00e8u\2\u053e\u0552"+
		"\5\u00e2r\2\u053f\u0552\5\u00ceh\2\u0540\u0552\5\u00c8e\2\u0541\u0552"+
		"\5\u00bc_\2\u0542\u0552\5\u00b8]\2\u0543\u0552\5\u00b4[\2\u0544\u0552"+
		"\5\u00a8U\2\u0545\u0552\5\u0096L\2\u0546\u0552\5\u008cG\2\u0547\u0552"+
		"\5\u0088E\2\u0548\u0552\5\u0084C\2\u0549\u0552\5z>\2\u054a\u0552\5t;\2"+
		"\u054b\u0552\5r:\2\u054c\u0552\5p9\2\u054d\u0552\5n8\2\u054e\u0552\5\\"+
		"/\2\u054f\u0552\5V,\2\u0550\u0552\5\u00c2b\2\u0551\u0527\3\2\2\2\u0551"+
		"\u0528\3\2\2\2\u0551\u0529\3\2\2\2\u0551\u052a\3\2\2\2\u0551\u052b\3\2"+
		"\2\2\u0551\u052c\3\2\2\2\u0551\u052d\3\2\2\2\u0551\u052e\3\2\2\2\u0551"+
		"\u052f\3\2\2\2\u0551\u0530\3\2\2\2\u0551\u0531\3\2\2\2\u0551\u0532\3\2"+
		"\2\2\u0551\u0533\3\2\2\2\u0551\u0534\3\2\2\2\u0551\u0535\3\2\2\2\u0551"+
		"\u0536\3\2\2\2\u0551\u0537\3\2\2\2\u0551\u0538\3\2\2\2\u0551\u0539\3\2"+
		"\2\2\u0551\u053a\3\2\2\2\u0551\u053b\3\2\2\2\u0551\u053c\3\2\2\2\u0551"+
		"\u053d\3\2\2\2\u0551\u053e\3\2\2\2\u0551\u053f\3\2\2\2\u0551\u0540\3\2"+
		"\2\2\u0551\u0541\3\2\2\2\u0551\u0542\3\2\2\2\u0551\u0543\3\2\2\2\u0551"+
		"\u0544\3\2\2\2\u0551\u0545\3\2\2\2\u0551\u0546\3\2\2\2\u0551\u0547\3\2"+
		"\2\2\u0551\u0548\3\2\2\2\u0551\u0549\3\2\2\2\u0551\u054a\3\2\2\2\u0551"+
		"\u054b\3\2\2\2\u0551\u054c\3\2\2\2\u0551\u054d\3\2\2\2\u0551\u054e\3\2"+
		"\2\2\u0551\u054f\3\2\2\2\u0551\u0550\3\2\2\2\u0552K\3\2\2\2\u0553\u0554"+
		"\7\u01ab\2\2\u0554\u0558\7\u01ac\2\2\u0555\u0557\n\6\2\2\u0556\u0555\3"+
		"\2\2\2\u0557\u055a\3\2\2\2\u0558\u0556\3\2\2\2\u0558\u0559\3\2\2\2\u0559"+
		"\u055b\3\2\2\2\u055a\u0558\3\2\2\2\u055b\u055d\7\u01ad\2\2\u055c\u055e"+
		"\7\u01c3\2\2\u055d\u055c\3\2\2\2\u055d\u055e\3\2\2\2\u055eM\3\2\2\2\u055f"+
		"\u0560\t\7\2\2\u0560O\3\2\2\2\u0561\u0562\t\7\2\2\u0562Q\3\2\2\2\u0563"+
		"\u0564\t\7\2\2\u0564S\3\2\2\2\u0565\u0566\7\u013f\2\2\u0566\u0567\7\u0109"+
		"\2\2\u0567\u0572\7\u01c3\2\2\u0568\u056c\7\u013f\2\2\u0569\u056a\7\u01b0"+
		"\2\2\u056a\u056b\7\64\2\2\u056b\u056d\7\u01b0\2\2\u056c\u0569\3\2\2\2"+
		"\u056d\u056e\3\2\2\2\u056e\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570"+
		"\3\2\2\2\u0570\u0572\7\u01c3\2\2\u0571\u0565\3\2\2\2\u0571\u0568\3\2\2"+
		"\2\u0572U\3\2\2\2\u0573\u0574\7\u01a4\2\2\u0574\u0577\5\u02a8\u0155\2"+
		"\u0575\u0576\7\u00bf\2\2\u0576\u0578\5\u0156\u00ac\2\u0577\u0575\3\2\2"+
		"\2\u0577\u0578\3\2\2\2\u0578\u057e\3\2\2\2\u0579\u057a\7\n\2\2\u057a\u057c"+
		"\7\u0101\2\2\u057b\u057d\7\u0113\2\2\u057c\u057b\3\2\2\2\u057c\u057d\3"+
		"\2\2\2\u057d\u057f\3\2\2\2\u057e\u0579\3\2\2\2\u057e\u057f\3\2\2\2\u057f"+
		"\u0591\3\2\2\2\u0580\u0592\5\u01a6\u00d4\2\u0581\u0583\t\b\2\2\u0582\u0584"+
		"\7\7\2\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\3\2\2\2\u0585"+
		"\u0587\5X-\2\u0586\u0581\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0588\3\2\2"+
		"\2\u0588\u0592\5\u01a4\u00d3\2\u0589\u058b\t\b\2\2\u058a\u058c\7\7\2\2"+
		"\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u058f"+
		"\5X-\2\u058e\u0590\5\u01a4\u00d3\2\u058f\u058e\3\2\2\2\u058f\u0590\3\2"+
		"\2\2\u0590\u0592\3\2\2\2\u0591\u0580\3\2\2\2\u0591\u0586\3\2\2\2\u0591"+
		"\u0589\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0594\3\2\2\2\u0593\u0595\7\u009d"+
		"\2\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2\2\2\u0595W\3\2\2\2\u0596\u0598"+
		"\5Z.\2\u0597\u0599\t\t\2\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599"+
		"\u059d\3\2\2\2\u059a\u059d\5\u0360\u01b1\2\u059b\u059d\7\u0118\2\2\u059c"+
		"\u0596\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059b\3\2\2\2\u059dY\3\2\2\2"+
		"\u059e\u05a1\5\u03da\u01ee\2\u059f\u05a1\t\n\2\2\u05a0\u059e\3\2\2\2\u05a0"+
		"\u059f\3\2\2\2\u05a1[\3\2\2\2\u05a2\u05a3\7\u0193\2\2\u05a3\u05b0\5l\67"+
		"\2\u05a4\u05a6\7u\2\2\u05a5\u05a7\7\64\2\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7"+
		"\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05ad\5h\65\2\u05a9\u05aa\7\u010f\2"+
		"\2\u05aa\u05ac\5h\65\2\u05ab\u05a9\3\2\2\2\u05ac\u05af\3\2\2\2\u05ad\u05ab"+
		"\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b1\3\2\2\2\u05af\u05ad\3\2\2\2\u05b0"+
		"\u05a4\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b4\7\u00dc"+
		"\2\2\u05b3\u05b5\5`\61\2\u05b4\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6"+
		"\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05bd\3\2\2\2\u05b8\u05ba\7\u01a1"+
		"\2\2\u05b9\u05b8\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb"+
		"\u05bc\7\u011f\2\2\u05bc\u05be\5|?\2\u05bd\u05b9\3\2\2\2\u05bd\u05be\3"+
		"\2\2\2\u05be\u05c4\3\2\2\2\u05bf\u05c1\7\u017f\2\2\u05c0\u05c2\7\u00d1"+
		"\2\2\u05c1\u05c0\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3"+
		"\u05c5\5^\60\2\u05c4\u05bf\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7\3\2"+
		"\2\2\u05c6\u05c8\5\u01a2\u00d2\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2\2"+
		"\2\u05c8\u05ca\3\2\2\2\u05c9\u05cb\7\u009c\2\2\u05ca\u05c9\3\2\2\2\u05ca"+
		"\u05cb\3\2\2\2\u05cb]\3\2\2\2\u05cc\u05cd\5\u03d8\u01ed\2\u05cd_\3\2\2"+
		"\2\u05ce\u05d4\5d\63\2\u05cf\u05d1\7v\2\2\u05d0\u05d2\7\u00d1\2\2\u05d1"+
		"\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d5\5f"+
		"\64\2\u05d4\u05cf\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05db\3\2\2\2\u05d6"+
		"\u05d8\7c\2\2\u05d7\u05d9\7\u00d1\2\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9"+
		"\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\5b\62\2\u05db\u05d6\3\2\2\2\u05db"+
		"\u05dc\3\2\2\2\u05dca\3\2\2\2\u05dd\u05de\5\u03d8\u01ed\2\u05dec\3\2\2"+
		"\2\u05df\u05e0\5\u03d8\u01ed\2\u05e0e\3\2\2\2\u05e1\u05e2\5\u03d8\u01ed"+
		"\2\u05e2g\3\2\2\2\u05e3\u05e5\7\t\2\2\u05e4\u05e3\3\2\2\2\u05e4\u05e5"+
		"\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e7\5j\66\2\u05e7i\3\2\2\2\u05e8"+
		"\u05ec\5\u03da\u01ee\2\u05e9\u05ec\7\3\2\2\u05ea\u05ec\5\36\20\2\u05eb"+
		"\u05e8\3\2\2\2\u05eb\u05e9\3\2\2\2\u05eb\u05ea\3\2\2\2\u05eck\3\2\2\2"+
		"\u05ed\u05ee\5\u03da\u01ee\2\u05eem\3\2\2\2\u05ef\u05f0\7\u0191\2\2\u05f0"+
		"\u05f7\5\u0398\u01cd\2\u05f1\u05f8\7\u0134\2\2\u05f2\u05f8\7\u0135\2\2"+
		"\u05f3\u05f5\7\t\2\2\u05f4\u05f6\7\u0135\2\2\u05f5\u05f4\3\2\2\2\u05f5"+
		"\u05f6\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f1\3\2\2\2\u05f7\u05f2\3\2"+
		"\2\2\u05f7\u05f3\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8o\3\2\2\2\u05f9\u05fb"+
		"\7\u0181\2\2\u05fa\u05fc\5\u029a\u014e\2\u05fb\u05fa\3\2\2\2\u05fc\u05fd"+
		"\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fd\u05fe\3\2\2\2\u05feq\3\2\2\2\u05ff"+
		"\u0601\7\u0175\2\2\u0600\u0602\7\u0126\2\2\u0601\u0600\3\2\2\2\u0601\u0602"+
		"\3\2\2\2\u0602s\3\2\2\2\u0603\u061e\7\u0172\2\2\u0604\u0606\5x=\2\u0605"+
		"\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0605\3\2\2\2\u0607\u0608\3\2"+
		"\2\2\u0608\u0609\3\2\2\2\u0609\u060d\7\u00bf\2\2\u060a\u060b\5x=\2\u060b"+
		"\u060c\7\u00c3\2\2\u060c\u060e\3\2\2\2\u060d\u060a\3\2\2\2\u060d\u060e"+
		"\3\2\2\2\u060e\u0613\3\2\2\2\u060f\u0611\5\u03d8\u01ed\2\u0610\u0612\7"+
		"\u0151\2\2\u0611\u0610\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0614\3\2\2\2"+
		"\u0613\u060f\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0613\3\2\2\2\u0615\u0616"+
		"\3\2\2\2\u0616\u061f\3\2\2\2\u0617\u0618\t\13\2\2\u0618\u0619\5v<\2\u0619"+
		"\u061a\7\u00bf\2\2\u061a\u061c\5v<\2\u061b\u061d\7\u0151\2\2\u061c\u061b"+
		"\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061f\3\2\2\2\u061e\u0605\3\2\2\2\u061e"+
		"\u0617\3\2\2\2\u061f\u0621\3\2\2\2\u0620\u0622\5\u01a0\u00d1\2\u0621\u0620"+
		"\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623\u0625\7\u009b\2"+
		"\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625u\3\2\2\2\u0626\u0627"+
		"\5\u03d8\u01ed\2\u0627w\3\2\2\2\u0628\u062b\t\f\2\2\u0629\u062b\5\u03da"+
		"\u01ee\2\u062a\u0628\3\2\2\2\u062a\u0629\3\2\2\2\u062by\3\2\2\2\u062c"+
		"\u063a\7\u0171\2\2\u062d\u062f\5\u0082B\2\u062e\u062d\3\2\2\2\u062f\u0630"+
		"\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2\2\u0632"+
		"\u0634\7u\2\2\u0633\u0635\7\64\2\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2"+
		"\2\2\u0635\u0638\3\2\2\2\u0636\u0639\7\u0163\2\2\u0637\u0639\5\u0080A"+
		"\2\u0638\u0636\3\2\2\2\u0638\u0637\3\2\2\2\u0639\u063b\3\2\2\2\u063a\u062e"+
		"\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d"+
		"\u063e\3\2\2\2\u063e\u063f\7\u00dc\2\2\u063f\u0645\5~@\2\u0640\u0642\7"+
		"\u01a1\2\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\3\2\2\2"+
		"\u0643\u0644\7\u011f\2\2\u0644\u0646\5|?\2\u0645\u0641\3\2\2\2\u0645\u0646"+
		"\3\2\2\2\u0646\u0648\3\2\2\2\u0647\u0649\5\u01a2\u00d2\2\u0648\u0647\3"+
		"\2\2\2\u0648\u0649\3\2\2\2\u0649\u064b\3\2\2\2\u064a\u064c\7\u009a\2\2"+
		"\u064b\u064a\3\2\2\2\u064b\u064c\3\2\2\2\u064c{\3\2\2\2\u064d\u064e\5"+
		"\u03d8\u01ed\2\u064e}\3\2\2\2\u064f\u0650\5\u03d8\u01ed\2\u0650\177\3"+
		"\2\2\2\u0651\u0652\5\u0082B\2\u0652\u0081\3\2\2\2\u0653\u0657\5\u03d8"+
		"\u01ed\2\u0654\u0657\7\3\2\2\u0655\u0657\5\"\22\2\u0656\u0653\3\2\2\2"+
		"\u0656\u0654\3\2\2\2\u0656\u0655\3\2\2\2\u0657\u0083\3\2\2\2\u0658\u065b"+
		"\7\u0170\2\2\u0659\u065c\7\u0152\2\2\u065a\u065c\5\u0086D\2\u065b\u0659"+
		"\3\2\2\2\u065b\u065a\3\2\2\2\u065c\u0085\3\2\2\2\u065d\u0661\7\3\2\2\u065e"+
		"\u0661\t\f\2\2\u065f\u0661\5\36\20\2\u0660\u065d\3\2\2\2\u0660\u065e\3"+
		"\2\2\2\u0660\u065f\3\2\2\2\u0661\u0087\3\2\2\2\u0662\u0663\7\u016e\2\2"+
		"\u0663\u0668\5\u0398\u01cd\2\u0664\u0665\7\u00e3\2\2\u0665\u0666\5\u03d6"+
		"\u01ec\2\u0666\u0667\5\u008aF\2\u0667\u0669\3\2\2\2\u0668\u0664\3\2\2"+
		"\2\u0668\u0669\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u066c\5\u00caf\2\u066b"+
		"\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066e\3\2\2\2\u066d\u066f\5\u01a6"+
		"\u00d4\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671\3\2\2\2\u0670"+
		"\u0672\7\u0099\2\2\u0671\u0670\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0089"+
		"\3\2\2\2\u0673\u0674\5\u0338\u019d\2\u0674\u008b\3\2\2\2\u0675\u0676\7"+
		"\u0164\2\2\u0676\u067a\5\u008eH\2\u0677\u0679\5\u0092J\2\u0678\u0677\3"+
		"\2\2\2\u0679\u067c\3\2\2\2\u067a\u0678\3\2\2\2\u067a\u067b\3\2\2\2\u067b"+
		"\u0687\3\2\2\2\u067c\u067a\3\2\2\2\u067d\u067f\7\u01a1\2\2\u067e\u067d"+
		"\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0682\7\u0082\2"+
		"\2\u0681\u0683\7\u00d1\2\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683"+
		"\u0685\3\2\2\2\u0684\u0686\7\u0110\2\2\u0685\u0684\3\2\2\2\u0685\u0686"+
		"\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u067e\3\2\2\2\u0687\u0688\3\2\2\2\u0688"+
		"\u0691\3\2\2\2\u0689\u068b\7B\2\2\u068a\u0689\3\2\2\2\u068a\u068b\3\2"+
		"\2\2\u068b\u068c\3\2\2\2\u068c\u068e\7\u015e\2\2\u068d\u068f\7\u00de\2"+
		"\2\u068e\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0692"+
		"\5\u031a\u018e\2\u0691\u068a\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u069b\3"+
		"\2\2\2\u0693\u0694\7\u00d8\2\2\u0694\u069c\5\u0090I\2\u0695\u0697\7\u019a"+
		"\2\2\u0696\u0698\5\u0398\u01cd\2\u0697\u0696\3\2\2\2\u0698\u0699\3\2\2"+
		"\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069c\3\2\2\2\u069b\u0693"+
		"\3\2\2\2\u069b\u0695\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u06a5\3\2\2\2\u069d"+
		"\u069e\7\u0114\2\2\u069e\u06a6\5\u0090I\2\u069f\u06a1\7\u00c3\2\2\u06a0"+
		"\u06a2\5\u0398\u01cd\2\u06a1\u06a0\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a1"+
		"\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a6\3\2\2\2\u06a5\u069d\3\2\2\2\u06a5"+
		"\u069f\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u008d\3\2\2\2\u06a7\u06a8\5\u0338"+
		"\u019d\2\u06a8\u008f\3\2\2\2\u06a9\u06ab\7\u0129\2\2\u06aa\u06ac\7\u00de"+
		"\2\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad"+
		"\u06ae\5\u00d0i\2\u06ae\u0091\3\2\2\2\u06af\u06b1\7\u010b\2\2\u06b0\u06af"+
		"\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b4\t\r\2\2\u06b3"+
		"\u06b5\7\u00e3\2\2\u06b4\u06b3\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b6"+
		"\3\2\2\2\u06b6\u06ba\5\u0094K\2\u06b7\u06b9\5\u0094K\2\u06b8\u06b7\3\2"+
		"\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb"+
		"\u0093\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bd\u06be\5\u0338\u019d\2\u06be\u0095"+
		"\3\2\2\2\u06bf\u06c6\5\u0098M\2\u06c0\u06c6\5\u009aN\2\u06c1\u06c6\5\u009c"+
		"O\2\u06c2\u06c6\5\u009eP\2\u06c3\u06c6\5\u00a0Q\2\u06c4\u06c6\5\u00a2"+
		"R\2\u06c5\u06bf\3\2\2\2\u06c5\u06c0\3\2\2\2\u06c5\u06c1\3\2\2\2\u06c5"+
		"\u06c2\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c4\3\2\2\2\u06c6\u0097\3\2"+
		"\2\2\u06c7\u06c9\7\u0160\2\2\u06c8\u06ca\5\u03d8\u01ed\2\u06c9\u06c8\3"+
		"\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc"+
		"\u06cd\3\2\2\2\u06cd\u06ce\7\u0189\2\2\u06ce\u06cf\5\u00a6T\2\u06cf\u0099"+
		"\3\2\2\2\u06d0\u06d2\7\u0160\2\2\u06d1\u06d3\5\u03d8\u01ed\2\u06d2\u06d1"+
		"\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5"+
		"\u06d6\3\2\2\2\u06d6\u06d7\t\16\2\2\u06d7\u06d8\7\64\2\2\u06d8\u06d9\5"+
		"\u00a4S\2\u06d9\u009b\3\2\2\2\u06da\u06dc\7\u0160\2\2\u06db\u06dd\5\u03d8"+
		"\u01ed\2\u06dc\u06db\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06dc\3\2\2\2\u06de"+
		"\u06df\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\7\u0189\2\2\u06e1\u06e2"+
		"\7\u018c\2\2\u06e2\u009d\3\2\2\2\u06e3\u06e8\7\u0160\2\2\u06e4\u06e5\5"+
		"\u03d8\u01ed\2\u06e5\u06e6\7\u0189\2\2\u06e6\u06e7\t\17\2\2\u06e7\u06e9"+
		"\3\2\2\2\u06e8\u06e4\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06e8\3\2\2\2\u06ea"+
		"\u06eb\3\2\2\2\u06eb\u009f\3\2\2\2\u06ec\u06ee\7\u0160\2\2\u06ed\u06ef"+
		"\5\u03d8\u01ed\2\u06ee\u06ed\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06ee\3"+
		"\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\7\u0189\2\2"+
		"\u06f3\u06f5\7\u0138\2\2\u06f4\u06f6\7\u0108\2\2\u06f5\u06f4\3\2\2\2\u06f5"+
		"\u06f6\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8\5\u03d8\u01ed\2\u06f8\u00a1"+
		"\3\2\2\2\u06f9\u06fa\7\u0160\2\2\u06fa\u06fb\5\u03d8\u01ed\2\u06fb\u06fc"+
		"\7\u0189\2\2\u06fc\u06fd\t\20\2\2\u06fd\u00a3\3\2\2\2\u06fe\u0701\5\u03da"+
		"\u01ee\2\u06ff\u0701\t\f\2\2\u0700\u06fe\3\2\2\2\u0700\u06ff\3\2\2\2\u0701"+
		"\u00a5\3\2\2\2\u0702\u0705\5\u03da\u01ee\2\u0703\u0705\t\f\2\2\u0704\u0702"+
		"\3\2\2\2\u0704\u0703\3\2\2\2\u0705\u00a7\3\2\2\2\u0706\u0707\7\u0156\2"+
		"\2\u0707\u070a\5\u00b2Z\2\u0708\u0709";
	private static final String _serializedATNSegment1 =
		"\7\u019d\2\2\u0709\u070b\5\u00b0Y\2\u070a\u0708\3\2\2\2\u070a\u070b\3"+
		"\2\2\2\u070b\u070d\3\2\2\2\u070c\u070e\5\u01de\u00f0\2\u070d\u070c\3\2"+
		"\2\2\u070d\u070e\3\2\2\2\u070e\u0730\3\2\2\2\u070f\u0710\7\u019f\2\2\u0710"+
		"\u0713\5\u03c8\u01e5\2\u0711\u0714\5J&\2\u0712\u0714\5L\'\2\u0713\u0711"+
		"\3\2\2\2\u0713\u0712\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0713\3\2\2\2\u0715"+
		"\u0716\3\2\2\2\u0716\u0718\3\2\2\2\u0717\u070f\3\2\2\2\u0718\u0719\3\2"+
		"\2\2\u0719\u0717\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071b\3\2\2\2\u071b"+
		"\u071c\7\u0098\2\2\u071c\u0731\3\2\2\2\u071d\u071e\7\u019f\2\2\u071e\u072a"+
		"\5\u03c8\u01e5\2\u071f\u0722\5J&\2\u0720\u0722\5L\'\2\u0721\u071f\3\2"+
		"\2\2\u0721\u0720\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0721\3\2\2\2\u0723"+
		"\u0724\3\2\2\2\u0724\u0726\3\2\2\2\u0725\u0727\7\u0098\2\2\u0726\u0725"+
		"\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u072b\3\2\2\2\u0728\u0729\7\u0100\2"+
		"\2\u0729\u072b\7\u015c\2\2\u072a\u0721\3\2\2\2\u072a\u0728\3\2\2\2\u072b"+
		"\u072d\3\2\2\2\u072c\u071d\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u072c\3\2"+
		"\2\2\u072e\u072f\3\2\2\2\u072f\u0731\3\2\2\2\u0730\u0717\3\2\2\2\u0730"+
		"\u072c\3\2\2\2\u0731\u074f\3\2\2\2\u0732\u0733\7\u0156\2\2\u0733\u0734"+
		"\7\t\2\2\u0734\u0736\5\u00b2Z\2\u0735\u0737\5\u01de\u00f0\2\u0736\u0735"+
		"\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0739\7\u019f\2"+
		"\2\u0739\u073e\5\u00aaV\2\u073a\u073b\7\25\2\2\u073b\u073d\5\u00aaV\2"+
		"\u073c\u073a\3\2\2\2\u073d\u0740\3\2\2\2\u073e\u073c\3\2\2\2\u073e\u073f"+
		"\3\2\2\2\u073f\u074c\3\2\2\2\u0740\u073e\3\2\2\2\u0741\u0744\5J&\2\u0742"+
		"\u0744\5L\'\2\u0743\u0741\3\2\2\2\u0743\u0742\3\2\2\2\u0744\u0745\3\2"+
		"\2\2\u0745\u0743\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0748\3\2\2\2\u0747"+
		"\u0749\7\u0098\2\2\u0748\u0747\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074d"+
		"\3\2\2\2\u074a\u074b\7\u0100\2\2\u074b\u074d\7\u015c\2\2\u074c\u0743\3"+
		"\2\2\2\u074c\u074a\3\2\2\2\u074d\u074f\3\2\2\2\u074e\u0706\3\2\2\2\u074e"+
		"\u0732\3\2\2\2\u074f\u00a9\3\2\2\2\u0750\u075c\5\u00aeX\2\u0751\u0753"+
		"\7\u00de\2\2\u0752\u0751\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0754\3\2\2"+
		"\2\u0754\u0756\7\u00a4\2\2\u0755\u0757\7\u0189\2\2\u0756\u0755\3\2\2\2"+
		"\u0756\u0757\3\2\2\2\u0757\u075d\3\2\2\2\u0758\u075a\7\u00de\2\2\u0759"+
		"\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075d\7\u01b8"+
		"\2\2\u075c\u0752\3\2\2\2\u075c\u0759\3\2\2\2\u075d\u075e\3\2\2\2\u075e"+
		"\u075f\5\u00acW\2\u075f\u0762\3\2\2\2\u0760\u0762\5\u03ac\u01d7\2\u0761"+
		"\u0750\3\2\2\2\u0761\u0760\3\2\2\2\u0762\u00ab\3\2\2\2\u0763\u0764\5\u03c0"+
		"\u01e1\2\u0764\u00ad\3\2\2\2\u0765\u0766\5\u03d8\u01ed\2\u0766\u00af\3"+
		"\2\2\2\u0767\u0768\5\u03da\u01ee\2\u0768\u00b1\3\2\2\2\u0769\u076a\5\u0338"+
		"\u019d\2\u076a\u00b3\3\2\2\2\u076b\u076c\7\u014c\2\2\u076c\u076f\5\u00b6"+
		"\\\2\u076d\u076e\7\u00bf\2\2\u076e\u0770\5\u0156\u00ac\2\u076f\u076d\3"+
		"\2\2\2\u076f\u0770\3\2\2\2\u0770\u0776\3\2\2\2\u0771\u0772\7\n\2\2\u0772"+
		"\u0774\7\u0101\2\2\u0773\u0775\7\u0113\2\2\u0774\u0773\3\2\2\2\u0774\u0775"+
		"\3\2\2\2\u0775\u0777\3\2\2\2\u0776\u0771\3\2\2\2\u0776\u0777\3\2\2\2\u0777"+
		"\u0779\3\2\2\2\u0778\u077a\5\u01a6\u00d4\2\u0779\u0778\3\2\2\2\u0779\u077a"+
		"\3\2\2\2\u077a\u077c\3\2\2\2\u077b\u077d\7\u0097\2\2\u077c\u077b\3\2\2"+
		"\2\u077c\u077d\3\2\2\2\u077d\u00b5\3\2\2\2\u077e\u077f\5\u0338\u019d\2"+
		"\u077f\u00b7\3\2\2\2\u0780\u0781\7\u0148\2\2\u0781\u0783\5\u00ba^\2\u0782"+
		"\u0784\7\u0134\2\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0787"+
		"\3\2\2\2\u0785\u0786\7\u00dc\2\2\u0786\u0788\5\u01da\u00ee\2\u0787\u0785"+
		"\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078c\5\u01de\u00f0"+
		"\2\u078a\u078b\7\u0102\2\2\u078b\u078d\5\u01de\u00f0\2\u078c\u078a\3\2"+
		"\2\2\u078c\u078d\3\2\2\2\u078d\u078f\3\2\2\2\u078e\u0790\7\u0096\2\2\u078f"+
		"\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u00b9\3\2\2\2\u0791\u0792\7\u01c9"+
		"\2\2\u0792\u00bb\3\2\2\2\u0793\u0794\7\u013b\2\2\u0794\u0797\5\u00c0a"+
		"\2\u0795\u0796\7\u00bf\2\2\u0796\u0798\5\u00be`\2\u0797\u0795\3\2\2\2"+
		"\u0797\u0798\3\2\2\2\u0798\u00bd\3\2\2\2\u0799\u079a\5\u03da\u01ee\2\u079a"+
		"\u00bf\3\2\2\2\u079b\u079c\5\u0338\u019d\2\u079c\u00c1\3\2\2\2\u079d\u079e"+
		"\7\u0134\2\2\u079e\u079f\7w\2\2\u079f\u07a5\5\u00c6d\2\u07a0\u07a2\7\u018d"+
		"\2\2\u07a1\u07a3\7\u00de\2\2\u07a2\u07a1\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3"+
		"\u07a4\3\2\2\2\u07a4\u07a6\5\u00c4c\2\u07a5\u07a0\3\2\2\2\u07a5\u07a6"+
		"\3\2\2\2\u07a6\u07ab\3\2\2\2\u07a7\u07a9\7\u00d1\2\2\u07a8\u07a7\3\2\2"+
		"\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ac\7|\2\2\u07ab\u07a8"+
		"\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u00c3\3\2\2\2\u07ad\u07ae\t\7\2\2\u07ae"+
		"\u00c5\3\2\2\2\u07af\u07b0\t\7\2\2\u07b0\u00c7\3\2\2\2\u07b1\u07b2\7\u0132"+
		"\2\2\u07b2\u07b4\5\u0398\u01cd\2\u07b3\u07b5\t\21\2\2\u07b4\u07b3\3\2"+
		"\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\3\2\2\2\u07b6\u07b8\7\u0134\2\2\u07b7"+
		"\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07bb\3\2\2\2\u07b9\u07ba\7\u00dc"+
		"\2\2\u07ba\u07bc\5\u01da\u00ee\2\u07bb\u07b9\3\2\2\2\u07bb\u07bc\3\2\2"+
		"\2\u07bc\u07cd\3\2\2\2\u07bd\u07c3\5\u00ccg\2\u07be\u07c0\7\u00e3\2\2"+
		"\u07bf\u07c1\7\u00de\2\2\u07c0\u07bf\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1"+
		"\u07c2\3\2\2\2\u07c2\u07c4\5\u0230\u0119\2\u07c3\u07be\3\2\2\2\u07c3\u07c4"+
		"\3\2\2\2\u07c4\u07ce\3\2\2\2\u07c5\u07c7\7\u00e3\2\2\u07c6\u07c8\7\u00de"+
		"\2\2\u07c7\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9"+
		"\u07cb\5\u0230\u0119\2\u07ca\u07cc\5\u00ccg\2\u07cb\u07ca\3\2\2\2\u07cb"+
		"\u07cc\3\2\2\2\u07cc\u07ce\3\2\2\2\u07cd\u07bd\3\2\2\2\u07cd\u07c5\3\2"+
		"\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d1\3\2\2\2\u07cf\u07d2\5\u019e\u00d0"+
		"\2\u07d0\u07d2\5\u01a6\u00d4\2\u07d1\u07cf\3\2\2\2\u07d1\u07d0\3\2\2\2"+
		"\u07d1\u07d2\3\2\2\2\u07d2\u07d4\3\2\2\2\u07d3\u07d5\7\u0095\2\2\u07d4"+
		"\u07d3\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u00c9\3\2\2\2\u07d6\u07d8\7\u0139"+
		"\2\2\u07d7\u07d9\7\u0108\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9"+
		"\u07db\3\2\2\2\u07da\u07dc\7\u00f0\2\2\u07db\u07da\3\2\2\2\u07db\u07dc"+
		"\3\2\2\2\u07dc\u07e7\3\2\2\2\u07dd\u07e4\7\n\2\2\u07de\u07e5\7\u0196\2"+
		"\2\u07df\u07e5\7\u0133\2\2\u07e0\u07e2\7\u0101\2\2\u07e1\u07e3\7\u0113"+
		"\2\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5\3\2\2\2\u07e4"+
		"\u07de\3\2\2\2\u07e4\u07df\3\2\2\2\u07e4\u07e0\3\2\2\2\u07e5\u07e7\3\2"+
		"\2\2\u07e6\u07d6\3\2\2\2\u07e6\u07dd\3\2\2\2\u07e7\u00cb\3\2\2\2\u07e8"+
		"\u07ea\7\u01a1\2\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec"+
		"\3\2\2\2\u07eb\u07ed\7\u0101\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2"+
		"\2\u07ed\u07ee\3\2\2\2\u07ee\u07f1\7\u00f0\2\2\u07ef\u07f1\5\u00caf\2"+
		"\u07f0\u07e9\3\2\2\2\u07f0\u07ef\3\2\2\2\u07f1\u00cd\3\2\2\2\u07f2\u07f4"+
		"\7\u011b\2\2\u07f3\u07f5\5\u00d0i\2\u07f4\u07f3\3\2\2\2\u07f4\u07f5\3"+
		"\2\2\2\u07f5\u07fb\3\2\2\2\u07f6\u07fa\5\u00d2j\2\u07f7\u07fa\5\u00d6"+
		"l\2\u07f8\u07fa\5\u00d8m\2\u07f9\u07f6\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9"+
		"\u07f8\3\2\2\2\u07fa\u07fc\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc\3\2"+
		"\2\2\u07fc\u0804\3\2\2\2\u07fd\u07ff\5J&\2\u07fe\u07fd\3\2\2\2\u07ff\u0800"+
		"\3\2\2\2\u0800\u07fe\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802"+
		"\u0803\7\u0094\2\2\u0803\u0805\3\2\2\2\u0804\u07fe\3\2\2\2\u0804\u0805"+
		"\3\2\2\2\u0805\u00cf\3\2\2\2\u0806\u0809\5\u013a\u009e\2\u0807\u0808\t"+
		"\22\2\2\u0808\u080a\5\u013a\u009e\2\u0809\u0807\3\2\2\2\u0809\u080a\3"+
		"\2\2\2\u080a\u00d1\3\2\2\2\u080b\u080e\5\u03da\u01ee\2\u080c\u080e\t\n"+
		"\2\2\u080d\u080b\3\2\2\2\u080d\u080c\3\2\2\2\u080e\u080f\3\2\2\2\u080f"+
		"\u0810\7\u0188\2\2\u0810\u00d3\3\2\2\2\u0811\u0813\7\u01a1\2\2\u0812\u0811"+
		"\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0815\7\u0182\2"+
		"\2\u0815\u0816\t\b\2\2\u0816\u00d5\3\2\2\2\u0817\u0819\5\u00d4k\2\u0818"+
		"\u0817\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b\7\u0194"+
		"\2\2\u081b\u081c\5\u03c8\u01e5\2\u081c\u00d7\3\2\2\2\u081d\u081f\5\u00d4"+
		"k\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0820\3\2\2\2\u0820"+
		"\u0821\7\u019d\2\2\u0821\u0822\5\u00dan\2\u0822\u0823\7\u0194\2\2\u0823"+
		"\u082b\5\u03c8\u01e5\2\u0824\u0825\7\b\2\2\u0825\u0826\5\u00dan\2\u0826"+
		"\u0827\7\u0194\2\2\u0827\u0828\5\u03c8\u01e5\2\u0828\u082a\3\2\2\2\u0829"+
		"\u0824\3\2\2\2\u082a\u082d\3\2\2\2\u082b\u0829\3\2\2\2\u082b\u082c\3\2"+
		"\2\2\u082c\u00d9\3\2\2\2\u082d\u082b\3\2\2\2\u082e\u082f\5\u00e0q\2\u082f"+
		"\u0830\7\u00bf\2\2\u0830\u0831\5\u00dep\2\u0831\u0832\7\64\2\2\u0832\u0833"+
		"\5\u00dco\2\u0833\u00db\3\2\2\2\u0834\u0837\5\u03da\u01ee\2\u0835\u0837"+
		"\t\f\2\2\u0836\u0834\3\2\2\2\u0836\u0835\3\2\2\2\u0837\u00dd\3\2\2\2\u0838"+
		"\u083b\5\u03da\u01ee\2\u0839\u083b\t\f\2\2\u083a\u0838\3\2\2\2\u083a\u0839"+
		"\3\2\2\2\u083b\u00df\3\2\2\2\u083c\u083d\5\u03d8\u01ed\2\u083d\u00e1\3"+
		"\2\2\2\u083e\u0840\7\u010c\2\2\u083f\u0841\5\u00e4s\2\u0840\u083f\3\2"+
		"\2\2\u0841\u0842\3\2\2\2\u0842\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843"+
		"\u0857\3\2\2\2\u0844\u0852\7\u010c\2\2\u0845\u084e\t\23\2\2\u0846\u084c"+
		"\5\u0398\u01cd\2\u0847\u0849\7\u01a1\2\2\u0848\u0847\3\2\2\2\u0848\u0849"+
		"\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084b\7\u0101\2\2\u084b\u084d\7\u014b"+
		"\2\2\u084c\u0848\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084f\3\2\2\2\u084e"+
		"\u0846\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u084e\3\2\2\2\u0850\u0851\3\2"+
		"\2\2\u0851\u0853\3\2\2\2\u0852\u0845\3\2\2\2\u0853\u0854\3\2\2\2\u0854"+
		"\u0852\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0857\3\2\2\2\u0856\u083e\3\2"+
		"\2\2\u0856\u0844\3\2\2\2\u0857\u00e3\3\2\2\2\u0858\u0864\t\24\2\2\u0859"+
		"\u085f\5\u0398\u01cd\2\u085a\u085c\7\u01a1\2\2\u085b\u085a\3\2\2\2\u085b"+
		"\u085c\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\7\u0101\2\2\u085e\u0860"+
		"\7\u014b\2\2\u085f\u085b\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2"+
		"\2\u0861\u0863\5\u00e6t\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863"+
		"\u0865\3\2\2\2\u0864\u0859\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0864\3\2"+
		"\2\2\u0866\u0867\3\2\2\2\u0867\u00e5\3\2\2\2\u0868\u086a\7\u01a1\2\2\u0869"+
		"\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u0895\7\u00f0"+
		"\2\2\u086c\u0892\7\n\2\2\u086d\u086f\7\u0101\2\2\u086e\u0870\7\u0113\2"+
		"\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0893\3\2\2\2\u0871\u0893"+
		"\7\t\2\2\u0872\u0874\7\u0133\2\2\u0873\u0875\7\u01a5\2\2\u0874\u0873\3"+
		"\2\2\2\u0874\u0875\3\2\2\2\u0875\u0877\3\2\2\2\u0876\u0878\7\u0196\2\2"+
		"\u0877\u0876\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u0891\3\2\2\2\u0879\u087a"+
		"\7\u0133\2\2\u087a\u087b\7\u0196\2\2\u087b\u0891\7\u01a5\2\2\u087c\u087e"+
		"\7\u01a5\2\2\u087d\u087f\7\u0133\2\2\u087e\u087d\3\2\2\2\u087e\u087f\3"+
		"\2\2\2\u087f\u0881\3\2\2\2\u0880\u0882\7\u0196\2\2\u0881\u0880\3\2\2\2"+
		"\u0881\u0882\3\2\2\2\u0882\u0891\3\2\2\2\u0883\u0884\7\u01a5\2\2\u0884"+
		"\u0885\7\u0196\2\2\u0885\u0891\7\u0133\2\2\u0886\u0888\7\u0196\2\2\u0887"+
		"\u0889\7\u0133\2\2\u0888\u0887\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u088b"+
		"\3\2\2\2\u088a\u088c\7\u01a5\2\2\u088b\u088a\3\2\2\2\u088b\u088c\3\2\2"+
		"\2\u088c\u0891\3\2\2\2\u088d\u088e\7\u0196\2\2\u088e\u088f\7\u01a5\2\2"+
		"\u088f\u0891\7\u0133\2\2\u0890\u0872\3\2\2\2\u0890\u0879\3\2\2\2\u0890"+
		"\u087c\3\2\2\2\u0890\u0883\3\2\2\2\u0890\u0886\3\2\2\2\u0890\u088d\3\2"+
		"\2\2\u0891\u0893\3\2\2\2\u0892\u086d\3\2\2\2\u0892\u0871\3\2\2\2\u0892"+
		"\u0890\3\2\2\2\u0893\u0895\3\2\2\2\u0894\u0869\3\2\2\2\u0894\u086c\3\2"+
		"\2\2\u0895\u00e7\3\2\2\2\u0896\u0897\7\u00fd\2\2\u0897\u0898\5\u00eav"+
		"\2\u0898\u089c\7\64\2\2\u0899\u089a\5\u00eav\2\u089a\u089b\7\u00c3\2\2"+
		"\u089b\u089d\3\2\2\2\u089c\u0899\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u08a2"+
		"\3\2\2\2\u089e\u08a0\5\u03d8\u01ed\2\u089f\u08a1\7\u0151\2\2\u08a0\u089f"+
		"\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a3\3\2\2\2\u08a2\u089e\3\2\2\2\u08a3"+
		"\u08a4\3\2\2\2\u08a4\u08a2\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\3\2"+
		"\2\2\u08a6\u08a8\5\u01a0\u00d1\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2\2"+
		"\2\u08a8\u08aa\3\2\2\2\u08a9\u08ab\7\u0092\2\2\u08aa\u08a9\3\2\2\2\u08aa"+
		"\u08ab\3\2\2\2\u08ab\u00e9\3\2\2\2\u08ac\u08af\5\u03da\u01ee\2\u08ad\u08af"+
		"\t\f\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08ad\3\2\2\2\u08af\u00eb\3\2\2\2\u08b0"+
		"\u08b1\7\u00f8\2\2\u08b1\u08b3\5\u00fa~\2\u08b2\u08b4\5\u00f8}\2\u08b3"+
		"\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b3\3\2\2\2\u08b5\u08b6\3\2"+
		"\2\2\u08b6\u08bf\3\2\2\2\u08b7\u08b9\7B\2\2\u08b8\u08b7\3\2\2\2\u08b8"+
		"\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc\7\u015e\2\2\u08bb\u08bd"+
		"\7\u00de\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08be\3\2\2"+
		"\2\u08be\u08c0\5\u031a\u018e\2\u08bf\u08b8\3\2\2\2\u08bf\u08c0\3\2\2\2"+
		"\u08c0\u08c1\3\2\2\2\u08c1\u08c3\7\u019a\2\2\u08c2\u08c4\5\u00f6|\2\u08c3"+
		"\u08c2\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c5\u08c6\3\2"+
		"\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08ca\5\u00eex\2\u08c8\u08ca\5\u00f4{\2"+
		"\u08c9\u08c7\3\2\2\2\u08c9\u08c8\3\2\2\2\u08ca\u00ed\3\2\2\2\u08cb\u08cc"+
		"\7\u0114\2\2\u08cc\u08ce\7\u0129\2\2\u08cd\u08cf\7\u00de\2\2\u08ce\u08cd"+
		"\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\5\u00d0i"+
		"\2\u08d1\u00ef\3\2\2\2\u08d2\u08d3\5\u0338\u019d\2\u08d3\u00f1\3\2\2\2"+
		"\u08d4\u08d5\5\u0338\u019d\2\u08d5\u00f3\3\2\2\2\u08d6\u08d7\7\u00c3\2"+
		"\2\u08d7\u08d8\5\u0398\u01cd\2\u08d8\u00f5\3\2\2\2\u08d9\u08da\7\u01c9"+
		"\2\2\u08da\u00f7\3\2\2\2\u08db\u08dd\7\u010b\2\2\u08dc\u08db\3\2\2\2\u08dc"+
		"\u08dd\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e0\t\r\2\2\u08df\u08e1\7\u00e3"+
		"\2\2\u08e0\u08df\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e3\3\2\2\2\u08e2"+
		"\u08e4\5\u00fc\177\2\u08e3\u08e2\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e3"+
		"\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u00f9\3\2\2\2\u08e7\u08e8\7\u01c9\2"+
		"\2\u08e8\u00fb\3\2\2\2\u08e9\u08ea\5\u0338\u019d\2\u08ea\u00fd\3\2\2\2"+
		"\u08eb\u08ec\7\u00da\2\2\u08ec\u08f3\5\u0120\u0091\2\u08ed\u08ef\5\u0110"+
		"\u0089\2\u08ee\u08f0\5\u0106\u0084\2\u08ef\u08ee\3\2\2\2\u08ef\u08f0\3"+
		"\2\2\2\u08f0\u08f4\3\2\2\2\u08f1\u08f4\5\u0106\u0084\2\u08f2\u08f4\5\u0100"+
		"\u0081\2\u08f3\u08ed\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f3\u08f2\3\2\2\2\u08f4"+
		"\u00ff\3\2\2\2\u08f5\u08f6\7_\2\2\u08f6\u08f7\5\u0104\u0083\2\u08f7\u08f8"+
		"\7\u0189\2\2\u08f8\u08fc\5\u0102\u0082\2\u08f9\u08fb\5\u0116\u008c\2\u08fa"+
		"\u08f9\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc\u08fa\3\2\2\2\u08fc\u08fd\3\2"+
		"\2\2\u08fd\u0101\3\2\2\2\u08fe\u08fc\3\2\2\2\u08ff\u0900\5\u011a\u008e"+
		"\2\u0900\u0103\3\2\2\2\u0901\u0902\5\u011a\u008e\2\u0902\u0105\3\2\2\2"+
		"\u0903\u0906\7\u0140\2\2\u0904\u0907\5\u010c\u0087\2\u0905\u0907\5\u0108"+
		"\u0085\2\u0906\u0904\3\2\2\2\u0906\u0905\3\2\2\2\u0907\u0908\3\2\2\2\u0908"+
		"\u0906\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u0107\3\2\2\2\u090a\u0914\t\25"+
		"\2\2\u090b\u090c\5\u011a\u008e\2\u090c\u090d\7\64\2\2\u090d\u0911\5\u010a"+
		"\u0086\2\u090e\u0910\5\u0116\u008c\2\u090f\u090e\3\2\2\2\u0910\u0913\3"+
		"\2\2\2\u0911\u090f\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0915\3\2\2\2\u0913"+
		"\u0911\3\2\2\2\u0914\u090b\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0914\3\2"+
		"\2\2\u0916\u0917\3\2\2\2\u0917\u0109\3\2\2\2\u0918\u0919\5\u011a\u008e"+
		"\2\u0919\u010b\3\2\2\2\u091a\u091b\7<\2\2\u091b\u091c\7\64\2\2\u091c\u0920"+
		"\5\u010e\u0088\2\u091d\u091f\5\u0116\u008c\2\u091e\u091d\3\2\2\2\u091f"+
		"\u0922\3\2\2\2\u0920\u091e\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u010d\3\2"+
		"\2\2\u0922\u0920\3\2\2\2\u0923\u0924\5\u011a\u008e\2\u0924\u010f\3\2\2"+
		"\2\u0925\u0927\7\u017f\2\2\u0926\u0928\5\u0112\u008a\2\u0927\u0926\3\2"+
		"\2\2\u0928\u0929\3\2\2\2\u0929\u0927\3\2\2\2\u0929\u092a\3\2\2\2\u092a"+
		"\u0111\3\2\2\2\u092b\u092c\5\u011e\u0090\2\u092c\u092f\7\u00bd\2\2\u092d"+
		"\u0930\5\u0114\u008b\2\u092e\u0930\5\u0118\u008d\2\u092f\u092d\3\2\2\2"+
		"\u092f\u092e\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u092f\3\2\2\2\u0931\u0932"+
		"\3\2\2\2\u0932\u0113\3\2\2\2\u0933\u0937\7<\2\2\u0934\u0936\5\u0116\u008c"+
		"\2\u0935\u0934\3\2\2\2\u0936\u0939\3\2\2\2\u0937\u0935\3\2\2\2\u0937\u0938"+
		"\3\2\2\2\u0938\u0115\3\2\2\2\u0939\u0937\3\2\2\2\u093a\u093c\t\b\2\2\u093b"+
		"\u093d\7\u00d5\2\2\u093c\u093b\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e"+
		"\3\2\2\2\u093e\u093f\5\u011c\u008f\2\u093f\u0117\3\2\2\2\u0940\u0948\t"+
		"\26\2\2\u0941\u0945\5\u011a\u008e\2\u0942\u0944\5\u0116\u008c\2\u0943"+
		"\u0942\3\2\2\2\u0944\u0947\3\2\2\2\u0945\u0943\3\2\2\2\u0945\u0946\3\2"+
		"\2\2\u0946\u0949\3\2\2\2\u0947\u0945\3\2\2\2\u0948\u0941\3\2\2\2\u0949"+
		"\u094a\3\2\2\2\u094a\u0948\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u0119\3\2"+
		"\2\2\u094c\u0950\5\u03d8\u01ed\2\u094d\u0950\7\3\2\2\u094e\u0950\5\36"+
		"\20\2\u094f\u094c\3\2\2\2\u094f\u094d\3\2\2\2\u094f\u094e\3\2\2\2\u0950"+
		"\u011b\3\2\2\2\u0951\u0952\5\u011a\u008e\2\u0952\u011d\3\2\2\2\u0953\u0954"+
		"\5\u03d8\u01ed\2\u0954\u011f\3\2\2\2\u0955\u0956\5\u03da\u01ee\2\u0956"+
		"\u0121\3\2\2\2\u0957\u0959\7\u00d7\2\2\u0958\u095a\5\u029a\u014e\2\u0959"+
		"\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u0959\3\2\2\2\u095b\u095c\3\2"+
		"\2\2\u095c\u0123\3\2\2\2\u095d\u095f\7\u00d6\2\2\u095e\u0960\5\u012a\u0096"+
		"\2\u095f\u095e\3\2\2\2\u0960\u0961\3\2\2\2\u0961\u095f\3\2\2\2\u0961\u0962"+
		"\3\2\2\2\u0962\u0966\3\2\2\2\u0963\u0965\5\u0126\u0094\2\u0964\u0963\3"+
		"\2\2\2\u0965\u0968\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967\3\2\2\2\u0967"+
		"\u0125\3\2\2\2\u0968\u0966\3\2\2\2\u0969\u0970\7\u0140\2\2\u096a\u096c"+
		"\t\27\2\2\u096b\u096d\7h\2\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2\2\u096d"+
		"\u096e\3\2\2\2\u096e\u096f\7\64\2\2\u096f\u0971\5\u0128\u0095\2\u0970"+
		"\u096a\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0970\3\2\2\2\u0972\u0973\3\2"+
		"\2\2\u0973\u0127\3\2\2\2\u0974\u0977\5\u0338\u019d\2\u0975\u0977\5\u03c2"+
		"\u01e2\2\u0976\u0974\3\2\2\2\u0976\u0975\3\2\2\2\u0977\u0129\3\2\2\2\u0978"+
		"\u0979\5\u0338\u019d\2\u0979\u012b\3\2\2\2\u097a\u097c\7\u00fb\2\2\u097b"+
		"\u097d\t\13\2\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097e\3"+
		"\2\2\2\u097e\u097f\5\u0156\u00ac\2\u097f\u0981\7\u0189\2\2\u0980\u0982"+
		"\5\u01da\u00ee\2\u0981\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0981\3"+
		"\2\2\2\u0983\u0984\3\2\2\2\u0984\u012d\3\2\2\2\u0985\u0986\7\u00d0\2\2"+
		"\u0986\u0988\5\u03c8\u01e5\2\u0987\u0989\7\u0184\2\2\u0988\u0987\3\2\2"+
		"\2\u0988\u0989\3\2\2\2\u0989\u0992\3\2\2\2\u098a\u098d\5J&\2\u098b\u098d"+
		"\5L\'\2\u098c\u098a\3\2\2\2\u098c\u098b\3\2\2\2\u098d\u098e\3\2\2\2\u098e"+
		"\u098c\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0993\3\2\2\2\u0990\u0991\7\u0100"+
		"\2\2\u0991\u0993\7\u015c\2\2\u0992\u098c\3\2\2\2\u0992\u0990\3\2\2\2\u0993"+
		"\u099f\3\2\2\2\u0994\u099d\7\u0087\2\2\u0995\u0998\5J&\2\u0996\u0998\5"+
		"L\'\2\u0997\u0995\3\2\2\2\u0997\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999"+
		"\u0997\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099e\3\2\2\2\u099b\u099c\7\u0100"+
		"\2\2\u099c\u099e\7\u015c\2\2\u099d\u0997\3\2\2\2\u099d\u099b\3\2\2\2\u099e"+
		"\u09a0\3\2\2\2\u099f\u0994\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a2\3\2"+
		"\2\2\u09a1\u09a3\7\u0091\2\2\u09a2\u09a1\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3"+
		"\u012f\3\2\2\2\u09a4\u09a5\7\u00c2\2\2\u09a5\u09a6\5\u0132\u009a\2\u09a6"+
		"\u0131\3\2\2\2\u09a7\u09a8\5\u0338\u019d\2\u09a8\u0133\3\2\2\2\u09a9\u09aa"+
		"\7\u00ab\2\2\u09aa\u0135\3\2\2\2\u09ab\u09ac\7\u00ab\2\2\u09ac\u09ad\7"+
		"\u012b\2\2\u09ad\u0137\3\2\2\2\u09ae\u09b0\7\u00c5\2\2\u09af\u09b1\7\u0189"+
		"\2\2\u09b0\u09af\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b3\3\2\2\2\u09b2"+
		"\u09b4\5\u013a\u009e\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09c5"+
		"\3\2\2\2\u09b5\u09b7\7\u00c5\2\2\u09b6\u09b8\7\u0189\2\2\u09b7\u09b6\3"+
		"\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09ba\3\2\2\2\u09b9\u09bb\5\u013a\u009e"+
		"\2\u09ba\u09b9\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bc\u09bd"+
		"\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09c0\7x\2\2\u09bf\u09c1\7\u010b\2"+
		"\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3"+
		"\5\u03d8\u01ed\2\u09c3\u09c5\3\2\2\2\u09c4\u09ae\3\2\2\2\u09c4\u09b5\3"+
		"\2\2\2\u09c5\u0139\3\2\2\2\u09c6\u09c7\5\u0338\u019d\2\u09c7\u013b\3\2"+
		"\2\2\u09c8\u09c9\7\u00a7\2\2\u09c9\u09d0\5\u0140\u00a1\2\u09ca\u09cc\7"+
		"\22\2\2\u09cb\u09ca\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd"+
		"\u09cf\5\u0140\u00a1\2\u09ce\u09cb\3\2\2\2\u09cf\u09d2\3\2\2\2\u09d0\u09ce"+
		"\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09e5\3\2\2\2\u09d2\u09d0\3\2\2\2\u09d3"+
		"\u09d4\7\u019f\2\2\u09d4\u09db\5\u013e\u00a0\2\u09d5\u09d7\7\22\2\2\u09d6"+
		"\u09d5\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09da\5\u013e"+
		"\u00a0\2\u09d9\u09d6\3\2\2\2\u09da\u09dd\3\2\2\2\u09db\u09d9\3\2\2\2\u09db"+
		"\u09dc\3\2\2\2\u09dc\u09e2\3\2\2\2\u09dd\u09db\3\2\2\2\u09de\u09e1\5J"+
		"&\2\u09df\u09e1\5L\'\2\u09e0\u09de\3\2\2\2\u09e0\u09df\3\2\2\2\u09e1\u09e4"+
		"\3\2\2\2\u09e2\u09e0\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e6\3\2\2\2\u09e4"+
		"\u09e2\3\2\2\2\u09e5\u09d3\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u09e5\3\2"+
		"\2\2\u09e7\u09e8\3\2\2\2\u09e8\u09f2\3\2\2\2\u09e9\u09ea\7\u019f\2\2\u09ea"+
		"\u09ef\7\u0112\2\2\u09eb\u09ee\5J&\2\u09ec\u09ee\5L\'\2\u09ed\u09eb\3"+
		"\2\2\2\u09ed\u09ec\3\2\2\2\u09ee\u09f1\3\2\2\2\u09ef\u09ed\3\2\2\2\u09ef"+
		"\u09f0\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3\2\2\2\u09f2\u09e9\3\2"+
		"\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f5\3\2\2\2\u09f4\u09f6\7\u0090\2\2\u09f5"+
		"\u09f4\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u013d\3\2\2\2\u09f7\u0a04\5\u03c8"+
		"\u01e5\2\u09f8\u09fa\7\u0102\2\2\u09f9\u09f8\3\2\2\2\u09f9\u09fa\3\2\2"+
		"\2\u09fa\u09fb\3\2\2\2\u09fb\u09fe\5\u03c0\u01e1\2\u09fc\u09fd\t\22\2"+
		"\2\u09fd\u09ff\5\u03c0\u01e1\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2"+
		"\u09ff\u0a04\3\2\2\2\u0a00\u0a04\7\26\2\2\u0a01\u0a04\7\u018c\2\2\u0a02"+
		"\u0a04\7\u00b0\2\2\u0a03\u09f7\3\2\2\2\u0a03\u09f9\3\2\2\2\u0a03\u0a00"+
		"\3\2\2\2\u0a03\u0a01\3\2\2\2\u0a03\u0a02\3\2\2\2\u0a04\u013f\3\2\2\2\u0a05"+
		"\u0a0a\5\u03c0\u01e1\2\u0a06\u0a0a\5\u03c8\u01e5\2\u0a07\u0a0a\7\u018c"+
		"\2\2\u0a08\u0a0a\7\u00b0\2\2\u0a09\u0a05\3\2\2\2\u0a09\u0a06\3\2\2\2\u0a09"+
		"\u0a07\3\2\2\2\u0a09\u0a08\3\2\2\2\u0a0a\u0141\3\2\2\2\u0a0b\u0a0e\5\u0144"+
		"\u00a3\2\u0a0c\u0a0e\5\u0146\u00a4\2\u0a0d\u0a0b\3\2\2\2\u0a0d\u0a0c\3"+
		"\2\2\2\u0a0e\u0143\3\2\2\2\u0a0f\u0a10\7\177\2\2\u0a10\u0a11\5\u014a\u00a6"+
		"\2\u0a11\u0a15\t\30\2\2\u0a12\u0a13\5\u014a\u00a6\2\u0a13\u0a14\7\u00c3"+
		"\2\2\u0a14\u0a16\3\2\2\2\u0a15\u0a12\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16"+
		"\u0a1b\3\2\2\2\u0a17\u0a19\5\u03d8\u01ed\2\u0a18\u0a1a\7\u0151\2\2\u0a19"+
		"\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1c\3\2\2\2\u0a1b\u0a17\3\2"+
		"\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a1b\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e"+
		"\u0a20\3\2\2\2\u0a1f\u0a21\5\u01a0\u00d1\2\u0a20\u0a1f\3\2\2\2\u0a20\u0a21"+
		"\3\2\2\2\u0a21\u0a23\3\2\2\2\u0a22\u0a24\7\u008f\2\2\u0a23\u0a22\3\2\2"+
		"\2\u0a23\u0a24\3\2\2\2\u0a24\u0145\3\2\2\2\u0a25\u0a26\7\177\2\2\u0a26"+
		"\u0a27\5\u014a\u00a6\2\u0a27\u0a2b\t\30\2\2\u0a28\u0a29\5\u014a\u00a6"+
		"\2\u0a29\u0a2a\7\u00c3\2\2\u0a2a\u0a2c\3\2\2\2\u0a2b\u0a28\3\2\2\2\u0a2b"+
		"\u0a2c\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2f\5\u03d8\u01ed\2\u0a2e\u0a30"+
		"\7\u0151\2\2\u0a2f\u0a2e\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a31\3\2\2"+
		"\2\u0a31\u0a32\7\u013c\2\2\u0a32\u0a34\5\u0148\u00a5\2\u0a33\u0a35\5\u01a0"+
		"\u00d1\2\u0a34\u0a33\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a37\3\2\2\2\u0a36"+
		"\u0a38\7\u008f\2\2\u0a37\u0a36\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0147"+
		"\3\2\2\2\u0a39\u0a3a\5\u03d8\u01ed\2\u0a3a\u0149\3\2\2\2\u0a3b\u0a3e\5"+
		"\u03da\u01ee\2\u0a3c\u0a3e\t\f\2\2\u0a3d\u0a3b\3\2\2\2\u0a3d\u0a3c\3\2"+
		"\2\2\u0a3e\u014b\3\2\2\2\u0a3f\u0a44\5\u014e\u00a8\2\u0a40\u0a44\5\u0150"+
		"\u00a9\2\u0a41\u0a44\5\u0152\u00aa\2\u0a42\u0a44\5\u0154\u00ab\2\u0a43"+
		"\u0a3f\3\2\2\2\u0a43\u0a40\3\2\2\2\u0a43\u0a41\3\2\2\2\u0a43\u0a42\3\2"+
		"\2\2\u0a44\u014d\3\2\2\2\u0a45\u0a4d\7~\2\2\u0a46\u0a4a\5\u0156\u00ac"+
		"\2\u0a47\u0a49\5\u015c\u00af\2\u0a48\u0a47\3\2\2\2\u0a49\u0a4c\3\2\2\2"+
		"\u0a4a\u0a48\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4e\3\2\2\2\u0a4c\u0a4a"+
		"\3\2\2\2\u0a4d\u0a46\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a4d\3\2\2\2\u0a4f"+
		"\u0a50\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51\u0a53\7\u008e\2\2\u0a52\u0a51"+
		"\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u014f\3\2\2\2\u0a54\u0a5c\7~\2\2\u0a55"+
		"\u0a59\5\u0156\u00ac\2\u0a56\u0a58\5\u0164\u00b3\2\u0a57\u0a56\3\2\2\2"+
		"\u0a58\u0a5b\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5d"+
		"\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5c\u0a55\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e"+
		"\u0a5c\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a61\3\2\2\2\u0a60\u0a62\7\u008e"+
		"\2\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0151\3\2\2\2\u0a63"+
		"\u0a64\7~\2\2\u0a64\u0a72\5\u03d8\u01ed\2\u0a65\u0a67\7!\2\2\u0a66\u0a65"+
		"\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a70\3\2\2\2\u0a68\u0a6a\5\u0158\u00ad"+
		"\2\u0a69\u0a6b\5\u015a\u00ae\2\u0a6a\u0a69\3\2\2\2\u0a6a\u0a6b\3\2\2\2"+
		"\u0a6b\u0a71\3\2\2\2\u0a6c\u0a6e\5\u015a\u00ae\2\u0a6d\u0a6f\5\u0158\u00ad"+
		"\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a71\3\2\2\2\u0a70\u0a68"+
		"\3\2\2\2\u0a70\u0a6c\3\2\2\2\u0a71\u0a73\3\2\2\2\u0a72\u0a66\3\2\2\2\u0a72"+
		"\u0a73\3\2\2\2\u0a73\u0a75\3\2\2\2\u0a74\u0a76\7\u008e\2\2\u0a75\u0a74"+
		"\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0153\3\2\2\2\u0a77\u0a78\7~\2\2\u0a78"+
		"\u0a79\5\u0156\u00ac\2\u0a79\u0a7b\5\u015e\u00b0\2\u0a7a\u0a7c\5\u019c"+
		"\u00cf\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7e\3\2\2\2\u0a7d"+
		"\u0a7f\7\u008e\2\2\u0a7e\u0a7d\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0155"+
		"\3\2\2\2\u0a80\u0a83\5\u03da\u01ee\2\u0a81\u0a83\5\u03c2\u01e2\2\u0a82"+
		"\u0a80\3\2\2\2\u0a82\u0a81\3\2\2\2\u0a83\u0157\3\2\2\2\u0a84\u0a86\7\u00ec"+
		"\2\2\u0a85\u0a87\7\u0103\2\2\u0a86\u0a85\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87"+
		"\u0a8a\3\2\2\2\u0a88\u0a8b\5\u03da\u01ee\2\u0a89\u0a8b\t\n\2\2\u0a8a\u0a88"+
		"\3\2\2\2\u0a8a\u0a89\3\2\2\2\u0a8b\u0159\3\2\2\2\u0a8c\u0a8e\7C\2\2\u0a8d"+
		"\u0a8f\7\u0103\2\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a92"+
		"\3\2\2\2\u0a90\u0a93\5\u03da\u01ee\2\u0a91\u0a93\t\n\2\2\u0a92\u0a90\3"+
		"\2\2\2\u0a92\u0a91\3\2\2\2\u0a93\u015b\3\2\2\2\u0a94\u0a98\5\u0160\u00b1"+
		"\2\u0a95\u0a98\5\u015e\u00b0\2\u0a96\u0a98\5\u0162\u00b2\2\u0a97\u0a94"+
		"\3\2\2\2\u0a97\u0a95\3\2\2\2\u0a97\u0a96\3\2\2\2\u0a98\u015d\3\2\2\2\u0a99"+
		"\u0a9a\7\u0197\2\2\u0a9a\u0a9b\5\u0176\u00bc\2\u0a9b\u015f\3\2\2\2\u0a9c"+
		"\u0a9e\7\u01a1\2\2\u0a9d\u0a9c\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f"+
		"\3\2\2\2\u0a9f\u0aa0\7^\2\2\u0aa0\u0161\3\2\2\2\u0aa1\u0aa3\7\u01a1\2"+
		"\2\u0aa2\u0aa1\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa6"+
		"\7\u0101\2\2\u0aa5\u0aa7\7\7\2\2\u0aa6\u0aa5\3\2\2\2\u0aa6\u0aa7\3\2\2"+
		"\2\u0aa7\u0163\3\2\2\2\u0aa8\u0ab4\5\u015c\u00af\2\u0aa9\u0ab4\5\u0172"+
		"\u00ba\2\u0aaa\u0ab4\5\u0174\u00bb\2\u0aab\u0ab4\5\u0170\u00b9\2\u0aac"+
		"\u0ab4\5\u016c\u00b7\2\u0aad\u0ab4\5\u016e\u00b8\2\u0aae\u0ab4\5\u016a"+
		"\u00b6\2\u0aaf\u0ab4\5\u0168\u00b5\2\u0ab0\u0ab4\5\u0166\u00b4\2\u0ab1"+
		"\u0ab4\5\u0160\u00b1\2\u0ab2\u0ab4\5\u0162\u00b2\2\u0ab3\u0aa8\3\2\2\2"+
		"\u0ab3\u0aa9\3\2\2\2\u0ab3\u0aaa\3\2\2\2\u0ab3\u0aab\3\2\2\2\u0ab3\u0aac"+
		"\3\2\2\2\u0ab3\u0aad\3\2\2\2\u0ab3\u0aae\3\2\2\2\u0ab3\u0aaf\3\2\2\2\u0ab3"+
		"\u0ab0\3\2\2\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab2\3\2\2\2\u0ab4\u0165\3\2"+
		"\2\2\u0ab5\u0ab6\7\u0149\2\2\u0ab6\u0167\3\2\2\2\u0ab7\u0ab9\7\u01a1\2"+
		"\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb"+
		"\7\60\2\2\u0abb\u0169\3\2\2\2\u0abc\u0abd\7\62\2\2\u0abd\u016b\3\2\2\2"+
		"\u0abe\u0ac0\7\u01a1\2\2\u0abf\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0"+
		"\u0ac1\3\2\2\2\u0ac1\u0ac2\7(\2\2\u0ac2\u016d\3\2\2\2\u0ac3\u0ac4\7\u018f"+
		"\2\2\u0ac4\u016f\3\2\2\2\u0ac5\u0acd\7\u00a5\2\2\u0ac6\u0ac8\7\u0189\2"+
		"\2\u0ac7\u0ac6\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0acb"+
		"\7\u0088\2\2\u0aca\u0acc\7\u0108\2\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3"+
		"\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0ac7\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace"+
		"\u0acf\3\2\2\2\u0acf\u0ad0\t\31\2\2\u0ad0\u0171\3\2\2\2\u0ad1\u0ad3\7"+
		"!\2\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4"+
		"\u0ad6\7\u00ec\2\2\u0ad5\u0ad7\7\u0103\2\2\u0ad6\u0ad5\3\2\2\2\u0ad6\u0ad7"+
		"\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u0ad9\5\u01d6\u00ec\2\u0ad9\u0173\3"+
		"\2\2\2\u0ada\u0adc\7!\2\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc"+
		"\u0add\3\2\2\2\u0add\u0adf\7C\2\2\u0ade\u0ae0\7\u0103\2\2\u0adf\u0ade"+
		"\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2\5\u01d6\u00ec"+
		"\2\u0ae2\u0175\3\2\2\2\u0ae3\u0ae4\7\u01c9\2\2\u0ae4\u0177\3\2\2\2\u0ae5"+
		"\u0ae6\7t\2\2\u0ae6\u0ae8\5\u0398\u01cd\2\u0ae7\u0ae9\7\u0134\2\2\u0ae8"+
		"\u0ae7\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aeb\3\2\2\2\u0aea\u0aec\5\u01a6"+
		"\u00d4\2\u0aeb\u0aea\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aee\3\2\2\2\u0aed"+
		"\u0aef\7\u008d\2\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0179"+
		"\3\2\2\2\u0af0\u0af1\7[\2\2\u0af1\u017b\3\2\2\2\u0af2\u0af7\7N\2\2\u0af3"+
		"\u0af5\5\u03d8\u01ed\2\u0af4\u0af6\7\u0151\2\2\u0af5\u0af4\3\2\2\2\u0af5"+
		"\u0af6\3\2\2\2\u0af6\u0af8\3\2\2\2\u0af7\u0af3\3\2\2\2\u0af8\u0af9\3\2"+
		"\2\2\u0af9\u0af7\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb"+
		"\u0afc\t\32\2\2\u0afc\u0afe\5\u03c0\u01e1\2\u0afd\u0aff\5\u01a0\u00d1"+
		"\2\u0afe\u0afd\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0b02"+
		"\7\u008c\2\2\u0b01\u0b00\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u017d\3\2\2"+
		"\2\u0b03\u0b08\7?\2\2\u0b04\u0b06\5\u0398\u01cd\2\u0b05\u0b07\5\u0180"+
		"\u00c1\2\u0b06\u0b05\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0b09\3\2\2\2\u0b08"+
		"\u0b04\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b08\3\2\2\2\u0b0a\u0b0b\3\2"+
		"\2\2\u0b0b\u017f\3\2\2\2\u0b0c\u0b16\t\33\2\2\u0b0d\u0b0f\7\u00bd\2\2"+
		"\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b17"+
		"\7\u013d\2\2\u0b11\u0b13\7\u01a1\2\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13\3"+
		"\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b15\7\u0101\2\2\u0b15\u0b17\7\u014b"+
		"\2\2\u0b16\u0b0e\3\2\2\2\u0b16\u0b12\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17"+
		"\u0b21\3\2\2\2\u0b18\u0b1a\7\u01a1\2\2\u0b19\u0b18\3\2\2\2\u0b19\u0b1a"+
		"\3\2\2\2\u0b1a\u0b1e\3\2\2\2\u0b1b\u0b1c\7\u0101\2\2\u0b1c\u0b1f\7\u014b"+
		"\2\2\u0b1d\u0b1f\7\u00f0\2\2\u0b1e\u0b1b\3\2\2\2\u0b1e\u0b1d\3\2\2\2\u0b1f"+
		"\u0b21\3\2\2\2\u0b20\u0b0c\3\2\2\2\u0b20\u0b19\3\2\2\2\u0b21\u0181\3\2"+
		"\2\2\u0b22\u0b24\7\67\2\2\u0b23\u0b25\5\u0190\u00c9\2\u0b24\u0b23\3\2"+
		"\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27"+
		"\u0183\3\2\2\2\u0b28\u0b29\7\66\2\2\u0b29\u0b2b\5\u0190\u00c9\2\u0b2a"+
		"\u0b2c\5\u0188\u00c5\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2e"+
		"\3\2\2\2\u0b2d\u0b2f\5\u0186\u00c4\2\u0b2e\u0b2d\3\2\2\2\u0b2e\u0b2f\3"+
		"\2\2\2\u0b2f\u0b31\3\2\2\2\u0b30\u0b32\5\u019c\u00cf\2\u0b31\u0b30\3\2"+
		"\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b34\3\2\2\2\u0b33\u0b35\7\u008b\2\2\u0b34"+
		"\u0b33\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0185\3\2\2\2\u0b36\u0b37\7\u00c3"+
		"\2\2\u0b37\u0b38\5\u03d8\u01ed\2\u0b38\u0187\3\2\2\2\u0b39\u0b3b\7\u019a"+
		"\2\2\u0b3a\u0b3c\5\u018a\u00c6\2\u0b3b\u0b3a\3\2\2\2\u0b3c\u0b3d\3\2\2"+
		"\2\u0b3d\u0b3b\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0189\3\2\2\2\u0b3f\u0b49"+
		"\7\u010a\2\2\u0b40\u0b42\5\u018c\u00c7\2\u0b41\u0b40\3\2\2\2\u0b41\u0b42"+
		"\3\2\2\2\u0b42\u0b44\3\2\2\2\u0b43\u0b45\5\u018e\u00c8\2\u0b44\u0b43\3"+
		"\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47"+
		"\u0b49\3\2\2\2\u0b48\u0b3f\3\2\2\2\u0b48\u0b41\3\2\2\2\u0b49\u018b\3\2"+
		"\2\2\u0b4a\u0b4c\7\64\2\2\u0b4b\u0b4a\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c"+
		"\u0b4d\3\2\2\2\u0b4d\u0b5b\7\u0138\2\2\u0b4e\u0b50\7\64\2\2\u0b4f\u0b4e"+
		"\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b5b\7X\2\2\u0b52"+
		"\u0b54\7\64\2\2\u0b53\u0b52\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b55\3"+
		"\2\2\2\u0b55\u0b5b\7z\2\2\u0b56\u0b58\7\64\2\2\u0b57\u0b56\3\2\2\2\u0b57"+
		"\u0b58\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5b\7\u019b\2\2\u0b5a\u0b4b"+
		"\3\2\2\2\u0b5a\u0b4f\3\2\2\2\u0b5a\u0b53\3\2\2\2\u0b5a\u0b57\3\2\2\2\u0b5b"+
		"\u018d\3\2\2\2\u0b5c\u0b60\5\u03d8\u01ed\2\u0b5d\u0b60\t\n\2\2\u0b5e\u0b60"+
		"\7\3\2\2\u0b5f\u0b5c\3\2\2\2\u0b5f\u0b5d\3\2\2\2\u0b5f\u0b5e\3\2\2\2\u0b60"+
		"\u018f\3\2\2\2\u0b61\u0b64\5\u03d8\u01ed\2\u0b62\u0b64\7\3\2\2\u0b63\u0b61"+
		"\3\2\2\2\u0b63\u0b62\3\2\2\2\u0b64\u0191\3\2\2\2\u0b65\u0b6e\7\23\2\2"+
		"\u0b66\u0b67\5\u013a\u009e\2\u0b67\u0b6a\7\u0189\2\2\u0b68\u0b69\7\u012a"+
		"\2\2\u0b69\u0b6b\7\u0189\2\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b"+
		"\u0b6c\3\2\2\2\u0b6c\u0b6d\5\u013a\u009e\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b66"+
		"\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71"+
		"\u0193\3\2\2\2\u0b72\u0b74\7\6\2\2\u0b73\u0b75\5\u0198\u00cd\2\u0b74\u0b73"+
		"\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b74\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77"+
		"\u0b78\3\2\2\2\u0b78\u0b7d\7\u0189\2\2\u0b79\u0b7b\5\u03d8\u01ed\2\u0b7a"+
		"\u0b7c\7\u0151\2\2\u0b7b\u0b7a\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7e"+
		"\3\2\2\2\u0b7d\u0b79\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b7d\3\2\2\2\u0b7f"+
		"\u0b80\3\2\2\2\u0b80\u0ba2\3\2\2\2\u0b81\u0b85\7\6\2\2\u0b82\u0b84\5\u0198"+
		"\u00cd\2\u0b83\u0b82\3\2\2\2\u0b84\u0b87\3\2\2\2\u0b85\u0b83\3\2\2\2\u0b85"+
		"\u0b86\3\2\2\2\u0b86\u0b89\3\2\2\2\u0b87\u0b85\3\2\2\2\u0b88\u0b8a\7\u0189"+
		"\2\2\u0b89\u0b88\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8c\3\2\2\2\u0b8b"+
		"\u0b8d\5\u0198\u00cd\2\u0b8c\u0b8b\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b8c"+
		"\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b95\7\u00c3\2"+
		"\2\u0b91\u0b93\5\u03d8\u01ed\2\u0b92\u0b94\7\u0151\2\2\u0b93\u0b92\3\2"+
		"\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b96\3\2\2\2\u0b95\u0b91\3\2\2\2\u0b96"+
		"\u0b97\3\2\2\2\u0b97\u0b95\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0ba2\3\2"+
		"\2\2\u0b99\u0b9a\7\6\2\2\u0b9a\u0b9b\t\13\2\2\u0b9b\u0b9c\5\u0196\u00cc"+
		"\2\u0b9c\u0b9d\7\u0189\2\2\u0b9d\u0b9f\5\u0196\u00cc\2\u0b9e\u0ba0\7\u0151"+
		"\2\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1"+
		"\u0b72\3\2\2\2\u0ba1\u0b81\3\2\2\2\u0ba1\u0b99\3\2\2\2\u0ba2\u0ba4\3\2"+
		"\2\2\u0ba3\u0ba5\5\u01a0\u00d1\2\u0ba4\u0ba3\3\2\2\2\u0ba4\u0ba5\3\2\2"+
		"\2\u0ba5\u0ba7\3\2\2\2\u0ba6\u0ba8\7\u008a\2\2\u0ba7\u0ba6\3\2\2\2\u0ba7"+
		"\u0ba8\3\2\2\2\u0ba8\u0195\3\2\2\2\u0ba9\u0baa\5\u03d8\u01ed\2\u0baa\u0197"+
		"\3\2\2\2\u0bab\u0bae\t\f\2\2\u0bac\u0bae\5\u03da\u01ee\2\u0bad\u0bab\3"+
		"\2\2\2\u0bad\u0bac\3\2\2\2\u0bae\u0199\3\2\2\2\u0baf\u0bb6\5\u01ac\u00d7"+
		"\2\u0bb0\u0bb6\5\u01ae\u00d8\2\u0bb1\u0bb6\5\u01b0\u00d9\2\u0bb2\u0bb6"+
		"\5\u01b2\u00da\2\u0bb3\u0bb6\5\u01b4\u00db\2\u0bb4\u0bb6\5\u01a8\u00d5"+
		"\2\u0bb5\u0baf\3\2\2\2\u0bb5\u0bb0\3\2\2\2\u0bb5\u0bb1\3\2\2\2\u0bb5\u0bb2"+
		"\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb4\3\2\2\2\u0bb6\u019b\3\2\2\2\u0bb7"+
		"\u0bba\5\u01e0\u00f1\2\u0bb8\u0bb9\7\u0102\2\2\u0bb9\u0bbb\5\u01e0\u00f1"+
		"\2\u0bba\u0bb8\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bc2\3\2\2\2\u0bbc\u0bbd"+
		"\7\u0102\2\2\u0bbd\u0bbf\5\u01e0\u00f1\2\u0bbe\u0bc0\5\u01e0\u00f1\2\u0bbf"+
		"\u0bbe\3\2\2\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bb7\3\2"+
		"\2\2\u0bc1\u0bbc\3\2\2\2\u0bc2\u019d\3\2\2\2\u0bc3\u0bc6\5\u01de\u00f0"+
		"\2\u0bc4\u0bc5\7\u0102\2\2\u0bc5\u0bc7\5\u01de\u00f0\2\u0bc6\u0bc4\3\2"+
		"\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bce\3\2\2\2\u0bc8\u0bc9\7\u0102\2\2\u0bc9"+
		"\u0bcb\5\u01de\u00f0\2\u0bca\u0bcc\5\u01de\u00f0\2\u0bcb\u0bca\3\2\2\2"+
		"\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd\u0bc3\3\2\2\2\u0bcd\u0bc8"+
		"\3\2\2\2\u0bce\u019f\3\2\2\2\u0bcf\u0bd2\5\u01e2\u00f2\2\u0bd0\u0bd1\7"+
		"\u0102\2\2\u0bd1\u0bd3\5\u01e2\u00f2\2\u0bd2\u0bd0\3\2\2\2\u0bd2\u0bd3"+
		"\3\2\2\2\u0bd3\u0bda\3\2\2\2\u0bd4\u0bd5\7\u0102\2\2\u0bd5\u0bd7\5\u01e2"+
		"\u00f2\2\u0bd6\u0bd8\5\u01e2\u00f2\2\u0bd7\u0bd6\3\2\2\2\u0bd7\u0bd8\3"+
		"\2\2\2\u0bd8\u0bda\3\2\2\2\u0bd9\u0bcf\3\2\2\2\u0bd9\u0bd4\3\2\2\2\u0bda"+
		"\u01a1\3\2\2\2\u0bdb\u0bde\5\u01e4\u00f3\2\u0bdc\u0bdd\7\u0102\2\2\u0bdd"+
		"\u0bdf\5\u01e4\u00f3\2\u0bde\u0bdc\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0be6"+
		"\3\2\2\2\u0be0\u0be1\7\u0102\2\2\u0be1\u0be3\5\u01e4\u00f3\2\u0be2\u0be4"+
		"\5\u01e4\u00f3\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be6\3"+
		"\2\2\2\u0be5\u0bdb\3\2\2\2\u0be5\u0be0\3\2\2\2\u0be6\u01a3\3\2\2\2\u0be7"+
		"\u0bea\5\u01e6\u00f4\2\u0be8\u0be9\7\u0102\2\2\u0be9\u0beb\5\u01e6\u00f4"+
		"\2\u0bea\u0be8\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bf2\3\2\2\2\u0bec\u0bed"+
		"\7\u0102\2\2\u0bed\u0bef\5\u01e6\u00f4\2\u0bee\u0bf0\5\u01e6\u00f4\2\u0bef"+
		"\u0bee\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2\3\2\2\2\u0bf1\u0be7\3\2"+
		"\2\2\u0bf1\u0bec\3\2\2\2\u0bf2\u01a5\3\2\2\2\u0bf3\u0bf6\5\u01e8\u00f5"+
		"\2\u0bf4\u0bf5\7\u0102\2\2\u0bf5\u0bf7\5\u01e8\u00f5\2\u0bf6\u0bf4\3\2"+
		"\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0bfe\3\2\2\2\u0bf8\u0bf9\7\u0102\2\2\u0bf9"+
		"\u0bfb\5\u01e8\u00f5\2\u0bfa\u0bfc\5\u01e8\u00f5\2\u0bfb\u0bfa\3\2\2\2"+
		"\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0bf3\3\2\2\2\u0bfd\u0bf8"+
		"\3\2\2\2\u0bfe\u01a7\3\2\2\2\u0bff\u0c00\7\4\2\2\u0c00\u0c02\5\u01da\u00ee"+
		"\2\u0c01\u0c03\7\u00bf\2\2\u0c02\u0c01\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03"+
		"\u0c04\3\2\2\2\u0c04\u0c06\5\u01aa\u00d6\2\u0c05\u0c07\5\u019c\u00cf\2"+
		"\u0c06\u0c05\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c09\3\2\2\2\u0c08\u0c0a"+
		"\7\u0089\2\2\u0c09\u0c08\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u01a9\3\2\2"+
		"\2\u0c0b\u0c0c\7\u01c9\2\2\u0c0c\u01ab\3\2\2\2\u0c0d\u0c0e\7\4\2\2\u0c0e"+
		"\u0c11\5\u01da\u00ee\2\u0c0f\u0c10\7\u00bf\2\2\u0c10\u0c12\5\u01dc\u00ef"+
		"\2\u0c11\u0c0f\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c15\3\2\2\2\u0c13\u0c14"+
		"\7\u01a1\2\2\u0c14\u0c16\7^\2\2\u0c15\u0c13\3\2\2\2\u0c15\u0c16\3\2\2"+
		"\2\u0c16\u0c18\3\2\2\2\u0c17\u0c19\5\u019e\u00d0\2\u0c18\u0c17\3\2\2\2"+
		"\u0c18\u0c19\3\2\2\2\u0c19\u0c1b\3\2\2\2\u0c1a\u0c1c\7\u0089\2\2\u0c1b"+
		"\u0c1a\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u01ad\3\2\2\2\u0c1d\u0c1e\7\4"+
		"\2\2\u0c1e\u0c1f\5\u01da\u00ee\2\u0c1f\u0c20\7\u00bf\2\2\u0c20\u0c21\5"+
		"\u01d8\u00ed\2\u0c21\u01af\3\2\2\2\u0c22\u0c23\7\4\2\2\u0c23\u0c25\5\u01da"+
		"\u00ee\2\u0c24\u0c26\5\u01c2\u00e2\2\u0c25\u0c24\3\2\2\2\u0c26\u0c27\3"+
		"\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2b\3\2\2\2\u0c29"+
		"\u0c2c\5\u019c\u00cf\2\u0c2a\u0c2c\5\u019e\u00d0\2\u0c2b\u0c29\3\2\2\2"+
		"\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c2f"+
		"\7\u0089\2\2\u0c2e\u0c2d\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u01b1\3\2\2"+
		"\2\u0c30\u0c32\7\4\2\2\u0c31\u0c33\7\\\2\2\u0c32\u0c31\3\2\2\2\u0c32\u0c33"+
		"\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34\u0c36\7\u00e3\2\2\u0c35\u0c37\7\u00d1"+
		"\2\2\u0c36\u0c35\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38"+
		"\u0c3a\5\u01cc\u00e7\2\u0c39\u0c3b\5\u01bc\u00df\2\u0c3a\u0c39\3\2\2\2"+
		"\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c40"+
		"\3\2\2\2\u0c3e\u0c41\5\u019c\u00cf\2\u0c3f\u0c41\5\u019e\u00d0\2\u0c40"+
		"\u0c3e\3\2\2\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c43\3\2"+
		"\2\2\u0c42\u0c44\7\u0089\2\2\u0c43\u0c42\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44"+
		"\u01b3\3\2\2\2\u0c45\u0c46\7\4\2\2\u0c46\u0c48\5\u0294\u014b\2\u0c47\u0c49"+
		"\5\u01b6\u00dc\2\u0c48\u0c47\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4b\3"+
		"\2\2\2\u0c4a\u0c4c\5\u019c\u00cf\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c\3\2"+
		"\2\2\u0c4c\u0c4e\3\2\2\2\u0c4d\u0c4f\7\u0089\2\2\u0c4e\u0c4d\3\2\2\2\u0c4e"+
		"\u0c4f\3\2\2\2\u0c4f\u01b5\3\2\2\2\u0c50\u0c52\7!\2\2\u0c51\u0c50\3\2"+
		"\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c5b\3\2\2\2\u0c53\u0c55\5\u01b8\u00dd"+
		"\2\u0c54\u0c56\5\u01ba\u00de\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3\2\2\2"+
		"\u0c56\u0c5c\3\2\2\2\u0c57\u0c59\5\u01ba\u00de\2\u0c58\u0c5a\5\u01b8\u00dd"+
		"\2\u0c59\u0c58\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5c\3\2\2\2\u0c5b\u0c53"+
		"\3\2\2\2\u0c5b\u0c57\3\2\2\2\u0c5c\u01b7\3\2\2\2\u0c5d\u0c5f\7\u00ec\2"+
		"\2\u0c5e\u0c60\7\u0103\2\2\u0c5f\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60"+
		"\u0c63\3\2\2\2\u0c61\u0c64\t\n\2\2\u0c62\u0c64\5\u03da\u01ee\2\u0c63\u0c61"+
		"\3\2\2\2\u0c63\u0c62\3\2\2\2\u0c64\u01b9\3\2\2\2\u0c65\u0c67\7C\2\2\u0c66"+
		"\u0c68\7\u0103\2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c6b"+
		"\3\2\2\2\u0c69\u0c6c\t\n\2\2\u0c6a\u0c6c\5\u03da\u01ee\2\u0c6b\u0c69\3"+
		"\2\2\2\u0c6b\u0c6a\3\2\2\2\u0c6c\u01bb\3\2\2\2\u0c6d\u0c72\5\u01c0\u00e1"+
		"\2\u0c6e\u0c72\5\u01be\u00e0\2\u0c6f\u0c72\5\u0170\u00b9\2\u0c70\u0c72"+
		"\5\u016c\u00b7\2\u0c71\u0c6d\3\2\2\2\u0c71\u0c6e\3\2\2\2\u0c71\u0c6f\3"+
		"\2\2\2\u0c71\u0c70\3\2\2\2\u0c72\u01bd\3\2\2\2\u0c73\u0c75\7\u00bf\2\2"+
		"\u0c74\u0c73\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u0c78"+
		"\7C\2\2\u0c77\u0c79\7\u0103\2\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2"+
		"\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\5\u01d6\u00ec\2\u0c7b\u01bf\3\2\2\2"+
		"\u0c7c\u0c7e\7\u00bf\2\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e"+
		"\u0c7f\3\2\2\2\u0c7f\u0c81\7\u00ec\2\2\u0c80\u0c82\7\u0103\2\2\u0c81\u0c80"+
		"\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c84\5\u01d6\u00ec"+
		"\2\u0c84\u01c1\3\2\2\2\u0c85\u0c90\5\u01bc\u00df\2\u0c86\u0c90\5\u016e"+
		"\u00b8\2\u0c87\u0c90\5\u016a\u00b6\2\u0c88\u0c90\5\u0168\u00b5\2\u0c89"+
		"\u0c90\5\u01c4\u00e3\2\u0c8a\u0c90\5\u0160\u00b1\2\u0c8b\u0c90\5\u0166"+
		"\u00b4\2\u0c8c\u0c90\5\u01ca\u00e6\2\u0c8d\u0c90\5\u01c8\u00e5\2\u0c8e"+
		"\u0c90\5\u01c6\u00e4\2\u0c8f\u0c85\3\2\2\2\u0c8f\u0c86\3\2\2\2\u0c8f\u0c87"+
		"\3\2\2\2\u0c8f\u0c88\3\2\2\2\u0c8f\u0c89\3\2\2\2\u0c8f\u0c8a\3\2\2\2\u0c8f"+
		"\u0c8b\3\2\2\2\u0c8f\u0c8c\3\2\2\2\u0c8f\u0c8d\3\2\2\2\u0c8f\u0c8e\3\2"+
		"\2\2\u0c90\u01c3\3\2\2\2\u0c91\u0c95\7\u012d\2\2\u0c92\u0c94\5\u01d0\u00e9"+
		"\2\u0c93\u0c92\3\2\2\2\u0c94\u0c97\3\2\2\2\u0c95\u0c93\3\2\2\2\u0c95\u0c96"+
		"\3\2\2\2\u0c96\u01c5\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c98\u0c9a\7\\\2\2\u0c99"+
		"\u0c98\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9d\7\u00e3"+
		"\2\2\u0c9c\u0c9e\7\u00d1\2\2\u0c9d\u0c9c\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e"+
		"\u0c9f\3\2\2\2\u0c9f\u0ca0\5\u01cc\u00e7\2\u0ca0\u01c7\3\2\2\2\u0ca1\u0ca3"+
		"\7r\2\2\u0ca2\u0ca4\7\u00de\2\2\u0ca3\u0ca2\3\2\2\2\u0ca3\u0ca4\3\2\2"+
		"\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\5\u01ce\u00e8\2\u0ca6\u01c9\3\2\2\2"+
		"\u0ca7\u0ca9\7\u01a1\2\2\u0ca8\u0ca7\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9"+
		"\u0caa\3\2\2\2\u0caa\u0cab\7\u0101\2\2\u0cab\u0cac\7\u0085\2\2\u0cac\u01cb"+
		"\3\2\2\2\u0cad\u0cae\5\u03da\u01ee\2\u0cae\u01cd\3\2\2\2\u0caf\u0cb7\5"+
		"\"\22\2\u0cb0\u0cb7\7\3\2\2\u0cb1\u0cb7\5\u03da\u01ee\2\u0cb2\u0cb4\7"+
		"f\2\2\u0cb3\u0cb5\7\u019b\2\2\u0cb4\u0cb3\3\2\2\2\u0cb4\u0cb5\3\2\2\2"+
		"\u0cb5\u0cb7\3\2\2\2\u0cb6\u0caf\3\2\2\2\u0cb6\u0cb0\3\2\2\2\u0cb6\u0cb1"+
		"\3\2\2\2\u0cb6\u0cb2\3\2\2\2\u0cb7\u01cf\3\2\2\2\u0cb8\u0cb9\7\u0163\2"+
		"\2\u0cb9\u0ccd\5\u01d4\u00eb\2\u0cba\u0cbc\7\u01a1\2\2\u0cbb\u0cba\3\2"+
		"\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0ccd\7%\2\2\u0cbe"+
		"\u0cc0\7\u01a1\2\2\u0cbf\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc1"+
		"\3\2\2\2\u0cc1\u0cc2\7\u0101\2\2\u0cc2\u0ccd\7.\2\2\u0cc3\u0cc5\7\u01a1"+
		"\2\2\u0cc4\u0cc3\3\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6"+
		"\u0ccd\7\u0086\2\2\u0cc7\u0cc9\7\u01a1\2\2\u0cc8\u0cc7\3\2\2\2\u0cc8\u0cc9"+
		"\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\7\u00b5\2\2\u0ccb\u0ccd\5\u01d2"+
		"\u00ea\2\u0ccc\u0cb8\3\2\2\2\u0ccc\u0cbb\3\2\2\2\u0ccc\u0cbf\3\2\2\2\u0ccc"+
		"\u0cc4\3\2\2\2\u0ccc\u0cc8\3\2\2\2\u0ccd\u01d1\3\2\2\2\u0cce\u0ccf\7\3"+
		"\2\2\u0ccf\u01d3\3\2\2\2\u0cd0\u0cd3\t\n\2\2\u0cd1\u0cd3\5\u03da\u01ee"+
		"\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd1\3\2\2\2\u0cd3\u01d5\3\2\2\2\u0cd4\u0ce1"+
		"\5\u0274\u013b\2\u0cd5\u0cda\5\u03da\u01ee\2\u0cd6\u0cd8\7\u011e\2\2\u0cd7"+
		"\u0cd9\5\u0274\u013b\2\u0cd8\u0cd7\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cdb"+
		"\3\2\2\2\u0cda\u0cd6\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0ce1\3\2\2\2\u0cdc"+
		"\u0cde\7\u011e\2\2\u0cdd\u0cdf\5\u0274\u013b\2\u0cde\u0cdd\3\2\2\2\u0cde"+
		"\u0cdf\3\2\2\2\u0cdf\u0ce1\3\2\2\2\u0ce0\u0cd4\3\2\2\2\u0ce0\u0cd5\3\2"+
		"\2\2\u0ce0\u0cdc\3\2\2\2\u0ce1\u01d7\3\2\2\2\u0ce2\u0ce4\7i\2\2\u0ce3"+
		"\u0ce5\7\u01a7\2\2\u0ce4\u0ce3\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0ced"+
		"\3\2\2\2\u0ce6\u0ce8\7l\2\2\u0ce7\u0ce9\7\u01a6\2\2\u0ce8\u0ce7\3\2\2"+
		"\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ced\3\2\2\2\u0cea\u0ced\7m\2\2\u0ceb\u0ced"+
		"\7\u0187\2\2\u0cec\u0ce2\3\2\2\2\u0cec\u0ce6\3\2\2\2\u0cec\u0cea\3\2\2"+
		"\2\u0cec\u0ceb\3\2\2\2\u0ced\u01d9\3\2\2\2\u0cee\u0cef\5\u03d8\u01ed\2"+
		"\u0cef\u01db\3\2\2\2\u0cf0\u0cf1\7\u01c9\2\2\u0cf1\u01dd\3\2\2\2\u0cf2"+
		"\u0cf4\7!\2\2\u0cf3\u0cf2\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\3\2"+
		"\2\2\u0cf5\u0cfa\7\u0088\2\2\u0cf6\u0cf9\5J&\2\u0cf7\u0cf9\5L\'\2\u0cf8"+
		"\u0cf6\3\2\2\2\u0cf8\u0cf7\3\2\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cf8\3\2"+
		"\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u01df\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfd"+
		"\u0cff\7\u010b\2\2\u0cfe\u0cfd\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00"+
		"\3\2\2\2\u0d00\u0d05\7\u00a9\2\2\u0d01\u0d04\5J&\2\u0d02\u0d04\5L\'\2"+
		"\u0d03\u0d01\3\2\2\2\u0d03\u0d02\3\2\2\2\u0d04\u0d07\3\2\2\2\u0d05\u0d03"+
		"\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u01e1\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d08"+
		"\u0d0a\7\u010b\2\2\u0d09\u0d08\3\2\2\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d0b"+
		"\3\2\2\2\u0d0b\u0d0c\7\u0163\2\2\u0d0c\u0d11\7\u00a6\2\2\u0d0d\u0d10\5"+
		"J&\2\u0d0e\u0d10\5L\'\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d0e\3\2\2\2\u0d10"+
		"\u0d13\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12\u01e3\3\2"+
		"\2\2\u0d13\u0d11\3\2\2\2\u0d14\u0d16\7\u010b\2\2\u0d15\u0d14\3\2\2\2\u0d15"+
		"\u0d16\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17\u0d1c\7\u0115\2\2\u0d18\u0d1b"+
		"\5J&\2\u0d19\u0d1b\5L\'\2\u0d1a\u0d18\3\2\2\2\u0d1a\u0d19\3\2\2\2\u0d1b"+
		"\u0d1e\3\2\2\2\u0d1c\u0d1a\3\2\2\2\u0d1c\u0d1d\3\2\2\2\u0d1d\u01e5\3\2"+
		"\2\2\u0d1e\u0d1c\3\2\2\2\u0d1f\u0d21\7!\2\2\u0d20\u0d1f\3\2\2\2\u0d20"+
		"\u0d21\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d27\t\34\2\2\u0d23\u0d26\5"+
		"J&\2\u0d24\u0d26\5L\'\2\u0d25\u0d23\3\2\2\2\u0d25\u0d24\3\2\2\2\u0d26"+
		"\u0d29\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u01e7\3\2"+
		"\2\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2c\7\u00dd\2\2\u0d2b\u0d2d\7\u00e3\2"+
		"\2\u0d2c\u0d2b\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d32\3\2\2\2\u0d2e\u0d31"+
		"\5J&\2\u0d2f\u0d31\5L\'\2\u0d30\u0d2e\3\2\2\2\u0d30\u0d2f\3\2\2\2\u0d31"+
		"\u0d34\3\2\2\2\u0d32\u0d30\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u01e9\3\2"+
		"\2\2\u0d34\u0d32\3\2\2\2\u0d35\u0d36\7\u00b2\2\2\u0d36\u0d37\7\u0157\2"+
		"\2\u0d37\u0d3b\7\u01c3\2\2\u0d38\u0d3a\5T+\2\u0d39\u0d38\3\2\2\2\u0d3a"+
		"\u0d3d\3\2\2\2\u0d3b\u0d39\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d42\3\2"+
		"\2\2\u0d3d\u0d3b\3\2\2\2\u0d3e\u0d41\5\u01ec\u00f7\2\u0d3f\u0d41\5\u01ee"+
		"\u00f8\2\u0d40\u0d3e\3\2\2\2\u0d40\u0d3f\3\2\2\2\u0d41\u0d44\3\2\2\2\u0d42"+
		"\u0d40\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u01eb\3\2\2\2\u0d44\u0d42\3\2"+
		"\2\2\u0d45\u0d49\5\u01fc\u00ff\2\u0d46\u0d48\5\u0208\u0105\2\u0d47\u0d46"+
		"\3\2\2\2\u0d48\u0d4b\3\2\2\2\u0d49\u0d47\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a"+
		"\u01ed\3\2\2\2\u0d4b\u0d49\3\2\2\2\u0d4c\u0d50\5\u01fe\u0100\2\u0d4d\u0d4f"+
		"\5\u0208\u0105\2\u0d4e\u0d4d\3\2\2\2\u0d4f\u0d52\3\2\2\2\u0d50\u0d4e\3"+
		"\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u01ef\3\2\2\2\u0d52\u0d50\3\2\2\2\u0d53"+
		"\u0d54\7\u01a3\2\2\u0d54\u0d55\7\u0157\2\2\u0d55\u0d59\7\u01c3\2\2\u0d56"+
		"\u0d58\5T+\2\u0d57\u0d56\3\2\2\2\u0d58\u0d5b\3\2\2\2\u0d59\u0d57\3\2\2"+
		"\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5f\3\2\2\2\u0d5b\u0d59\3\2\2\2\u0d5c\u0d5e"+
		"\5\u01f2\u00fa\2\u0d5d\u0d5c\3\2\2\2\u0d5e\u0d61\3\2\2\2\u0d5f\u0d5d\3"+
		"\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u01f1\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d62"+
		"\u0d65\5\u0208\u0105\2\u0d63\u0d65\5L\'\2\u0d64\u0d62\3\2\2\2\u0d64\u0d63"+
		"\3\2\2\2\u0d65\u01f3\3\2\2\2\u0d66\u0d67\7\u00ef\2\2\u0d67\u0d68\7\u0157"+
		"\2\2\u0d68\u0d6c\7\u01c3\2\2\u0d69\u0d6b\5T+\2\u0d6a\u0d69\3\2\2\2\u0d6b"+
		"\u0d6e\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d72\3\2"+
		"\2\2\u0d6e\u0d6c\3\2\2\2\u0d6f\u0d71\5\u0208\u0105\2\u0d70\u0d6f\3\2\2"+
		"\2\u0d71\u0d74\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u01f5"+
		"\3\2\2\2\u0d74\u0d72\3\2\2\2\u0d75\u0d76\7\u0141\2\2\u0d76\u0d77\7\u0157"+
		"\2\2\u0d77\u0d7b\7\u01c3\2\2\u0d78\u0d7a\5T+\2\u0d79\u0d78\3\2\2\2\u0d7a"+
		"\u0d7d\3\2\2\2\u0d7b\u0d79\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d81\3\2"+
		"\2\2\u0d7d\u0d7b\3\2\2\2\u0d7e\u0d80\5\u01f8\u00fd\2\u0d7f\u0d7e\3\2\2"+
		"\2\u0d80\u0d83\3\2\2\2\u0d81\u0d7f\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u01f7"+
		"\3\2\2\2\u0d83\u0d81\3\2\2\2\u0d84\u0d88\5\u0200\u0101\2\u0d85\u0d87\5"+
		"\u023a\u011e\2\u0d86\u0d85\3\2\2\2\u0d87\u0d8a\3\2\2\2\u0d88\u0d86\3\2"+
		"\2\2\u0d88\u0d89\3\2\2\2\u0d89\u01f9\3\2\2\2\u0d8a\u0d88\3\2\2\2\u0d8b"+
		"\u0d8c\7\u0154\2\2\u0d8c\u0d8d\7\u0157\2\2\u0d8d\u0d91\7\u01c3\2\2\u0d8e"+
		"\u0d90\5T+\2\u0d8f\u0d8e\3\2\2\2\u0d90\u0d93\3\2\2\2\u0d91\u0d8f\3\2\2"+
		"\2\u0d91\u0d92\3\2\2\2\u0d92\u0d97\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d94\u0d96"+
		"\5\u02ba\u015e\2\u0d95\u0d94\3\2\2\2\u0d96\u0d99\3\2\2\2\u0d97\u0d95\3"+
		"\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u01fb\3\2\2\2\u0d99\u0d97\3\2\2\2\u0d9a"+
		"\u0d9b\7\u00b1\2\2\u0d9b\u0d9f\5\u0398\u01cd\2\u0d9c\u0d9e\5\u0202\u0102"+
		"\2\u0d9d\u0d9c\3\2\2\2\u0d9e\u0da1\3\2\2\2\u0d9f\u0d9d\3\2\2\2\u0d9f\u0da0"+
		"\3\2\2\2\u0da0\u0da2\3\2\2\2\u0da1\u0d9f\3\2\2\2\u0da2\u0da6\7\u01c3\2"+
		"\2\u0da3\u0da5\5T+\2\u0da4\u0da3\3\2\2\2\u0da5\u0da8\3\2\2\2\u0da6\u0da4"+
		"\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u01fd\3\2\2\2\u0da8\u0da6\3\2\2\2\u0da9"+
		"\u0daa\7\u0155\2\2\u0daa\u0dae\5\u0398\u01cd\2\u0dab\u0dad\5\u0296\u014c"+
		"\2\u0dac\u0dab\3\2\2\2\u0dad\u0db0\3\2\2\2\u0dae\u0dac\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db1\3\2\2\2\u0db0\u0dae\3\2\2\2\u0db1\u0db5\7\u01c3\2"+
		"\2\u0db2\u0db4\5T+\2\u0db3\u0db2\3\2\2\2\u0db4\u0db7\3\2\2\2\u0db5\u0db3"+
		"\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u01ff\3\2\2\2\u0db7\u0db5\3\2\2\2\u0db8"+
		"\u0db9\7\u0131\2\2\u0db9\u0dbd\5\u029a\u014e\2\u0dba\u0dbc\5\u0276\u013c"+
		"\2\u0dbb\u0dba\3\2\2\2\u0dbc\u0dbf\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd\u0dbe"+
		"\3\2\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dbd\3\2\2\2\u0dc0\u0dc4\7\u01c3\2"+
		"\2\u0dc1\u0dc3\5T+\2\u0dc2\u0dc1\3\2\2\2\u0dc3\u0dc6\3\2\2\2\u0dc4\u0dc2"+
		"\3\2\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u0201\3\2\2\2\u0dc6\u0dc4\3\2\2\2\u0dc7"+
		"\u0dd6\5\u0204\u0103\2\u0dc8\u0dd6\5\u0206\u0104\2\u0dc9\u0dd6\5\u038c"+
		"\u01c7\2\u0dca\u0dd6\5\u02b0\u0159\2\u0dcb\u0dd6\5\u02ae\u0158\2\u0dcc"+
		"\u0dd6\5\u02aa\u0156\2\u0dcd\u0dd6\5\u02a6\u0154\2\u0dce\u0dd6\5\u029c"+
		"\u014f\2\u0dcf\u0dd6\5\u0298\u014d\2\u0dd0\u0dd6\5\u038a\u01c6\2\u0dd1"+
		"\u0dd6\5\u0378\u01bd\2\u0dd2\u0dd6\5\u036e\u01b8\2\u0dd3\u0dd6\5\u0370"+
		"\u01b9\2\u0dd4\u0dd6\5\u036a\u01b6\2\u0dd5\u0dc7\3\2\2\2\u0dd5\u0dc8\3"+
		"\2\2\2\u0dd5\u0dc9\3\2\2\2\u0dd5\u0dca\3\2\2\2\u0dd5\u0dcb\3\2\2\2\u0dd5"+
		"\u0dcc\3\2\2\2\u0dd5\u0dcd\3\2\2\2\u0dd5\u0dce\3\2\2\2\u0dd5\u0dcf\3\2"+
		"\2\2\u0dd5\u0dd0\3\2\2\2\u0dd5\u0dd1\3\2\2\2\u0dd5\u0dd2\3\2\2\2\u0dd5"+
		"\u0dd3\3\2\2\2\u0dd5\u0dd4\3\2\2\2\u0dd6\u0203\3\2\2\2\u0dd7\u0dd9\7\u00de"+
		"\2\2\u0dd8\u0dd7\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0ddb\7\u00ae\2\2\u0ddb\u0205\3\2\2\2\u0ddc\u0dde\7\u00de\2\2\u0ddd\u0ddc"+
		"\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u0de0\7\u00c4\2"+
		"\2\u0de0\u0207\3\2\2\2\u0de1\u0de4\5\u020a\u0106\2\u0de2\u0de5\5\u0294"+
		"\u014b\2\u0de3\u0de5\7\u00b5\2\2\u0de4\u0de2\3\2\2\2\u0de4\u0de3\3\2\2"+
		"\2\u0de4\u0de5\3\2\2\2\u0de5\u0de8\3\2\2\2\u0de6\u0de7\7\u0136\2\2\u0de7"+
		"\u0de9\5\u0292\u014a\2\u0de8\u0de6\3\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0ded"+
		"\3\2\2\2\u0dea\u0dec\5\u020c\u0107\2\u0deb\u0dea\3\2\2\2\u0dec\u0def\3"+
		"\2\2\2\u0ded\u0deb\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee\u0df0\3\2\2\2\u0def"+
		"\u0ded\3\2\2\2\u0df0\u0df4\7\u01c3\2\2\u0df1\u0df3\5T+\2\u0df2\u0df1\3"+
		"\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5"+
		"\u0209\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0df8\t\n\2\2\u0df8\u020b\3\2"+
		"\2\2\u0df9\u0e05\5\u0204\u0103\2\u0dfa\u0e05\5\u0206\u0104\2\u0dfb\u0e05"+
		"\5\u028e\u0148\2\u0dfc\u0e05\5\u028a\u0146\2\u0dfd\u0e05\5\u0250\u0129"+
		"\2\u0dfe\u0e05\5\u0228\u0115\2\u0dff\u0e05\5\u020e\u0108\2\u0e00\u0e05"+
		"\5\u0210\u0109\2\u0e01\u0e05\5\u0212\u010a\2\u0e02\u0e05\5\u021a\u010e"+
		"\2\u0e03\u0e05\5\u0214\u010b\2\u0e04\u0df9\3\2\2\2\u0e04\u0dfa\3\2\2\2"+
		"\u0e04\u0dfb\3\2\2\2\u0e04\u0dfc\3\2\2\2\u0e04\u0dfd\3\2\2\2\u0e04\u0dfe"+
		"\3\2\2\2\u0e04\u0dff\3\2\2\2\u0e04\u0e00\3\2\2\2\u0e04\u0e01\3\2\2\2\u0e04"+
		"\u0e02\3\2\2\2\u0e04\u0e03\3\2\2\2\u0e05\u020d\3\2\2\2\u0e06\u0e08\t\35"+
		"\2\2\u0e07\u0e09\t\36\2\2\u0e08\u0e07\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09"+
		"\u020f\3\2\2\2\u0e0a\u0e0c\t\37\2\2\u0e0b\u0e0d\7\u014f\2\2\u0e0c\u0e0b"+
		"\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0211\3\2\2\2\u0e0e\u0e10\7.\2\2\u0e0f"+
		"\u0e11\7\u019f\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0e12"+
		"\3\2\2\2\u0e12\u0e13\7\u01a8\2\2\u0e13\u0213\3\2\2\2\u0e14\u0e15\7\u013e"+
		"\2\2\u0e15\u0e18\5\u0216\u010c\2\u0e16\u0e17\t\22\2\2\u0e17\u0e19\5\u0218"+
		"\u010d\2\u0e18\u0e16\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19\u0215\3\2\2\2\u0e1a"+
		"\u0e1b\5\u0338\u019d\2\u0e1b\u0217\3\2\2\2\u0e1c\u0e1d\5\u0338\u019d\2"+
		"\u0e1d\u0219\3\2\2\2\u0e1e\u0e20\7\u019b\2\2\u0e1f\u0e21\7\u00de\2\2\u0e20"+
		"\u0e1f\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e27\3\2\2\2\u0e22\u0e24\7\u019c"+
		"\2\2\u0e23\u0e25\7\30\2\2\u0e24\u0e23\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25"+
		"\u0e27\3\2\2\2\u0e26\u0e1e\3\2\2\2\u0e26\u0e22\3\2\2\2\u0e27\u0e29\3\2"+
		"\2\2\u0e28\u0e2a\5\u021c\u010f\2\u0e29\u0e28\3\2\2\2\u0e2a\u0e2b\3\2\2"+
		"\2\u0e2b\u0e29\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u021b\3\2\2\2\u0e2d\u0e2f"+
		"\5\u021e\u0110\2\u0e2e\u0e30\5\u0220\u0111\2\u0e2f\u0e2e\3\2\2\2\u0e2f"+
		"\u0e30\3\2\2\2\u0e30\u021d\3\2\2\2\u0e31\u0e37\5\u0226\u0114\2\u0e32\u0e33"+
		"\7\u0138\2\2\u0e33\u0e37\5\u0224\u0113\2\u0e34\u0e35\7\u00ae\2\2\u0e35"+
		"\u0e37\5\u0222\u0112\2\u0e36\u0e31\3\2\2\2\u0e36\u0e32\3\2\2\2\u0e36\u0e34"+
		"\3\2\2\2\u0e37\u021f\3\2\2\2\u0e38\u0e39\t\22\2\2\u0e39\u0e3a\5\u021e"+
		"\u0110\2\u0e3a\u0221\3\2\2\2\u0e3b\u0e3c\7\u01c9\2\2\u0e3c\u0223\3\2\2"+
		"\2\u0e3d\u0e3e\5\u03d8\u01ed\2\u0e3e\u0225\3\2\2\2\u0e3f\u0e44\7\3\2\2"+
		"\u0e40\u0e44\t\f\2\2\u0e41\u0e44\5\"\22\2\u0e42\u0e44\7\u01c9\2\2\u0e43"+
		"\u0e3f\3\2\2\2\u0e43\u0e40\3\2\2\2\u0e43\u0e41\3\2\2\2\u0e43\u0e42\3\2"+
		"\2\2\u0e44\u0227\3\2\2\2\u0e45\u0e46\7\u0107\2\2\u0e46\u0e4a\5\u0232\u011a"+
		"\2\u0e47\u0e49\5\u022e\u0118\2\u0e48\u0e47\3\2\2\2\u0e49\u0e4c\3\2\2\2"+
		"\u0e4a\u0e48\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4e\3\2\2\2\u0e4c\u0e4a"+
		"\3\2\2\2\u0e4d\u0e4f\5\u022a\u0116\2\u0e4e\u0e4d\3\2\2\2\u0e4e\u0e4f\3"+
		"\2\2\2\u0e4f\u0229\3\2\2\2\u0e50\u0e52\7\u00d3\2\2\u0e51\u0e53\7\64\2"+
		"\2\u0e52\u0e51\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e55\3\2\2\2\u0e54\u0e56"+
		"\5\u022c\u0117\2\u0e55\u0e54\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e55\3"+
		"\2\2\2\u0e57\u0e58\3\2\2\2\u0e58\u022b\3\2\2\2\u0e59\u0e5a\7\u01c9\2\2"+
		"\u0e5a\u022d\3\2\2\2\u0e5b\u0e5d\t\r\2\2\u0e5c\u0e5e\7\u00e3\2\2\u0e5d"+
		"\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e60\3\2\2\2\u0e5f\u0e61\7\u00de"+
		"\2\2\u0e60\u0e5f\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63\3\2\2\2\u0e62"+
		"\u0e64\5\u0230\u0119\2\u0e63\u0e62\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e63"+
		"\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u022f\3\2\2\2\u0e67\u0e68\5\u0338\u019d"+
		"\2\u0e68\u0231\3\2\2\2\u0e69\u0e6b\5\u0234\u011b\2\u0e6a\u0e6c\7\u0188"+
		"\2\2\u0e6b\u0e6a\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e7a\3\2\2\2\u0e6d"+
		"\u0e6e\5\u0236\u011c\2\u0e6e\u0e6f\7\u0189\2\2\u0e6f\u0e71\5\u0238\u011d"+
		"\2\u0e70\u0e72\7\u0188\2\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72"+
		"\u0e73\3\2\2\2\u0e73\u0e75\7x\2\2\u0e74\u0e76\7\u010b\2\2\u0e75\u0e74"+
		"\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e78\5\u02b4\u015b"+
		"\2\u0e78\u0e7a\3\2\2\2\u0e79\u0e69\3\2\2\2\u0e79\u0e6d\3\2\2\2\u0e7a\u0233"+
		"\3\2\2\2\u0e7b\u0e7c\t\n\2\2\u0e7c\u0235\3\2\2\2\u0e7d\u0e7e\t\n\2\2\u0e7e"+
		"\u0237\3\2\2\2\u0e7f\u0e80\t\n\2\2\u0e80\u0239\3\2\2\2\u0e81\u0e83\5\u020a"+
		"\u0106\2\u0e82\u0e84\5\u0294\u014b\2\u0e83\u0e82\3\2\2\2\u0e83\u0e84\3"+
		"\2\2\2\u0e84\u0e88\3\2\2\2\u0e85\u0e87\5\u023c\u011f\2\u0e86\u0e85\3\2"+
		"\2\2\u0e87\u0e8a\3\2\2\2\u0e88\u0e86\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89"+
		"\u0e8b\3\2\2\2\u0e8a\u0e88\3\2\2\2\u0e8b\u0e8f\7\u01c3\2\2\u0e8c\u0e8e"+
		"\5T+\2\u0e8d\u0e8c\3\2\2\2\u0e8e\u0e91\3\2\2\2\u0e8f\u0e8d\3\2\2\2\u0e8f"+
		"\u0e90\3\2\2\2\u0e90\u023b\3\2\2\2\u0e91\u0e8f\3\2\2\2\u0e92\u0e9e\5\u024e"+
		"\u0128\2\u0e93\u0e9e\5\u024c\u0127\2\u0e94\u0e9e\5\u024a\u0126\2\u0e95"+
		"\u0e9e\5\u0248\u0125\2\u0e96\u0e9e\5\u0212\u010a\2\u0e97\u0e9e\5\u0246"+
		"\u0124\2\u0e98\u0e9e\5\u0244\u0123\2\u0e99\u0e9e\5\u0210\u0109\2\u0e9a"+
		"\u0e9e\5\u028e\u0148\2\u0e9b\u0e9e\5\u0250\u0129\2\u0e9c\u0e9e\5\u023e"+
		"\u0120\2\u0e9d\u0e92\3\2\2\2\u0e9d\u0e93\3\2\2\2\u0e9d\u0e94\3\2\2\2\u0e9d"+
		"\u0e95\3\2\2\2\u0e9d\u0e96\3\2\2\2\u0e9d\u0e97\3\2\2\2\u0e9d\u0e98\3\2"+
		"\2\2\u0e9d\u0e99\3\2\2\2\u0e9d\u0e9a\3\2\2\2\u0e9d\u0e9b\3\2\2\2\u0e9d"+
		"\u0e9c\3\2\2\2\u0e9e\u023d\3\2\2\2\u0e9f\u0ea3\5\u0242\u0122\2\u0ea0\u0ea3"+
		"\5\u0252\u012a\2\u0ea1\u0ea3\5\u0240\u0121\2\u0ea2\u0e9f\3\2\2\2\u0ea2"+
		"\u0ea0\3\2\2\2\u0ea2\u0ea1\3\2\2\2\u0ea3\u023f\3\2\2\2\u0ea4\u0ea6\7\u019b"+
		"\2\2\u0ea5\u0ea7\7\u00de\2\2\u0ea6\u0ea5\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7"+
		"\u0ea8\3\2\2\2\u0ea8\u0ea9\5\u0226\u0114\2\u0ea9\u0241\3\2\2\2\u0eaa\u0eac"+
		"\7\u0166\2\2\u0eab\u0ead\7\u00de\2\2\u0eac\u0eab\3\2\2\2\u0eac\u0ead\3"+
		"\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eaf\5\u025a\u012e\2\u0eaf\u0243\3\2"+
		"\2\2\u0eb0\u0eb2\7\u00c7\2\2\u0eb1\u0eb3\7\u00d4\2\2\u0eb2\u0eb1\3\2\2"+
		"\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0245\3\2\2\2\u0eb4\u0eb6\7C\2\2\u0eb5\u0eb7"+
		"\7\u0103\2\2\u0eb6\u0eb5\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eb9\3\2\2"+
		"\2\u0eb8\u0eba\7\u00de\2\2\u0eb9\u0eb8\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba"+
		"\u0ebb\3\2\2\2\u0ebb\u0ebc\5\u025c\u012f\2\u0ebc\u0247\3\2\2\2\u0ebd\u0ebf"+
		"\7\u0198\2\2\u0ebe\u0ec0\7\u00de\2\2\u0ebf\u0ebe\3\2\2\2\u0ebf\u0ec0\3"+
		"\2\2\2\u0ec0\u0ec2\3\2\2\2\u0ec1\u0ebd\3\2\2\2\u0ec1\u0ec2\3\2\2\2\u0ec2"+
		"\u0ec3\3\2\2\2\u0ec3\u0ec4\7~\2\2\u0ec4\u0249\3\2\2\2\u0ec5\u0ec7\7\u018d"+
		"\2\2\u0ec6\u0ec8\7\u00de\2\2\u0ec7\u0ec6\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8"+
		"\u0ec9\3\2\2\2\u0ec9\u0eca\5\u025e\u0130\2\u0eca\u024b\3\2\2\2\u0ecb\u0ecc"+
		"\7\u0100\2\2\u0ecc\u0ece\7\u00c7\2\2\u0ecd\u0ecf\7\u00de\2\2\u0ece\u0ecd"+
		"\3\2\2\2\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed0\3\2\2\2\u0ed0\u0ed1\5\u0270\u0139"+
		"\2\u0ed1\u024d\3\2\2\2\u0ed2\u0ed4\7\u00ec\2\2\u0ed3\u0ed5\7\u0103\2\2"+
		"\u0ed4\u0ed3\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed7\3\2\2\2\u0ed6\u0ed8"+
		"\7\u00de\2\2\u0ed7\u0ed6\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u0ed9\3\2\2"+
		"\2\u0ed9\u0eda\5\u0272\u013a\2\u0eda\u024f\3\2\2\2\u0edb\u0edd\7\u0161"+
		"\2\2\u0edc\u0ede\7\u00de\2\2\u0edd\u0edc\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede"+
		"\u0ee0\3\2\2\2\u0edf\u0edb\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0ee1\3\2"+
		"\2\2\u0ee1\u0ee6\t \2\2\u0ee2\u0ee4\7\u015d\2\2\u0ee3\u0ee5\7;\2\2\u0ee4"+
		"\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee7\3\2\2\2\u0ee6\u0ee2\3\2"+
		"\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0251\3\2\2\2\u0ee8\u0eea\7\u0174\2\2\u0ee9"+
		"\u0eeb\5\u0258\u012d\2\u0eea\u0ee9\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eea"+
		"\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eef\3\2\2\2\u0eee\u0ef0\7\u0197\2"+
		"\2\u0eef\u0eee\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef4\3\2\2\2\u0ef1\u0ef3"+
		"\5\u0256\u012c\2\u0ef2\u0ef1\3\2\2\2\u0ef3\u0ef6\3\2\2\2\u0ef4\u0ef2\3"+
		"\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0ef8\3\2\2\2\u0ef6\u0ef4\3\2\2\2\u0ef7"+
		"\u0ee8\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0ef7\3\2\2\2\u0ef9\u0efa\3\2"+
		"\2\2\u0efa\u0f00\3\2\2\2\u0efb\u0efd\7\u0147\2\2\u0efc\u0efe\7\u010b\2"+
		"\2\u0efd\u0efc\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f01"+
		"\5\u0254\u012b\2\u0f00\u0efb\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0253\3"+
		"\2\2\2\u0f02\u0f03\t!\2\2\u0f03\u0255\3\2\2\2\u0f04\u0f05\7\u01c9\2\2"+
		"\u0f05\u0257\3\2\2\2\u0f06\u0f07\7\u01c9\2\2\u0f07\u0259\3\2\2\2\u0f08"+
		"\u0f09\5\u0338\u019d\2\u0f09\u025b\3\2\2\2\u0f0a\u0f0b\t\n\2\2\u0f0b\u025d"+
		"\3\2\2\2\u0f0c\u0f14\5\u026a\u0136\2\u0f0d\u0f14\5\u026c\u0137\2\u0f0e"+
		"\u0f14\5\u0266\u0134\2\u0f0f\u0f14\5\u0264\u0133\2\u0f10\u0f14\5\u0268"+
		"\u0135\2\u0f11\u0f14\5\u0260\u0131\2\u0f12\u0f14\5\u0262\u0132\2\u0f13"+
		"\u0f0c\3\2\2\2\u0f13\u0f0d\3\2\2\2\u0f13\u0f0e\3\2\2\2\u0f13\u0f0f\3\2"+
		"\2\2\u0f13\u0f10\3\2\2\2\u0f13\u0f11\3\2\2\2\u0f13\u0f12\3\2\2\2\u0f14"+
		"\u025f\3\2\2\2\u0f15\u0f16\7\u0118\2\2\u0f16\u0f19\7\u00bc\2\2\u0f17\u0f19"+
		"\7\u011c\2\2\u0f18\u0f15\3\2\2\2\u0f18\u0f17\3\2\2\2\u0f19\u0261\3\2\2"+
		"\2\u0f1a\u0f1b\7\u0141\2\2\u0f1b\u0f1e\7\u00bc\2\2\u0f1c\u0f1e\7\u014d"+
		"\2\2\u0f1d\u0f1a\3\2\2\2\u0f1d\u0f1c\3\2\2\2\u0f1e\u0263\3\2\2\2\u0f1f"+
		"\u0f20\t\"\2\2\u0f20\u0265\3\2\2\2\u0f21\u0f22\7\\\2\2\u0f22\u0f25\7\u00c8"+
		"\2\2\u0f23\u0f25\7:\2\2\u0f24\u0f21\3\2\2\2\u0f24\u0f23\3\2\2\2\u0f25"+
		"\u0f26\3\2\2\2\u0f26\u0f27\5\u026e\u0138\2\u0f27\u0267\3\2\2\2\u0f28\u0f29"+
		"\7\\\2\2\u0f29\u0f2c\7\u00bc\2\2\u0f2a\u0f2c\79\2\2\u0f2b\u0f28\3\2\2"+
		"\2\u0f2b\u0f2a\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u0f2e\5\u026e\u0138\2"+
		"\u0f2e\u0269\3\2\2\2\u0f2f\u0f30\7\u0141\2\2\u0f30\u0f33\7\u00c8\2\2\u0f31"+
		"\u0f33\7\u014e\2\2\u0f32\u0f2f\3\2\2\2\u0f32\u0f31\3\2\2\2\u0f33\u026b"+
		"\3\2\2\2\u0f34\u0f35\7\u0118\2\2\u0f35\u0f38\7\u00c8\2\2\u0f36\u0f38\7"+
		"\u011d\2\2\u0f37\u0f34\3\2\2\2\u0f37\u0f36\3\2\2\2\u0f38\u026d\3\2\2\2"+
		"\u0f39\u0f3a\t!\2\2\u0f3a\u026f\3\2\2\2\u0f3b\u0f41\5\u0274\u013b\2\u0f3c"+
		"\u0f3d\7\u011e\2\2\u0f3d\u0f41\5\u0274\u013b\2\u0f3e\u0f3f\7\u0100\2\2"+
		"\u0f3f\u0f41\7\u0118\2\2\u0f40\u0f3b\3\2\2\2\u0f40\u0f3c\3\2\2\2\u0f40"+
		"\u0f3e\3\2\2\2\u0f41\u0271\3\2\2\2\u0f42\u0f48\5\u0274\u013b\2\u0f43\u0f45"+
		"\7\u010b\2\2\u0f44\u0f43\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0f46\3\2\2"+
		"\2\u0f46\u0f47\7\u0100\2\2\u0f47\u0f49\7\u0118\2\2\u0f48\u0f44\3\2\2\2"+
		"\u0f48\u0f49\3\2\2\2\u0f49\u0f4d\3\2\2\2\u0f4a\u0f4b\7\u011e\2\2\u0f4b"+
		"\u0f4d\5\u0274\u013b\2\u0f4c\u0f42\3\2\2\2\u0f4c\u0f4a\3\2\2\2\u0f4d\u0273"+
		"\3\2\2\2\u0f4e\u0f4f\t\n\2\2\u0f4f\u0275\3\2\2\2\u0f50\u0f55\5\u0206\u0104"+
		"\2\u0f51\u0f55\5\u027c\u013f\2\u0f52\u0f55\5\u027a\u013e\2\u0f53\u0f55"+
		"\5\u0278\u013d\2\u0f54\u0f50\3\2\2\2\u0f54\u0f51\3\2\2\2\u0f54\u0f52\3"+
		"\2\2\2\u0f54\u0f53\3\2\2\2\u0f55\u0277\3\2\2\2\u0f56\u0f5f\7\u0118\2\2"+
		"\u0f57\u0f59\7\u00e9\2\2\u0f58\u0f5a\7\u00de\2\2\u0f59\u0f58\3\2\2\2\u0f59"+
		"\u0f5a\3\2\2\2\u0f5a\u0f60\3\2\2\2\u0f5b\u0f5d\7\u00ea\2\2\u0f5c\u0f5e"+
		"\7\30\2\2\u0f5d\u0f5c\3\2\2\2\u0f5d\u0f5e\3\2\2\2\u0f5e\u0f60\3\2\2\2"+
		"\u0f5f\u0f57\3\2\2\2\u0f5f\u0f5b\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f61"+
		"\3\2\2\2\u0f61\u0f63\5\u0286\u0144\2\u0f62\u0f64\t\t\2\2\u0f63\u0f62\3"+
		"\2\2\2\u0f63\u0f64\3\2\2\2\u0f64\u0f67\3\2\2\2\u0f65\u0f66\7\u00c8\2\2"+
		"\u0f66\u0f68\5\u0284\u0143\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68"+
		"\u0f6c\3\2\2\2\u0f69\u0f6a\7\u00b8\2\2\u0f6a\u0f6b\7{\2\2\u0f6b\u0f6d"+
		"\5\u0282\u0142\2\u0f6c\u0f69\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d\u0f71\3"+
		"\2\2\2\u0f6e\u0f6f\7\u00e5\2\2\u0f6f\u0f70\7{\2\2\u0f70\u0f72\5\u0280"+
		"\u0141\2\u0f71\u0f6e\3\2\2\2\u0f71\u0f72\3\2\2\2\u0f72\u0f75\3\2\2\2\u0f73"+
		"\u0f74\7\u00bc\2\2\u0f74\u0f76\5\u027e\u0140\2\u0f75\u0f73\3\2\2\2\u0f75"+
		"\u0f76\3\2\2\2\u0f76\u0279\3\2\2\2\u0f77\u0f79\7\\\2\2\u0f78\u0f7a\7\u00de"+
		"\2\2\u0f79\u0f78\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a\u0f80\3\2\2\2\u0f7b"+
		"\u0f7d\7]\2\2\u0f7c\u0f7e\7\30\2\2\u0f7d\u0f7c\3\2\2\2\u0f7d\u0f7e\3\2"+
		"\2\2\u0f7e\u0f80\3\2\2\2\u0f7f\u0f77\3\2\2\2\u0f7f\u0f7b\3\2\2\2\u0f80"+
		"\u0f8d\3\2\2\2\u0f81\u0f83\5\u0288\u0145\2\u0f82\u0f81\3\2\2\2\u0f83\u0f84"+
		"\3\2\2\2\u0f84\u0f82\3\2\2\2\u0f84\u0f85\3\2\2\2\u0f85\u0f8e\3\2\2\2\u0f86"+
		"\u0f8a\7\u00b7\2\2\u0f87\u0f89\5\u0288\u0145\2\u0f88\u0f87\3\2\2\2\u0f89"+
		"\u0f8c\3\2\2\2\u0f8a\u0f88\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8e\3\2"+
		"\2\2\u0f8c\u0f8a\3\2\2\2\u0f8d\u0f82\3\2\2\2\u0f8d\u0f86\3\2\2\2\u0f8e"+
		"\u027b\3\2\2\2\u0f8f\u0f90\7@\2\2\u0f90\u0f91\7\3\2\2\u0f91\u027d\3\2"+
		"\2\2\u0f92\u0f93\t\n\2\2\u0f93\u027f\3\2\2\2\u0f94\u0f95\t\n\2\2\u0f95"+
		"\u0281\3\2\2\2\u0f96\u0f97\t\n\2\2\u0f97\u0283\3\2\2\2\u0f98\u0f99\t\n"+
		"\2\2\u0f99\u0285\3\2\2\2\u0f9a\u0f9b\t\n\2\2\u0f9b\u0287\3\2\2\2\u0f9c"+
		"\u0f9d\5\u0338\u019d\2\u0f9d\u0289\3\2\2\2\u0f9e\u0fa0\7\u0198\2\2\u0f9f"+
		"\u0fa1\7\u00de\2\2\u0fa0\u0f9f\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa3"+
		"\3\2\2\2\u0fa2\u0f9e\3\2\2\2\u0fa2\u0fa3\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4"+
		"\u0fa5\5\u028c\u0147\2\u0fa5\u028b\3\2\2\2\u0fa6\u0fce\7)\2\2\u0fa7\u0fa9"+
		"\7*\2\2\u0fa8\u0faa\t#\2\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa"+
		"\u0fce\3\2\2\2\u0fab\u0fad\7-\2\2\u0fac\u0fae\t#\2\2\u0fad\u0fac\3\2\2"+
		"\2\u0fad\u0fae\3\2\2\2\u0fae\u0fce\3\2\2\2\u0faf\u0fb1\7,\2\2\u0fb0\u0fb2"+
		"\t#\2\2\u0fb1\u0fb0\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fce\3\2\2\2\u0fb3"+
		"\u0fb5\7+\2\2\u0fb4\u0fb6\t#\2\2\u0fb5\u0fb4\3\2\2\2\u0fb5\u0fb6\3\2\2"+
		"\2\u0fb6\u0fce\3\2\2\2\u0fb7\u0fce\7G\2\2\u0fb8\u0fce\7H\2\2\u0fb9\u0fce"+
		"\7I\2\2\u0fba\u0fce\7J\2\2\u0fbb\u0fce\7K\2\2\u0fbc\u0fce\7L\2\2\u0fbd"+
		"\u0fce\7M\2\2\u0fbe\u0fce\7F\2\2\u0fbf\u0fce\7O\2\2\u0fc0\u0fce\7P\2\2"+
		"\u0fc1\u0fce\7Q\2\2\u0fc2\u0fce\7R\2\2\u0fc3\u0fce\7S\2\2\u0fc4\u0fce"+
		"\7T\2\2\u0fc5\u0fce\7~\2\2\u0fc6\u0fce\7\u00bb\2\2\u0fc7\u0fce\7\u00ba"+
		"\2\2\u0fc8\u0fce\7\u00b9\2\2\u0fc9\u0fce\7\u00d2\2\2\u0fca\u0fce\7\u0116"+
		"\2\2\u0fcb\u0fce\7\u011f\2\2\u0fcc\u0fce\7\u0120\2\2\u0fcd\u0fa6\3\2\2"+
		"\2\u0fcd\u0fa7\3\2\2\2\u0fcd\u0fab\3\2\2\2\u0fcd\u0faf\3\2\2\2\u0fcd\u0fb3"+
		"\3\2\2\2\u0fcd\u0fb7\3\2\2\2\u0fcd\u0fb8\3\2\2\2\u0fcd\u0fb9\3\2\2\2\u0fcd"+
		"\u0fba\3\2\2\2\u0fcd\u0fbb\3\2\2\2\u0fcd\u0fbc\3\2\2\2\u0fcd\u0fbd\3\2"+
		"\2\2\u0fcd\u0fbe\3\2\2\2\u0fcd\u0fbf\3\2\2\2\u0fcd\u0fc0\3\2\2\2\u0fcd"+
		"\u0fc1\3\2\2\2\u0fcd\u0fc2\3\2\2\2\u0fcd\u0fc3\3\2\2\2\u0fcd\u0fc4\3\2"+
		"\2\2\u0fcd\u0fc5\3\2\2\2\u0fcd\u0fc6\3\2\2\2\u0fcd\u0fc7\3\2\2\2\u0fcd"+
		"\u0fc8\3\2\2\2\u0fcd\u0fc9\3\2\2\2\u0fcd\u0fca\3\2\2\2\u0fcd\u0fcb\3\2"+
		"\2\2\u0fcd\u0fcc\3\2\2\2\u0fce\u028d\3\2\2\2\u0fcf\u0fd1\t$\2\2\u0fd0"+
		"\u0fd2\t%\2\2\u0fd1\u0fd0\3\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2\u0fd3\3\2"+
		"\2\2\u0fd3\u0fd4\5\u0290\u0149\2\u0fd4\u028f\3\2\2\2\u0fd5\u0fd6\7\u01d1"+
		"\2\2\u0fd6\u0291\3\2\2\2\u0fd7\u0fd8\7\u01c9\2\2\u0fd8\u0293\3\2\2\2\u0fd9"+
		"\u0fda\7\u01c9\2\2\u0fda\u0295\3\2\2\2\u0fdb\u0fde\5\u02b0\u0159\2\u0fdc"+
		"\u0fde\5\u02a6\u0154\2\u0fdd\u0fdb\3\2\2\2\u0fdd\u0fdc\3\2\2\2\u0fde\u0297"+
		"\3\2\2\2\u0fdf\u0fe1\7\u0141\2\2\u0fe0\u0fe2\7\u00de\2\2\u0fe1\u0fe0\3"+
		"\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u0fe8\3\2\2\2\u0fe3\u0fe5\7\u0143\2\2"+
		"\u0fe4\u0fe6\7\30\2\2\u0fe5\u0fe4\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe8"+
		"\3\2\2\2\u0fe7\u0fdf\3\2\2\2\u0fe7\u0fe3\3\2\2\2\u0fe8\u0fea\3\2\2\2\u0fe9"+
		"\u0feb\5\u029a\u014e\2\u0fea\u0fe9\3\2\2\2\u0feb\u0fec\3\2\2\2\u0fec\u0fea"+
		"\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0299\3\2\2\2\u0fee\u0fef\7\u01c9\2"+
		"\2\u0fef\u029b\3\2\2\2\u0ff0\u0ff2\7\u00eb\2\2\u0ff1\u0ff3\7\u00de\2\2"+
		"\u0ff2\u0ff1\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff6"+
		"\5\u02a4\u0153\2\u0ff5\u0ff7\7\u00ed\2\2\u0ff6\u0ff5\3\2\2\2\u0ff6\u0ff7"+
		"\3\2\2\2\u0ff7\u1000\3\2\2\2\u0ff8\u0ffa\7\u01a1\2\2\u0ff9\u0ff8\3\2\2"+
		"\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb\u0ffd\7\u00bc\2\2\u0ffc"+
		"\u0ffe\7!\2\2\u0ffd\u0ffc\3\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u0fff\3\2"+
		"\2\2\u0fff\u1001\5\u02a2\u0152\2\u1000\u0ff9\3\2\2\2\u1000\u1001\3\2\2"+
		"\2\u1001\u100a\3\2\2\2\u1002\u1004\7\u00ed\2\2\u1003\u1002\3\2\2\2\u1003"+
		"\u1004\3\2\2\2\u1004\u1006\3\2\2\2\u1005\u1007\7!\2\2\u1006\u1005\3\2"+
		"\2\2\u1006\u1007\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u1009\7\u018a\2\2\u1009"+
		"\u100b\5\u02a0\u0151\2\u100a\u1003\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u1014"+
		"\3\2\2\2\u100c\u100e\7\u00ed\2\2\u100d\u100c\3\2\2\2\u100d\u100e\3\2\2"+
		"\2\u100e\u1010\3\2\2\2\u100f\u1011\7!\2\2\u1010\u100f\3\2\2\2\u1010\u1011"+
		"\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u1013\7\63\2\2\u1013\u1015\5\u029e"+
		"\u0150\2\u1014\u100d\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u029d\3\2\2\2\u1016"+
		"\u1019\t\n\2\2\u1017\u1019\5\u03d8\u01ed\2\u1018\u1016\3\2\2\2\u1018\u1017"+
		"\3\2\2\2\u1019\u029f\3\2\2\2\u101a\u101d\t\n\2\2\u101b\u101d\5\u03d8\u01ed"+
		"\2\u101c\u101a\3\2\2\2\u101c\u101b\3\2\2\2\u101d\u02a1\3\2\2\2\u101e\u1021"+
		"\t\n\2\2\u101f\u1021\5\u03d8\u01ed\2\u1020\u101e\3\2\2\2\u1020\u101f\3"+
		"\2\2\2\u1021\u02a3\3\2\2\2\u1022\u1025\t\n\2\2\u1023\u1025\5\u03d8\u01ed"+
		"\2\u1024\u1022\3\2\2\2\u1024\u1023\3\2\2\2\u1025\u02a5\3\2\2\2\u1026\u102f"+
		"\7h\2\2\u1027\u1029\7\u0135\2\2\u1028\u102a\7\30\2\2\u1029\u1028\3\2\2"+
		"\2\u1029\u102a\3\2\2\2\u102a\u1030\3\2\2\2\u102b\u102d\7\u0134\2\2\u102c"+
		"\u102e\7\u00de\2\2\u102d\u102c\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u1030"+
		"\3\2\2\2\u102f\u1027\3\2\2\2\u102f\u102b\3\2\2\2\u1030\u1032\3\2\2\2\u1031"+
		"\u1033\5\u02a8\u0155\2\u1032\u1031\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u1032"+
		"\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u02a7\3\2\2\2\u1036\u1037\7\u01c9\2"+
		"\2\u1037\u02a9\3\2\2\2\u1038\u1039\7\u019b\2\2\u1039\u103a\7\u0108\2\2"+
		"\u103a\u103c\t&\2\2\u103b\u103d\7\u00de\2\2\u103c\u103b\3\2\2\2\u103c"+
		"\u103d\3\2\2\2\u103d\u103e\3\2\2\2\u103e\u103f\5\u02ac\u0157\2\u103f\u02ab"+
		"\3\2\2\2\u1040\u1043\7\3\2\2\u1041\u1043\5\u0338\u019d\2\u1042\u1040\3"+
		"\2\2\2\u1042\u1041\3\2\2\2\u1043\u02ad\3\2\2\2\u1044\u104d\7\u00e4\2\2"+
		"\u1045\u1047\7\u0135\2\2\u1046\u1048\7\30\2\2\u1047\u1046\3\2\2\2\u1047"+
		"\u1048\3\2\2\2\u1048\u104e\3\2\2\2\u1049\u104b\7\u0134\2\2\u104a\u104c"+
		"\7\u00de\2\2\u104b\u104a\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104e\3\2\2"+
		"\2\u104d\u1045\3\2\2\2\u104d\u1049\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1050"+
		"\t\'\2\2\u1050\u02af\3\2\2\2\u1051\u1052\7\u0134\2\2\u1052\u1053\5\u02b2"+
		"\u015a\2\u1053\u02b1\3\2\2\2\u1054\u1056\7W\2\2\u1055\u1054\3\2\2\2\u1055"+
		"\u1056\3\2\2\2\u1056\u105a\3\2\2\2\u1057\u1058\5\u02b6\u015c\2\u1058\u1059"+
		"\7\u0189\2\2\u1059\u105b\3\2\2\2\u105a\u1057\3\2\2\2\u105a\u105b\3\2\2"+
		"\2\u105b\u105c\3\2\2\2\u105c\u105e\5\u02b8\u015d\2\u105d\u105f\7<\2\2"+
		"\u105e\u105d\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u107f\3\2\2\2\u1060\u1062"+
		"\7\u00de\2\2\u1061\u1060\3\2\2\2\u1061\u1062\3\2\2\2\u1062\u1063\3\2\2"+
		"\2\u1063\u1065\7\u019d\2\2\u1064\u1066\7\u00d1\2\2\u1065\u1064\3\2\2\2"+
		"\u1065\u1066\3\2\2\2\u1066\u1068\3\2\2\2\u1067\u1069\7\u0163\2\2\u1068"+
		"\u1067\3\2\2\2\u1068\u1069\3\2\2\2\u1069\u106e\3\2\2\2\u106a\u106c\7\u00bf"+
		"\2\2\u106b\u106a\3\2\2\2\u106b\u106c\3\2\2\2\u106c\u106d\3\2\2\2\u106d"+
		"\u106f\5\u02b6\u015c\2\u106e\u106b\3\2\2\2\u106e\u106f\3\2\2\2\u106f\u1072"+
		"\3\2\2\2\u1070\u1071\7\u0189\2\2\u1071\u1073\5\u02b8\u015d\2\u1072\u1070"+
		"\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u1075\3\2\2\2\u1074\u1076\7<\2\2\u1075"+
		"\u1074\3\2\2\2\u1075\u1076\3\2\2\2\u1076\u107c\3\2\2\2\u1077\u1079\7x"+
		"\2\2\u1078\u107a\7\u010b\2\2\u1079\u1078\3\2\2\2\u1079\u107a\3\2\2\2\u107a"+
		"\u107b\3\2\2\2\u107b\u107d\5\u02b4\u015b\2\u107c\u1077\3\2\2\2\u107c\u107d"+
		"\3\2\2\2\u107d\u107f\3\2\2\2\u107e\u1055\3\2\2\2\u107e\u1061\3\2\2\2\u107f"+
		"\u02b3\3\2\2\2\u1080\u1081\5\u0338\u019d\2\u1081\u02b5\3\2\2\2\u1082\u1083"+
		"\t\n\2\2\u1083\u02b7\3\2\2\2\u1084\u1085\t\n\2\2\u1085\u02b9\3\2\2\2\u1086"+
		"\u1089\5\u020a\u0106\2\u1087\u108a\5\u0294\u014b\2\u1088\u108a\7\u00b5"+
		"\2\2\u1089\u1087\3\2\2\2\u1089\u1088\3\2\2\2\u1089\u108a\3\2\2\2\u108a"+
		"\u108e\3\2\2\2\u108b\u108d\5\u02bc\u015f\2\u108c\u108b\3\2\2\2\u108d\u1090"+
		"\3\2\2\2\u108e\u108c\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u1091\3\2\2\2\u1090"+
		"\u108e\3\2\2\2\u1091\u1095\7\u01c3\2\2\u1092\u1094\5T+\2\u1093\u1092\3"+
		"\2\2\2\u1094\u1097\3\2\2\2\u1095\u1093\3\2\2\2\u1095\u1096\3\2\2\2\u1096"+
		"\u02bb\3\2\2\2\u1097\u1095\3\2\2\2\u1098\u10ae\5\u02e2\u0172\2\u1099\u10ae"+
		"\5\u02e0\u0171\2\u109a\u10ae\5\u02de\u0170\2\u109b\u10ae\5\u02dc\u016f"+
		"\2\u109c\u10ae\5\u02da\u016e\2\u109d\u10ae\5\u02d8\u016d\2\u109e\u10ae"+
		"\5\u0248\u0125\2\u109f\u10ae\5\u0250\u0129\2\u10a0\u10ae\5\u02d6\u016c"+
		"\2\u10a1\u10ae\5\u02d4\u016b\2\u10a2\u10ae\5\u02d2\u016a\2\u10a3\u10ae"+
		"\5\u02d0\u0169\2\u10a4\u10ae\5\u02be\u0160\2\u10a5\u10ae\5\u02ca\u0166"+
		"\2\u10a6\u10ae\5\u02c8\u0165\2\u10a7\u10ae\5\u02c6\u0164\2\u10a8\u10ae"+
		"\5\u02c4\u0163\2\u10a9\u10ae\5\u02c2\u0162\2\u10aa\u10ae\5\u0212\u010a"+
		"\2\u10ab\u10ae\5\u0210\u0109\2\u10ac\u10ae\5\u02c0\u0161\2\u10ad\u1098"+
		"\3\2\2\2\u10ad\u1099\3\2\2\2\u10ad\u109a\3\2\2\2\u10ad\u109b\3\2\2\2\u10ad"+
		"\u109c\3\2\2\2\u10ad\u109d\3\2\2\2\u10ad\u109e\3\2\2\2\u10ad\u109f\3\2"+
		"\2\2\u10ad\u10a0\3\2\2\2\u10ad\u10a1\3\2\2\2\u10ad\u10a2\3\2\2\2\u10ad"+
		"\u10a3\3\2\2\2\u10ad\u10a4\3\2\2\2\u10ad\u10a5\3\2\2\2\u10ad\u10a6\3\2"+
		"\2\2\u10ad\u10a7\3\2\2\2\u10ad\u10a8\3\2\2\2\u10ad\u10a9\3\2\2\2\u10ad"+
		"\u10aa\3\2\2\2\u10ad\u10ab\3\2\2\2\u10ad\u10ac\3\2\2\2\u10ae\u02bd\3\2"+
		"\2\2\u10af\u10b2\5\u02ce\u0168\2\u10b0\u10b2\5\u02cc\u0167\2\u10b1\u10af"+
		"\3\2\2\2\u10b1\u10b0\3\2\2\2\u10b2\u02bf\3\2\2\2\u10b3\u10ba\5\u028e\u0148"+
		"\2\u10b4\u10bb\5\u02e4\u0173\2\u10b5\u10b7\5\u02e6\u0174\2\u10b6\u10b8"+
		"\5\u02e8\u0175\2\u10b7\u10b6\3\2\2\2\u10b7\u10b8\3\2\2\2\u10b8\u10bb\3"+
		"\2\2\2\u10b9\u10bb\5\u02e8\u0175\2\u10ba\u10b4\3\2\2\2\u10ba\u10b5\3\2"+
		"\2\2\u10ba\u10b9\3\2\2\2\u10bb\u02c1\3\2\2\2\u10bc\u10be\7\u019b\2\2\u10bd"+
		"\u10bf\7\u00de\2\2\u10be\u10bd\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c0"+
		"\3\2\2\2\u10c0\u10c1\5\u02ea\u0176\2\u10c1\u02c3\3\2\2\2\u10c2\u10c4\7"+
		"C\2\2\u10c3\u10c5\7\u0103\2\2\u10c4\u10c3\3\2\2\2\u10c4\u10c5\3\2\2\2"+
		"\u10c5\u10c7\3\2\2\2\u10c6\u10c8\7\u00de\2\2\u10c7\u10c6\3\2\2\2\u10c7"+
		"\u10c8\3\2\2\2\u10c8\u10ca\3\2\2\2\u10c9\u10cb\7\u011e\2\2\u10ca\u10c9"+
		"\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10cd\5\u02ec\u0177"+
		"\2\u10cd\u02c5\3\2\2\2\u10ce\u10d0\7\u00ec\2\2\u10cf\u10d1\7\u0103\2\2"+
		"\u10d0\u10cf\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d3\3\2\2\2\u10d2\u10d4"+
		"\7\u00de\2\2\u10d3\u10d2\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4\u10d6\3\2\2"+
		"\2\u10d5\u10d7\7\u011e\2\2\u10d6\u10d5\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7"+
		"\u10d8\3\2\2\2\u10d8\u10d9\5\u02ec\u0177\2\u10d9\u02c7\3\2\2\2\u10da\u10db"+
		"\7\u018e\2\2\u10db\u02c9\3\2\2\2\u10dc\u10dd\7\u014a\2\2\u10dd\u02cb\3"+
		"\2\2\2\u10de\u10df\7\u00f2\2\2\u10df\u02cd\3\2\2\2\u10e0\u10e1\7\u00c9"+
		"\2\2\u10e1\u02cf\3\2\2\2\u10e2\u10e3\7\u00a5\2\2\u10e3\u10e4\t(\2\2\u10e4"+
		"\u02d1\3\2\2\2\u10e5\u10e6\7/\2\2\u10e6\u02d3\3\2\2\2\u10e7\u10e8\7(\2"+
		"\2\u10e8\u02d5\3\2\2\2\u10e9\u10ea\7\u00c0\2\2\u10ea\u02d7\3\2\2\2\u10eb"+
		"\u10ec\7\u0144\2\2\u10ec\u02d9\3\2\2\2\u10ed\u10ee\7\u0158\2\2\u10ee\u02db"+
		"\3\2\2\2\u10ef\u10f0\7#\2\2\u10f0\u02dd\3\2\2\2\u10f1\u10f3\7&\2\2\u10f2"+
		"\u10f4\7\u00de\2\2\u10f3\u10f2\3\2\2\2\u10f3\u10f4\3\2\2\2\u10f4\u10f5"+
		"\3\2\2\2\u10f5\u10f6\5\u02ee\u0178\2\u10f6\u02df\3\2\2\2\u10f7\u10f9\7"+
		"\u00be\2\2\u10f8\u10fa\7\u00de\2\2\u10f9\u10f8\3\2\2\2\u10f9\u10fa\3\2"+
		"\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fc\5\u02ee\u0178\2\u10fc\u02e1\3\2\2"+
		"\2\u10fd\u10fe\7.\2\2\u10fe\u10ff\t\31\2\2\u10ff\u02e3\3\2\2\2\u1100\u1101"+
		"\7\u019a\2\2\u1101\u1102\5\u03d8\u01ed\2\u1102\u02e5\3\2\2\2\u1103\u1106"+
		"\7\u00bf\2\2\u1104\u1107\5\u03d8\u01ed\2\u1105\u1107\5\u02ea\u0176\2\u1106"+
		"\u1104\3\2\2\2\u1106\u1105\3\2\2\2\u1107\u02e7\3\2\2\2\u1108\u1109\7\u0189"+
		"\2\2\u1109\u110a\5\u03d8\u01ed\2\u110a\u02e9\3\2\2\2\u110b\u110c\7\3\2"+
		"\2\u110c\u02eb\3\2\2\2\u110d\u1110\5\u03d8\u01ed\2\u110e\u1110\t\n\2\2"+
		"\u110f\u110d\3\2\2\2\u110f\u110e\3\2\2\2\u1110\u02ed\3\2\2\2\u1111\u1112"+
		"\t\n\2\2\u1112\u02ef\3\2\2\2\u1113\u1114\7\u012c\2\2\u1114\u1118\7\u01c3"+
		"\2\2\u1115\u1117\5T+\2\u1116\u1115\3\2\2\2\u1117\u111a\3\2\2\2\u1118\u1116"+
		"\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b\3\2\2\2\u111a\u1118\3\2\2\2\u111b"+
		"\u111d\5\u02f2\u017a\2\u111c\u111e\5\u02f4\u017b\2\u111d\u111c\3\2\2\2"+
		"\u111d\u111e\3\2\2\2\u111e\u1120\3\2\2\2\u111f\u1121\5\u02f6\u017c\2\u1120"+
		"\u111f\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1126\7\u01c3"+
		"\2\2\u1123\u1125\5T+\2\u1124\u1123\3\2\2\2\u1125\u1128\3\2\2\2\u1126\u1124"+
		"\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u02f1\3\2\2\2\u1128\u1126\3\2\2\2\u1129"+
		"\u112a\7\u01c9\2\2\u112a\u02f3\3\2\2\2\u112b\u112d\7\u00de\2\2\u112c\u112b"+
		"\3\2\2\2\u112c\u112d\3\2\2\2\u112d\u1136\3\2\2\2\u112e\u1130\7E\2\2\u112f"+
		"\u1131\7\u00d5\2\2\u1130\u112f\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u1137"+
		"\3\2\2\2\u1132\u1134\7\u00d5\2\2\u1133\u1135\7E\2\2\u1134\u1133\3\2\2"+
		"\2\u1134\u1135\3\2\2\2\u1135\u1137\3\2\2\2\u1136\u112e\3\2\2\2\u1136\u1132"+
		"\3\2\2\2\u1137\u1139\3\2\2\2\u1138\u113a\7\u012b\2\2\u1139\u1138\3\2\2"+
		"\2\u1139\u113a\3\2\2\2\u113a\u02f5\3\2\2\2\u113b\u113d\7\u01a1\2\2\u113c"+
		"\u113b\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u113f\7\u00ce"+
		"\2\2\u113f\u1140\5\u02f8\u017d\2\u1140\u02f7\3\2\2\2\u1141\u1142\7\3\2"+
		"\2\u1142\u02f9\3\2\2\2\u1143\u1144\7\u00db\2\2\u1144\u1148\7\u01c3\2\2"+
		"\u1145\u1147\5\24\13\2\u1146\u1145\3\2\2\2\u1147\u114a\3\2\2\2\u1148\u1146"+
		"\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114e\3\2\2\2\u114a\u1148\3\2\2\2\u114b"+
		"\u114d\5T+\2\u114c\u114b\3\2\2\2\u114d\u1150\3\2\2\2\u114e\u114c\3\2\2"+
		"\2\u114e\u114f\3\2\2\2\u114f\u02fb\3\2\2\2\u1150\u114e\3\2\2\2\u1151\u1152"+
		"\7k\2\2\u1152\u1156\7\u01c3\2\2\u1153\u1155\5\24\13\2\u1154\u1153\3\2"+
		"\2\2\u1155\u1158\3\2\2\2\u1156\u1154\3\2\2\2\u1156\u1157\3\2\2\2\u1157"+
		"\u115c\3\2\2\2\u1158\u1156\3\2\2\2\u1159\u115b\5T+\2\u115a\u1159\3\2\2"+
		"\2\u115b\u115e\3\2\2\2\u115c\u115a\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u02fd"+
		"\3\2\2\2\u115e\u115c\3\2\2\2\u115f\u1160\7j\2\2\u1160\u1164\7\u01c3\2"+
		"\2\u1161\u1163\5\24\13\2\u1162\u1161\3\2\2\2\u1163\u1166\3\2\2\2\u1164"+
		"\u1162\3\2\2\2\u1164\u1165\3\2\2\2\u1165\u116a\3\2\2\2\u1166\u1164\3\2"+
		"\2\2\u1167\u1169\5T+\2\u1168\u1167\3\2\2\2\u1169\u116c\3\2\2\2\u116a\u1168"+
		"\3\2\2\2\u116a\u116b\3\2\2\2\u116b\u02ff\3\2\2\2\u116c\u116a\3\2\2\2\u116d"+
		"\u116e\7\u0159\2\2\u116e\u1172\7\u01c3\2\2\u116f\u1171\5\24\13\2\u1170"+
		"\u116f\3\2\2\2\u1171\u1174\3\2\2\2\u1172\u1170\3\2\2\2\u1172\u1173\3\2"+
		"\2\2\u1173\u1178\3\2\2\2\u1174\u1172\3\2\2\2\u1175\u1177\5T+\2\u1176\u1175"+
		"\3\2\2\2\u1177\u117a\3\2\2\2\u1178\u1176\3\2\2\2\u1178\u1179\3\2\2\2\u1179"+
		"\u0301\3\2\2\2\u117a\u1178\3\2\2\2\u117b\u117c\7\u010e\2\2\u117c\u1180"+
		"\7\u01c3\2\2\u117d\u117f\5T+\2\u117e\u117d\3\2\2\2\u117f\u1182\3\2\2\2"+
		"\u1180\u117e\3\2\2\2\u1180\u1181\3\2\2\2\u1181\u1184\3\2\2\2\u1182\u1180"+
		"\3\2\2\2\u1183\u1185\5\u0304\u0183\2\u1184\u1183\3\2\2\2\u1184\u1185\3"+
		"\2\2\2\u1185\u0303\3\2\2\2\u1186\u1188\7\35\2\2\u1187\u1189\7\u00de\2"+
		"\2\u1188\u1187\3\2\2\2\u1188\u1189\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u118b"+
		"\t)\2\2\u118b\u118f\7\u01c3\2\2\u118c\u118e\5T+\2\u118d\u118c\3\2\2\2"+
		"\u118e\u1191\3\2\2\2\u118f\u118d\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u0305"+
		"\3\2\2\2\u1191\u118f\3\2\2\2\u1192\u1193\7U\2\2\u1193\u1194\7\u0157\2"+
		"\2\u1194\u1198\7\u01c3\2\2\u1195\u1197\5T+\2\u1196\u1195\3\2\2\2\u1197"+
		"\u119a\3\2\2\2\u1198\u1196\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119c\3\2"+
		"\2\2\u119a\u1198\3\2\2\2\u119b\u119d\5\u030a\u0186\2\u119c\u119b\3\2\2"+
		"\2\u119c\u119d\3\2\2\2\u119d\u119f\3\2\2\2\u119e\u11a0\5\u0310\u0189\2"+
		"\u119f\u119e\3\2\2\2\u119f\u11a0\3\2\2\2\u11a0\u11a2\3\2\2\2\u11a1\u11a3"+
		"\5\u0320\u0191\2\u11a2\u11a1\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u0307\3"+
		"\2\2\2\u11a4\u11a5\7\u00d9\2\2\u11a5\u11a6\7\u0157\2\2\u11a6\u11aa\7\u01c3"+
		"\2\2\u11a7\u11a9\5T+\2\u11a8\u11a7\3\2\2\2\u11a9\u11ac\3\2\2\2\u11aa\u11a8"+
		"\3\2\2\2\u11aa\u11ab\3\2\2\2\u11ab\u11ae\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ad"+
		"\u11af\5\u0364\u01b3\2\u11ae\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b1"+
		"\3\2\2\2\u11b0\u11b2\5\u039a\u01ce\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3"+
		"\2\2\2\u11b2\u0309\3\2\2\2\u11b3\u11b4\7\u0167\2\2\u11b4\u11b8\7\u01c3"+
		"\2\2\u11b5\u11b7\5T+\2\u11b6\u11b5\3\2\2\2\u11b7\u11ba\3\2\2\2\u11b8\u11b6"+
		"\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9\u11c6\3\2\2\2\u11ba\u11b8\3\2\2\2\u11bb"+
		"\u11bd\5\u030c\u0187\2\u11bc\u11be\5\u030e\u0188\2\u11bd\u11bc\3\2\2\2"+
		"\u11bd\u11be\3\2\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c3\7\u01c3\2\2\u11c0"+
		"\u11c2\5T+\2\u11c1\u11c0\3\2\2\2\u11c2\u11c5\3\2\2\2\u11c3\u11c1\3\2\2"+
		"\2\u11c3\u11c4\3\2\2\2\u11c4\u11c7\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c6\u11bb"+
		"\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u030b\3\2\2\2\u11c8\u11c9\t*\2\2\u11c9"+
		"\u030d\3\2\2\2\u11ca\u11cc\7\u01a1\2\2\u11cb\u11ca\3\2\2\2\u11cb\u11cc"+
		"\3\2\2\2\u11cc\u11cd\3\2\2\2\u11cd\u11ce\7o\2\2\u11ce\u11cf\7\u00f9\2"+
		"\2\u11cf\u030f\3\2\2\2\u11d0\u11d1\7\u0106\2\2\u11d1\u11d5\7\u01c3\2\2"+
		"\u11d2\u11d4\5T+\2\u11d3\u11d2\3\2\2\2\u11d4\u11d7\3\2\2\2\u11d5\u11d3"+
		"\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6\u11e9\3\2\2\2\u11d7\u11d5\3\2\2\2\u11d8"+
		"\u11da\5\u030c\u0187\2\u11d9\u11db\5\u0312\u018a\2\u11da\u11d9\3\2\2\2"+
		"\u11da\u11db\3\2\2\2\u11db\u11dd\3\2\2\2\u11dc\u11de\5\u0318\u018d\2\u11dd"+
		"\u11dc\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11e0\3\2\2\2\u11df\u11e1\5\u031c"+
		"\u018f\2\u11e0\u11df\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2"+
		"\u11e6\7\u01c3\2\2\u11e3\u11e5\5T+\2\u11e4\u11e3\3\2\2\2\u11e5\u11e8\3"+
		"\2\2\2\u11e6\u11e4\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u11ea\3\2\2\2\u11e8"+
		"\u11e6\3\2\2\2\u11e9\u11d8\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u0311\3\2"+
		"\2\2\u11eb\u11ed\7\u00f7\2\2\u11ec\u11ee\7\u0163\2\2\u11ed\u11ec\3\2\2"+
		"\2\u11ed\u11ee\3\2\2\2\u11ee\u11ef\3\2\2\2\u11ef\u11f0\5\u0314\u018b\2"+
		"\u11f0\u11f1\5\u0316\u018c\2\u11f1\u0313\3\2\2\2\u11f2\u11f3\t\n\2\2\u11f3"+
		"\u0315\3\2\2\2\u11f4\u11f5\t+\2\2\u11f5\u0317\3\2\2\2\u11f6\u11f8\7\u012b"+
		"\2\2\u11f7\u11f6\3\2\2\2\u11f7\u11f8\3\2\2\2\u11f8\u11fa\3\2\2\2\u11f9"+
		"\u11fb\7B\2\2\u11fa\u11f9\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb\u11fc\3\2"+
		"\2\2\u11fc\u11fe\7\u015e\2\2\u11fd\u11ff\7\u00de\2\2\u11fe\u11fd\3\2\2"+
		"\2\u11fe\u11ff\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1201\5\u031a\u018e\2"+
		"\u1201\u0319\3\2\2\2\u1202\u1203\7\u01c9\2\2\u1203\u031b\3\2\2\2\u1204"+
		"\u1206\7\u015a\2\2\u1205\u1207\7\u00de\2\2\u1206\u1205\3\2\2\2\u1206\u1207"+
		"\3\2\2\2\u1207\u1208\3\2\2\2\u1208\u1209\5\u031e\u0190\2\u1209\u031d\3"+
		"\2\2\2\u120a\u120b\t\n\2\2\u120b\u031f\3\2\2\2\u120c\u120d\7\u016a\2\2"+
		"\u120d\u1211\7\u01c3\2\2\u120e\u1210\5T+\2\u120f\u120e\3\2\2\2\u1210\u1213"+
		"\3\2\2\2\u1211\u120f\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u121c\3\2\2\2\u1213"+
		"\u1211\3\2\2\2\u1214\u1215\5\u0322\u0192\2\u1215\u1219\7\u01c3\2\2\u1216"+
		"\u1218\5T+\2\u1217\u1216\3\2\2\2\u1218\u121b\3\2\2\2\u1219\u1217\3\2\2"+
		"\2\u1219\u121a\3\2\2\2\u121a\u121d\3\2\2\2\u121b\u1219\3\2\2\2\u121c\u1214"+
		"\3\2\2\2\u121c\u121d\3\2\2\2\u121d\u0321\3\2\2\2\u121e\u1221\5\u0328\u0195"+
		"\2\u121f\u1221\5\u032c\u0197\2\u1220\u121e\3\2\2\2\u1220\u121f\3\2\2\2"+
		"\u1221\u1224\3\2\2\2\u1222\u1220\3\2\2\2\u1222\u1223\3\2\2\2\u1223\u1228"+
		"\3\2\2\2\u1224\u1222\3\2\2\2\u1225\u1227\5\u0354\u01ab\2\u1226\u1225\3"+
		"\2\2\2\u1227\u122a\3\2\2\2\u1228\u1226\3\2\2\2\u1228\u1229\3\2\2\2\u1229"+
		"\u122e\3\2\2\2\u122a\u1228\3\2\2\2\u122b\u122d\5\u0348\u01a5\2\u122c\u122b"+
		"\3\2\2\2\u122d\u1230\3\2\2\2\u122e\u122c\3\2\2\2\u122e\u122f\3\2\2\2\u122f"+
		"\u1234\3\2\2\2\u1230\u122e\3\2\2\2\u1231\u1233\5\u0342\u01a2\2\u1232\u1231"+
		"\3\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235\3\2\2\2\u1235"+
		"\u123a\3\2\2\2\u1236\u1234\3\2\2\2\u1237\u1239\5\u033a\u019e\2\u1238\u1237"+
		"\3\2\2\2\u1239\u123c\3\2\2\2\u123a\u1238\3\2\2\2\u123a\u123b\3\2\2\2\u123b"+
		"\u1242\3\2\2\2\u123c\u123a\3\2\2\2\u123d\u123f\7p\2\2\u123e\u1240\7\u00de"+
		"\2\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1241\3\2\2\2\u1241"+
		"\u1243\7D\2\2\u1242\u123d\3\2\2\2\u1242\u1243\3\2\2\2\u1243\u1245\3\2"+
		"\2\2\u1244\u1246\5\u0324\u0193\2\u1245\u1244\3\2\2\2\u1245\u1246\3\2\2"+
		"\2\u1246\u1248\3\2\2\2\u1247\u1249\5\u0326\u0194\2\u1248\u1247\3\2\2\2"+
		"\u1248\u1249\3\2\2\2\u1249\u0323\3\2\2\2\u124a\u124c\7g\2\2\u124b\u124d"+
		"\7\u00de\2\2\u124c\u124b\3\2\2\2\u124c\u124d\3\2\2\2\u124d\u124e\3\2\2"+
		"\2\u124e\u124f\5\u0338\u019d\2\u124f\u0325\3\2\2\2\u1250\u1251\7d\2\2"+
		"\u1251\u1253\7\u016f\2\2\u1252\u1254\7\u00de\2\2\u1253\u1252\3\2\2\2\u1253"+
		"\u1254\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u1256\5\u0338\u019d\2\u1256\u0327"+
		"\3\2\2\2\u1257\u1259\5\u032a\u0196\2\u1258\u125a\7\u00de\2\2\u1259\u1258"+
		"\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u125c\5\u0362\u01b2"+
		"\2\u125c\u0329\3\2\2\2\u125d\u125e\t,\2\2\u125e\u032b\3\2\2\2\u125f\u1260"+
		"\7\u0176\2\2\u1260\u1263\5\u0336\u019c\2\u1261\u1263\7\u0177\2\2\u1262"+
		"\u125f\3\2\2\2\u1262\u1261\3\2\2\2\u1263\u1268\3\2\2\2\u1264\u1266\7\u00de"+
		"\2\2\u1265\u1264\3\2\2\2\u1265\u1266\3\2\2\2\u1266\u1267\3\2\2\2\u1267"+
		"\u1269\5\u0334\u019b\2\u1268\u1265\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u1272"+
		"\3\2\2\2\u126a\u126c\5\u032e\u0198\2\u126b\u126d\5\u0330\u0199\2\u126c"+
		"\u126b\3\2\2\2\u126c\u126d\3\2\2\2\u126d\u1273\3\2\2\2\u126e\u1270\5\u0330"+
		"\u0199\2\u126f";
	private static final String _serializedATNSegment2 =
		"\u1271\5\u032e\u0198\2\u1270\u126f\3\2\2\2\u1270\u1271\3\2\2\2\u1271\u1273"+
		"\3\2\2\2\u1272\u126a\3\2\2\2\u1272\u126e\3\2\2\2\u1272\u1273\3\2\2\2\u1273"+
		"\u032d\3\2\2\2\u1274\u1276\7\u010b\2\2\u1275\u1277\7\u016f\2\2\u1276\u1275"+
		"\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1279\3\2\2\2\u1278\u127a\7\u00de\2"+
		"\2\u1279\u1278\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u127c"+
		"\5\u0332\u019a\2\u127c\u032f\3\2\2\2\u127d\u127f\7\u0109\2\2\u127e\u1280"+
		"\7\u016f\2\2\u127f\u127e\3\2\2\2\u127f\u1280\3\2\2\2\u1280\u1282\3\2\2"+
		"\2\u1281\u1283\7\u00de\2\2\u1282\u1281\3\2\2\2\u1282\u1283\3\2\2\2\u1283"+
		"\u1284\3\2\2\2\u1284\u1285\5\u0332\u019a\2\u1285\u0331\3\2\2\2\u1286\u1287"+
		"\7\u01c9\2\2\u1287\u0333\3\2\2\2\u1288\u1289\7\u01c9\2\2\u1289\u0335\3"+
		"\2\2\2\u128a\u128b\t\n\2\2\u128b\u0337\3\2\2\2\u128c\u1291\7\u01c9\2\2"+
		"\u128d\u128e\t-\2\2\u128e\u1290\7\u01c9\2\2\u128f\u128d\3\2\2\2\u1290"+
		"\u1293\3\2\2\2\u1291\u128f\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u0339\3\2"+
		"\2\2\u1293\u1291\3\2\2\2\u1294\u1296\7e\2\2\u1295\u1297\7\u0161\2\2\u1296"+
		"\u1295\3\2\2\2\u1296\u1297\3\2\2\2\u1297\u1299\3\2\2\2\u1298\u129a\7\u00de"+
		"\2\2\u1299\u1298\3\2\2\2\u1299\u129a\3\2\2\2\u129a\u129b\3\2\2\2\u129b"+
		"\u129c\5\u033c\u019f\2\u129c\u033b\3\2\2\2\u129d\u129f\5\u033e\u01a0\2"+
		"\u129e\u12a0\7\u01a1\2\2\u129f\u129e\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0"+
		"\u12a1\3\2\2\2\u12a1\u12a2\7\u01af\2\2\u12a2\u12a3\t.\2\2\u12a3\u12a5"+
		"\3\2\2\2\u12a4\u129d\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6"+
		"\u12a7\5\u0340\u01a1\2\u12a7\u033d\3\2\2\2\u12a8\u12a9\7\3\2\2\u12a9\u033f"+
		"\3\2\2\2\u12aa\u12ab\7\3\2\2\u12ab\u0341\3\2\2\2\u12ac\u12ad\7=\2\2\u12ad"+
		"\u12af\5\u0344\u01a3\2\u12ae\u12b0\7\u00de\2\2\u12af\u12ae\3\2\2\2\u12af"+
		"\u12b0\3\2\2\2\u12b0\u12b2\3\2\2\2\u12b1\u12b3\5\u0346\u01a4\2\u12b2\u12b1"+
		"\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b2\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5"+
		"\u0343\3\2\2\2\u12b6\u12b7\7\u01c9\2\2\u12b7\u0345\3\2\2\2\u12b8\u12bb"+
		"\5\u035a\u01ae\2\u12b9\u12ba\t\22\2\2\u12ba\u12bc\5\u035c\u01af\2\u12bb"+
		"\u12b9\3\2\2\2\u12bb\u12bc\3\2\2\2\u12bc\u0347\3\2\2\2\u12bd\u12bf\7\u0179"+
		"\2\2\u12be\u12c0\7<\2\2\u12bf\u12be\3\2\2\2\u12bf\u12c0\3\2\2\2\u12c0"+
		"\u12c2\3\2\2\2\u12c1\u12c3\5\u034a\u01a6\2\u12c2\u12c1\3\2\2\2\u12c3\u12c4"+
		"\3\2\2\2\u12c4\u12c2\3\2\2\2\u12c4\u12c5\3\2\2\2\u12c5\u0349\3\2\2\2\u12c6"+
		"\u12c8\5\u034c\u01a7\2\u12c7\u12c6\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u12c7"+
		"\3\2\2\2\u12c9\u12ca\3\2\2\2\u12ca\u12cc\3\2\2\2\u12cb\u12cd\5\u034e\u01a8"+
		"\2\u12cc\u12cb\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u034b\3\2\2\2\u12ce\u12d0"+
		"\5\u0350\u01a9\2\u12cf\u12ce\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12cf\3"+
		"\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u12d4\3\2\2\2\u12d3\u12d5\t/\2\2\u12d4"+
		"\u12d3\3\2\2\2\u12d4\u12d5\3\2\2\2\u12d5\u12d7\3\2\2\2\u12d6\u12d8\5\u0352"+
		"\u01aa\2\u12d7\u12d6\3\2\2\2\u12d8\u12d9\3\2\2\2\u12d9\u12d7\3\2\2\2\u12d9"+
		"\u12da\3\2\2\2\u12da\u034d\3\2\2\2\u12db\u12dc\7\u00d1\2\2\u12dc\u12dd"+
		"\5\u031a\u018e\2\u12dd\u034f\3\2\2\2\u12de\u12df\7\u01c9\2\2\u12df\u0351"+
		"\3\2\2\2\u12e0\u12e1\t\n\2\2\u12e1\u0353\3\2\2\2\u12e2\u12e3\7\f\2\2\u12e3"+
		"\u12e5\5\u031a\u018e\2\u12e4\u12e6\7\u00de\2\2\u12e5\u12e4\3\2\2\2\u12e5"+
		"\u12e6\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12e8\5\u0356\u01ac\2\u12e8\u0355"+
		"\3\2\2\2\u12e9\u12f4\7\37\2\2\u12ea\u12f4\7\u016c\2\2\u12eb\u12f4\7\u016d"+
		"\2\2\u12ec\u12f4\7\u00fe\2\2\u12ed\u12f4\7\u0084\2\2\u12ee\u12f0\5\u0358"+
		"\u01ad\2\u12ef\u12ee\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12ef\3\2\2\2\u12f1"+
		"\u12f2\3\2\2\2\u12f2\u12f4\3\2\2\2\u12f3\u12e9\3\2\2\2\u12f3\u12ea\3\2"+
		"\2\2\u12f3\u12eb\3\2\2\2\u12f3\u12ec\3\2\2\2\u12f3\u12ed\3\2\2\2\u12f3"+
		"\u12ef\3\2\2\2\u12f4\u0357\3\2\2\2\u12f5\u12f8\5\u035a\u01ae\2\u12f6\u12f7"+
		"\t\22\2\2\u12f7\u12f9\5\u035c\u01af\2\u12f8\u12f6\3\2\2\2\u12f8\u12f9"+
		"\3\2\2\2\u12f9\u1302\3\2\2\2\u12fa\u12fd\5\u035a\u01ae\2\u12fb\u12fc\7"+
		"\22\2\2\u12fc\u12fe\5\u035e\u01b0\2\u12fd\u12fb\3\2\2\2\u12fe\u12ff\3"+
		"\2\2\2\u12ff\u12fd\3\2\2\2\u12ff\u1300\3\2\2\2\u1300\u1302\3\2\2\2\u1301"+
		"\u12f5\3\2\2\2\u1301\u12fa\3\2\2\2\u1302\u0359\3\2\2\2\u1303\u1306\7\3"+
		"\2\2\u1304\u1306\t\n\2\2\u1305\u1303\3\2\2\2\u1305\u1304\3\2\2\2\u1306"+
		"\u035b\3\2\2\2\u1307\u130a\7\3\2\2\u1308\u130a\t\n\2\2\u1309\u1307\3\2"+
		"\2\2\u1309\u1308\3\2\2\2\u130a\u035d\3\2\2\2\u130b\u130e\7\3\2\2\u130c"+
		"\u130e\t\n\2\2\u130d\u130b\3\2\2\2\u130d\u130c\3\2\2\2\u130e\u035f\3\2"+
		"\2\2\u130f\u1310\7\u01c9\2\2\u1310\u0361\3\2\2\2\u1311\u1312\7\u01c9\2"+
		"\2\u1312\u0363\3\2\2\2\u1313\u1314\7\u00b3\2\2\u1314\u1318\7\u01c3\2\2"+
		"\u1315\u1317\5T+\2\u1316\u1315\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316"+
		"\3\2\2\2\u1318\u1319\3\2\2\2\u1319\u131e\3\2\2\2\u131a\u1318\3\2\2\2\u131b"+
		"\u131d\5\u0366\u01b4\2\u131c\u131b\3\2\2\2\u131d\u1320\3\2\2\2\u131e\u131c"+
		"\3\2\2\2\u131e\u131f\3\2\2\2\u131f\u0365\3\2\2\2\u1320\u131e\3\2\2\2\u1321"+
		"\u1323\7\u015b\2\2\u1322\u1324\7\u010d\2\2\u1323\u1322\3\2\2\2\u1323\u1324"+
		"\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1327\5\u0398\u01cd\2\u1326\u1328\5"+
		"\u0368\u01b5\2\u1327\u1326\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u1327\3\2"+
		"\2\2\u1329\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132f\7\u01c3\2\2\u132c"+
		"\u132e\5T+\2\u132d\u132c\3\2\2\2\u132e\u1331\3\2\2\2\u132f\u132d\3\2\2"+
		"\2\u132f\u1330\3\2\2\2\u1330\u0367\3\2\2\2\u1331\u132f\3\2\2\2\u1332\u133f"+
		"\5\u0392\u01ca\2\u1333\u133f\5\u037a\u01be\2\u1334\u133f\5\u0384\u01c3"+
		"\2\u1335\u133f\5\u0380\u01c1\2\u1336\u133f\5\u037e\u01c0\2\u1337\u133f"+
		"\5\u0386\u01c4\2\u1338\u133f\5\u038c\u01c7\2\u1339\u133f\5\u038a\u01c6"+
		"\2\u133a\u133f\5\u0378\u01bd\2\u133b\u133f\5\u036e\u01b8\2\u133c\u133f"+
		"\5\u0370\u01b9\2\u133d\u133f\5\u036a\u01b6\2\u133e\u1332\3\2\2\2\u133e"+
		"\u1333\3\2\2\2\u133e\u1334\3\2\2\2\u133e\u1335\3\2\2\2\u133e\u1336\3\2"+
		"\2\2\u133e\u1337\3\2\2\2\u133e\u1338\3\2\2\2\u133e\u1339\3\2\2\2\u133e"+
		"\u133a\3\2\2\2\u133e\u133b\3\2\2\2\u133e\u133c\3\2\2\2\u133e\u133d\3\2"+
		"\2\2\u133f\u0369\3\2\2\2\u1340\u1342\7\u00b2\2\2\u1341\u1340\3\2\2\2\u1341"+
		"\u1342\3\2\2\2\u1342\u1343\3\2\2\2\u1343\u1345\7\u016f\2\2\u1344\u1346"+
		"\7\u00de\2\2\u1345\u1344\3\2\2\2\u1345\u1346\3\2\2\2\u1346\u1347\3\2\2"+
		"\2\u1347\u1348\5\u036c\u01b7\2\u1348\u036b\3\2\2\2\u1349\u134a\5\u0338"+
		"\u019d\2\u134a\u036d\3\2\2\2\u134b\u134d\7\u0134\2\2\u134c\u134e\7\u00e3"+
		"\2\2\u134d\u134c\3\2\2\2\u134d\u134e\3\2\2\2\u134e\u1350\3\2\2\2\u134f"+
		"\u1351\7\u00de\2\2\u1350\u134f\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1352"+
		"\3\2\2\2\u1352\u1357\5\u0372\u01ba\2\u1353\u1355\7\u01a1\2\2\u1354\u1353"+
		"\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u1358\7\u0082\2"+
		"\2\u1357\u1354\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u135a\3\2\2\2\u1359\u135b"+
		"\t\r\2\2\u135a\u1359\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u036f\3\2\2\2\u135c"+
		"\u135d\7\24\2\2\u135d\u135f\7\u0134\2\2\u135e\u1360\7\u00e3\2\2\u135f"+
		"\u135e\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u1362\3\2\2\2\u1361\u1363\7\u00de"+
		"\2\2\u1362\u1361\3\2\2\2\u1362\u1363\3\2\2\2\u1363\u1364\3\2\2\2\u1364"+
		"\u1369\5\u0372\u01ba\2\u1365\u1367\7\u01a1\2\2\u1366\u1365\3\2\2\2\u1366"+
		"\u1367\3\2\2\2\u1367\u1368\3\2\2\2\u1368\u136a\7\u0082\2\2\u1369\u1366"+
		"\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u136c\3\2\2\2\u136b\u136d\t\r\2\2\u136c"+
		"\u136b\3\2\2\2\u136c\u136d\3\2\2\2\u136d\u0371\3\2\2\2\u136e\u1377\5\u0376"+
		"\u01bc\2\u136f\u1370\5\u0374\u01bb\2\u1370\u1372\7\u01b8\2\2\u1371\u1373"+
		"\5\u0376\u01bc\2\u1372\u1371\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1372\3"+
		"\2\2\2\u1374\u1375\3\2\2\2\u1375\u1377\3\2\2\2\u1376\u136e\3\2\2\2\u1376"+
		"\u136f\3\2\2\2\u1377\u0373\3\2\2\2\u1378\u1379\7\u01c9\2\2\u1379\u0375"+
		"\3\2\2\2\u137a\u137b\5\u0338\u019d\2\u137b\u0377\3\2\2\2\u137c\u137e\7"+
		"\5\2\2\u137d\u137f\7\u00f9\2\2\u137e\u137d\3\2\2\2\u137e\u137f\3\2\2\2"+
		"\u137f\u1381\3\2\2\2\u1380\u1382\7\u00de\2\2\u1381\u1380\3\2\2\2\u1381"+
		"\u1382\3\2\2\2\u1382\u1384\3\2\2\2\u1383\u137c\3\2\2\2\u1383\u1384\3\2"+
		"\2\2\u1384\u1385\3\2\2\2\u1385\u138e\t\60\2\2\u1386\u1388\7\u013a\2\2"+
		"\u1387\u1389\7\u00e3\2\2\u1388\u1387\3\2\2\2\u1388\u1389\3\2\2\2\u1389"+
		"\u138b\3\2\2\2\u138a\u138c\7\u00de\2\2\u138b\u138a\3\2\2\2\u138b\u138c"+
		"\3\2\2\2\u138c\u138d\3\2\2\2\u138d\u138f\5\u0338\u019d\2\u138e\u1386\3"+
		"\2\2\2\u138e\u138f\3\2\2\2\u138f\u0379\3\2\2\2\u1390\u1391\7\u0146\2\2"+
		"\u1391\u1393\5\u037c\u01bf\2\u1392\u1394\t\61\2\2\u1393\u1392\3\2\2\2"+
		"\u1393\u1394\3\2\2\2\u1394\u037b\3\2\2\2\u1395\u1396\t\n\2\2\u1396\u037d"+
		"\3\2\2\2\u1397\u1398\7\u0134\2\2\u1398\u139a\7v\2\2\u1399\u139b\7\u00de"+
		"\2\2\u139a\u1399\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u139c\3\2\2\2\u139c"+
		"\u139d\7\u016c\2\2\u139d\u037f\3\2\2\2\u139e\u13a0\7\u0117\2\2\u139f\u13a1"+
		"\7;\2\2\u13a0\u139f\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13a3\3\2\2\2\u13a2"+
		"\u13a4\7\u00de\2\2\u13a3\u13a2\3\2\2\2\u13a3\u13a4\3\2\2\2\u13a4\u13a5"+
		"\3\2\2\2\u13a5\u13a6\5\u0382\u01c2\2\u13a6\u0381\3\2\2\2\u13a7\u13a8\7"+
		"\3\2\2\u13a8\u0383\3\2\2\2\u13a9\u13ab\7\u0111\2\2\u13aa\u13ac\7\u00de"+
		"\2\2\u13ab\u13aa\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ae\3\2\2\2\u13ad"+
		"\u13a9\3\2\2\2\u13ad\u13ae\3\2\2\2\u13ae\u13b4\3\2\2\2\u13af\u13b5\7\u015f"+
		"\2\2\u13b0\u13b1\7\u00ec\2\2\u13b1\u13b5\7\u015f\2\2\u13b2\u13b5\7\u013a"+
		"\2\2\u13b3\u13b5\7\u00d3\2\2\u13b4\u13af\3\2\2\2\u13b4\u13b0\3\2\2\2\u13b4"+
		"\u13b2\3\2\2\2\u13b4\u13b3\3\2\2\2\u13b5\u0385\3\2\2\2\u13b6\u13b8\7\u00f0"+
		"\2\2\u13b7\u13b9\7\u00f9\2\2\u13b8\u13b7\3\2\2\2\u13b8\u13b9\3\2\2\2\u13b9"+
		"\u13bb\3\2\2\2\u13ba\u13bc\7\u00de\2\2\u13bb\u13ba\3\2\2\2\u13bb\u13bc"+
		"\3\2\2\2\u13bc\u13bd\3\2\2\2\u13bd\u13be\5\u0388\u01c5\2\u13be\u0387\3"+
		"\2\2\2\u13bf\u13c1\7\u00f5\2\2\u13c0\u13c2\7\u01a1\2\2\u13c1\u13c0\3\2"+
		"\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3\u13c4\7\u00f0\2\2\u13c4"+
		"\u13c5\7\u010b\2\2\u13c5\u13c6\7\u00fc\2\2\u13c6\u13d5\7\u0135\2\2\u13c7"+
		"\u13d1\7$\2\2\u13c8\u13ca\7\u01a1\2\2\u13c9\u13c8\3\2\2\2\u13c9\u13ca"+
		"\3\2\2\2\u13ca\u13cf\3\2\2\2\u13cb\u13cc\7\u00f0\2\2\u13cc\u13cd\7\u010b"+
		"\2\2\u13cd\u13d0\7\u0134\2\2\u13ce\u13d0\7\u0150\2\2\u13cf\u13cb\3\2\2"+
		"\2\u13cf\u13ce\3\2\2\2\u13d0\u13d2\3\2\2\2\u13d1\u13c9\3\2\2\2\u13d1\u13d2"+
		"\3\2\2\2\u13d2\u13d5\3\2\2\2\u13d3\u13d5\7\u00aa\2\2\u13d4\u13bf\3\2\2"+
		"\2\u13d4\u13c7\3\2\2\2\u13d4\u13d3\3\2\2\2\u13d5\u0389\3\2\2\2\u13d6\u13d8"+
		"\7A\2\2\u13d7\u13d9\7\u00de\2\2\u13d8\u13d7\3\2\2\2\u13d8\u13d9\3\2\2"+
		"\2\u13d9\u13da\3\2\2\2\u13da\u13db\5\u031a\u018e\2\u13db\u038b\3\2\2\2"+
		"\u13dc\u13de\7\61\2\2\u13dd\u13df\7W\2\2\u13de\u13dd\3\2\2\2\u13de\u13df"+
		"\3\2\2\2\u13df\u13e3\3\2\2\2\u13e0\u13e1\5\u038e\u01c8\2\u13e1\u13e2\7"+
		"\u0189\2\2\u13e2\u13e4\3\2\2\2\u13e3\u13e0\3\2\2\2\u13e3\u13e4\3\2\2\2"+
		"\u13e4\u13e5\3\2\2\2\u13e5\u13e6\5\u0390\u01c9\2\u13e6\u13e7\t\62\2\2"+
		"\u13e7\u038d\3\2\2\2\u13e8\u13e9\t\n\2\2\u13e9\u038f\3\2\2\2\u13ea\u13eb"+
		"\t\n\2\2\u13eb\u0391\3\2\2\2\u13ec\u13ee\7 \2\2\u13ed\u13ef\7\u0189\2"+
		"\2\u13ee\u13ed\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13f1"+
		"\5\u0394\u01cb\2\u13f1\u0393\3\2\2\2\u13f2\u13f4\t\63\2\2\u13f3\u13f2"+
		"\3\2\2\2\u13f3\u13f4\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13fe\5\u0396\u01cc"+
		"\2\u13f6\u13f8\7\u00fc\2\2\u13f7\u13f6\3\2\2\2\u13f7\u13f8\3\2\2\2\u13f8"+
		"\u13f9\3\2\2\2\u13f9\u13fb\t\33\2\2\u13fa\u13fc\7\u00b2\2\2\u13fb\u13fa"+
		"\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u13fe\3\2\2\2\u13fd\u13f3\3\2\2\2\u13fd"+
		"\u13f7\3\2\2\2\u13fe\u0395\3\2\2\2\u13ff\u1404\7\3\2\2\u1400\u1404\5\u0338"+
		"\u019d\2\u1401\u1404\7}\2\2\u1402\u1404\7\u0125\2\2\u1403\u13ff\3\2\2"+
		"\2\u1403\u1400\3\2\2\2\u1403\u1401\3\2\2\2\u1403\u1402\3\2\2\2\u1404\u0397"+
		"\3\2\2\2\u1405\u1406\7\u01c9\2\2\u1406\u0399\3\2\2\2\u1407\u1408\7\u00e0"+
		"\2\2\u1408\u140c\7\u01c3\2\2\u1409\u140b\5T+\2\u140a\u1409\3\2\2\2\u140b"+
		"\u140e\3\2\2\2\u140c\u140a\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u141b\3\2"+
		"\2\2\u140e\u140c\3\2\2\2\u140f\u1411\5\u039c\u01cf\2\u1410\u140f\3\2\2"+
		"\2\u1411\u1412\3\2\2\2\u1412\u1410\3\2\2\2\u1412\u1413\3\2\2\2\u1413\u1414"+
		"\3\2\2\2\u1414\u1418\7\u01c3\2\2\u1415\u1417\5T+\2\u1416\u1415\3\2\2\2"+
		"\u1417\u141a\3\2\2\2\u1418\u1416\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u141c"+
		"\3\2\2\2\u141a\u1418\3\2\2\2\u141b\u1410\3\2\2\2\u141b\u141c\3\2\2\2\u141c"+
		"\u039b\3\2\2\2\u141d\u1422\5\u03b6\u01dc\2\u141e\u1422\5\u03b2\u01da\2"+
		"\u141f\u1422\5\u03a6\u01d4\2\u1420\u1422\5\u039e\u01d0\2\u1421\u141d\3"+
		"\2\2\2\u1421\u141e\3\2\2\2\u1421\u141f\3\2\2\2\u1421\u1420\3\2\2\2\u1422"+
		"\u039d\3\2\2\2\u1423\u1424\7\u00fc\2\2\u1424\u1426\7\u00b2\2\2\u1425\u1427"+
		"\7\u0180\2\2\u1426\u1425\3\2\2\2\u1426\u1427\3\2\2\2\u1427\u1429\3\2\2"+
		"\2\u1428\u142a\7W\2\2\u1429\u1428\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142c"+
		"\3\2\2\2\u142b\u142d\5\u03a0\u01d1\2\u142c\u142b\3\2\2\2\u142d\u142e\3"+
		"\2\2\2\u142e\u142c\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u039f\3\2\2\2\u1430"+
		"\u1433\5\u03a2\u01d2\2\u1431\u1432\7\u0121\2\2\u1432\u1434\5\u03a4\u01d3"+
		"\2\u1433\u1431\3\2\2\2\u1433\u1434\3\2\2\2\u1434\u03a1\3\2\2\2\u1435\u1436"+
		"\7\u01c9\2\2\u1436\u03a3\3\2\2\2\u1437\u1438\t\n\2\2\u1438\u03a5\3\2\2"+
		"\2\u1439\u143c\7\u0145\2\2\u143a\u143b\7\u010b\2\2\u143b\u143d\5\u0398"+
		"\u01cd\2\u143c\u143a\3\2\2\2\u143c\u143d\3\2\2\2\u143d\u143f\3\2\2\2\u143e"+
		"\u1440\7\u00a8\2\2\u143f\u143e\3\2\2\2\u143f\u1440\3\2\2\2\u1440\u1441"+
		"\3\2\2\2\u1441\u1442\5\u03a8\u01d5\2\u1442\u03a7\3\2\2\2\u1443\u1445\5"+
		"\u03ae\u01d8\2\u1444\u1446\7\u0108\2\2\u1445\u1444\3\2\2\2\u1445\u1446"+
		"\3\2\2\2\u1446\u1447\3\2\2\2\u1447\u1448\5\u0398\u01cd\2\u1448\u144e\3"+
		"\2\2\2\u1449\u144a\5\u03aa\u01d6\2\u144a\u144b\7>\2\2\u144b\u144e\3\2"+
		"\2\2\u144c\u144e\5\u03ac\u01d7\2\u144d\u1443\3\2\2\2\u144d\u1449\3\2\2"+
		"\2\u144d\u144c\3\2\2\2\u144e\u03a9\3\2\2\2\u144f\u1450\t\n\2\2\u1450\u03ab"+
		"\3\2\2\2\u1451\u1452\7\u01c9\2\2\u1452\u03ad\3\2\2\2\u1453\u1455\7\u0088"+
		"\2\2\u1454\u1456\7\u0108\2\2\u1455\u1454\3\2\2\2\u1455\u1456\3\2\2\2\u1456"+
		"\u1458\3\2\2\2\u1457\u1453\3\2\2\2\u1457\u1458\3\2\2\2\u1458\u1459\3\2"+
		"\2\2\u1459\u145e\t\33\2\2\u145a\u145b\5\u03b0\u01d9\2\u145b\u145c\7\u0135"+
		"\2\2\u145c\u145e\3\2\2\2\u145d\u1457\3\2\2\2\u145d\u145a\3\2\2\2\u145e"+
		"\u03af\3\2\2\2\u145f\u1460\t\n\2\2\u1460\u03b1\3\2\2\2\u1461\u1463\7\u0153"+
		"\2\2\u1462\u1464\t\64\2\2\u1463\u1462\3\2\2\2\u1463\u1464\3\2\2\2\u1464"+
		"\u1466\3\2\2\2\u1465\u1467\7\31\2\2\u1466\u1465\3\2\2\2\u1466\u1467\3"+
		"\2\2\2\u1467\u1469\3\2\2\2\u1468\u146a\7\u00bd\2\2\u1469\u1468\3\2\2\2"+
		"\u1469\u146a\3\2\2\2\u146a\u146b\3\2\2\2\u146b\u146d\5\u03b4\u01db\2\u146c"+
		"\u146e\5\u03b4\u01db\2\u146d\u146c\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u146d"+
		"\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u03b3\3\2\2\2\u1471\u1472\7\u01c9\2"+
		"\2\u1472\u03b5\3\2\2\2\u1473\u1475\7\27\2\2\u1474\u1476\5\u03b8\u01dd"+
		"\2\u1475\u1474\3\2\2\2\u1476\u1477\3\2\2\2\u1477\u1475\3\2\2\2\u1477\u1478"+
		"\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u147b\7\u010b\2\2\u147a\u147c\5\u0398"+
		"\u01cd\2\u147b\u147a\3\2\2\2\u147c\u147d\3\2\2\2\u147d\u147b\3\2\2\2\u147d"+
		"\u147e\3\2\2\2\u147e\u03b7\3\2\2\2\u147f\u148e\7s\2\2\u1480\u1481\7\u00ad"+
		"\2\2\u1481\u148e\5\u03be\u01e0\2\u1482\u148e\7\u00b6\2\2\u1483\u148e\7"+
		"\u00f1\2\2\u1484\u148e\7\u00f6\2\2\u1485\u1487\t\65\2\2\u1486\u1485\3"+
		"\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u1489\7\u0123\2\2"+
		"\u1489\u148e\5\u03bc\u01df\2\u148a\u148e\7\u0127\2\2\u148b\u148c\7\u01a0"+
		"\2\2\u148c\u148e\5\u03ba\u01de\2\u148d\u147f\3\2\2\2\u148d\u1480\3\2\2"+
		"\2\u148d\u1482\3\2\2\2\u148d\u1483\3\2\2\2\u148d\u1484\3\2\2\2\u148d\u1486"+
		"\3\2\2\2\u148d\u148a\3\2\2\2\u148d\u148b\3\2\2\2\u148e\u03b9\3\2\2\2\u148f"+
		"\u1490\t\n\2\2\u1490\u03bb\3\2\2\2\u1491\u1492\t\n\2\2\u1492\u03bd\3\2"+
		"\2\2\u1493\u1494\t\n\2\2\u1494\u03bf\3\2\2\2\u1495\u1496\b\u01e1\1\2\u1496"+
		"\u1497\7\u01bd\2\2\u1497\u1498\5\u03c0\u01e1\2\u1498\u1499\7\u01be\2\2"+
		"\u1499\u14a0\3\2\2\2\u149a\u149b\5\u03c6\u01e4\2\u149b\u149c\5\u03c0\u01e1"+
		"\5\u149c\u14a0\3\2\2\2\u149d\u14a0\5\u03da\u01ee\2\u149e\u14a0\5\u03c2"+
		"\u01e2\2\u149f\u1495\3\2\2\2\u149f\u149a\3\2\2\2\u149f\u149d\3\2\2\2\u149f"+
		"\u149e\3\2\2\2\u14a0\u14a7\3\2\2\2\u14a1\u14a2\f\6\2\2\u14a2\u14a3\5\u03c4"+
		"\u01e3\2\u14a3\u14a4\5\u03c0\u01e1\7\u14a4\u14a6\3\2\2\2\u14a5\u14a1\3"+
		"\2\2\2\u14a6\u14a9\3\2\2\2\u14a7\u14a5\3\2\2\2\u14a7\u14a8\3\2\2\2\u14a8"+
		"\u03c1\3\2\2\2\u14a9\u14a7\3\2\2\2\u14aa\u14ae\t\f\2\2\u14ab\u14ae\7\3"+
		"\2\2\u14ac\u14ae\5\"\22\2\u14ad\u14aa\3\2\2\2\u14ad\u14ab\3\2\2\2\u14ad"+
		"\u14ac\3\2\2\2\u14ae\u03c3\3\2\2\2\u14af\u14b6\7\u01b3\2\2\u14b0\u14b6"+
		"\7\u01b4\2\2\u14b1\u14b6\7\u01b5\2\2\u14b2\u14b6\7\u01b6\2\2\u14b3\u14b4"+
		"\7\u01b5\2\2\u14b4\u14b6\7\u01b5\2\2\u14b5\u14af\3\2\2\2\u14b5\u14b0\3"+
		"\2\2\2\u14b5\u14b1\3\2\2\2\u14b5\u14b2\3\2\2\2\u14b5\u14b3\3\2\2\2\u14b6"+
		"\u03c5\3\2\2\2\u14b7\u14b8\t\66\2\2\u14b8\u03c7\3\2\2\2\u14b9\u14ba\b"+
		"\u01e5\1\2\u14ba\u14bb\7\u01bd\2\2\u14bb\u14bc\5\u03c8\u01e5\2\u14bc\u14bd"+
		"\7\u01be\2\2\u14bd\u14c2\3\2\2\2\u14be\u14bf\7\u0102\2\2\u14bf\u14c2\5"+
		"\u03c8\u01e5\4\u14c0\u14c2\5\u03ca\u01e6\2\u14c1\u14b9\3\2\2\2\u14c1\u14be"+
		"\3\2\2\2\u14c1\u14c0\3\2\2\2\u14c2\u14c9\3\2\2\2\u14c3\u14c4\f\5\2\2\u14c4"+
		"\u14c5\5\u03ce\u01e8\2\u14c5\u14c6\5\u03c8\u01e5\6\u14c6\u14c8\3\2\2\2"+
		"\u14c7\u14c3\3\2\2\2\u14c8\u14cb\3\2\2\2\u14c9\u14c7\3\2\2\2\u14c9\u14ca"+
		"\3\2\2\2\u14ca\u03c9\3\2\2\2\u14cb\u14c9\3\2\2\2\u14cc\u14cd\5\u03c0\u01e1"+
		"\2\u14cd\u14ce\5\u03d6\u01ec\2\u14ce\u14d4\5\u03c0\u01e1\2\u14cf\u14d0"+
		"\5\u03ce\u01e8\2\u14d0\u14d1\5\u03cc\u01e7\2\u14d1\u14d3\3\2\2\2\u14d2"+
		"\u14cf\3\2\2\2\u14d3\u14d6\3\2\2\2\u14d4\u14d2\3\2\2\2\u14d4\u14d5\3\2"+
		"\2\2\u14d5\u14f5\3\2\2\2\u14d6\u14d4\3\2\2\2\u14d7\u14d9\5\u03c0\u01e1"+
		"\2\u14d8\u14da\7\u00de\2\2\u14d9\u14d8\3\2\2\2\u14d9\u14da\3\2\2\2\u14da"+
		"\u14dc\3\2\2\2\u14db\u14dd\7\u0102\2\2\u14dc\u14db\3\2\2\2\u14dc\u14dd"+
		"\3\2\2\2\u14dd\u14e0\3\2\2\2\u14de\u14e1\5\u03d4\u01eb\2\u14df\u14e1\5"+
		"\u03d2\u01ea\2\u14e0\u14de\3\2\2\2\u14e0\u14df\3\2\2\2\u14e1\u14e7\3\2"+
		"\2\2\u14e2\u14e3\5\u03ce\u01e8\2\u14e3\u14e4\5\u03cc\u01e7\2\u14e4\u14e6"+
		"\3\2\2\2\u14e5\u14e2\3\2\2\2\u14e6\u14e9\3\2\2\2\u14e7\u14e5\3\2\2\2\u14e7"+
		"\u14e8\3\2\2\2\u14e8\u14f5\3\2\2\2\u14e9\u14e7\3\2\2\2\u14ea\u14ec\5\u03c0"+
		"\u01e1\2\u14eb\u14ed\7\u00de\2\2\u14ec\u14eb\3\2\2\2\u14ec\u14ed\3\2\2"+
		"\2\u14ed\u14ef\3\2\2\2\u14ee\u14f0\7\u0102\2\2\u14ef\u14ee\3\2\2\2\u14ef"+
		"\u14f0\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14f2\t\20\2\2\u14f2\u14f5\3"+
		"\2\2\2\u14f3\u14f5\5\u03d8\u01ed\2\u14f4\u14cc\3\2\2\2\u14f4\u14d7\3\2"+
		"\2\2\u14f4\u14ea\3\2\2\2\u14f4\u14f3\3\2\2\2\u14f5\u03cb\3\2\2\2\u14f6"+
		"\u14f8\5\u03d6\u01ec\2\u14f7\u14f6\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14f9"+
		"\3\2\2\2\u14f9\u14fa\5\u03c0\u01e1\2\u14fa\u03cd\3\2\2\2\u14fb\u14fc\t"+
		"\67\2\2\u14fc\u03cf\3\2\2\2\u14fd\u14fe\t\20\2\2\u14fe\u03d1\3\2\2\2\u14ff"+
		"\u1500\t8\2\2\u1500\u03d3\3\2\2\2\u1501\u1502\t9\2\2\u1502\u03d5\3\2\2"+
		"\2\u1503\u1505\7\u00de\2\2\u1504\u1503\3\2\2\2\u1504\u1505\3\2\2\2\u1505"+
		"\u1537\3\2\2\2\u1506\u1508\7\u0102\2\2\u1507\u1506\3\2\2\2\u1507\u1508"+
		"\3\2\2\2\u1508\u1521\3\2\2\2\u1509\u150b\7\u00c6\2\2\u150a\u150c\7\u0183"+
		"\2\2\u150b\u150a\3\2\2\2\u150b\u150c\3\2\2\2\u150c\u1522\3\2\2\2\u150d"+
		"\u150f\7\u01bc\2\2\u150e\u1510\7\u0183\2\2\u150f\u150e\3\2\2\2\u150f\u1510"+
		"\3\2\2\2\u1510\u1522\3\2\2\2\u1511\u1513\7\u00e8\2\2\u1512\u1514\7\u0183"+
		"\2\2\u1513\u1512\3\2\2\2\u1513\u1514\3\2\2\2\u1514\u1522\3\2\2\2\u1515"+
		"\u1517\7\u01b9\2\2\u1516\u1518\7\u0183\2\2\u1517\u1516\3\2\2\2\u1517\u1518"+
		"\3\2\2\2\u1518\u1522\3\2\2\2\u1519\u151b\7\u00a4\2\2\u151a\u151c\7\u0189"+
		"\2\2\u151b\u151a\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u1522\3\2\2\2\u151d"+
		"\u151f\7\u01b8\2\2\u151e\u1520\7\u0189\2\2\u151f\u151e\3\2\2\2\u151f\u1520"+
		"\3\2\2\2\u1520\u1522\3\2\2\2\u1521\u1509\3\2\2\2\u1521\u150d\3\2\2\2\u1521"+
		"\u1511\3\2\2\2\u1521\u1515\3\2\2\2\u1521\u1519\3\2\2\2\u1521\u151d\3\2"+
		"\2\2\u1522\u1538\3\2\2\2\u1523\u1525\7\u00c6\2\2\u1524\u1526\7\u0183\2"+
		"\2\u1525\u1524\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u1527\3\2\2\2\u1527\u1528"+
		"\7\u010f\2\2\u1528\u152a\7\u00a4\2\2\u1529\u152b\7\u0189\2\2\u152a\u1529"+
		"\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u1538\3\2\2\2\u152c\u1538\7\u01bb\2"+
		"\2\u152d\u152f\7\u00e8\2\2\u152e\u1530\7\u0183\2\2\u152f\u152e\3\2\2\2"+
		"\u152f\u1530\3\2\2\2\u1530\u1531\3\2\2\2\u1531\u1532\7\u010f\2\2\u1532"+
		"\u1534\7\u00a4\2\2\u1533\u1535\7\u0189\2\2\u1534\u1533\3\2\2\2\u1534\u1535"+
		"\3\2\2\2\u1535\u1538\3\2\2\2\u1536\u1538\7\u01ba\2\2\u1537\u1507\3\2\2"+
		"\2\u1537\u1523\3\2\2\2\u1537\u152c\3\2\2\2\u1537\u152d\3\2\2\2\u1537\u1536"+
		"\3\2\2\2\u1538\u03d7\3\2\2\2\u1539\u153b\5\u0338\u019d\2\u153a\u153c\5"+
		"\u03de\u01f0\2\u153b\u153a\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u153e\3\2"+
		"\2\2\u153d\u153f\5\u03e0\u01f1\2\u153e\u153d\3\2\2\2\u153e\u153f\3\2\2"+
		"\2\u153f\u03d9\3\2\2\2\u1540\u154a\5\u03d8\u01ed\2\u1541\u1542\7\u00c1"+
		"\2\2\u1542\u1544\5\u03e6\u01f4\2\u1543\u1545\5\u03dc\u01ef\2\u1544\u1543"+
		"\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u1547\3\2\2\2\u1546\u1548\5\u03e0\u01f1"+
		"\2\u1547\u1546\3\2\2\2\u1547\u1548\3\2\2\2\u1548\u154a\3\2\2\2\u1549\u1540"+
		"\3\2\2\2\u1549\u1541\3\2\2\2\u154a\u03db\3\2\2\2\u154b\u154c\5\u03de\u01f0"+
		"\2\u154c\u03dd\3\2\2\2\u154d\u1550\7\u01bd\2\2\u154e\u1551\5\u03c0\u01e1"+
		"\2\u154f\u1551\7\t\2\2\u1550\u154e\3\2\2\2\u1550\u154f\3\2\2\2\u1551\u1552"+
		"\3\2\2\2\u1552\u1550\3\2\2\2\u1552\u1553\3\2\2\2\u1553\u1554\3\2\2\2\u1554"+
		"\u1555\7\u01be\2\2\u1555\u03df\3\2\2\2\u1556\u1557\7\u01bd\2\2\u1557\u1558"+
		"\5\u03e2\u01f2\2\u1558\u155a\7\u01b7\2\2\u1559\u155b\5\u03e4\u01f3\2\u155a"+
		"\u1559\3\2\2\2\u155a\u155b\3\2\2\2\u155b\u155c\3\2\2\2\u155c\u155d\7\u01be"+
		"\2\2\u155d\u03e1\3\2\2\2\u155e\u155f\5\u03c0\u01e1\2\u155f\u03e3\3\2\2"+
		"\2\u1560\u1561\5\u03c0\u01e1\2\u1561\u03e5\3\2\2\2\u1562\u1563\t:\2\2"+
		"\u1563\u03e7\3\2\2\2\u035b\u03eb\u03f1\u03f8\u03fb\u03fe\u0403\u0407\u040c"+
		"\u040f\u0412\u0415\u0418\u041b\u0423\u0428\u042b\u0433\u0438\u043b\u043e"+
		"\u0441\u0444\u044c\u0451\u0456\u045c\u045f\u0468\u046e\u047a\u047f\u0483"+
		"\u048b\u0493\u0496\u04a1\u04a8\u04af\u04b9\u04c2\u04ca\u04d2\u04d7\u04d9"+
		"\u04df\u04e4\u04eb\u04ef\u04f4\u04fa\u0500\u0508\u050e\u0513\u0519\u0522"+
		"\u0551\u0558\u055d\u056e\u0571\u0577\u057c\u057e\u0583\u0586\u058b\u058f"+
		"\u0591\u0594\u0598\u059c\u05a0\u05a6\u05ad\u05b0\u05b6\u05b9\u05bd\u05c1"+
		"\u05c4\u05c7\u05ca\u05d1\u05d4\u05d8\u05db\u05e4\u05eb\u05f5\u05f7\u05fd"+
		"\u0601\u0607\u060d\u0611\u0615\u061c\u061e\u0621\u0624\u062a\u0630\u0634"+
		"\u0638\u063c\u0641\u0645\u0648\u064b\u0656\u065b\u0660\u0668\u066b\u066e"+
		"\u0671\u067a\u067e\u0682\u0685\u0687\u068a\u068e\u0691\u0699\u069b\u06a3"+
		"\u06a5\u06ab\u06b0\u06b4\u06ba\u06c5\u06cb\u06d4\u06de\u06ea\u06f0\u06f5"+
		"\u0700\u0704\u070a\u070d\u0713\u0715\u0719\u0721\u0723\u0726\u072a\u072e"+
		"\u0730\u0736\u073e\u0743\u0745\u0748\u074c\u074e\u0752\u0756\u0759\u075c"+
		"\u0761\u076f\u0774\u0776\u0779\u077c\u0783\u0787\u078c\u078f\u0797\u07a2"+
		"\u07a5\u07a8\u07ab\u07b4\u07b7\u07bb\u07c0\u07c3\u07c7\u07cb\u07cd\u07d1"+
		"\u07d4\u07d8\u07db\u07e2\u07e4\u07e6\u07e9\u07ec\u07f0\u07f4\u07f9\u07fb"+
		"\u0800\u0804\u0809\u080d\u0812\u0818\u081e\u082b\u0836\u083a\u0842\u0848"+
		"\u084c\u0850\u0854\u0856\u085b\u085f\u0862\u0866\u0869\u086f\u0874\u0877"+
		"\u087e\u0881\u0888\u088b\u0890\u0892\u0894\u089c\u08a0\u08a4\u08a7\u08aa"+
		"\u08ae\u08b5\u08b8\u08bc\u08bf\u08c5\u08c9\u08ce\u08dc\u08e0\u08e5\u08ef"+
		"\u08f3\u08fc\u0906\u0908\u0911\u0916\u0920\u0929\u092f\u0931\u0937\u093c"+
		"\u0945\u094a\u094f\u095b\u0961\u0966\u096c\u0972\u0976\u097c\u0983\u0988"+
		"\u098c\u098e\u0992\u0997\u0999\u099d\u099f\u09a2\u09b0\u09b3\u09b7\u09bc"+
		"\u09c0\u09c4\u09cb\u09d0\u09d6\u09db\u09e0\u09e2\u09e7\u09ed\u09ef\u09f2"+
		"\u09f5\u09f9\u09fe\u0a03\u0a09\u0a0d\u0a15\u0a19\u0a1d\u0a20\u0a23\u0a2b"+
		"\u0a2f\u0a34\u0a37\u0a3d\u0a43\u0a4a\u0a4f\u0a52\u0a59\u0a5e\u0a61\u0a66"+
		"\u0a6a\u0a6e\u0a70\u0a72\u0a75\u0a7b\u0a7e\u0a82\u0a86\u0a8a\u0a8e\u0a92"+
		"\u0a97\u0a9d\u0aa2\u0aa6\u0ab3\u0ab8\u0abf\u0ac7\u0acb\u0acd\u0ad2\u0ad6"+
		"\u0adb\u0adf\u0ae8\u0aeb\u0aee\u0af5\u0af9\u0afe\u0b01\u0b06\u0b0a\u0b0e"+
		"\u0b12\u0b16\u0b19\u0b1e\u0b20\u0b26\u0b2b\u0b2e\u0b31\u0b34\u0b3d\u0b41"+
		"\u0b46\u0b48\u0b4b\u0b4f\u0b53\u0b57\u0b5a\u0b5f\u0b63\u0b6a\u0b70\u0b76"+
		"\u0b7b\u0b7f\u0b85\u0b89\u0b8e\u0b93\u0b97\u0b9f\u0ba1\u0ba4\u0ba7\u0bad"+
		"\u0bb5\u0bba\u0bbf\u0bc1\u0bc6\u0bcb\u0bcd\u0bd2\u0bd7\u0bd9\u0bde\u0be3"+
		"\u0be5\u0bea\u0bef\u0bf1\u0bf6\u0bfb\u0bfd\u0c02\u0c06\u0c09\u0c11\u0c15"+
		"\u0c18\u0c1b\u0c27\u0c2b\u0c2e\u0c32\u0c36\u0c3c\u0c40\u0c43\u0c48\u0c4b"+
		"\u0c4e\u0c51\u0c55\u0c59\u0c5b\u0c5f\u0c63\u0c67\u0c6b\u0c71\u0c74\u0c78"+
		"\u0c7d\u0c81\u0c8f\u0c95\u0c99\u0c9d\u0ca3\u0ca8\u0cb4\u0cb6\u0cbb\u0cbf"+
		"\u0cc4\u0cc8\u0ccc\u0cd2\u0cd8\u0cda\u0cde\u0ce0\u0ce4\u0ce8\u0cec\u0cf3"+
		"\u0cf8\u0cfa\u0cfe\u0d03\u0d05\u0d09\u0d0f\u0d11\u0d15\u0d1a\u0d1c\u0d20"+
		"\u0d25\u0d27\u0d2c\u0d30\u0d32\u0d3b\u0d40\u0d42\u0d49\u0d50\u0d59\u0d5f"+
		"\u0d64\u0d6c\u0d72\u0d7b\u0d81\u0d88\u0d91\u0d97\u0d9f\u0da6\u0dae\u0db5"+
		"\u0dbd\u0dc4\u0dd5\u0dd8\u0ddd\u0de4\u0de8\u0ded\u0df4\u0e04\u0e08\u0e0c"+
		"\u0e10\u0e18\u0e20\u0e24\u0e26\u0e2b\u0e2f\u0e36\u0e43\u0e4a\u0e4e\u0e52"+
		"\u0e57\u0e5d\u0e60\u0e65\u0e6b\u0e71\u0e75\u0e79\u0e83\u0e88\u0e8f\u0e9d"+
		"\u0ea2\u0ea6\u0eac\u0eb2\u0eb6\u0eb9\u0ebf\u0ec1\u0ec7\u0ece\u0ed4\u0ed7"+
		"\u0edd\u0edf\u0ee4\u0ee6\u0eec\u0eef\u0ef4\u0ef9\u0efd\u0f00\u0f13\u0f18"+
		"\u0f1d\u0f24\u0f2b\u0f32\u0f37\u0f40\u0f44\u0f48\u0f4c\u0f54\u0f59\u0f5d"+
		"\u0f5f\u0f63\u0f67\u0f6c\u0f71\u0f75\u0f79\u0f7d\u0f7f\u0f84\u0f8a\u0f8d"+
		"\u0fa0\u0fa2\u0fa9\u0fad\u0fb1\u0fb5\u0fcd\u0fd1\u0fdd\u0fe1\u0fe5\u0fe7"+
		"\u0fec\u0ff2\u0ff6\u0ff9\u0ffd\u1000\u1003\u1006\u100a\u100d\u1010\u1014"+
		"\u1018\u101c\u1020\u1024\u1029\u102d\u102f\u1034\u103c\u1042\u1047\u104b"+
		"\u104d\u1055\u105a\u105e\u1061\u1065\u1068\u106b\u106e\u1072\u1075\u1079"+
		"\u107c\u107e\u1089\u108e\u1095\u10ad\u10b1\u10b7\u10ba\u10be\u10c4\u10c7"+
		"\u10ca\u10d0\u10d3\u10d6\u10f3\u10f9\u1106\u110f\u1118\u111d\u1120\u1126"+
		"\u112c\u1130\u1134\u1136\u1139\u113c\u1148\u114e\u1156\u115c\u1164\u116a"+
		"\u1172\u1178\u1180\u1184\u1188\u118f\u1198\u119c\u119f\u11a2\u11aa\u11ae"+
		"\u11b1\u11b8\u11bd\u11c3\u11c6\u11cb\u11d5\u11da\u11dd\u11e0\u11e6\u11e9"+
		"\u11ed\u11f7\u11fa\u11fe\u1206\u1211\u1219\u121c\u1220\u1222\u1228\u122e"+
		"\u1234\u123a\u123f\u1242\u1245\u1248\u124c\u1253\u1259\u1262\u1265\u1268"+
		"\u126c\u1270\u1272\u1276\u1279\u127f\u1282\u1291\u1296\u1299\u129f\u12a4"+
		"\u12af\u12b4\u12bb\u12bf\u12c4\u12c9\u12cc\u12d1\u12d4\u12d9\u12e5\u12f1"+
		"\u12f3\u12f8\u12ff\u1301\u1305\u1309\u130d\u1318\u131e\u1323\u1329\u132f"+
		"\u133e\u1341\u1345\u134d\u1350\u1354\u1357\u135a\u135f\u1362\u1366\u1369"+
		"\u136c\u1374\u1376\u137e\u1381\u1383\u1388\u138b\u138e\u1393\u139a\u13a0"+
		"\u13a3\u13ab\u13ad\u13b4\u13b8\u13bb\u13c1\u13c9\u13cf\u13d1\u13d4\u13d8"+
		"\u13de\u13e3\u13ee\u13f3\u13f7\u13fb\u13fd\u1403\u140c\u1412\u1418\u141b"+
		"\u1421\u1426\u1429\u142e\u1433\u143c\u143f\u1445\u144d\u1455\u1457\u145d"+
		"\u1463\u1466\u1469\u146f\u1477\u147d\u1486\u148d\u149f\u14a7\u14ad\u14b5"+
		"\u14c1\u14c9\u14d4\u14d9\u14dc\u14e0\u14e7\u14ec\u14ef\u14f4\u14f7\u1504"+
		"\u1507\u150b\u150f\u1513\u1517\u151b\u151f\u1521\u1525\u152a\u152f\u1534"+
		"\u1537\u153b\u153e\u1544\u1547\u1549\u1550\u1552\u155a";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}