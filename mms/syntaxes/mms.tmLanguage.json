{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MMS",
	"patterns": 
	[
		{
			"include": "#comment"
		},
		{
			"include": "#mms-directive"
		},
		{
			"include": "#macro-definition"
		},
		{
			"include": "#rule"
		},
		{
			"include": "#action-line"
		}
	],
	"repository": 
	{
		"comment": 
		{
			"patterns": 
			[
				{
					"begin" : "!",
					"beginCaptures" : 
					{
					  "0" : 
					  {
						"name" : "comment.block.exclamation.mms"
					  }
					},
					"comment": "ends only if no continuation symbol is at the end of the line (may followed by spaces) or line is empty",
					"end" : "(.*[^-\\\\\\s])?(?=\\s*$\\n)",
					"endCaptures" : 
					{
						"1" : 
						{
							"name" : "comment.block.1.mms"
						}
					},
					"patterns": 
					[
						{
							"comment": "comments with continuation",
							"match": "(.*([-\\\\]))?\\s*$\\n",
							"captures": 
							{
								"1": 
								{
									"name" : "comment.block.2.mms"
								},
								"2": 
								{
									"name" : "comment.block.continuation.mms"
								}
							}
						}
					]
				}
			]
		},
		"mms-directive": 
		{
			"patterns": 
			[
				{
					"begin": "^(\\.)(\\S+)",
					"beginCaptures": {
						"1": 
						{
							"name": "keyword.control.directives.begin.mms"
						},
						"2":
						{
							"patterns": 
							[
								{
									"include": "#mms-directives"
								}
							]
						}
					},
					"end" : "([^!]*[^-\\s!])(?=\\s*(!.*)?$\\n)|(?=\\s*(!.*)?$\\n)",															   
					"endCaptures" : 
					{
						"1" : 
						{
							"name" : "markup.italic.directive.1.mms"
						},
						"2" : 
						{
							"name" : "comment.block.3.mms"
						}
					},
					"patterns": 
					[
						{
							"comment": "directive with continuation",
							"match": "([^!]*)([-])\\s*(!.*)?$\\n",
							"captures": 
							{
								"1": 
								{
									"name" : "markup.italic.directive.2.mms"
								},
								"2": 
								{
									"name" : "markup.italic.directive.continuation.mms"
								},
								"3": 
								{
									"name" : "comment.block.4.mms"
								}
							}
						}
					]
				}
			]
		},
		"mms-directives": 
		{
			"patterns": 
			[
				{
					"comment": "MMS directives",
					"name": "keyword.control.directives.mms",
					"match": "(?i)ACTION_STATUS|DEFAULT|ELSE|ELSIF|ENDIF|FIRST|IF|IFDEF|IGNORE|INCLUDE|LAST|SILENT|SUFFIXES|SUFFIXES_DELETE|SUFFIXES_AFTER|SUFFIXES_BEFORE"
				},
				{
					"comment": "wrong MMS directives",
					"name": "invalid.illegal.directive.mms",
					"match": "[\\S]+"
				}
			]
		},
		"macro-definition":
		{
			"patterns": 
			[
				{
					"begin": "^([.\\$\\w]+)\\s*(=)",
					"beginCaptures": {
						"1": 
						{
							"patterns": 
							[
								{
									"include": "#macro-name"
								}
							]
						},
						"2": 
						{
							"name": "keyword.operator.macro-define.mms"
						}
					},
					"end" : "([^!]*[^-\\s!])\\s*(!.*)?$\\n|(?=^\\s*$\\n)",
					"endCaptures": 
					{
						"1" : 
						{
							"patterns": 
							[
								{
									"include": "#macro-value"
								}
							]
						},
						"2" : 
						{
							"name" : "comment.block.5.mms"
						}
					},
					"patterns": 
					[
						{
							"comment": "macro with continuation",
							"match": "([^!]*)([-])\\s*(!.*)?$\\n",
							"captures": 
							{
								"1": 
								{
									"patterns": 
									[
										{
											"include": "#macro-value"
										}
									]
								},
								"2": 
								{
									"name" : "constant.character.macro-value.continuation.mms"
								},
								"3": 
								{
									"name" : "comment.block.6.mms"
								}
							}
						}
					]
				}
			]
		},
		"macro-name":
		{
			"patterns": 
			[
				{
					"match": "[.\\$\\w]+",
					"name": "meta.preprocessor.string.macro-name.mms"
				}
			]
		},
		"macro-value":
		{
			"patterns": 
			[
				{
					"match": "[^!]*",
					"name" : "constant.character.macro-value.mms"
				}
			]
		},
		"action-line": 
		{
			"patterns": 
			[
				{
					"begin": "(^\\s+)(?=\\S+)",
					"beginCaptures": 
					{
						"1":
						{
							"name": "meta.action-line.start.mms"
						}
					},
					"end" : "(.*[^-]$\\n)|$\\n",
					"endCaptures" : 
					{
						"1" : 
						{
							"patterns": 
							[
								{
									"include": "#action-with-directives"
								}
							]
						}
					},
					"patterns": 
					[
						{
							"match": "(.*)([-]$\\n)",
							"captures": 
							{
								"1": 
								{
									"patterns": 
									[
										{
											"include": "#action-with-directives"
										}
									]
								},
								"2": 
								{
									"name" : "meta.action-line.continuation.mms"
								}
							}
						}
					]
				}
			]
		},
		"action-with-directives": 
		{
			"patterns": 
			[
				{
					"match": "([-@\\?]+\\s+)?(.*)",
					"captures": 
					{
						"1": 
						{
							"patterns": 
							[
								{
									"include": "#action-directives-space-end"
								}
							]
						},
						"2": 
						{
							"patterns": 
							[
								{
									"include": "#action"
								}
							]
						}
					}
				}
			]
		},
		"action-directives-space-end": 
		{
			"patterns": 
			[
				{
					"match": "(-\\?@\\s|-@\\?\\s|@-\\?\\s|@\\?-\\s|\\?-@\\s|\\?@-\\s|-@\\s|-\\?\\s|@-\\s|@\\?\\s|\\?-\\s|\\?@\\s|-\\s|@\\s|\\?\\s)|(.*)",
					"captures": 
					{
						"1": 
						{
							"name": "keyword.control.action.directives.mms"
						},
						"2": 
						{
							"name": "invalid.illegal.mms"
						}
					}
				}
			]
		},
		"action": 
		{
			"patterns": 
			[
				{
					"include": "#macro-substitution"
				},
				{
					"name": "markup.bold.action-line.rest",
					"match": ".*"
				}
			]
		},


		"macro": 
		{
			"patterns": 
			[
				{
					"match": "(\\$\\()(\\s*\\w[\\w\\$]+)(\\))",
					"captures": 
					{
						"1": 
						{
							"name": "constant.regexp"
						},
						"2": 
						{
							"name": "entity.name.class"
						},
						"3": 
						{
							"name": "constant.regexp"
						}
					}
				},
				{
					"match": "(\\$\\(([-\\S]+)\\s*(\\S+)\\s*\\))",
					"captures": 
					{
						"1": 
						{
							"name": "constant.regexp"
						},
						"2": 
						{
							"patterns": 
							[
								{
									"include": "#text-functions"
								},
								{
									"include": "#file-functions"
								},
								{
									"include": "#other-functions"
								}
							]
						},
						"3": 
						{
							"patterns": 
							[
								{
									"include": "#macros"
								}
							]
						}
					}
				}
			]
		},
		"text-functions": 
		{
			"patterns": 
			[
				{
					"comment": "text functions",
					"name": "entity.name.tag",
					"match": "ADDPREFIX|ADDSUFFIX|FILTER-OUT|FILTER|FINDSTRING|FIRSTWORD|FOREACH|JOIN|PATSUBST|SORT|STRIP|SUBST|WORD|WORDS"
				}
			]
		},
		"file-functions": 
		{
			"patterns": 
			[
				{
					"comment": "functions to work with files",
					"name": "entity.name.tag",
					"match": "BASENAME|DIR|FILETYPE|FILEVERSION|NOTDIR|WILDCARD"
				}
			]
		},
		"other-functions": 
		{
			"patterns": 
			[
				{
					"comment": "special function",
					"name": "entity.name.tag",
					"match": "ORIGIN"
				}
			]
		},
		"keywords": 
		{
			"patterns": 
			[
				{
					"comment": "TARGET : SOURCE",
					"name": "keyword.control.mms",
					"match": "(?i)\\bDEPENDS_ON\\b|\\bADDITIONALLY_DEPENDS_ON\\b|\\s:\\s|\\s::\\s"
				}
			]
		},
		"strings": 
		{
			"name": "string.quoted.double.mms",
			"begin": "\"",
			"end": "\"",
			"patterns": 
			[
				{
					"name": "constant.character.escape.mms",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.mms"
}